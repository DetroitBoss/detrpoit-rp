// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"mVNW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ALERTS_SETTINGS = void 0;
const ALERTS_SETTINGS = exports.ALERTS_SETTINGS = {
  boxgame: "Оповещения о поиске сумки на карте",
  background: "Начальная музыка",
  startVoice: "Голосовое приветствие",
  hudHotkeys: "Подсказки в худе",
  opacityChat: "Затухание неактивного чата",
  questLines: "Отображение сюжетной линии",
  enableIntro: "Отображение интро при входе",
  enableChat: "Отображать текстовый чат",
  hitMaker: "Отображение наносимого урона",
  personalHitMarker: "Отображение наносимого Вам урона"
};
},{}],"jPpR":[function(require,module,exports) {
const entitiesPrototypes = [mp.Checkpoint.prototype, mp.Colshape.prototype, mp.Marker.prototype, mp.Object.prototype, mp.Ped.prototype, mp.Pickup.prototype, mp.Player.prototype, mp.TextLabel.prototype, mp.Vehicle.prototype, mp.DummyEntity.prototype];
function extendEntity(key, func) {
  for (let prototype of entitiesPrototypes) {
    prototype[key] = func;
  }
}
extendEntity('getCoordsAutoAlive', function () {
  return this.getCoords(this.getHealth() > 0);
});
},{}],"DPuw":[function(require,module,exports) {
"use strict";

require("./EntityMpExtensions");
},{"./EntityMpExtensions":"jPpR"}],"vBRx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.distinctArray = distinctArray;
exports.getRandomInt = getRandomInt;
exports.paginate = paginate;
exports.takeElements = exports.randomArrayElementIndex = exports.randomArrayElement = void 0;
function randEl(arr, length = 1) {
  if (arr.length == 0) return null;
  const newArr = [...arr];
  if (length > 1) {
    let resArr = [];
    for (let id = 0; id < length; id++) {
      let id = getRandomInt(0, newArr.length - 1);
      resArr.push(newArr[id]);
      newArr.splice(id, 1);
    }
    return resArr;
  } else {
    return newArr[getRandomInt(0, newArr.length - 1)];
  }
}
const randomArrayElement = exports.randomArrayElement = randEl;
function distinctArray(array, getKeyFunc) {
  return [...new Map(array.map(element => [getKeyFunc(element), element])).values()];
}
const randomArrayElementIndex = data => {
  if (data.length === 0) return -1;
  return getRandomInt(0, data.length - 1);
};
exports.randomArrayElementIndex = randomArrayElementIndex;
function takeArrayElements(array, amount) {
  const elements = [];
  for (let i = 0; i < amount; i++) {
    if (i >= array.length) {
      break;
    }
    elements.push(array[i]);
  }
  return elements;
}
const takeElements = exports.takeElements = takeArrayElements;
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function paginate(array, page_size, page_number) {
  return array.slice((page_number - 1) * page_size, page_number * page_size);
}
},{}],"N668":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QUEST_SPAWN_ITEM = exports.QUEST_BOT_DATA = exports.QUESTS_DATA = void 0;
const QUEST_SPAWN_ITEM = exports.QUEST_SPAWN_ITEM = [{
  x: -201.65,
  y: -797.10,
  z: 30.45,
  h: 223,
  questID: 1
}, {
  x: -1057.11,
  y: -855.24,
  z: 4.87,
  h: 151,
  questID: 500
}, {
  x: -519.57,
  y: -258.77,
  z: 35.59,
  h: 28
}];
const QUESTS_DATA = exports.QUESTS_DATA = [{
  id: 1,
  name: "Знакомство со Стэнли",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }, {
    type: "item",
    value: 850
  }],
  taskStepByStep: true,
  nextQuest: 2,
  botData: {
    id: 0,
    dialogStart: ['Слышь! Я бы не советовал здесь так ошиваться. Места это не тихие.. ', {
      answers: ['Я тут недалеко работаю.'],
      onAnswer: () => {
        return ['Аа.. тебе работка нужна? Ну ты же понимаешь чем мы тут занимаемся? Мне нужно передать один пакетик своему старому корешу, да самому не безопасно, так как легавые давно пасут. Если хочешь доказать, что на что-то способен, то вот зиплок, замотанный изолентой. Доставь его Россу. Скажи, что это от Стэнли, да сам не вздумай открывать его, координаты указаны на пакете. Арендуй мопед или велик за углом.', {
          answers: ['Понял, скоро вернусь.']
        }];
      }
    }],
    dialogComplete: [`К легавым ты не пошёл.. Да и сам пакет не вскрыл.. А из тебя может что-нибудь и получиться. Но пока рано об этом думать. В любом случае ты рисковал, не зная, что в пакете и заслужил награду`, {
      answers: ['Приятно было помочь тебе'],
      onAnswer: index => 2
    }]
  },
  tasks: [{
    nameTask: 'Найдите Стэнли',
    descTask: 'Найдите квестового персонажа',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Найти Росса',
    descTask: 'Найти Росса можно на карте',
    type: "delivertonpc",
    name: "Росс",
    role: "",
    dialog: ['Чего нужно??', {
      answers: ['Я от Стэнли'],
      onAnswer: () => {
        return ['Оу.. ты от Стэнли?', {
          answers: ['У меня тут пакет для тебя. Держи!'],
          onAnswer: () => {
            return ['Лады, пацан. *взял пакет, открыл его, достал оттуда кусок бумаги и прочел вслух*: Братан, это проверка моего нового помощника, и если пакет не был вскрыт до тебя, то пожми руку этому оборванцу, он справился с заданием.', {
              answers: ['Все нормально? Я могу идти?'],
              onAnswer: () => {
                return ['Охх.. Типичный Стэнли, всегда что-нибудь придумает, когда взбредёт в голову заняться наставничеством и помогать таким бедолагам. Езжай обратно, я передам ему, что всё хорошо.', {
                  answers: ['Окей, рад был познакомится.']
                }];
              }
            }];
          }
        }];
      }
    }],
    model: "a_m_m_paparazzi_01",
    x: 446.59,
    y: -1231.38,
    z: 29.94,
    h: 288,
    itemName: "Закрытый пакет",
    blipData: {
      x: 446.59,
      y: -1231.38,
      text: "Росс",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 2,
  name: "На связи",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }],
  taskStepByStep: true,
  nextQuest: 3,
  botData: {
    id: 0,
    dialogStart: ['Пока ты только встаешь на ноги, буду помогать тебе с деньгами, потом ещё отработаешь. Чтобы быть всегда на связи держи мобилу. Съезди купи себе сим-карту и вставь в телефон, она продается в любом магазине электроники.', {
      answers: ['Что бы я без тебя делал? Скоро вернусь.']
    }],
    dialogComplete: ['Дай мне свой номер, вот тебе 500$, кинешь себе на счёт, чтобы всегда быть на связи. Не забудь активировать сим-карту, вставь ее и ознакомься с функциями телефона.', {
      answers: ['Окей, понял.'],
      onAnswer: index => 3
    }]
  },
  tasks: [{
    nameTask: 'Купить сим-карту',
    descTask: 'Направляйтесь в любой магазин электроники',
    type: "itemHave",
    item_id: 851,
    blipData: {
      x: -658.13,
      y: -853.86,
      text: "Магазин электроники",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 3,
  name: "Получение документов",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }],
  taskStepByStep: true,
  nextQuest: 4,
  botData: {
    id: 0,
    dialogStart: ['Если хочешь продолжить работать со мною, то тебе понадобятся документы.', {
      answers: ['Где их можно достать?.'],
      onAnswer: () => {
        return ['Ты пока чист, поэтому подделывать их не нужно. Отправляйся в здание правительства, веди себя нормально и получи себе ID-card, так как если будут проблемы с легавыми, то без неё вопросов станет ещё больше.', {
          answers: ['Понял, скоро вернусь с документами!']
        }];
      }
    }],
    dialogComplete: [`Я смотрю всё прошло хорошо?`, {
      answers: ['Да, всё клёво'],
      onAnswer: idnex => 4
    }]
  },
  tasks: [{
    nameTask: 'Получение документов',
    descTask: 'ID Card - это универсальный документ который можно получить в мэрии!',
    type: "itemHave",
    item_id: 800,
    blipData: {
      x: -541.83,
      y: -209.09,
      text: "Правительство",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 1
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 4,
  name: "Знакомство с районом",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }],
  taskStepByStep: true,
  nextQuest: 5,
  botData: {
    id: 0,
    dialogStart: ['Поздравляю с чистой работой, но такая будет не всегда. Возьми 500$ и купи себе энергетик и чипсы похавать, а то выглядишь не очень.', {
      answers: ['А куда можно сходить?'],
      onAnswer: () => {
        return ['За углом есть магазин 24 часа маркет, как освоешься возращайся ко мне.', {
          answers: ['Спасибо Стэнли!']
        }];
      }
    }],
    dialogComplete: ['Осмотрелся? Как тебе наш район?', {
      answers: ['Да, всё клёво'],
      onAnswer: index => 5
    }]
  },
  tasks: [{
    nameTask: 'Купить Энергетик',
    descTask: 'Купить энергетик в любом магазине 24/7',
    type: "itemHave",
    item_id: 7,
    blipData: {
      x: 28.92,
      y: -1350.07,
      text: "Магазин 24/7",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Купить чипсы',
    descTask: 'Купить чипсы в любом магазине 24/7',
    type: "itemHave",
    item_id: 21
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 5,
  name: "Работа у Тони",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }],
  taskStepByStep: true,
  nextQuest: 6,
  botData: {
    id: 0,
    dialogStart: ['Тут мой кореш звонил - Тони, он работает на ферме у местного авторитета, сходи к нему, он просил надежного парня найти.', {
      answers: ['Далеко она находится? Как туда лучше добраться ?'],
      onAnswer: () => {
        return ['За углом есть аренда.', {
          answers: ['Понял, скоро буду']
        }];
      }
    }],
    dialogComplete: ['Тони звонил, сказал что ты хороший работник, попросил выдать тебе премию', {
      answers: ['Да, пришлось немного приложить усилий, но деньги хорошие.'],
      onAnswer: index => 6
    }]
  },
  tasks: [{
    nameTask: 'Заработайте первые деньги',
    descTask: 'Направляйтесь в гараж Тони и заработайте $700',
    type: "jobFarm",
    job: "marihuana",
    amount: 700,
    blipData: {
      x: 1966.38,
      y: 5184.26,
      text: "Гараж Тони",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 6,
  name: "Получение лицензии",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 1000
  }],
  taskStepByStep: true,
  nextQuest: 7,
  botData: {
    id: 0,
    dialogStart: ['А руки растут откуда надо. Деньги эти ещё пригодятся. Всегда лучше иметь при себе немного нала. Так же нам предстоит много гонять, поэтому без прав никуда. После от копов проблем будет больше. Вот тебе 1.000$, направляйся в автошколу и получи права.', {
      answers: ['Спасибо Стэнли! До скорой встречи.']
    }],
    dialogComplete: ['Молодец, ты хороший водитель', {
      answers: ['Я знаю брат'],
      onAnswer: index => 7
    }]
  },
  tasks: [{
    nameTask: 'Получение прав',
    descTask: 'Направляйтесь в автошколу чтоб получить водительские права',
    type: "licenseHave",
    license: "car",
    blipData: {
      x: -711.94,
      y: -1299.51,
      text: "Автошкола",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 7,
  name: "Плати везде",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }, {
    type: "item",
    value: 813
  }],
  nextQuest: 8,
  taskStepByStep: true,
  botData: {
    id: 0,
    dialogStart: ['Что бы двигаться в этом городе, тебе нужна банковская карта. Оформи ее в любом банке, через нее в будущем будем отмывать бабки.', {
      answers: ['Отмывать бабки круто, скоро вернусь.']
    }],
    dialogComplete: ['Оформил карту?', {
      answers: ['Да, все прошло нормально.'],
      onAnswer: index => 8
    }]
  },
  tasks: [{
    nameTask: 'Оформите банковскую карту',
    descTask: 'Направляйтесь в банк',
    type: "itemHave",
    item_id: 801,
    blipData: {
      x: 151.19,
      y: -1037.22,
      text: "Банк",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 8,
  name: "Опасный район",
  desc: "Описание",
  reward: [{
    type: "license",
    value: 15,
    licenseType: "weapon"
  }, {
    type: "item",
    value: 813
  }],
  taskStepByStep: true,
  nextQuest: 9,
  botData: {
    id: 0,
    dialogStart: ['Я говорил про небезопасное место, без валыны тут никто не ходит. Ты уже имеешь некоторые связи, но отбитых здесь всегда хватало. Чтобы всё те же легавые не трогали тебя, купи себе лицензию на оружие. Так почти всегда будешь перед ними чист, я уже попросил Росса сделать тебе лицензии, он оставил их под мусорным баком.', {
      answers: ['Я мигом.']
    }],
    dialogComplete: ['Открыл уже конверт?', {
      answers: ['Да, все круто.'],
      onAnswer: index => 9
    }]
  },
  tasks: [{
    nameTask: 'Заберите лицензию на оружие',
    descTask: 'Стэнли попросил Росса сделать вам лицензию, заберите ее',
    type: "gotopos",
    x: 446.59,
    y: -1231.38,
    z: 29.94,
    text: "Какой-то конверт",
    blipData: {
      x: 446.59,
      y: -1231.38,
      text: "Конверт с лицензией",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 11
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 9,
  name: "Темные делишки",
  desc: "Описание",
  reward: [{
    type: "item",
    value: 856
  }, {
    type: "cash",
    value: 1000
  }],
  taskStepByStep: true,
  botData: {
    id: 0,
    dialogStart: ['Мне тут еще звонил Ламар, он занимается разборкой тачек в нашем штате. Ему срочно нужна машина, держи отмычки они тебе нужны чтоб вскрыть тачку.', {
      answers: ['Держу путь к Ламару']
    }],
    dialogComplete: ['Чисто сработал, держи тебе планшет, там будет вся твоя важная информация о твоем имуществе. После дела нужно лечь на дно, поэтому заданий пока больше не будет. Держи десятку на первую тачку.', {
      answers: ['Спасибо за планшет, работа была непростая.']
    }]
  },
  tasks: [{
    nameTask: 'Направляйтесь к Ламару.',
    descTask: 'Узнай какую тачку нужно угнать и привези ее к нему.',
    type: "lamar",
    blipData: {
      x: 294.22,
      y: -1187.72,
      text: "Ламар",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Стэнли',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: 21.26,
      y: -1301.40,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 500,
  name: "Проверка на честность",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }, {
    type: "item",
    value: 850
  }],
  taskStepByStep: true,
  nextQuest: 501,
  botData: {
    id: 500,
    dialogStart: ['Приветствую тебя. Ты так ходишь и неуверенно смотришь по сторонам, может тебе нужна помощь? ', {
      answers: ['А чем вы можете мне помочь?'],
      onAnswer: () => {
        return ['Я временами помогаю основаться людям, которые за честный труд и всего хотят добиться сами. Узнать честный ты или нет - очень просто. Вот конверт, в нём 500$ долларов, я должен их за работу своему подчинённому, он как раз сейчас ждёт их. Если ты за честный труд, то отнеси их Аврааму, он в нескольких кварталах отсюда. Или можешь забрать их себе, но тогда мне с тобой больше не о чем разговаривать. Арендуй велосипед тут за углом.', {
          answers: ['Надеюсь что это рядом.']
        }];
      }
    }],
    dialogComplete: ['Ты прошёл проверку, такие люди мне нужны. Мы с тобой ещё много чего добьёмся, хотя я уже и так всего достиг, а сейчас по большей части помогаю сам людям. Ты молодец, что не обманул меня. Я хочу тебя поблагодарить, возьми в дар от меня 500$.', {
      answers: ['Спасибо тебе за работу.'],
      onAnswer: () => 501
    }]
  },
  tasks: [{
    nameTask: 'Найдите Джеффри',
    descTask: 'Найдите квестового персонажа',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Найти Авраама',
    descTask: 'Передайте Аврааму конверт',
    type: "delivertonpc",
    name: "Авраам",
    role: "",
    dialog: ['Оу, моя зарплата? Спасибо тебе большое. Ведь ты мог просто взять мои деньги и сбежать. Видно, что остались здесь порядочные люди. Мой Босс сказал, что хочет видеть тебя и помочь, поэтому возвращайся к нему', {
      answers: ['Надеюсь что все хорошо']
    }],
    model: "ig_barry",
    x: -1307.28,
    y: -833.50,
    z: 17.09,
    h: 197,
    itemName: "Конверт с зарплатой",
    blipData: {
      x: -1307.28,
      y: -833.50,
      text: "Авраам",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Джеффри',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 501,
  name: "На связи",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }],
  nextQuest: 502,
  taskStepByStep: true,
  botData: {
    id: 500,
    dialogStart: [' Ну и согласись, куда сейчас без телефона? Держи, тебе нужно только купить SIM-карту Они есть в любом магазине электроники. Быть на связи сейчас важно.', {
      answers: ['Что бы я без тебя делал? Скоро вернусь.']
    }],
    dialogComplete: ['У тебя на балансе уже есть немного денег, на первое время хватит.', {
      answers: ['Принял.'],
      onAnswer: index => 502
    }]
  },
  tasks: [{
    nameTask: 'Купить сим-карту',
    descTask: 'Направляйтесь в любой магазин электроники',
    type: "itemHave",
    item_id: 851,
    blipData: {
      x: -658.13,
      y: -853.86,
      text: "Магазин электроники",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Джеффри',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 502,
  name: "Получение документов",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 1000
  }],
  nextQuest: 503,
  taskStepByStep: true,
  botData: {
    id: 500,
    dialogStart: ['В наше время на нормальную работу без ID-card никуда не устроишься. Да и честному человеку нечего скрывать. Отправляйся в мэрию и получи себе документ, удостоверяющий твою личность, а уже после можно будет и о заработке подумать. ', {
      answers: ['А есть тут аренда транспорта рядом?.'],
      onAnswer: () => {
        return ['За углом можешь арендовать мопед или велосипед', {
          answers: ['Понял, скоро вернусь с документами!']
        }];
      }
    }],
    dialogComplete: [`Так уже лучше. Теперь можно и приступить к получению первых денег, которые ты заработаешь своим трудом. Я сам не сразу пришёл к тому, что имею. И у тебя получится, но тут и руками нужно уметь работать.`, {
      answers: ['Согласен'],
      onAnswer: idnex => 503
    }]
  },
  tasks: [{
    nameTask: 'Получение документов',
    descTask: 'ID Card - это универсальный документ который можно получить в мэрии!',
    type: "itemHave",
    item_id: 800,
    blipData: {
      x: -541.83,
      y: -209.09,
      text: "Правительство",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Джеффри',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 503,
  name: "Трудная работа",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 500
  }],
  nextQuest: 504,
  taskStepByStep: true,
  botData: {
    id: 500,
    dialogStart: ['Тут недалеко есть стройка, там всегда нужны рабочие, направляйся туда и заработай немного денег.', {
      answers: ['Пришло время поработать руками.']
    }],
    dialogComplete: ['Ты неплохо потрудился и заработал своим трудом первые деньги. Было непросто, да? ', {
      answers: ['Да, мне даже понравилось'],
      onAnswer: index => 504
    }]
  },
  tasks: [{
    nameTask: 'Заработайте первые деньги',
    descTask: 'Направляйтесь на стройку и заработайте 700$',
    type: "jobFarm",
    job: "builder",
    amount: 700,
    blipData: {
      x: -510.88,
      y: -999.74,
      text: "Стройка",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Джеффри',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 504,
  name: "Питание - залог",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 1000
  }],
  nextQuest: 505,
  taskStepByStep: true,
  botData: {
    id: 500,
    dialogStart: ['Физический труд утомляет, не правда? Предлагаю тебе покушать. Возьми мои 800$ и отправляйся в ближайший магазин 24/7  Купи себе чего-нибудь, а то впереди ещё задания и тяжелая работа', {
      answers: ['Спасибо тебе Джеффри']
    }],
    dialogComplete: ['Как тебе город? Сильно поменялось за столько лет?', {
      answers: ['Да, цены все такие же.'],
      onAnswer: index => 505
    }]
  },
  tasks: [{
    nameTask: 'Купить Энергетик',
    descTask: 'Купить энергетик в любом магазине 24/7',
    type: "itemHave",
    item_id: 7,
    blipData: {
      x: -1227.35,
      y: -902.03,
      text: "Магазин 24/7",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Купить чипсы',
    descTask: 'Купить чипсы в любом магазине 24/7',
    type: "itemHave",
    item_id: 21
  }, {
    nameTask: 'Вернитесь к Джеффри',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 505,
  name: "Получение лицензии",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 2000
  }],
  taskStepByStep: true,
  nextQuest: 506,
  botData: {
    id: 500,
    dialogStart: ['Самое главное -  это права. Про пилота никто не говорит. Если захочешь - выучишься. Но машину водить ты обязан. Без этого сейчас никуда, поэтому езжай в лицензированный центр и сдай на права, и не забудь ознакомится с правилами ПДД', {
      answers: ['Надо бы вспомнить правила.']
    }],
    dialogComplete: [' С правами у тебя открываются огромные возможности. Но залог успеха - это не они. Залог успеха - это ты. Чтобы не зазнаться, когда будешь вертеть миллионами, нужно прочувствовать жизнь в её тяжёлых аспектах', {
      answers: ['Ты прав Джеффри'],
      onAnswer: index => 506
    }]
  },
  tasks: [{
    nameTask: 'Получение прав',
    descTask: 'Направляйтесь в автошколу чтоб получить водительские права',
    type: "licenseHave",
    license: "car",
    blipData: {
      x: -711.94,
      y: -1299.51,
      text: "Автошкола",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Джеффри',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}, {
  id: 506,
  name: "Пластиковая жизнь",
  desc: "Описание",
  reward: [{
    type: "cash",
    value: 4000
  }, {
    type: "item",
    value: 856
  }],
  taskStepByStep: true,
  botData: {
    id: 500,
    dialogStart: ['Что бы не тоскать все свои наличные при себе, тебе лучше завести банковскую карту. Направляйся в любой банк и заведи дебютовую карту', {
      answers: ['Да, платить с помощью карты это намного удобнее, скоро вернусь.']
    }],
    dialogComplete: ['Оформил карту? У меня тут для тебя небольшой подарок - планшет. Он тебе нужен будет в любой твоей будущей организации, так же ты сможешь смотреть в нем все свое имущество.', {
      answers: ['Да, огромное спасибо, думаю что планшет это очень важная вещь.'],
      onAnswer: () => {
        return ['Мы поставили тебя на ноги, пока заданий больше нет. Я оповещу тебя если что то', {
          answers: ['Спасибо за планшет. Было приятно познакомиться с тобой. Джеффри.']
        }];
      }
    }]
  },
  tasks: [{
    nameTask: 'Оформите банковскую карту',
    descTask: 'Направляйтесь в банк',
    type: "itemHave",
    item_id: 801,
    blipData: {
      x: -1214.85,
      y: -326.60,
      text: "Банк",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }, {
    nameTask: 'Вернитесь к Джеффри',
    descTask: 'Завершите квест и заберите награду',
    type: "questBotSpeak",
    blipData: {
      x: -1066.17,
      y: -874.74,
      text: "",
      bliptype: 1,
      blipcolor: 61,
      bliproute: 61
    }
  }]
}];
const QUEST_BOT_DATA = exports.QUEST_BOT_DATA = [{
  id: 0,
  name: '~y~NPC: Джин Детроитович',
  role: "",
  x: -190.55,
  y: -811.15,
  z: 30.45,
  h: 52,
  model: "a_m_m_og_boss_01",
  freeError: "Ничего не подскажу, пока!"
}, {
  id: 500,
  name: 'Джеффри Порт',
  role: "",
  x: -1066.17,
  y: -874.74,
  z: 4.98,
  h: 332,
  model: "s_m_m_fiboffice_01",
  freeError: "Здравствуйте, извините у меня разговор по телефону."
}];
},{}],"SNxO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.systemUtil = void 0;
var _arrays = require("./arrays");
var _quests = require("./quests");
function drawPoint(point, point2, range) {
  if (!point.z) point.z = 0;
  if (!point2.z) point2.z = 0;
  const middle = systemUtil.middlePoint3d(point, point2);
  const distance = systemUtil.distanceToPos(point, point2);
  const shortX = (point2.x - point.x) / distance * (range / 2);
  const shortY = (point2.y - point.y) / distance * (range / 2);
  const shortZ = (point2.z - point.z) / distance * (range / 2);
  const target = {
    x: middle.x - shortX,
    y: middle.y - shortY,
    z: middle.z - shortZ
  };
  const target2 = {
    x: middle.x + shortX,
    y: middle.y + shortY,
    z: middle.z + shortZ
  };
  return [target, target2];
}
function offsetPosition(position, rotation, offset) {
  if (typeof rotation == "number") rotation = new mp.Vector3(0, 0, rotation);
  const _rotation = new mp.Vector3(rotation.x / 180 * Math.PI, rotation.y / 180 * Math.PI, rotation.z / 180 * Math.PI);
  const cos_rx = Math.cos(_rotation.x);
  const cos_ry = Math.cos(_rotation.y);
  const cos_rz = Math.cos(_rotation.z);
  const sin_rx = Math.sin(_rotation.x);
  const sin_ry = Math.sin(_rotation.y);
  const sin_rz = Math.sin(_rotation.z);
  return new mp.Vector3(position.x + offset.x * cos_ry * cos_rz - offset.x * sin_rx * sin_ry * sin_rz - offset.y * cos_rx * sin_rz + offset.z * sin_ry * cos_rz + offset.z * sin_rx * cos_ry * sin_rz, position.y + offset.x * cos_ry * sin_rz + offset.x * sin_rx * sin_ry * cos_rz + offset.y * cos_rx * cos_rz + offset.z * sin_ry * sin_rz - offset.z * sin_rx * cos_ry * cos_rz, position.z - offset.x * cos_rx * sin_ry + offset.y * sin_rx + offset.z * cos_rx * cos_ry);
}
;
function degrees_to_radians(degrees) {
  return degrees * (Math.PI / 180);
}
class systemUtil {
  static round(number, round = 2) {
    return +number.toFixed(round);
  }
  static radian(degrees) {
    if (typeof degrees === 'number') return degrees_to_radians(degrees);else return {
      x: degrees_to_radians(degrees.x),
      y: degrees_to_radians(degrees.y),
      z: degrees_to_radians(degrees.z)
    };
  }
  static insidePolygon(point, vs) {
    var x = point[0],
      y = point[1];
    var inside = false;
    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
      var xi = vs[i][0],
        yi = vs[i][1];
      var xj = vs[j][0],
        yj = vs[j][1];
      var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) inside = !inside;
    }
    return inside;
  }
  static lerpVectors(vector1, vector2, amount) {
    return new mp.Vector3(this.lerp(vector1.x, vector2.x, amount), this.lerp(vector1.y, vector2.y, amount), this.lerp(vector1.z, vector2.z, amount));
  }
  static lerp2d(vector1, vector2, amount) {
    return {
      x: this.lerp(vector1.x, vector2.x, amount),
      y: this.lerp(vector1.y, vector2.y, amount)
    };
  }
  static lerp(value1, value2, amount) {
    amount = amount < 0 ? 0 : amount;
    amount = amount > 1 ? 1 : amount;
    return value1 + (value2 - value1) * amount;
  }
  static flatten(arr) {
    return arr.reduce((flat, toFlatten) => {
      return flat.concat(Array.isArray(toFlatten) ? this.flatten(toFlatten) : toFlatten);
    }, []);
  }
  static sortArray(array, type = "DESC") {
    return array.sort((a, b) => {
      let res = 0;
      if (type !== "DESC") {
        if (a < b) res = -1;else if (a > b) res = 1;
      } else {
        if (a < b) res = 1;else if (a > b) res = -1;
      }
      return res;
    });
  }
  static spliceArrayByArray(arrayToSplice, spliceArray, predictFunc) {
    if (!predictFunc) {
      predictFunc = (a, b) => a === b;
    }
    spliceArray.forEach(item => {
      const idx = arrayToSplice.findIndex(sourceItem => predictFunc(sourceItem, item));
      if (idx === -1) {
        return;
      }
      arrayToSplice.splice(idx);
    });
  }
  static chunkArray(array, chunkSize) {
    return [].concat.apply([], array.map(function (elem, i) {
      return i % chunkSize ? [] : [array.slice(i, i + chunkSize)];
    }));
  }
  static sortArrayObjects(array, param) {
    return array.sort((a, b) => {
      let res = 0;
      param.map(q => {
        if (res != 0) return;
        const aval = a[q.id];
        const bval = b[q.id];
        if (q.type !== "DESC") {
          if (aval < bval) res = -1;else if (aval > bval) res = 1;
        } else {
          if (aval < bval) res = 1;else if (aval > bval) res = -1;
        }
      });
      return res;
    });
  }
  static filterInput(text) {
    if (!text) return text;
    if (typeof text !== "string") text = String(text);
    if (!text.length) return text;
    text = text.toString().replace(/[^A-Za-zА-Яа-яЁёЇїІі0-9 \-,.?/!%()$_*+=#№@;:<>{}\[\]]/g, '');
    text = text.toString().replace(/<([^>]*)>?/gm, '$1');
    text = text.toString().replace(/"/g, '');
    text = text.toString().replace(/'/g, '');
    return text;
  }
  static secondsToString(duration) {
    let hrs = ~~(duration / 3600);
    let mins = ~~(duration % 3600 / 60);
    let secs = ~~duration % 60;
    let ret = "";
    if (hrs > 0) {
      ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
    }
    ret += "" + mins + ":" + (secs < 10 ? "0" : "");
    ret += "" + secs;
    return ret;
  }
  static msecondsToString(duration) {
    let ms = duration % 1000;
    return `${this.secondsToString(duration - ms)}${ms ? `:${ms < 10 ? '0' : ''}${ms < 100 ? '0' : ''}${ms}` : `000`}`;
  }
  static componentToHex(c) {
    var hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
  }
  static rgbToHex(r, g, b) {
    return "#" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);
  }
  static hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }
  static encryptCodes(content, passcode) {
    var result = [];
    var passLen = passcode.length;
    for (var i = 0; i < content.length; i++) {
      var passOffset = i % passLen;
      var calAscii = content.charCodeAt(i) + passcode.charCodeAt(passOffset);
      result.push(calAscii);
    }
    return JSON.stringify(result);
  }
  static decryptCodes(content, passcode) {
    var result = [];
    var str = '';
    var codesArr = JSON.parse(content);
    var passLen = passcode.length;
    for (var i = 0; i < codesArr.length; i++) {
      var passOffset = i % passLen;
      var calAscii = codesArr[i] - passcode.charCodeAt(passOffset);
      result.push(calAscii);
    }
    for (var i = 0; i < result.length; i++) {
      var ch = String.fromCharCode(result[i]);
      str += ch;
    }
    return str;
  }
  static middlePoint2d(...points) {
    return {
      x: points.map(q => q.x).reduce((sum, current) => {
        return sum + current;
      }) / points.length,
      y: points.map(q => q.y).reduce((sum, current) => {
        return sum + current;
      }) / points.length
    };
  }
  static middlePoint3d(...points) {
    return {
      x: points.map(q => q.x).reduce((sum, current) => {
        return sum + current;
      }) / points.length,
      y: points.map(q => q.y).reduce((sum, current) => {
        return sum + current;
      }) / points.length,
      z: points.map(q => q.z).reduce((sum, current) => {
        return sum + current;
      }) / points.length
    };
  }
  static getTime(ms = false) {
    let dateTime = new Date();
    return `${this.digitFormat(dateTime.getHours())}:${this.digitFormat(dateTime.getMinutes())}:${this.digitFormat(dateTime.getSeconds())}` + (ms ? `:${this.digitFormat(dateTime.getMilliseconds())}` : '');
  }
  static get fullDateTime() {
    let dateTime = new Date();
    return `${this.digitFormat(dateTime.getDate())}.${this.digitFormat(dateTime.getMonth() + 1)}.${this.digitFormat(dateTime.getFullYear())} ${this.digitFormat(dateTime.getHours())}:${this.digitFormat(dateTime.getMinutes())}`;
  }
  static timeStampString(time, full = false) {
    let dateTimeNow = new Date();
    let dateTime = new Date(time * 1000);
    let res = `${this.digitFormat(dateTime.getHours())}:${this.digitFormat(dateTime.getMinutes())}`;
    if (full || dateTimeNow.getDate() != dateTime.getDate() || dateTimeNow.getMonth() != dateTime.getMonth() || dateTimeNow.getFullYear() != dateTime.getFullYear()) res = `${this.digitFormat(dateTime.getDate())}.${this.digitFormat(dateTime.getMonth() + 1)}${dateTimeNow.getFullYear() != dateTime.getFullYear() || full ? `.${this.digitFormat(dateTime.getFullYear())}` : ""} ` + res;
    return res;
  }
  static timeStampStringDate(time) {
    let dateTime = new Date(time * 1000);
    return `${this.digitFormat(dateTime.getDate())}.${this.digitFormat(dateTime.getMonth() + 1)}.${this.digitFormat(dateTime.getFullYear())}`;
  }
  static timeStampStringTime(time) {
    let dateTime = new Date(time * 1000);
    return `${this.digitFormat(dateTime.getHours())}:${this.digitFormat(dateTime.getMinutes())}`;
  }
  static timeStampStringTimeInMinutes(time) {
    let dateTime = new Date(time * 1000);
    return `${this.digitFormat(dateTime.getMinutes())}:${this.digitFormat(dateTime.getSeconds())}`;
  }
  static sleep(time = 1000) {
    return new Promise((resolve, reject) => setTimeout(resolve, time));
  }
  static randomStr(len, arr = '1234567890abcdefghijklmnopqrstuvwxyABCDEFGHIJKLMNOPQRSTUVWXY') {
    var ans = '';
    for (var i = len; i > 0; i--) {
      ans += arr[Math.floor(Math.random() * arr.length)];
    }
    return ans;
  }
  static randomNumber(len) {
    if (!len) len = 7;
    let string = this.randomStr(len, '1234567890');
    if (string[0] === "0") string = string.replace(/^.{1}/g, '1');
    return parseInt(string);
  }
  static digitFormat(number) {
    return ('0' + number).slice(-this.biggestNumber(number.toString().length, 2));
  }
  static onlyNumber(str) {
    return /^\d+$/.test(str);
  }
  static biggestNumber(number1, number2) {
    if (number1 >= number2) return number1;else return number2;
  }
  static smallestNumber(number1, number2) {
    if (number1 < number2) return number1;else return number2;
  }
  static createBlip(type, color, position, name, dimension = 0, shortRange = true) {
    return mp.blips.new(type, new mp.Vector3(position.x, position.y, position.z || 0.0), {
      shortRange,
      scale: this.blipBaseScale,
      color,
      name,
      dimension
    });
  }
  static getRandomSpawn() {
    return (0, _arrays.randomArrayElement)([[new mp.Vector3(-1037.72, -2737.72, 20.17), 330]]);
  }
  static getDataByQuest(index) {
    return _quests.QUEST_SPAWN_ITEM.find(q => q.questID === index);
  }
  static getDataByQuestLine(index) {
    return _quests.QUEST_SPAWN_ITEM[index];
  }
  static parseInt(val) {
    if (typeof val === "string") return parseInt(val);else Math.floor(val);
  }
  static parseFloat(str) {
    if (typeof str == "string") str = parseFloat(str);else str = parseFloat(str.toFixed(2));
    if (isNaN(str)) str = 0;
    return str;
  }
  static numberFormat(num, replaceIntEnd = true) {
    if (typeof num !== "number") num = Number(num);
    let n = num.toFixed(2);
    if (replaceIntEnd) n = n.replace('.00', '');
    return n.replace(/.+?(?=\D|$)/, function (f) {
      return f.replace(/(\d)(?=(?:\d\d\d)+$)/g, "$1 ");
    });
  }
  static formatTime(timeS) {
    const minutes = Math.floor(timeS / 60);
    const seconds = timeS % 60;
    return `${this.digitFormat(minutes)}:${this.digitFormat(seconds)}`;
  }
  static getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  }
  static getRandomIntStep(min, max, step) {
    const number = this.getRandomInt(min, max);
    const ost = number % step;
    if (ost / step < 0.5) return number - ost;else return number - ost + step;
  }
  static getRandomFloat() {
    return this.getRandomInt(0, 10000) / 10000;
  }
  static daysInMonth(month, year) {
    return new Date(year, month, 0).getDate();
  }
  static distanceToPos(v1, v2) {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2) + Math.pow(v2.z - v1.z, 2)));
  }
  static distanceToPos2D(v1, v2) {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2)));
  }
  static isPointInPoints(point, points, range = 5) {
    return this.isPointInPointsIndex(point, points, range) > -1;
  }
  static isPointInPointsIndex(point, points, range = 5) {
    const is3d = point.z;
    if (is3d) return points.findIndex(p => this.distanceToPos(p, point) <= range);
    return points.findIndex(p => this.distanceToPos2D(p, point) <= range);
  }
  static isPointInRectangle2D(pointPos, firstPos, secondPos) {
    const minX = firstPos.x > secondPos.x ? secondPos.x : firstPos.x;
    const minY = firstPos.y > secondPos.y ? secondPos.y : firstPos.y;
    const maxX = firstPos.x > secondPos.x ? firstPos.x : secondPos.x;
    const maxY = firstPos.y > secondPos.y ? firstPos.y : secondPos.y;
    return pointPos.x >= minX && pointPos.y >= minY && pointPos.x <= maxX && pointPos.y <= maxY;
  }
  static removeQuotes(str) {
    if (typeof str != "string") return str;
    return str.replace('\'', '');
  }
  static getDate() {
    return new Date();
  }
  static getTimeStamp() {
    return Date.now() / 1000 | 0;
  }
  static getTimeStampMS() {
    return Number(new Date());
  }
  static get timestamp() {
    return this.getTimeStamp();
  }
  static getTimeAfter(addOptions) {
    let time = this.timestamp;
    time += addOptions.seconds ? addOptions.seconds : 0;
    time += addOptions.minutes ? addOptions.minutes * 60 : 0;
    time += addOptions.hours ? addOptions.hours * 60 * 60 : 0;
    return time;
  }
  static get timestampMS() {
    return this.getTimeStampMS();
  }
  static generateTransaction(blocksSize = 4, len = 4, arr = '123456789QWERTYUIOPASDFGHJKLZXCVBNM') {
    let block = [];
    for (let id = 0; id < len; id++) block.push(this.randomStr(blocksSize, arr));
    return block.join('_');
  }
  static getWeatherName(type) {
    switch (type) {
      case 'EXTRASUNNY':
      case 'CLEAR':
        return 'Ясно';
      case 'CLOUDS':
        return 'Облачно';
      case 'SMOG':
        return 'Смог';
      case 'FOGGY':
        return 'Туман';
      case 'OVERCAST':
        return 'Пасмурно';
      case 'RAIN':
        return 'Дождь';
      case 'THUNDER':
        return 'Гроза';
      case 'CLEARING':
        return 'Лёгкий дождь';
      case 'SNOW':
        return 'Снег';
      case 'XMAS':
        return 'Снег';
    }
    return 'Ясно';
  }
  static addVectors(v1, v2) {
    return new mp.Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
  }
  static getVector3Mp(sharedVector) {
    return new mp.Vector3(sharedVector.x, sharedVector.y, sharedVector.z);
  }
}
exports.systemUtil = systemUtil;
systemUtil.offsetPosition = offsetPosition;
systemUtil.drawPoint = drawPoint;
systemUtil.blipBaseScale = 0.8;
systemUtil.blipBaseNeeded = 0.9;
systemUtil.TELEPORT_TIME = 1000;
systemUtil.randomArrayElement = _arrays.randomArrayElement;
systemUtil.randomArrayElementIndex = _arrays.randomArrayElementIndex;
},{"./arrays":"vBRx","./quests":"N668"}],"J335":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomEventBase = void 0;
class CustomEventBase {
  static clearRegister(eventName) {
    this.registerHanldes.map((item, index) => {
      if (item[0] === eventName) this.registerHanldes.splice(index, 1);
    });
  }
  static clearRegisterAll() {
    this.registerHanldes = [];
  }
  static register(eventName, handle) {
    this.registerLocalIds = this.registerLocalIds + 1;
    const id = `${this.registerLocalIds}`;
    this.registerHanldes.push([eventName, handle, id]);
    return {
      destroy: () => {
        this.registerHanldes.splice(this.registerHanldes.findIndex(q => q[2] == id), 1);
      }
    };
  }
  static trigger(eventName, ...args) {
    this.registerHanldes.filter(q => q[0] == eventName).map(q => {
      q[1](...args);
    });
  }
  static async call(eventName, ...args) {
    const q = this.registerHanldes.find(q => q[0] == eventName);
    if (q) return await q[1](...args);
    return null;
  }
}
exports.CustomEventBase = CustomEventBase;
CustomEventBase.registerLocalIds = 1;
CustomEventBase.registerHanldes = [];
},{}],"py8h":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomEvent = void 0;
var _custom = require("../../shared/custom.event");
var _user = require("./user");
mp.events.add('setKey', key => {
  CustomEvent.key = key;
});
mp.events.add('alerts:load', () => {
  CustomEvent.triggerCef('setKey', CustomEvent.key);
});
class CustomEvent extends _custom.CustomEventBase {
  static encryptEventName(eventName) {
    return eventName.split('').map(s => (s.charCodeAt(0) ^ CustomEvent.key).toString(16)).join('g');
  }
  static triggerServer(eventName, ...args) {
    mp.events.callRemote('trigger:client', CustomEvent.encryptEventName(eventName), JSON.stringify(args));
  }
  static callServer(eventName, ...args) {
    const requestID = CustomEvent.callServerResponse++;
    return new Promise((resolve, reject) => {
      CustomEvent.requestServerHandle.set(requestID, resolve);
      mp.events.callRemote('call:client', requestID, CustomEvent.encryptEventName(eventName), JSON.stringify(args));
    });
  }
  static triggerCef(eventName, ...args) {
    mp.browsers.forEach(browser => {
      if (browser.eventReady) {
        browser.execute(`customevent.triggerCef('${eventName}', '${JSON.stringify(args)}');`);
      }
    });
  }
  static forceTriggerCef(eventName, ...args) {
    mp.browsers.forEach(browser => {
      browser.execute(`customevent.triggerCef('${eventName}', '${JSON.stringify(args)}');`);
    });
  }
  static registerServer(eventName, handle) {
    this.registerServerEvents.push([eventName, handle]);
  }
  static registerSocket(eventName, handle) {
    this.registerSocketEvents.push([eventName, handle]);
  }
}
exports.CustomEvent = CustomEvent;
CustomEvent.callServerResponse = 1;
CustomEvent.requestServerHandle = new Map();
CustomEvent.callServerResponseCEF = 1;
CustomEvent.requestServerHandleCEF = new Map();
CustomEvent.registerServerEvents = [];
CustomEvent.registerSocketEvents = [];
mp.events.add('socket:server', (event, ...data) => {
  CustomEvent.registerSocketEvents.filter(item => item[0] == event).map(item => {
    item[1](...data);
  });
});
mp.events.add("client:trigger:event", (eventname, argsstring) => triggerEvent(eventname, argsstring));
mp.events.add('toggleEventsLogging', () => {
  enableEventsLogging = !!!enableEventsLogging;
});
let enableEventsLogging = mp.storage.data.enableEventsLoggin;
const eventsCountMap = new Map();
const triggerEvent = async (eventname, argsstring) => {
  if (!eventsCountMap.has(eventname)) {
    eventsCountMap.set(eventname, 0);
  }
  eventsCountMap.set(eventname, eventsCountMap.get(eventname) + 1);
  const events = CustomEvent.registerServerEvents.filter(item => item[0] == eventname);
  if (enableEventsLogging) {
    mp.console.logInfo(`event triggering started: ${eventname}`);
  }
  if (events.length == 0) return mp.console.logError("[CustomEvent] trigger non exists event " + eventname, true);
  events.map(q => {
    try {
      q[1](...JSON.parse(argsstring));
    } catch (error) {
      if (enableEventsLogging) {
        mp.console.logError(`event (${eventname}) catch an error: ${error}`);
      }
    }
  });
  if (enableEventsLogging) {
    mp.console.logInfo(`event triggering ended: ${eventname}`);
  }
};
let splitTrigger = new Map();
mp.events.add("client:trigger:event:split", async (tid, index, last, eventname, argsstring) => {
  const events = CustomEvent.registerServerEvents.filter(item => item[0] == eventname);
  if (events.length == 0) return mp.console.logError("[CustomEvent] trigger split non exists event " + eventname, true);
  if (!splitTrigger.has(`${tid}_${eventname}`)) {
    splitTrigger.set(`${tid}_${eventname}`, []);
  }
  let d = splitTrigger.get(`${tid}_${eventname}`);
  d[index] = argsstring;
  if (last) {
    triggerEvent(eventname, d.join(''));
  } else {
    splitTrigger.set(`${tid}_${eventname}`, d);
  }
});
mp.events.add("client:call:event", async (eventname, requestID, argsstring) => {
  try {
    let q = CustomEvent.registerServerEvents.find(item => item[0] == eventname);
    if (!q) mp.events.callRemote('client:call:event:result', requestID, null);
    let res = await q[1](...JSON.parse(argsstring));
    mp.events.callRemote('client:call:event:result', requestID, res);
  } catch (error) {
    mp.console.logError(error, true);
  }
});
mp.events.add('cef:trigger:event', (eventName, args) => {
  CustomEvent.triggerCef(eventName, ...JSON.parse(args));
});
mp.events.add('call:client:response', (requestID, res) => {
  let resolve = CustomEvent.requestServerHandle.get(requestID);
  if (!resolve) return;
  resolve(res);
});
mp.events.add('call:cef:response', (requestID, res) => {
  mp.browsers.forEach(browser => {
    if (browser.eventReady) browser.execute(`customevent.callServerResponseHandle(${requestID}, '${JSON.stringify(res)}');`);
  });
});
mp.events.add('call:server', (requestID, eventName, ...args) => mp.events.callRemote('call:cef', requestID, CustomEvent.encryptEventName(eventName), ...args));
mp.events.add('call:clientfromcef', async (requestID, eventName, ...args) => {
  const fnd = await CustomEvent.call(eventName, ...args);
  mp.browsers.forEach(browser => {
    if (browser.eventReady) browser.execute(`customevent.callClientResponseHandle(${requestID}, '${JSON.stringify(fnd)}');`);
  });
});
mp.events.add('trigger:server', (name, args) => mp.events.callRemote('trigger:cef', CustomEvent.encryptEventName(name), args));
mp.events.add('testDebug', () => {
  let max = {
    event: 'none',
    count: -1
  };
  for (let key of [...eventsCountMap.keys()]) {
    if (eventsCountMap.get(key) > max.count) {
      max = {
        event: key,
        count: eventsCountMap.get(key)
      };
    }
  }
  _user.user.notify(`event with max count: ${max.event}, (${max.count})`);
  _user.user.notify('test');
});
},{"../../shared/custom.event":"J335","./user":"ggMw"}],"PABs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DynamicBlipBase = void 0;
class DynamicBlipBase {
  constructor(id, type, color, position, name, options) {
    this.id = id;
    this.type = type;
    this.color = color;
    this.position_data = position;
    this.options = options;
    this.name = name;
  }
}
exports.DynamicBlipBase = DynamicBlipBase;
},{}],"TK9Y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DynamicBlip = void 0;
var _custom = require("./custom.event");
var _dynamicBlip = require("../../shared/dynamicBlip");
var _user = require("./user");
var _system = require("./system");
const player = mp.players.local;
_custom.CustomEvent.registerServer('dynamicBlip:load', data => {
  data.map(item => {
    new DynamicBlip(item.id, item.type, item.color, new mp.Vector3(item.pos.x, item.pos.y, item.pos.z), item.name, item.options);
  });
});
_custom.CustomEvent.registerServer('dynamicBlip:updatePos', (id, pos) => {
  const item = DynamicBlip.get(id);
  if (item) item.position = new mp.Vector3(pos.x, pos.y, pos.z);
});
_custom.CustomEvent.registerServer('dynamicBlip:destroy', id => {
  const item = DynamicBlip.get(id);
  if (item) item.destroy();
});
class DynamicBlip extends _dynamicBlip.DynamicBlipBase {
  constructor(id, type, color, _position, name, options) {
    const position = new mp.Vector3(_position.x, _position.y, _position.z);
    if (DynamicBlip.pool.has(id)) {
      mp.console.logError(`Dublicate dynamicBlip with id ${id}`);
      return;
    }
    super(id, type, color, position, name, options);
    DynamicBlip.pool.set(id, this);
  }
  static get(id) {
    return [...this.pool].map(q => q[1]).find(q => q.id === id);
  }
  reload() {
    if (this.blip && mp.blips.exists(this.blip)) {
      this.blip.setPosition(this.position.x, this.position.y, this.position.z);
    }
  }
  get position() {
    return this.position_data;
  }
  set position(val) {
    this.position_data = val;
    this.reload();
  }
  get dimension() {
    return this.options ? this.options.dimension || 0 : 0;
  }
  get fraction() {
    return this.options ? this.options.fraction || 0 : 0;
  }
  get family() {
    return this.options ? this.options.family || 0 : 0;
  }
  get interior() {
    return this.options ? this.options.interior || false : false;
  }
  get range() {
    if (this.options && typeof this.options.range === "number") return this.options.range;
    if (this.interior) return 40;
    return 0;
  }
  get shortRange() {
    return this.options && typeof this.options.shortRange == "boolean" ? this.options.shortRange : true;
  }
  get boxGame() {
    return this.options ? this.options.isForBoxGame || false : false;
  }
  get created() {
    return mp.blips.exists(this.blip);
  }
  set created(val) {
    if (!val) {
      if (mp.blips.exists(this.blip)) this.blip.destroy();
      this.blip = null;
      return;
    } else {
      this.blip = _system.system.createBlip(this.type, this.color, this.position, this.name, this.dimension, this.shortRange);
    }
  }
  removeBlip() {
    if (mp.blips.exists(this.blip)) this.blip.destroy();
  }
  destroy() {
    this.removeBlip();
    DynamicBlip.pool.delete(this.id);
  }
  tick() {
    let access = true;
    if (player.dimension !== this.dimension && this.dimension !== -1) access = false;
    if (access && this.interior && !_user.user.inInterrior) access = false;
    if (access && this.boxGame && !mp.storage.data.alertsEnable.boxgame) access = false;
    if (access && this.range && _system.system.distanceToPos(this.position, player.position) > this.range) access = false;
    if (this.fraction) {
      if (typeof this.fraction === "number") {
        if (_user.user.fraction !== this.fraction && this.fraction !== -1) access = false;
      } else {
        if (!this.fraction.includes(_user.user.fraction)) access = false;
      }
    }
    if (this.family) {
      if (typeof this.family === "number") {
        if (_user.user.family !== this.family && this.family !== -1) access = false;
      } else {
        if (!this.family.includes(_user.user.family)) access = false;
      }
    }
    if (access !== this.created) this.created = access;
  }
}
exports.DynamicBlip = DynamicBlip;
DynamicBlip.pool = new Map();
setInterval(() => {
  if (!_user.user.login) return;
  DynamicBlip.pool.forEach(item => item.tick());
}, 1000);
},{"./custom.event":"py8h","../../shared/dynamicBlip":"PABs","./user":"ggMw","./system":"pi2J"}],"YLDX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clamp = clamp;
exports.drawTextLabel = drawTextLabel;
exports.generateRandomString = generateRandomString;
exports.getColorFromValue = getColorFromValue;
exports.hideHudComponents = hideHudComponents;
exports.textJustification = void 0;
const {
  hideHudComponentThisFrame,
  getHudColour,
  setTextEntry,
  setTextFont,
  setTextScale,
  setTextColour,
  setTextJustification,
  setTextWrap,
  drawText
} = mp.game.ui;
const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const charactersLength = characters.length;
const textJustification = exports.textJustification = {
  center: 0,
  left: 1,
  right: 2
};
function generateRandomString(length = 8) {
  let result = "";
  for (let i = 0; i < length; i++) {
    result += characters[Math.floor(Math.random() * charactersLength)];
  }
  return result;
}
function clamp(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function hideHudComponents() {
  hideHudComponentThisFrame(6);
  hideHudComponentThisFrame(7);
  hideHudComponentThisFrame(8);
  hideHudComponentThisFrame(9);
}
function getColorFromValue(value) {
  if (Array.isArray(value)) {
    return value;
  } else {
    const result = getHudColour(value, 0, 0, 0, 0);
    return [result.r, result.g, result.b, result.a];
  }
}
function drawTextLabel(label, position, options) {
  const {
    font = 0,
    color = [240, 240, 240, 255],
    scale = 0.5,
    justification = textJustification.center,
    wrap,
    shadow,
    outline
  } = options || {};
  setTextFont(font);
  setTextScale(0.0, scale);
  setTextColour(color[0], color[1], color[2], color[3]);
  setTextJustification(justification);
  if (wrap) {
    setTextWrap(0.0, wrap);
  }
  if (shadow) {
    mp.game.invoke("0x1CA3E9EAC9D93E5E");
  }
  if (outline) {
    mp.game.invoke("0x2513DFB0FB8400FE");
  }
  setTextEntry(label);
  drawText(position[0], position[1]);
}
},{}],"Sqs5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  gfxAlignWidth: 0.952,
  gfxAlignHeight: 0.949,
  initialX: 0.795,
  initialY: 0.923,
  initialBusySpinnerY: 0.887,
  bgBaseX: 0.874,
  progressBaseX: 0.913,
  checkpointBaseX: 0.9445,
  bgOffset: 0.008,
  bgThinOffset: 0.012,
  textOffset: -0.005,
  playerTitleOffset: -0.005,
  barOffset: 0.012,
  checkpointOffsetX: 0.0094,
  checkpointOffsetY: 0.012,
  timerBarWidth: 0.165,
  timerBarHeight: 0.035,
  timerBarThinHeight: 0.028,
  timerBarMargin: 0.0399,
  timerBarThinMargin: 0.0319,
  progressWidth: 0.069,
  progressHeight: 0.011,
  checkpointWidth: 0.012,
  checkpointHeight: 0.023,
  titleScale: 0.358,
  titleWrap: 0.9,
  textScale: 0.48,
  textWrap: 0.95,
  playerTitleScale: 0.447
};
},{}],"ORIu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timerBarPool = void 0;
var coordsAndSize = _interopRequireWildcard(require("./coordsAndSizes"));
var _TimerBarBase = require("./classes/TimerBarBase");
var _custom = require("../custom.event");
var _system = require("../system");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  gfxAlignWidth,
  gfxAlignHeight,
  initialY,
  initialBusySpinnerY,
  timerBarMargin,
  timerBarThinMargin
} = coordsAndSize.default;
const invoke = mp.game.invoke;
const BUSYSPINNER_IS_ON = "0xD422FCC5F239A915";
const SET_SCRIPT_GFX_ALIGN = "0xB8A850F20A067EB6";
const SET_SCRIPT_GFX_ALIGN_PARAMS = "0xF5A2C681787E579D";
const RESET_SCRIPT_GFX_ALIGN = "0xE3A3DB414A373DAB";
let timerBarPoolArr = [];
let lastSendData = [];
setInterval(() => {
  let data = [];
  timerBarPoolArr.map(item => {
    if (item.hidden) return;
    let text = _system.system.filterInput(item.title);
    let help = item.checkpointArrayBoolean ? item.checkpointArrayBoolean : _system.system.filterInput(item.text) || "";
    let red = item.checkpointArrayBoolean ? false : item.textColor[1] < 100;
    data.push({
      text,
      help,
      red
    });
  });
  if (JSON.stringify(data) !== JSON.stringify(lastSendData)) {
    _custom.CustomEvent.triggerCef('hud:textclass', data);
    lastSendData = data;
  }
}, 200);
const timerBarPool = exports.timerBarPool = {
  add: function (...args) {
    const validTimerBars = args.filter(arg => arg instanceof _TimerBarBase.TimerBarBase);
    timerBarPoolArr.push(...validTimerBars);
  },
  has: function (timerBar) {
    return timerBarPoolArr.includes(timerBar);
  },
  remove: function (timerBar) {
    const idx = timerBarPoolArr.indexOf(timerBar);
    if (idx === -1) return;
    timerBarPoolArr.splice(idx, 1);
  },
  removeById: function (id) {
    const idx = timerBarPoolArr.findIndex(q => q._id === id);
    if (idx === -1) return;
    timerBarPoolArr.splice(idx, 1);
  },
  clear: function () {
    timerBarPoolArr = [];
  }
};
},{"./coordsAndSizes":"Sqs5","./classes/TimerBarBase":"MPzd","../custom.event":"py8h","../system":"pi2J"}],"MPzd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimerBarBase = void 0;
var _util = require("../util");
var coordsAndSize = _interopRequireWildcard(require("../coordsAndSizes"));
var _ = require("..");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  drawSprite
} = mp.game.graphics;
const {
  initialX,
  bgBaseX,
  bgOffset,
  bgThinOffset,
  timerBarWidth,
  timerBarHeight,
  timerBarThinHeight,
  titleScale,
  titleWrap
} = coordsAndSize.default;
class TimerBarBase {
  constructor(title) {
    this.hidden = false;
    this._highlightColor = null;
    this._thin = true;
    this._id = (0, _util.generateRandomString)(8);
    this._enabled = true;
    this._titleGxtName = `TMRB_TITLE_${this._id}`;
    this._title = title;
    this.titleDrawParams = {
      font: 0,
      color: [240, 240, 240, 255],
      scale: titleScale,
      justification: _util.textJustification.right,
      wrap: titleWrap
    };
    mp.game.gxt.set(this._titleGxtName, title);
  }
  exists() {
    return !!this._enabled;
  }
  destroy() {
    this._enabled = false;
    _.timerBarPool.removeById(this._id);
  }
  get title() {
    return this._title;
  }
  get titleColor() {
    return this.titleDrawParams.color;
  }
  get highlightColor() {
    return this._highlightColor;
  }
  set title(value) {
    this._title = value;
    mp.game.gxt.set(this._titleGxtName, value);
  }
  set titleColor(value) {
    this.titleDrawParams.color = (0, _util.getColorFromValue)(value);
  }
  set highlightColor(value) {
    this._highlightColor = value ? (0, _util.getColorFromValue)(value) : null;
  }
  drawBackground(y) {
    y += this._thin ? bgThinOffset : bgOffset;
    if (this._highlightColor) {
      drawSprite("timerbars", "all_white_bg", bgBaseX, y, timerBarWidth, this._thin ? timerBarThinHeight : timerBarHeight, 0.0, this._highlightColor[0], this._highlightColor[1], this._highlightColor[2], this._highlightColor[3]);
    }
    drawSprite("timerbars", "all_black_bg", bgBaseX, y, timerBarWidth, this._thin ? timerBarThinHeight : timerBarHeight, 0.0, 255, 255, 255, 140);
  }
  drawTitle(y) {
    (0, _util.drawTextLabel)(this._titleGxtName, [initialX, y], this.titleDrawParams);
  }
  draw(y) {
    this.drawBackground(y);
    this.drawTitle(y);
  }
  resetGxt() {
    mp.game.gxt.reset(this._titleGxtName);
  }
}
exports.TimerBarBase = TimerBarBase;
;
},{"../util":"YLDX","../coordsAndSizes":"Sqs5","..":"ORIu"}],"CjKg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextTimerBar = void 0;
var _util = require("../util");
var coordsAndSize = _interopRequireWildcard(require("../coordsAndSizes"));
var _TimerBarBase = require("./TimerBarBase");
var _ = require("..");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  initialX,
  textScale,
  textWrap,
  textOffset
} = coordsAndSize.default;
class TextTimerBar extends _TimerBarBase.TimerBarBase {
  constructor(title, text) {
    super(title);
    this._textGxtName = `TMRB_TEXT_${this._id}`;
    this._text = text;
    this.textDrawParams = {
      font: 0,
      color: [240, 240, 240, 255],
      scale: textScale,
      justification: _util.textJustification.right,
      wrap: textWrap
    };
    mp.game.gxt.set(this._textGxtName, text);
    _.timerBarPool.add(this);
  }
  get text() {
    return this._text;
  }
  get textColor() {
    return this.textDrawParams.color;
  }
  set text(value) {
    this._text = value;
    mp.game.gxt.set(this._textGxtName, value);
  }
  set textColor(value) {
    this.textDrawParams.color = (0, _util.getColorFromValue)(value);
  }
  set color(value) {
    this.titleColor = value;
    this.textColor = value;
  }
  draw(y) {
    super.draw(y);
    y += textOffset;
    (0, _util.drawTextLabel)(this._textGxtName, [initialX, y], this.textDrawParams);
  }
  resetGxt() {
    super.resetGxt();
    mp.game.gxt.reset(this._textGxtName);
  }
}
exports.TextTimerBar = TextTimerBar;
;
},{"../util":"YLDX","../coordsAndSizes":"Sqs5","./TimerBarBase":"MPzd","..":"ORIu"}],"WSqW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hudBar = void 0;
var _TextTimerBar = require("./bars/classes/TextTimerBar");
var _system = require("./system");
var _custom = require("./custom.event");
_custom.CustomEvent.registerServer('timer:drawserver', (text, timer) => {
  hudBar.timer(text, timer);
});
const hudBar = exports.hudBar = {
  timer: (text, timer) => {
    let tm = timer + 0;
    const mapTimeBar = new _TextTimerBar.TextTimerBar(text, _system.system.secondsToString(tm));
    let int = setInterval(() => {
      tm--;
      if (tm < 0 || !mapTimeBar.exists) {
        clearInterval(int);
        if (mapTimeBar.exists) mapTimeBar.destroy();
        return;
      }
      if (tm <= 5) {
        mapTimeBar.textColor = [224, 50, 50, 255];
        mapTimeBar.highlightColor = 8;
      }
      mapTimeBar.text = _system.system.secondsToString(tm);
    }, 1000);
    return mapTimeBar;
  },
  showLoading: text => {
    mp.game.gxt.set("TB_TEST_LOADING", text);
    if (!mp.game.invoke("0xD422FCC5F239A915")) {
      mp.game.ui.setLoadingPromptTextEntry("TB_TEST_LOADING");
      mp.game.ui.showLoadingPrompt(1);
    }
  },
  hideLoading: () => {
    mp.game.invoke("0x10D373323E5B9C0D");
  }
};
},{"./bars/classes/TextTimerBar":"CjKg","./system":"pi2J","./custom.event":"py8h"}],"iqLK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncShared = void 0;
class SyncShared {
  static handle(key, handle) {
    this.events.push([key, handle]);
  }
  static fireEvent(key, oldValue) {
    const val = this.getData(key);
    this.events.filter(ev => ev[0] === key).map(ev => ev[1](val, oldValue));
  }
  static getData(key) {
    return this.data.get(key);
  }
}
exports.SyncShared = SyncShared;
SyncShared.data = new Map();
SyncShared.events = [];
},{}],"nW4K":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncClass = void 0;
var _sync = require("../../shared/sync");
var _custom = require("./custom.event");
class SyncClass extends _sync.SyncShared {
  static setData(key, value) {
    const old = this.getData(key);
    this.data.set(key, value);
    this.fireEvent(key, old);
  }
  static clearData(key) {
    this.data.delete(key);
    this.fireEvent(key, null);
  }
}
exports.SyncClass = SyncClass;
_custom.CustomEvent.registerSocket('sync:key', (key, value) => {
  SyncClass.setData(key, value);
});
_custom.CustomEvent.registerSocket('sync:clear', key => {
  SyncClass.clearData(key);
});
_custom.CustomEvent.registerSocket('sync:join', data => {
  if (!data) return;
  const val = JSON.parse(data);
  if (!val) return;
  val.map(item => SyncClass.setData(item[0], item[1]));
});
},{"../../shared/sync":"iqLK","./custom.event":"py8h"}],"pi2J":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.system = exports.GLOBAL_DIMENSION = void 0;
var _system = require("../../shared/system");
var _custom = require("./custom.event");
var _user = require("./user");
var _dynamicBlip = require("./dynamicBlip");
var _hudBar = require("./hudBar");
var _sync = require("./sync");
const player = mp.players.local;
const GLOBAL_DIMENSION = exports.GLOBAL_DIMENSION = 4294967295;
class SystemClass extends _system.systemUtil {
  static getHeadingBetweenCoords(from, to) {
    let x = to.x - from.x;
    let y = to.y - from.y;
    let h = 360 - mp.game.gameplay.getHeadingFromVector2d(x, y);
    h -= 180;
    return h < 0 ? 360 + h : h;
  }
  static getWaypointPosition() {
    let pos = new mp.Vector3(0, 0, 0);
    if (mp.game.invoke('0x1DD1F58F493F1DA5')) {
      let blipInfoIdIterator = mp.game.invoke('0x186E5D252FA50E7D');
      for (let index = mp.game.invoke('0x1BEDE233E6CD2A1F', blipInfoIdIterator); mp.game.invoke('0xA6DB27D19ECBB7DA', index); index = mp.game.invoke('0x14F96AA50D6FBEA7', blipInfoIdIterator)) if (mp.game.invoke('0xBE9B0959FFD0779B', index) == 4) pos = mp.game.ui.getBlipInfoIdCoord(index);
      pos.z += 1550;
    }
    return pos;
  }
  static headingToCoord(pos1, pos2) {
    return mp.game.gameplay.getHeadingFromVector2d(pos1.x - pos2.x, pos1.y - pos2.y) + 180;
  }
  static getCurrentSpeed(target = mp.players.local) {
    let speed = 0;
    if (target.isSittingInAnyVehicle()) {
      let velocity = target.vehicle.getVelocity();
      speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z);
      speed = Math.round(speed * 3.6);
    }
    return speed;
  }
  static invoke(name, ...args) {
    return mp.game.invoke(this.natives[name], ...args);
  }
  static invokeVector3(name, ...args) {
    return mp.game.invokeVector3(this.natives[name], ...args);
  }
  static createBlipInterrior(type, color, position, name, dimension = 0, shortRange = false) {
    SystemClass.interriorBlips.push({
      type,
      color,
      name,
      dimension,
      position,
      shortRange
    });
  }
  static createBlipNearest(type, color, position, name, range, dimension = 0, shortRange = false) {
    SystemClass.nearestBlips.push({
      type,
      color,
      name,
      dimension,
      position,
      shortRange,
      range,
      created: false
    });
  }
  static createDynamicBlip(id, type, color, position, name, options) {
    return new _dynamicBlip.DynamicBlip(id, type, color, position, name, options);
  }
  static createPed(pos, heading, model, dimension = 0) {
    return mp.peds.new(typeof model === "string" ? mp.game.joaat(model) : model, pos, heading, dimension);
  }
}
SystemClass.natives = {
  GET_PLAYER_PED: "0x43A66C31C68491C0",
  GET_PLAYER_PED_SCRIPT_INDEX: "0x50FAC3A3E030A6E1",
  SET_PLAYER_MODEL: "0x00A1CADD00108836",
  CHANGE_PLAYER_PED: "0x048189FAC643DEEE",
  GET_PLAYER_RGB_COLOUR: "0xE902EF951DCE178F",
  GET_NUMBER_OF_PLAYERS: "0x407C7F91DDB46C16",
  GET_PLAYER_TEAM: "0x37039302F4E0A008",
  SET_PLAYER_TEAM: "0x0299FA38396A4940",
  GET_PLAYER_NAME: "0x6D0DE6A7B5DA71F8",
  GET_WANTED_LEVEL_RADIUS: "0x085DEB493BE80812",
  GET_PLAYER_WANTED_CENTRE_POSITION: "0x0C92BA89F1AF26F8",
  SET_PLAYER_WANTED_CENTRE_POSITION: "0x520E541A97A13354",
  GET_WANTED_LEVEL_THRESHOLD: "0xFDD179EAF45B556C",
  SET_PLAYER_WANTED_LEVEL: "0x39FF19C64EF7DA5B",
  SET_PLAYER_WANTED_LEVEL_NO_DROP: "0x340E61DE7F471565",
  SET_PLAYER_WANTED_LEVEL_NOW: "0xE0A7D1E497FFCD6F",
  ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP: "0xAFAF86043E5874E9",
  ARE_PLAYER_STARS_GREYED_OUT: "0x0A6EB355EE14A2DB",
  SET_DISPATCH_COPS_FOR_PLAYER: "0xDB172424876553F4",
  IS_PLAYER_WANTED_LEVEL_GREATER: "0x238DB2A2C23EE9EF",
  CLEAR_PLAYER_WANTED_LEVEL: "0xB302540597885499",
  IS_PLAYER_DEAD: "0x424D4687FA1E5652",
  IS_PLAYER_PRESSING_HORN: "0xFA1E2BF8B10598F9",
  SET_PLAYER_CONTROL: "0x8D32347D6D4C40A2",
  GET_PLAYER_WANTED_LEVEL: "0xE28E54788CE8F12D",
  SET_MAX_WANTED_LEVEL: "0xAA5F02DB48D704B9",
  SET_POLICE_RADAR_BLIPS: "0x43286D561B72B8BF",
  SET_POLICE_IGNORE_PLAYER: "0x32C62AA929C2DA6A",
  IS_PLAYER_PLAYING: "0x5E9564D8246B909A",
  SET_EVERYONE_IGNORE_PLAYER: "0x8EEDA153AD141BA4",
  SET_ALL_RANDOM_PEDS_FLEE: "0x056E0FE8534C2949",
  SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME: "0x471D2FF42A94B4F2",
  SET_HUD_ANIM_STOP_LEVEL: "0xDE45D1A1EF45EE61",
  SET_AREAS_GENERATOR_ORIENTATION: "0xC3376F42B1FACCC6",
  SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS: "0x596976B02B6B5700",
  SET_WANTED_LEVEL_MULTIPLIER: "0x020E5F00CDA207BA",
  SET_WANTED_LEVEL_DIFFICULTY: "0x9B0BB33B04405E7A",
  RESET_WANTED_LEVEL_DIFFICULTY: "0xB9D0DD990DC141DD",
  START_FIRING_AMNESTY: "0xBF9BD71691857E48",
  REPORT_CRIME: "0xE9B09589827545E7",
  RESERVE_ENTITY_EXPLODES_ON_HIGH_EXPLOSION_COMBO: "0x9A987297ED8BD838",
  CAN_PLAYER_START_MISSION: "0xDE7465A27D403C06",
  IS_PLAYER_READY_FOR_CUTSCENE: "0x908CBECC2CAA3690",
  IS_PLAYER_TARGETTING_ENTITY: "0x7912F7FC4F6264B6",
  GET_PLAYER_TARGET_ENTITY: "0x13EDE1A5DBF797C9",
  IS_PLAYER_FREE_AIMING: "0x2E397FD2ECD37C87",
  IS_PLAYER_FREE_AIMING_AT_ENTITY: "0x3C06B5C839B38F7B",
  GET_ENTITY_PLAYER_IS_FREE_AIMING_AT: "0x2975C866E6713290",
  SET_PLAYER_LOCKON_RANGE_OVERRIDE: "0x29961D490E5814FD",
  SET_PLAYER_CAN_DO_DRIVE_BY: "0x6E8834B52EC20C77",
  SET_PLAYER_CAN_BE_HASSLED_BY_GANGS: "0xD5E460AD7020A246",
  SET_PLAYER_CAN_USE_COVER: "0xD465A8599DFF6814",
  GET_MAX_WANTED_LEVEL: "0x462E0DB9B137DC5F",
  IS_PLAYER_TARGETTING_ANYTHING: "0x78CFE51896B6B8A4",
  SET_PLAYER_SPRINT: "0xA01B8075D8B92DF4",
  RESET_PLAYER_STAMINA: "0xA6F312FCCE9C1DFE",
  RESTORE_PLAYER_STAMINA: "0xA352C1B864CAFD33",
  GET_PLAYER_SPRINT_STAMINA_REMAINING: "0x3F9F16F8E65A7ED7",
  GET_PLAYER_SPRINT_TIME_REMAINING: "0x1885BC9B108B4C99",
  GET_PLAYER_UNDERWATER_TIME_REMAINING: "0xA1FCF8E6AF40B731",
  GET_PLAYER_GROUP: "0x0D127585F77030AF",
  GET_PLAYER_MAX_ARMOUR: "0x92659B4CE1863CB3",
  IS_PLAYER_CONTROL_ON: "0x49C32D60007AFA47",
  _IS_PLAYER_CAM_CONTROL_DISABLED: "0x7C814D2FB49F40C0",
  IS_PLAYER_SCRIPT_CONTROL_ON: "0x8A876A65283DD7D7",
  IS_PLAYER_CLIMBING: "0x95E8F73DC65EFB9C",
  IS_PLAYER_BEING_ARRESTED: "0x388A47C51ABDAC8E",
  RESET_PLAYER_ARREST_STATE: "0x2D03E13C460760D6",
  GET_PLAYERS_LAST_VEHICLE: "0xB6997A7EB3F5C8C0",
  GET_PLAYER_INDEX: "0xA5EDC40EF369B48D",
  INT_TO_PLAYERINDEX: "0x41BD2A6B006AF756",
  INT_TO_PARTICIPANTINDEX: "0x9EC6603812C24710",
  GET_TIME_SINCE_PLAYER_HIT_VEHICLE: "0x5D35ECF3A81A0EE0",
  GET_TIME_SINCE_PLAYER_HIT_PED: "0xE36A25322DC35F42",
  GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT: "0xD559D2BE9E37853B",
  GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC: "0xDB89591E290D9182",
  IS_PLAYER_FREE_FOR_AMBIENT_TASK: "0xDCCFD3F106C36AB4",
  PLAYER_ID: "0x4F8644AF03D0E0D6",
  PLAYER_PED_ID: "0xD80958FC74E988A6",
  NETWORK_PLAYER_ID_TO_INT: "0xEE68096F9F37341E",
  HAS_FORCE_CLEANUP_OCCURRED: "0xC968670BFACE42D9",
  FORCE_CLEANUP: "0xBC8983F38F78ED51",
  FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME: "0x4C68DDDDF0097317",
  FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID: "0xF745B37630DF176B",
  GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP: "0x9A41CF4674A12272",
  SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE: "0x8026FF78F208978A",
  SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE: "0x1DE37BBF9E9CC14A",
  GIVE_ACHIEVEMENT_TO_PLAYER: "0xBEC7076D64130195",
  HAS_ACHIEVEMENT_BEEN_PASSED: "0x867365E111A3B6EB",
  IS_PLAYER_ONLINE: "0xF25D331DC2627BBC",
  IS_PLAYER_LOGGING_IN_NP: "0x74556E1420867ECA",
  DISPLAY_SYSTEM_SIGNIN_UI: "0x94DD7888C10A979E",
  IS_SYSTEM_UI_BEING_DISPLAYED: "0x5D511E3867C87139",
  SET_PLAYER_INVINCIBLE: "0x239528EACDC3E7DE",
  GET_PLAYER_INVINCIBLE: "0xB721981B2B939E07",
  REMOVE_PLAYER_HELMET: "0xF3AC26D3CC576528",
  GIVE_PLAYER_RAGDOLL_CONTROL: "0x3C49C870E66F0A28",
  SET_PLAYER_LOCKON: "0x5C8B2F450EE4328E",
  SET_PLAYER_TARGETING_MODE: "0xB1906895227793F3",
  CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED: "0xF0B67A4DE6AB5F98",
  HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED: "0x20CE80B0C2BF4ACC",
  CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED: "0x4AACB96203D11A31",
  HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED: "0xE4B90F367BD81752",
  SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE: "0xCA7DC8329F0A1E9E",
  SET_SWIM_MULTIPLIER_FOR_PLAYER: "0xA91C6F0FF7D16A13",
  SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER: "0x6DB47AA77FD94E09",
  GET_TIME_SINCE_LAST_ARREST: "0x5063F92F07C2A316",
  GET_TIME_SINCE_LAST_DEATH: "0xC7034807558DDFCA",
  ASSISTED_MOVEMENT_CLOSE_ROUTE: "0xAEBF081FFC0A0E5E",
  ASSISTED_MOVEMENT_FLUSH_ROUTE: "0x8621390F0CDCFE1F",
  SET_PLAYER_FORCED_AIM: "0x0FEE4F80AC44A726",
  SET_PLAYER_FORCED_ZOOM: "0x75E7D505F2B15902",
  SET_PLAYER_FORCE_SKIP_AIM_INTRO: "0x7651BC64AE59E128",
  DISABLE_PLAYER_FIRING: "0x5E6CC07646BBEAB8",
  SET_DISABLE_AMBIENT_MELEE_MOVE: "0x2E8AABFA40A84F8C",
  SET_PLAYER_MAX_ARMOUR: "0x77DFCCF5948B8C71",
  SPECIAL_ABILITY_DEACTIVATE: "0xD6A953C6D1492057",
  SPECIAL_ABILITY_DEACTIVATE_FAST: "0x9CB5CE07A3968D5A",
  SPECIAL_ABILITY_RESET: "0x375F0E738F861A94",
  SPECIAL_ABILITY_CHARGE_SMALL: "0x2E7B9B683481687D",
  SPECIAL_ABILITY_CHARGE_MEDIUM: "0xF113E3AA9BC54613",
  SPECIAL_ABILITY_CHARGE_LARGE: "0xF733F45FA4497D93",
  SPECIAL_ABILITY_CHARGE_CONTINUOUS: "0xED481732DFF7E997",
  SPECIAL_ABILITY_CHARGE_ABSOLUTE: "0xB7B0870EB531D08D",
  SPECIAL_ABILITY_CHARGE_NORMALIZED: "0xA0696A65F009EE18",
  SPECIAL_ABILITY_FILL_METER: "0x3DACA8DDC6FD4980",
  SPECIAL_ABILITY_DEPLETE_METER: "0x1D506DBBBC51E64B",
  SPECIAL_ABILITY_LOCK: "0x6A09D0D590A47D13",
  SPECIAL_ABILITY_UNLOCK: "0xF145F3BE2EFA9A3B",
  IS_SPECIAL_ABILITY_UNLOCKED: "0xC6017F6A6CDFA694",
  IS_SPECIAL_ABILITY_ACTIVE: "0x3E5F7FC85D854E15",
  IS_SPECIAL_ABILITY_METER_FULL: "0x05A1FE504B7F2587",
  ENABLE_SPECIAL_ABILITY: "0x181EC197DAEFE121",
  IS_SPECIAL_ABILITY_ENABLED: "0xB1D200FE26AEF3CB",
  SET_SPECIAL_ABILITY_MULTIPLIER: "0xA49C426ED0CA4AB7",
  START_PLAYER_TELEPORT: "0xAD15F075A4DA0FDE",
  _HAS_PLAYER_TELEPORT_FINISHED: "0xE23D5873C2394C61",
  STOP_PLAYER_TELEPORT: "0xC449EDED9D73009C",
  IS_PLAYER_TELEPORT_ACTIVE: "0x02B15662D7F8886F",
  GET_PLAYER_CURRENT_STEALTH_NOISE: "0x2F395D61F3A1F877",
  SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER: "0x5DB660B38DD98A31",
  SET_PLAYER_WEAPON_DAMAGE_MODIFIER: "0xCE07B9F7817AADA3",
  SET_PLAYER_WEAPON_DEFENSE_MODIFIER: "0x2D83BC011CA14A3C",
  SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER: "0x4A3DC7ECCC321032",
  SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER: "0xAE540335B4ABC4E2",
  SET_PLAYER_VEHICLE_DAMAGE_MODIFIER: "0xA50E117CDDF82F0C",
  SET_PLAYER_VEHICLE_DEFENSE_MODIFIER: "0x4C60E6EFDAFF2462",
  SET_PLAYER_PARACHUTE_TINT_INDEX: "0xA3D0E54541D9A5E5",
  GET_PLAYER_PARACHUTE_TINT_INDEX: "0x75D3F7A1B0D9B145",
  SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX: "0xAF04C87F5DC1DF38",
  GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX: "0xD5A016BC3C09CF40",
  SET_PLAYER_PARACHUTE_PACK_TINT_INDEX: "0x93B0FB27C9A04060",
  GET_PLAYER_PARACHUTE_PACK_TINT_INDEX: "0x6E9C742F340CE5A2",
  SET_PLAYER_HAS_RESERVE_PARACHUTE: "0x7DDAB28D31FAC363",
  GET_PLAYER_HAS_RESERVE_PARACHUTE: "0x5DDFE2FF727F3CA3",
  SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL: "0xF401B182DBA8AF53",
  SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR: "0x8217FD371A4625CF",
  GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR: "0xEF56DBABD3CD4887",
  SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS: "0x11D5F725F0E780E0",
  SET_PLAYER_NOISE_MULTIPLIER: "0xDB89EF50FF25FCE9",
  SET_PLAYER_SNEAKING_NOISE_MULTIPLIER: "0xB2C1A29588A9F47C",
  CAN_PED_HEAR_PLAYER: "0xF297383AA91DCA29",
  SIMULATE_PLAYER_INPUT_GAIT: "0x477D5D63E63ECA5D",
  RESET_PLAYER_INPUT_GAIT: "0x19531C47A2ABD691",
  SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE: "0x9F343285A00B4BB6",
  SET_PLAYER_STEALTH_PERCEPTION_MODIFIER: "0x4E9021C1FCDD507A",
  SET_PLAYER_SIMULATE_AIMING: "0xC54C95DA968EC5B5",
  SET_PLAYER_CLOTH_PIN_FRAMES: "0x749FADDF97DFE930",
  SET_PLAYER_CLOTH_PACKAGE_INDEX: "0x9F7BBA2EA6372500",
  SET_PLAYER_CLOTH_LOCK_COUNTER: "0x14D913B777DFF5DA",
  PLAYER_ATTACH_VIRTUAL_BOUND: "0xED51733DC73AED51",
  PLAYER_DETACH_VIRTUAL_BOUND: "0x1DD5897E2FA6E7C9",
  HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE: "0xD705740BB0A1CF4C",
  IS_PLAYER_RIDING_TRAIN: "0x4EC12697209F2196",
  HAS_PLAYER_LEFT_THE_WORLD: "0xD55DDFB47991A294",
  SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE: "0xD9284A8C0D48352C",
  CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE: "0x0F4CC924CF8C7B21",
  SET_PLAYER_PARACHUTE_MODEL_OVERRIDE: "0x977DB4641F6FC3DB",
  CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE: "0x8753997EB5F6EE3F",
  SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE: "0xDC80A4C2F18A2B64",
  CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE: "0x10C54E4389C12B42",
  DISABLE_PLAYER_VEHICLE_REWARDS: "0xC142BE3BB9CE125F",
  DOES_ENTITY_EXIST: "0x7239B21A38F536BA",
  DOES_ENTITY_BELONG_TO_THIS_SCRIPT: "0xDDE6DF5AE89981D2",
  DOES_ENTITY_HAVE_DRAWABLE: "0x060D6E96F8B8E48D",
  DOES_ENTITY_HAVE_PHYSICS: "0xDA95EA3317CC5064",
  HAS_ENTITY_ANIM_FINISHED: "0x20B711662962B472",
  HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT: "0x95EB9964FF5C5C65",
  HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED: "0x605F5A140F202491",
  HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE: "0xDFD5033FDBA0A9C8",
  HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY: "0xC86D67D52A707CF8",
  HAS_ENTITY_CLEAR_LOS_TO_ENTITY: "0xFCDFF7B72D23A1AC",
  HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT: "0x0267D00AF114F17A",
  HAS_ENTITY_COLLIDED_WITH_ANYTHING: "0x8BAD02F0368D9E14",
  GET_LAST_MATERIAL_HIT_BY_ENTITY: "0x5C3D0A935F535C4C",
  GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY: "0xE465D4AB7CA6AE72",
  FORCE_ENTITY_AI_AND_ANIMATION_UPDATE: "0x40FDEDB72F8293B2",
  GET_ENTITY_ANIM_CURRENT_TIME: "0x346D81500D088F42",
  GET_ENTITY_ANIM_TOTAL_TIME: "0x50BD2730B191E360",
  _GET_ENTITY_ANIM_DURATION: "0xFEDDF04D62B8D790",
  GET_ENTITY_ATTACHED_TO: "0x48C2BED9180FE123",
  GET_ENTITY_COORDS: "0x3FEF770D40960D5A",
  GET_ENTITY_FORWARD_VECTOR: "0x0A794A5A57F8DF91",
  GET_ENTITY_FORWARD_X: "0x8BB4EF4214E0E6D5",
  GET_ENTITY_FORWARD_Y: "0x866A4A5FAE349510",
  GET_ENTITY_HEADING: "0xE83D4F9BA2A38914",
  _GET_ENTITY_PHYSICS_HEADING: "0x846BF6291198A71E",
  GET_ENTITY_HEALTH: "0xEEF059FAD016D209",
  GET_ENTITY_MAX_HEALTH: "0x15D757606D170C3C",
  SET_ENTITY_MAX_HEALTH: "0x166E7CF68597D8B5",
  GET_ENTITY_HEIGHT: "0x5A504562485944DD",
  GET_ENTITY_HEIGHT_ABOVE_GROUND: "0x1DD55701034110E5",
  GET_ENTITY_MATRIX: "0xECB2FC7235A7D137",
  GET_ENTITY_MODEL: "0x9F47B058362C84B5",
  GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS: "0x2274BC1C4885E333",
  GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS: "0x1899F328B0E12848",
  GET_ENTITY_PITCH: "0xD45DC2893621E1FE",
  GET_ENTITY_QUATERNION: "0x7B3703D2D32DFA18",
  GET_ENTITY_ROLL: "0x831E0242595560DF",
  GET_ENTITY_ROTATION: "0xAFBD61CC738D9EB9",
  GET_ENTITY_ROTATION_VELOCITY: "0x213B91045D09B983",
  GET_ENTITY_SCRIPT: "0xA6E9C38DB51D7748",
  GET_ENTITY_SPEED: "0xD5037BA82E12416F",
  GET_ENTITY_SPEED_VECTOR: "0x9A8D700A51CB7B0D",
  GET_ENTITY_UPRIGHT_VALUE: "0x95EED5A694951F9F",
  GET_ENTITY_VELOCITY: "0x4805D2B1D8CF94A9",
  GET_OBJECT_INDEX_FROM_ENTITY_INDEX: "0xD7E3B9735C0F89D6",
  GET_PED_INDEX_FROM_ENTITY_INDEX: "0x04A2A40C73395041",
  GET_VEHICLE_INDEX_FROM_ENTITY_INDEX: "0x4B53F92932ADFAC0",
  GET_WORLD_POSITION_OF_ENTITY_BONE: "0x44A8FCB8ED227738",
  GET_NEAREST_PLAYER_TO_ENTITY: "0x7196842CB375CDB3",
  GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM: "0x4DC9A62F844D9337",
  GET_ENTITY_TYPE: "0x8ACD366038D14505",
  _GET_ENTITY_POPULATION_TYPE: "0xF6F5161F4534EDFF",
  IS_AN_ENTITY: "0x731EC8A916BD11A1",
  IS_ENTITY_A_PED: "0x524AC5ECEA15343E",
  IS_ENTITY_A_MISSION_ENTITY: "0x0A7B270912999B3C",
  IS_ENTITY_A_VEHICLE: "0x6AC7003FA6E5575E",
  IS_ENTITY_AN_OBJECT: "0x8D68C8FD0FACA94E",
  IS_ENTITY_AT_COORD: "0x20B60995556D004F",
  IS_ENTITY_AT_ENTITY: "0x751B70C3D034E187",
  IS_ENTITY_ATTACHED: "0xB346476EF1A64897",
  IS_ENTITY_ATTACHED_TO_ANY_OBJECT: "0xCF511840CEEDE0CC",
  IS_ENTITY_ATTACHED_TO_ANY_PED: "0xB1632E9A5F988D11",
  IS_ENTITY_ATTACHED_TO_ANY_VEHICLE: "0x26AA915AD89BFB4B",
  IS_ENTITY_ATTACHED_TO_ENTITY: "0xEFBE71898A993728",
  IS_ENTITY_DEAD: "0x5F9532F3B5CC2551",
  IS_ENTITY_IN_AIR: "0x886E37EC497200B6",
  IS_ENTITY_IN_ANGLED_AREA: "0x51210CED3DA1C78A",
  IS_ENTITY_IN_AREA: "0x54736AA40E271165",
  IS_ENTITY_IN_ZONE: "0xB6463CF6AF527071",
  IS_ENTITY_IN_WATER: "0xCFB0A0D8EDD145A3",
  GET_ENTITY_SUBMERGED_LEVEL: "0xE81AFC1BC4CC41CE",
  IS_ENTITY_ON_SCREEN: "0xE659E47AF827484B",
  IS_ENTITY_PLAYING_ANIM: "0x1F0B79228E461EC9",
  IS_ENTITY_STATIC: "0x1218E6886D3D8327",
  IS_ENTITY_TOUCHING_ENTITY: "0x17FFC1B2BA35A494",
  IS_ENTITY_TOUCHING_MODEL: "0x0F42323798A58C8C",
  IS_ENTITY_UPRIGHT: "0x5333F526F6AB19AA",
  IS_ENTITY_UPSIDEDOWN: "0x1DBD58820FA61D71",
  IS_ENTITY_VISIBLE: "0x47D6F43D77935C75",
  IS_ENTITY_VISIBLE_TO_SCRIPT: "0xD796CB5BA8F20E32",
  IS_ENTITY_OCCLUDED: "0xE31C2C72B8692B64",
  WOULD_ENTITY_BE_OCCLUDED: "0xEE5D2A122E09EC42",
  IS_ENTITY_WAITING_FOR_WORLD_COLLISION: "0xD05BFF0C0A12C68F",
  APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS: "0x18FF00FC7EFF559E",
  APPLY_FORCE_TO_ENTITY: "0xC5F68BE9613E2D18",
  ATTACH_ENTITY_TO_ENTITY: "0x6B9BBD38AB0796DF",
  ATTACH_ENTITY_TO_ENTITY_PHYSICALLY: "0xC3675780C92F90F9",
  PROCESS_ENTITY_ATTACHMENTS: "0xF4080490ADC51C6F",
  GET_ENTITY_BONE_INDEX_BY_NAME: "0xFB71170B7E76ACBA",
  CLEAR_ENTITY_LAST_DAMAGE_ENTITY: "0xA72CD9CA74A5ECBA",
  DELETE_ENTITY: "0xAE3CBE5BF394C9C9",
  DETACH_ENTITY: "0x961AC54BF0613F5D",
  FREEZE_ENTITY_POSITION: "0x428CA6DBD1094446",
  PLAY_ENTITY_ANIM: "0x7FB218262B810701",
  PLAY_SYNCHRONIZED_ENTITY_ANIM: "0xC77720A12FE14A86",
  PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM: "0xB9C54555ED30FBC4",
  STOP_SYNCHRONIZED_MAP_ENTITY_ANIM: "0x11E79CAB7183B6F5",
  STOP_ENTITY_ANIM: "0x28004F88151E03E0",
  STOP_SYNCHRONIZED_ENTITY_ANIM: "0x43D3807C077261E3",
  HAS_ANIM_EVENT_FIRED: "0xEAF4CD9EA3E7E922",
  FIND_ANIM_EVENT_PHASE: "0x07F1BE2BCCAA27A7",
  SET_ENTITY_ANIM_CURRENT_TIME: "0x4487C259F0F70977",
  SET_ENTITY_ANIM_SPEED: "0x28D1A16553C51776",
  SET_ENTITY_AS_MISSION_ENTITY: "0xAD738C3085FE7E11",
  SET_ENTITY_AS_NO_LONGER_NEEDED: "0xB736A491E64A32CF",
  SET_PED_AS_NO_LONGER_NEEDED: "0x2595DD4236549CE3",
  SET_VEHICLE_AS_NO_LONGER_NEEDED: "0x629BFA74418D6239",
  SET_OBJECT_AS_NO_LONGER_NEEDED: "0x3AE22DEB5BA5A3E6",
  SET_ENTITY_CAN_BE_DAMAGED: "0x1760FFA8AB074D66",
  SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP: "0xE22D8FDE858B8119",
  SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS: "0xD3997889736FD899",
  SET_ENTITY_COLLISION: "0x1A9205C1B9EE827F",
  _IS_ENTITY_COLLISON_DISABLED: "0xCCF1E97BEFDAE480",
  SET_ENTITY_COORDS: "0x06843DA7060A026B",
  "_SET_ENTITY_COORDS_2": "0x621873ECE1178967",
  SET_ENTITY_COORDS_NO_OFFSET: "0x239A3351AC1DA385",
  SET_ENTITY_DYNAMIC: "0x1718DE8E3F2823CA",
  SET_ENTITY_HEADING: "0x8E2530AA8ADA980E",
  SET_ENTITY_HEALTH: "0x6B76DC1F3AE6E6A3",
  SET_ENTITY_INVINCIBLE: "0x3882114BDE571AD4",
  SET_ENTITY_IS_TARGET_PRIORITY: "0xEA02E132F5C68722",
  SET_ENTITY_LIGHTS: "0x7CFBA6A80BDF3874",
  SET_ENTITY_LOAD_COLLISION_FLAG: "0x0DC7CABAB1E9B67E",
  HAS_COLLISION_LOADED_AROUND_ENTITY: "0xE9676F61BC0B3321",
  SET_ENTITY_MAX_SPEED: "0x0E46A3FCBDE2A1B1",
  SET_ENTITY_ONLY_DAMAGED_BY_PLAYER: "0x79F020FF9EDC0748",
  SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP: "0x7022BD828FA0B082",
  SET_ENTITY_PROOFS: "0xFAEE099C6F890BB8",
  SET_ENTITY_QUATERNION: "0x77B21BE7AC540F07",
  SET_ENTITY_RECORDS_COLLISIONS: "0x0A50A1EEDAD01E65",
  SET_ENTITY_ROTATION: "0x8524A8B0171D5E07",
  SET_ENTITY_VISIBLE: "0xEA1C610A04DB6BBB",
  SET_ENTITY_VELOCITY: "0x1C99BB7B6E96D16F",
  SET_ENTITY_HAS_GRAVITY: "0x4A4722448F18EEF5",
  SET_ENTITY_LOD_DIST: "0x5927F96A78577363",
  GET_ENTITY_LOD_DIST: "0x4159C2762B5791D6",
  SET_ENTITY_ALPHA: "0x44A0870B7E92D7C0",
  GET_ENTITY_ALPHA: "0x5A47B3B5E63E94C6",
  RESET_ENTITY_ALPHA: "0x9B1E824FFBB7027A",
  SET_ENTITY_ALWAYS_PRERENDER: "0xACAD101E1FB66689",
  SET_ENTITY_RENDER_SCORCHED: "0x730F5F8D3F0F2050",
  SET_ENTITY_TRAFFICLIGHT_OVERRIDE: "0x57C5DB656185EAC4",
  CREATE_MODEL_SWAP: "0x92C47782FDA8B2A3",
  REMOVE_MODEL_SWAP: "0x033C0F9A64E229AE",
  CREATE_MODEL_HIDE: "0x8A97BCA30A0CE478",
  CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS: "0x3A52AE588830BF7F",
  REMOVE_MODEL_HIDE: "0xD9E3006FB3CBD765",
  CREATE_FORCED_OBJECT: "0x150E808B375A385A",
  REMOVE_FORCED_OBJECT: "0x61B6775E83C0DB6F",
  SET_ENTITY_NO_COLLISION_ENTITY: "0xA53ED5520C07654A",
  SET_ENTITY_MOTION_BLUR: "0x295D82A8559F9150",
  CREATE_PED: "0xD49F9B0955C367DE",
  DELETE_PED: "0x9614299DCB53E54B",
  CLONE_PED: "0xEF29A16337FACADB",
  _ASSIGN_PLAYER_TO_PED: "0xE952D6431689AD9A",
  IS_PED_IN_VEHICLE: "0xA3EE4A07279BB9DB",
  IS_PED_IN_MODEL: "0x796D90EFB19AA332",
  IS_PED_IN_ANY_VEHICLE: "0x997ABD671D25CA0B",
  "IS_COP_PED_IN_AREA_3D": "0x16EC4839969F9F5E",
  IS_PED_INJURED: "0x84A2DD9AC37C35C1",
  IS_PED_HURT: "0x5983BB449D7FDB12",
  IS_PED_FATALLY_INJURED: "0xD839450756ED5A80",
  IS_PED_DEAD_OR_DYING: "0x3317DEDB88C95038",
  IS_CONVERSATION_PED_DEAD: "0xE0A0AEC214B1FABA",
  IS_PED_AIMING_FROM_COVER: "0x3998B1276A3300E5",
  IS_PED_RELOADING: "0x24B100C68C645951",
  IS_PED_A_PLAYER: "0x12534C348C6CB68B",
  CREATE_PED_INSIDE_VEHICLE: "0x7DD959874C1FD534",
  SET_PED_DESIRED_HEADING: "0xAA5A7ECE2AA8FE70",
  IS_PED_FACING_PED: "0xD71649DB0A545AA3",
  IS_PED_IN_MELEE_COMBAT: "0x4E209B2C1EAD5159",
  IS_PED_STOPPED: "0x530944F6F4B8A214",
  IS_PED_SHOOTING_IN_AREA: "0x7E9DFE24AC1E58EF",
  IS_ANY_PED_SHOOTING_IN_AREA: "0xA0D3D71EA1086C55",
  IS_PED_SHOOTING: "0x34616828CD07F1A1",
  SET_PED_ACCURACY: "0x7AEFB85C1D49DEB6",
  GET_PED_ACCURACY: "0x37F4AD56ECBC0CD6",
  IS_PED_MODEL: "0xC9D55B1A358A5BF7",
  EXPLODE_PED_HEAD: "0x2D05CED3A38D0F3A",
  REMOVE_PED_ELEGANTLY: "0xAC6D445B994DF95E",
  ADD_ARMOUR_TO_PED: "0x5BA652A0CD14DF2F",
  SET_PED_ARMOUR: "0xCEA04D83135264CC",
  SET_PED_INTO_VEHICLE: "0xF75B0D629E1C063D",
  SET_PED_ALLOW_VEHICLES_OVERRIDE: "0x3C028C636A414ED9",
  CAN_CREATE_RANDOM_PED: "0x3E8349C08E4B82E4",
  CREATE_RANDOM_PED: "0xB4AC7D0CF06BFE8F",
  CREATE_RANDOM_PED_AS_DRIVER: "0x9B62392B474F44A0",
  CAN_CREATE_RANDOM_DRIVER: "0xB8EB95E5B4E56978",
  CAN_CREATE_RANDOM_BIKE_RIDER: "0xEACEEDA81751915C",
  SET_PED_MOVE_ANIMS_BLEND_OUT: "0x9E8C908F41584ECD",
  SET_PED_CAN_BE_DRAGGED_OUT: "0xC1670E958EEE24E5",
  IS_PED_MALE: "0x6D9F5FAA7488BA46",
  IS_PED_HUMAN: "0xB980061DA992779D",
  GET_VEHICLE_PED_IS_IN: "0x9A9112A0FE9A4713",
  RESET_PED_LAST_VEHICLE: "0xBB8DE8CF6A8DD8BB",
  SET_PED_DENSITY_MULTIPLIER_THIS_FRAME: "0x95E3D6257B166CF2",
  SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME: "0x7A556143A1C03898",
  SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME: "0x5086C7843552CF85",
  SET_PED_NON_CREATION_AREA: "0xEE01041D559983EA",
  CLEAR_PED_NON_CREATION_AREA: "0x2E05208086BA0651",
  IS_PED_ON_MOUNT: "0x460BC76A0E10655E",
  GET_MOUNT: "0xE7E11B8DCBED1058",
  IS_PED_ON_VEHICLE: "0x67722AEB798E5FAB",
  IS_PED_ON_SPECIFIC_VEHICLE: "0xEC5F66E459AF3BB2",
  SET_PED_MONEY: "0xA9C8960E8684C1B5",
  GET_PED_MONEY: "0x3F69145BBA87BAE7",
  SET_PED_SUFFERS_CRITICAL_HITS: "0xEBD76F2359F190AC",
  IS_PED_SITTING_IN_VEHICLE: "0xA808AA1D79230FC2",
  IS_PED_SITTING_IN_ANY_VEHICLE: "0x826AA586EDB9FEF8",
  IS_PED_ON_FOOT: "0x01FEE67DB37F59B2",
  IS_PED_ON_ANY_BIKE: "0x94495889E22C6479",
  IS_PED_PLANTING_BOMB: "0xC70B5FAE151982D8",
  GET_DEAD_PED_PICKUP_COORDS: "0xCD5003B097200F36",
  IS_PED_IN_ANY_BOAT: "0x2E0E1C2B4F6CB339",
  IS_PED_IN_ANY_SUB: "0xFBFC01CCFB35D99E",
  IS_PED_IN_ANY_HELI: "0x298B91AE825E5705",
  IS_PED_IN_ANY_PLANE: "0x5FFF4CFC74D8FB80",
  IS_PED_IN_FLYING_VEHICLE: "0x9134873537FA419C",
  SET_PED_DIES_IN_WATER: "0x56CEF0AC79073BDE",
  SET_PED_DIES_IN_SINKING_VEHICLE: "0xD718A22995E2B4BC",
  GET_PED_ARMOUR: "0x9483AF821605B1D8",
  SET_PED_STAY_IN_VEHICLE_WHEN_JACKED: "0xEDF4079F9D54C9A1",
  SET_PED_CAN_BE_SHOT_IN_VEHICLE: "0xC7EF1BA83230BA07",
  GET_PED_LAST_DAMAGE_BONE: "0xD75960F6BD9EA49C",
  CLEAR_PED_LAST_DAMAGE_BONE: "0x8EF6B7AC68E2F01B",
  SET_AI_WEAPON_DAMAGE_MODIFIER: "0x1B1E2A40A65B8521",
  RESET_AI_WEAPON_DAMAGE_MODIFIER: "0xEA16670E7BA4743C",
  SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER: "0x66460DEDDD417254",
  RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER: "0x46E56A7CD1D63C3F",
  SET_PED_CAN_BE_TARGETTED: "0x63F58F7C80513AAD",
  SET_PED_CAN_BE_TARGETTED_BY_TEAM: "0xBF1CA77833E58F2C",
  SET_PED_CAN_BE_TARGETTED_BY_PLAYER: "0x66B57B72E0836A76",
  SET_TIME_EXCLUSIVE_DISPLAY_TEXTURE: "0xFD325494792302D7",
  IS_PED_IN_ANY_POLICE_VEHICLE: "0x0BD04E29640C9C12",
  FORCE_PED_TO_OPEN_PARACHUTE: "0x16E42E800B472221",
  IS_PED_IN_PARACHUTE_FREE_FALL: "0x7DCE8BDA0F1C1200",
  IS_PED_FALLING: "0xFB92A102F1C4DFA3",
  IS_PED_JUMPING: "0xCEDABC5900A0BF97",
  IS_PED_CLIMBING: "0x53E8CB4F48BFE623",
  IS_PED_VAULTING: "0x117C70D1F5730B5E",
  IS_PED_DIVING: "0x5527B8246FEF9B11",
  IS_PED_JUMPING_OUT_OF_VEHICLE: "0x433DDFFE2044B636",
  GET_PED_PARACHUTE_STATE: "0x79CFD9827CC979B6",
  GET_PED_PARACHUTE_LANDING_TYPE: "0x8B9F1FC6AE8166C0",
  SET_PED_PARACHUTE_TINT_INDEX: "0x333FC8DB079B7186",
  GET_PED_PARACHUTE_TINT_INDEX: "0xEAF5F7E5AE7C6C9D",
  SET_PED_RESERVE_PARACHUTE_TINT_INDEX: "0xE88DA0751C22A2AD",
  SET_PED_DUCKING: "0x030983CA930B692D",
  IS_PED_DUCKING: "0xD125AE748725C6BC",
  IS_PED_IN_ANY_TAXI: "0x6E575D6A898AB852",
  SET_PED_ID_RANGE: "0xF107E836A70DCE05",
  SET_PED_SEEING_RANGE: "0xF29CF591C4BF6CEE",
  SET_PED_HEARING_RANGE: "0x33A8F7F7D5F7F33C",
  SET_PED_VISUAL_FIELD_MIN_ANGLE: "0x2DB492222FB21E26",
  SET_PED_VISUAL_FIELD_MAX_ANGLE: "0x70793BDCA1E854D4",
  SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE: "0x7A276EB2C224D70F",
  SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE: "0x78D0B67629D75856",
  SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE: "0x9C74B0BC831B753A",
  SET_PED_VISUAL_FIELD_CENTER_ANGLE: "0x3B6405E8AB34A907",
  SET_PED_STEALTH_MOVEMENT: "0x88CBB5CEB96B7BD2",
  GET_PED_STEALTH_MOVEMENT: "0x7C2AC9CA66575FBF",
  CREATE_GROUP: "0x90370EBE0FEE1A3D",
  SET_PED_AS_GROUP_LEADER: "0x2A7819605465FBCE",
  SET_PED_AS_GROUP_MEMBER: "0x9F3480FE65DB31B5",
  SET_PED_CAN_TELEPORT_TO_GROUP_LEADER: "0x2E2F4240B3F24647",
  REMOVE_GROUP: "0x8EB2F69076AF7053",
  REMOVE_PED_FROM_GROUP: "0xED74007FFB146BC2",
  IS_PED_GROUP_MEMBER: "0x9BB01E3834671191",
  IS_PED_HANGING_ON_TO_VEHICLE: "0x1C86D8AEF8254B78",
  SET_GROUP_SEPARATION_RANGE: "0x4102C7858CFEE4E4",
  SET_PED_MIN_GROUND_TIME_FOR_STUNGUN: "0xFA0675AB151073FA",
  IS_PED_PRONE: "0xD6A86331A537A7B9",
  IS_PED_IN_COMBAT: "0x4859F1FC66A6278E",
  CAN_PED_IN_COMBAT_SEE_TARGET: "0xEAD42DE3610D0721",
  IS_PED_DOING_DRIVEBY: "0xB2C086CC1BF8F2BF",
  IS_PED_JACKING: "0x4AE4FF911DFB61DA",
  IS_PED_BEING_JACKED: "0x9A497FE2DF198913",
  IS_PED_BEING_STUNNED: "0x4FBACCE3B4138EE8",
  GET_PEDS_JACKER: "0x9B128DC36C1E04CF",
  GET_JACK_TARGET: "0x5486A79D9FBD342D",
  IS_PED_FLEEING: "0xBBCCE00B381F8482",
  IS_PED_IN_COVER: "0x60DFD0691A170B88",
  IS_PED_IN_COVER_FACING_LEFT: "0x845333B3150583AB",
  IS_PED_GOING_INTO_COVER: "0x9F65DBC537E59AD5",
  SET_PED_PINNED_DOWN: "0xAAD6D1ACF08F4612",
  GET_SEAT_PED_IS_TRYING_TO_ENTER: "0x6F4C85ACD641BCD2",
  GET_VEHICLE_PED_IS_TRYING_TO_ENTER: "0x814FA8BE5449445D",
  _GET_PED_KILLER: "0x93C8B64DEB84728C",
  GET_PED_CAUSE_OF_DEATH: "0x16FFE42AB2D2DC59",
  _GET_PED_TIME_OF_DEATH: "0x1E98817B311AE98A",
  SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH: "0xADB3F206518799E8",
  SET_PED_RELATIONSHIP_GROUP_HASH: "0xC80A74AC829DDD92",
  SET_RELATIONSHIP_BETWEEN_GROUPS: "0xBF25EB89375A37AD",
  CLEAR_RELATIONSHIP_BETWEEN_GROUPS: "0x5E29243FB56FC6D4",
  ADD_RELATIONSHIP_GROUP: "0xF372BC22FCB88606",
  REMOVE_RELATIONSHIP_GROUP: "0xB6BA2444AB393DA2",
  GET_RELATIONSHIP_BETWEEN_PEDS: "0xEBA5AD3A0EAF7121",
  GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH: "0x42FDD0F017B1E38E",
  GET_PED_RELATIONSHIP_GROUP_HASH: "0x7DBDD04862D95F04",
  GET_RELATIONSHIP_BETWEEN_GROUPS: "0x9E6B70061662AE5C",
  SET_PED_CAN_BE_TARGETED_WITHOUT_LOS: "0x4328652AE5769C71",
  SET_PED_TO_INFORM_RESPECTED_FRIENDS: "0x112942C6E708F70B",
  IS_PED_RESPONDING_TO_EVENT: "0x625B774D75C87068",
  SET_PED_FIRING_PATTERN: "0x9AC577F5A12AD8A9",
  SET_PED_SHOOT_RATE: "0x614DA022990752DC",
  SET_COMBAT_FLOAT: "0xFF41B4B141ED981C",
  GET_COMBAT_FLOAT: "0x52DFF8A10508090A",
  GET_GROUP_SIZE: "0x8DE69FE35CA09A45",
  DOES_GROUP_EXIST: "0x7C6B0C22F9F40BBE",
  GET_PED_GROUP_INDEX: "0xF162E133B4E7A675",
  IS_PED_IN_GROUP: "0x5891CAC5D4ACFF74",
  GET_PLAYER_PED_IS_FOLLOWING: "0x6A3975DEA89F9A17",
  SET_GROUP_FORMATION: "0xCE2F5FC3AF7E8C1E",
  SET_GROUP_FORMATION_SPACING: "0x1D9D45004C28C916",
  RESET_GROUP_FORMATION_DEFAULT_SPACING: "0x63DAB4CCB3273205",
  GET_VEHICLE_PED_IS_USING: "0x6094AD011A2EA87D",
  SET_EXCLUSIVE_PHONE_RELATIONSHIPS: "0xF92691AED837A5FC",
  SET_PED_GRAVITY: "0x9FF447B6B6AD960A",
  APPLY_DAMAGE_TO_PED: "0x697157CED63F18D4",
  SET_PED_ALLOWED_TO_DUCK: "0xDA1F1B7BE1A8766F",
  SET_PED_NEVER_LEAVES_GROUP: "0x3DBFC55D5C9BB447",
  GET_PED_TYPE: "0xFF059E1E4C01E63C",
  SET_PED_AS_COP: "0xBB03C38DD3FB7FFD",
  SET_PED_MAX_HEALTH: "0xF5F6378C4F3419D3",
  GET_PED_MAX_HEALTH: "0x4700A416E8324EF3",
  SET_PED_MAX_TIME_IN_WATER: "0x43C851690662113D",
  SET_PED_MAX_TIME_UNDERWATER: "0x6BA428C528D9E522",
  SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE: "0x7A6535691B477C48",
  CAN_KNOCK_PED_OFF_VEHICLE: "0x51AC07A44D4F5B8A",
  KNOCK_PED_OFF_VEHICLE: "0x45BBCBA77C29A841",
  SET_PED_COORDS_NO_GANG: "0x87052FE446E07247",
  GET_PED_AS_GROUP_MEMBER: "0x51455483CF23ED97",
  _GET_PED_AS_GROUP_LEADER: "0x5CCE68DBD5FE93EC",
  SET_PED_KEEP_TASK: "0x971D38760FBC02EF",
  IS_PED_SWIMMING: "0x9DE327631295B4C2",
  IS_PED_SWIMMING_UNDER_WATER: "0xC024869A53992F34",
  SET_PED_COORDS_KEEP_VEHICLE: "0x9AFEFF481A85AB2E",
  SET_PED_DIES_IN_VEHICLE: "0x2A30922C90C9B42C",
  SET_CREATE_RANDOM_COPS: "0x102E68B2024D536D",
  SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS: "0x8A4986851C4EF6E7",
  SET_CREATE_RANDOM_COPS_ON_SCENARIOS: "0x444CB7D7DBE6973D",
  CAN_CREATE_RANDOM_COPS: "0x5EE2CAFF7F17770D",
  SET_PED_AS_ENEMY: "0x02A0C9720B854BFA",
  SET_PED_CAN_SMASH_GLASS: "0x1CCE141467FF42A2",
  IS_PED_IN_ANY_TRAIN: "0x6F972C1AB75A1ED0",
  IS_PED_GETTING_INTO_A_VEHICLE: "0xBB062B2B5722478E",
  IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE: "0x44D28D5DDFE5F68C",
  SET_ENABLE_HANDCUFFS: "0xDF1AF8B5D56542FA",
  SET_ENABLE_BOUND_ANKLES: "0xC52E0F855C58FC2E",
  SET_ENABLE_SCUBA: "0xF99F62004024D506",
  SET_CAN_ATTACK_FRIENDLY: "0xB3B1CB349FF9C75D",
  GET_PED_ALERTNESS: "0xF6AA118530443FD2",
  SET_PED_ALERTNESS: "0xDBA71115ED9941A6",
  SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE: "0xBC0ED94165A48BC2",
  SET_PED_MOVEMENT_CLIPSET: "0xAF8A94EDE7712BEF",
  RESET_PED_MOVEMENT_CLIPSET: "0xAA74EC0CB0AAEA2C",
  SET_PED_STRAFE_CLIPSET: "0x29A28F3F8CF6D854",
  RESET_PED_STRAFE_CLIPSET: "0x20510814175EA477",
  SET_PED_WEAPON_MOVEMENT_CLIPSET: "0x2622E35B77D3ACA2",
  RESET_PED_WEAPON_MOVEMENT_CLIPSET: "0x97B0DB5B4AA74E77",
  SET_PED_DRIVE_BY_CLIPSET_OVERRIDE: "0xED34AB6C5CB36520",
  CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE: "0x4AFE3690D7E0B5AC",
  SET_PED_IN_VEHICLE_CONTEXT: "0x530071295899A8C6",
  RESET_PED_IN_VEHICLE_CONTEXT: "0x22EF8FF8778030EB",
  IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM: "0x6EC47A344923E1ED",
  SET_PED_ALTERNATE_WALK_ANIM: "0x6C60394CB4F75E9A",
  CLEAR_PED_ALTERNATE_WALK_ANIM: "0x8844BBFCE30AA9E9",
  SET_PED_ALTERNATE_MOVEMENT_ANIM: "0x90A43CC281FFAB46",
  CLEAR_PED_ALTERNATE_MOVEMENT_ANIM: "0xD8D19675ED5FBDCE",
  SET_PED_GESTURE_GROUP: "0xDDF803377F94AAA8",
  GET_ANIM_INITIAL_OFFSET_POSITION: "0xBE22B26DD764C040",
  GET_ANIM_INITIAL_OFFSET_ROTATION: "0x4B805E6046EE9E47",
  GET_PED_DRAWABLE_VARIATION: "0x67F3780DD425D4FC",
  GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS: "0x27561561732A7842",
  GET_PED_TEXTURE_VARIATION: "0x04A355E041E004E6",
  GET_NUMBER_OF_PED_TEXTURE_VARIATIONS: "0x8F7156A3142A6BAD",
  GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS: "0x5FAF9754E789FB47",
  GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS: "0xA6E7F1CEB523E171",
  GET_PED_PALETTE_VARIATION: "0xE3DD5F2A84B42281",
  IS_PED_COMPONENT_VARIATION_VALID: "0xE825F6B6CEA7671D",
  SET_PED_COMPONENT_VARIATION: "0x262B14F48D29DE80",
  SET_PED_RANDOM_COMPONENT_VARIATION: "0xC8A9481A01E63C28",
  SET_PED_RANDOM_PROPS: "0xC44AA05345C992C6",
  SET_PED_DEFAULT_COMPONENT_VARIATION: "0x45EEE61580806D63",
  SET_PED_BLEND_FROM_PARENTS: "0x137BBD05230DB22D",
  SET_PED_HEAD_BLEND_DATA: "0x9414E18B9434C2FE",
  _GET_PED_HEAD_BLEND_DATA: "0x2746BD9D88C5C5D0",
  UPDATE_PED_HEAD_BLEND_DATA: "0x723538F61C647C5A",
  _SET_PED_EYE_COLOR: "0x50B56988B170AFDF",
  SET_PED_HEAD_OVERLAY: "0x48F44967FA05CC1E",
  _GET_PED_HEAD_OVERLAY_VALUE: "0xA60EF3B6461A4D43",
  _GET_NUM_HEAD_OVERLAY_VALUES: "0xCF1CE768BB43480E",
  _SET_PED_HEAD_OVERLAY_COLOR: "0x497BF74A7B9CB952",
  _SET_PED_HAIR_COLOR: "0x4CFFC65454C93A49",
  _GET_NUM_HAIR_COLORS: "0xE5C0CF872C2AD150",
  _GET_NUM_MAKEUP_COLORS: "0xD1F7CA1535D22818",
  _IS_A_VALID_HAIR_COLOR: "0xE0D36E5D9E99CC21",
  _IS_A_VALID_LIPSTICK_COLOR: "0x0525A2C2562F3CD4",
  _IS_A_VALID_BLUSH_COLOR: "0x604E810189EE3A59",
  _SET_PED_FACE_FEATURE: "0x71A5C1DBA060049E",
  HAS_PED_HEAD_BLEND_FINISHED: "0x654CD0A825161131",
  _GET_FIRST_PARENT_ID_FOR_PED_TYPE: "0x68D353AB88B97E0C",
  _GET_NUM_PARENT_PEDS_OF_TYPE: "0x5EF37013A6539C9D",
  _IS_PED_PROP_VALID: "0x2B16A3BFF1FBCE49",
  GET_PED_PROP_INDEX: "0x898CC20EA75BACD8",
  SET_PED_PROP_INDEX: "0x93376B65A266EB5F",
  KNOCK_OFF_PED_PROP: "0x6FD7816A36615F48",
  CLEAR_PED_PROP: "0x0943E5B8E078E76E",
  CLEAR_ALL_PED_PROPS: "0xCD8A7537A9B52F06",
  GET_PED_PROP_TEXTURE_INDEX: "0xE131A28626F81AB2",
  SET_BLOCKING_OF_NON_TEMPORARY_EVENTS: "0x9F8AA94D6D97DBF4",
  SET_PED_BOUNDS_ORIENTATION: "0x4F5F651ACCC9C4CF",
  REGISTER_TARGET: "0x2F25D9AEFA34FBA2",
  REGISTER_HATED_TARGETS_AROUND_PED: "0x9222F300BF8354FE",
  GET_RANDOM_PED_AT_COORD: "0x876046A8E3A4B71C",
  GET_CLOSEST_PED: "0xC33AB876A77F8164",
  SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND: "0x14F19A8782C8071E",
  SET_DRIVER_ABILITY: "0xB195FFA8042FC5C3",
  SET_DRIVER_AGGRESSIVENESS: "0xA731F608CA104E3C",
  CAN_PED_RAGDOLL: "0x128F79EDCECE4FD5",
  SET_PED_TO_RAGDOLL: "0xAE99FB955581844A",
  SET_PED_TO_RAGDOLL_WITH_FALL: "0xD76632D99E4966C8",
  SET_PED_RAGDOLL_ON_COLLISION: "0xF0A4F1BBF4FA7497",
  IS_PED_RAGDOLL: "0x47E4E977581C5B55",
  IS_PED_RUNNING_RAGDOLL_TASK: "0xE3B6097CC25AA69E",
  SET_PED_RAGDOLL_FORCE_FALL: "0x01F6594B923B9251",
  RESET_PED_RAGDOLL_TIMER: "0x9FA4664CF62E47E8",
  SET_PED_CAN_RAGDOLL: "0xB128377056A54E2A",
  IS_PED_RUNNING_MOBILE_PHONE_TASK: "0x2AFE52F782F25775",
  _SET_PED_RAGDOLL_FLAG: "0x26695EC767728D84",
  _SET_PED_RESET_RAGDOLL_FLAG: "0xD86D101FCFD00A4B",
  SET_PED_ANGLED_DEFENSIVE_AREA: "0xC7F76DF27A5045A1",
  SET_PED_SPHERE_DEFENSIVE_AREA: "0x9D3151A373974804",
  SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED: "0xF9B8F91AAD3B953E",
  SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED: "0x4EF47FE21698A8B6",
  SET_PED_DEFENSIVE_AREA_DIRECTION: "0x413C6C763A4AFFAD",
  REMOVE_PED_DEFENSIVE_AREA: "0x74D4E028107450A9",
  GET_PED_DEFENSIVE_AREA_POSITION: "0x3C06B8786DD94CD1",
  SET_PED_PREFERRED_COVER_SET: "0x8421EB4DA7E391B9",
  REMOVE_PED_PREFERRED_COVER_SET: "0xFDDB234CF74073D9",
  REVIVE_INJURED_PED: "0x8D8ACD8388CD99CE",
  RESURRECT_PED: "0x71BC8E838B9C6035",
  SET_PED_NAME_DEBUG: "0x98EFA132A4117BE1",
  GET_PED_EXTRACTED_DISPLACEMENT: "0xE0AF41401ADF87E3",
  SET_PED_DIES_WHEN_INJURED: "0x5BA7919BED300023",
  SET_PED_ENABLE_WEAPON_BLOCKING: "0x97A790315D3831FD",
  RESET_PED_VISIBLE_DAMAGE: "0x3AC1F7B898F30C05",
  APPLY_PED_BLOOD_DAMAGE_BY_ZONE: "0x816F6981C60BF53B",
  APPLY_PED_BLOOD: "0x83F7E01C7B769A26",
  APPLY_PED_BLOOD_BY_ZONE: "0x3311E47B91EDCBBC",
  APPLY_PED_BLOOD_SPECIFIC: "0xEF0D582CBF2D9B0F",
  APPLY_PED_DAMAGE_DECAL: "0x397C38AA7B4A5F83",
  APPLY_PED_DAMAGE_PACK: "0x46DF918788CB093F",
  CLEAR_PED_BLOOD_DAMAGE: "0x8FE22675A5A45817",
  CLEAR_PED_BLOOD_DAMAGE_BY_ZONE: "0x56E3B78C5408D9F4",
  HIDE_PED_BLOOD_DAMAGE_BY_ZONE: "0x62AB793144DE75DC",
  CLEAR_PED_DAMAGE_DECAL_BY_ZONE: "0x523C79AEEFCC4A2A",
  GET_PED_DECORATIONS_STATE: "0x71EAB450D86954A1",
  CLEAR_PED_WETNESS: "0x9C720776DAA43E7E",
  SET_PED_WETNESS_HEIGHT: "0x44CB6447D2571AA0",
  SET_PED_WETNESS_ENABLED_THIS_FRAME: "0xB5485E4907B53019",
  SET_PED_SWEAT: "0x27B0405F59637D1F",
  _SET_PED_DECORATION: "0x5F5D1665E352A839",
  _SET_PED_FACIAL_DECORATION: "0x5619BFA07CFD7833",
  _GET_TATTOO_ZONE: "0x9FD452BFBE7A7A8B",
  CLEAR_PED_DECORATIONS: "0x0E5173C163976E38",
  _CLEAR_PED_FACIAL_DECORATIONS: "0xE3B27E70CEAB9F0C",
  WAS_PED_SKELETON_UPDATED: "0x11B499C1E0FF8559",
  GET_PED_BONE_COORDS: "0x17C07FC640E86B4E",
  CREATE_NM_MESSAGE: "0x418EF2A1BCE56685",
  GIVE_PED_NM_MESSAGE: "0xB158DFCCC56E5C5B",
  ADD_SCENARIO_BLOCKING_AREA: "0x1B5C85C612E5256E",
  REMOVE_SCENARIO_BLOCKING_AREAS: "0xD37401D78A929A49",
  REMOVE_SCENARIO_BLOCKING_AREA: "0x31D16B74C6E29D66",
  SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA: "0x28157D43CF600981",
  IS_PED_USING_SCENARIO: "0x1BF094736DD62C2E",
  IS_PED_USING_ANY_SCENARIO: "0x57AB4A3080F85143",
  PLAY_FACIAL_ANIM: "0xE1E65CA8AC9C00ED",
  SET_FACIAL_IDLE_ANIM_OVERRIDE: "0xFFC24B988B938B38",
  CLEAR_FACIAL_IDLE_ANIM_OVERRIDE: "0x726256CC1EEB182F",
  SET_PED_CAN_PLAY_GESTURE_ANIMS: "0xBAF20C5432058024",
  SET_PED_CAN_PLAY_VISEME_ANIMS: "0xF833DDBA3B104D43",
  SET_PED_CAN_PLAY_AMBIENT_ANIMS: "0x6373D1349925A70E",
  SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS: "0x0EB0585D15254740",
  SET_PED_CAN_ARM_IK: "0x6C3B4D6D13B4C841",
  SET_PED_CAN_HEAD_IK: "0xC11C18092C5530DC",
  SET_PED_CAN_LEG_IK: "0x73518ECE2485412B",
  SET_PED_CAN_TORSO_IK: "0xF2B7106D37947CE0",
  SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT: "0xEC4686EC06434678",
  IS_PED_HEADTRACKING_PED: "0x5CD3CB88A7F8850D",
  IS_PED_HEADTRACKING_ENTITY: "0x813A0A7C9D2E831F",
  SET_PED_PRIMARY_LOOKAT: "0xCD17B554996A8D9E",
  SET_PED_CONFIG_FLAG: "0x1913FE4CBF41C463",
  SET_PED_RESET_FLAG: "0xC1E8A365BF3B29F2",
  GET_PED_CONFIG_FLAG: "0x7EE53118C892B513",
  GET_PED_RESET_FLAG: "0xAF9E59B1B1FBF2A0",
  SET_PED_GROUP_MEMBER_PASSENGER_INDEX: "0x0BDDB8D9EC6BCF3C",
  SET_PED_CAN_EVASIVE_DIVE: "0x6B7A646C242A7059",
  IS_PED_EVASIVE_DIVING: "0x414641C26E105898",
  SET_PED_SHOOTS_AT_COORD: "0x96A05E4FB321B1BA",
  SET_PED_MODEL_IS_SUPPRESSED: "0xE163A4BCE4DE6F11",
  STOP_ANY_PED_MODEL_BEING_SUPPRESSED: "0xB47BD05FA66B40CF",
  SET_PED_CAN_BE_TARGETED_WHEN_INJURED: "0x638C03B0F9878F57",
  SET_PED_GENERATES_DEAD_BODY_EVENTS: "0x7FB17BA2E7DECA5B",
  SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT: "0xDF993EE5E90ABA25",
  GIVE_PED_HELMET: "0x54C7C4A94367717E",
  REMOVE_PED_HELMET: "0xA7B2458D0AD6DED8",
  SET_PED_HELMET: "0x560A43136EB58105",
  SET_PED_HELMET_FLAG: "0xC0E78D5C2CE3EB25",
  SET_PED_HELMET_PROP_INDEX: "0x26D83693ED99291C",
  SET_PED_HELMET_TEXTURE_INDEX: "0xF1550C4BD22582E2",
  IS_PED_WEARING_HELMET: "0xF33BDFE19B309B19",
  SET_PED_TO_LOAD_COVER: "0x332B562EEDA62399",
  SET_PED_CAN_COWER_IN_COVER: "0xCB7553CDCEF4A735",
  SET_PED_CAN_PEEK_IN_COVER: "0xC514825C507E3736",
  SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE: "0x94D94BF1A75AED3D",
  SET_PED_LEG_IK_MODE: "0xC396F5B86FF9FEBD",
  SET_PED_MOTION_BLUR: "0x0A986918B102B448",
  SET_PED_CAN_SWITCH_WEAPON: "0xED7F7EFE9FABF340",
  SET_PED_DIES_INSTANTLY_IN_WATER: "0xEEB64139BA29A7CF",
  STOP_PED_WEAPON_FIRING_WHEN_DROPPED: "0xC158D28142A34608",
  SET_SCRIPTED_ANIM_SEAT_OFFSET: "0x5917BBA32D06C230",
  SET_PED_COMBAT_MOVEMENT: "0x4D9CA1009AFBD057",
  GET_PED_COMBAT_MOVEMENT: "0xDEA92412FCAEB3F5",
  SET_PED_COMBAT_ABILITY: "0xC7622C0D36B2FDA8",
  SET_PED_COMBAT_RANGE: "0x3C606747B23E497B",
  GET_PED_COMBAT_RANGE: "0xF9D9F7F2DB8E2FA0",
  SET_PED_COMBAT_ATTRIBUTES: "0x9F7794730795E019",
  SET_PED_TARGET_LOSS_RESPONSE: "0x0703B9079823DA4A",
  IS_PED_PERFORMING_STEALTH_KILL: "0xFD4CCDBCC59941B7",
  IS_PED_BEING_STEALTH_KILLED: "0x863B23EFDE9C5DF2",
  GET_MELEE_TARGET_FOR_PED: "0x18A3E9EE1297FD39",
  WAS_PED_KILLED_BY_STEALTH: "0xF9800AA1A771B000",
  WAS_PED_KILLED_BY_TAKEDOWN: "0x7F08E26039C7347C",
  SET_PED_FLEE_ATTRIBUTES: "0x70A2D1137C8ED7C9",
  SET_PED_COWER_HASH: "0xA549131166868ED3",
  SET_PED_STEERS_AROUND_PEDS: "0x46F2193B3AD1D891",
  SET_PED_STEERS_AROUND_OBJECTS: "0x1509C089ADC208BF",
  SET_PED_STEERS_AROUND_VEHICLES: "0xEB6FB9D48DDE23EC",
  IS_ANY_PED_NEAR_POINT: "0x083961498679DC9F",
  GET_PED_FLOOD_INVINCIBILITY: "0x2BC338A7B21F4608",
  IS_TRACKED_PED_VISIBLE: "0x91C8E617F64188AC",
  IS_PED_TRACKED: "0x4C5E1F087CD10BB7",
  HAS_PED_RECEIVED_EVENT: "0x8507BCB710FA6DC0",
  GET_PED_BONE_INDEX: "0x3F428D08BE5AAE31",
  GET_PED_RAGDOLL_BONE_INDEX: "0x2057EF813397A772",
  SET_PED_ENVEFF_SCALE: "0xBF29516833893561",
  GET_PED_ENVEFF_SCALE: "0x9C14D30395A51A3C",
  SET_ENABLE_PED_ENVEFF_SCALE: "0xD2C5AA0C0E8D0F1E",
  CREATE_SYNCHRONIZED_SCENE: "0x8C18E0F9080ADD73",
  IS_SYNCHRONIZED_SCENE_RUNNING: "0x25D39B935A038A26",
  SET_SYNCHRONIZED_SCENE_ORIGIN: "0x6ACF6B7225801CD7",
  SET_SYNCHRONIZED_SCENE_PHASE: "0x734292F4F0ABF6D0",
  GET_SYNCHRONIZED_SCENE_PHASE: "0xE4A310B1D7FA73CC",
  SET_SYNCHRONIZED_SCENE_RATE: "0xB6C49F8A5E295A5D",
  GET_SYNCHRONIZED_SCENE_RATE: "0xD80932D577274D40",
  SET_SYNCHRONIZED_SCENE_LOOPED: "0xD9A897A4C6C2974F",
  IS_SYNCHRONIZED_SCENE_LOOPED: "0x62522002E0C391BA",
  ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY: "0x272E4723B56A3B96",
  DETACH_SYNCHRONIZED_SCENE: "0x6D38F1F04CBB37EA",
  FORCE_PED_MOTION_STATE: "0xF28965D04F570DCA",
  SET_PED_MAX_MOVE_BLEND_RATIO: "0x433083750C5E064A",
  SET_PED_MIN_MOVE_BLEND_RATIO: "0x01A898D26E2333DD",
  SET_PED_MOVE_RATE_OVERRIDE: "0x085BF80FA50A39D1",
  GET_PED_NEARBY_VEHICLES: "0xCFF869CBFA210D82",
  GET_PED_NEARBY_PEDS: "0x23F8F5FC7E8C4A6B",
  IS_PED_USING_ACTION_MODE: "0x00E73468D085F745",
  SET_PED_USING_ACTION_MODE: "0xD75ACCF5E0FB5367",
  SET_PED_CAPSULE: "0x364DF566EC833DE2",
  REGISTER_PEDHEADSHOT: "0x4462658788425076",
  UNREGISTER_PEDHEADSHOT: "0x96B1361D9B24C2FF",
  IS_PEDHEADSHOT_VALID: "0xA0A9668F158129A2",
  IS_PEDHEADSHOT_READY: "0x7085228842B13A67",
  GET_PEDHEADSHOT_TXD_STRING: "0xDB4EACD4AD0A5D6B",
  SET_IK_TARGET: "0xC32779C16FCEECD9",
  REQUEST_ACTION_MODE_ASSET: "0x290E2780BB7AA598",
  HAS_ACTION_MODE_ASSET_LOADED: "0xE4B5F4BF2CB24E65",
  REMOVE_ACTION_MODE_ASSET: "0x13E940F88470FA51",
  REQUEST_STEALTH_MODE_ASSET: "0x2A0A62FCDEE16D4F",
  HAS_STEALTH_MODE_ASSET_LOADED: "0xE977FC5B08AF3441",
  REMOVE_STEALTH_MODE_ASSET: "0x9219857D21F0E842",
  SET_PED_LOD_MULTIPLIER: "0xDC2C5C242AAC342B",
  CREATE_VEHICLE: "0xAF35D0D2583051B0",
  DELETE_VEHICLE: "0xEA386986E786A54F",
  SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON: "0x5D14D4154BFE7B2C",
  IS_VEHICLE_MODEL: "0x423E8DE37D934D89",
  DOES_SCRIPT_VEHICLE_GENERATOR_EXIST: "0xF6086BC836400876",
  CREATE_SCRIPT_VEHICLE_GENERATOR: "0x9DEF883114668116",
  DELETE_SCRIPT_VEHICLE_GENERATOR: "0x22102C9ABFCF125D",
  SET_SCRIPT_VEHICLE_GENERATOR: "0xD9D620E0AC6DC4B0",
  SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA: "0xC12321827687FE4D",
  SET_ALL_VEHICLE_GENERATORS_ACTIVE: "0x34AD89078831A4BC",
  SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE: "0x608207E7A8FB787C",
  SET_VEHICLE_ON_GROUND_PROPERLY: "0x49733E92263139D1",
  SET_ALL_VEHICLES_SPAWN: "0xE023E8AC4EF7C117",
  IS_VEHICLE_STUCK_ON_ROOF: "0xB497F06B288DCFDF",
  ADD_VEHICLE_UPSIDEDOWN_CHECK: "0xB72E26D81006005B",
  REMOVE_VEHICLE_UPSIDEDOWN_CHECK: "0xC53EB42A499A7E90",
  IS_VEHICLE_STOPPED: "0x5721B434AD84D57A",
  GET_VEHICLE_NUMBER_OF_PASSENGERS: "0x24CB2137731FFE89",
  GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS: "0xA7C4F2C6E744A550",
  _GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS: "0x2AD93716F184EDA4",
  SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME: "0x245A6883D966D537",
  SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME: "0xB3B3359379FE77D3",
  SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME: "0xEAE6DCC7EEE3DB1D",
  SET_FAR_DRAW_VEHICLES: "0x26324F33423F3CC3",
  SET_NUMBER_OF_PARKED_VEHICLES: "0xCAA15F13EBD417FF",
  SET_VEHICLE_DOORS_LOCKED: "0xB664292EAECF7FA6",
  SET_PED_TARGETTABLE_VEHICLE_DESTROY: "0xBE70724027F85BCD",
  DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION: "0xD8050E0EB60CF274",
  SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER: "0x517AAF684BB50CD1",
  GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER: "0xF6AF6CB341349015",
  SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS: "0xA2F80B8D040727CC",
  SET_VEHICLE_DOORS_LOCKED_FOR_TEAM: "0xB81F6D4A8F5EEBA8",
  EXPLODE_VEHICLE: "0xBA71116ADF5B514C",
  SET_VEHICLE_OUT_OF_CONTROL: "0xF19D095E42D430CC",
  SET_VEHICLE_TIMED_EXPLOSION: "0x2E0A74E1002380B1",
  SET_TAXI_LIGHTS: "0x598803E85E8448D9",
  IS_TAXI_LIGHT_ON: "0x7504C0F113AB50FC",
  IS_VEHICLE_IN_GARAGE_AREA: "0xCEE4490CD57BB3C2",
  SET_VEHICLE_COLOURS: "0x4F1D4BE3A7F24601",
  SET_VEHICLE_FULLBEAM: "0x8B7FD87F0DDB421E",
  STEER_UNLOCK_BIAS: "0x07116E24E9D1929D",
  SET_VEHICLE_CUSTOM_PRIMARY_COLOUR: "0x7141766F91D15BEA",
  GET_VEHICLE_CUSTOM_PRIMARY_COLOUR: "0xB64CF2CCA9D95F52",
  CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR: "0x55E1D2758F34E437",
  GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM: "0xF095C0405307B21B",
  SET_VEHICLE_CUSTOM_SECONDARY_COLOUR: "0x36CED73BFED89754",
  GET_VEHICLE_CUSTOM_SECONDARY_COLOUR: "0x8389CD56CA8072DC",
  CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR: "0x5FFBDEEC3E8E2009",
  GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM: "0x910A32E7AAD2656C",
  _SET_VEHICLE_PAINT_FADE: "0x3AFDC536C3D01674",
  _GET_VEHICLE_PAINT_FADE: "0xA82819CAC9C4C403",
  SET_CAN_RESPRAY_VEHICLE: "0x52BBA29D5EC69356",
  _JITTER_VEHICLE: "0xC59872A5134879C7",
  SET_BOAT_ANCHOR: "0x75DBEC174AEEAD10",
  _GET_BOAT_ANCHOR: "0x26C10ECBDA5D043B",
  SET_VEHICLE_SIREN: "0xF4924635A19EB37D",
  IS_VEHICLE_SIREN_ON: "0x4C9BF537BE2634B2",
  _IS_VEHICLE_SIREN_SOUND_ON: "0xB5CC40FBCB586380",
  SET_VEHICLE_STRONG: "0x3E8C8727991A8A0B",
  REMOVE_VEHICLE_STUCK_CHECK: "0x8386BFB614D06749",
  GET_VEHICLE_COLOURS: "0xA19435F193E081AC",
  IS_VEHICLE_SEAT_FREE: "0x22AC59A870E6A669",
  GET_PED_IN_VEHICLE_SEAT: "0xBB40DD2270B65366",
  GET_LAST_PED_IN_VEHICLE_SEAT: "0x83F969AA1EE2A664",
  GET_VEHICLE_LIGHTS_STATE: "0xB91B4C20085BD12F",
  IS_VEHICLE_TYRE_BURST: "0xBA291848A0815CA9",
  SET_VEHICLE_FORWARD_SPEED: "0xAB54A438726D25D5",
  _TASK_BRING_VEHICLE_TO_HALT: "0x260BE8F09E326A20",
  SET_PED_ENABLED_BIKE_RINGTONE: "0x57715966069157AD",
  SET_VEHICLE_TYRE_BURST: "0xEC6A202EE4960385",
  SET_VEHICLE_DOORS_SHUT: "0x781B3D62BB013EF5",
  SET_VEHICLE_TYRES_CAN_BURST: "0xEB9DC3C7D8596C46",
  GET_VEHICLE_TYRES_CAN_BURST: "0x678B9BB8C3F58FEB",
  SET_VEHICLE_WHEELS_CAN_BREAK: "0x29B18B4FD460CA8F",
  SET_VEHICLE_DOOR_OPEN: "0x7C65DAC73C35C862",
  REMOVE_VEHICLE_WINDOW: "0xA711568EEDB43069",
  ROLL_DOWN_WINDOWS: "0x85796B0549DDE156",
  ROLL_DOWN_WINDOW: "0x7AD9E6CE657D69E3",
  ROLL_UP_WINDOW: "0x602E548F46E24D59",
  SMASH_VEHICLE_WINDOW: "0x9E5B5E4D2CCD2259",
  FIX_VEHICLE_WINDOW: "0x772282EBEB95E682",
  _DETACH_VEHICLE_WINDSCREEN: "0x6D645D59FB5F5AD3",
  "_EJECT_JB700_ROOF": "0xE38CB9D7D39FDBCC",
  SET_VEHICLE_LIGHTS: "0x34E710FF01247C5A",
  SET_VEHICLE_ALARM: "0xCDE5E70C1DDB954C",
  START_VEHICLE_ALARM: "0xB8FF7AB45305C345",
  IS_VEHICLE_ALARM_ACTIVATED: "0x4319E335B71FFF34",
  SET_VEHICLE_INTERIORLIGHT: "0xBC2042F090AF6AD3",
  SET_VEHICLE_LIGHT_MULTIPLIER: "0xB385454F8791F57C",
  ATTACH_VEHICLE_TO_TRAILER: "0x3C7D42D58F770B54",
  DETACH_VEHICLE_FROM_TRAILER: "0x90532EDF0D2BDD86",
  IS_VEHICLE_ATTACHED_TO_TRAILER: "0xE7CF3C4F9F489F0C",
  SET_VEHICLE_TYRE_FIXED: "0x6E13FC662B882D1D",
  SET_VEHICLE_NUMBER_PLATE_TEXT: "0x95A88F0B409CDA47",
  GET_VEHICLE_NUMBER_PLATE_TEXT: "0x7CE1CCB9B293020E",
  GET_NUMBER_OF_VEHICLE_NUMBER_PLATES: "0x4C4D6B2644F458CB",
  SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX: "0x9088EB5A43FFB0A1",
  GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX: "0xF11BC2DD9A3E7195",
  SET_RANDOM_TRAINS: "0x80D9F74197EA47D9",
  CREATE_MISSION_TRAIN: "0x63C6CCA8E68AE8C8",
  SWITCH_TRAIN_TRACK: "0xFD813BB7DB977F20",
  DELETE_ALL_TRAINS: "0x736A718577F39C7D",
  SET_TRAIN_SPEED: "0xAA0BC91BE0B796E3",
  SET_TRAIN_CRUISE_SPEED: "0x16469284DB8C62B5",
  SET_RANDOM_BOATS: "0x84436EC293B1415F",
  SET_GARBAGE_TRUCKS: "0x2AFD795EEAC8D30D",
  DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK: "0x57E4C39DE5EE8470",
  GET_VEHICLE_RECORDING_ID: "0x21543C612379DB3C",
  REQUEST_VEHICLE_RECORDING: "0xAF514CABE74CBF15",
  HAS_VEHICLE_RECORDING_BEEN_LOADED: "0x300D614A4C785FC4",
  REMOVE_VEHICLE_RECORDING: "0xF1160ACCF98A3FC8",
  GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME: "0xD242728AA6F0FBA2",
  GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME: "0x2058206FBE79A8AD",
  GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID: "0x102D125411A7B6E6",
  GET_TOTAL_DURATION_OF_VEHICLE_RECORDING: "0x0E48D1C262390950",
  GET_POSITION_IN_RECORDING: "0x2DACD605FC681475",
  GET_TIME_POSITION_IN_RECORDING: "0x5746F3A7AB7FE544",
  START_PLAYBACK_RECORDED_VEHICLE: "0x3F878F92B3A7A071",
  START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS: "0x7D80FD645D4DA346",
  STOP_PLAYBACK_RECORDED_VEHICLE: "0x54833611C17ABDEA",
  PAUSE_PLAYBACK_RECORDED_VEHICLE: "0x632A689BF42301B1",
  UNPAUSE_PLAYBACK_RECORDED_VEHICLE: "0x8879EE09268305D5",
  IS_PLAYBACK_GOING_ON_FOR_VEHICLE: "0x1C8A4C2C19E68EEC",
  IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE: "0xAEA8FD591FAD4106",
  GET_CURRENT_PLAYBACK_FOR_VEHICLE: "0x42BC05C27A946054",
  SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE: "0xAB8E2EDA0C0A5883",
  SET_PLAYBACK_SPEED: "0x6683AB880E427778",
  START_PLAYBACK_RECORDED_VEHICLE_USING_AI: "0x29DE5FA52D00428C",
  SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE: "0x9438F7AD68771A20",
  SET_PLAYBACK_TO_USE_AI: "0xA549C3B37EA28131",
  SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER: "0x6E63860BBB190730",
  EXPLODE_VEHICLE_IN_CUTSCENE: "0x786A4EB67B01BF0B",
  ADD_VEHICLE_STUCK_CHECK_WITH_WARP: "0x2FA9923062DD396C",
  SET_VEHICLE_MODEL_IS_SUPPRESSED: "0x0FC2D89AC25A5814",
  GET_RANDOM_VEHICLE_IN_SPHERE: "0x386F6CE5BAF6091C",
  GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE: "0xC5574E0AEB86BA68",
  GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE: "0xB50807EABE20A8DC",
  GET_CLOSEST_VEHICLE: "0xF73EB622C4F1689B",
  GET_TRAIN_CARRIAGE: "0x08AAFD0814722BC3",
  DELETE_MISSION_TRAIN: "0x5B76B14AE875C795",
  SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED: "0xBBE7648349B49BE8",
  SET_MISSION_TRAIN_COORDS: "0x591CA673AA6AB736",
  IS_THIS_MODEL_A_BOAT: "0x45A9187928F4B9E3",
  _IS_THIS_MODEL_AN_EMERGENCY_BOAT: "0x9537097412CF75FE",
  IS_THIS_MODEL_A_PLANE: "0xA0948AB42D7BA0DE",
  IS_THIS_MODEL_A_HELI: "0xDCE4334788AF94EA",
  IS_THIS_MODEL_A_CAR: "0x7F6DB52EEFC96DF8",
  IS_THIS_MODEL_A_TRAIN: "0xAB935175B22E822B",
  IS_THIS_MODEL_A_BIKE: "0xB50C0B0CEDC6CE84",
  IS_THIS_MODEL_A_BICYCLE: "0xBF94DD42F63BDED2",
  IS_THIS_MODEL_A_QUADBIKE: "0x39DAC362EE65FA28",
  SET_HELI_BLADES_FULL_SPEED: "0xA178472EBB8AE60D",
  SET_HELI_BLADES_SPEED: "0xFD280B4D7F3ABC4D",
  SET_VEHICLE_CAN_BE_TARGETTED: "0x3750146A28097A82",
  SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED: "0x4C7028F78FFD3681",
  GET_VEHICLE_DIRT_LEVEL: "0x8F17BC8BA08DA62B",
  SET_VEHICLE_DIRT_LEVEL: "0x79D3B596FE44EE8B",
  _IS_VEHICLE_DAMAGED: "0xBCDC5017D3CE1E9E",
  IS_VEHICLE_DOOR_FULLY_OPEN: "0x3E933CFF7B111C22",
  SET_VEHICLE_ENGINE_ON: "0x2497C4717C8B881E",
  SET_VEHICLE_UNDRIVEABLE: "0x8ABA6AF54B942B95",
  SET_VEHICLE_PROVIDES_COVER: "0x5AFEEDD9BB2899D7",
  SET_VEHICLE_DOOR_CONTROL: "0xF2BFA0430F0A0FCB",
  SET_VEHICLE_DOOR_LATCHED: "0xA5A9653A8D2CAF48",
  GET_VEHICLE_DOOR_ANGLE_RATIO: "0xFE3F9C29F7B32BD5",
  _GET_PED_USING_VEHICLE_DOOR: "0x218297BF0CFD853B",
  SET_VEHICLE_DOOR_SHUT: "0x93D9BD300D7789E5",
  SET_VEHICLE_DOOR_BROKEN: "0xD4D4F6A4AB575A33",
  SET_VEHICLE_CAN_BREAK: "0x59BF8C3D52C92F66",
  DOES_VEHICLE_HAVE_ROOF: "0x8AC862B0B32C5B80",
  IS_BIG_VEHICLE: "0x9F243D3919F442FE",
  GET_NUMBER_OF_VEHICLE_COLOURS: "0x3B963160CD65D41E",
  SET_VEHICLE_COLOUR_COMBINATION: "0x33E8CD3322E2FE31",
  GET_VEHICLE_COLOUR_COMBINATION: "0x6A842D197F845D56",
  SET_VEHICLE_IS_CONSIDERED_BY_PLAYER: "0x31B927BBC44156CD",
  GET_RANDOM_VEHICLE_MODEL_IN_MEMORY: "0x055BF0AC0C34F4FD",
  GET_VEHICLE_DOOR_LOCK_STATUS: "0x25BC98A59C2EA962",
  IS_VEHICLE_DOOR_DAMAGED: "0xB8E181E559464527",
  _SET_VEHICLE_DOOR_BREAKABLE: "0x2FA133A4A9D37ED8",
  IS_VEHICLE_BUMPER_BROKEN_OFF: "0x468056A6BB6F3846",
  "IS_COP_VEHICLE_IN_AREA_3D": "0x7EEF65D5F153E26A",
  IS_VEHICLE_ON_ALL_WHEELS: "0xB104CD1BABF302E2",
  GET_VEHICLE_LAYOUT_HASH: "0x28D37D4F71AC5C58",
  SET_RENDER_TRAIN_AS_DERAILED: "0x317B11A312DF5534",
  SET_VEHICLE_EXTRA_COLOURS: "0x2036F561ADD12E33",
  GET_VEHICLE_EXTRA_COLOURS: "0x3BC4245933A166F7",
  STOP_ALL_GARAGE_ACTIVITY: "0x0F87E938BDF29D66",
  SET_VEHICLE_FIXED: "0x115722B1B9C14C1C",
  SET_VEHICLE_DEFORMATION_FIXED: "0x953DA1E1B12C0491",
  SET_DISABLE_VEHICLE_PETROL_TANK_FIRES: "0x465BF26AB9684352",
  SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE: "0x37C8252A7C92D017",
  REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA: "0x46A1E1A299EC4BBA",
  SET_VEHICLE_STEER_BIAS: "0x42A8EC77D5150CBE",
  IS_VEHICLE_EXTRA_TURNED_ON: "0xD2E6822DBFD6C8BD",
  SET_VEHICLE_EXTRA: "0x7EE3A3C5E4A40CC9",
  DOES_EXTRA_EXIST: "0x1262D55792428154",
  SET_CONVERTIBLE_ROOF: "0xF39C4F538B5124C2",
  LOWER_CONVERTIBLE_ROOF: "0xDED51F703D0FA83D",
  RAISE_CONVERTIBLE_ROOF: "0x8F5FB35D7E88FC70",
  GET_CONVERTIBLE_ROOF_STATE: "0xF8C397922FC03F41",
  IS_VEHICLE_A_CONVERTIBLE: "0x52F357A30698BCCE",
  IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS: "0x2959F696AE390A99",
  SET_VEHICLE_DAMAGE: "0xA1DD317EA8FD4F29",
  GET_VEHICLE_ENGINE_HEALTH: "0xC45D23BAF168AAB8",
  SET_VEHICLE_ENGINE_HEALTH: "0x45F6D8EEF34ABEF1",
  GET_VEHICLE_PETROL_TANK_HEALTH: "0x7D5DABE888D2D074",
  SET_VEHICLE_PETROL_TANK_HEALTH: "0x70DB57649FA8D0D8",
  IS_VEHICLE_STUCK_TIMER_UP: "0x679BE1DAF71DA874",
  RESET_VEHICLE_STUCK_TIMER: "0xD7591B0065AFAA7A",
  IS_VEHICLE_DRIVEABLE: "0x4C241E39B23DF959",
  SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER: "0x2B5F9D2AF1F1722D",
  SET_VEHICLE_NEEDS_TO_BE_HOTWIRED: "0xFBA550EA44404EE6",
  START_VEHICLE_HORN: "0x9C8C6504B5B63D2C",
  SET_VEHICLE_HAS_STRONG_AXLES: "0x92F0CF722BC4202F",
  GET_DISPLAY_NAME_FROM_VEHICLE_MODEL: "0xB215AAC32D25D019",
  GET_VEHICLE_DEFORMATION_AT_POS: "0x4EC6CFBC7B2E9536",
  SET_VEHICLE_LIVERY: "0x60BF608F1B8CD1B6",
  GET_VEHICLE_LIVERY: "0x2BB9230590DA5E8A",
  GET_VEHICLE_LIVERY_COUNT: "0x87B63E25A529D526",
  IS_VEHICLE_WINDOW_INTACT: "0x46E571A0E20D01F1",
  ARE_ALL_VEHICLE_WINDOWS_INTACT: "0x11D862A3E977A9EF",
  _IS_ANY_VEHICLE_SEAT_EMPTY: "0x2D34FC3BC4ADB780",
  RESET_VEHICLE_WHEELS: "0x21D2E5662C1F6FED",
  IS_HELI_PART_BROKEN: "0xBC74B4BE25EB6C8A",
  _GET_HELI_MAIN_ROTOR_HEALTH: "0xE4CB7541F413D2C5",
  _GET_HELI_TAIL_ROTOR_HEALTH: "0xAE8CE82A4219AC8C",
  _GET_HELI_ENGINE_HEALTH: "0xAC51915D27E4A5F7",
  WAS_COUNTER_ACTIVATED: "0x3EC8BF18AA453FE9",
  SET_VEHICLE_NAME_DEBUG: "0xBFDF984E2C22B94F",
  SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE: "0x71B0892EC081D60A",
  _SET_VEHICLE_LANDING_GEAR: "0xCFC8BE9A5E1FE575",
  _GET_VEHICLE_LANDING_GEAR: "0x9B0F3DCA3DB0F4CD",
  IS_ANY_VEHICLE_NEAR_POINT: "0x61E1DD6125A3EEE6",
  REQUEST_VEHICLE_HIGH_DETAIL_MODEL: "0xA6E9FDCB2C76785E",
  REMOVE_VEHICLE_HIGH_DETAIL_MODEL: "0x00689CDE5F7C6787",
  IS_VEHICLE_HIGH_DETAIL: "0x1F25887F3C104278",
  REQUEST_VEHICLE_ASSET: "0x81A15811460FAB3A",
  HAS_VEHICLE_ASSET_LOADED: "0x1BBE0523B8DB9A21",
  REMOVE_VEHICLE_ASSET: "0xACE699C71AB9DEB5",
  _SET_TOW_TRUCK_CRANE_HEIGHT: "0xFE54B92A344583CA",
  ATTACH_VEHICLE_TO_TOW_TRUCK: "0x29A16F8D621C4508",
  DETACH_VEHICLE_FROM_TOW_TRUCK: "0xC2DB6B6708350ED8",
  DETACH_VEHICLE_FROM_ANY_TOW_TRUCK: "0xD0E9CE05A1E68CD8",
  IS_VEHICLE_ATTACHED_TO_TOW_TRUCK: "0x146DF9EC4C4B9FD4",
  GET_ENTITY_ATTACHED_TO_TOW_TRUCK: "0xEFEA18DCF10F8F75",
  SET_VEHICLE_AUTOMATICALLY_ATTACHES: "0x8BA6F76BC53A1493",
  SET_VEHICLE_BURNOUT: "0xFB8794444A7D60FB",
  IS_VEHICLE_IN_BURNOUT: "0x1297A88E081430EB",
  SET_VEHICLE_REDUCE_GRIP: "0x222FF6A823D122E2",
  SET_VEHICLE_INDICATOR_LIGHTS: "0xB5D45264751B7DF0",
  SET_VEHICLE_BRAKE_LIGHTS: "0x92B35082E0B42F66",
  SET_VEHICLE_HANDBRAKE: "0x684785568EF26A22",
  GET_VEHICLE_TRAILER_VEHICLE: "0x1CDD6BADC297830D",
  SET_VEHICLE_RUDDER_BROKEN: "0x09606148B6C71DEF",
  GET_VEHICLE_MAX_BRAKING: "0xAD7E85FC227197C4",
  GET_VEHICLE_MAX_TRACTION: "0xA132FB5370554DB0",
  GET_VEHICLE_ACCELERATION: "0x5DD35C8D074E57AE",
  _GET_VEHICLE_MODEL_MAX_SPEED: "0xF417C2502FFFED43",
  GET_VEHICLE_MODEL_MAX_BRAKING: "0xDC53FD41B4ED944C",
  GET_VEHICLE_MODEL_MAX_TRACTION: "0x539DE94D44FDFD0D",
  GET_VEHICLE_MODEL_ACCELERATION: "0x8C044C5C84505B6A",
  GET_VEHICLE_CLASS_MAX_TRACTION: "0xDBC86D85C5059461",
  GET_VEHICLE_CLASS_MAX_AGILITY: "0x4F930AD022D6DE3B",
  GET_VEHICLE_CLASS_MAX_ACCELERATION: "0x2F83E7E45D9EA7AE",
  GET_VEHICLE_CLASS_MAX_BRAKING: "0x4BF54C16EC8FEC03",
  _OPEN_VEHICLE_BOMB_BAY: "0x87E7F24270732CB1",
  _CLOSE_VEHICLE_BOMB_BAY: "0x3556041742A0DC74",
  IS_VEHICLE_SEARCHLIGHT_ON: "0xC0F97FCE55094987",
  SET_VEHICLE_SEARCHLIGHT: "0x14E85C5EE7A4D542",
  CAN_SHUFFLE_SEAT: "0x30785D90C956BF35",
  GET_NUM_MOD_KITS: "0x33F2E3FE70EAAE1D",
  SET_VEHICLE_MOD_KIT: "0x1F2AA07F00B3217A",
  GET_VEHICLE_MOD_KIT: "0x6325D1A044AE510D",
  GET_VEHICLE_MOD_KIT_TYPE: "0xFC058F5121E54C32",
  GET_VEHICLE_WHEEL_TYPE: "0xB3ED1BFB4BE636DC",
  SET_VEHICLE_WHEEL_TYPE: "0x487EB21CC7295BA1",
  GET_NUM_MOD_COLORS: "0xA551BE18C11A476D",
  "SET_VEHICLE_MOD_COLOR_1": "0x43FEB945EE7F85B8",
  "SET_VEHICLE_MOD_COLOR_2": "0x816562BADFDEC83E",
  "GET_VEHICLE_MOD_COLOR_1": "0xE8D65CA700C9A693",
  "GET_VEHICLE_MOD_COLOR_2": "0x81592BE4E3878728",
  "_GET_VEHICLE_MOD_COLOR_1_TEXT_LABEL": "0xB45085B721EFD38C",
  "_GET_VEHICLE_MOD_COLOR_2_TEXT_LABEL": "0x4967A516ED23A5A1",
  SET_VEHICLE_MOD: "0x6AF0636DDEDCB6DD",
  GET_VEHICLE_MOD: "0x772960298DA26FDB",
  GET_VEHICLE_MOD_VARIATION: "0xB3924ECD70E095DC",
  GET_NUM_VEHICLE_MODS: "0xE38E9162A2500646",
  REMOVE_VEHICLE_MOD: "0x92D619E420858204",
  TOGGLE_VEHICLE_MOD: "0x2A1F4F37F95BAD08",
  IS_TOGGLE_MOD_ON: "0x84B233A8C8FC8AE7",
  GET_MOD_TEXT_LABEL: "0x8935624F8C5592CC",
  GET_MOD_SLOT_NAME: "0x51F0FEB9F6AE98C0",
  GET_LIVERY_NAME: "0xB4C7A93837C91A1F",
  GET_VEHICLE_MOD_MODIFIER_VALUE: "0x90A38E9838E0A8C1",
  PRELOAD_VEHICLE_MOD: "0x758F49C24925568A",
  HAS_PRELOAD_MODS_FINISHED: "0x06F43E5175EB6D96",
  RELEASE_PRELOAD_MODS: "0x445D79F995508307",
  SET_VEHICLE_TYRE_SMOKE_COLOR: "0xB5BA80F839791C0F",
  GET_VEHICLE_TYRE_SMOKE_COLOR: "0xB635392A4938B3C3",
  SET_VEHICLE_WINDOW_TINT: "0x57C51E6BAD752696",
  GET_VEHICLE_WINDOW_TINT: "0x0EE21293DAD47C95",
  GET_NUM_VEHICLE_WINDOW_TINTS: "0x9D1224004B3A6707",
  GET_VEHICLE_COLOR: "0xF3CC740D36221548",
  GET_VEHICLE_CAUSE_OF_DESTRUCTION: "0xE495D1EF4C91FD20",
  _IS_HEADLIGHT_L_BROKEN: "0x5EF77C9ADD3B11A3",
  _IS_HEADLIGHT_R_BROKEN: "0xA7ECB73355EB2F20",
  _SET_VEHICLE_ENGINE_POWER_MULTIPLIER: "0x93A3996368C94158",
  _SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER: "0xB59E4BD37AE292DB",
  SET_VEHICLE_IS_WANTED: "0xF7EC25A3EBEEC726",
  DISABLE_PLANE_AILERON: "0x23428FC53C60919C",
  _IS_VEHICLE_ENGINE_ON: "0xAE31E7DF9B5B132E",
  _SET_BIKE_LEAN_ANGLE: "0x9CFA4896C3A53CBB",
  _SET_PLANE_MIN_HEIGHT_ABOVE_GROUND: "0xB893215D8D4C015B",
  SET_VEHICLE_LOD_MULTIPLIER: "0x93AE6A61BE015BF1",
  SET_VEHICLE_SHOOT_AT_TARGET: "0x74CD9A9327A282EA",
  _GET_VEHICLE_OWNER: "0x8F5EBAB1F260CFCE",
  GET_VEHICLE_PLATE_TYPE: "0x9CCC9525BF2408E0",
  TRACK_VEHICLE_VISIBILITY: "0x64473AEFDCF47DCA",
  IS_VEHICLE_VISIBLE: "0xAA0A52D24FB98293",
  SET_VEHICLE_GRAVITY: "0x89F149B6131E57DA",
  SET_VEHICLE_ENGINE_CAN_DEGRADE: "0x983765856F2564F9",
  IS_VEHICLE_STOLEN: "0x4AF9BD80EEBEB453",
  SET_VEHICLE_IS_STOLEN: "0x67B2C79AA7FF5738",
  DETACH_VEHICLE_FROM_CARGOBOB: "0x0E21D3DF1051399D",
  DETACH_VEHICLE_FROM_ANY_CARGOBOB: "0xADF7BE450512C12F",
  IS_VEHICLE_ATTACHED_TO_CARGOBOB: "0xD40148F22E81A1D9",
  GET_VEHICLE_ATTACHED_TO_CARGOBOB: "0x873B82D42AC2B9E5",
  ATTACH_VEHICLE_TO_CARGOBOB: "0x4127F1D84E347769",
  _GET_CARGOBOB_HOOK_POSITION: "0xCBDB9B923CACC92D",
  _IS_CARGOBOB_HOOK_ACTIVE: "0x1821D91AD4B56108",
  _ENABLE_CARGOBOB_HOOK: "0x7BEB0C7A235F6F3B",
  _RETRACT_CARGOBOB_HOOK: "0x9768CF648F54C804",
  _SET_CARGOBOB_HOOK_POSITION: "0x877C1EAEAC531023",
  _IS_CARGOBOB_MAGNET_ACTIVE: "0x6E08BF5B3722BAC9",
  _CARGOBOB_MAGNET_GRAB_VEHICLE: "0x9A665550F8DA349B",
  DOES_VEHICLE_HAVE_WEAPONS: "0x25ECB9F8017D98E0",
  DISABLE_VEHICLE_WEAPON: "0xF4FC6A6F67D8D856",
  GET_VEHICLE_CLASS: "0x29439776AAA00A62",
  GET_VEHICLE_CLASS_FROM_NAME: "0xDEDF1C8BD47C2200",
  SET_PLAYERS_LAST_VEHICLE: "0xBCDF8BAF56C87B6A",
  SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS: "0x300504B23BD3B711",
  _SET_VEHICLE_CREATES_MONEY_PICKUPS_WHEN_EXPLODED: "0x068F64F2470F9656",
  _SET_VEHICLE_JET_ENGINE_ON: "0xB8FBC8B1330CA9B4",
  _SET_HELICOPTER_ROLL_PITCH_YAW_MULT: "0x6E0859B530A365CC",
  SET_VEHICLE_FRICTION_OVERRIDE: "0x1837AF7C627009BA",
  SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP: "0xA37B9A517B133349",
  SET_VEHICLE_CEILING_HEIGHT: "0xA46413066687A328",
  DOES_VEHICLE_EXIST_WITH_DECORATOR: "0x956B409B984D9BF7",
  _SET_EXCLUSIVE_DRIVER: "0xB5C51B5502E85E83",
  _DISPLAY_DISTANT_VEHICLES: "0xF796359A959DF65D",
  _SET_VEHICLE_NEON_LIGHTS_COLOUR: "0x8E0A582209A62695",
  _GET_VEHICLE_NEON_LIGHTS_COLOUR: "0x7619EEE8C886757F",
  _SET_VEHICLE_NEON_LIGHT_ENABLED: "0x2AA720E4287BF269",
  _IS_VEHICLE_NEON_LIGHT_ENABLED: "0x8C4B92553E4766A5",
  GET_VEHICLE_BODY_HEALTH: "0xF271147EB7B40F12",
  SET_VEHICLE_BODY_HEALTH: "0xB77D05AC8C78AADB",
  _GET_VEHICLE_SUSPENSION_HEIGHT: "0x53952FD2BAA19F17",
  "_GET_VEHICLE_BODY_HEALTH_2": "0xB8EF61207C2393A9",
  CREATE_OBJECT: "0x509D5878EB39E842",
  CREATE_OBJECT_NO_OFFSET: "0x9A294B2138ABB884",
  DELETE_OBJECT: "0x539E0AE3E6634B9F",
  PLACE_OBJECT_ON_GROUND_PROPERLY: "0x58A850EAEE20FAA3",
  SLIDE_OBJECT: "0x2FDFF4107B8C1147",
  SET_OBJECT_TARGETTABLE: "0x8A7391690F5AFD81",
  GET_CLOSEST_OBJECT_OF_TYPE: "0xE143FA2249364369",
  HAS_OBJECT_BEEN_BROKEN: "0x8ABFB70C49CC43E2",
  HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN: "0x761B0E69AC4D007E",
  _GET_OBJECT_OFFSET_FROM_COORDS: "0x163E252DE035A133",
  SET_STATE_OF_CLOSEST_DOOR_OF_TYPE: "0xF82D8F1926A02C3D",
  GET_STATE_OF_CLOSEST_DOOR_OF_TYPE: "0xEDC1A5B84AEF33FF",
  _DOOR_CONTROL: "0x9B12F9A24FABEDB0",
  ADD_DOOR_TO_SYSTEM: "0x6F8838D03D1DC226",
  REMOVE_DOOR_FROM_SYSTEM: "0x464D8E1427156FE4",
  _SET_DOOR_ACCELERATION_LIMIT: "0x6BAB9442830C7F53",
  _SET_DOOR_AJAR_ANGLE: "0xB6E6FBA95C7324AC",
  _DOES_DOOR_EXIST: "0xC153C43EA202C8C1",
  IS_DOOR_CLOSED: "0xC531EE8A1145A149",
  IS_DOOR_REGISTERED_WITH_SYSTEM: "0xC153C43EA202C8C1",
  IS_GARAGE_EMPTY: "0x90E47239EA1980B8",
  DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS: "0xBFA48E2FF417213F",
  IS_POINT_IN_ANGLED_AREA: "0x2A70BAE8883E4C81",
  SET_OBJECT_PHYSICS_PARAMS: "0xF6DF6E90DE7DF90F",
  GET_OBJECT_FRAGMENT_DAMAGE_HEALTH: "0xB6FBFD079B8D0596",
  SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN: "0x406137F8EF90EAF5",
  IS_ANY_OBJECT_NEAR_POINT: "0x397DC58FF00298D1",
  IS_OBJECT_NEAR_POINT: "0x8C90FE4B381BA60A",
  TRACK_OBJECT_VISIBILITY: "0xB252BC036B525623",
  IS_OBJECT_VISIBLE: "0x8B32ACE6326A7546",
  CREATE_PICKUP: "0xFBA08C503DD5FA58",
  CREATE_PICKUP_ROTATE: "0x891804727E0A98B7",
  CREATE_AMBIENT_PICKUP: "0x673966A0C0FD7171",
  CREATE_PORTABLE_PICKUP: "0x2EAF1FDB2FB55698",
  "_CREATE_PORTABLE_PICKUP_2": "0x125494B98A21AAF7",
  ATTACH_PORTABLE_PICKUP_TO_PED: "0x8DC39368BDD57755",
  DETACH_PORTABLE_PICKUP_FROM_PED: "0xCF463D1E9A0AECB1",
  GET_SAFE_PICKUP_COORDS: "0x6E16BC2503FF1FF0",
  GET_PICKUP_COORDS: "0x225B8B35C88029B3",
  REMOVE_ALL_PICKUPS_OF_TYPE: "0x27F9D613092159CF",
  HAS_PICKUP_BEEN_COLLECTED: "0x80EC48E6679313F9",
  REMOVE_PICKUP: "0x3288D8ACAECD2AB2",
  CREATE_MONEY_PICKUPS: "0x0589B5E791CE9B2B",
  DOES_PICKUP_EXIST: "0xAFC1CA75AD4074D1",
  DOES_PICKUP_OBJECT_EXIST: "0xD9EFB6DBF7DAAEA3",
  GET_PICKUP_OBJECT: "0x5099BC55630B25AE",
  _IS_PICKUP_WITHIN_RADIUS: "0xF9C36251F6E48E33",
  SET_PICKUP_REGENERATION_TIME: "0x78015C9B4B3ECC9D",
  SET_TEAM_PICKUP_OBJECT: "0x53E0DF1A2A3CF0CA",
  SET_FORCE_OBJECT_THIS_FRAME: "0xF538081986E49E9D",
  _MARK_OBJECT_FOR_DELETION: "0xADBE4809F19F927A",
  TASK_PAUSE: "0xE73A266DB0CA9042",
  TASK_STAND_STILL: "0x919BE13EED931959",
  TASK_JUMP: "0x0AE4086104E067B1",
  TASK_COWER: "0x3EB1FE9E8E908E15",
  TASK_HANDS_UP: "0xF2EAB31979A7F910",
  UPDATE_TASK_HANDS_UP_DURATION: "0xA98FCAFD7893C834",
  TASK_OPEN_VEHICLE_DOOR: "0x965791A9A488A062",
  TASK_ENTER_VEHICLE: "0xC20E50AA46D09CA8",
  TASK_LEAVE_VEHICLE: "0xD3DBCE61A490BE02",
  _TASK_GET_OFF_BOAT: "0x9C00E77AF14B2DFF",
  TASK_SKY_DIVE: "0x601736CFE536B0A0",
  TASK_PARACHUTE: "0xD2F1C53C97EE81AB",
  TASK_PARACHUTE_TO_TARGET: "0xB33E291AFA6BD03A",
  SET_PARACHUTE_TASK_TARGET: "0xC313379AF0FCEDA7",
  SET_PARACHUTE_TASK_THRUST: "0x0729BAC1B8C64317",
  TASK_RAPPEL_FROM_HELI: "0x09693B0312F91649",
  TASK_VEHICLE_DRIVE_TO_COORD: "0xE2A2AA2F659D77A7",
  TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE: "0x158BB33F920D360C",
  TASK_VEHICLE_DRIVE_WANDER: "0x480142959D337D00",
  TASK_FOLLOW_TO_OFFSET_OF_ENTITY: "0x304AE42E357B8C7E",
  TASK_GO_STRAIGHT_TO_COORD: "0xD76B57B44F1E6F8B",
  TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY: "0x61E360B7E040D12E",
  TASK_ACHIEVE_HEADING: "0x93B93A37987F1F3D",
  TASK_FLUSH_ROUTE: "0x841142A1376E9006",
  TASK_EXTEND_ROUTE: "0x1E7889778264843A",
  TASK_FOLLOW_POINT_ROUTE: "0x595583281858626E",
  TASK_GO_TO_ENTITY: "0x6A071245EB0D1882",
  TASK_SMART_FLEE_COORD: "0x94587F17E9C365D5",
  TASK_SMART_FLEE_PED: "0x22B0D0E37CCB840D",
  TASK_REACT_AND_FLEE_PED: "0x72C896464915D1B1",
  TASK_SHOCKING_EVENT_REACT: "0x452419CBD838065B",
  TASK_WANDER_IN_AREA: "0xE054346CA3A0F315",
  TASK_WANDER_STANDARD: "0xBB9CE077274F6A1B",
  TASK_VEHICLE_PARK: "0x0F3E34E968EA374E",
  TASK_STEALTH_KILL: "0xAA5DC05579D60BD9",
  TASK_PLANT_BOMB: "0x965FEC691D55E9BF",
  TASK_FOLLOW_NAV_MESH_TO_COORD: "0x15D3A79D4E44B913",
  TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED: "0x17F58B88D085DBAC",
  SET_PED_PATH_CAN_USE_CLIMBOVERS: "0x8E06A6FE76C9EFF4",
  SET_PED_PATH_CAN_USE_LADDERS: "0x77A5B103C87F476E",
  SET_PED_PATH_CAN_DROP_FROM_HEIGHT: "0xE361C5C71C431A4F",
  SET_PED_PATHS_WIDTH_PLANT: "0xF35425A4204367EC",
  SET_PED_PATH_PREFER_TO_AVOID_WATER: "0x38FE1EC73743793C",
  SET_PED_PATH_AVOID_FIRE: "0x4455517B28441E60",
  SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT: "0x6C6B148586F934F7",
  GET_NAVMESH_ROUTE_DISTANCE_REMAINING: "0xC6F5C0BCDC74D62D",
  GET_NAVMESH_ROUTE_RESULT: "0x632E831F382A0FA8",
  TASK_GO_TO_COORD_ANY_MEANS: "0x5BC448CB78FA3E88",
  TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS: "0x1DD45F9ECFDB1BC9",
  TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED: "0xB8ECD61F531A7B02",
  TASK_PLAY_ANIM: "0xEA47FE3719165B94",
  TASK_PLAY_ANIM_ADVANCED: "0x83CDB10EA29B370B",
  STOP_ANIM_TASK: "0x97FF36A1D40EA00A",
  TASK_SCRIPTED_ANIMATION: "0x126EF75F1E17ABE5",
  PLAY_ENTITY_SCRIPTED_ANIM: "0x77A1EEC547E7FCF1",
  STOP_ANIM_PLAYBACK: "0xEE08C992D238C5D1",
  SET_ANIM_WEIGHT: "0x207F1A47C0342F48",
  SET_ANIM_RATE: "0x032D49C5E359C847",
  SET_ANIM_LOOPED: "0x70033C3CC29A1FF4",
  TASK_PLAY_PHONE_GESTURE_ANIMATION: "0x8FBB6758B3B3E9EC",
  _TASK_STOP_PHONE_GESTURE_ANIMATION: "0x3FA00D4F4641BFAE",
  IS_PLAYING_PHONE_GESTURE_ANIM: "0xB8EBB1E9D3588C10",
  GET_PHONE_GESTURE_ANIM_CURRENT_TIME: "0x47619ABE8B268C60",
  GET_PHONE_GESTURE_ANIM_TOTAL_TIME: "0x1EE0F68A7C25DEC6",
  TASK_VEHICLE_PLAY_ANIM: "0x69F5C3BD0F3EBD89",
  TASK_LOOK_AT_COORD: "0x6FA46612594F7973",
  TASK_LOOK_AT_ENTITY: "0x69F4BE8C8CC4796C",
  TASK_CLEAR_LOOK_AT: "0x0F804F1DB19B9689",
  OPEN_SEQUENCE_TASK: "0xE8854A4326B9E12B",
  CLOSE_SEQUENCE_TASK: "0x39E72BC99E6360CB",
  TASK_PERFORM_SEQUENCE: "0x5ABA3986D90D8A3B",
  CLEAR_SEQUENCE_TASK: "0x3841422E9C488D8C",
  SET_SEQUENCE_TO_REPEAT: "0x58C70CF3A41E4AE7",
  GET_SEQUENCE_PROGRESS: "0x00A9010CFE1E3533",
  GET_IS_TASK_ACTIVE: "0xB0760331C7AA4155",
  GET_SCRIPT_TASK_STATUS: "0x77F1BEB8863288D5",
  GET_ACTIVE_VEHICLE_MISSION_TYPE: "0x534AEBA6E5ED4CAB",
  TASK_LEAVE_ANY_VEHICLE: "0x504D54DF3F6F2247",
  TASK_AIM_GUN_SCRIPTED: "0x7A192BE16D373D00",
  TASK_AIM_GUN_SCRIPTED_WITH_TARGET: "0x8605AF0DE8B3A5AC",
  UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET: "0x9724FB59A3E72AD0",
  GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK: "0x3A8CADC7D37AACC5",
  TASK_AIM_GUN_AT_ENTITY: "0x9B53BB6E8943AF53",
  TASK_TURN_PED_TO_FACE_ENTITY: "0x5AD23D40115353AC",
  TASK_AIM_GUN_AT_COORD: "0x6671F3EEC681BDA1",
  TASK_SHOOT_AT_COORD: "0x46A6CC01E0826106",
  TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT: "0x7AA80209BDA643EB",
  CLEAR_PED_TASKS: "0xE1EF3C1216AFF2CD",
  CLEAR_PED_SECONDARY_TASK: "0x176CECF6F920D707",
  TASK_EVERYONE_LEAVE_VEHICLE: "0x7F93691AB4B92272",
  TASK_GOTO_ENTITY_OFFSET: "0xE39B4FF4FDEBDE27",
  TASK_GOTO_ENTITY_OFFSET_XY: "0x338E7EF52B6095A9",
  TASK_TURN_PED_TO_FACE_COORD: "0x1DDA930A0AC38571",
  TASK_VEHICLE_TEMP_ACTION: "0xC429DCEEB339E129",
  TASK_VEHICLE_MISSION: "0x659427E0EF36BCDE",
  TASK_VEHICLE_MISSION_PED_TARGET: "0x9454528DF15D657A",
  TASK_VEHICLE_MISSION_COORS_TARGET: "0xF0AF20AA7731F8C3",
  TASK_VEHICLE_ESCORT: "0x0FA6E4B75F302400",
  _TASK_VEHICLE_FOLLOW: "0xFC545A9F0626E3B6",
  TASK_VEHICLE_CHASE: "0x3C08A8E30363B353",
  TASK_VEHICLE_HELI_PROTECT: "0x1E09C32048FEFD1C",
  SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG: "0xCC665AAC360D31E7",
  SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE: "0x639B642FACBE4EDD",
  TASK_HELI_CHASE: "0xAC83B1DB38D0ADA0",
  TASK_PLANE_CHASE: "0x2D2386F273FF7A25",
  TASK_PLANE_LAND: "0xBF19721FA34D32C0",
  TASK_HELI_MISSION: "0xDAD029E187A2BEB4",
  TASK_PLANE_MISSION: "0x23703CD154E83B88",
  TASK_BOAT_MISSION: "0x15C86013127CE63F",
  TASK_DRIVE_BY: "0x2F8AF0E82773A171",
  SET_DRIVEBY_TASK_TARGET: "0xE5B302114D8162EE",
  CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK: "0xC35B5CDB2824CF69",
  IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK: "0x8785E6E40C7A8818",
  CONTROL_MOUNTED_WEAPON: "0xDCFE42068FE0135A",
  SET_MOUNTED_WEAPON_TARGET: "0xCCD892192C6D2BB9",
  IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK: "0xA320EF046186FA3B",
  TASK_USE_MOBILE_PHONE: "0xBD2A8EC3AF4DE7DB",
  TASK_USE_MOBILE_PHONE_TIMED: "0x5EE02954A14C69DB",
  TASK_CHAT_TO_PED: "0x8C338E0263E4FD19",
  TASK_WARP_PED_INTO_VEHICLE: "0x9A7D091411C5F684",
  TASK_SHOOT_AT_ENTITY: "0x08DA95E8298AE772",
  TASK_CLIMB: "0x89D9FCC2435112F1",
  TASK_CLIMB_LADDER: "0xB6C987F9285A3814",
  CLEAR_PED_TASKS_IMMEDIATELY: "0xAAA34F8A7CB32098",
  TASK_PERFORM_SEQUENCE_FROM_PROGRESS: "0x89221B16730234F0",
  SET_NEXT_DESIRED_MOVE_STATE: "0xF1B9F16E89E2C93A",
  SET_PED_DESIRED_MOVE_BLEND_RATIO: "0x1E982AC8716912C5",
  GET_PED_DESIRED_MOVE_BLEND_RATIO: "0x8517D4A6CA8513ED",
  TASK_GOTO_ENTITY_AIMING: "0xA9DA48FAB8A76C12",
  TASK_SET_DECISION_MAKER: "0xEB8517DDA73720DA",
  TASK_SET_SPHERE_DEFENSIVE_AREA: "0x933C06518B52A9A4",
  TASK_CLEAR_DEFENSIVE_AREA: "0x95A6C46A31D1917D",
  TASK_PED_SLIDE_TO_COORD: "0xD04FE6765D990A06",
  TASK_PED_SLIDE_TO_COORD_HDG_RATE: "0x5A4A6A6D3DC64F52",
  ADD_COVER_POINT: "0xD5C12A75C7B9497F",
  REMOVE_COVER_POINT: "0xAE287C923D891715",
  DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS: "0xA98B8E3C088E5A31",
  GET_SCRIPTED_COVER_POINT_COORDS: "0x594A1028FC2A3E85",
  TASK_COMBAT_PED: "0xF166E48407BAC484",
  TASK_COMBAT_PED_TIMED: "0x944F30DCB7096BDE",
  TASK_SEEK_COVER_FROM_POS: "0x75AC2B60386D89F2",
  TASK_SEEK_COVER_FROM_PED: "0x84D32B3BEC531324",
  TASK_SEEK_COVER_TO_COVER_POINT: "0xD43D95C7A869447F",
  TASK_SEEK_COVER_TO_COORDS: "0x39246A6958EF072C",
  TASK_PUT_PED_DIRECTLY_INTO_COVER: "0x4172393E6BE1FECE",
  TASK_EXIT_COVER: "0x79B258E397854D29",
  TASK_PUT_PED_DIRECTLY_INTO_MELEE: "0x1C6CD14A876FFE39",
  TASK_TOGGLE_DUCK: "0xAC96609B9995EDF8",
  TASK_GUARD_CURRENT_POSITION: "0x4A58A47A72E3FCB4",
  TASK_GUARD_ASSIGNED_DEFENSIVE_AREA: "0xD2A207EEBDF9889B",
  TASK_GUARD_SPHERE_DEFENSIVE_AREA: "0xC946FE14BE0EB5E2",
  TASK_STAND_GUARD: "0xAE032F8BBA959E90",
  SET_DRIVE_TASK_CRUISE_SPEED: "0x5C9B84BD7D31D908",
  SET_DRIVE_TASK_MAX_CRUISE_SPEED: "0x404A5AA9B9F0B746",
  SET_DRIVE_TASK_DRIVING_STYLE: "0xDACE1BE37D88AF67",
  ADD_COVER_BLOCKING_AREA: "0x45C597097DD7CB81",
  REMOVE_ALL_COVER_BLOCKING_AREAS: "0xDB6708C0B46F56D8",
  TASK_START_SCENARIO_IN_PLACE: "0x142A02425FF02BD9",
  TASK_START_SCENARIO_AT_POSITION: "0xFA4EFC79F69D4F07",
  TASK_USE_NEAREST_SCENARIO_TO_COORD: "0x277F471BA9DB000B",
  TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP: "0x58E2E0F23F6B76C3",
  TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD: "0x9FDA1B3D7E7028B3",
  TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP: "0x97A28E63F0BA5631",
  DOES_SCENARIO_EXIST_IN_AREA: "0x5A59271FFADD33C1",
  DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA: "0x0A9D0C2A3BBC86C1",
  IS_SCENARIO_OCCUPIED: "0x788756D73AC2E07C",
  PED_HAS_USE_SCENARIO_TASK: "0x295E3CCEC879CCD7",
  PLAY_ANIM_ON_RUNNING_SCENARIO: "0x748040460F8DF5DC",
  DOES_SCENARIO_GROUP_EXIST: "0xF9034C136C9E00D3",
  IS_SCENARIO_GROUP_ENABLED: "0x367A09DED4E05B99",
  SET_SCENARIO_GROUP_ENABLED: "0x02C8E5B49848664E",
  RESET_SCENARIO_GROUPS_ENABLED: "0xDD902D0349AFAD3A",
  SET_EXCLUSIVE_SCENARIO_GROUP: "0x535E97E1F7FC0C6A",
  RESET_EXCLUSIVE_SCENARIO_GROUP: "0x4202BBCB8684563D",
  IS_SCENARIO_TYPE_ENABLED: "0x3A815DB3EA088722",
  SET_SCENARIO_TYPE_ENABLED: "0xEB47EC4E34FB7EE1",
  RESET_SCENARIO_TYPES_ENABLED: "0x0D40EE2A7F2B2D6D",
  IS_PED_ACTIVE_IN_SCENARIO: "0xAA135F9482C82CC3",
  TASK_COMBAT_HATED_TARGETS_IN_AREA: "0x4CF5F55DAC3280A0",
  TASK_COMBAT_HATED_TARGETS_AROUND_PED: "0x7BF835BB9E2698C8",
  TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED: "0x2BBA30B854534A0C",
  TASK_THROW_PROJECTILE: "0x7285951DBF6B5A51",
  TASK_SWAP_WEAPON: "0xA21C51255B205245",
  TASK_RELOAD_WEAPON: "0x62D2916F56B9CD2D",
  IS_PED_GETTING_UP: "0x2A74E1D5F2F00EEC",
  TASK_WRITHE: "0xCDDC2B77CE54AC6E",
  IS_PED_IN_WRITHE: "0xDEB6D52126E7D640",
  OPEN_PATROL_ROUTE: "0xA36BFB5EE89F3D82",
  CLOSE_PATROL_ROUTE: "0xB043ECA801B8CBC1",
  ADD_PATROL_ROUTE_NODE: "0x8EDF950167586B7C",
  ADD_PATROL_ROUTE_LINK: "0x23083260DEC3A551",
  CREATE_PATROL_ROUTE: "0xAF8A443CCC8018DC",
  DELETE_PATROL_ROUTE: "0x7767DD9D65E91319",
  TASK_PATROL: "0xBDA5DF49D080FE4E",
  TASK_STAY_IN_COVER: "0xE5DA8615A6180789",
  ADD_VEHICLE_SUBTASK_ATTACK_COORD: "0x5CF0D8F9BBA0DD75",
  ADD_VEHICLE_SUBTASK_ATTACK_PED: "0x85F462BADC7DA47F",
  TASK_VEHICLE_SHOOT_AT_PED: "0x10AB107B887214D8",
  TASK_VEHICLE_AIM_AT_PED: "0xE41885592B08B097",
  TASK_VEHICLE_SHOOT_AT_COORD: "0x5190796ED39C9B6D",
  TASK_VEHICLE_AIM_AT_COORD: "0x447C1E9EF844BC0F",
  TASK_VEHICLE_GOTO_NAVMESH: "0x195AEEB13CEFE2EE",
  TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD: "0x11315AB3385B8AC0",
  TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY: "0xB2A16444EAD9AE47",
  TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD: "0xA55547801EB331FC",
  TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD: "0x04701832B739DCE5",
  TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY: "0x97465886D35210E9",
  SET_HIGH_FALL_TASK: "0x8C825BDC7741D37C",
  REQUEST_WAYPOINT_RECORDING: "0x9EEFB62EB27B5792",
  GET_IS_WAYPOINT_RECORDING_LOADED: "0xCB4E8BE8A0063C5D",
  REMOVE_WAYPOINT_RECORDING: "0xFF1B8B4AA1C25DC8",
  WAYPOINT_RECORDING_GET_NUM_POINTS: "0x5343532C01A07234",
  WAYPOINT_RECORDING_GET_COORD: "0x2FB897405C90B361",
  WAYPOINT_RECORDING_GET_SPEED_AT_POINT: "0x005622AEBC33ACA9",
  WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT: "0xB629A298081F876F",
  TASK_FOLLOW_WAYPOINT_RECORDING: "0x0759591819534F7B",
  IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED: "0xE03B3F2D3DC59B64",
  GET_PED_WAYPOINT_PROGRESS: "0x2720AAA75001E094",
  GET_PED_WAYPOINT_DISTANCE: "0xE6A877C64CAF1BC5",
  SET_PED_WAYPOINT_ROUTE_OFFSET: "0xED98E10B0AFCE4B4",
  GET_WAYPOINT_DISTANCE_ALONG_ROUTE: "0xA5B769058763E497",
  WAYPOINT_PLAYBACK_GET_IS_PAUSED: "0x701375A7D43F01CB",
  WAYPOINT_PLAYBACK_PAUSE: "0x0F342546AA06FED5",
  WAYPOINT_PLAYBACK_RESUME: "0x244F70C84C547D2D",
  WAYPOINT_PLAYBACK_OVERRIDE_SPEED: "0x7D7D2B47FA788E85",
  WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED: "0x6599D834B12D0800",
  USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE: "0x5A353B8E6B1095B5",
  WAYPOINT_PLAYBACK_START_AIMING_AT_PED: "0x20E330937C399D29",
  WAYPOINT_PLAYBACK_START_AIMING_AT_COORD: "0x8968400D900ED8B3",
  WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD: "0x057A25CFCC9DB671",
  WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING: "0x47EFA040EBB8E2EA",
  ASSISTED_MOVEMENT_REQUEST_ROUTE: "0x817268968605947A",
  ASSISTED_MOVEMENT_REMOVE_ROUTE: "0x3548536485DD792B",
  ASSISTED_MOVEMENT_IS_ROUTE_LOADED: "0x60F9A4393A21F741",
  ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES: "0xD5002D78B7162E1B",
  ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME: "0x13945951E16EF912",
  TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING: "0x3123FAA6DB1CF7ED",
  IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE: "0xF5134943EA29868C",
  GET_VEHICLE_WAYPOINT_PROGRESS: "0x9824CFF8FC66E159",
  GET_VEHICLE_WAYPOINT_TARGET_POINT: "0x416B62AC8B9E5BBD",
  VEHICLE_WAYPOINT_PLAYBACK_PAUSE: "0x8A4E6AC373666BC5",
  VEHICLE_WAYPOINT_PLAYBACK_RESUME: "0xDC04FCAA7839D492",
  VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED: "0x5CEB25A7D2848963",
  VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED: "0x121F0593E0A431D7",
  TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS: "0x90D2156198831D69",
  TASK_FORCE_MOTION_STATE: "0x4F056E1AFFEF17AB",
  IS_MOVE_BLEND_RATIO_STILL: "0x349CE7B56DAFD95C",
  IS_MOVE_BLEND_RATIO_WALKING: "0xF133BBBE91E1691F",
  IS_MOVE_BLEND_RATIO_RUNNING: "0xD4D8636C0199A939",
  IS_MOVE_BLEND_RATIO_SPRINTING: "0x24A2AD74FA9814E2",
  IS_PED_STILL: "0xAC29253EEF8F0180",
  IS_PED_WALKING: "0xDE4C184B2B9B071A",
  IS_PED_RUNNING: "0xC5286FFC176F28A2",
  IS_PED_SPRINTING: "0x57E457CD2C0FC168",
  IS_PED_STRAFING: "0xE45B7F222DE47E09",
  TASK_SYNCHRONIZED_SCENE: "0xEEA929141F699854",
  TASK_SWEEP_AIM_ENTITY: "0x2047C02158D6405A",
  UPDATE_TASK_SWEEP_AIM_ENTITY: "0xE4973DBDBE6E44B3",
  TASK_SWEEP_AIM_POSITION: "0x7AFE8FDC10BC07D2",
  UPDATE_TASK_SWEEP_AIM_POSITION: "0xBB106883F5201FC4",
  TASK_ARREST_PED: "0xF3B9A78A178572B1",
  IS_PED_RUNNING_ARREST_TASK: "0x3DC52677769B4AE0",
  IS_PED_BEING_ARRESTED: "0x90A09F3A45FED688",
  UNCUFF_PED: "0x67406F2C8F87FC4F",
  IS_PED_CUFFED: "0x74E559B3BC910685",
  GET_ALLOCATED_STACK_SIZE: "0x8B3CA62B1EF19B62",
  _GET_FREE_STACK_SLOTS_COUNT: "0xFEAD16FC8F9DFC0F",
  SET_RANDOM_SEED: "0x444D98F98C11F3EC",
  SET_TIME_SCALE: "0x1D408577D440E81E",
  SET_MISSION_FLAG: "0xC4301E5121A0ED73",
  GET_MISSION_FLAG: "0xA33CDCCDA663159E",
  SET_RANDOM_EVENT_FLAG: "0x971927086CFD2158",
  GET_RANDOM_EVENT_FLAG: "0xD2D57F1D764117B1",
  _GET_EMPTY_STRING: "0x24DA7D7667FD7B09",
  _GET_CURRENT_WEATHER_TYPE: "0x564B884A05EC45A3",
  _GET_NEXT_WEATHER_TYPE: "0x711327CD09C8F162",
  IS_PREV_WEATHER_TYPE: "0x44F28F86433B10A9",
  IS_NEXT_WEATHER_TYPE: "0x2FAA3A30BEC0F25D",
  SET_WEATHER_TYPE_PERSIST: "0x704983DF373B198F",
  SET_WEATHER_TYPE_NOW_PERSIST: "0xED712CA327900C8A",
  SET_WEATHER_TYPE_NOW: "0x29B487C359E19889",
  _SET_WEATHER_TYPE_OVER_TIME: "0xFB5045B7C42B75BF",
  SET_RANDOM_WEATHER_TYPE: "0x8B05F884CF7E8020",
  CLEAR_WEATHER_TYPE_PERSIST: "0xCCC39339BEF76CF5",
  _GET_WEATHER_TYPE_TRANSITION: "0xF3BBE884A14BB413",
  _SET_WEATHER_TYPE_TRANSITION: "0x578C752848ECFA0C",
  SET_OVERRIDE_WEATHER: "0xA43D5C6FE51ADBEF",
  CLEAR_OVERRIDE_WEATHER: "0x338D2E3477711050",
  SET_WIND: "0xAC3A74E8384A9919",
  SET_WIND_SPEED: "0xEE09ECEDBABE47FC",
  GET_WIND_SPEED: "0xA8CF1CC0AFCD3F12",
  SET_WIND_DIRECTION: "0xEB0F4468467B4528",
  GET_WIND_DIRECTION: "0x1F400FEF721170DA",
  _SET_RAIN_FX_INTENSITY: "0x643E26EA6E024D92",
  GET_RAIN_LEVEL: "0x96695E368AD855F3",
  GET_SNOW_LEVEL: "0xC5868A966E5BE3AE",
  _CREATE_LIGHTNING_THUNDER: "0xF6062E089251C898",
  _SET_CLOUD_HAT_TRANSITION: "0xFC4842A34657BFCB",
  _CLEAR_CLOUD_HAT: "0x957E790EA1727B64",
  GET_GAME_TIMER: "0x9CD27B0045628463",
  GET_FRAME_TIME: "0x15C40837039FFAF7",
  GET_FRAME_COUNT: "0xFC8202EFC642E6F2",
  GET_RANDOM_FLOAT_IN_RANGE: "0x313CE5879CEB6FCD",
  GET_RANDOM_INT_IN_RANGE: "0xD53343AA4FB7DD28",
  "GET_GROUND_Z_FOR_3D_COORD": "0xC906A7DAB05C8D2B",
  ASIN: "0xC843060B5765DCE7",
  ACOS: "0x1D08B970013C34B6",
  TAN: "0x632106CC96E82E91",
  ATAN: "0xA9D1795CD5043663",
  "ATAN2": "0x8927CBF9D22261A4",
  GET_DISTANCE_BETWEEN_COORDS: "0xF1B760881820C952",
  "GET_ANGLE_BETWEEN_2D_VECTORS": "0x186FC4BE848E1C92",
  "GET_HEADING_FROM_VECTOR_2D": "0x2FFB6B224F4B2926",
  SET_BIT: "0x933D6A9EEC1BACD0",
  CLEAR_BIT: "0xE80492A9AC099A93",
  GET_HASH_KEY: "0xD24D37CC275948CC",
  IS_AREA_OCCUPIED: "0xA61B4DF533DCB56E",
  IS_POSITION_OCCUPIED: "0xADCDE75E1C60F32D",
  IS_POINT_OBSCURED_BY_A_MISSION_ENTITY: "0xE54E209C35FFA18D",
  CLEAR_AREA: "0xA56F01F3765B93A0",
  "_CLEAR_AREA_2": "0x957838AAF91BD12D",
  CLEAR_AREA_OF_VEHICLES: "0x01C7B9B38428AEB6",
  CLEAR_ANGLED_AREA_OF_VEHICLES: "0x11DB3500F042A8AA",
  CLEAR_AREA_OF_OBJECTS: "0xDD9B9B385AAC7F5B",
  CLEAR_AREA_OF_PEDS: "0xBE31FD6CE464AC59",
  CLEAR_AREA_OF_COPS: "0x04F8FC8FCF58F88D",
  CLEAR_AREA_OF_PROJECTILES: "0x0A1CB9094635D1A6",
  SET_SAVE_MENU_ACTIVE: "0xC9BF75D28165FF77",
  SET_CREDITS_ACTIVE: "0xB938B7E6D3C0620C",
  TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME: "0x9DC711BC69C548DF",
  NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME: "0x9243BAC96D64C050",
  ADD_HOSPITAL_RESTART: "0x1F464EF988465A81",
  DISABLE_HOSPITAL_RESTART: "0xC8535819C450EBA8",
  ADD_POLICE_RESTART: "0x452736765B31FC4B",
  DISABLE_POLICE_RESTART: "0x23285DED6EBD7EA3",
  _DISABLE_AUTOMATIC_RESPAWN: "0x2C2B3493FBF51C71",
  IGNORE_NEXT_RESTART: "0x21FFB63D8C615361",
  SET_FADE_OUT_AFTER_DEATH: "0x4A18E01DF2C87B86",
  SET_FADE_OUT_AFTER_ARREST: "0x1E0B4DC0D990A4E7",
  SET_FADE_IN_AFTER_DEATH_ARREST: "0xDA66D2796BA33F12",
  SET_FADE_IN_AFTER_LOAD: "0xF3D78F59DFE18D79",
  REGISTER_SAVE_HOUSE: "0xC0714D0A7EEECA54",
  SET_SAVE_HOUSE: "0x4F548CABEAE553BC",
  OVERRIDE_SAVE_HOUSE: "0x1162EA8AE9D24EEA",
  DO_AUTO_SAVE: "0x50EEAAD86232EE55",
  IS_AUTO_SAVE_IN_PROGRESS: "0x69240733738C19A0",
  BEGIN_REPLAY_STATS: "0xE0E500246FF73D66",
  END_REPLAY_STATS: "0xA23E821FBDF8A5F2",
  CLEAR_REPLAY_STATS: "0x1B1AB132A16FDA55",
  IS_MEMORY_CARD_IN_USE: "0x8A75CE2956274ADD",
  SHOOT_SINGLE_BULLET_BETWEEN_COORDS: "0x867654CBC7606F2C",
  GET_MODEL_DIMENSIONS: "0x03E8D3D5F549087A",
  SET_FAKE_WANTED_LEVEL: "0x1454F2448DE30163",
  IS_BIT_SET: "0xA921AA820C25702F",
  USING_MISSION_CREATOR: "0xF14878FC50BEC6EE",
  SET_MINIGAME_IN_PROGRESS: "0x19E00D7322C6F85B",
  IS_MINIGAME_IN_PROGRESS: "0x2B4A15E44DE0F478",
  IS_THIS_A_MINIGAME_SCRIPT: "0x7B30F65D7B710098",
  IS_SNIPER_INVERTED: "0x61A23B7EDA9BDA24",
  GET_PROFILE_SETTING: "0xC488FF2356EA7791",
  ARE_STRINGS_EQUAL: "0x0C515FAB3FF9EA92",
  COMPARE_STRINGS: "0x1E34710ECD4AB0EB",
  ABSI: "0xF0D31AD191A74F87",
  ABSF: "0x73D57CFFDD12C355",
  IS_SNIPER_BULLET_IN_AREA: "0xFEFCF11B01287125",
  IS_PROJECTILE_IN_AREA: "0x5270A8FBC098C3F8",
  IS_PROJECTILE_TYPE_IN_AREA: "0x2E0DC353342C4A6D",
  IS_PROJECTILE_TYPE_IN_ANGLED_AREA: "0xF0BC12401061DEA0",
  IS_BULLET_IN_ANGLED_AREA: "0x1A8B5F3C01E2B477",
  IS_BULLET_IN_AREA: "0x3F2023999AD51C1F",
  IS_BULLET_IN_BOX: "0xDE0F6D7450D37351",
  HAS_BULLET_IMPACTED_IN_AREA: "0x9870ACFB89A90995",
  HAS_BULLET_IMPACTED_IN_BOX: "0xDC8C5D7CFEAB8394",
  IS_ORBIS_VERSION: "0xA72BC0B675B1519E",
  IS_DURANGO_VERSION: "0x4D982ADB1978442D",
  "IS_XBOX360_VERSION": "0xF6201B4DAF662A9D",
  "IS_PS3_VERSION": "0xCCA1072C29D096C2",
  IS_PC_VERSION: "0x48AF36444B965238",
  IS_AUSSIE_VERSION: "0x9F1935CA1F724008",
  IS_STRING_NULL: "0xF22B6C47C6EAB066",
  IS_STRING_NULL_OR_EMPTY: "0xCA042B6957743895",
  STRING_TO_INT: "0x5A5F40FE637EB584",
  SET_BITS_IN_RANGE: "0x8EF07E15701D61ED",
  GET_BITS_IN_RANGE: "0x53158863FCC0893A",
  ADD_STUNT_JUMP: "0x1A992DA297A4630C",
  ADD_STUNT_JUMP_ANGLED: "0xBBE5D803A5360CBF",
  DELETE_STUNT_JUMP: "0xDC518000E39DAE1F",
  ENABLE_STUNT_JUMP_SET: "0xE369A5783B866016",
  DISABLE_STUNT_JUMP_SET: "0xA5272EBEDD4747F6",
  IS_STUNT_JUMP_IN_PROGRESS: "0x7A3F19700A4D0525",
  CANCEL_STUNT_JUMP: "0xE6B7B0ACD4E4B75E",
  SET_GAME_PAUSED: "0x577D1284D6873711",
  SET_THIS_SCRIPT_CAN_BE_PAUSED: "0xAA391C728106F7AF",
  SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT: "0xB98236CAAECEF897",
  INT_SCORES_SORTED: "0x071E2A839DE82D90",
  _ENABLE_MP_DLC_MAPS: "0x9BAE5AD2508DF078",
  _SET_UNK_MAP_FLAG: "0xC5F0A8EBD3F361CE",
  IS_FRONTEND_FADING: "0x7EA2B6AF97ECA6ED",
  POPULATE_NOW: "0x7472BB270D7B4F3E",
  GET_INDEX_OF_CURRENT_LEVEL: "0xCBAD6729F7B1F4FC",
  SET_GRAVITY_LEVEL: "0x740E14FAD5842351",
  START_SAVE_DATA: "0xA9575F812C6A7997",
  STOP_SAVE_DATA: "0x74E20C9145FB66FD",
  REGISTER_INT_TO_SAVE: "0x34C9EE5986258415",
  REGISTER_ENUM_TO_SAVE: "0x10C2FA78D0E128A1",
  REGISTER_FLOAT_TO_SAVE: "0x7CAEC29ECB5DFEBB",
  REGISTER_BOOL_TO_SAVE: "0xC8F4131414C835A1",
  REGISTER_TEXT_LABEL_TO_SAVE: "0xEDB1232C5BEAE62F",
  _START_SAVE_STRUCT: "0xBF737600CDDBEADD",
  STOP_SAVE_STRUCT: "0xEB1774DF12BB9F12",
  _START_SAVE_ARRAY: "0x60FE567DF1B1AF9D",
  STOP_SAVE_ARRAY: "0x04456F95153C6BE4",
  CREATE_INCIDENT: "0x3F892CAF67444AE7",
  CREATE_INCIDENT_WITH_ENTITY: "0x05983472F0494E60",
  DELETE_INCIDENT: "0x556C1AA270D5A207",
  IS_INCIDENT_VALID: "0xC8BC6461E629BEAA",
  FIND_SPAWN_POINT_IN_DIRECTION: "0x6874E2190B0C1972",
  ENABLE_TENNIS_MODE: "0x28A04B411933F8A6",
  IS_TENNIS_MODE: "0x5D5479D115290C3F",
  RESET_DISPATCH_IDEAL_SPAWN_DISTANCE: "0x77A84429DD9F0A15",
  SET_DISPATCH_IDEAL_SPAWN_DISTANCE: "0x6FE601A64180D423",
  SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS: "0x44F7CBC1BEB3327D",
  SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER: "0x48838ED9937A15D1",
  REMOVE_DISPATCH_SPAWN_BLOCKING_AREA: "0x264AC28B01B353A5",
  RESET_DISPATCH_SPAWN_BLOCKING_AREAS: "0xAC7BFD5C1D83EA75",
  DISPLAY_ONSCREEN_KEYBOARD: "0x00DC833F2568DBF6",
  UPDATE_ONSCREEN_KEYBOARD: "0x0CF2B696BBF945AE",
  GET_ONSCREEN_KEYBOARD_RESULT: "0x8362B09B91893647",
  SET_EXPLOSIVE_AMMO_THIS_FRAME: "0xA66C71C98D5F2CFB",
  SET_FIRE_AMMO_THIS_FRAME: "0x11879CDD803D30F4",
  SET_EXPLOSIVE_MELEE_THIS_FRAME: "0xFF1BED81BFDC0FE0",
  SET_SUPER_JUMP_THIS_FRAME: "0x57FFF03E423A4C0B",
  _RESET_LOCALPLAYER_STATE: "0xC0AA53F866B3134D",
  _FORCE_SOCIAL_CLUB_UPDATE: "0xEB6891F03362FB12",
  PLAY_PED_RINGTONE: "0xF9E56683CA8E11A5",
  IS_PED_RINGTONE_PLAYING: "0x1E8E5E20937E3137",
  STOP_PED_RINGTONE: "0x6C5AE23EFA885092",
  IS_MOBILE_PHONE_CALL_ONGOING: "0x7497D2CE2C30D24C",
  CREATE_NEW_SCRIPTED_CONVERSATION: "0xD2C91A0B572AAE56",
  ADD_LINE_TO_CONVERSATION: "0xC5EF963405593646",
  ADD_PED_TO_CONVERSATION: "0x95D9F4BC443956E7",
  SET_MICROPHONE_POSITION: "0xB6AE90EDDE95C762",
  START_SCRIPT_PHONE_CONVERSATION: "0x252E5F915EABB675",
  PRELOAD_SCRIPT_PHONE_CONVERSATION: "0x6004BCB0E226AAEA",
  START_SCRIPT_CONVERSATION: "0x6B17C62C9635D2DC",
  PRELOAD_SCRIPT_CONVERSATION: "0x3B3CAD6166916D87",
  START_PRELOADED_CONVERSATION: "0x23641AFE870AF385",
  IS_SCRIPTED_CONVERSATION_ONGOING: "0x16754C556D2EDE3D",
  IS_SCRIPTED_CONVERSATION_LOADED: "0xDF0D54BE7A776737",
  GET_CURRENT_SCRIPTED_CONVERSATION_LINE: "0x480357EE890C295A",
  PAUSE_SCRIPTED_CONVERSATION: "0x8530AD776CD72B12",
  RESTART_SCRIPTED_CONVERSATION: "0x9AEB285D1818C9AC",
  STOP_SCRIPTED_CONVERSATION: "0xD79DEEFB53455EBA",
  SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE: "0x9663FE6B7A61EB00",
  INTERRUPT_CONVERSATION: "0xA018A12E5C5C2FA6",
  REGISTER_SCRIPT_WITH_AUDIO: "0xC6ED9D5092438D91",
  UNREGISTER_SCRIPT_WITH_AUDIO: "0xA8638BE228D4751A",
  REQUEST_MISSION_AUDIO_BANK: "0x7345BDD95E62E0F2",
  REQUEST_AMBIENT_AUDIO_BANK: "0xFE02FFBED8CA9D99",
  REQUEST_SCRIPT_AUDIO_BANK: "0x2F844A8B08D76685",
  HINT_AMBIENT_AUDIO_BANK: "0x8F8C0E370AE62F5C",
  HINT_SCRIPT_AUDIO_BANK: "0xFB380A29641EC31A",
  RELEASE_MISSION_AUDIO_BANK: "0x0EC92A1BF0857187",
  RELEASE_AMBIENT_AUDIO_BANK: "0x65475A218FFAA93D",
  RELEASE_NAMED_SCRIPT_AUDIO_BANK: "0x77ED170667F50170",
  RELEASE_SCRIPT_AUDIO_BANK: "0x7A2D8AD0A9EB9C3F",
  GET_SOUND_ID: "0x430386FE9BF80B45",
  RELEASE_SOUND_ID: "0x353FC880830B88FA",
  PLAY_SOUND: "0x7FF4944CC209192D",
  PLAY_SOUND_FRONTEND: "0x67C540AA08E4A6F5",
  PLAY_SOUND_FROM_ENTITY: "0xE65F427EB70AB1ED",
  PLAY_SOUND_FROM_COORD: "0x8D8686B622B88120",
  STOP_SOUND: "0xA3B0C41BA5CC0BB5",
  GET_NETWORK_ID_FROM_SOUND_ID: "0x2DE3F0A134FFBC0D",
  GET_SOUND_ID_FROM_NETWORK_ID: "0x75262FD12D0A1C84",
  SET_VARIABLE_ON_SOUND: "0xAD6B3148A78AE9B6",
  SET_VARIABLE_ON_STREAM: "0x2F9D3834AEB9EF79",
  OVERRIDE_UNDERWATER_STREAM: "0xF2A9CDABCEA04BD6",
  HAS_SOUND_FINISHED: "0xFCBDCE714A7C88E5",
  "_PLAY_AMBIENT_SPEECH1": "0x8E04FEDD28D42462",
  "_PLAY_AMBIENT_SPEECH2": "0xC6941B4A3A8FBBB9",
  _PLAY_AMBIENT_SPEECH_WITH_VOICE: "0x3523634255FC3318",
  OVERRIDE_TREVOR_RAGE: "0x13AD665062541A7E",
  RESET_TREVOR_RAGE: "0xE78503B10C4314E0",
  SET_PLAYER_ANGRY: "0xEA241BB04110F091",
  PLAY_PAIN: "0xBC9AE166038A5CEC",
  SET_AMBIENT_VOICE_NAME: "0x6C8065A3B780185B",
  STOP_CURRENT_PLAYING_AMBIENT_SPEECH: "0xB8BEC0CA6F0EDB0F",
  IS_AMBIENT_SPEECH_PLAYING: "0x9072C8B49907BFAD",
  IS_SCRIPTED_SPEECH_PLAYING: "0xCC9AA18DCC7084F4",
  IS_ANY_SPEECH_PLAYING: "0x729072355FA39EC9",
  IS_PED_IN_CURRENT_CONVERSATION: "0x049E937F18F4020C",
  SET_PED_IS_DRUNK: "0x95D2D383D5396B8A",
  SET_ANIMAL_MOOD: "0xCC97B29285B1DC3B",
  IS_MOBILE_PHONE_RADIO_ACTIVE: "0xB35CE999E8EF317E",
  SET_MOBILE_PHONE_RADIO_STATE: "0xBF286C554784F3DF",
  GET_PLAYER_RADIO_STATION_INDEX: "0xE8AF77C4C06ADC93",
  GET_PLAYER_RADIO_STATION_NAME: "0xF6D733C32076AD03",
  GET_RADIO_STATION_NAME: "0xB28ECA15046CA8B9",
  GET_PLAYER_RADIO_STATION_GENRE: "0xA571991A7FE6CCEB",
  IS_RADIO_RETUNING: "0xA151A7394A214E65",
  SET_RADIO_TO_STATION_NAME: "0xC69EDA28699D5107",
  SET_VEH_RADIO_STATION: "0x1B9C0099CB942AC6",
  SET_EMITTER_RADIO_STATION: "0xACF57305B12AF907",
  SET_STATIC_EMITTER_ENABLED: "0x399D2D3B33F1B8EB",
  SET_RADIO_TO_STATION_INDEX: "0xA619B168B8A8570F",
  SET_FRONTEND_RADIO_ACTIVE: "0xF7F26C6E9CC9EBB8",
  UNLOCK_MISSION_NEWS_STORY: "0xB165AB7C248B2DC1",
  GET_NUMBER_OF_PASSENGER_VOICE_VARIATIONS: "0x66E49BF55B4B1874",
  GET_AUDIBLE_MUSIC_TRACK_TEXT_ID: "0x50B196FC9ED6545B",
  PLAY_END_CREDITS_MUSIC: "0xCD536C4D33DCC900",
  SKIP_RADIO_FORWARD: "0x6DDBBDD98E2E9C25",
  FREEZE_RADIO_STATION: "0x344F393B027E38C3",
  UNFREEZE_RADIO_STATION: "0xFC00454CF60B91DD",
  SET_RADIO_AUTO_UNFREEZE: "0xC1AA9F53CE982990",
  SET_INITIAL_PLAYER_STATION: "0x88795F13FACDA88D",
  SET_USER_RADIO_CONTROL_ENABLED: "0x19F21E63AE6EAE4E",
  SET_RADIO_TRACK: "0xB39786F201FEE30B",
  SET_VEHICLE_RADIO_LOUD: "0xBB6F1CAEC68B0BCE",
  _IS_VEHICLE_RADIO_LOUD: "0x032A116663A4D5AC",
  SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY: "0x1098355A16064BB3",
  SET_VEHICLE_RADIO_ENABLED: "0x3B988190C0AA6C0B",
  _MAX_RADIO_STATION_INDEX: "0xF1620ECB50E01DE7",
  FIND_RADIO_STATION_INDEX: "0x8D67489793FF428B",
  SET_AMBIENT_ZONE_STATE: "0xBDA07E5950085E46",
  CLEAR_AMBIENT_ZONE_STATE: "0x218DD44AAAC964FF",
  SET_AMBIENT_ZONE_LIST_STATE: "0x9748FA4DE50CCE3E",
  CLEAR_AMBIENT_ZONE_LIST_STATE: "0x120C48C614909FA4",
  SET_AMBIENT_ZONE_STATE_PERSISTENT: "0x1D6650420CEC9D3B",
  SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT: "0xF3638DAE8C4045E1",
  IS_AMBIENT_ZONE_ENABLED: "0x01E2817A479A7F9B",
  SET_CUTSCENE_AUDIO_OVERRIDE: "0x3B4BF5F0859204D9",
  GET_PLAYER_HEADSET_SOUND_ALTERNATE: "0xBCC29F935ED07688",
  PLAY_POLICE_REPORT: "0xDFEBD56D9BD1EB16",
  _DISABLE_POLICE_REPORTS: "0xB4F90FAF7670B16F",
  BLIP_SIREN: "0x1B9025BDA76822B6",
  OVERRIDE_VEH_HORN: "0x3CDC1E622CCE0356",
  IS_HORN_ACTIVE: "0x9D6BFC12B05C6121",
  SET_AGGRESSIVE_HORNS: "0x395BF71085D1B1D9",
  IS_STREAM_PLAYING: "0xD11FA52EB849D978",
  GET_STREAM_PLAY_TIME: "0x4E72BBDBCA58A3DB",
  LOAD_STREAM: "0x1F1F957154EC51DF",
  LOAD_STREAM_WITH_START_OFFSET: "0x59C16B79F53B3712",
  PLAY_STREAM_FROM_PED: "0x89049DD63C08B5D1",
  PLAY_STREAM_FROM_VEHICLE: "0xB70374A758007DFA",
  PLAY_STREAM_FROM_OBJECT: "0xEBAA9B64D76356FD",
  PLAY_STREAM_FRONTEND: "0x58FCE43488F9F5F4",
  SPECIAL_FRONTEND_EQUAL: "0x21442F412E8DE56B",
  STOP_STREAM: "0xA4718A1419D18151",
  STOP_PED_SPEAKING: "0x9D64D7405520E3D3",
  DISABLE_PED_PAIN_AUDIO: "0xA9A41C1E940FB0E8",
  IS_AMBIENT_SPEECH_DISABLED: "0x932C2D096A2C3FFF",
  SET_SIREN_WITH_NO_DRIVER: "0x1FEF0683B96EBCF2",
  SET_HORN_ENABLED: "0x76D683C108594D0E",
  SET_AUDIO_VEHICLE_PRIORITY: "0xE5564483E407F914",
  USE_SIREN_AS_HORN: "0xFA932DE350266EF8",
  SET_VEHICLE_BOOST_ACTIVE: "0x4A04DE7CAB2739A1",
  PLAY_VEHICLE_DOOR_OPEN_SOUND: "0x3A539D52857EA82D",
  PLAY_VEHICLE_DOOR_CLOSE_SOUND: "0x62A456AA4769EF34",
  IS_GAME_IN_CONTROL_OF_MUSIC: "0x6D28DC1671E334FD",
  SET_GPS_ACTIVE: "0x3BD3F52BA9B1E4E8",
  PLAY_MISSION_COMPLETE_AUDIO: "0xB138AAB8A70D3C69",
  IS_MISSION_COMPLETE_PLAYING: "0x19A30C23F5827F8A",
  START_AUDIO_SCENE: "0x013A80FC08F6E4F2",
  STOP_AUDIO_SCENE: "0xDFE8422B3B94E688",
  STOP_AUDIO_SCENES: "0xBAC7FC81A75EC1A1",
  IS_AUDIO_SCENE_ACTIVE: "0xB65B60556E2A9225",
  SET_AUDIO_SCENE_VARIABLE: "0xEF21A9EF089A2668",
  AUDIO_IS_SCRIPTED_MUSIC_PLAYING: "0x845FFC3A4FEEFA3E",
  PREPARE_MUSIC_EVENT: "0x1E5185B72EF5158A",
  CANCEL_MUSIC_EVENT: "0x5B17A90291133DA5",
  TRIGGER_MUSIC_EVENT: "0x706D57B0F50DA710",
  GET_MUSIC_PLAYTIME: "0xE7A0D23DC414507B",
  CLEAR_ALL_BROKEN_GLASS: "0xB32209EFFDC04913",
  PREPARE_ALARM: "0x9D74AE343DB65533",
  START_ALARM: "0x0355EF116C4C97B2",
  STOP_ALARM: "0xA1CADDCD98415A41",
  STOP_ALL_ALARMS: "0x2F794A877ADD4C92",
  IS_ALARM_PLAYING: "0x226435CB96CCFC8C",
  GET_VEHICLE_DEFAULT_HORN: "0x02165D55000219AC",
  RESET_PED_AUDIO_FLAGS: "0xF54BB7B61036F335",
  SET_AUDIO_FLAG: "0xB9EFD5C25018725A",
  PREPARE_SYNCHRONIZED_AUDIO_EVENT: "0xC7ABCACA4985A766",
  PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE: "0x029FE7CD1B7E2E75",
  PLAY_SYNCHRONIZED_AUDIO_EVENT: "0x8B2FD4560E55DD2D",
  STOP_SYNCHRONIZED_AUDIO_EVENT: "0x92D6A88E64A94430",
  _SET_SYNCHRONIZED_AUDIO_EVENT_POSITION_THIS_FRAME: "0x950A154B8DAB6185",
  REQUEST_CUTSCENE: "0x7A86743F475D9E09",
  "_REQUEST_CUTSCENE_2": "0xC23DE0E91C30B58C",
  REMOVE_CUTSCENE: "0x440AF51A3462B86F",
  HAS_CUTSCENE_LOADED: "0xC59F528E9AB9F339",
  HAS_THIS_CUTSCENE_LOADED: "0x228D3D94F8A11C3C",
  START_CUTSCENE: "0x186D5CB5E7B0FF7B",
  START_CUTSCENE_AT_COORDS: "0x1C9ADDA3244A1FBF",
  STOP_CUTSCENE: "0xC7272775B4DC786E",
  STOP_CUTSCENE_IMMEDIATELY: "0xD220BDD222AC4A1E",
  SET_CUTSCENE_ORIGIN: "0xB812B3FD1C01CF27",
  GET_CUTSCENE_TIME: "0xE625BEABBAFFDAB9",
  GET_CUTSCENE_TOTAL_DURATION: "0xEE53B14A19E480D4",
  WAS_CUTSCENE_SKIPPED: "0x40C8656EDAEDD569",
  HAS_CUTSCENE_FINISHED: "0x7C0A893088881D57",
  IS_CUTSCENE_ACTIVE: "0x991251AFC3981F84",
  IS_CUTSCENE_PLAYING: "0xD3C2E180A40F031E",
  GET_CUTSCENE_SECTION_PLAYING: "0x49010A6A396553D8",
  GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY: "0x0A2E9FDB9A8C62F6",
  REGISTER_ENTITY_FOR_CUTSCENE: "0xE40C1C56DF95C2E8",
  GET_ENTITY_INDEX_OF_REGISTERED_ENTITY: "0xC0741A26499654CD",
  SET_CUTSCENE_TRIGGER_AREA: "0x9896CE4721BE84BA",
  CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY: "0x645D0B458D8E17B5",
  CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY: "0x4C6A6451C79E4662",
  CAN_SET_EXIT_STATE_FOR_CAMERA: "0xB2CBCD0930DFB420",
  SET_CUTSCENE_FADE_VALUES: "0x8093F23ABACCC7D4",
  REGISTER_SYNCHRONISED_SCRIPT_SPEECH: "0x2131046957F31B04",
  SET_CUTSCENE_PED_COMPONENT_VARIATION: "0xBA01E7B6DEEFBBC9",
  DOES_CUTSCENE_ENTITY_EXIST: "0x499EF20C5DB25C59",
  SET_CUTSCENE_PED_PROP_VARIATION: "0x0546524ADE2E9723",
  GET_INTERIOR_GROUP_ID: "0xE4A84ABF135EF91A",
  GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS: "0x9E3B3E6D66F6E22F",
  IS_INTERIOR_SCENE: "0xBC72B5D7A1CBD54D",
  IS_VALID_INTERIOR: "0x26B0E73D7EAAF4D3",
  CLEAR_ROOM_FOR_ENTITY: "0xB365FC0C4E27FFA7",
  FORCE_ROOM_FOR_ENTITY: "0x52923C4710DD9907",
  GET_ROOM_KEY_FROM_ENTITY: "0x47C2A06D4F5F424B",
  GET_KEY_FOR_ENTITY_IN_ROOM: "0x399685DB942336BC",
  GET_INTERIOR_FROM_ENTITY: "0x2107BA504071A6BB",
  _GET_ROOM_KEY_FROM_GAMEPLAY_CAM: "0xA6575914D2A0B450",
  GET_INTERIOR_AT_COORDS: "0xB0F7F8663821D9C3",
  ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME: "0x3F6167F351168730",
  UNPIN_INTERIOR: "0x261CCE7EED010641",
  IS_INTERIOR_READY: "0x6726BDCCC1932F0E",
  GET_INTERIOR_AT_COORDS_WITH_TYPE: "0x05B7A89BD78797FC",
  _UNK_GET_INTERIOR_AT_COORDS: "0xF0F77ADB9F67E79D",
  _ARE_COORDS_COLLIDING_WITH_EXTERIOR: "0xEEA5AC2EDA7C33E8",
  GET_INTERIOR_FROM_COLLISION: "0xEC4CF9FCB29A4424",
  _ENABLE_INTERIOR_PROP: "0x55E86AF2712B36A1",
  _DISABLE_INTERIOR_PROP: "0x420BD37289EEE162",
  _IS_INTERIOR_PROP_ENABLED: "0x35F7DD45E8C0A16D",
  REFRESH_INTERIOR: "0x41F37C3427C75AE0",
  _HIDE_MAP_OBJECT_THIS_FRAME: "0xA97F257D0151A6AB",
  DISABLE_INTERIOR: "0x6170941419D7D8EC",
  IS_INTERIOR_DISABLED: "0xBC5115A5A939DD15",
  CAP_INTERIOR: "0xD9175F941610DB54",
  IS_INTERIOR_CAPPED: "0x92BAC8ACF88CEC26",
  RENDER_SCRIPT_CAMS: "0x07E5B515DB0636FC",
  CREATE_CAM: "0xC3981DCE61D9E13F",
  CREATE_CAM_WITH_PARAMS: "0xB51194800B257161",
  CREATE_CAMERA: "0x5E3CF89C6BCCA67D",
  CREATE_CAMERA_WITH_PARAMS: "0x6ABFA3E16460F22D",
  DESTROY_CAM: "0x865908C81A2C22E9",
  DESTROY_ALL_CAMS: "0x8E5FB15663F79120",
  DOES_CAM_EXIST: "0xA7A932170592B50E",
  SET_CAM_ACTIVE: "0x026FB97D0A425F84",
  IS_CAM_ACTIVE: "0xDFB2B516207D3534",
  IS_CAM_RENDERING: "0x02EC0AF5C5A49B7A",
  GET_RENDERING_CAM: "0x5234F9F10919EABA",
  GET_CAM_COORD: "0xBAC038F7459AE5AE",
  GET_CAM_ROT: "0x7D304C1C955E3E12",
  GET_CAM_FOV: "0xC3330A45CCCDB26A",
  GET_CAM_NEAR_CLIP: "0xC520A34DAFBF24B1",
  GET_CAM_FAR_CLIP: "0xB60A9CFEB21CA6AA",
  GET_CAM_FAR_DOF: "0x255F8DAFD540D397",
  SET_CAM_PARAMS: "0xBFD8727AEA3CCEBA",
  SET_CAM_COORD: "0x4D41783FB745E42E",
  SET_CAM_ROT: "0x85973643155D0B07",
  SET_CAM_FOV: "0xB13C14F66A00D047",
  SET_CAM_NEAR_CLIP: "0xC7848EFCCC545182",
  SET_CAM_FAR_CLIP: "0xAE306F2A904BF86E",
  SET_CAM_MOTION_BLUR_STRENGTH: "0x6F0F77FBA9A8F2E6",
  SET_CAM_NEAR_DOF: "0x3FA4BF0A7AB7DE2C",
  SET_CAM_FAR_DOF: "0xEDD91296CD01AEE0",
  SET_CAM_DOF_STRENGTH: "0x5EE29B4D7D5DF897",
  SET_CAM_DOF_PLANES: "0x3CF48F6F96E749DC",
  SET_CAM_USE_SHALLOW_DOF_MODE: "0x16A96863A17552BB",
  SET_USE_HI_DOF: "0xA13B0222F3D94A94",
  ATTACH_CAM_TO_ENTITY: "0xFEDB7D269E8C60E3",
  ATTACH_CAM_TO_PED_BONE: "0x61A3DBA14AB7F411",
  DETACH_CAM: "0xA2FABBE87F4BAD82",
  SET_CAM_INHERIT_ROLL_VEHICLE: "0x45F1DE9C34B93AE6",
  POINT_CAM_AT_COORD: "0xF75497BB865F0803",
  POINT_CAM_AT_ENTITY: "0x5640BFF86B16E8DC",
  POINT_CAM_AT_PED_BONE: "0x68B2B5F33BA63C41",
  STOP_CAM_POINTING: "0xF33AB75780BA57DE",
  SET_CAM_AFFECTS_AIMING: "0x8C1DC7770C51DC8D",
  SET_CAM_DEBUG_NAME: "0x1B93E0107865DD40",
  ADD_CAM_SPLINE_NODE: "0x8609C75EC438FB3B",
  SET_CAM_SPLINE_PHASE: "0x242B5874F0A4E052",
  GET_CAM_SPLINE_PHASE: "0xB5349E36C546509A",
  GET_CAM_SPLINE_NODE_PHASE: "0xD9D0E694C8282C96",
  SET_CAM_SPLINE_DURATION: "0x1381539FEE034CDA",
  GET_CAM_SPLINE_NODE_INDEX: "0xB22B17DF858716A6",
  OVERRIDE_CAM_SPLINE_VELOCITY: "0x40B62FA033EB0346",
  OVERRIDE_CAM_SPLINE_MOTION_BLUR: "0x7DCF7C708D292D55",
  IS_CAM_SPLINE_PAUSED: "0x0290F35C0AD97864",
  SET_CAM_ACTIVE_WITH_INTERP: "0x9FBDA379383A52A4",
  IS_CAM_INTERPOLATING: "0x036F97C908C2B52C",
  SHAKE_CAM: "0x6A25241C340D3822",
  ANIMATED_SHAKE_CAM: "0xA2746EEAE3E577CD",
  IS_CAM_SHAKING: "0x6B24BFE83A2BE47B",
  SET_CAM_SHAKE_AMPLITUDE: "0xD93DB43B82BC0D00",
  STOP_CAM_SHAKING: "0xBDECF64367884AC3",
  PLAY_CAM_ANIM: "0x9A2D0FB2E7852392",
  IS_CAM_PLAYING_ANIM: "0xC90621D8A0CEECF2",
  SET_CAM_ANIM_CURRENT_PHASE: "0x4145A4C44FF3B5A6",
  GET_CAM_ANIM_CURRENT_PHASE: "0xA10B2DB49E92A6B0",
  PLAY_SYNCHRONIZED_CAM_ANIM: "0xE32EFE9AB4A9AA0C",
  IS_SCREEN_FADED_OUT: "0xB16FCE9DDC7BA182",
  IS_SCREEN_FADED_IN: "0x5A859503B0C08678",
  IS_SCREEN_FADING_OUT: "0x797AC7CB535BA28F",
  IS_SCREEN_FADING_IN: "0x5C544BC6C57AC575",
  DO_SCREEN_FADE_IN: "0xD4E8E24955024033",
  DO_SCREEN_FADE_OUT: "0x891B5B39AC6302AF",
  SET_WIDESCREEN_BORDERS: "0xDCD4EA924F42D01A",
  GET_GAMEPLAY_CAM_COORD: "0x14D6F5678D8F1B37",
  GET_GAMEPLAY_CAM_ROT: "0x837765A25378F0BB",
  GET_GAMEPLAY_CAM_FOV: "0x65019750A0324133",
  GET_GAMEPLAY_CAM_RELATIVE_HEADING: "0x743607648ADD4587",
  SET_GAMEPLAY_CAM_RELATIVE_HEADING: "0xB4EC2312F4E5B1F1",
  GET_GAMEPLAY_CAM_RELATIVE_PITCH: "0x3A6867B4845BEDA2",
  SET_GAMEPLAY_CAM_RELATIVE_PITCH: "0x6D0858B8EDFD2B7D",
  _SET_GAMEPLAY_CAM_RAW_YAW: "0x103991D4A307D472",
  _SET_GAMEPLAY_CAM_RAW_PITCH: "0x759E13EBC1C15C5A",
  SHAKE_GAMEPLAY_CAM: "0xFD55E49555E017CF",
  IS_GAMEPLAY_CAM_SHAKING: "0x016C090630DF1F89",
  SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE: "0xA87E00932DB4D85D",
  STOP_GAMEPLAY_CAM_SHAKING: "0x0EF93E9F3D08C178",
  IS_GAMEPLAY_CAM_RENDERING: "0x39B5D1B10383F0C8",
  _ENABLE_CROSSHAIR_THIS_FRAME: "0xEA7F0AD7E9BA676F",
  IS_GAMEPLAY_CAM_LOOKING_BEHIND: "0x70FDA869F3317EA9",
  IS_SPHERE_VISIBLE: "0xE33D59DA70B58FDF",
  IS_FOLLOW_PED_CAM_ACTIVE: "0xC6D3D26810C8E0F9",
  SET_FOLLOW_PED_CAM_CUTSCENE_CHAT: "0x44A113DD6FFC48D1",
  _CLAMP_GAMEPLAY_CAM_YAW: "0x8F993D26E0CA5E8E",
  _CLAMP_GAMEPLAY_CAM_PITCH: "0xA516C198B7DCA1E1",
  _ANIMATE_GAMEPLAY_CAM_ZOOM: "0xDF2E1F7742402E81",
  _DISABLE_FIRST_PERSON_CAM_THIS_FRAME: "0xDE2EF5DA284CC8DF",
  GET_FOLLOW_PED_CAM_ZOOM_LEVEL: "0x33E6C8EFD0CD93E9",
  GET_FOLLOW_PED_CAM_VIEW_MODE: "0x8D4D46230B2C353A",
  SET_FOLLOW_PED_CAM_VIEW_MODE: "0x5A4F9EDF1673F704",
  IS_FOLLOW_VEHICLE_CAM_ACTIVE: "0xCBBDE6D335D6D496",
  SET_TIME_IDLE_DROP: "0x9DFE13ECDC1EC196",
  GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL: "0xEE82280AB767B690",
  SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL: "0x19464CB6E4078C8A",
  GET_FOLLOW_VEHICLE_CAM_VIEW_MODE: "0xA4FF579AC0E3AAAE",
  SET_FOLLOW_VEHICLE_CAM_VIEW_MODE: "0xAC253D7842768F48",
  IS_AIM_CAM_ACTIVE: "0x68EDDA28A5976D07",
  IS_FIRST_PERSON_AIM_CAM_ACTIVE: "0x5E346D934122613F",
  _GET_GAMEPLAY_CAM_ZOOM: "0x7EC52CC40597D170",
  _GET_GAMEPLAY_CAM_COORDS: "0xA200EB1EE790F448",
  _GET_GAMEPLAY_CAM_ROT: "0x5B4E4C817FCC2DFB",
  SET_GAMEPLAY_COORD_HINT: "0xD51ADCD2D8BC0FB3",
  SET_GAMEPLAY_PED_HINT: "0x2B486269ACD548D3",
  SET_GAMEPLAY_VEHICLE_HINT: "0xA2297E18F3E71C2E",
  SET_GAMEPLAY_OBJECT_HINT: "0x83E87508A2CA2AC6",
  SET_GAMEPLAY_ENTITY_HINT: "0x189E955A8313E298",
  IS_GAMEPLAY_HINT_ACTIVE: "0xE520FF1AD2785B40",
  STOP_GAMEPLAY_HINT: "0xF46C581C61718916",
  SET_GAMEPLAY_HINT_FOV: "0x513403FB9C56211F",
  GET_IS_MULTIPLAYER_BRIEF: "0xE3433EADAAF7EE40",
  SET_CINEMATIC_BUTTON_ACTIVE: "0x51669F7D1FB53D9F",
  IS_CINEMATIC_CAM_RENDERING: "0xB15162CB5826E9E8",
  SHAKE_CINEMATIC_CAM: "0xDCE214D9ED58F3CF",
  IS_CINEMATIC_CAM_SHAKING: "0xBBC08F6B4CB8FF0A",
  SET_CINEMATIC_CAM_SHAKE_AMPLITUDE: "0xC724C701C30B2FE7",
  STOP_CINEMATIC_CAM_SHAKING: "0x2238E588E588A6D7",
  _DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME: "0xADFF1B2A555F5FBA",
  CREATE_CINEMATIC_SHOT: "0x741B0129D4560F31",
  IS_CINEMATIC_SHOT_ACTIVE: "0xCC9F3371A7C28BC9",
  STOP_CINEMATIC_SHOT: "0x7660C6E75D3A078E",
  SET_CINEMATIC_MODE_ACTIVE: "0xDCF0754AC3D6FD4E",
  STOP_CUTSCENE_CAM_SHAKING: "0xDB629FFD9285FA06",
  _SET_CAM_EFFECT: "0x80C8B1846639BB19",
  ENABLE_LASER_SIGHT_RENDERING: "0xC8B46D7727D864AA",
  GET_WEAPON_COMPONENT_TYPE_MODEL: "0x0DB57B41EC1DB083",
  GET_WEAPONTYPE_MODEL: "0xF46CDC33180FDA94",
  GET_WEAPONTYPE_SLOT: "0x4215460B9B8B7FA0",
  GET_WEAPONTYPE_GROUP: "0xC3287EE3050FB74C",
  SET_CURRENT_PED_WEAPON: "0xADF692B254977C0C",
  GET_CURRENT_PED_WEAPON: "0x3A87E44BB9A01D54",
  GET_CURRENT_PED_WEAPON_ENTITY_INDEX: "0x3B390A939AF0B5FC",
  GET_BEST_PED_WEAPON: "0x8483E98E8B888AE2",
  SET_CURRENT_PED_VEHICLE_WEAPON: "0x75C55983C2C39DAA",
  GET_CURRENT_PED_VEHICLE_WEAPON: "0x1017582BCD3832DC",
  IS_PED_ARMED: "0x475768A975D5AD17",
  IS_WEAPON_VALID: "0x937C71165CF334B3",
  HAS_PED_GOT_WEAPON: "0x8DECB02F88F428BC",
  IS_PED_WEAPON_READY_TO_SHOOT: "0xB80CA294F2F26749",
  GET_PED_WEAPONTYPE_IN_SLOT: "0xEFFED78E9011134D",
  GET_AMMO_IN_PED_WEAPON: "0x015A522136D7F951",
  ADD_AMMO_TO_PED: "0x78F0424C34306220",
  SET_PED_AMMO: "0x14E56BC5B5DB6A19",
  SET_PED_INFINITE_AMMO: "0x3EDCB0505123623B",
  SET_PED_INFINITE_AMMO_CLIP: "0x183DADC6AA953186",
  GIVE_WEAPON_TO_PED: "0xBF0FD6E56C964FCB",
  GIVE_DELAYED_WEAPON_TO_PED: "0xB282DC6EBD803C75",
  REMOVE_ALL_PED_WEAPONS: "0xF25DF915FA38C5F3",
  REMOVE_WEAPON_FROM_PED: "0x4899CB088EDF59B8",
  HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE: "0x6F6981D2253C208F",
  SET_PED_CURRENT_WEAPON_VISIBLE: "0x0725A4CCFDED9A70",
  SET_PED_DROPS_WEAPONS_WHEN_DEAD: "0x476AE72C1D19D1A8",
  HAS_PED_BEEN_DAMAGED_BY_WEAPON: "0x2D343D2219CD027A",
  CLEAR_PED_LAST_WEAPON_DAMAGE: "0x0E98F88A24C5F4B8",
  HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON: "0x131D401334815E94",
  CLEAR_ENTITY_LAST_WEAPON_DAMAGE: "0xAC678E40BE7C74D2",
  SET_PED_DROPS_WEAPON: "0x6B7513D9966FBEC0",
  SET_PED_DROPS_INVENTORY_WEAPON: "0x208A1888007FC0E6",
  GET_MAX_AMMO_IN_CLIP: "0xA38DCFFCEA8962FA",
  GET_AMMO_IN_CLIP: "0x2E1202248937775C",
  SET_AMMO_IN_CLIP: "0xDCD2A934D65CB497",
  GET_MAX_AMMO: "0xDC16122C7A20C933",
  SET_PED_AMMO_BY_TYPE: "0x5FD1E1F011E76D7E",
  GET_PED_AMMO_BY_TYPE: "0x39D22031557946C1",
  SET_PED_AMMO_TO_DROP: "0xA4EFEF9440A5B0EF",
  _GET_PED_AMMO_TYPE: "0x7FEAD38B326B9F74",
  GET_PED_LAST_WEAPON_IMPACT_COORD: "0x6C4D0409BA1A2BC2",
  SET_PED_GADGET: "0xD0D7B1E680ED4A1A",
  GET_IS_PED_GADGET_EQUIPPED: "0xF731332072F5156C",
  GET_SELECTED_PED_WEAPON: "0x0A6DB4965674D243",
  EXPLODE_PROJECTILES: "0xFC4BD125DE7611E4",
  REMOVE_ALL_PROJECTILES_OF_TYPE: "0xFC52E0F37E446528",
  _GET_LOCKON_RANGE_OF_CURRENT_PED_WEAPON: "0x840F03E9041E2C9C",
  GET_MAX_RANGE_OF_CURRENT_PED_WEAPON: "0x814C9D19DFD69679",
  HAS_VEHICLE_GOT_PROJECTILE_ATTACHED: "0x717C8481234E3B88",
  GIVE_WEAPON_COMPONENT_TO_PED: "0xD966D51AA5B28BB9",
  REMOVE_WEAPON_COMPONENT_FROM_PED: "0x1E8BE90C74FB4C09",
  HAS_PED_GOT_WEAPON_COMPONENT: "0xC593212475FAE340",
  IS_PED_WEAPON_COMPONENT_ACTIVE: "0x0D78DE0572D3969E",
  _IS_PED_RELOADING: "0x8C0D57EA686FAD87",
  MAKE_PED_RELOAD: "0x20AE33F3AC9C0033",
  REQUEST_WEAPON_ASSET: "0x5443438F033E29C3",
  HAS_WEAPON_ASSET_LOADED: "0x36E353271F0E90EE",
  REMOVE_WEAPON_ASSET: "0xAA08EF13F341C8FC",
  CREATE_WEAPON_OBJECT: "0x9541D3CF0D398F36",
  GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT: "0x33E179436C0B31DB",
  REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT: "0xF7D82B0D66777611",
  HAS_WEAPON_GOT_WEAPON_COMPONENT: "0x76A18844E743BF91",
  GIVE_WEAPON_OBJECT_TO_PED: "0xB1FA61371AF7C4B7",
  DOES_WEAPON_TAKE_WEAPON_COMPONENT: "0x5CEE3DF569CECAB0",
  GET_WEAPON_OBJECT_FROM_PED: "0xCAE1DC9A0E22A16D",
  SET_PED_WEAPON_TINT_INDEX: "0x50969B9B89ED5738",
  GET_PED_WEAPON_TINT_INDEX: "0x2B9EEDC07BD06B9F",
  SET_WEAPON_OBJECT_TINT_INDEX: "0xF827589017D4E4A9",
  GET_WEAPON_OBJECT_TINT_INDEX: "0xCD183314F7CD2E57",
  GET_WEAPON_TINT_COUNT: "0x5DCF6C5CAB2E9BF7",
  GET_WEAPON_HUD_STATS: "0xD92C739EE34C9EBA",
  GET_WEAPON_COMPONENT_HUD_STATS: "0xB3CAF387AE12E9F8",
  GET_WEAPON_CLIP_SIZE: "0x583BE370B1EC6EB4",
  SET_PED_CHANCE_OF_FIRING_BLANKS: "0x8378627201D5497D",
  REQUEST_WEAPON_HIGH_DETAIL_MODEL: "0x48164DBB970AC3F0",
  IS_PED_CURRENT_WEAPON_SILENCED: "0x65F0C5AE05943EC7",
  SET_WEAPON_SMOKEGRENADE_ASSIGNED: "0x4B7620C47217126C",
  SET_FLASH_LIGHT_FADE_DISTANCE: "0xCEA66DAD478CD39B",
  SET_WEAPON_ANIMATION_OVERRIDE: "0x1055AC3A667F09D9",
  GET_WEAPON_DAMAGE_TYPE: "0x3BE0BB12D25FB305",
  CAN_USE_WEAPON_ON_PARACHUTE: "0xBC7BE5ABC0879F74",
  CREATE_ITEMSET: "0x35AD299F50D91B24",
  DESTROY_ITEMSET: "0xDE18220B1C183EDA",
  IS_ITEMSET_VALID: "0xB1B1EA596344DFAB",
  ADD_TO_ITEMSET: "0xE3945201F14637DD",
  REMOVE_FROM_ITEMSET: "0x25E68244B0177686",
  GET_ITEMSET_SIZE: "0xD9127E83ABF7C631",
  GET_INDEXED_ITEM_IN_ITEMSET: "0x7A197E2521EE2BAB",
  IS_IN_ITEMSET: "0x2D0FC594D1E9C107",
  CLEAN_ITEMSET: "0x41BC0D722FC04221",
  LOAD_ALL_OBJECTS_NOW: "0xBD6E84632DD4CB3F",
  LOAD_SCENE: "0x4448EB75B4904BDB",
  NETWORK_UPDATE_LOAD_SCENE: "0xC4582015556D1C46",
  NETWORK_STOP_LOAD_SCENE: "0x64E630FAF5F60F44",
  IS_NETWORK_LOADING_SCENE: "0x41CA5A33160EA4AB",
  SET_INTERIOR_ACTIVE: "0xE37B76C387BE28ED",
  REQUEST_MODEL: "0x963D27A58DF860AC",
  "_REQUEST_MODEL_2": "0xA0261AEF7ACFC51E",
  HAS_MODEL_LOADED: "0x98A4EB5D89A0C952",
  SET_MODEL_AS_NO_LONGER_NEEDED: "0xE532F5D78798DAAB",
  IS_MODEL_IN_CDIMAGE: "0x35B9E0803292B641",
  IS_MODEL_VALID: "0xC0296A2EDF545E92",
  IS_MODEL_A_VEHICLE: "0x19AAC8F07BFEC53E",
  REQUEST_COLLISION_AT_COORD: "0x07503F7948F491A7",
  REQUEST_COLLISION_FOR_MODEL: "0x923CB32A3B874FCB",
  HAS_COLLISION_FOR_MODEL_LOADED: "0x22CCA434E368F03A",
  REQUEST_ADDITIONAL_COLLISION_AT_COORD: "0xC9156DC11411A9EA",
  DOES_ANIM_DICT_EXIST: "0x2DA49C3B79856961",
  REQUEST_ANIM_DICT: "0xD3BD40951412FEF6",
  HAS_ANIM_DICT_LOADED: "0xD031A9162D01088C",
  REMOVE_ANIM_DICT: "0xF66A602F829E2A06",
  REQUEST_ANIM_SET: "0x6EA47DAE7FAD0EED",
  HAS_ANIM_SET_LOADED: "0xC4EA073D86FB29B0",
  REMOVE_ANIM_SET: "0x16350528F93024B3",
  REQUEST_CLIP_SET: "0xD2A71E1A77418A49",
  HAS_CLIP_SET_LOADED: "0x318234F4F3738AF3",
  REMOVE_CLIP_SET: "0x01F73A131C18CD94",
  REQUEST_IPL: "0x41B4893843BBDB74",
  REMOVE_IPL: "0xEE6C5AD3ECE0A82D",
  IS_IPL_ACTIVE: "0x88A741E44A2B3495",
  SET_STREAMING: "0x6E0C692677008888",
  SET_GAME_PAUSES_FOR_STREAMING: "0x717CD6E6FAEBBEDC",
  SET_REDUCE_PED_MODEL_BUDGET: "0x77B5F9A36BF96710",
  SET_REDUCE_VEHICLE_MODEL_BUDGET: "0x80C527893080CCF3",
  SET_DITCH_POLICE_MODELS: "0x42CBE54462D92634",
  GET_NUMBER_OF_STREAMING_REQUESTS: "0x4060057271CEBC89",
  REQUEST_PTFX_ASSET: "0x944955FB2A3935C8",
  HAS_PTFX_ASSET_LOADED: "0xCA7D9B86ECA7481B",
  REMOVE_PTFX_ASSET: "0x88C6814073DD4A73",
  REQUEST_NAMED_PTFX_ASSET: "0xB80D8756B4668AB6",
  HAS_NAMED_PTFX_ASSET_LOADED: "0x8702416E512EC454",
  _REMOVE_NAMED_PTFX_ASSET: "0x5F61EBBE1A00F96D",
  SET_VEHICLE_POPULATION_BUDGET: "0xCB9E1EB3BE2AF4E9",
  SET_PED_POPULATION_BUDGET: "0x8C95333CFC3340F3",
  CLEAR_FOCUS: "0x31B73D1EA9F01DA2",
  _SET_FOCUS_AREA: "0xBB7454BAFF08FE25",
  SET_FOCUS_ENTITY: "0x198F77705FA0931D",
  IS_ENTITY_FOCUS: "0x2DDFF3FB9075D747",
  NEW_LOAD_SCENE_START: "0x212A8D0D2BABFAC2",
  _NEW_LOAD_SCENE_START_SAFE: "0xACCFB4ACF53551B0",
  NEW_LOAD_SCENE_STOP: "0xC197616D221FF4A4",
  IS_NEW_LOAD_SCENE_ACTIVE: "0xA41A05B6CB741B85",
  IS_NEW_LOAD_SCENE_LOADED: "0x01B8247A7A8B9AD1",
  START_PLAYER_SWITCH: "0xFAA23F2CBA159D67",
  STOP_PLAYER_SWITCH: "0x95C0A5BBDC189AA1",
  IS_PLAYER_SWITCH_IN_PROGRESS: "0xD9D2CFFF49FAB35F",
  GET_PLAYER_SWITCH_TYPE: "0xB3C94A90D9FC9E62",
  GET_IDEAL_PLAYER_SWITCH_TYPE: "0xB5D7B26B45720E05",
  GET_PLAYER_SWITCH_STATE: "0x470555300D10B2A5",
  GET_PLAYER_SHORT_SWITCH_STATE: "0x20F898A5D9782800",
  _SWITCH_OUT_PLAYER: "0xAAB3200ED59016BC",
  SET_PLAYER_INVERTED_UP: "0x08C2D6C52A3104BB",
  DESTROY_PLAYER_IN_PAUSE_MENU: "0x5B74EA8CFD5E3E7E",
  PREFETCH_SRL: "0x3D245789CE12982C",
  IS_SRL_LOADED: "0xD0263801A4C5B0BB",
  BEGIN_SRL: "0x9BADDC94EF83B823",
  END_SRL: "0x0A41540E63C9EE17",
  SET_SRL_TIME: "0xA74A541C6884E7B8",
  SET_HD_AREA: "0xB85F26619073E775",
  CLEAR_HD_AREA: "0xCE58B1CFB9290813",
  SHUTDOWN_CREATOR_BUDGET: "0xCCE26000E9A6FAD7",
  REQUEST_SCRIPT: "0x6EB5F71AA68F2E8E",
  SET_SCRIPT_AS_NO_LONGER_NEEDED: "0xC90D2DCACD56184C",
  HAS_SCRIPT_LOADED: "0xE6CC9F3BA0FB9EF1",
  DOES_SCRIPT_EXIST: "0xFC04745FBE67C19A",
  _REQUEST_STREAMED_SCRIPT: "0xD62A67D26D9653E6",
  _SET_STREAMED_SCRIPT_AS_NO_LONGER_NEEDED: "0xC5BC038960E9DB27",
  _HAS_STREAMED_SCRIPT_LOADED: "0x5F0F0C783EB16C04",
  _IS_STREAMED_SCRIPT_RUNNING: "0xF86AA3C56BA31381",
  TERMINATE_THREAD: "0xC8B189ED9138BCD4",
  IS_THREAD_ACTIVE: "0x46E9AE36D8FA6417",
  _GET_THREAD_NAME: "0x05A42BA9FC8DA96B",
  _BEGIN_ENUMERATING_SCRIPTS: "0xDADFADA5A20143A8",
  _GET_ID_OF_NEXT_SCRIPT_IN_ENUMERATION: "0x30B4FA1C82DD4B9F",
  GET_ID_OF_THIS_THREAD: "0xC30338E8088E2E21",
  TERMINATE_THIS_THREAD: "0x1090044AD1DA76FA",
  _GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT: "0x2C83A9DA6BFFC4F9",
  GET_THIS_SCRIPT_NAME: "0x442E0A7EDE4A738A",
  _GET_THIS_SCRIPT_HASH: "0x8A1C8B1738FFE87E",
  GET_NUMBER_OF_EVENTS: "0x5F92A689A06620AA",
  GET_EVENT_EXISTS: "0x936E6168A9BCEDB5",
  GET_EVENT_AT_INDEX: "0xD8F66A3A60C62153",
  GET_EVENT_DATA: "0x2902843FCD2B2D79",
  TRIGGER_SCRIPT_EVENT: "0x5AE99C571D5BBE5D",
  SHUTDOWN_LOADING_SCREEN: "0x078EBE9809CCD637",
  SET_NO_LOADING_SCREEN: "0x5262CC1995D07E09",
  _GET_NO_LOADING_SCREEN: "0x18C1270EA7F199BC",
  _SHOW_CURSOR_THIS_FRAME: "0xAAE7CE1D63167423",
  _REMOVE_NOTIFICATION: "0xBE4390CB40B3E627",
  _GET_CURRENT_NOTIFICATION: "0x82352748437638CA",
  _SET_NOTIFICATION_FLASH_COLOR: "0x17430B918701C342",
  _SET_NOTIFICATION_TEXT_ENTRY: "0x202709F4C58A0424",
  _SET_NOTIFICATION_MESSAGE: "0x1CCD9A37359072CF",
  _SET_NOTIFICATION_MESSAGE_CLAN_TAG: "0x5CBF7BADE20DB93E",
  "_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2": "0x531B84E7DA981FB6",
  _DRAW_NOTIFICATION: "0x2ED7843F8F801023",
  "_DRAW_NOTIFICATION_2": "0x44FA03975424A0EE",
  "_DRAW_NOTIFICATION_3": "0x378E809BF61EC840",
  "_DRAW_NOTIFICATION_4": "0xF020C96915705B3A",
  "_SET_TEXT_ENTRY_2": "0xB87A37EEB7FAA67D",
  _DRAW_SUBTITLE_TIMED: "0x9D77056A530643F6",
  _SET_TEXT_ENTRY: "0x25FBB336DF1804CB",
  _DRAW_TEXT: "0xCD015E5BB0D96A57",
  _SET_TEXT_ENTRY_FOR_WIDTH: "0x54CE8AC98E120CAB",
  _GET_TEXT_SCREEN_WIDTH: "0x85F061DA64ED2F67",
  _SET_TEXT_GXT_ENTRY: "0x521FB041D93DD0E4",
  _SET_TEXT_COMPONENT_FORMAT: "0x8509B634FBE7DA11",
  _DISPLAY_HELP_TEXT_FROM_STRING_LABEL: "0x238FFE5C7B0498A6",
  BEGIN_TEXT_COMMAND_SET_BLIP_NAME: "0xF9113A30DE5C6670",
  END_TEXT_COMMAND_SET_BLIP_NAME: "0xBC38B49BCB83BC9B",
  ADD_TEXT_COMPONENT_INTEGER: "0x03B504CF259931BC",
  ADD_TEXT_COMPONENT_FLOAT: "0xE7DCB5B874BCD96E",
  _ADD_TEXT_COMPONENT_ITEM_STRING: "0xC63CD5D2920ACBE7",
  ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME: "0x80EAD8E2E1D5D52E",
  ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME: "0x6C188BE134E074AA",
  ADD_TEXT_COMPONENT_SUBSTRING_TIME: "0x1115F16B8AB9E8BF",
  _ADD_TEXT_COMPONENT_SUBSTRING_CASH: "0x0E4C749FF9DE9CC4",
  ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE: "0x94CF4AC034C9C986",
  _GET_TEXT_SUBSTRING: "0x169BD9382084C8C0",
  _GET_TEXT_SUBSTRING_SAFE: "0xB2798643312205C5",
  _GET_TEXT_SUBSTRING_SLICE: "0xCE94AEBA5D82908A",
  _GET_LABEL_TEXT: "0x7B5280EBA9840C72",
  CLEAR_PRINTS: "0xCC33FA791322B9D9",
  CLEAR_BRIEF: "0x9D292F73ADBD9313",
  CLEAR_ALL_HELP_MESSAGES: "0x6178F68A87A4D3A0",
  CLEAR_THIS_PRINT: "0xCF708001E1E536DD",
  CLEAR_SMALL_PRINTS: "0x2CEA2839313C09AC",
  DOES_TEXT_BLOCK_EXIST: "0x1C7302E725259789",
  REQUEST_ADDITIONAL_TEXT: "0x71A78003C8E71424",
  "_REQUEST_ADDITIONAL_TEXT_2": "0x6009F9F1AE90D8A6",
  HAS_ADDITIONAL_TEXT_LOADED: "0x02245FE4BED318B8",
  CLEAR_ADDITIONAL_TEXT: "0x2A179DF17CCF04CD",
  IS_STREAMING_ADDITIONAL_TEXT: "0x8B6817B71B85EBF0",
  HAS_THIS_ADDITIONAL_TEXT_LOADED: "0xADBF060E2B30C5BC",
  IS_MESSAGE_BEING_DISPLAYED: "0x7984C03AA5CC2F41",
  DOES_TEXT_LABEL_EXIST: "0xAC09CA973C564252",
  GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL: "0x801BD273D3A23F74",
  GET_LENGTH_OF_LITERAL_STRING: "0xF030907CCBB8A9FD",
  GET_STREET_NAME_FROM_HASH_KEY: "0xD0EF8A959B8A4CB9",
  IS_HUD_PREFERENCE_SWITCHED_ON: "0x1930DFA731813EC4",
  IS_RADAR_PREFERENCE_SWITCHED_ON: "0x9EB6522EA68F22FE",
  IS_SUBTITLE_PREFERENCE_SWITCHED_ON: "0xAD6DACA4BA53E0A4",
  DISPLAY_HUD: "0xA6294919E56FF02A",
  DISPLAY_RADAR: "0xA0EBB943C300E693",
  IS_HUD_HIDDEN: "0xA86478C6958735C5",
  IS_RADAR_HIDDEN: "0x157F93B036700462",
  _IS_RADAR_ENABLED: "0xAF754F20EB5CD51A",
  SET_BLIP_ROUTE: "0x4F7D8A9BFB0B43E9",
  SET_BLIP_ROUTE_COLOUR: "0x837155CD2F63DA09",
  ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS: "0x60296AF4BA14ABC5",
  RESPONDING_AS_TEMP: "0xBD12C5EEE184C337",
  SET_RADAR_ZOOM: "0x096EF57A0C999BBA",
  _SET_RADAR_ZOOM_LEVEL_THIS_FRAME: "0xCB7CC0D58405AD41",
  GET_HUD_COLOUR: "0x7C9C91AB74A0360F",
  FLASH_ABILITY_BAR: "0x02CFBA0C9E9275CE",
  SET_ABILITY_BAR_VALUE: "0x9969599CCFF5D85E",
  FLASH_WANTED_DISPLAY: "0xA18AFB39081B6A1F",
  _GET_TEXT_SCALE_HEIGHT: "0xDB88A37483346780",
  SET_TEXT_SCALE: "0x07C837F9A01C34C9",
  SET_TEXT_COLOUR: "0xBE6B23FFA53FB442",
  SET_TEXT_CENTRE: "0xC02F4DBFB51D988B",
  SET_TEXT_RIGHT_JUSTIFY: "0x6B3C4650BC8BEE47",
  SET_TEXT_JUSTIFICATION: "0x4E096588B13FFECA",
  SET_TEXT_WRAP: "0x63145D9C883A1A70",
  SET_TEXT_LEADING: "0xA50ABC31E3CDFAFF",
  SET_TEXT_PROPORTIONAL: "0x038C1F517D7FDCF8",
  SET_TEXT_FONT: "0x66E0276CC5F6B9DA",
  SET_TEXT_DROP_SHADOW: "0x1CA3E9EAC9D93E5E",
  SET_TEXT_DROPSHADOW: "0x465C84BC39F1C351",
  SET_TEXT_OUTLINE: "0x2513DFB0FB8400FE",
  SET_TEXT_EDGE: "0x441603240D202FA6",
  SET_TEXT_RENDER_ID: "0x5F15302936E07111",
  GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID: "0x52F0982D7FD156B6",
  REGISTER_NAMED_RENDERTARGET: "0x57D9C12635E25CE3",
  IS_NAMED_RENDERTARGET_REGISTERED: "0x78DCDC15C9F116B4",
  RELEASE_NAMED_RENDERTARGET: "0xE9F6FFE837354DD4",
  LINK_NAMED_RENDERTARGET: "0xF6C09E276AEB3F2D",
  GET_NAMED_RENDERTARGET_RENDER_ID: "0x1A6478B61C6BDC3B",
  IS_NAMED_RENDERTARGET_LINKED: "0x113750538FA31298",
  CLEAR_HELP: "0x8DFCED7A656F8802",
  IS_HELP_MESSAGE_ON_SCREEN: "0xDAD37F45428801AE",
  IS_HELP_MESSAGE_BEING_DISPLAYED: "0x4D79439A6B55AC67",
  IS_HELP_MESSAGE_FADING_OUT: "0x327EDEEEAC55C369",
  _GET_BLIP_INFO_ID_ITERATOR: "0x186E5D252FA50E7D",
  GET_NUMBER_OF_ACTIVE_BLIPS: "0x9A3FF3DE163034E8",
  GET_NEXT_BLIP_INFO_ID: "0x14F96AA50D6FBEA7",
  GET_FIRST_BLIP_INFO_ID: "0x1BEDE233E6CD2A1F",
  GET_BLIP_INFO_ID_COORD: "0xFA7C7F0AADF25D09",
  GET_BLIP_INFO_ID_DISPLAY: "0x1E314167F701DC3B",
  GET_BLIP_INFO_ID_TYPE: "0xBE9B0959FFD0779B",
  GET_BLIP_INFO_ID_ENTITY_INDEX: "0x4BA4E2553AFEDC2C",
  GET_BLIP_INFO_ID_PICKUP_INDEX: "0x9B6786E4C03DD382",
  GET_BLIP_FROM_ENTITY: "0xBC8DBDCA2436F7E8",
  ADD_BLIP_FOR_RADIUS: "0x46818D79B1F7499A",
  ADD_BLIP_FOR_ENTITY: "0x5CDE92C702A8FCE7",
  ADD_BLIP_FOR_PICKUP: "0xBE339365C863BD36",
  ADD_BLIP_FOR_COORD: "0x5A039BB0BCA604B6",
  SET_BLIP_COORDS: "0xAE2AF67E9D9AF65D",
  GET_BLIP_COORDS: "0x586AFE3FF72D996E",
  SET_BLIP_SPRITE: "0xDF735600A4696DAF",
  GET_BLIP_SPRITE: "0x1FC877464A04FC4F",
  SET_BLIP_NAME_FROM_TEXT_FILE: "0xEAA0FFE120D92784",
  SET_BLIP_NAME_TO_PLAYER_NAME: "0x127DE7B20C60A6A3",
  SET_BLIP_ALPHA: "0x45FF974EEE1C8734",
  GET_BLIP_ALPHA: "0x970F608F0EE6C885",
  SET_BLIP_FADE: "0x2AEE8F8390D2298C",
  SET_BLIP_ROTATION: "0xF87683CDF73C3F6E",
  SET_BLIP_FLASH_TIMER: "0xD3CD6FD297AE87CC",
  SET_BLIP_FLASH_INTERVAL: "0xAA51DB313C010A7E",
  SET_BLIP_COLOUR: "0x03D7FB09E75D6B7E",
  SET_BLIP_SECONDARY_COLOUR: "0x14892474891E09EB",
  GET_BLIP_COLOUR: "0xDF729E8D20CF7327",
  GET_BLIP_HUD_COLOUR: "0x729B5F1EFBC0AAEE",
  IS_BLIP_SHORT_RANGE: "0xDA5F8727EB75B926",
  IS_BLIP_ON_MINIMAP: "0xE41CA53051197A27",
  SET_BLIP_HIGH_DETAIL: "0xE2590BC29220CEBB",
  SET_BLIP_AS_MISSION_CREATOR_BLIP: "0x24AC0137444F9FD5",
  IS_MISSION_CREATOR_BLIP: "0x26F49BF3381D933D",
  DISABLE_BLIP_NAME_FOR_VAR: "0x5C90988E7C8E1AF4",
  SET_BLIP_FLASHES: "0xB14552383D39CE3E",
  SET_BLIP_FLASHES_ALTERNATE: "0x2E8D9498C56DD0D1",
  IS_BLIP_FLASHING: "0xA5E41FD83AD6CEF0",
  SET_BLIP_AS_SHORT_RANGE: "0xBE8BE4FE60E27B72",
  SET_BLIP_SCALE: "0xD38744167B2FA257",
  SET_BLIP_PRIORITY: "0xAE9FC9EF6A9FAC79",
  SET_BLIP_DISPLAY: "0x9029B2F3DA924928",
  SET_BLIP_CATEGORY: "0x234CDD44D996FD9A",
  REMOVE_BLIP: "0x86A652570E5F25DD",
  SET_BLIP_AS_FRIENDLY: "0x6F6F290102C02AB4",
  PULSE_BLIP: "0x742D6FD43115AF73",
  SHOW_NUMBER_ON_BLIP: "0xA3C0B359DCB848B6",
  HIDE_NUMBER_ON_BLIP: "0x532CFF637EF80148",
  _SET_BLIP_SHOW_HEADING_INDICATOR: "0x5FBCA48327B914DF",
  DOES_BLIP_EXIST: "0xA6DB27D19ECBB7DA",
  SET_WAYPOINT_OFF: "0xA7E4E2D361C2627F",
  REFRESH_WAYPOINT: "0x81FA173F170560D1",
  IS_WAYPOINT_ACTIVE: "0x1DD1F58F493F1DA5",
  SET_NEW_WAYPOINT: "0xFE43368D2AA4F2FC",
  SET_BLIP_BRIGHT: "0xB203913733F27884",
  SET_BLIP_SHOW_CONE: "0x13127EC3665E8EE1",
  SET_MINIMAP_COMPONENT: "0x75A9A10948D1DEA6",
  GET_MAIN_PLAYER_BLIP_ID: "0xDCD4EC3F419D02FA",
  HIDE_LOADING_ON_FADE_THIS_FRAME: "0x4B0311D3CDC4648F",
  SET_RADAR_AS_INTERIOR_THIS_FRAME: "0x59E727A1C9D3E31A",
  SET_RADAR_AS_EXTERIOR_THIS_FRAME: "0xE81B7D2A3DAB2D81",
  _SET_PLAYER_BLIP_POSITION_THIS_FRAME: "0x77E2DD177910E1CF",
  _DISABLE_RADAR_THIS_FRAME: "0x5FBAE526203990C9",
  _CENTER_PLAYER_ON_RADAR_THIS_FRAME: "0x6D14BFDC33B34F55",
  SET_WIDESCREEN_FORMAT: "0xC3B07BA00A83B0F1",
  DISPLAY_AREA_NAME: "0x276B6CE369C33678",
  DISPLAY_CASH: "0x96DEC8D5430208B7",
  _SET_PLAYER_CASH_CHANGE: "0x0772DF77852C2E30",
  DISPLAY_AMMO_THIS_FRAME: "0xA5E78BA2B1331C55",
  DISPLAY_SNIPER_SCOPE_THIS_FRAME: "0x73115226F4814E62",
  HIDE_HUD_AND_RADAR_THIS_FRAME: "0x719FF505F097FD20",
  SET_MULTIPLAYER_BANK_CASH: "0xDD21B55DF695CD0A",
  REMOVE_MULTIPLAYER_BANK_CASH: "0xC7C6789AA1CFEDD0",
  SET_MULTIPLAYER_HUD_CASH: "0xFD1D220394BCB824",
  REMOVE_MULTIPLAYER_HUD_CASH: "0x968F270E39141ECA",
  HIDE_HELP_TEXT_THIS_FRAME: "0xD46923FC481CA285",
  DISPLAY_HELP_TEXT_THIS_FRAME: "0x960C9FF8F616E41C",
  _SHOW_WEAPON_WHEEL: "0xEB354E5376BC81A7",
  SET_GPS_FLAGS: "0x5B440763A4C8D15B",
  CLEAR_GPS_FLAGS: "0x21986729D6A3A830",
  CLEAR_GPS_RACE_TRACK: "0x7AA5B4CE533C858B",
  CLEAR_GPS_PLAYER_WAYPOINT: "0xFF4FB7C8CDFA3DA7",
  SET_GPS_FLASHES: "0x320D0E0D936A0E9B",
  FLASH_MINIMAP_DISPLAY: "0xF2DD778C22B15BDA",
  TOGGLE_STEALTH_RADAR: "0x6AFDFB93754950C7",
  KEY_HUD_COLOUR: "0x1A5CD7752DD28CD3",
  SET_MISSION_NAME: "0x5F28ECF5FC84772F",
  SET_MINIMAP_BLOCK_WAYPOINT: "0x58FADDED207897DC",
  _SET_MAP_VISIBLE: "0x9133955F1A2DA957",
  LOCK_MINIMAP_ANGLE: "0x299FAEBB108AE05B",
  UNLOCK_MINIMAP_ANGLE: "0x8183455E16C42E3A",
  LOCK_MINIMAP_POSITION: "0x1279E861A329E73F",
  UNLOCK_MINIMAP_POSITION: "0x3E93E06DB8EF1F30",
  _SET_MINIMAP_ATTITUDE_INDICATOR_LEVEL: "0xD201F3FF917A506D",
  _SET_RADAR_BIGMAP_ENABLED: "0x231C8F89D0539D8F",
  IS_HUD_COMPONENT_ACTIVE: "0xBC4C9EA5391ECC0D",
  IS_SCRIPTED_HUD_COMPONENT_ACTIVE: "0xDD100EB17A94FF65",
  HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME: "0xE374C498D8BADC14",
  HIDE_HUD_COMPONENT_THIS_FRAME: "0x6806C51AD12B83B8",
  SHOW_HUD_COMPONENT_THIS_FRAME: "0x0B4DF1FA60C0E664",
  RESET_RETICULE_VALUES: "0x12782CE0A636E9F0",
  RESET_HUD_COMPONENT_VALUES: "0x450930E616475D0D",
  SET_HUD_COMPONENT_POSITION: "0xAABB1F56E2A17CED",
  GET_HUD_COMPONENT_POSITION: "0x223CA69A8C4417FD",
  CLEAR_FLOATING_HELP: "0x50085246ABD3FEFA",
  _CREATE_HEAD_DISPLAY: "0xBFEFE3321A3F5015",
  _HAS_HEAD_DISPLAY_LOADED: "0x4E929E7A5796FD26",
  ADD_TREVOR_RANDOM_MODIFIER: "0x595B5178E412E199",
  _SET_HEAD_DISPLAY_FLAG: "0x63BB75ABEDC1F6A0",
  _SET_HEAD_DISPLAY_WANTED: "0xCF228E2AA03099C3",
  _SET_HEAD_DISPLAY_STRING: "0xDEA2B8283BAA3944",
  GET_CURRENT_WEBSITE_ID: "0x97D47996FC48CBAD",
  SET_WARNING_MESSAGE: "0x7B1776B3B53F8D74",
  "_SET_WARNING_MESSAGE_2": "0xDC38CC1E35B6A5D7",
  "_SET_WARNING_MESSAGE_3": "0x701919482C74B5AB",
  IS_WARNING_MESSAGE_ACTIVE: "0xE18B138FABC53103",
  ACTIVATE_FRONTEND_MENU: "0xEF01D36B9C9D0C7B",
  RESTART_FRONTEND_MENU: "0x10706DC6AD2D49C0",
  SET_PAUSE_MENU_ACTIVE: "0xDF47FC56C71569CF",
  DISABLE_FRONTEND_THIS_FRAME: "0x6D3465A73092F0E6",
  SET_FRONTEND_ACTIVE: "0x745711A75AB09277",
  IS_PAUSE_MENU_ACTIVE: "0xB0034A223497FFCB",
  GET_PAUSE_MENU_STATE: "0x272ACD84970869C5",
  IS_PAUSE_MENU_RESTARTING: "0x1C491717107431C7",
  OBJECT_DECAL_TOGGLE: "0x444D8CF241EC25C5",
  ENABLE_DEATHBLOOD_SEETHROUGH: "0x4895BDEA16E7C080",
  SET_USERIDS_UIHIDDEN: "0xEF4CED81CEBEDC6D",
  CLEAR_PED_IN_PAUSE_MENU: "0x5E62BE5DC58E9E06",
  GIVE_PED_TO_PAUSE_MENU: "0xAC0BFBDC3BE00E14",
  _SHOW_SOCIAL_CLUB_LEGAL_SCREEN: "0x805D7CBB36FD6C4C",
  _IS_TEXT_CHAT_ACTIVE: "0xB118AF58B5F332A1",
  _ABORT_TEXT_CHAT: "0x1AC8F4AD40E22127",
  _SET_TEXT_CHAT_UNK: "0x1DB21A44B09E8BA3",
  DOES_PED_HAVE_AI_BLIP: "0x15B8ECF844EE67ED",
  HIDE_SPECIAL_ABILITY_LOCKON_OPERATION: "0x3EED80DFF7325CAA",
  SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE: "0x175B6BFC15CDD0C5",
  DRAW_DEBUG_LINE: "0x7FDFADE676AA3CB0",
  DRAW_DEBUG_LINE_WITH_TWO_COLOURS: "0xD8B9A8AC5608FF94",
  DRAW_DEBUG_SPHERE: "0xAAD68E1AB39DA632",
  DRAW_DEBUG_BOX: "0x083A2CA4F2E573BD",
  DRAW_DEBUG_CROSS: "0x73B1189623049839",
  DRAW_DEBUG_TEXT: "0x3903E216620488E8",
  "DRAW_DEBUG_TEXT_2D": "0xA3BB2E9555C05A8F",
  DRAW_LINE: "0x6B7256074AE34680",
  DRAW_POLY: "0xAC26716048436851",
  DRAW_BOX: "0xD3A9971CADAC7252",
  GET_MAXIMUM_NUMBER_OF_PHOTOS: "0x34D23450F028B0BF",
  _DRAW_LIGHT_WITH_RANGE_AND_SHADOW: "0xF49E9A9716A04595",
  DRAW_LIGHT_WITH_RANGE: "0xF2A1B2771A01DBD4",
  DRAW_SPOT_LIGHT: "0xD0F64B265C8C8B33",
  _DRAW_SPOT_LIGHT_WITH_SHADOW: "0x5BCA583A583194DB",
  DRAW_MARKER: "0x28477EC23D892089",
  CREATE_CHECKPOINT: "0x0134F0835AB6BFCB",
  SET_CHECKPOINT_CYLINDER_HEIGHT: "0x2707AAE9D9297D89",
  SET_CHECKPOINT_RGBA: "0x7167371E8AD747F7",
  _SET_CHECKPOINT_ICON_RGBA: "0xB9EA40907C680580",
  DELETE_CHECKPOINT: "0xF5ED37F54CD4D52E",
  REQUEST_STREAMED_TEXTURE_DICT: "0xDFA2EF8E04127DD5",
  HAS_STREAMED_TEXTURE_DICT_LOADED: "0x0145F696AAAAD2E4",
  SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED: "0xBE2CACCF5A8AA805",
  DRAW_RECT: "0x3A618A217E5154F0",
  "_SET_2D_LAYER": "0x61BB1D9B3A95D802",
  _SET_SCREEN_DRAW_POSITION: "0xB8A850F20A067EB6",
  GET_SAFE_ZONE_SIZE: "0xBAF107B6BB2C97F0",
  DRAW_SPRITE: "0xE7FFAE5EBF23D890",
  ADD_ENTITY_ICON: "0x9CD43EEE12BF4DD0",
  SET_ENTITY_ICON_VISIBILITY: "0xE0E8BEECCA96BA31",
  SET_ENTITY_ICON_COLOR: "0x1D5F595CCAE2E238",
  SET_DRAW_ORIGIN: "0xAA0008F3BBB8F416",
  CLEAR_DRAW_ORIGIN: "0xFF0B610F6BE0D7AF",
  ATTACH_TV_AUDIO_TO_ENTITY: "0x845BAD77CC770633",
  SET_TV_AUDIO_FRONTEND: "0x113D2C5DC57E1774",
  LOAD_MOVIE_MESH_SET: "0xB66064452270E8F1",
  RELEASE_MOVIE_MESH_SET: "0xEB119AA014E89183",
  GET_SCREEN_RESOLUTION: "0x888D57E407E63624",
  _GET_SCREEN_ACTIVE_RESOLUTION: "0x873C9F3104101DD3",
  _GET_SCREEN_ASPECT_RATIO: "0xF1307EF624A80D87",
  GET_IS_WIDESCREEN: "0x30CF4BDA4FCB1905",
  GET_IS_HIDEF: "0x84ED31191CC5D2C9",
  SET_NIGHTVISION: "0x18F621F7A5B1F85D",
  _IS_NIGHTVISION_INACTIVE: "0x2202A3F42C8E5F79",
  SET_NOISEOVERIDE: "0xE787BF1C5CF823C9",
  SET_NOISINESSOVERIDE: "0xCB6A7C3BB17A0C67",
  "_WORLD3D_TO_SCREEN2D": "0x34E82F05DF2974F5",
  GET_TEXTURE_RESOLUTION: "0x35736EE65BD00C11",
  SET_FLASH: "0x0AB84296FED9CFC6",
  _SET_BLACKOUT: "0x1268615ACE24D504",
  CREATE_TRACKED_POINT: "0xE2C9439ED45DEA60",
  SET_TRACKED_POINT_INFO: "0x164ECBB3CF750CB0",
  IS_TRACKED_POINT_VISIBLE: "0xC45CCDAAC9221CA8",
  DESTROY_TRACKED_POINT: "0xB25DC90BAD56CA42",
  _SET_FAR_SHADOWS_SUPPRESSED: "0x80ECBC0C856D3B0B",
  SET_SEETHROUGH: "0x7E08924259E08CE0",
  _IS_SEETHROUGH_ACTIVE: "0x44B80ABAB9D80BD3",
  _TRANSITION_TO_BLURRED: "0xA328A24AAA6B7FDC",
  _TRANSITION_FROM_BLURRED: "0xEFACC8AEF94430D5",
  IS_PARTICLE_FX_DELAYED_BLINK: "0x5CCABFFCA31DDE33",
  _SET_FROZEN_RENDERING_DISABLED: "0xDFC252D8A3E15AB7",
  START_PARTICLE_FX_NON_LOOPED_AT_COORD: "0x25129531F77B9ED3",
  "_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2": "0xF56B8137DF10135D",
  START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE: "0x0E7E72961BA18619",
  "_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2": "0xA41B6A43642AC2CF",
  START_PARTICLE_FX_NON_LOOPED_ON_ENTITY: "0x0D53A3B8DA0809D2",
  "_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2": "0xC95EB1DB6E92113D",
  SET_PARTICLE_FX_NON_LOOPED_COLOUR: "0x26143A59EF48B262",
  SET_PARTICLE_FX_NON_LOOPED_ALPHA: "0x77168D722C58B2FC",
  _SET_PARTICLE_FX_CAM_INSIDE_VEHICLE: "0x8CDE909A0370BB3A",
  START_PARTICLE_FX_LOOPED_AT_COORD: "0xE184F4F0DC5910E7",
  START_PARTICLE_FX_LOOPED_ON_PED_BONE: "0xF28DA9F38CD1787C",
  START_PARTICLE_FX_LOOPED_ON_ENTITY: "0x1AE42C1660FD6517",
  _START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE: "0xC6EB449E33977F0B",
  "_START_PARTICLE_FX_LOOPED_ON_ENTITY_2": "0x6F60E89A7B64EE1D",
  "_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE_2": "0xDDE23F30CC5A0F03",
  STOP_PARTICLE_FX_LOOPED: "0x8F75998877616996",
  REMOVE_PARTICLE_FX: "0xC401503DFE8D53CF",
  REMOVE_PARTICLE_FX_FROM_ENTITY: "0xB8FEAEEBCC127425",
  REMOVE_PARTICLE_FX_IN_RANGE: "0xDD19FA1C6D657305",
  DOES_PARTICLE_FX_LOOPED_EXIST: "0x74AFEF0D2E1E409B",
  SET_PARTICLE_FX_LOOPED_OFFSETS: "0xF7DDEBEC43483C43",
  SET_PARTICLE_FX_LOOPED_EVOLUTION: "0x5F0C4B5B1C393BE2",
  SET_PARTICLE_FX_LOOPED_COLOUR: "0x7F8F65877F88783B",
  SET_PARTICLE_FX_LOOPED_ALPHA: "0x726845132380142E",
  SET_PARTICLE_FX_LOOPED_SCALE: "0xB44250AAA456492D",
  _SET_PARTICLE_FX_LOOPED_RANGE: "0xDCB194B85EF7B541",
  SET_PARTICLE_FX_CAM_INSIDE_VEHICLE: "0xEEC4047028426510",
  SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE: "0xACEE6F360FC1F6B6",
  SET_PARTICLE_FX_SHOOTOUT_BOAT: "0x96EF97DAEB89BEF5",
  SET_PARTICLE_FX_BLOOD_SCALE: "0x5F6DF3D92271E8A1",
  ENABLE_CLOWN_BLOOD_VFX: "0xD821490579791273",
  ENABLE_ALIEN_BLOOD_VFX: "0x9DCE1F0F78260875",
  _SET_PTFX_ASSET_NEXT_CALL: "0x6C38AF3693A69A91",
  _SET_PTFX_ASSET_OLD_TO_NEW: "0xEA1E2D93F6F75ED9",
  WASH_DECALS_IN_RANGE: "0x9C30613D50A6ADEF",
  WASH_DECALS_FROM_VEHICLE: "0x5B712761429DBC14",
  FADE_DECALS_IN_RANGE: "0xD77EDADB0420E6E0",
  REMOVE_DECALS_IN_RANGE: "0x5D6B2D4830A67C62",
  REMOVE_DECALS_FROM_OBJECT: "0xCCF71CBDDF5B6CB9",
  REMOVE_DECALS_FROM_OBJECT_FACING: "0xA6F6F70FDC6D144C",
  REMOVE_DECALS_FROM_VEHICLE: "0xE91F1B65F2B48D57",
  ADD_DECAL: "0xB302244A1839BDAD",
  ADD_PETROL_DECAL: "0x4F5212C7AD880DF8",
  REMOVE_DECAL: "0xED3F346429CCD659",
  IS_DECAL_ALIVE: "0xC694D74949CAFD0C",
  GET_DECAL_WASH_LEVEL: "0x323F647679A09103",
  MOVE_VEHICLE_DECALS: "0x84C8D7C2D30D3280",
  _ADD_CLAN_DECAL_TO_VEHICLE: "0x428BDCB9DA58DA53",
  _DOES_VEHICLE_HAVE_DECAL: "0x060D935D3981A275",
  DISABLE_VEHICLE_DISTANTLIGHTS: "0xC9F98AC1884E73A2",
  _SET_FORCE_PED_FOOTSTEPS_TRACKS: "0xAEEDAD1420C65CC0",
  _SET_FORCE_VEHICLE_TRAILS: "0x4CC7F0FEA5283FE0",
  SET_TIMECYCLE_MODIFIER: "0x2C933ABF17A1DF41",
  SET_TIMECYCLE_MODIFIER_STRENGTH: "0x82E7FFCD5B2326B3",
  SET_TRANSITION_TIMECYCLE_MODIFIER: "0x3BCF567485E1971C",
  CLEAR_TIMECYCLE_MODIFIER: "0x0F07E7745A236711",
  GET_TIMECYCLE_MODIFIER_INDEX: "0xFDF3D97C674AFB66",
  PUSH_TIMECYCLE_MODIFIER: "0x58F735290861E6B4",
  POP_TIMECYCLE_MODIFIER: "0x3C8938D7D872211E",
  REQUEST_SCALEFORM_MOVIE: "0x11FE353CF9733E6F",
  REQUEST_SCALEFORM_MOVIE_INSTANCE: "0xC514489CFB8AF806",
  "_REQUEST_SCALEFORM_MOVIE3": "0xBD06C611BB9048C2",
  HAS_SCALEFORM_MOVIE_LOADED: "0x85F01B8D5B90570E",
  _HAS_NAMED_SCALEFORM_MOVIE_LOADED: "0x0C1C5D756FB5F337",
  HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT: "0x8217150E1217EBFD",
  SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED: "0x1D132D614DD86811",
  SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME: "0x6D8EB211944DCE08",
  DRAW_SCALEFORM_MOVIE: "0x54972ADAF0294A93",
  DRAW_SCALEFORM_MOVIE_FULLSCREEN: "0x0DF606929C105BE1",
  DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED: "0xCF537FDE4FBD4CE5",
  "DRAW_SCALEFORM_MOVIE_3D": "0x87D51D72255D4E78",
  "_DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE": "0x1CE592FDC749D6F5",
  CALL_SCALEFORM_MOVIE_METHOD: "0xFBD96D87AC96D533",
  _CALL_SCALEFORM_MOVIE_FUNCTION_FLOAT_PARAMS: "0xD0837058AE2E4BEE",
  _CALL_SCALEFORM_MOVIE_FUNCTION_STRING_PARAMS: "0x51BC1ED3CC44E8F7",
  _CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS: "0xEF662D8D57E290B1",
  _PUSH_SCALEFORM_MOVIE_FUNCTION_FROM_HUD_COMPONENT: "0x98C494FD5BDFBFD5",
  _PUSH_SCALEFORM_MOVIE_FUNCTION: "0xF6E48914C7A8694E",
  _POP_SCALEFORM_MOVIE_FUNCTION_VOID: "0xC6796A8FFA375E53",
  _POP_SCALEFORM_MOVIE_FUNCTION: "0xC50AA39A577AF886",
  SITTING_TV: "0xE1E258829A885245",
  _PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT: "0xC3D0841A0CC546A6",
  _PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT: "0xD69736AAE04DB51A",
  _PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL: "0xC58424BA936EB458",
  _BEGIN_TEXT_COMPONENT: "0x80338406F3475E55",
  _END_TEXT_COMPONENT: "0x362E2D3FE93A9959",
  _PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING: "0xBA7148484BD90365",
  _REQUEST_HUD_SCALEFORM: "0x9304881D6F6537EA",
  _HAS_HUD_SCALEFORM_LOADED: "0xDF6E5987D2B4D140",
  SET_TV_CHANNEL: "0xBAABBB23EB6E484E",
  GET_TV_CHANNEL: "0xFC1E275A90D39995",
  SET_TV_VOLUME: "0x2982BF73F66E9DDC",
  GET_TV_VOLUME: "0x2170813D3DD8661B",
  DRAW_TV_CHANNEL: "0xFDDC2B4ED3C69DF0",
  ENABLE_MOVIE_SUBTITLES: "0x873FA65C778AD970",
  _START_SCREEN_EFFECT: "0x2206BF9A37B7F724",
  _STOP_SCREEN_EFFECT: "0x068E835A1D0DC0E3",
  _GET_SCREEN_EFFECT_IS_ACTIVE: "0x36AD3E690DA5ACEB",
  _STOP_ALL_SCREEN_EFFECTS: "0xB4EDDC19532BFB85",
  STAT_CLEAR_SLOT_FOR_RELOAD: "0xEB0A72181D4AA4AD",
  STAT_LOAD: "0xA651443F437B1CE6",
  STAT_SAVE: "0xE07BCA305B82D2FD",
  STAT_LOAD_PENDING: "0xA1750FFAFA181661",
  STAT_SAVE_PENDING: "0x7D3A583856F2C5AC",
  STAT_SAVE_PENDING_OR_REQUESTED: "0xBBB6AD006F1BBEA3",
  STAT_DELETE_SLOT: "0x49A49BED12794D70",
  STAT_SLOT_IS_LOADED: "0x0D0A9F0E7BD91E3C",
  STAT_SET_INT: "0xB3271D7AB655B441",
  STAT_SET_FLOAT: "0x4851997F37FE9B3C",
  STAT_SET_BOOL: "0x4B33C4243DE0C432",
  STAT_SET_GXT_LABEL: "0x17695002FD8B2AE0",
  STAT_SET_DATE: "0x2C29BFB64F4FCBE4",
  STAT_SET_STRING: "0xA87B2335D12531D7",
  STAT_SET_POS: "0xDB283FDE680FE72E",
  STAT_SET_MASKED_INT: "0x7BBB1B54583ED410",
  STAT_SET_USER_ID: "0x8CDDF1E452BABE11",
  STAT_SET_CURRENT_POSIX_TIME: "0xC2F84B7F9C4D0C61",
  STAT_GET_INT: "0x767FBC2AC802EF3D",
  STAT_GET_FLOAT: "0xD7AE6C9C9C6AC54C",
  STAT_GET_BOOL: "0x11B5E6D2AE73F48E",
  STAT_GET_DATE: "0x8B0FACEFC36C824B",
  STAT_GET_STRING: "0xE50384ACC2C3DB74",
  STAT_GET_POS: "0x350F82CCB186AA1B",
  STAT_GET_MASKED_INT: "0x655185A06D9EEAAB",
  STAT_GET_USER_ID: "0x2365C388E393BBE2",
  STAT_GET_LICENSE_PLATE: "0x5473D4195058B2E4",
  STAT_SET_LICENSE_PLATE: "0x69FF13266D7296DA",
  STAT_INCREMENT: "0x9B5A68C6489E9909",
  _STAT_SET_PROFILE_SETTING: "0x68F01422BE1D838F",
  STAT_GET_BOOL_MASKED: "0x10FE3F1B79F9B071",
  STAT_SET_BOOL_MASKED: "0x5BC62EC1937B9E5B",
  PLAYSTATS_NPC_INVITE: "0x93054C88E6AA7C44",
  PLAYSTATS_AWARD_XP: "0x46F917F6B4128FE4",
  PLAYSTATS_RANK_UP: "0xC7F2DE41D102BFB4",
  PLAYSTATS_MISSION_STARTED: "0xC19A2925C34D2231",
  PLAYSTATS_MISSION_OVER: "0x7C4BB33A8CED7324",
  PLAYSTATS_MISSION_CHECKPOINT: "0xC900596A63978C1D",
  PLAYSTATS_RACE_CHECKPOINT: "0x9C375C315099DDE4",
  PLAYSTATS_MATCH_STARTED: "0xBC80E22DED931E3D",
  PLAYSTATS_SHOP_ITEM: "0x176852ACAAC173D1",
  PLAYSTATS_WEBSITE_VISITED: "0xDDF24D535060F811",
  PLAYSTATS_FRIEND_ACTIVITY: "0x0F71DE29AB2258F1",
  PLAYSTATS_ODDJOB_DONE: "0x69DEA3E9DB727B4C",
  PLAYSTATS_PROP_CHANGE: "0xBA739D6D5A05D6E7",
  PLAYSTATS_CLOTH_CHANGE: "0x34B973047A2268B9",
  PLAYSTATS_CHEAT_APPLIED: "0x6058665D72302D3F",
  LEADERBOARDS_GET_NUMBER_OF_COLUMNS: "0x117B45156D7EFF2E",
  LEADERBOARDS_GET_COLUMN_ID: "0xC4B5467A1886EA7E",
  LEADERBOARDS_GET_COLUMN_TYPE: "0xBF4FEF46DB7894D3",
  LEADERBOARDS_READ_CLEAR_ALL: "0xA34CB6E6F0DF4A0B",
  LEADERBOARDS_READ_CLEAR: "0x7CCE5C737A665701",
  LEADERBOARDS_READ_PENDING: "0xAC392C8483342AC2",
  LEADERBOARDS_READ_SUCCESSFUL: "0x2FB19228983E832C",
  "LEADERBOARDS2_READ_FRIENDS_BY_ROW": "0x918B101666F9CB83",
  "LEADERBOARDS2_READ_BY_HANDLE": "0xC30713A383BFBF0E",
  "LEADERBOARDS2_READ_BY_ROW": "0xA9CDB1E3F0A49883",
  "LEADERBOARDS2_READ_BY_RANK": "0xBA2C7DB0C129449A",
  "LEADERBOARDS2_READ_BY_RADIUS": "0x5CE587FB5A42C8C4",
  "LEADERBOARDS2_READ_BY_SCORE_INT": "0x7EEC7E4F6984A16A",
  "LEADERBOARDS2_READ_BY_SCORE_FLOAT": "0xE662C8B759D08F3C",
  "LEADERBOARDS2_WRITE_DATA": "0xAE2206545888AE49",
  LEADERBOARDS_CACHE_DATA_ROW: "0xB9BB18E2C40142ED",
  LEADERBOARDS_CLEAR_CACHE_DATA: "0xD4B02A6B476E1FDC",
  LEADERBOARDS_GET_CACHE_EXISTS: "0x9C51349BE6CDFE2C",
  LEADERBOARDS_GET_CACHE_TIME: "0xF04C1C27DA35F6C8",
  LEADERBOARDS_GET_CACHE_DATA_ROW: "0x9120E8DBA3D69273",
  ADD_SCRIPT_TO_RANDOM_PED: "0x4EE5367468A65CCC",
  REGISTER_OBJECT_SCRIPT_BRAIN: "0x0BE84C318BA6EC22",
  IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE: "0xCCBA154209823057",
  REGISTER_WORLD_POINT_SCRIPT_BRAIN: "0x3CDC7136613284BD",
  IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE: "0xC5042CC6F5E3D450",
  ENABLE_SCRIPT_BRAIN_SET: "0x67AA4D73F0CFA86B",
  DISABLE_SCRIPT_BRAIN_SET: "0x14D8518E9760F08F",
  CREATE_MOBILE_PHONE: "0xA4E8E696C532FBC7",
  DESTROY_MOBILE_PHONE: "0x3BC861DF703E5097",
  SET_MOBILE_PHONE_SCALE: "0xCBDD322A73D6D932",
  SET_MOBILE_PHONE_ROTATION: "0xBB779C0CA917E865",
  GET_MOBILE_PHONE_ROTATION: "0x1CEFB61F193070AE",
  SET_MOBILE_PHONE_POSITION: "0x693A5C6D6734085B",
  GET_MOBILE_PHONE_POSITION: "0x584FDFDA48805B86",
  SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN: "0xF511F759238A5122",
  CAN_PHONE_BE_SEEN_ON_SCREEN: "0xC4E2813898C97A4B",
  _MOVE_FINGER: "0x95C9E72F3D7DEC9B",
  _SET_PHONE_LEAN: "0x44E44169EF70138E",
  CELL_CAM_ACTIVATE: "0xFDE8F069C542D126",
  CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK: "0x439E9BC95B7E7FBE",
  GET_MOBILE_PHONE_RENDER_ID: "0xB4A53E05F68B6FA1",
  APP_DATA_VALID: "0x846AA8E7D55EE5B6",
  APP_GET_INT: "0xD3A58A12C77D9D4B",
  APP_GET_FLOAT: "0x1514FB24C02C2322",
  APP_GET_STRING: "0x749B023950D2311C",
  APP_SET_INT: "0x607E8E3D3E4F9611",
  APP_SET_FLOAT: "0x25D7687C68E0DAA4",
  APP_SET_STRING: "0x3FF2FCEC4B7721B4",
  APP_SET_APP: "0xCFD0406ADAF90D2B",
  APP_SET_BLOCK: "0x262AB456A3D21F93",
  APP_CLEAR_BLOCK: "0x5FE1DF3342DB7DBA",
  APP_CLOSE_APP: "0xE41C65E07A5F05FC",
  APP_CLOSE_BLOCK: "0xE8E3FCF72EAC0EF8",
  APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT: "0x71EEE69745088DA0",
  APP_HAS_SYNCED_DATA: "0xCA52279A7271517F",
  APP_SAVE_DATA: "0x95C5D356CDA6E85F",
  APP_GET_DELETED_FILE_STATUS: "0xC9853A2BE3DED1A6",
  APP_DELETE_APP_DATA: "0x44151AEA95C8A003",
  SET_CLOCK_TIME: "0x47C3B5848C3E45D8",
  PAUSE_CLOCK: "0x4055E40BD2DBEC1D",
  ADVANCE_CLOCK_TIME_TO: "0xC8CA9670B9D83B3B",
  ADD_TO_CLOCK_TIME: "0xD716F30D8C8980E2",
  GET_CLOCK_HOURS: "0x25223CA6B4D20B7F",
  GET_CLOCK_MINUTES: "0x13D2B8ADD79640F2",
  GET_CLOCK_SECONDS: "0x494E97C2EF27C470",
  SET_CLOCK_DATE: "0xB096419DF0D06CE7",
  GET_CLOCK_DAY_OF_WEEK: "0xD972E4BD7AEB235F",
  GET_CLOCK_DAY_OF_MONTH: "0x3D10BC92A4DB1D35",
  GET_CLOCK_MONTH: "0xBBC72712E80257A1",
  GET_CLOCK_YEAR: "0x961777E64BDAF717",
  GET_MILLISECONDS_PER_GAME_MINUTE: "0x2F8B4D1C595B11DB",
  GET_POSIX_TIME: "0xDA488F299A5B164E",
  _GET_LOCAL_TIME_GMT: "0x8117E09A19EEF4D3",
  GET_LOCAL_TIME: "0x50C7A99057A69748",
  SET_ROADS_IN_AREA: "0xBF1A602B5BA52FEE",
  SET_ROADS_IN_ANGLED_AREA: "0x1A5AA1208AF5DB59",
  SET_PED_PATHS_IN_AREA: "0x34F060F4BF92E018",
  GET_SAFE_COORD_FOR_PED: "0xB61C8E878A4199CA",
  GET_CLOSEST_VEHICLE_NODE: "0x240A18690AE96513",
  GET_CLOSEST_MAJOR_VEHICLE_NODE: "0x2EABE3B06F58C1BE",
  GET_CLOSEST_VEHICLE_NODE_WITH_HEADING: "0xFF071FB798B803B0",
  GET_NTH_CLOSEST_VEHICLE_NODE: "0xE50E52416CCF948B",
  GET_NTH_CLOSEST_VEHICLE_NODE_ID: "0x22D7275A79FE8215",
  GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING: "0x80CA6A8B6C094CC4",
  GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING: "0x6448050E9C2A7207",
  GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION: "0x45905BE8654AE067",
  GET_VEHICLE_NODE_PROPERTIES: "0x0568566ACBB5DEDC",
  IS_VEHICLE_NODE_ID_VALID: "0x1EAF30FCFBF5AF74",
  GET_VEHICLE_NODE_POSITION: "0x703123E5E7D429C2",
  _GET_SUPPORTS_GPS_ROUTE_FLAG: "0xA2AE5C478B96E3B6",
  _GET_IS_SLOW_ROAD_FLAG: "0x4F5070AA58F69279",
  GET_CLOSEST_ROAD: "0x132F52BBA570FE92",
  LOAD_ALL_PATH_NODES: "0x80E4A6EDDB0BE8D9",
  SET_ROADS_BACK_TO_ORIGINAL: "0x1EE7063B80FFC77C",
  SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA: "0x0027501B9F3B407E",
  SET_PED_PATHS_BACK_TO_ORIGINAL: "0xE04B48F2CC926253",
  GET_RANDOM_VEHICLE_NODE: "0x93E0DB8440B73A7D",
  GET_STREET_NAME_AT_COORD: "0x2EB41072B4C1E4C0",
  GENERATE_DIRECTIONS_TO_COORD: "0xF90125F1F79ECDF8",
  SET_IGNORE_NO_GPS_FLAG: "0x72751156E7678833",
  SET_GPS_DISABLED_ZONE: "0xDC20483CD3DD5201",
  IS_POINT_ON_ROAD: "0x125BF4ABFC536B09",
  ADD_NAVMESH_REQUIRED_REGION: "0x387EAD7EE42F6685",
  REMOVE_NAVMESH_REQUIRED_REGIONS: "0x916F0A3CDEC3445E",
  DISABLE_NAVMESH_IN_AREA: "0x4C8872D8CDBE1B8B",
  ARE_ALL_NAVMESH_REGIONS_LOADED: "0x8415D95B194A3AEA",
  IS_NAVMESH_LOADED_IN_AREA: "0xF813C7E63F9062A5",
  ADD_NAVMESH_BLOCKING_OBJECT: "0xFCD5C8E06E502F5A",
  UPDATE_NAVMESH_BLOCKING_OBJECT: "0x109E99373F290687",
  REMOVE_NAVMESH_BLOCKING_OBJECT: "0x46399A7895957C0E",
  CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS: "0xADD95C7005C4A197",
  IS_CONTROL_ENABLED: "0x1CEA6BFDF248E5D9",
  IS_CONTROL_PRESSED: "0xF3A21BCD95725A4A",
  IS_CONTROL_RELEASED: "0x648EE3E7F38877DD",
  IS_CONTROL_JUST_PRESSED: "0x580417101DDB492F",
  IS_CONTROL_JUST_RELEASED: "0x50F940259D3841E6",
  GET_CONTROL_VALUE: "0xD95E79E8686D2C27",
  GET_CONTROL_NORMAL: "0xEC3C9B8D5327B563",
  _SET_CONTROL_NORMAL: "0xE8A25867FBA3B05E",
  IS_DISABLED_CONTROL_PRESSED: "0xE2587F8CBBD87B1D",
  IS_DISABLED_CONTROL_JUST_PRESSED: "0x91AEF906BCA88877",
  IS_DISABLED_CONTROL_JUST_RELEASED: "0x305C8DCD79DA8B0F",
  GET_DISABLED_CONTROL_NORMAL: "0x11E65974A982637C",
  _IS_INPUT_DISABLED: "0xA571D46727E2B718",
  _IS_INPUT_JUST_DISABLED: "0x13337B38DB572509",
  _GET_CONTROL_ACTION_NAME: "0x0499D7B09FC9B407",
  SET_PAD_SHAKE: "0x48B3886C1358D0D5",
  STOP_PAD_SHAKE: "0x38C16A305E8CDC8D",
  IS_LOOK_INVERTED: "0x77B612531280010D",
  GET_LOCAL_PLAYER_AIM_STATE: "0xBB41AFBBBC0A0287",
  SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED: "0x798FDEB5B1575088",
  SET_INPUT_EXCLUSIVE: "0xEDE476E5EE29EDB1",
  DISABLE_CONTROL_ACTION: "0xFE99B66D079CF6BC",
  ENABLE_CONTROL_ACTION: "0x351220255D64C155",
  DISABLE_ALL_CONTROL_ACTIONS: "0x5F4B6931816E599B",
  ENABLE_ALL_CONTROL_ACTIONS: "0xA5FFE9B05F199DE7",
  _LOAD_UGC_FILE: "0xC5238C011AF405E4",
  DATAFILE_CREATE: "0xD27058A1CA2B13EE",
  DATAFILE_DELETE: "0x9AB9C1CFC8862DFB",
  _GET_ROOT_OBJECT: "0x906B778CA1DC72B6",
  _OBJECT_VALUE_ADD_BOOLEAN: "0x35124302A556A325",
  _OBJECT_VALUE_ADD_INTEGER: "0xE7E035450A7948D5",
  _OBJECT_VALUE_ADD_FLOAT: "0xC27E1CC2D795105E",
  _OBJECT_VALUE_ADD_STRING: "0x8FF3847DADD8E30C",
  "_OBJECT_VALUE_ADD_VECTOR3": "0x4CD49B76338C7DEE",
  _OBJECT_VALUE_ADD_OBJECT: "0xA358F56F10732EE1",
  _OBJECT_VALUE_ADD_ARRAY: "0x5B11728527CA6E5F",
  _OBJECT_VALUE_GET_BOOLEAN: "0x1186940ED72FFEEC",
  _OBJECT_VALUE_GET_INTEGER: "0x78F06F6B1FB5A80C",
  _OBJECT_VALUE_GET_FLOAT: "0x06610343E73B9727",
  _OBJECT_VALUE_GET_STRING: "0x3D2FD9E763B24472",
  "_OBJECT_VALUE_GET_VECTOR3": "0x46CD3CB66E0825CC",
  _OBJECT_VALUE_GET_OBJECT: "0xB6B9DDC412FCEEE2",
  _OBJECT_VALUE_GET_ARRAY: "0x7A983AA9DA2659ED",
  _OBJECT_VALUE_GET_TYPE: "0x031C55ED33227371",
  _ARRAY_VALUE_ADD_BOOLEAN: "0xF8B0F5A43E928C76",
  _ARRAY_VALUE_ADD_INTEGER: "0xCABDB751D86FE93B",
  _ARRAY_VALUE_ADD_FLOAT: "0x57A995FD75D37F56",
  _ARRAY_VALUE_ADD_STRING: "0x2F0661C155AEEEAA",
  "_ARRAY_VALUE_ADD_VECTOR3": "0x407F8D034F70F0C2",
  _ARRAY_VALUE_ADD_OBJECT: "0x6889498B3E19C797",
  _ARRAY_VALUE_GET_BOOLEAN: "0x50C1B2874E50C114",
  _ARRAY_VALUE_GET_INTEGER: "0x3E5AE19425CD74BE",
  _ARRAY_VALUE_GET_FLOAT: "0xC0C527B525D7CFB5",
  _ARRAY_VALUE_GET_STRING: "0xD3F2FFEB8D836F52",
  "_ARRAY_VALUE_GET_VECTOR3": "0x8D2064E5B64A628A",
  _ARRAY_VALUE_GET_OBJECT: "0x8B5FADCC4E3A145F",
  _ARRAY_VALUE_GET_SIZE: "0x065DB281590CEA2D",
  _ARRAY_VALUE_GET_TYPE: "0x3A0014ADB172A3C5",
  START_SCRIPT_FIRE: "0x6B83617E04503888",
  REMOVE_SCRIPT_FIRE: "0x7FF548385680673F",
  START_ENTITY_FIRE: "0xF6A9D9708F6F23DF",
  STOP_ENTITY_FIRE: "0x7F0DD2EBBB651AFF",
  IS_ENTITY_ON_FIRE: "0x28D3FED7190D3A0B",
  GET_NUMBER_OF_FIRES_IN_RANGE: "0x50CAD495A460B305",
  STOP_FIRE_IN_RANGE: "0x056A8A219B8E829F",
  GET_CLOSEST_FIRE_POS: "0x352A9F6BCF90081F",
  ADD_EXPLOSION: "0xE3AD2BDBAEE269AC",
  ADD_OWNED_EXPLOSION: "0x172AA1B624FA1013",
  _ADD_SPECFX_EXPLOSION: "0x36DD3FE58B5E5212",
  IS_EXPLOSION_IN_AREA: "0x2E2EBA0EE7CED0E0",
  IS_EXPLOSION_IN_SPHERE: "0xAB0F816885B0E483",
  IS_EXPLOSION_IN_ANGLED_AREA: "0xA079A6C51525DC4B",
  _GET_PED_INSIDE_EXPLOSION_AREA: "0x14BA4BA137AF6CEC",
  SET_DECISION_MAKER: "0xB604A2942ADED0EE",
  CLEAR_DECISION_MAKER_EVENT_RESPONSE: "0x4FC9381A7AEE8968",
  BLOCK_DECISION_MAKER_EVENT: "0xE42FCDFD0E4196F7",
  UNBLOCK_DECISION_MAKER_EVENT: "0xD7CD9CF34F2C99E8",
  ADD_SHOCKING_EVENT_AT_POSITION: "0xD9F8455409B525E9",
  ADD_SHOCKING_EVENT_FOR_ENTITY: "0x7FD8F3BE76F89422",
  IS_SHOCKING_EVENT_IN_SPHERE: "0x1374ABB7C15BAB92",
  REMOVE_SHOCKING_EVENT: "0x2CDA538C44C6CCE5",
  REMOVE_ALL_SHOCKING_EVENTS: "0xEAABE8FDFA21274C",
  REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS: "0x340F1415B68AEADE",
  SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME: "0x2F9A292AD0A3BD89",
  SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME: "0x3FD2EC8BF1F1CF30",
  SUPPRESS_AGITATION_EVENTS_NEXT_FRAME: "0x5F3B7749C112D552",
  GET_ZONE_AT_COORDS: "0x27040C25DE6CB2F4",
  GET_ZONE_FROM_NAME_ID: "0x98CD1D2934B76CC1",
  GET_ZONE_POPSCHEDULE: "0x4334BC40AA0CB4BB",
  GET_NAME_OF_ZONE: "0xCD90657D4C30E1CA",
  SET_ZONE_ENABLED: "0xBA5ECEEA120E5611",
  GET_ZONE_SCUMMINESS: "0x5F7B268D15BA0739",
  OVERRIDE_POPSCHEDULE_VEHICLE_MODEL: "0x5F7D596BAC2E7777",
  CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL: "0x5C0DE367AA0D911C",
  GET_HASH_OF_MAP_AREA_AT_COORDS: "0x7EE64D51E8498728",
  ADD_ROPE: "0xE832D760399EB220",
  DELETE_ROPE: "0x52B4829281364649",
  DELETE_CHILD_ROPE: "0xAA5D6B1888E4DB20",
  DOES_ROPE_EXIST: "0xFD5448BE3111ED96",
  ROPE_DRAW_SHADOW_ENABLED: "0xF159A63806BB5BA8",
  LOAD_ROPE_DATA: "0xCBB203C04D1ABD27",
  PIN_ROPE_VERTEX: "0x2B320CF14146B69A",
  UNPIN_ROPE_VERTEX: "0x4B5AE2EEE4A8F180",
  GET_ROPE_VERTEX_COUNT: "0x3655F544CD30F0B5",
  ATTACH_ENTITIES_TO_ROPE: "0x3D95EC8B6D940AC3",
  ATTACH_ROPE_TO_ENTITY: "0x4B490A6832559A65",
  DETACH_ROPE_FROM_ENTITY: "0xBCF3026912A8647D",
  ROPE_SET_UPDATE_PINVERTS: "0xC8D667EE52114ABA",
  GET_ROPE_LAST_VERTEX_COORD: "0x21BB0FBD3E217C2D",
  GET_ROPE_VERTEX_COORD: "0xEA61CA8E80F09E4D",
  START_ROPE_WINDING: "0x1461C72C889E343E",
  STOP_ROPE_WINDING: "0xCB2D4AB84A19AA7C",
  START_ROPE_UNWINDING_FRONT: "0x538D1179EC1AA9A9",
  STOP_ROPE_UNWINDING_FRONT: "0xFFF3A50779EFBBB3",
  ROPE_CONVERT_TO_SIMPLE: "0x5389D48EFA2F079A",
  ROPE_LOAD_TEXTURES: "0x9B9039DBF2D258C1",
  ROPE_ARE_TEXTURES_LOADED: "0xF2D0E6A75CC05597",
  ROPE_UNLOAD_TEXTURES: "0x6CE36C35C1AC8163",
  _GET_ROPE_LENGTH: "0x73040398DFF9A4A6",
  ROPE_FORCE_LENGTH: "0xD009F759A723DB1B",
  ROPE_RESET_LENGTH: "0xC16DE94D9BEA14A0",
  APPLY_IMPULSE_TO_CLOTH: "0xE37F721824571784",
  SET_DAMPING: "0xEEA3B200A6FEB65B",
  ACTIVATE_PHYSICS: "0x710311ADF0E20730",
  SET_CGOFFSET: "0xD8FA3908D7B86904",
  GET_CGOFFSET: "0x8214A4B5A7A33612",
  SET_CG_AT_BOUNDCENTER: "0xBE520D9761FF811F",
  BREAK_ENTITY_GLASS: "0x2E648D16F6E308F3",
  SET_DISABLE_BREAKING: "0x5CEC1A84620E7D5B",
  SET_DISABLE_FRAG_DAMAGE: "0x01BA3AED21C16CFB",
  GET_WATER_HEIGHT: "0xF6829842C06AE524",
  GET_WATER_HEIGHT_NO_WAVES: "0x8EE6B53CE13A9794",
  TEST_PROBE_AGAINST_WATER: "0xFFA5D878809819DB",
  TEST_PROBE_AGAINST_ALL_WATER: "0x8974647ED222EA5F",
  TEST_VERTICAL_PROBE_AGAINST_ALL_WATER: "0x2B3451FA1E3142E2",
  MODIFY_WATER: "0xC443FD757C3BA637",
  _SET_WAVES_HEIGHT: "0xB96B00E976BE977F",
  _GET_WAVES_HEIGHT: "0x2B2A2CC86778B619",
  _RESET_WAVES_HEIGHT: "0x5E5E99285AE812DB",
  _CAST_RAY_POINT_TO_POINT: "0x377906D8A31E5586",
  "_CAST_3D_RAY_POINT_TO_POINT": "0x28579D1B8F8AAC80",
  _GET_RAYCAST_RESULT: "0x3D87450E15D98694",
  "_GET_RAYCAST_RESULT_2": "0x65287525D951F6BE",
  NETWORK_IS_SIGNED_IN: "0x054354A99211EB96",
  NETWORK_IS_SIGNED_ONLINE: "0x1077788E268557C2",
  _NETWORK_ARE_ROS_AVAILABLE: "0x85443FF4C328F53B",
  NETWORK_IS_CLOUD_AVAILABLE: "0x9A4CF4F48AD77302",
  NETWORK_IS_HOST: "0x8DB296B814EDDA07",
  NETWORK_HAVE_ONLINE_PRIVILEGES: "0x25CB5A9F37BFD063",
  NETWORK_CAN_BAIL: "0x580CE4438479CC61",
  NETWORK_BAIL: "0x95914459A87EBA28",
  _GET_MP_LOADING_STATE: "0xAF50DA1A3F8B1BA4",
  NETWORK_IS_MULTIPLAYER_DISABLED: "0x9747292807126EDA",
  NETWORK_CAN_ENTER_MULTIPLAYER: "0x7E782A910C362C25",
  NETWORK_SESSION_ENTER: "0x330ED4D05491934F",
  NETWORK_SESSION_HOST: "0x6F3D4ED9BEE4E61D",
  NETWORK_SESSION_HOST_CLOSED: "0xED34C0C02C098BB7",
  NETWORK_SESSION_HOST_FRIENDS_ONLY: "0xB9CFD27A5D578D83",
  NETWORK_SESSION_END: "0xA02E59562D711006",
  NETWORK_SESSION_KICK_PLAYER: "0xFA8904DC5F304220",
  _NETWORK_SESSION_ARE_PLAYERS_VOTING_TO_KICK: "0xD6D09A6F32F49EF1",
  NETWORK_ADD_FOLLOWERS: "0x236406F60CF216D6",
  NETWORK_CLEAR_FOLLOWERS: "0x058F43EC59A8631A",
  _NETWORK_GET_SERVER_TIME: "0x6D03BFBD643B2A02",
  NETWORK_IS_FINDING_GAMERS: "0xDDDF64C91BFCF0AA",
  NETWORK_GET_NUM_FOUND_GAMERS: "0xA1B043EE79A916FB",
  NETWORK_GET_FOUND_GAMER: "0x9DCFF2AFB68B3476",
  NETWORK_CLEAR_FOUND_GAMERS: "0x6D14CCEE1B40381A",
  NETWORK_IS_PLAYER_ANIMATION_DRAWING_SYNCHRONIZED: "0xC6F8AB8A4189CF3A",
  NETWORK_SESSION_CANCEL_INVITE: "0x2FBF47B1B36D36F9",
  NETWORK_HAS_PENDING_INVITE: "0xAC8C7B9B88C4A668",
  NETWORK_SESSION_GET_INVITER: "0xE57397B4A3429DD0",
  NETWORK_SUPPRESS_INVITE: "0xA0682D67EF1FBA3D",
  NETWORK_BLOCK_INVITES: "0x34F9E9049454A7A0",
  NETWORK_SESSION_HOST_SINGLE_PLAYER: "0xC74C33FCA52856D5",
  NETWORK_SESSION_LEAVE_SINGLE_PLAYER: "0x3442775428FD2DAA",
  NETWORK_IS_GAME_IN_PROGRESS: "0x10FAB35428CCC9D7",
  NETWORK_IS_SESSION_ACTIVE: "0xD83C2B94E7508980",
  NETWORK_IS_IN_SESSION: "0xCA97246103B63917",
  NETWORK_IS_SESSION_STARTED: "0x9DE624D2FC4B603F",
  NETWORK_IS_SESSION_BUSY: "0xF4435D66A8E2905E",
  NETWORK_CAN_SESSION_END: "0x4EEBC3694E49C572",
  NETWORK_SESSION_VOICE_HOST: "0x9C1556705F864230",
  NETWORK_SESSION_VOICE_LEAVE: "0x6793E42BE02B575D",
  NETWORK_SET_KEEP_FOCUSPOINT: "0x7F8413B7FC2AA6B9",
  NETWORK_SEND_TEXT_MESSAGE: "0x3A214F2EC889B100",
  NETWORK_SET_ACTIVITY_SPECTATOR: "0x75138790B4359A74",
  NETWORK_IS_ACTIVITY_SPECTATOR: "0x12103B9E0C9F92FB",
  NETWORK_SET_ACTIVITY_SPECTATOR_MAX: "0x9D277B76D1D12222",
  NETWORK_GET_ACTIVITY_PLAYER_NUM: "0x73E2B500410DA5A2",
  NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE: "0x2763BBAA72A7BCB9",
  NETWORK_HOST_TRANSITION: "0xA60BB5CE242BB254",
  NETWORK_DO_TRANSITION_QUICKMATCH: "0x71FB0EBCD4915D56",
  NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP: "0x9C4AB58491FDC98A",
  NETWORK_SET_TRANSITION_CREATOR_HANDLE: "0xEF26739BCD9907D5",
  NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE: "0xFB3272229A82C759",
  NETWORK_INVITE_GAMERS_TO_TRANSITION: "0x4A595C32F77DFF76",
  NETWORK_SET_GAMER_INVITED_TO_TRANSITION: "0xCA2C8073411ECDB6",
  NETWORK_LEAVE_TRANSITION: "0xD23A1A815D21DB19",
  NETWORK_LAUNCH_TRANSITION: "0x2DCF46CB1A4F0884",
  NETWORK_BAIL_TRANSITION: "0xEAA572036990CD1B",
  NETWORK_DO_TRANSITION_TO_GAME: "0x3E9BB38102A589B0",
  NETWORK_DO_TRANSITION_TO_NEW_GAME: "0x4665F51EFED00034",
  NETWORK_DO_TRANSITION_TO_FREEMODE: "0x3AAD8B2FCA1E289F",
  NETWORK_DO_TRANSITION_TO_NEW_FREEMODE: "0x9E80A5BA8109F974",
  NETWORK_IS_TRANSITION_TO_GAME: "0x9D7696D8F4FA6CB7",
  NETWORK_GET_TRANSITION_MEMBERS: "0x73B000F7FBC55829",
  NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION: "0x31D1D2B858D25E6B",
  NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED: "0x5728BB6D63E3FF1D",
  NETWORK_IS_TRANSITION_HOST: "0x0B824797C9BF2159",
  NETWORK_IS_TRANSITION_HOST_FROM_HANDLE: "0x6B5C83BA3EFE6A10",
  NETWORK_GET_TRANSITION_HOST: "0x65042B9774C4435E",
  NETWORK_IS_IN_TRANSITION: "0x68049AEFF83D8F0A",
  NETWORK_IS_TRANSITION_STARTED: "0x53FA83401D9C07FE",
  NETWORK_IS_TRANSITION_BUSY: "0x520F3282A53D26B7",
  NETWORK_HAS_PLAYER_STARTED_TRANSITION: "0x9AC9CCBFA8C29795",
  NETWORK_JOIN_TRANSITION: "0x9D060B08CD63321A",
  NETWORK_HAS_INVITED_GAMER_TO_TRANSITION: "0x7284A47B3540E6CF",
  NETWORK_IS_ACTIVITY_SESSION: "0x05095437424397FA",
  NETWORK_ACCEPT_PRESENCE_INVITE: "0xFA91550DF9318B22",
  NETWORK_REMOVE_PRESENCE_INVITE: "0xF0210268DB0974B1",
  NETWORK_GET_PRESENCE_INVITE_ID: "0xDFF09646E12EC386",
  NETWORK_GET_PRESENCE_INVITE_INVITER: "0x4962CC4AA2F345B7",
  NETWORK_GET_PRESENCE_INVITE_HANDLE: "0x38D5B0FEBB086F75",
  NETWORK_REMOVE_TRANSITION_INVITE: "0x7524B431B2E6F7EE",
  NETWORK_INVITE_GAMERS: "0x9D80CD1D0E6327DE",
  NETWORK_HAS_INVITED_GAMER: "0x4D86CD31E8976ECE",
  NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU: "0x74881E6BCAE2327C",
  NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU: "0x7206F674F2A3B1BB",
  FILLOUT_PM_PLAYER_LIST: "0xCBBD7C4991B64809",
  FILLOUT_PM_PLAYER_LIST_WITH_NAMES: "0x716B6DB9D1886106",
  USING_NETWORK_WEAPONTYPE: "0xE26CCFF8094D8C74",
  NETWORK_IS_CHATTING_IN_PLATFORM_PARTY: "0x8DE9945BCC9AEC52",
  NETWORK_IS_IN_PARTY: "0x966C2BC2A7FE3F30",
  NETWORK_IS_PARTY_MEMBER: "0x676ED266AADD31E0",
  _NETWORK_GET_RANDOM_INT_IN_RANGE: "0xE30CF56F1EFA5F43",
  NETWORK_PLAYER_IS_CHEATER: "0x655B91F1495A9090",
  NETWORK_PLAYER_IS_BADSPORT: "0x19D8DA0E5A68045A",
  BAD_SPORT_PLAYER_LEFT_DETECTED: "0xEC5E3AF5289DCA81",
  NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT: "0x1CA59E306ECB80A5",
  NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT: "0x2910669969E9535E",
  _NETWORK_GET_NUM_PARTICIPANTS_HOST: "0xA6C90FBC38E395EE",
  NETWORK_GET_NUM_PARTICIPANTS: "0x18D0456E86604654",
  NETWORK_GET_SCRIPT_STATUS: "0x57D158647A6BFABF",
  NETWORK_REGISTER_HOST_BROADCAST_VARIABLES: "0x3E9B2F01C50DF595",
  NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES: "0x3364AA97340CA215",
  NETWORK_GET_PLAYER_INDEX: "0x24FB80D107371267",
  NETWORK_GET_PARTICIPANT_INDEX: "0x1B84DF6AF2A46938",
  _NETWORK_GET_PED_PLAYER: "0x6C0E2E0125610278",
  NETWORK_GET_NUM_CONNECTED_PLAYERS: "0xA4A79DD2D9600654",
  NETWORK_IS_PLAYER_CONNECTED: "0x93DC1BE4E1ABE9D1",
  NETWORK_IS_PARTICIPANT_ACTIVE: "0x6FF8FF40B6357D45",
  NETWORK_IS_PLAYER_ACTIVE: "0xB8DFD30D6973E135",
  NETWORK_IS_PLAYER_A_PARTICIPANT: "0x3CA58F6CB7CBD784",
  NETWORK_IS_HOST_OF_THIS_SCRIPT: "0x83CD99A1E6061AB5",
  NETWORK_GET_HOST_OF_THIS_SCRIPT: "0xC7B4D79B01FA7A5C",
  NETWORK_GET_HOST_OF_SCRIPT: "0x1D6A14F1F9A736FC",
  NETWORK_SET_MISSION_FINISHED: "0x3B3D11CD9FFCDFC9",
  NETWORK_IS_SCRIPT_ACTIVE: "0x9D40DF90FAD26098",
  PARTICIPANT_ID: "0x90986E8876CE0A83",
  PARTICIPANT_ID_TO_INT: "0x57A3BDDAD8E5AA0A",
  NETWORK_GET_DESTROYER_OF_NETWORK_ID: "0x7A1ADEEF01740A24",
  NETWORK_GET_ENTITY_KILLER_OF_PLAYER: "0x42B2DAA6B596F5F8",
  NETWORK_RESURRECT_LOCAL_PLAYER: "0xEA23C49EAA83ACFB",
  NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME: "0x2D95C7E2D7E07307",
  NETWORK_IS_LOCAL_PLAYER_INVINCIBLE: "0x8A8694B48715B000",
  NETWORK_GET_NETWORK_ID_FROM_ENTITY: "0xA11700682F3AD45C",
  NETWORK_GET_ENTITY_FROM_NETWORK_ID: "0xCE4E5D9B0A4FF560",
  NETWORK_GET_ENTITY_IS_LOCAL: "0x0991549DE4D64762",
  NETWORK_UNREGISTER_NETWORKED_ENTITY: "0x7368E683BB9038D6",
  NETWORK_DOES_NETWORK_ID_EXIST: "0x38CE16C96BD11344",
  NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID: "0x18A47D074708FD68",
  NETWORK_REQUEST_CONTROL_OF_NETWORK_ID: "0xA670B3662FAFFBD0",
  NETWORK_HAS_CONTROL_OF_NETWORK_ID: "0x4D36070FE0215186",
  NETWORK_REQUEST_CONTROL_OF_ENTITY: "0xB69317BF5E782347",
  NETWORK_REQUEST_CONTROL_OF_DOOR: "0x870DDFD5A4A796E4",
  NETWORK_HAS_CONTROL_OF_ENTITY: "0x01BF60A500E28887",
  NETWORK_HAS_CONTROL_OF_PICKUP: "0x5BC9495F0B3B6FA6",
  NETWORK_HAS_CONTROL_OF_DOOR: "0xCB3C68ADB06195DF",
  VEH_TO_NET: "0xB4C94523F023419C",
  PED_TO_NET: "0x0EDEC3C276198689",
  OBJ_TO_NET: "0x99BFDC94A603E541",
  NET_TO_VEH: "0x367B936610BA360C",
  NET_TO_PED: "0xBDCD95FC216A8B3E",
  NET_TO_OBJ: "0xD8515F5FEA14CB3F",
  NET_TO_ENT: "0xBFFEAB45A9A9094A",
  NETWORK_GET_LOCAL_HANDLE: "0xE86051786B66CD8E",
  NETWORK_HANDLE_FROM_USER_ID: "0xDCD51DD8F87AEC5C",
  NETWORK_HANDLE_FROM_MEMBER_ID: "0xA0FD21BED61E5C4C",
  NETWORK_HANDLE_FROM_PLAYER: "0x388EB2B86C73B6B3",
  _NETWORK_HASH_FROM_GAMER_HANDLE: "0x58575AC3CF2CA8EC",
  NETWORK_HANDLE_FROM_FRIEND: "0xD45CB817D7E177D2",
  NETWORK_GAMERTAG_FROM_HANDLE_START: "0x9F0C0A981D73FA56",
  NETWORK_GAMERTAG_FROM_HANDLE_PENDING: "0xB071E27958EF4CF0",
  NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED: "0xFD00798DBA7523DD",
  NETWORK_GET_GAMERTAG_FROM_HANDLE: "0x426141162EBE5CDB",
  NETWORK_ARE_HANDLES_THE_SAME: "0x57DBA049E110F217",
  NETWORK_IS_HANDLE_VALID: "0x6F79B93B0A8E4133",
  NETWORK_GET_PLAYER_FROM_GAMER_HANDLE: "0xCE5F689CF5A0A49D",
  NETWORK_MEMBER_ID_FROM_GAMER_HANDLE: "0xC82630132081BB6F",
  NETWORK_IS_GAMER_IN_MY_SESSION: "0x0F10B05DDF8D16E9",
  NETWORK_SHOW_PROFILE_UI: "0x859ED1CEA343FCA8",
  NETWORK_PLAYER_GET_NAME: "0x7718D2E2060837D2",
  _NETWORK_PLAYER_GET_USER_ID: "0x4927FC39CD0869A0",
  NETWORK_PLAYER_IS_ROCKSTAR_DEV: "0x544ABDDA3B409B6D",
  NETWORK_IS_INACTIVE_PROFILE: "0x7E58745504313A2E",
  NETWORK_GET_MAX_FRIENDS: "0xAFEBB0D5D8F687D2",
  NETWORK_GET_FRIEND_COUNT: "0x203F1CFD823B27A4",
  NETWORK_GET_FRIEND_NAME: "0xE11EBBB2A783FE8B",
  _NETWORK_GET_FRIEND_NAME_FROM_INDEX: "0x4164F227D052E293",
  NETWORK_IS_FRIEND_ONLINE: "0x425A44533437B64D",
  NETWORK_IS_FRIEND_IN_SAME_TITLE: "0x2EA9A3BEDF3F17B8",
  NETWORK_IS_FRIEND_IN_MULTIPLAYER: "0x57005C18827F3A28",
  NETWORK_IS_FRIEND: "0x1A24A179F9B31654",
  NETWORK_IS_PENDING_FRIEND: "0x0BE73DA6984A6E33",
  NETWORK_IS_ADDING_FRIEND: "0x6EA101606F6E4D81",
  NETWORK_ADD_FRIEND: "0x8E02D73914064223",
  NETWORK_IS_FRIEND_INDEX_ONLINE: "0xBAD8F2A42B844821",
  NETWORK_CAN_SET_WAYPOINT: "0xC927EC229934AF60",
  NETWORK_HAS_HEADSET: "0xE870F9F1F7B4F1FA",
  NETWORK_GAMER_HAS_HEADSET: "0xF2FD55CB574BCC55",
  NETWORK_IS_GAMER_TALKING: "0x71C33B22606CD88A",
  NETWORK_CAN_COMMUNICATE_WITH_GAMER: "0xA150A4F065806B1F",
  NETWORK_IS_GAMER_MUTED_BY_ME: "0xCE60DE011B6C7978",
  NETWORK_AM_I_MUTED_BY_GAMER: "0xDF02A2C93F1F26DA",
  NETWORK_IS_GAMER_BLOCKED_BY_ME: "0xE944C4F5AF1B5883",
  NETWORK_AM_I_BLOCKED_BY_GAMER: "0x15337C7C268A27B2",
  NETWORK_IS_PLAYER_TALKING: "0x031E11F3D447647E",
  NETWORK_PLAYER_HAS_HEADSET: "0x3FB99A8B08D18FD6",
  NETWORK_IS_PLAYER_MUTED_BY_ME: "0x8C71288AE68EDE39",
  NETWORK_AM_I_MUTED_BY_PLAYER: "0x9D6981DFC91A8604",
  NETWORK_IS_PLAYER_BLOCKED_BY_ME: "0x57AF1F8E27483721",
  NETWORK_AM_I_BLOCKED_BY_PLAYER: "0x87F395D957D4353D",
  NETWORK_GET_PLAYER_LOUDNESS: "0x21A1684A25C2867F",
  NETWORK_SET_TALKER_PROXIMITY: "0xCBF12D65F95AD686",
  NETWORK_GET_TALKER_PROXIMITY: "0x84F0F13120B4E098",
  NETWORK_SET_VOICE_ACTIVE: "0xBABEC9E69A91C57B",
  NETWORK_SET_TEAM_ONLY_CHAT: "0xD5B4883AC32F24C3",
  NETWORK_SET_OVERRIDE_SPECTATOR_MODE: "0x70DA3BF8DACD3210",
  NETWORK_SET_VOICE_CHANNEL: "0xEF6212C2EFEF1A23",
  IS_NETWORK_VEHICLE_BEEN_DAMAGED_BY_ANY_OBJECT: "0xDBD2056652689917",
  _NETWORK_IS_TEXT_CHAT_ACTIVE: "0x5FCF4D7069B09026",
  SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME: "0x593850C16A36B692",
  NETWORK_SET_FRIENDLY_FIRE_OPTION: "0xF808475FA571D823",
  NETWORK_SET_RICH_PRESENCE: "0x1DCCACDCFC569362",
  _NETWORK_PLAYER_IS_IN_CLAN: "0x579CCED0265D4896",
  NETWORK_CLAN_PLAYER_IS_ACTIVE: "0xB124B57F571D8F18",
  NETWORK_CLAN_PLAYER_GET_DESC: "0xEEE6EACBE8874FBA",
  NETWORK_CLAN_GET_MEMBERSHIP_DESC: "0x48DE78AF2C8885B8",
  NETWORK_CLAN_DOWNLOAD_MEMBERSHIP: "0xA989044E70010ABE",
  NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING: "0x5B9E023DC6EBEDC0",
  NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE: "0xBB6E6FEE99D866B2",
  NETWORK_CLAN_GET_MEMBERSHIP_COUNT: "0xAAB11F6C4ADBC2C1",
  NETWORK_CLAN_GET_MEMBERSHIP_VALID: "0x48A59CF88D43DF0E",
  NETWORK_CLAN_GET_MEMBERSHIP: "0xC8BC2011F67B3411",
  NETWORK_CLAN_JOIN: "0x9FAAA4F4FC71F87F",
  NETWORK_GET_PRIMARY_CLAN_DATA_START: "0xCE86D8191B762107",
  NETWORK_GET_PRIMARY_CLAN_DATA_NEW: "0xC080FF658B2E41DA",
  SET_NETWORK_ID_CAN_MIGRATE: "0x299EEB23175895FC",
  SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES: "0xE05E81A888FA63C8",
  NETWORK_SET_ENTITY_CAN_BLEND: "0xD830567D88A1E873",
  SET_NETWORK_ID_VISIBLE_IN_CUTSCENE: "0xA6928482543022B4",
  SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE: "0xD1065D68947E7B6E",
  SET_LOCAL_PLAYER_INVISIBLE_LOCALLY: "0xE5F773C1A1D9D168",
  SET_LOCAL_PLAYER_VISIBLE_LOCALLY: "0x7619364C82D3BF14",
  SET_PLAYER_INVISIBLE_LOCALLY: "0x12B37D54667DB0B8",
  SET_PLAYER_VISIBLE_LOCALLY: "0xFAA10F1FAFB11AF2",
  FADE_OUT_LOCAL_PLAYER: "0x416DBD4CD6ED8DD2",
  NETWORK_FADE_OUT_ENTITY: "0xDE564951F95E09ED",
  NETWORK_FADE_IN_ENTITY: "0x1F4ED342ACEFE62D",
  IS_PLAYER_IN_CUTSCENE: "0xE73092F4157CD126",
  SET_ENTITY_VISIBLE_IN_CUTSCENE: "0xE0031D3C8F36AB82",
  SET_ENTITY_LOCALLY_INVISIBLE: "0xE135A9FF3F5D05D8",
  SET_ENTITY_LOCALLY_VISIBLE: "0x241E289B5C059EDC",
  IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID: "0x6E192E33AD436366",
  ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID: "0xD45B1FFCCD52FF19",
  IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE: "0xD82CF8E64C8729D8",
  IS_SPHERE_VISIBLE_TO_PLAYER: "0xDC3A310219E5DA62",
  RESERVE_NETWORK_MISSION_OBJECTS: "0x4E5C93BD0C32FBF8",
  RESERVE_NETWORK_MISSION_PEDS: "0xB60FEBA45333D36F",
  RESERVE_NETWORK_MISSION_VEHICLES: "0x76B02E21ED27A469",
  CAN_REGISTER_MISSION_OBJECTS: "0x800DD4721A8B008B",
  CAN_REGISTER_MISSION_PEDS: "0xBCBF4FEF9FA5D781",
  CAN_REGISTER_MISSION_VEHICLES: "0x7277F1F2E085EE74",
  CAN_REGISTER_MISSION_ENTITIES: "0x69778E7564BADE6D",
  GET_NUM_RESERVED_MISSION_OBJECTS: "0xAA81B5F10BC43AC2",
  GET_NUM_RESERVED_MISSION_PEDS: "0x1F13D5AE5CB17E17",
  GET_NUM_RESERVED_MISSION_VEHICLES: "0xCF3A965906452031",
  GET_NETWORK_TIME: "0x7A5487FE9FAA6B48",
  GET_TIME_OFFSET: "0x017008CCDAD48503",
  IS_TIME_LESS_THAN: "0xCB2CF5148012C8D0",
  IS_TIME_MORE_THAN: "0xDE350F8651E4346C",
  IS_TIME_EQUAL_TO: "0xF5BC95857BD6D512",
  GET_TIME_DIFFERENCE: "0xA2C6FC031D46FFF0",
  _FORMAT_TIME: "0x9E23B1777A927DAD",
  _GET_POSIX_TIME: "0x9A73240B49945C76",
  _GET_DATE_AND_TIME_FROM_UNIX_EPOCH: "0xAC97AF97FA68E5D5",
  NETWORK_SET_IN_SPECTATOR_MODE: "0x423DE3854BB50894",
  NETWORK_IS_IN_SPECTATOR_MODE: "0x048746E388762E11",
  NETWORK_SET_IN_MP_CUTSCENE: "0x9CA5DE655269FEC4",
  NETWORK_IS_IN_MP_CUTSCENE: "0x6CC27C9FA2040220",
  NETWORK_IS_PLAYER_IN_MP_CUTSCENE: "0x63F9EE203C3619F2",
  SET_NETWORK_VEHICLE_RESPOT_TIMER: "0xEC51713AB6EC36E8",
  USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR: "0x5FFE9B4144F9712F",
  NETWORK_CREATE_SYNCHRONISED_SCENE: "0x7CD6BC4C2BBDD526",
  NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE: "0x742A637471BCECD9",
  NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE: "0xF2404D68CBC855FA",
  NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY: "0x478DCBD2A98B705A",
  NETWORK_START_SYNCHRONISED_SCENE: "0x9A1B3FCDB36C8697",
  NETWORK_STOP_SYNCHRONISED_SCENE: "0xC254481A4574CB2F",
  NETWORK_GET_RESPAWN_RESULT: "0x371EA43692861CF1",
  NETWORK_END_TUTORIAL_SESSION: "0xD0AFAFF5A51D72F7",
  NETWORK_IS_IN_TUTORIAL_SESSION: "0xADA24309FE08DACF",
  NETWORK_OVERRIDE_CLOCK_TIME: "0xE679E3E06E363892",
  NETWORK_ADD_ENTITY_AREA: "0x494C8FB299290269",
  _NETWORK_ADD_ENTITY_ANGLED_AREA: "0x376C6375BA60293A",
  NETWORK_REMOVE_ENTITY_AREA: "0x93CF869BAA0C4874",
  _DOWNLOAD_BG_SCRIPT_RPF: "0x924426BFFD82E915",
  _HAS_BG_SCRIPT_BEEN_DOWNLOADED: "0x8132C0EB8B2B3293",
  _DOWNLOAD_TUNABLES: "0x42FB3B532D526E6C",
  _HAS_TUNABLES_BEEN_DOWNLOADED: "0x0467C11ED88B7D28",
  NETWORK_DOES_TUNABLE_EXIST: "0x85E5F8B9B898B20A",
  NETWORK_ACCESS_TUNABLE_INT: "0x8BE1146DFD5D4468",
  NETWORK_ACCESS_TUNABLE_FLOAT: "0xE5608CA7BC163A5F",
  NETWORK_ACCESS_TUNABLE_BOOL: "0xAA6A47A573ABB75A",
  _NETWORK_DOES_TUNABLE_EXIST_HASH: "0xE4E53E1419D81127",
  _NETWORK_ACCESS_TUNABLE_INT_HASH: "0x40FCE03E50E8DBE8",
  _NETWORK_ACCESS_TUNABLE_FLOAT_HASH: "0x972BC203BBC4C4D5",
  _NETWORK_ACCESS_TUNABLE_BOOL_HASH: "0xEA16B69D93D71A45",
  _NETWORK_ACCESS_TUNABLE_BOOL_HASH_FAIL_VAL: "0xC7420099936CE286",
  _GET_TUNABLES_CONTENT_MODIFIER_ID: "0x187382F8A3E0A6C3",
  NETWORK_RESET_BODY_TRACKER: "0x72433699B4E6DD64",
  NETWORK_EXPLODE_VEHICLE: "0x301A42153C9AD707",
  NETWORK_SET_PROPERTY_ID: "0x1775961C2FBBCB5C",
  SET_STORE_ENABLED: "0x9641A9FF718E9C5E",
  SET_BALANCE_ADD_MACHINE: "0x815E5E3073DA1D67",
  SET_BALANCE_ADD_MACHINES: "0xB8322EEB38BE7C26",
  NETWORK_GET_BACKGROUND_LOADING_RECIPIENTS: "0x97A770BEEF227E2B",
  _GET_CONTENT_USER_ID: "0xCD67AD041A394C9C",
  _GET_CONTENT_CATEGORY: "0xA7BAB11E7C9C6C5A",
  _GET_CONTENT_ID: "0x55AA95F481D694D2",
  _GET_ROOT_CONTENT_ID: "0xC0173D6BFF4E0348",
  _GET_CONTENT_DESCRIPTION_HASH: "0x7CF0448787B23758",
  _GET_CONTENT_FILE_VERSION: "0x37025B27D9B658B1",
  TEXTURE_DOWNLOAD_REQUEST: "0x16160DA74A8E74A2",
  TEXTURE_DOWNLOAD_RELEASE: "0x487EB90B98E9FB19",
  TEXTURE_DOWNLOAD_HAS_FAILED: "0x5776ED562C134687",
  TEXTURE_DOWNLOAD_GET_NAME: "0x3448505B6E35262D",
  _IS_ROCKSTAR_BANNED: "0x8020A73847E0CA7D",
  _IS_SOCIALCLUB_BANNED: "0xA0AD7E2AF5349F61",
  _IS_PLAYER_BANNED: "0x5F91D5D0B36AA310",
  NETWORK_INITIALIZE_CASH: "0x3DA5ECD1A56CBA6D",
  NETWORK_DELETE_CHARACTER: "0x05A50AF38947EB8D",
  NETWORK_GIVE_PLAYER_JOBSHARE_CASH: "0xFB18DF9CB95E0105",
  NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH: "0x56A3B51944C50598",
  NETWORK_REFUND_CASH: "0xF9C812CD7C46E817",
  NETWORK_CAN_BET: "0x3A54E33660DED67F",
  NETWORK_EARN_FROM_PICKUP: "0xED1517D3AF17C698",
  NETWORK_EARN_FROM_BETTING: "0x827A5BA1A44ACA6D",
  NETWORK_EARN_FROM_JOB: "0xB2CC4836834E8A98",
  NETWORK_EARN_FROM_BOUNTY: "0x131BB5DA15453ACF",
  NETWORK_EARN_FROM_IMPORT_EXPORT: "0xF92A014A634442D6",
  NETWORK_EARN_FROM_HOLDUPS: "0x45B8154E077D9E4D",
  NETWORK_EARN_FROM_PROPERTY: "0x849648349D77F5C5",
  NETWORK_EARN_FROM_ROCKSTAR: "0x02CE1D6AC0FC73EA",
  NETWORK_EARN_FROM_VEHICLE: "0xB539BD8A4C1EECF8",
  _HAS_ITEM_BEEN_UNLOCKED: "0xAB3CAA6B422164DA",
  NETWORK_BUY_ITEM: "0xF0077C797F66A355",
  NETWORK_SPENT_TAXI: "0x17C3A7D31EAE39F9",
  NETWORK_SPENT_BETTING: "0x1C436FD11FFA692F",
  NETWORK_BUY_HEALTHCARE: "0xD9B067E55253E3DD",
  NETWORK_BUY_AIRSTRIKE: "0x763B4BD305338F19",
  NETWORK_BUY_HELI_STRIKE: "0x81AA4610E3FD3A69",
  NETWORK_SPENT_AMMO_DROP: "0xB162DC95C0A3317B",
  NETWORK_BUY_BOUNTY: "0x7B718E197453F2D9",
  NETWORK_BUY_PROPERTY: "0x650A08A280870AF6",
  NETWORK_SPENT_HELI_PICKUP: "0x7BF1D73DB2ECA492",
  NETWORK_SPENT_BOAT_PICKUP: "0x524EE43A37232C00",
  NETWORK_SPENT_BULL_SHARK: "0xA6DD8458CE24012C",
  NETWORK_SPENT_CASH_DROP: "0x289016EC778D60E0",
  NETWORK_SPENT_HIRE_MUGGER: "0xE404BFB981665BF0",
  NETWORK_SPENT_HIRE_MERCENARY: "0xE7B80E2BF9D80BD6",
  NETWORK_SPENT_BUY_WANTEDLEVEL: "0xE1B13771A843C4F6",
  NETWORK_SPENT_BUY_OFFTHERADAR: "0xA628A745E2275C5D",
  NETWORK_SPENT_BUY_REVEAL_PLAYERS: "0x6E176F1B18BC0637",
  NETWORK_SPENT_CARWASH: "0xEC03C719DB2F4306",
  NETWORK_SPENT_CINEMA: "0x6B38ECB05A63A685",
  NETWORK_SPENT_TELESCOPE: "0x7FE61782AD94CC09",
  NETWORK_SPENT_HOLDUPS: "0xD9B86B9872039763",
  NETWORK_SPENT_BUY_PASSIVE_MODE: "0x6D3A430D1A809179",
  NETWORK_SPENT_PROSTITUTES: "0xB21B89501CFAC79E",
  NETWORK_SPENT_ARREST_BAIL: "0x812F5488B1B2A299",
  NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM: "0x9FF28D88C766E3E8",
  NETWORK_SPENT_CALL_PLAYER: "0xACDE7185B374177C",
  NETWORK_SPENT_BOUNTY: "0x29B260B84947DFCC",
  PROCESS_CASH_GIFT: "0x20194D48EAEC9A41",
  NETWORK_CAN_RECEIVE_PLAYER_CASH: "0x5D17BE59D2123284",
  INIT_SHOP_PED_COMPONENT: "0x1E8C308FD312C036",
  INIT_SHOP_PED_PROP: "0xEB0A2B758F7B850F",
  _GET_NUM_PROPS_FROM_OUTFIT: "0x9BDF59818B1E38C1",
  GET_SHOP_PED_QUERY_COMPONENT: "0x249E310B2D920699",
  GET_SHOP_PED_COMPONENT: "0x74C0E2A57EC66760",
  GET_SHOP_PED_QUERY_PROP: "0xDE44A00999B2837D",
  GET_HASH_NAME_FOR_COMPONENT: "0x0368B3A838070348",
  GET_HASH_NAME_FOR_PROP: "0x5D6160275CAEC8DD",
  GET_VARIANT_COMPONENT: "0x6E11F282F11863B6",
  _GET_NUM_FORCED_COMPONENTS: "0xC6B9DB42C04DD8C3",
  GET_FORCED_COMPONENT: "0x6C93ED8C2F74859B",
  GET_SHOP_PED_QUERY_OUTFIT: "0x6D793F03A631FE56",
  GET_SHOP_PED_OUTFIT: "0xB7952076E444979D",
  _GET_PROP_FROM_OUTFIT: "0x19F2A026EDF0013F",
  GET_NUM_DLC_VEHICLES: "0xA7A866D21CD2329B",
  GET_DLC_VEHICLE_MODEL: "0xECC01B7C5763333C",
  GET_DLC_VEHICLE_DATA: "0x33468EDC08E371F6",
  GET_DLC_VEHICLE_FLAGS: "0x5549EE11FA22FCF2",
  GET_NUM_DLC_WEAPONS: "0xEE47635F352DA367",
  GET_DLC_WEAPON_DATA: "0x79923CD21BECE14E",
  GET_NUM_DLC_WEAPON_COMPONENTS: "0x405425358A7D61FE",
  GET_DLC_WEAPON_COMPONENT_DATA: "0x6CF598A2957C2BF8",
  _IS_DLC_DATA_EMPTY: "0xD4D7B033C3AA243C",
  IS_DLC_PRESENT: "0x812595A0644CE1DE",
  GET_IS_LOADING_SCREEN_ACTIVE: "0x10D0A8F259E93EC9",
  _NULLIFY: "0x46E2B844905BC5F0",
  _LOAD_SP_DLC_MAPS: "0xD7C10C4A637992C9",
  _LOAD_MP_DLC_MAPS: "0x0888C3502DBBEEF5",
  DECOR_SET_TIME: "0x95AED7B8E39ECAA4",
  DECOR_SET_BOOL: "0x6B1E8E2ED1335B71",
  _DECOR_SET_FLOAT: "0x211AB1DD8D0F363A",
  DECOR_SET_INT: "0x0CE3AA5E1CA19E10",
  DECOR_GET_BOOL: "0xDACE671663F2F5DB",
  _DECOR_GET_FLOAT: "0x6524A2F114706F43",
  DECOR_GET_INT: "0xA06C969B02A97298",
  DECOR_EXIST_ON: "0x05661B80A8C9165F",
  DECOR_REMOVE: "0x00EE9F297C738720",
  DECOR_REGISTER: "0x9FD90732F56403CE",
  DECOR_IS_REGISTERED_AS_TYPE: "0x4F14F9F870D6FBC8",
  DECOR_REGISTER_LOCK: "0xA9D14EEA259F9248",
  SC_INBOX_MESSAGE_GET_DATA_INT: "0xA00EFE4082C4056E",
  SC_INBOX_MESSAGE_GET_DATA_STRING: "0x7572EF42FC6A9B6D",
  SC_INBOX_MESSAGE_GET_UGCDATA: "0x69D82604A1A5A254",
  SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST: "0x2330C12A7A605D16",
  _SC_GET_NICKNAME: "0x198D161F458ECC7F",
  _RETURN_ZERO: "0xF2CA003F167E21D2",
  _GET_BROADCAST_FINSHED_LOS_SOUND: "0xB0C56BD3D808D863",
  _GET_UI_LANGUAGE_ID: "0x2BDD44CC428A7EAE",
  _GET_USER_LANGUAGE_ID: "0xA8AE43AEC1A61314",
  _SET_RECORDING_MODE: "0xC3AC2FFF9612AC81",
  _STOP_RECORDING_AND_SAVE_CLIP: "0x071A5197D6AFC8B3",
  _STOP_RECORDING_AND_DISCARD_CLIP: "0x88BB3507ED41A240",
  _IS_RECORDING: "0x1897CA71995A90B4",
  _IS_INTERIOR_RENDERING_DISABLED: "0x95AB8B5C992C7B58",
  _NETWORK_SHOP_GET_PRICE: "0xC27009422FCCA88D",
  _NETWORK_SHOP_BASKET_START: "0x279F08B1A4B29B7E",
  _GET_ONLINE_VERSION: "0xFCA9373EF340AC0A",
  SET_INTERIOR_PROP_COLOR: "0xC1F1920BAF281317",
  SET_SCRIPT_GFX_DRAW_ORDER: "0x61BB1D9B3A95D802",
  SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU: "0xC6372ECD45D73BCD",
  _DRAW_INTERACTIVE_SPRITE: "0x2BC54A8188768488",
  SET_TV_CHANNEL_PLAYLIST: "0xF7B38B8305F1FE8B"
};
SystemClass.interriorBlips = [];
SystemClass.interriorBlipsEnt = [];
SystemClass.nearestBlips = [];
SystemClass.nearestBlipsEnt = [];
function recreate() {
  SystemClass.interriorBlipsEnt.map((blip, index) => {
    if (mp.blips.exists(blip)) {
      if (!_user.user.inInterrior || system.distanceToPos2D(player.position, blip.getCoords()) > 300) blip.destroy(), SystemClass.interriorBlipsEnt.splice(index, 1);
    }
  });
  if (_user.user.inInterrior && !inInt) {
    inInt = true;
    SystemClass.interriorBlips.filter(q => system.distanceToPos2D(player.position, q.position) < 100).map(data => {
      system.interriorBlipsEnt.push(system.createBlip(data.type, data.color, data.position, data.name, data.dimension, data.shortRange));
    });
  } else if (!_user.user.inInterrior) inInt = false;
  SystemClass.nearestBlipsEnt.map(([blip, range], index) => {
    if (mp.blips.exists(blip)) {
      if (system.distanceToPos2D(player.position, blip.getCoords()) > range) blip.destroy(), SystemClass.interriorBlipsEnt.splice(index, 1);
    }
  });
  SystemClass.nearestBlips.map(data => {
    const inRange = system.distanceToPos2D(player.position, data.position) <= data.range;
    if (inRange && !data.created) {
      data.created = true;
      system.nearestBlipsEnt.push([system.createBlip(data.type, data.color, data.position, data.name, data.dimension, data.shortRange), data.range]);
    } else if (!inRange) data.created = false;
  });
}
let inInt = false;
setInterval(() => {
  recreate();
}, 1000);
_custom.CustomEvent.register('enterInterrior', () => {
  recreate();
});
_custom.CustomEvent.register('exitInterrior', () => {
  recreate();
});
_sync.SyncClass.handle('serverReboot', val => {
  rebTm(val);
});
const rebTm = time => {
  if (timerReboot && timerReboot.exists) timerReboot.destroy();
  if (time) timerReboot = _hudBar.hudBar.timer('Перезагрузка сервера', time);else timerReboot = null;
};
let timerReboot;
_custom.CustomEvent.registerServer('server:reboot:timer', time => rebTm(time));
const system = exports.system = SystemClass;
},{"../../shared/system":"SNxO","./custom.event":"py8h","./user":"ggMw","./dynamicBlip":"TK9Y","./hudBar":"WSqW","./sync":"nW4K"}],"AMC0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.guiNotHideList = void 0;
const guiNotHideList = exports.guiNotHideList = ['interaction', 'tablet'];
},{}],"j6No":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weather = exports.ipls = exports.MonthNames2 = exports.MonthNames = void 0;
var _system = require("./system");
var _custom = require("./custom.event");
const MonthNames = exports.MonthNames = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
const MonthNames2 = exports.MonthNames2 = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'];
setInterval(() => {
  if (weather.weather !== "XMAS") return;
  mp.game.gameplay.setWeatherTypeNow(weather.weather);
  mp.game.gameplay.setOverrideWeather(weather.weather);
}, 1000);
_custom.CustomEvent.registerServer('weather:sync', (weatherName, temp, realYear, realMonth, realDay, realHour, realMinute, realSecond) => {
  weather.weather = weatherName;
  weather.temp = temp;
  weather.realYear = realYear;
  weather.realMonth = realMonth;
  weather.realDay = realDay;
  weather.realHour = realHour;
  weather.realMinute = realMinute;
  weather.realSecond = realSecond;
  _custom.CustomEvent.triggerCef('tablet:weathersync', weatherName, temp);
  mp.game.time.setClockDate(realDay, realMonth, realYear);
  if (!weather.ignoreServerWeather) {
    if (weatherName !== "XMAS") {
      mp.game.gameplay.setWeatherTypeNow(weatherName);
      mp.game.gameplay.setWeatherTypeNowPersist(weatherName);
    }
  }
});
const weather = exports.weather = {
  getFullRpTime: () => {
    return `${_system.system.digitFormat(weather.realHour)}:${_system.system.digitFormat(weather.realMinute)}`;
  },
  getMonthYearDate: () => {
    const dateTime = new Date();
    return `${MonthNames[dateTime.getMonth()]} ${dateTime.getFullYear()}`;
  },
  getWeatherTemp: () => {
    return weather.temp;
  },
  getRealFullDateTime: () => {
    return `${_system.system.digitFormat(weather.realDay)}.${_system.system.digitFormat(weather.realMonth + 1)} ${_system.system.digitFormat(weather.realHour)}:${_system.system.digitFormat(weather.realMinute)}`;
  },
  weather: "",
  temp: 0,
  realYear: 0,
  realMonth: 0,
  realDay: 0,
  realHour: 0,
  realMinute: 0,
  realSecond: 0,
  ignoreServerWeather: false,
  ignoreServerTime: false,
  smoothTimeTransition: async function (fromTimeHour, fromTimeMinute, toTimeHour, ignoreServerTime) {
    weather.ignoreServerTime = true;
    let currentHour = fromTimeHour;
    let currentMinute = fromTimeMinute;
    while (currentHour != toTimeHour) {
      currentMinute += 3;
      if (currentMinute >= 60) {
        currentMinute = 0;
        currentHour++;
      }
      if (currentHour > 23) {
        currentHour = 0;
      }
      mp.game.time.setClockTime(currentHour, currentMinute, 0);
      await mp.game.waitAsync(30);
    }
    weather.ignoreServerTime = ignoreServerTime;
  }
};
setInterval(() => {
  weather.realSecond++;
  if (weather.realSecond >= 60) {
    weather.realSecond = 0;
    weather.realMinute++;
    if (weather.realMinute >= 60) {
      weather.realMinute = 0;
      weather.realHour++;
      if (weather.realHour >= 24) {
        weather.realHour = 0;
      }
    }
  }
  if (!weather.ignoreServerTime) {
    if (weather.weather === 'HALLOWEEN') {
      mp.game.time.setClockTime(0, 0, 0);
      return;
    }
    mp.game.time.setClockTime(weather.realHour, weather.realMinute, weather.realSecond);
  }
}, 1000);
_custom.CustomEvent.registerServer('forceSetTime', hours => {
  mp.game.time.setClockTime(hours, 0, 0);
  weather.ignoreServerTime = true;
});
const ipls = exports.ipls = {
  setIplPropState: (interiorId, prop, state = true) => {
    if (state) mp.game.interior.enableInteriorProp(interiorId, prop);else mp.game.interior.disableInteriorProp(interiorId, prop);
  },
  iplMichaelDefault: () => {
    let interiorId = 166657;
    let garageId = 166401;
    ipls.setIplPropState(interiorId, 'V_Michael_bed_tidy');
    ipls.setIplPropState(interiorId, 'V_Michael_bed_Messy');
    ipls.setIplPropState(interiorId, 'Michael_premier', false);
    ipls.setIplPropState(interiorId, 'V_Michael_FameShame', false);
    ipls.setIplPropState(interiorId, 'V_Michael_plane_ticket', false);
    ipls.setIplPropState(interiorId, 'V_Michael_JewelHeist', false);
    ipls.setIplPropState(interiorId, 'burgershot_yoga', false);
    mp.game.interior.refreshInterior(interiorId);
    ipls.setIplPropState(garageId, 'V_Michael_Scuba', false);
    mp.game.interior.refreshInterior(garageId);
  },
  iplSimonDefault: () => {
    let interiorId = 7170;
    mp.game.streaming.requestIpl('shr_int');
    ipls.setIplPropState(interiorId, 'csr_beforeMission');
    ipls.setIplPropState(interiorId, 'shutter_open');
    mp.game.interior.refreshInterior(interiorId);
  },
  iplFranklinAuntDefault: () => {
    let interiorId = 197889;
    ipls.setIplPropState(interiorId, '');
    ipls.setIplPropState(interiorId, 'V_57_GangBandana', false);
    ipls.setIplPropState(interiorId, 'V_57_Safari', false);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplFranklinDefault: () => {
    let interiorId = 206849;
    ipls.setIplPropState(interiorId, '');
    ipls.setIplPropState(interiorId, 'unlocked');
    ipls.setIplPropState(interiorId, 'progress_flyer', false);
    ipls.setIplPropState(interiorId, 'progress_tux', false);
    ipls.setIplPropState(interiorId, 'progress_tshirt', false);
    ipls.setIplPropState(interiorId, 'bong_and_wine', true);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplFloydDefault: () => {
    let interiorId = 171777;
    ipls.setIplPropState(interiorId, 'swap_clean_apt');
    ipls.setIplPropState(interiorId, 'swap_mrJam_A');
    mp.game.interior.refreshInterior(interiorId);
  },
  iplTrevorDefault: () => {
    let interiorId = 2562;
    mp.game.streaming.requestIpl('trevorstrailertidy');
    ipls.setIplPropState(interiorId, 'V_26_Trevor_Helmet3', false);
    ipls.setIplPropState(interiorId, 'V_24_Trevor_Briefcase3', false);
    ipls.setIplPropState(interiorId, 'V_26_Michael_Stay3', false);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplBankGarages: () => {
    mp.game.streaming.requestIpl('imp_dt1_11_cargarage_b');
    mp.game.streaming.requestIpl('imp_dt1_11_cargarage_a');
    mp.game.streaming.requestIpl('imp_dt1_11_cargarage_c');
  },
  iplAmmoDefault: () => {
    let ammunationsId = [140289, 153857, 168193, 164609, 176385, 175617, 200961, 180481, 178689];
    let gunclubsId = [137729, 248065];
    ammunationsId.forEach(interiorId => {
      ipls.setIplPropState(interiorId, 'GunStoreHooks');
      ipls.setIplPropState(interiorId, 'GunClubWallHooks');
      mp.game.interior.refreshInterior(interiorId);
    });
    gunclubsId.forEach(interiorId => {
      ipls.setIplPropState(interiorId, 'GunStoreHooks');
      ipls.setIplPropState(interiorId, 'GunClubWallHooks');
      mp.game.interior.refreshInterior(interiorId);
    });
  },
  iplLesterFactoryDefault: () => {
    let interiorId = 92674;
    ipls.setIplPropState(interiorId, 'V_53_Agency_Blueprint', false);
    ipls.setIplPropState(interiorId, 'V_35_KitBag', false);
    ipls.setIplPropState(interiorId, 'V_35_Fireman', false);
    ipls.setIplPropState(interiorId, 'V_35_Body_Armour', false);
    ipls.setIplPropState(interiorId, 'Jewel_Gasmasks', false);
    ipls.setIplPropState(interiorId, 'v_53_agency_overalls', false);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplStripClubDefault: () => {
    let interiorId = 197121;
    ipls.setIplPropState(interiorId, 'V_19_Trevor_Mess', false);
    mp.game.interior.refreshInterior(interiorId);
  }
};
ipls.iplMichaelDefault();
ipls.iplSimonDefault();
ipls.iplFranklinAuntDefault();
ipls.iplFranklinDefault();
ipls.iplFloydDefault();
ipls.iplTrevorDefault();
ipls.iplAmmoDefault();
ipls.iplLesterFactoryDefault();
ipls.iplStripClubDefault();
ipls.iplBankGarages();
mp.game.streaming.requestIpl('vw_casino_main');
let cIntID = mp.game.interior.getInteriorAtCoords(1100.0, 220.0, -50.0);
mp.game.interior.enableInteriorProp(cIntID, 'casino_manager_default');
mp.game.invoke(_system.system.natives.SET_INTERIOR_PROP_COLOR, cIntID, 'casino_manager_default', 1);
mp.game.interior.refreshInterior(cIntID);
mp.game.streaming.requestIpl('hei_dlc_windows_casino');
mp.game.streaming.requestIpl('hei_dlc_casino_aircon');
mp.game.streaming.requestIpl('vw_dlc_casino_door');
mp.game.streaming.requestIpl('hei_dlc_casino_door');
mp.game.streaming.requestIpl('hei_dlc_windows_casino﻿');
mp.game.streaming.requestIpl('vw_casino_penthouse');
mp.game.streaming.requestIpl('vw_casino_garage');
let phIntID = mp.game.interior.getInteriorAtCoords(976.636, 70.295, 115.164);
let phPropList = ['Set_Pent_Tint_Shell', 'Set_Pent_Pattern_01', 'Set_Pent_Spa_Bar_Open', 'Set_Pent_Media_Bar_Open', 'Set_Pent_Dealer', 'Set_Pent_Arcade_Retro', 'Set_Pent_Bar_Clutter', 'Set_Pent_Clutter_01', 'set_pent_bar_light_01', 'set_pent_bar_party_0'];
for (const propName of phPropList) {
  mp.game.interior.enableInteriorProp(phIntID, propName);
  mp.game.invoke(_system.system.natives.SET_INTERIOR_PROP_COLOR, phIntID, propName, 1);
}
mp.game.interior.refreshInterior(phIntID);
mp.game.streaming.requestIpl('imp_dt1_02_modgarage');
mp.game.streaming.requestIpl('post_hiest_unload');
mp.game.streaming.requestIpl('refit_unload');
mp.game.streaming.requestIpl('FINBANK');
mp.game.streaming.requestIpl('Coroner_Int_on');
mp.game.streaming.requestIpl('ch3_rd2_bishopschickengraffiti');
mp.game.streaming.requestIpl('cs5_04_mazebillboardgraffiti');
mp.game.streaming.requestIpl('cs5_roads_ronoilgraffiti');
mp.game.streaming.requestIpl('CS1_02_cf_onmission1');
mp.game.streaming.requestIpl('CS1_02_cf_onmission2');
mp.game.streaming.requestIpl('CS1_02_cf_onmission3');
mp.game.streaming.requestIpl('CS1_02_cf_onmission4');
mp.game.streaming.requestIpl('farm');
mp.game.streaming.requestIpl('farmint');
mp.game.streaming.requestIpl('farm_lod');
mp.game.streaming.requestIpl('farm_props');
mp.game.streaming.requestIpl('des_farmhouse');
mp.game.streaming.requestIpl('FIBlobby');
mp.game.streaming.requestIpl('dt1_05_fib2_normal');
mp.game.streaming.removeIpl('hei_bi_hw1_13_door');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_v_comedy_milo_');
mp.game.streaming.requestIpl('apa_ss1_11_interior_v_rockclub_milo_');
mp.game.streaming.requestIpl('ferris_finale_Anim');
mp.game.streaming.requestIpl('gr_case6_bunkerclosed');
mp.game.streaming.requestIpl('FruitBB');
mp.game.streaming.requestIpl('sc1_01_newbill');
mp.game.streaming.requestIpl('hw1_02_newbill');
mp.game.streaming.requestIpl('hw1_emissive_newbill');
mp.game.streaming.requestIpl('sc1_14_newbill');
mp.game.streaming.requestIpl('dt1_17_newbill');
mp.game.streaming.requestIpl('id2_14_during_door');
mp.game.streaming.requestIpl('id2_14_during1');
mp.game.streaming.requestIpl('facelobby');
mp.game.streaming.requestIpl('hei_carrier');
mp.game.streaming.requestIpl('hei_carrier_distantlights');
mp.game.streaming.requestIpl('hei_carrier_int1');
mp.game.streaming.requestIpl('hei_carrier_int1_lod');
mp.game.streaming.requestIpl('hei_carrier_int2');
mp.game.streaming.requestIpl('hei_carrier_int2_lod');
mp.game.streaming.requestIpl('hei_carrier_int3');
mp.game.streaming.requestIpl('hei_carrier_int3_lod');
mp.game.streaming.requestIpl('hei_carrier_int4');
mp.game.streaming.requestIpl('hei_carrier_int4_lod');
mp.game.streaming.requestIpl('hei_carrier_int5');
mp.game.streaming.requestIpl('hei_carrier_int5_lod');
mp.game.streaming.requestIpl('hei_carrier_int6');
mp.game.streaming.requestIpl('hei_carrier_lod');
mp.game.streaming.requestIpl('hei_carrier_lodlights');
mp.game.streaming.requestIpl('hei_carrier_slod');
mp.game.streaming.requestIpl('hei_yacht_heist');
mp.game.streaming.requestIpl('hei_yacht_heist_enginrm');
mp.game.streaming.requestIpl('hei_yacht_heist_Lounge');
mp.game.streaming.requestIpl('hei_yacht_heist_Bridge');
mp.game.streaming.requestIpl('hei_yacht_heist_Bar');
mp.game.streaming.requestIpl('hei_yacht_heist_Bedrm');
mp.game.streaming.requestIpl('hei_yacht_heist_DistantLights');
mp.game.streaming.requestIpl('hei_yacht_heist_LODLights');
mp.game.streaming.requestIpl('gr_heist_yacht2');
mp.game.streaming.requestIpl('gr_heist_yacht2_bar');
mp.game.streaming.requestIpl('gr_heist_yacht2_bedrm');
mp.game.streaming.requestIpl('gr_heist_yacht2_bridge');
mp.game.streaming.requestIpl('gr_heist_yacht2_enginrm');
mp.game.streaming.requestIpl('gr_heist_yacht2_lounge');
mp.game.streaming.requestIpl('gr_grdlc_interior_placement_interior_0_grdlc_int_01_milo_');
mp.game.streaming.requestIpl('v_tunnel_hole');
mp.game.streaming.requestIpl('Carwash_with_spinners');
mp.game.streaming.requestIpl('sp1_10_real_interior');
mp.game.streaming.requestIpl('sp1_10_real_interior_lod');
mp.game.streaming.requestIpl('ch1_02_open');
mp.game.streaming.requestIpl('bkr_bi_id1_23_door');
mp.game.streaming.requestIpl('lr_cs6_08_grave_closed');
mp.game.streaming.requestIpl('methtrailer_grp1');
mp.game.streaming.requestIpl('bkr_bi_hw1_13_int');
mp.game.streaming.requestIpl('CanyonRvrShallow');
mp.game.streaming.requestIpl('rc12b_default');
mp.game.streaming.requestIpl('bh1_47_joshhse_unburnt');
mp.game.streaming.requestIpl('bh1_47_joshhse_unburnt_lod');
mp.game.streaming.removeIpl('sunkcargoship');
mp.game.streaming.requestIpl('cargoship');
mp.game.streaming.requestIpl('ex_sm_13_office_02b');
mp.game.streaming.requestIpl('ex_dt1_02_office_02b');
mp.game.streaming.requestIpl('ex_sm_15_office_01a');
mp.game.streaming.requestIpl('ex_dt1_11_office_01b');
mp.game.streaming.requestIpl('hei_sm_16_interior_v_bahama_milo_');
mp.game.streaming.requestIpl('apa_v_mp_h_01_a');
mp.game.streaming.requestIpl('apa_v_mp_h_02_b');
mp.game.streaming.requestIpl('apa_v_mp_h_08_c');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_v_studio_lo_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_v_apart_midspaz_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_32_dlc_apart_high2_new_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_10_dlc_apart_high_new_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_28_dlc_apart_high2_new_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_27_dlc_apart_high_new_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_29_dlc_apart_high2_new_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_30_dlc_apart_high2_new_milo_');
mp.game.streaming.requestIpl('hei_hw1_blimp_interior_31_dlc_apart_high2_new_milo_');
mp.game.streaming.requestIpl('apa_ch2_05e_interior_0_v_mp_stilts_b_milo_');
mp.game.streaming.requestIpl('apa_ch2_04_interior_0_v_mp_stilts_b_milo_');
mp.game.streaming.requestIpl('apa_ch2_04_interior_1_v_mp_stilts_a_milo_');
mp.game.streaming.requestIpl('apa_ch2_09c_interior_2_v_mp_stilts_b_milo_');
mp.game.streaming.requestIpl('apa_ch2_09b_interior_1_v_mp_stilts_b_milo_');
mp.game.streaming.requestIpl('apa_ch2_09b_interior_0_v_mp_stilts_a_milo_');
mp.game.streaming.requestIpl('apa_ch2_05c_interior_1_v_mp_stilts_a_milo_');
mp.game.streaming.requestIpl('apa_ch2_12b_interior_0_v_mp_stilts_a_milo_');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_clubname_01');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_Style02');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_style02_podium');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_equipment_setup');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_equipment_upgrade');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_security_upgrade');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_dj01');
mp.game.interior.enableInteriorProp(271617, 'DJ_03_Lights_02');
mp.game.interior.enableInteriorProp(271617, 'DJ_04_Lights_01');
mp.game.interior.enableInteriorProp(271617, 'DJ_03_Lights_03');
mp.game.interior.enableInteriorProp(271617, 'DJ_04_Lights_04');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_bar_content');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_booze_01');
mp.game.interior.enableInteriorProp(271617, 'Int01_ba_dry_ice');
mp.game.interior.refreshInterior(271617);
},{"./system":"pi2J","./custom.event":"py8h"}],"Aiz7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialogInput = DialogInput;
exports.menuid = exports.currentMenu = exports.MenuClass = void 0;
var _custom = require("./custom.event");
var _gui = require("./gui");
var _controls = require("./controls");
var _menuid;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
let menuid = exports.menuid = 1;
let currentMenu = exports.currentMenu = void 0;
function filter(str) {
  if (!str) return "";
  return str.replace(/\n/gi, ' ').replace(/"/gi, "").replace(/'/gi, "");
}
function itemMenuCEF(item) {
  return {
    name: item.name,
    more: item.more,
    desc: item.desc,
    type: item.type,
    rangeselect: item.rangeselect,
    list: item.list,
    listSelected: item.listSelected,
    color: item.color,
    icon: item.icon
  };
}
let dialogHandlesIds = 1;
let dialogHandles = new Map();
function DialogInput(title, value = '', limit = 30, type = "text") {
  return new Promise((resolve, reject) => {
    _gui.gui.setGui('dialog');
    const id = parseInt(`${dialogHandlesIds++}`);
    _custom.CustomEvent.triggerCef('cef:dialog:init', id, title, '', type, "Отмена", "Отправить", value, limit);
    const res = res => {
      let rets = ["int", "float"].includes(type) ? parseInt(res) : res;
      resolve(rets);
    };
    dialogHandles.set(id, [res, reject]);
  });
}
;
_custom.CustomEvent.registerServer('server:input', (title, value = '', limit = 30, type = "text") => {
  return DialogInput(title, value, limit, type);
});
mp.events.add('client:dialog:submit', (id, value) => {
  let v = dialogHandles.get(id);
  if (!v) return;
  v[0](value);
});
let tryPaymentD = new Map();
let pids = 1;
_custom.CustomEvent.registerServer('server:payment', (name, sum) => {
  return new Promise(resolve => {
    tryPayment(name, sum).then(status => {
      setTimeout(() => {
        resolve(status);
      }, 200);
    });
  });
});
mp.events.add('server:payment:res', (id, statuss) => {
  const q = tryPaymentD.get(id);
  if (q) q[0](statuss);
  tryPaymentD.delete(id);
  (0, _controls.tempCursorStatus)(false);
});
const tryPayment = (name, sum) => {
  return new Promise((resolve, reject) => {
    pids++;
    const id = pids;
    tryPaymentD.set(id, [resolve, reject]);
    _custom.CustomEvent.triggerCef('server:payment:data', name, sum, id);
    (0, _controls.tempCursorStatus)(true);
  });
};
class MenuClass {
  constructor(title, subtitle, items) {
    this.widthMultipler = 1;
    this.exitProtect = false;
    if (currentMenu) currentMenu.close();
    this.opened = false;
    this.closedMenu = false;
    this.id = parseInt(`${_menuid = menuid++, exports.menuid = menuid, _menuid}`);
    this.title = filter(title);
    this.subtitle = filter(subtitle);
    this.items = (items ? items : []).map(item => {
      if (!item.type) item.type = "select";
      return item;
    });
    this.customParams = {};
  }
  newItem(item) {
    if (!this.items) return;
    if (!item.type) item.type = "select";
    if (item.name) item.name = filter(item.name);
    if (item.more) item.more = filter(String(item.more));
    if (item.desc) item.desc = filter(item.desc);
    if (item.list) {
      item.list.map(q => {
        q = filter(q);
      });
    }
    item.SetRightLabel = text => {
      item.more = text;
      return item;
    };
    item.SetIcon = url => {
      item.icon = url;
      return item;
    };
    this.items.push(item);
    if (this.opened) {
      _custom.CustomEvent.triggerCef('menu:addItems', itemMenuCEF(item));
    }
    return item;
  }
  async open(selected = null) {
    setTimeout(() => {
      if (!this.items) return;
      this.customParams.selected = selected ? selected : 0;
      this.items.forEach(item => {
        if (item.type == "list") {
          if (item.Index) item.listSelected = item.Index;
          if (!item.listSelected) item.listSelected = 0;
          item.listSelectedName = item.list[item.listSelected];
        }
        if (item.name) item.name = filter(item.name);
        if (item.more) item.more = filter(String(item.more));
        if (item.desc) item.desc = filter(item.desc);
        if (item.list) {
          item.list.map(q => {
            q = filter(q);
          });
        }
      });
      let data = {
        widthMultipler: this.widthMultipler,
        id: this.id,
        select: this.customParams.selected,
        title: this.title,
        subtitle: this.subtitle,
        items: [...this.items].map(q => {
          return itemMenuCEF(q);
        }),
        sprite: this.spriteName ? this.spriteName : null,
        fromserver: !!this.serverid
      };
      this.opened = true;
      exports.currentMenu = currentMenu = this;
      _custom.CustomEvent.triggerCef('menu:open', data);
    }, 100);
  }
  close(fromCef = false) {
    exports.currentMenu = currentMenu = null;
    if (!fromCef) _custom.CustomEvent.triggerCef('menu:close');
    if (fromCef && this.onclose) this.onclose();
  }
  AddMenuItem(title, subtitle) {
    return this.newItem({
      name: title,
      desc: subtitle ? subtitle : ""
    });
  }
  AddMenuItemList(title, list, subtitle) {
    return this.newItem({
      type: "list",
      list,
      name: title,
      desc: subtitle ? subtitle : ""
    });
  }
  static closeMenu(fromCef = false) {
    if (!currentMenu) return;
    currentMenu.close(fromCef);
  }
}
exports.MenuClass = MenuClass;
mp.events.add('menu:close', () => {
  MenuClass.closeMenu(true);
});
_custom.CustomEvent.registerServer('menu:server:close', () => {
  MenuClass.closeMenu();
});
mp.events.add('menu:setindex', (id, select) => {
  if (!currentMenu) return;
  if (currentMenu.id != id) return;
  let item = currentMenu.items[select];
  if (!item) return;
});
mp.events.add('menu:select', (id, select) => {
  if (!currentMenu) return;
  if (currentMenu.id != id) return;
  let item = currentMenu.items[select];
  if (!item) return;
  if (typeof item.onpress == "function") item.onpress(item, select);
});
mp.events.add("menu:colorChange", (itemid, value) => {
  if (!currentMenu) return;
  let item = currentMenu.items[itemid];
  if (!item) return;
  if (item.type !== "color") return;
  item.color = JSON.parse(value);
  if (typeof item.onchangeColor == "function") item.onchangeColor(item.color, item, itemid);
});
mp.events.add("menu:colorChangeFast", (itemid, value) => {
  if (!currentMenu) return;
  let item = currentMenu.items[itemid];
  if (!item) return;
  if (item.type !== "color") return;
  item.color = JSON.parse(value);
  if (typeof item.onchangeColorFast == "function") item.onchangeColorFast(item.color, item, itemid);
});
mp.events.add('menu:onchange', (id, select, value) => {
  if (!currentMenu) return;
  if (currentMenu.id != id) return;
  let item = currentMenu.items[select];
  if (!item) return;
  if (item.type == "list" && !item.list[value]) return;
  item.listSelected = value;
  if (item.type == "list") item.listSelectedName = item.list[value];
  if (typeof item.onchange == "function") item.onchange(item.listSelected, item, select);
});
let reopen = false;
_custom.CustomEvent.registerServer('server:menu:updateItem', (index, itemDto) => {
  const item = currentMenu.items[index];
  item.more = itemDto.more;
  item.color = itemDto.color;
  item.name = itemDto.name;
  item.type = itemDto.type;
  item.icon = itemDto.icon;
  item.desc = itemDto.desc;
  item.list = itemDto.list;
  item.listSelected = itemDto.listSelected;
  item.rangeselect = itemDto.rangeselect;
  _custom.CustomEvent.triggerCef('menu:updateItem', index, item);
});
_custom.CustomEvent.registerServer('server:menu:open', (id, title, subtitle, items, customParams, workAnyTime, sprite, widthMultipler = 1) => {
  openMenu(id, title, subtitle, items, customParams, workAnyTime, sprite, widthMultipler);
});
function openMenu(id, title, subtitle, items, customParams, workAnyTime = false, sprite, widthMultipler = 1) {
  reopen = true;
  let m = new MenuClass(title, subtitle);
  m.widthMultipler = widthMultipler;
  if (sprite) m.spriteName = sprite;
  m.serverid = id;
  items.map(item => {
    m.newItem(_objectSpread(_objectSpread({}, item), {}, {
      onpress: (_, index) => {
        mp.events.callRemote('client:menu:itemSelect', id, index);
      },
      onchange: (val, _, index) => {
        mp.events.callRemote('client:menu:listChange', id, index, val);
      },
      onchangeColor: (val, _, index) => {
        const s = JSON.stringify(val);
        mp.events.callRemote('client:menu:colorChange', id, index, s);
      }
    }));
  });
  if (items.length === 0) {
    m.newItem({
      name: 'Пусто'
    });
  }
  m.onclose = () => {
    if (reopen) return;
    if (!customParams.closeEvent) return;
    mp.events.callRemote('client:menu:closeEvent', id);
  };
  m.workAnyTime = workAnyTime;
  m.open(customParams.selected);
  reopen = false;
}
},{"./custom.event":"py8h","./gui":"bk91","./controls":"yuOK"}],"ghdA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Raycast = void 0;
var _system = require("../../shared/system");
class Raycast {
  static get() {
    let objectRes = mp.game.graphics.getScreenActiveResolution(1, 1);
    return this.getByScreenCoord(objectRes.x / 2, objectRes.y / 2);
  }
  static getByScreenCoord(x, y) {
    return entityAt2dPosition(x, y);
  }
  static getByWorldCoord(pos3d) {
    let pos = mp.game.graphics.world3dToScreen2d(pos3d.x, pos3d.y, pos3d.z);
    if (!pos) return null;
    return this.getByScreenCoord(pos.x, pos.y);
  }
  static getByCursor() {
    return this.getByScreenCoord(mp.gui.cursor.position[0], mp.gui.cursor.position[1]);
  }
  static getFront(maxDistance = 2.0) {
    return mp.raycasting.testCapsule(mp.players.local.getOffsetFromInWorldCoords(0.0, 1.0, 0.0), mp.players.local.getOffsetFromInWorldCoords(0.0, maxDistance, 0.0), 0.2, player.handle, [2, 4, 8, 16]);
  }
  static getEntityLookAt(maxDistance = 5) {
    const {
      x: screenX,
      y: screenY
    } = mp.game.graphics.getScreenActiveResolution(0, 0);
    const raycastResult = entityAt2dPositionFromHead(screenX / 2, screenY / 2);
    if (!raycastResult) {
      return null;
    }
    if (!raycastResult.entity) {
      return null;
    }
    if (_system.systemUtil.distanceToPos(raycastResult.position, mp.players.local.position) > maxDistance) {
      return null;
    }
    return raycastResult.entity;
  }
  static getPositionLookAt() {
    const {
      x: screenX,
      y: screenY
    } = mp.game.graphics.getScreenActiveResolution(0, 0);
    const {
      x: rX,
      y: rY
    } = processCoordinates(screenX / 2, screenY / 2);
    const camPos = cameras.getCoord();
    return s2w(camPos, rX, rY);
  }
}
exports.Raycast = Raycast;
let cef = null;
let camera = null;
const player = mp.players.local;
const cameras = mp.cameras.new("gameplay");
function entityAt2dPosition(absoluteX, absoluteY) {
  const camPos = cameras.getCoord();
  const {
    x: rX,
    y: rY
  } = processCoordinates(absoluteX, absoluteY);
  const target = s2w(camPos, rX, rY);
  const dir = sub(target, camPos);
  const from = add(camPos, mulNumber(dir, 0.0));
  const to = add(camPos, mulNumber(dir, 300));
  const ray = mp.raycasting.testCapsule(from, to, 0.1, player, [2, 4, 8, 16]);
  return ray === undefined ? undefined : ray;
}
function entityAt2dPositionFromHead(absoluteX, absoluteY) {
  const {
    x: rX,
    y: rY
  } = processCoordinates(absoluteX, absoluteY);
  const headPosition = player.getBoneCoords(31086, 0, 0, 0);
  const target = s2w(headPosition, rX, rY);
  const dir = sub(target, headPosition);
  const from = add(headPosition, mulNumber(dir, 0.0));
  const to = add(headPosition, mulNumber(dir, 300));
  const ray = mp.raycasting.testPointToPoint(from, to, player, [2, 4, 8, 12, 16]);
  return ray === undefined ? undefined : ray;
}
function screen2dToWorld3d(absoluteX, absoluteY) {
  const camPos = cameras.getCoord();
  const {
    x: rX,
    y: rY
  } = processCoordinates(absoluteX, absoluteY);
  const target = s2w(camPos, rX, rY);
  const dir = sub(target, camPos);
  const from = add(camPos, mulNumber(dir, 0.0));
  const to = add(camPos, mulNumber(dir, 300));
  const ray = mp.raycasting.testPointToPoint(from, to, [player.handle], [2, 4, 8, 16]);
  return ray === undefined ? undefined : ray.position;
}
function s2w(camPos, relX, relY) {
  const camRot = cameras.getRot(0);
  const camForward = rotationToDirection(camRot);
  const rotUp = add(camRot, new mp.Vector3(10, 0, 0));
  const rotDown = add(camRot, new mp.Vector3(-10, 0, 0));
  const rotLeft = add(camRot, new mp.Vector3(0, 0, -10));
  const rotRight = add(camRot, new mp.Vector3(0, 0, 10));
  const camRight = sub(rotationToDirection(rotRight), rotationToDirection(rotLeft));
  const camUp = sub(rotationToDirection(rotUp), rotationToDirection(rotDown));
  const rollRad = -degToRad(camRot.y);
  const camRightRoll = sub(mulNumber(camRight, Math.cos(rollRad)), mulNumber(camUp, Math.sin(rollRad)));
  const camUpRoll = add(mulNumber(camRight, Math.sin(rollRad)), mulNumber(camUp, Math.cos(rollRad)));
  const point3D = add(add(add(camPos, mulNumber(camForward, 10.0)), camRightRoll), camUpRoll);
  const point2D = w2s(point3D);
  if (point2D === undefined) {
    return add(camPos, mulNumber(camForward, 10.0));
  }
  const point3DZero = add(camPos, mulNumber(camForward, 10.0));
  const point2DZero = w2s(point3DZero);
  if (point2DZero === undefined) {
    return add(camPos, mulNumber(camForward, 10.0));
  }
  const eps = 0.001;
  if (Math.abs(point2D.x - point2DZero.x) < eps || Math.abs(point2D.y - point2DZero.y) < eps) {
    return add(camPos, mulNumber(camForward, 10.0));
  }
  const scaleX = (relX - point2DZero.x) / (point2D.x - point2DZero.x);
  const scaleY = (relY - point2DZero.y) / (point2D.y - point2DZero.y);
  const point3Dret = add(add(add(camPos, mulNumber(camForward, 10.0)), mulNumber(camRightRoll, scaleX)), mulNumber(camUpRoll, scaleY));
  return point3Dret;
}
function processCoordinates(x, y) {
  const {
    x: screenX,
    y: screenY
  } = mp.game.graphics.getScreenActiveResolution(0, 0);
  let relativeX = 1 - x / screenX * 1.0 * 2;
  let relativeY = 1 - y / screenY * 1.0 * 2;
  if (relativeX > 0.0) {
    relativeX = -relativeX;
  } else {
    relativeX = Math.abs(relativeX);
  }
  if (relativeY > 0.0) {
    relativeY = -relativeY;
  } else {
    relativeY = Math.abs(relativeY);
  }
  return {
    x: relativeX,
    y: relativeY
  };
}
function w2s(position) {
  const result = mp.game.graphics.world3dToScreen2d(position.x, position.y, position.z);
  if (result === undefined) {
    return undefined;
  }
  return new mp.Vector3((result.x - 0.5) * 2, (result.y - 0.5) * 2, 0);
}
function rotationToDirection(rotation) {
  const z = degToRad(rotation.z);
  const x = degToRad(rotation.x);
  const num = Math.abs(Math.cos(x));
  return new mp.Vector3(-Math.sin(z) * num, Math.cos(z) * num, Math.sin(x));
}
function degToRad(deg) {
  return deg * Math.PI / 180.0;
}
function add(vector1, vector2) {
  return new mp.Vector3(vector1.x + vector2.x, vector1.y + vector2.y, vector1.z + vector2.z);
}
function sub(vector1, vector2) {
  return new mp.Vector3(vector1.x - vector2.x, vector1.y - vector2.y, vector1.z - vector2.z);
}
function mulNumber(vector1, value) {
  return new mp.Vector3(vector1.x * value, vector1.y * value, vector1.z * value);
}
},{"../../shared/system":"SNxO"}],"yuOK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tempCursorStatus = exports.registerHotkey = exports.raycastTarget = exports.onclickEntityWorld = exports.onclickEntity = exports.mouseMove = exports.enableControlGroup = exports.disableControlGroup = exports.disableAllControlSystemStatus = exports.disableAllControlSystem = exports.cursorY = exports.cursorX = void 0;
var _gui = require("./gui");
var _custom = require("./custom.event");
var _menu = require("./menu");
var _raycast = require("./raycast");
var _system = require("./system");
mp.events.add('render', () => {
  mp.game.controls.disableControlAction(0, 81, true);
  mp.game.controls.disableControlAction(0, 82, true);
  mp.game.controls.disableControlAction(0, 83, true);
  mp.game.controls.disableControlAction(0, 84, true);
  mp.game.controls.disableControlAction(2, 81, true);
  mp.game.controls.disableControlAction(2, 82, true);
  mp.game.controls.disableControlAction(2, 83, true);
  mp.game.controls.disableControlAction(2, 84, true);
  if (_gui.gui.chat.active) mp.game.controls.disableAllControlActions(0);
  for (let id = 12; id < 18; id++) mp.game.controls.disableControlAction(0, id, true);
  mp.game.controls.disableControlAction(0, 37, true);
  mp.game.controls.disableControlAction(0, 53, true);
  mp.game.controls.disableControlAction(0, 54, true);
  mp.game.controls.disableControlAction(0, 56, true);
  mp.game.controls.disableControlAction(0, 99, true);
  mp.game.controls.disableControlAction(0, 100, true);
  mp.game.controls.disableControlAction(0, 115, true);
  mp.game.controls.disableControlAction(0, 116, true);
  mp.game.player.setLockon(false);
  mp.game.invoke(_system.system.natives.SET_PLAYER_LOCKON, mp.players.local, false);
  for (let id = 157; id < 166; id++) mp.game.controls.disableControlAction(0, id, true);
  mp.game.controls.disableControlAction(0, 261, true);
  mp.game.controls.disableControlAction(0, 262, true);
  if (mp.players.local.isSprinting()) mp.game.player.restoreStamina(100);
  moveX = mp.gui.cursor.position[0] - oldX;
  moveY = mp.gui.cursor.position[1] - oldY;
  oldX = mp.gui.cursor.position[0];
  oldY = mp.gui.cursor.position[1];
  exports.cursorX = cursorX = oldX / objectRes.x;
  exports.cursorY = cursorY = oldY / objectRes.y;
});
let objectRes = mp.game.graphics.getScreenActiveResolution(1, 1);
setInterval(() => {
  objectRes = mp.game.graphics.getScreenActiveResolution(1, 1);
}, 5000);
let leftKeyPressed = false;
let rightKeyPressed = false;
let oldX = mp.gui.cursor.position[0];
let oldY = mp.gui.cursor.position[1];
let moveX = mp.gui.cursor.position[0];
let moveY = mp.gui.cursor.position[1];
let cursorX = exports.cursorX = 0;
let cursorY = exports.cursorY = 0;
let entityOnClickSpam = false;
let raycastTarget = exports.raycastTarget = void 0;
setInterval(() => {
  if (!mp.gui.cursor.visible) return exports.raycastTarget = raycastTarget = null;
  if (!!_gui.gui.currentGui) return exports.raycastTarget = raycastTarget = null;
  if (_menu.currentMenu) return exports.raycastTarget = raycastTarget = null;
  if (_gui.phoneOpened) return exports.raycastTarget = raycastTarget = null;
  if (_gui.terminalOpened) return exports.raycastTarget = raycastTarget = null;
  exports.raycastTarget = raycastTarget = _raycast.Raycast.getByCursor();
}, 120);
mp.events.add('click', (x, y, upOrDown, leftOrRight, relativeX, relativeY, worldPosition, hitEntity) => {
  if (leftOrRight === "left") {
    leftKeyPressed = upOrDown === "down";
  } else {
    rightKeyPressed = upOrDown === "down";
  }
  if (leftKeyPressed) {
    if (!raycastTarget) return;
    if (!raycastTarget.entity) return;
    if (typeof raycastTarget.entity === "number") {
      if (raycastTarget.entity === mp.players.local.handle) return;
    } else {
      if (raycastTarget.entity.handle === mp.players.local.handle) return;
    }
    if (_system.system.distanceToPos(mp.players.local.position, raycastTarget.position) > 3) return;
    if (entityOnClickSpam) return;
    entityOnClickSpam = true;
    setTimeout(() => {
      entityOnClickSpam = false;
    }, 500);
    if (typeof raycastTarget.entity === "number") {
      onclickEntityWorldHandles.map(q => {
        q(raycastTarget.entity);
      });
    } else {
      onclickEntityHandles.map(q => {
        q(raycastTarget.entity);
      });
    }
  }
});
let onclickEntityHandles = [];
const onclickEntity = handle => {
  onclickEntityHandles.push(handle);
};
exports.onclickEntity = onclickEntity;
let onclickEntityWorldHandles = [];
const onclickEntityWorld = handle => {
  onclickEntityWorldHandles.push(handle);
};
exports.onclickEntityWorld = onclickEntityWorld;
let dir = 0;
const mouseMove = (cb, interval = 100) => {
  let int;
  int = setInterval(() => {
    if (!leftKeyPressed && !rightKeyPressed) return;
    cb(moveX, moveY, leftKeyPressed, rightKeyPressed, cursorX, cursorY);
  }, interval);
  return {
    destroy: () => clearInterval(int)
  };
};
exports.mouseMove = mouseMove;
const registerHotkey = (key, callbackPress, callbackUnPress) => {
  const callpress = () => {
    if (!!_gui.gui.chat.active) return;
    return callbackPress(callpress);
  };
  const callunpress = () => {
    if (!!_gui.gui.chat.active) return;
    return callbackUnPress(callpress);
  };
  mp.keys.bind(key, true, callpress);
  if (callbackUnPress) mp.keys.bind(key, false, callunpress);
  return {
    destroy: () => {
      mp.keys.unbind(key, true, callpress);
      if (callbackUnPress) mp.keys.unbind(key, true, callunpress);
    }
  };
};
exports.registerHotkey = registerHotkey;
const enableControlGroup = exports.enableControlGroup = {
  move: () => {
    mp.game.controls.enableControlAction(0, 32, true);
    mp.game.controls.enableControlAction(0, 33, true);
    mp.game.controls.enableControlAction(0, 34, true);
    mp.game.controls.enableControlAction(0, 35, true);
    mp.game.controls.enableControlAction(0, 268, true);
    mp.game.controls.enableControlAction(0, 269, true);
    mp.game.controls.enableControlAction(0, 270, true);
    mp.game.controls.enableControlAction(0, 271, true);
  }
};
const disableControlGroup = exports.disableControlGroup = {
  saveZone: () => {
    mp.game.controls.disableControlAction(0, 24, true);
    mp.game.controls.disableControlAction(0, 58, true);
    mp.game.controls.disableControlAction(0, 69, true);
    mp.game.controls.disableControlAction(0, 70, true);
    mp.game.controls.disableControlAction(0, 91, true);
    mp.game.controls.disableControlAction(0, 92, true);
    mp.game.controls.disableControlAction(0, 140, true);
    mp.game.controls.disableControlAction(0, 141, true);
    mp.game.controls.disableControlAction(0, 142, true);
    mp.game.controls.disableControlAction(0, 143, true);
    mp.game.controls.disableControlAction(0, 257, true);
    mp.game.controls.disableControlAction(0, 263, true);
    mp.game.controls.disableControlAction(0, 264, true);
  },
  baseKeyDisable: () => {
    mp.game.controls.disableControlAction(0, 44, true);
    mp.game.controls.disableControlAction(0, 21, true);
    mp.game.controls.disableControlAction(0, 22, true);
    mp.game.controls.disableControlAction(0, 23, true);
    mp.game.controls.disableControlAction(0, 24, true);
    mp.game.controls.disableControlAction(0, 25, true);
    mp.game.controls.disableControlAction(0, 32, true);
    mp.game.controls.disableControlAction(0, 33, true);
    mp.game.controls.disableControlAction(0, 34, true);
    mp.game.controls.disableControlAction(0, 35, true);
    mp.game.controls.disableControlAction(0, 37, true);
    mp.game.controls.disableControlAction(0, 58, true);
    mp.game.controls.disableControlAction(0, 75, true);
    mp.game.controls.disableControlAction(0, 91, true);
    mp.game.controls.disableControlAction(0, 92, true);
    mp.game.controls.disableControlAction(0, 140, true);
    mp.game.controls.disableControlAction(0, 141, true);
    mp.game.controls.disableControlAction(0, 142, true);
    mp.game.controls.disableControlAction(0, 143, true);
    mp.game.controls.disableControlAction(0, 257, true);
    mp.game.controls.disableControlAction(0, 263, true);
    mp.game.controls.disableControlAction(0, 264, true);
    mp.game.controls.disableControlAction(0, 268, true);
    mp.game.controls.disableControlAction(0, 269, true);
    mp.game.controls.disableControlAction(0, 270, true);
    mp.game.controls.disableControlAction(0, 271, true);
    mp.game.controls.disableControlAction(27, 23, true);
    mp.game.controls.disableControlAction(27, 75, true);
    mp.game.controls.disableControlAction(27, 91, true);
    mp.game.controls.disableControlAction(27, 92, true);
  },
  moveGui: () => {
    mp.game.controls.disableControlAction(0, 1, true);
    mp.game.controls.disableControlAction(0, 2, true);
    mp.game.controls.disableControlAction(0, 3, true);
    mp.game.controls.disableControlAction(0, 4, true);
    mp.game.controls.disableControlAction(0, 5, true);
    mp.game.controls.disableControlAction(0, 6, true);
    mp.game.controls.disableControlAction(0, 199, true);
    mp.game.controls.disableControlAction(0, 329, true);
    mp.game.controls.disableControlAction(0, 330, true);
    mp.game.controls.disableControlAction(1, 329, true);
    mp.game.controls.disableControlAction(1, 330, true);
    mp.game.controls.disableControlAction(0, 106, true);
    disableControlGroup.baseKeyDisable();
  },
  allControls: () => {
    mp.game.controls.disableAllControlActions(0);
    mp.game.controls.disableAllControlActions(2);
    mp.game.controls.enableControlAction(2, 172, true);
    mp.game.controls.enableControlAction(2, 173, true);
    mp.game.controls.enableControlAction(2, 174, true);
    mp.game.controls.enableControlAction(2, 175, true);
    mp.game.controls.enableControlAction(2, 201, true);
    mp.game.controls.enableControlAction(2, 177, true);
  },
  cameraChanging: () => {
    mp.game.controls.disableControlAction(0, 0, true);
    mp.game.controls.disableControlAction(1, 0, true);
    mp.game.controls.disableControlAction(2, 0, true);
  },
  handcuff: () => {
    disableControlGroup.baseKeyDisable();
    mp.game.controls.disableControlAction(0, 71, true);
    mp.game.controls.disableControlAction(0, 72, true);
  }
};
let disableAllControlSystem = exports.disableAllControlSystem = false;
const disableAllControlSystemStatus = status => {
  exports.disableAllControlSystem = disableAllControlSystem = status;
};
exports.disableAllControlSystemStatus = disableAllControlSystemStatus;
mp.events.add("render", () => {
  if (disableAllControlSystem) disableControlGroup.allControls();
});
_custom.CustomEvent.registerServer('disableAllControls', status => {
  exports.disableAllControlSystem = disableAllControlSystem = status;
});
let cursorEvent = false;
setInterval(() => {
  if (_gui.unitpayBrowser) return mp.gui.cursor.show(true, true);
  if (!cursorEvent) return;
  if (mp.gui.cursor.visible) return;
  mp.gui.cursor.show(false, cursorEvent);
}, 200);
const tempCursorStatus = (enable = true) => {
  if (mp.game.ui.isPauseMenuActive()) return;
  if (!cursorEvent && enable) mp.game.invoke("0xFC695459D4D0E219", 0.5, 0.5);
  cursorEvent = enable;
  mp.gui.cursor.show(false, cursorEvent);
};
exports.tempCursorStatus = tempCursorStatus;
_custom.CustomEvent.register('cursor', () => {
  tempCursorStatus(!cursorEvent);
});
mp.events.add('enableCursor', () => {
  tempCursorStatus(true);
});
mp.events.add('disableCursor', () => {
  tempCursorStatus(false);
});
},{"./gui":"bk91","./custom.event":"py8h","./menu":"Aiz7","./raycast":"ghdA","./system":"pi2J"}],"c0dc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.licenseShootTimer = exports.UdoData = exports.REMOVE_LICENSE_RANK = exports.LicensesData = exports.LicenseName = exports.LICENCE_CENTER_LIST = exports.BUSINESS_BUY_NEED_LICENSE = void 0;
const UdoData = exports.UdoData = [{
  id: 4,
  pic: "army-logo",
  class: "army"
}, {
  id: 5,
  pic: "news-logo",
  class: "lifenews"
}, {
  id: 16,
  pic: "ems-logo",
  class: "ems"
}, {
  id: 1,
  pic: "goverment-logo",
  class: "depart"
}, {
  id: 7,
  pic: "sheriff-logo",
  class: "sheriff"
}, {
  id: 2,
  pic: "police-logo",
  class: "lspd"
}, {
  id: 3,
  pic: "fib-logo",
  class: "fib"
}];
const BUSINESS_BUY_NEED_LICENSE = exports.BUSINESS_BUY_NEED_LICENSE = false;
const REMOVE_LICENSE_RANK = exports.REMOVE_LICENSE_RANK = 7;
const LicenseName = exports.LicenseName = {
  car: "Авто транспорт",
  moto: "Мото транспорт",
  air: "Воздушный транспорт",
  boat: "Водный транспорт",
  truck: "Грузовой транспорт",
  weapon: "Ношение/Хранение оружия",
  fishrod: "Ловля рыбы",
  fishsell: "Продажа рыбы",
  biz: "Владение бизнесом",
  med: "Медицинская страховка",
  advokat: "Адвоката",
  military: "Военный билет",
  hunting: "Разрешение на охоту",
  reanimation: "Курсы оказания первой мед помощи"
};
const LicensesData = exports.LicensesData = [{
  id: "car",
  name: "Автомобильный Транспорт",
  ex: "B",
  pic: 'lic_1',
  gradient: '99,70,255',
  shadow: ['19, 18, 52, 0.75', '2, 0, 44, 0.51']
}, {
  id: "moto",
  name: "Мото Транспорт",
  ex: "A",
  pic: 'lic_1',
  gradient: '99,70,255',
  shadow: ['19, 18, 52, 0.75', '2, 0, 44, 0.51']
}, {
  id: "truck",
  name: "Грузовой Транспорт",
  ex: "C",
  pic: 'lic_3',
  gradient: '255,70,70',
  shadow: ['52, 18, 18, 0.75', '44, 0, 0, 0.51']
}, {
  id: "boat",
  name: "Водный Транспорт",
  ex: "W",
  pic: 'lic_2',
  gradient: '70,157,255',
  shadow: ['18, 37, 52, 0.75', '0, 25, 44, 0.51']
}, {
  id: "air",
  name: "Воздушный Транспорт",
  ex: "F",
  pic: 'lic_3',
  gradient: '255,70,70',
  shadow: ['52, 18, 18, 0.75', '44, 0, 0, 0.51']
}, {
  id: "weapon",
  name: "Оружие",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "fishrod",
  name: "Ловля рыбы",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "fishsell",
  name: "Продажа рыбы",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "biz",
  name: "Владение бизнесом",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "med",
  name: "Медицинская страховка",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "advokat",
  name: "Адвокатская лицензия",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "military",
  name: "Военный билет",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "hunting",
  name: "Разрешение на охоту",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}, {
  id: "reanimation",
  name: "Курсы оказания первой мед помощи",
  pic: 'lic_4',
  gradient: '148,255,70',
  shadow: ['37, 52, 18, 0.75', '16, 44, 0, 0.51']
}];
const licenseShootTimer = exports.licenseShootTimer = 15;
const LICENCE_CENTER_LIST = exports.LICENCE_CENTER_LIST = [{
  auto: true,
  point: {
    x: -700.80,
    y: -1310.46,
    z: 4.11
  },
  start: {
    x: -757.19,
    y: -1292.35,
    z: 5.00,
    h: 297
  },
  points: [{
    x: -749.35,
    y: -1288.26,
    z: 4.58,
    h: 302.64
  }, {
    x: -685.75,
    y: -1253.73,
    z: 10.08,
    h: 212.77
  }, {
    x: -656.79,
    y: -1326.06,
    z: 10.04,
    h: 194.47
  }, {
    x: -662.91,
    y: -1493.65,
    z: 10.23,
    h: 173.14
  }, {
    x: -744.84,
    y: -1614.11,
    z: 23.97,
    h: 136.86
  }, {
    x: -768.57,
    y: -1732.20,
    z: 28.74,
    h: 184.89
  }, {
    x: -723.85,
    y: -1874.55,
    z: 26.77,
    h: 211.02
  }, {
    x: -121.97,
    y: -2090.04,
    z: 25.00,
    h: 288.79
  }, {
    x: 166.97,
    y: -2016.37,
    z: 17.66,
    h: 337.73
  }, {
    x: 187.17,
    y: -1898.22,
    z: 23.14,
    h: 64.40
  }, {
    x: 113.22,
    y: -1845.48,
    z: 24.97,
    h: 318.92
  }, {
    x: 154.04,
    y: -1796.07,
    z: 28.37,
    h: 320.28
  }, {
    x: 151.24,
    y: -1744.63,
    z: 28.63,
    h: 52.21
  }, {
    x: 19.21,
    y: -1684.41,
    z: 28.82,
    h: 110.56
  }, {
    x: -85.97,
    y: -1722.75,
    z: 28.76,
    h: 110.75
  }, {
    x: -193.75,
    y: -1785.60,
    z: 29.34,
    h: 120.50
  }, {
    x: -278.63,
    y: -1826.10,
    z: 26.72,
    h: 98.38
  }, {
    x: -419.01,
    y: -1844.84,
    z: 19.64,
    h: 120.04
  }, {
    x: -536.05,
    y: -1936.06,
    z: 16.82,
    h: 132.51
  }, {
    x: -733.78,
    y: -2144.33,
    z: 13.05,
    h: 138.20
  }, {
    x: -835.64,
    y: -2234.49,
    z: 17.01,
    h: 131.35
  }, {
    x: -1079.21,
    y: -2598.71,
    z: 19.63,
    h: 150.81
  }, {
    x: -873.34,
    y: -2656.26,
    z: 18.58,
    h: 330.36
  }, {
    x: -760.83,
    y: -2454.80,
    z: 13.83,
    h: 330.98
  }, {
    x: -751.43,
    y: -2356.88,
    z: 14.38,
    h: 44.60
  }, {
    x: -1055.88,
    y: -2053.76,
    z: 12.69,
    h: 42.63
  }, {
    x: -1049.70,
    y: -1912.89,
    z: 12.55,
    h: 312.24
  }, {
    x: -891.62,
    y: -1754.20,
    z: 18.43,
    h: 317.79
  }, {
    x: -775.24,
    y: -1621.51,
    z: 14.20,
    h: 316.57
  }, {
    x: -690.22,
    y: -1484.54,
    z: 10.50,
    h: 318.98
  }, {
    x: -646.95,
    y: -1423.44,
    z: 10.15,
    h: 355.91
  }, {
    x: -637.81,
    y: -1331.90,
    z: 10.14,
    h: 345.21
  }, {
    x: -639.60,
    y: -1276.33,
    z: 10.09,
    h: 42.22
  }, {
    x: -698.96,
    y: -1205.36,
    z: 10.15,
    h: 39.17
  }, {
    x: -754.96,
    y: -1132.59,
    z: 10.15,
    h: 27.46
  }, {
    x: -764.93,
    y: -1137.34,
    z: 10.15,
    h: 212.17
  }, {
    x: -721.17,
    y: -1203.64,
    z: 10.08,
    h: 220.85
  }, {
    x: -716.42,
    y: -1247.66,
    z: 9.02,
    h: 135.54
  }, {
    x: -743.76,
    y: -1310.89,
    z: 4.49,
    h: 228.74
  }],
  license: [{
    id: "car",
    cost: 2000,
    restore: 750,
    time: 30,
    models: ["asea"],
    needTheory: true
  }, {
    id: "moto",
    cost: 1000,
    restore: 500,
    time: 30,
    models: ["bati"],
    needTheory: true
  }, {
    id: "truck",
    cost: 5000,
    restore: 2500,
    time: 30,
    models: ["benson"],
    needTheory: true
  }],
  icon: 77,
  name: "Лицензии для Мото и транспорта"
}, {
  auto: true,
  point: {
    x: -777.67,
    y: -1324.20,
    z: 4.15
  },
  start: {
    x: -736.07,
    y: -1341.59,
    z: 1.00,
    h: 104
  },
  points: [{
    x: -843.48,
    y: -1525.57,
    z: 0.14,
    h: 149.43
  }, {
    x: -910.32,
    y: -1590.67,
    z: 0.28,
    h: 142.54
  }, {
    x: -945.25,
    y: -1655.67,
    z: 0.42,
    h: 148.66
  }, {
    x: -1069.05,
    y: -1738.77,
    z: 0.70,
    h: 133.95
  }, {
    x: -1138.70,
    y: -1840.83,
    z: 0.58,
    h: 133.80
  }, {
    x: -1273.70,
    y: -1934.28,
    z: 0.48,
    h: 131.02
  }, {
    x: -1347.04,
    y: -1981.59,
    z: 0.39,
    h: 84.10
  }, {
    x: -1331.44,
    y: -1941.09,
    z: 0.87,
    h: 317.14
  }, {
    x: -1297.82,
    y: -1828.76,
    z: 0.30,
    h: 26.98
  }, {
    x: -1488.59,
    y: -1530.33,
    z: 1.17,
    h: 33.75
  }, {
    x: -1579.48,
    y: -1374.20,
    z: 0.54,
    h: 21.79
  }, {
    x: -1642.26,
    y: -1334.37,
    z: 0.12,
    h: 88.20
  }, {
    x: -1787.58,
    y: -1242.00,
    z: 1.77,
    h: 145.74
  }, {
    x: -1860.76,
    y: -1251.47,
    z: 0.83,
    h: 38.11
  }, {
    x: -1872.78,
    y: -1190.86,
    z: 0.06,
    h: 302.63
  }, {
    x: -1819.45,
    y: -1144.71,
    z: 0.10,
    h: 285.08
  }, {
    x: -1909.39,
    y: -1014.61,
    z: 0.22,
    h: 83.51
  }, {
    x: -1963.31,
    y: -1010.81,
    z: 0.72,
    h: 84.96
  }, {
    x: -2056.30,
    y: -997.48,
    z: 0.73,
    h: 83.14
  }, {
    x: -2145.07,
    y: -1018.13,
    z: 1.06,
    h: 220.34
  }, {
    x: -2048.47,
    y: -1083.65,
    z: 0.49,
    h: 240.57
  }, {
    x: -1905.31,
    y: -1217.47,
    z: 1.47,
    h: 233.70
  }, {
    x: -1791.91,
    y: -1315.75,
    z: 0.41,
    h: 225.87
  }, {
    x: -1610.32,
    y: -1529.86,
    z: 0.75,
    h: 212.25
  }, {
    x: -1407.27,
    y: -1766.21,
    z: 0.70,
    h: 227.90
  }, {
    x: -1383.44,
    y: -1882.41,
    z: 0.49,
    h: 160.41
  }, {
    x: -1292.32,
    y: -1940.30,
    z: 1.56,
    h: 271.45
  }, {
    x: -1079.47,
    y: -1824.29,
    z: 0.45,
    h: 300.76
  }, {
    x: -857.60,
    y: -1646.74,
    z: 0.24,
    h: 315.96
  }, {
    x: -658.09,
    y: -1519.93,
    z: 0.37,
    h: 282.79
  }, {
    x: -404.38,
    y: -1624.21,
    z: 0.58,
    h: 223.41
  }, {
    x: 5.12,
    y: -1981.17,
    z: 0.23,
    h: 231.17
  }, {
    x: 59.98,
    y: -2203.30,
    z: 0.58,
    h: 182.37
  }, {
    x: 74.32,
    y: -2271.56,
    z: 0.44,
    h: 230.08
  }, {
    x: 91.84,
    y: -2302.09,
    z: 0.13,
    h: 153.30
  }, {
    x: 31.35,
    y: -2299.58,
    z: 0.26,
    h: 5.39
  }, {
    x: 49.35,
    y: -2245.15,
    z: 1.00,
    h: 336.53
  }, {
    x: 64.15,
    y: -2084.87,
    z: 0.37,
    h: 1.13
  }, {
    x: -32.22,
    y: -1947.64,
    z: 0.26,
    h: 50.18
  }, {
    x: -262.20,
    y: -1779.08,
    z: 0.32,
    h: 56.82
  }, {
    x: -353.44,
    y: -1691.70,
    z: 0.63,
    h: 37.14
  }, {
    x: -515.24,
    y: -1550.93,
    z: 0.28,
    h: 60.28
  }, {
    x: -705.63,
    y: -1539.81,
    z: 0.24,
    h: 111.89
  }, {
    x: -833.33,
    y: -1623.69,
    z: 0.14,
    h: 134.74
  }, {
    x: -969.66,
    y: -1752.97,
    z: 0.41,
    h: 130.94
  }, {
    x: -1036.03,
    y: -1785.01,
    z: 0.15,
    h: 31.14
  }, {
    x: -1038.74,
    y: -1758.11,
    z: 0.45,
    h: 321.38
  }, {
    x: -994.38,
    y: -1705.56,
    z: 0.56,
    h: 317.38
  }, {
    x: -861.70,
    y: -1591.47,
    z: 0.31,
    h: 311.67
  }, {
    x: -789.28,
    y: -1494.11,
    z: 0.12,
    h: 291.66
  }],
  license: [{
    id: "boat",
    cost: 4000,
    restore: 2000,
    time: 30,
    models: ["dinghy3"]
  }],
  icon: 77,
  name: "Лицензионный центр водного транспорта"
}, {
  auto: true,
  point: {
    x: 441.26,
    y: -974.85,
    z: 29.69
  },
  start: {
    x: 13.06,
    y: -1097.99,
    z: 29.80,
    h: 337
  },
  points: [{
    x: 21.28,
    y: -1091.07,
    z: 28.80,
    h: 162
  }, {
    x: 19.82,
    y: -1090.48,
    z: 28.80,
    h: 162
  }, {
    x: 17.04,
    y: -1089.37,
    z: 28.80,
    h: 162
  }, {
    x: 14.08,
    y: -1088.28,
    z: 28.80,
    h: 162
  }, {
    x: 11.45,
    y: -1087.35,
    z: 28.80,
    h: 162
  }, {
    x: 15.17,
    y: -1079.06,
    z: 28.80,
    h: 162
  }, {
    x: 17.67,
    y: -1080.18,
    z: 28.80,
    h: 162
  }, {
    x: 20.43,
    y: -1081.05,
    z: 28.80,
    h: 162
  }, {
    x: 23.86,
    y: -1082.21,
    z: 28.80,
    h: 162
  }, {
    x: 25.67,
    y: -1077.93,
    z: 28.80,
    h: 162
  }, {
    x: 22.82,
    y: -1076.91,
    z: 28.80,
    h: 162
  }, {
    x: 19.84,
    y: -1075.88,
    z: 28.80,
    h: 162
  }, {
    x: 16.97,
    y: -1071.90,
    z: 28.80,
    h: 162
  }, {
    x: 19.59,
    y: -1072.49,
    z: 28.80,
    h: 162
  }, {
    x: 22.39,
    y: -1073.44,
    z: 28.80,
    h: 162
  }, {
    x: 26.34,
    y: -1074.85,
    z: 28.80,
    h: 162
  }],
  license: [{
    id: "weapon",
    cost: 10000,
    restore: 5000,
    time: 30,
    guns: [501, 502, 503, 504, 505],
    need_document: 'weapon_theory',
    need_document_remove: true
  }],
  name: "Оружейный Лицензионный центр"
}, {
  auto: true,
  point: {
    x: -1153.86,
    y: -2715.24,
    z: 18.89
  },
  start: {
    x: -1146.08,
    y: -2864.58,
    z: 13.95,
    h: 150
  },
  points: [{
    x: -1173.29,
    y: -2912.94,
    z: 37.12,
    h: 155
  }, {
    x: -1260.54,
    y: -2994.99,
    z: 69.24,
    h: 155
  }, {
    x: -1476.59,
    y: -2932.49,
    z: 121.95,
    h: 155
  }, {
    x: -1511.75,
    y: -2696.19,
    z: 131.35,
    h: 155
  }, {
    x: -1402.59,
    y: -2510.42,
    z: 119.04,
    h: 155
  }, {
    x: -1135.09,
    y: -2353.97,
    z: 95.86,
    h: 155
  }, {
    x: -776.76,
    y: -2443.27,
    z: 100.89,
    h: 155
  }, {
    x: -828.45,
    y: -2888.04,
    z: 92.53,
    h: 155
  }, {
    x: -808.14,
    y: -3389.43,
    z: 143.29,
    h: 155
  }, {
    x: -1217.65,
    y: -3493.50,
    z: 128.83,
    h: 155
  }, {
    x: -1583.73,
    y: -3285.57,
    z: 105.95,
    h: 155
  }, {
    x: -1978.94,
    y: -3027.53,
    z: 99.18,
    h: 155
  }, {
    x: -1719.04,
    y: -2799.58,
    z: 115.71,
    h: 155
  }, {
    x: -1328.48,
    y: -2921.01,
    z: 63.48,
    h: 155
  }, {
    x: -1207.11,
    y: -3021.65,
    z: 13.94,
    h: 238
  }],
  license: [{
    id: "air",
    cost: 37000,
    restore: 15000,
    time: 30,
    models: ["maverick"]
  }],
  icon: 77,
  name: "Лицензионный центр воздушного транспорта"
}];
},{}],"EDxI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFakeSignText = exports.getDocumentName = exports.getDocumentData = exports.document_templates = void 0;
var _system = require("./system");
const getDocumentName = id => {
  const i = document_templates.find(q => q.id === id);
  return i ? i.typeShort : null;
};
exports.getDocumentName = getDocumentName;
const document_templates = exports.document_templates = [{
  id: "weapon_theory",
  typeShort: "Справка о допуске к экзамену на лицензию на оружие",
  title: `Справка о прохождении теоретического экзамена на получение лицензии на оружие`,
  text: `Данная справка выдана гражданину @name (ID Карта @social) сотрудником LSPD @nameCreator (ID Карта @socialCreator) и подтверждает, что вышеупомянутый гражданин обладает достаточными теоретическими знаниями чтобы быть допущеным к практической части экзамена на получение лицензии на ношение и хранение оружия.@n @n Дата выдачи справки: @date.@n @n Уникальный код справки в базе данных: @code`
}, {
  id: "mental_examination_ok",
  typeShort: "Справка о результатах психического обследования (Положительная)",
  title: `Справка о результатах психического обследования`,
  text: `Данная справка выдана гражданину @name (ID Карта @social) сотрудником медицинской службы @nameCreator (ID Карта @socialCreator) и подтверждает, что вышеупомянутый гражданин прошёл психиатрическое освидетельствование и признан вменяемым.@n @n Дата выдачи справки: @date.@n @n Уникальный код справки в базе данных: @code`
}, {
  id: "mental_examination_middle",
  typeShort: "Справка о результатах психического обследования (Средняя)",
  title: `Справка о результатах психического обследования`,
  text: `Данная справка выдана гражданину @name (ID Карта @social) сотрудником медицинской службы @nameCreator (ID Карта @socialCreator) и подтверждает, что вышеупомянутый гражданин прошёл психиатрическое освидетельствование и признан вменяемым с некоторыми ограничениями.@n @n Дата выдачи справки: @date.@n @n Уникальный код справки в базе данных: @code`
}, {
  id: "mental_examination_fail",
  typeShort: "Справка о результатах психического обследования (Средняя)",
  title: `Справка о результатах психического обследования`,
  text: `Данная справка выдана гражданину @name (ID Карта @social) сотрудником медицинской службы @nameCreator (ID Карта @socialCreator) и подтверждает, что вышеупомянутый гражданин прошёл психиатрическое освидетельствование и признан недееспособным.@n @n Дата выдачи справки: @date.@n @n Уникальный код справки в базе данных: @code`
}, {
  id: "phisical_examination_ok",
  typeShort: "Справка о результатах физического здоровья (Удовлетворительно)",
  title: `Справка о результатах физического здоровья`,
  text: `Данная справка выдана гражданину @name (ID Карта @social) сотрудником медицинской службы @nameCreator (ID Карта @socialCreator) и подтверждает, что вышеупомянутый гражданин прошёл физическое освидетельствование и признан дееспособным.@n @n Дата выдачи справки: @date.@n @n Уникальный код справки в базе данных: @code`
}];
const fakeStringCheck = ['a', 'o', 'w', 'j', 'i', 'o', 'v', 'y', 'u', 'l'];
const fakeStringReplace = ['o', 'a', 'v', 'l', 'l', 'a', 'y', 'u', 'v', 'i'];
const getFakeSignText = text => {
  let res = [];
  text.split('').map(q => {
    const indx = fakeStringCheck.findIndex(s => s === q);
    if (indx > -1) {
      q = q.replace(q, fakeStringReplace[indx]);
    }
    res.push(q);
  });
  return res.join('');
};
exports.getFakeSignText = getFakeSignText;
const getDocumentData = (document, date, code, id, name, social, idCreator, nameCreator, socialCreator, realStr) => {
  const replace = text => {
    text = text.replace(/@date/g, _system.systemUtil.timeStampString(parseInt(date), true) || "не указано");
    text = text.replace(/@code/g, code || "не указано");
    text = text.replace(/@idCreator/g, idCreator || "не указано");
    text = text.replace(/@nameCreator/g, nameCreator || "не указано");
    text = text.replace(/@socialCreator/g, socialCreator || "не указано");
    text = text.replace(/@id/g, id || "не указано");
    text = text.replace(/@name/g, name || "не указано");
    text = text.replace(/@social/g, social || "не указано");
    return text;
  };
  const cfg = document_templates.find(q => q.id === document);
  if (!cfg) return null;
  let title = replace(cfg.title);
  let text = replace(cfg.text);
  return {
    title,
    text,
    real: realStr === "true"
  };
};
exports.getDocumentData = getDocumentData;
},{"./system":"SNxO"}],"OpP5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentsMale = exports.componentsFemale = void 0;
const componentsMale = exports.componentsMale = [{
  component: 4,
  drawable: 17,
  texture: 0,
  name: "Темно-синие шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 1,
  name: "Шорты в клетку"
}, {
  component: 4,
  drawable: 17,
  texture: 2,
  name: "Оранжевые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 3,
  name: "Красные шорты - цветы"
}, {
  component: 4,
  drawable: 17,
  texture: 4,
  name: "Зеленые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 5,
  name: "Фиолетовые шорты - цветы"
}, {
  component: 4,
  drawable: 17,
  texture: 6,
  name: "Двухцветные шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 7,
  name: "Клетчатые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 8,
  name: "Голубые шорты - цветы"
}, {
  component: 4,
  drawable: 17,
  texture: 9,
  name: "Розовые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 10,
  name: "Лаймовые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 11,
  name: "Коричневые шорты"
}, {
  component: 4,
  drawable: 18,
  texture: 0,
  name: "Коричневые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 1,
  name: "Черные клетчатые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 2,
  name: "Желтые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 3,
  name: "Серебристые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 4,
  name: "Голубые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 5,
  name: "Белые клетчатые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 6,
  name: "Серые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 7,
  name: "Зеленые чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 9,
  name: "Красные чинос"
}, {
  component: 4,
  drawable: 18,
  texture: 10,
  name: "Оливковые чинос"
}, {
  component: 4,
  drawable: 19,
  texture: 1,
  name: "Двухцветные чинос"
}, {
  component: 4,
  drawable: 19,
  texture: 2,
  name: "Шорты - тропики"
}, {
  component: 4,
  drawable: 19,
  texture: 3,
  name: "Шорты в полоску"
}, {
  component: 4,
  drawable: 19,
  texture: 4,
  name: "Голубые шорты"
}, {
  component: 4,
  drawable: 19,
  texture: 5,
  name: "Белые шорты"
}, {
  component: 4,
  drawable: 19,
  texture: 7,
  name: "Коричневые шорты - цветы"
}, {
  component: 4,
  drawable: 19,
  texture: 8,
  name: "Полосатые шорты"
}, {
  component: 4,
  drawable: 19,
  texture: 9,
  name: "Шорты - фрукты/цветы"
}, {
  component: 4,
  drawable: 19,
  texture: 10,
  name: "Леопардовые шорты"
}, {
  component: 4,
  drawable: 19,
  texture: 11,
  name: "Шорты с попугаями"
}, {
  component: 6,
  drawable: 17,
  texture: 0,
  name: "Серые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 1,
  name: "Зеленые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 2,
  name: "Фиолетовые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 3,
  name: "Сиреневые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 4,
  name: "Двухцветные шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 5,
  name: "Красные шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 6,
  name: "Желтые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 9,
  name: "Серые шлепанцы - цветы"
}, {
  component: 6,
  drawable: 17,
  texture: 10,
  name: "Городские шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 11,
  name: "Синие шлепанцы Stank"
}, {
  component: 7,
  drawable: 17,
  texture: 0,
  name: "Серебряная цепь Covgari"
}, {
  component: 7,
  drawable: 17,
  texture: 1,
  name: "Золотая цепь Gaulle"
}, {
  component: 7,
  drawable: 17,
  texture: 2,
  name: "Бронзовая цепь"
}, {
  component: 8,
  drawable: 17,
  texture: 0,
  name: "Свитер Cerveza Barracho"
}, {
  component: 8,
  drawable: 17,
  texture: 1,
  name: "Свитер Los Santos"
}, {
  component: 8,
  drawable: 17,
  texture: 2,
  name: "Свитер Farshtunken Basics"
}, {
  component: 8,
  drawable: 18,
  texture: 0,
  name: "Синяя майка"
}, {
  component: 8,
  drawable: 18,
  texture: 1,
  name: "Желтая майка"
}, {
  component: 8,
  drawable: 18,
  texture: 2,
  name: "Оранжевая майка"
}, {
  component: 8,
  drawable: 18,
  texture: 3,
  name: "Лиловая майка Yeti"
}, {
  component: 8,
  drawable: 18,
  texture: 4,
  name: "Тропическая майка"
}, {
  component: 8,
  drawable: 18,
  texture: 5,
  name: "Зеленая майка"
}, {
  component: 1,
  drawable: 15,
  texture: 0,
  name: "Хоккейная Пуля"
}, {
  component: 1,
  drawable: 15,
  texture: 1,
  name: "Хоккейная Вайнвуд"
}, {
  component: 1,
  drawable: 15,
  texture: 2,
  name: "Хоккейная Турист"
}, {
  component: 1,
  drawable: 15,
  texture: 3,
  name: "Хоккейная Гончая"
}, {
  component: 1,
  drawable: 15,
  texture: 4,
  name: "Хоккейная Волк"
}, {
  component: 1,
  drawable: 15,
  texture: 5,
  name: "Хоккейная Зверь"
}, {
  component: 1,
  drawable: 15,
  texture: 6,
  name: "Хоккейная Медведь"
}, {
  component: 1,
  drawable: 15,
  texture: 7,
  name: "Хоккейная Dust Devils"
}, {
  component: 1,
  drawable: 15,
  texture: 8,
  name: "Хоккейная Rampage"
}, {
  component: 1,
  drawable: 15,
  texture: 9,
  name: "Хоккейная Королевская"
}, {
  component: 1,
  drawable: 15,
  texture: 10,
  name: "Хоккейная Мода"
}, {
  component: 1,
  drawable: 15,
  texture: 11,
  name: "Хоккейная Злобный зомби"
}, {
  component: 1,
  drawable: 15,
  texture: 12,
  name: "Хоккейная Гнилой зомби"
}, {
  component: 1,
  drawable: 15,
  texture: 13,
  name: "Хоккейная Огненный череп"
}, {
  component: 1,
  drawable: 15,
  texture: 14,
  name: "Хоккейная Жуткий череп"
}, {
  component: 1,
  drawable: 15,
  texture: 15,
  name: "Хоккейная Электрочереп"
}, {
  component: 1,
  drawable: 16,
  texture: 0,
  name: "Хоккейная Череп"
}, {
  component: 1,
  drawable: 16,
  texture: 1,
  name: "Хоккейная со стежками"
}, {
  component: 1,
  drawable: 16,
  texture: 2,
  name: "Хоккейная блеклая"
}, {
  component: 1,
  drawable: 17,
  texture: 0,
  name: "Металлическая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 1,
  name: "Электрическая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 2,
  name: "Расплавленная Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 3,
  name: "Неоновая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 4,
  name: "Карбоновая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 5,
  name: "Воин с перекрестьем"
}, {
  component: 1,
  drawable: 17,
  texture: 6,
  name: "Каменная Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 7,
  name: "Воин с молниями"
}, {
  component: 1,
  drawable: 17,
  texture: 8,
  name: "Деревянная Воин"
}, {
  component: 4,
  drawable: 20,
  texture: 0,
  name: "Светло-серые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 1,
  name: "Оливковые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 2,
  name: "Фиолетовые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 3,
  name: "Красные брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 4,
  name: "Сероватые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 5,
  name: "Коричневые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 6,
  name: "Бежевые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 7,
  name: "Кремовые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 8,
  name: "Пепельные брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 9,
  name: "Темно-синие брюки в клетку"
}, {
  component: 4,
  drawable: 20,
  texture: 10,
  name: "Серебристые брюки в клетку"
}, {
  component: 4,
  drawable: 20,
  texture: 11,
  name: "Серые брюки в клетку"
}, {
  component: 4,
  drawable: 20,
  texture: 12,
  name: "Белые брюки"
}, {
  component: 4,
  drawable: 21,
  texture: 0,
  name: "Светло-серые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 1,
  name: "Оливковые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 2,
  name: "Фиолетовые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 3,
  name: "Красные мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 4,
  name: "Сероватые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 5,
  name: "Коричневые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 6,
  name: "Бежевые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 7,
  name: "Кремовые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 8,
  name: "Пепельные мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 9,
  name: "Темно-синие мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 10,
  name: "Серебристые мешковатые"
}, {
  component: 4,
  drawable: 21,
  texture: 11,
  name: "Серые мешковатые в клетку"
}, {
  component: 4,
  drawable: 21,
  texture: 12,
  name: "Белые мешковатые"
}, {
  component: 6,
  drawable: 18,
  texture: 0,
  name: "Шоколадные оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 1,
  name: "Каштановые оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 2,
  name: "Охровые оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 3,
  name: "Белые оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 4,
  name: "Пепельные оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 5,
  name: "Темно-серые оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 6,
  name: "Двухцветные оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 7,
  name: "Черные оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 8,
  name: "Лаймовые оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 9,
  name: "Желтые оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 10,
  name: "Серые оксфорды"
}, {
  component: 6,
  drawable: 18,
  texture: 11,
  name: "Темно-синие оксфорды"
}, {
  component: 6,
  drawable: 19,
  texture: 0,
  name: "Черные лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 1,
  name: "Красные лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 2,
  name: "Коричневые лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 3,
  name: "Лоферы кобра"
}, {
  component: 6,
  drawable: 19,
  texture: 4,
  name: "Зеленые лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 5,
  name: "Медные лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 6,
  name: "Двухцветные лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 7,
  name: "Темно-синие лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 8,
  name: "Синие лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 9,
  name: "Белые лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 10,
  name: "Охровые лоферы"
}, {
  component: 6,
  drawable: 19,
  texture: 11,
  name: "Черно-белые лоферы"
}, {
  component: 7,
  drawable: 19,
  texture: 0,
  name: "Синий галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 1,
  name: "Темно-синий галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 2,
  name: "Красный галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 3,
  name: "Зеленый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 4,
  name: "Оранжевый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 5,
  name: "Желтый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 6,
  name: "Фиолетовый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 7,
  name: "Коричневый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 8,
  name: "Серый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 9,
  name: "Дымчатый клетчатый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 10,
  name: "Охровый клетчатый галстук"
}, {
  component: 7,
  drawable: 19,
  texture: 11,
  name: "Золотой галстук в полоску"
}, {
  component: 7,
  drawable: 19,
  texture: 12,
  name: "Красный полосатый галстук"
}, {
  component: 7,
  drawable: 20,
  texture: 0,
  name: "Белая бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 1,
  name: "Серая бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 2,
  name: "Синяя бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 3,
  name: "Темно-синяя бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 4,
  name: "Красная бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 5,
  name: "Зеленая бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 6,
  name: "Оранжевая бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 7,
  name: "Желтая бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 8,
  name: "Фиолетовая бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 9,
  name: "Коричневая бабочка"
}, {
  component: 7,
  drawable: 20,
  texture: 13,
  name: "Бурая бабочка"
}, {
  component: 7,
  drawable: 21,
  texture: 0,
  name: "Синий узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 1,
  name: "Темно-синий узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 2,
  name: "Красный узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 3,
  name: "Зеленый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 4,
  name: "Оранжевый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 5,
  name: "Желтый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 6,
  name: "Фиолетовый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 7,
  name: "Коричневый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 8,
  name: "Серый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 9,
  name: "Клетчатый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 10,
  name: "Охровый узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 11,
  name: "Золотой узкий галстук"
}, {
  component: 8,
  drawable: 20,
  texture: 0,
  name: "Светло-серый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 1,
  name: "Оливковый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 2,
  name: "Фиолетовый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 3,
  name: "Красный жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 4,
  name: "Сероватый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 5,
  name: "Коричневый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 6,
  name: "Бежевый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 7,
  name: "Кремовый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 8,
  name: "Пепельно-серый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 9,
  name: "Темно-синий жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 10,
  name: "Серый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 11,
  name: "Серебристый жилет"
}, {
  component: 8,
  drawable: 20,
  texture: 12,
  name: "Белый жилет"
}, {
  component: 8,
  drawable: 22,
  texture: 0,
  name: "Темно-серая рубашка"
}, {
  component: 8,
  drawable: 22,
  texture: 1,
  name: "Зеленая рубашка"
}, {
  component: 8,
  drawable: 22,
  texture: 2,
  name: "Пепельно-серая рубашка"
}, {
  component: 8,
  drawable: 22,
  texture: 3,
  name: "Желтая рубашка"
}, {
  component: 8,
  drawable: 22,
  texture: 4,
  name: "Лимонно-желтая рубашка"
}, {
  component: 8,
  drawable: 22,
  texture: 5,
  name: "Розовая рубашка"
}, {
  component: 8,
  drawable: 22,
  texture: 6,
  name: "Красная рубашка в клетку"
}, {
  component: 8,
  drawable: 22,
  texture: 7,
  name: "Фиолетовая рубашка в клетку"
}, {
  component: 8,
  drawable: 22,
  texture: 8,
  name: "Синяя рубашка в клетку"
}, {
  component: 8,
  drawable: 22,
  texture: 9,
  name: "Серая рубашка в клетку"
}, {
  component: 8,
  drawable: 23,
  texture: 0,
  name: "Белая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 1,
  name: "Серебристая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 2,
  name: "Серая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 3,
  name: "Сиреневая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 4,
  name: "Синеватая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 5,
  name: "Розовая клетчатая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 6,
  name: "Фиолетовая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 7,
  name: "Лососево-розовая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 8,
  name: "Оливковая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 10,
  name: "Сероватая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 12,
  name: "Полосатая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 13,
  name: "Розовая полосатая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 14,
  name: "Охровая рубашка"
}, {
  component: 8,
  drawable: 23,
  texture: 15,
  name: "Синяя полосатая рубашка"
}, {
  component: 11,
  drawable: 19,
  texture: 0,
  name: "Оливковый пиджак"
}, {
  component: 11,
  drawable: 19,
  texture: 1,
  name: "Пепельно-серый пиджак"
}, {
  component: 11,
  drawable: 19,
  texture: 2,
  name: "Темно-синий пиджак"
}, {
  component: 11,
  drawable: 19,
  texture: 3,
  name: "Белый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 0,
  name: "Светло-серый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 2,
  name: "Фиолетовый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 3,
  name: "Красный пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 4,
  name: "Сероватый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 5,
  name: "Коричневый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 6,
  name: "Бежевый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 7,
  name: "Кремовый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 8,
  name: "Пепельный пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 10,
  name: "Пепельный клетчатый пиджак"
}, {
  component: 11,
  drawable: 20,
  texture: 11,
  name: "Серый клетчатый пиджак"
}, {
  component: 11,
  drawable: 21,
  texture: 0,
  name: "Желтый жилет в клетку"
}, {
  component: 11,
  drawable: 21,
  texture: 2,
  name: "Светло-голубой жилет"
}, {
  component: 11,
  drawable: 21,
  texture: 4,
  name: "Серый жилет в клетку"
}, {
  component: 11,
  drawable: 21,
  texture: 5,
  name: "Фиолетовый в клетку"
}, {
  component: 11,
  drawable: 21,
  texture: 6,
  name: "Оливковый жилет в клетку"
}, {
  component: 11,
  drawable: 21,
  texture: 8,
  name: "Сине-серый жилет"
}, {
  component: 11,
  drawable: 21,
  texture: 9,
  name: "Светло-коричневый жилет"
}, {
  component: 11,
  drawable: 23,
  texture: 0,
  name: "Черный двубортный пиджак"
}, {
  component: 11,
  drawable: 23,
  texture: 1,
  name: "Серый двубортный пиджак"
}, {
  component: 11,
  drawable: 23,
  texture: 2,
  name: "Синий двубортный пиджак"
}, {
  component: 11,
  drawable: 24,
  texture: 0,
  name: "Черный классический пиджак"
}, {
  component: 11,
  drawable: 24,
  texture: 1,
  name: "Серый классический пиджак"
}, {
  component: 11,
  drawable: 24,
  texture: 2,
  name: "Синий классический пиджак"
}, {
  component: 1,
  drawable: 18,
  texture: 0,
  name: "Белая загадочная"
}, {
  component: 1,
  drawable: 18,
  texture: 1,
  name: "Красная загадочная"
}, {
  component: 1,
  drawable: 18,
  texture: 2,
  name: "Черная загадочная"
}, {
  component: 1,
  drawable: 19,
  texture: 0,
  name: "Бронзовая маскарадная"
}, {
  component: 1,
  drawable: 19,
  texture: 1,
  name: "Серебряная маскарадная"
}, {
  component: 1,
  drawable: 19,
  texture: 2,
  name: "Черно-золотая маскарадная"
}, {
  component: 1,
  drawable: 20,
  texture: 0,
  name: "Купидон"
}, {
  component: 4,
  drawable: 22,
  texture: 0,
  name: "Классические белые брюки"
}, {
  component: 4,
  drawable: 22,
  texture: 1,
  name: "Синие брюки в полоску"
}, {
  component: 4,
  drawable: 22,
  texture: 2,
  name: "Серые брюки в полоску"
}, {
  component: 4,
  drawable: 22,
  texture: 3,
  name: "Охровые брюки в полоску"
}, {
  component: 4,
  drawable: 23,
  texture: 0,
  name: "Боксеры с сердечками"
}, {
  component: 6,
  drawable: 20,
  texture: 0,
  name: "Оксфорды с черным носком"
}, {
  component: 6,
  drawable: 20,
  texture: 1,
  name: "Оксфорды с белым носком"
}, {
  component: 6,
  drawable: 21,
  texture: 0,
  name: "Гамаши"
}, {
  component: 7,
  drawable: 24,
  texture: 1,
  name: "Розовый галстук"
}, {
  component: 7,
  drawable: 24,
  texture: 2,
  name: "Белый галстук"
}, {
  component: 7,
  drawable: 24,
  texture: 3,
  name: "Охровый галстук"
}, {
  component: 8,
  drawable: 26,
  texture: 0,
  name: "Черная рубашка"
}, {
  component: 8,
  drawable: 26,
  texture: 2,
  name: "Красная рубашка"
}, {
  component: 8,
  drawable: 27,
  texture: 0,
  name: "Черная рубашка и жилет"
}, {
  component: 8,
  drawable: 27,
  texture: 1,
  name: "Розовая рубашка и жилет"
}, {
  component: 8,
  drawable: 27,
  texture: 2,
  name: "Красная рубашка и жилет"
}, {
  component: 8,
  drawable: 27,
  texture: 3,
  name: "Желтая рубашка и жилет"
}, {
  component: 8,
  drawable: 27,
  texture: 4,
  name: "Белая рубашка и жилет"
}, {
  component: 8,
  drawable: 28,
  texture: 0,
  name: "Белая футболка Love"
}, {
  component: 8,
  drawable: 28,
  texture: 1,
  name: "Черная футболка Love"
}, {
  component: 8,
  drawable: 28,
  texture: 2,
  name: "Красная футболка Love"
}, {
  component: 11,
  drawable: 25,
  texture: 0,
  name: "Классический белый пиджак"
}, {
  component: 11,
  drawable: 25,
  texture: 1,
  name: "Синий пиджак в полоску"
}, {
  component: 11,
  drawable: 25,
  texture: 2,
  name: "Серый пиджак в полоску"
}, {
  component: 11,
  drawable: 25,
  texture: 3,
  name: "Охровый пиджак в полоску"
}, {
  component: 11,
  drawable: 26,
  texture: 0,
  name: "Светло-серая жилетка"
}, {
  component: 11,
  drawable: 26,
  texture: 1,
  name: "Голубая жилетка"
}, {
  component: 11,
  drawable: 26,
  texture: 2,
  name: "Серая жилетка"
}, {
  component: 11,
  drawable: 26,
  texture: 3,
  name: "Охровая жилетка"
}, {
  component: 4,
  drawable: 24,
  texture: 0,
  name: "Черные узкие брюки"
}, {
  component: 4,
  drawable: 24,
  texture: 1,
  name: "Серые узкие брюки"
}, {
  component: 4,
  drawable: 24,
  texture: 2,
  name: "Темно-синие узкие брюки"
}, {
  component: 4,
  drawable: 24,
  texture: 3,
  name: "Сине-зеленые узкие брюки"
}, {
  component: 4,
  drawable: 24,
  texture: 4,
  name: "Красные узкие брюки"
}, {
  component: 4,
  drawable: 24,
  texture: 5,
  name: "Белые узкие брюки"
}, {
  component: 4,
  drawable: 24,
  texture: 6,
  name: "Коричневые узкие брюки"
}, {
  component: 4,
  drawable: 25,
  texture: 0,
  name: "Черные брюки"
}, {
  component: 4,
  drawable: 25,
  texture: 1,
  name: "Серые брюки"
}, {
  component: 4,
  drawable: 25,
  texture: 2,
  name: "Темно-синие брюки"
}, {
  component: 4,
  drawable: 25,
  texture: 3,
  name: "Сине-зеленые брюки"
}, {
  component: 8,
  drawable: 32,
  texture: 0,
  name: "Черная жилетка"
}, {
  component: 8,
  drawable: 32,
  texture: 2,
  name: "Темно-синяя жилетка"
}, {
  component: 8,
  drawable: 32,
  texture: 3,
  name: "Сине-зеленая жилетка"
}, {
  component: 8,
  drawable: 32,
  texture: 4,
  name: "Красная жилетка"
}, {
  component: 8,
  drawable: 32,
  texture: 5,
  name: "Белая жилетка"
}, {
  component: 8,
  drawable: 32,
  texture: 6,
  name: "Коричневая жилетка"
}, {
  component: 11,
  drawable: 28,
  texture: 0,
  name: "Черная открытая"
}, {
  component: 11,
  drawable: 28,
  texture: 1,
  name: "Серая открытая"
}, {
  component: 11,
  drawable: 28,
  texture: 2,
  name: "Темно-синяя открытая"
}, {
  component: 11,
  drawable: 28,
  texture: 3,
  name: "Сине-зеленая открытая"
}, {
  component: 11,
  drawable: 28,
  texture: 4,
  name: "Красная открытая"
}, {
  component: 11,
  drawable: 28,
  texture: 5,
  name: "Белая открытая"
}, {
  component: 11,
  drawable: 28,
  texture: 6,
  name: "Коричневая открытая"
}, {
  component: 11,
  drawable: 29,
  texture: 0,
  name: "Черная гладкая"
}, {
  component: 11,
  drawable: 29,
  texture: 1,
  name: "Серая гладкая"
}, {
  component: 11,
  drawable: 29,
  texture: 2,
  name: "Темно-синяя гладкая"
}, {
  component: 11,
  drawable: 29,
  texture: 3,
  name: "Сине-зеленая гладкая"
}, {
  component: 11,
  drawable: 29,
  texture: 4,
  name: "Красная гладкая"
}, {
  component: 11,
  drawable: 29,
  texture: 5,
  name: "Белая гладкая"
}, {
  component: 11,
  drawable: 29,
  texture: 6,
  name: "Коричневая гладкая"
}, {
  component: 11,
  drawable: 31,
  texture: 0,
  name: "Черная элегантная"
}, {
  component: 11,
  drawable: 31,
  texture: 1,
  name: "Серая элегантная"
}, {
  component: 11,
  drawable: 31,
  texture: 2,
  name: "Темно-синяя элегантная"
}, {
  component: 11,
  drawable: 31,
  texture: 3,
  name: "Сине-зеленая элегантная"
}, {
  component: 11,
  drawable: 31,
  texture: 4,
  name: "Красная элегантная"
}, {
  component: 11,
  drawable: 31,
  texture: 5,
  name: "Белая элегантная"
}, {
  component: 11,
  drawable: 31,
  texture: 6,
  name: "Коричневая элегантная"
}, {
  component: 1,
  drawable: 21,
  texture: 0,
  name: "Серый кот"
}, {
  component: 1,
  drawable: 21,
  texture: 1,
  name: "Полосатый кот"
}, {
  component: 1,
  drawable: 22,
  texture: 0,
  name: "Красная лиса"
}, {
  component: 1,
  drawable: 22,
  texture: 1,
  name: "Коричневая лиса"
}, {
  component: 1,
  drawable: 23,
  texture: 0,
  name: "Коричневая сова"
}, {
  component: 1,
  drawable: 23,
  texture: 1,
  name: "Белая сова"
}, {
  component: 1,
  drawable: 24,
  texture: 0,
  name: "Серый енот"
}, {
  component: 1,
  drawable: 24,
  texture: 1,
  name: "Черный енот"
}, {
  component: 4,
  drawable: 26,
  texture: 0,
  name: "Особые черные облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 1,
  name: "Фиолетовые облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 2,
  name: "Темно-оливковые облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 3,
  name: "Зеленые облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 4,
  name: "Синие облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 5,
  name: "Красные облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 6,
  name: "Голубые облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 7,
  name: "Мятно-зеленые облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 8,
  name: "Облегающие (рокер)"
}, {
  component: 4,
  drawable: 26,
  texture: 9,
  name: "Леопардовые облегающие"
}, {
  component: 4,
  drawable: 26,
  texture: 10,
  name: "Облегающие (зебра)"
}, {
  component: 4,
  drawable: 26,
  texture: 11,
  name: "Тартановые облегающие"
}, {
  component: 4,
  drawable: 27,
  texture: 1,
  name: "Синие чинос"
}, {
  component: 4,
  drawable: 27,
  texture: 2,
  name: "Оранжевые чинос"
}, {
  component: 4,
  drawable: 27,
  texture: 3,
  name: "Белые чинос"
}, {
  component: 4,
  drawable: 27,
  texture: 5,
  name: "Светло-голубые чинос"
}, {
  component: 4,
  drawable: 27,
  texture: 6,
  name: "Ярко-розовые чинос"
}, {
  component: 4,
  drawable: 27,
  texture: 7,
  name: "Мятно-зеленые чинос"
}, {
  component: 4,
  drawable: 27,
  texture: 9,
  name: "Зелено-синие чинос"
}, {
  component: 4,
  drawable: 27,
  texture: 11,
  name: "Сиреневые чинос"
}, {
  component: 4,
  drawable: 28,
  texture: 1,
  name: "Узкие брюки (белая полоса)"
}, {
  component: 4,
  drawable: 28,
  texture: 2,
  name: "Темно-розовые узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 4,
  name: "Оливковые узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 6,
  name: "Светло-серые узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 7,
  name: "Бежевые узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 9,
  name: "Фиолетовые узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 10,
  name: "Серо-синие узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 12,
  name: "Леопардовые узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 13,
  name: "Синие узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 14,
  name: "Кремовые узкие брюки"
}, {
  component: 4,
  drawable: 28,
  texture: 15,
  name: "Полосатые брюки (кремовые)"
}, {
  component: 6,
  drawable: 22,
  texture: 0,
  name: "Голубые кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 1,
  name: "Зеленые кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 2,
  name: "Оранжевые кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 3,
  name: "Желтые кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 4,
  name: "Фиолетовые кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 5,
  name: "Серые двухцветные кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 6,
  name: "Клетчатые кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 7,
  name: "Камуфляжные кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 8,
  name: "Кеды кофейного цвета"
}, {
  component: 6,
  drawable: 22,
  texture: 9,
  name: "Кеды в клетку"
}, {
  component: 6,
  drawable: 22,
  texture: 10,
  name: "Зеленые клетчатые кеды"
}, {
  component: 6,
  drawable: 22,
  texture: 11,
  name: "Песочные кеды"
}, {
  component: 6,
  drawable: 23,
  texture: 0,
  name: "Желтые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 1,
  name: "Ультрамариновые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 2,
  name: "Оранжевые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 3,
  name: "Бордовые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 4,
  name: "Синие туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 5,
  name: "Камуфляжные туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 6,
  name: "Черные туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 7,
  name: "Изысканные туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 8,
  name: "Розовые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 9,
  name: "Коричневые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 10,
  name: "Шоколадные туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 11,
  name: "Зеленые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 12,
  name: "Пепельные туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 13,
  name: "Оливковые туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 14,
  name: "Серые туфли"
}, {
  component: 7,
  drawable: 29,
  texture: 0,
  name: "Белый шарф"
}, {
  component: 7,
  drawable: 29,
  texture: 1,
  name: "Серый шарф"
}, {
  component: 7,
  drawable: 29,
  texture: 2,
  name: "Черный шарф"
}, {
  component: 7,
  drawable: 29,
  texture: 3,
  name: "Темно-синий шарф"
}, {
  component: 7,
  drawable: 29,
  texture: 4,
  name: "Красный шарф"
}, {
  component: 7,
  drawable: 29,
  texture: 5,
  name: "Зеленый шарф"
}, {
  component: 8,
  drawable: 36,
  texture: 0,
  name: "Серая полосатая футболка"
}, {
  component: 8,
  drawable: 37,
  texture: 0,
  name: "Футболка Love Fist"
}, {
  component: 8,
  drawable: 37,
  texture: 1,
  name: "Футболка в полоску"
}, {
  component: 8,
  drawable: 39,
  texture: 0,
  name: "Синяя полосатая футболка"
}, {
  component: 8,
  drawable: 39,
  texture: 1,
  name: "Лавандовая футболка"
}, {
  component: 8,
  drawable: 39,
  texture: 2,
  name: "Ярко-розовая футболка"
}, {
  component: 8,
  drawable: 39,
  texture: 3,
  name: "Камуфляжная футболка"
}, {
  component: 8,
  drawable: 39,
  texture: 4,
  name: "Желтая полосатая футболка"
}, {
  component: 8,
  drawable: 39,
  texture: 5,
  name: "Сероватая футболка"
}, {
  component: 8,
  drawable: 40,
  texture: 0,
  name: "Темно-серая футболка"
}, {
  component: 8,
  drawable: 40,
  texture: 2,
  name: "Футболка Pikeys"
}, {
  component: 8,
  drawable: 40,
  texture: 3,
  name: "Желтая футболка"
}, {
  component: 8,
  drawable: 40,
  texture: 4,
  name: "Футболка с цветочками"
}, {
  component: 8,
  drawable: 41,
  texture: 0,
  name: "Красная рубашка поло"
}, {
  component: 8,
  drawable: 41,
  texture: 1,
  name: "Темно-синяя рубашка поло"
}, {
  component: 8,
  drawable: 42,
  texture: 1,
  name: "Пурпурная рубашка в клетку"
}, {
  component: 8,
  drawable: 42,
  texture: 2,
  name: "Оливковая рубашка в клетку"
}, {
  component: 8,
  drawable: 42,
  texture: 3,
  name: "Пикантная рубашка в клетку"
}, {
  component: 8,
  drawable: 44,
  texture: 0,
  name: "Джинсовая рубашка/подтяжки"
}, {
  component: 8,
  drawable: 46,
  texture: 0,
  name: "Зеленая футболка"
}, {
  component: 8,
  drawable: 46,
  texture: 2,
  name: "Лиловая футболка"
}, {
  component: 8,
  drawable: 46,
  texture: 3,
  name: "Серая футболка"
}, {
  component: 11,
  drawable: 34,
  texture: 0,
  name: "Белый спортивный верх"
}, {
  component: 11,
  drawable: 34,
  texture: 1,
  name: "Спортивный верх (камуфляж)"
}, {
  component: 11,
  drawable: 34,
  texture: 2,
  name: "Голубой спортивный верх"
}, {
  component: 11,
  drawable: 34,
  texture: 3,
  name: "Розовый спортивный верх"
}, {
  component: 11,
  drawable: 34,
  texture: 4,
  name: "Спортивный верх (леопард)"
}, {
  component: 11,
  drawable: 34,
  texture: 5,
  name: "Вишневый спортивный верх"
}, {
  component: 11,
  drawable: 34,
  texture: 6,
  name: "Кремовый спортивный верх"
}, {
  component: 11,
  drawable: 36,
  texture: 0,
  name: "Каштановая кожаная куртка"
}, {
  component: 11,
  drawable: 36,
  texture: 1,
  name: "Коричневая кожаная куртка"
}, {
  component: 11,
  drawable: 39,
  texture: 1,
  name: "Бордовый жилет"
}, {
  component: 1,
  drawable: 25,
  texture: 0,
  name: "Бурый медведь"
}, {
  component: 1,
  drawable: 25,
  texture: 1,
  name: "Серый медведь"
}, {
  component: 1,
  drawable: 26,
  texture: 0,
  name: "Коричневый бизон"
}, {
  component: 1,
  drawable: 26,
  texture: 1,
  name: "Золотой бизон"
}, {
  component: 1,
  drawable: 27,
  texture: 0,
  name: "Черный бык"
}, {
  component: 1,
  drawable: 27,
  texture: 1,
  name: "Коричневый бык"
}, {
  component: 1,
  drawable: 28,
  texture: 0,
  name: "Коричневый орел"
}, {
  component: 1,
  drawable: 28,
  texture: 1,
  name: "Белый орел"
}, {
  component: 1,
  drawable: 29,
  texture: 0,
  name: "Розовый гриф"
}, {
  component: 1,
  drawable: 29,
  texture: 1,
  name: "Черный гриф"
}, {
  component: 1,
  drawable: 30,
  texture: 0,
  name: "Серый волк"
}, {
  component: 1,
  drawable: 30,
  texture: 1,
  name: "Черный волк"
}, {
  component: 4,
  drawable: 29,
  texture: 0,
  name: "Узкие полосатые чинос"
}, {
  component: 4,
  drawable: 29,
  texture: 1,
  name: "Широкие полосатые чинос"
}, {
  component: 4,
  drawable: 29,
  texture: 2,
  name: "Чинос со звездами"
}, {
  component: 7,
  drawable: 31,
  texture: 0,
  name: "Бабочка USA"
}, {
  component: 7,
  drawable: 31,
  texture: 1,
  name: "Бабочка с синей звездой"
}, {
  component: 7,
  drawable: 31,
  texture: 2,
  name: "Бабочка с белой звездой"
}, {
  component: 8,
  drawable: 48,
  texture: 1,
  name: "Полосатая рубашка и жилет"
}, {
  component: 8,
  drawable: 50,
  texture: 0,
  name: "Синяя рубашка и жилет"
}, {
  component: 8,
  drawable: 50,
  texture: 1,
  name: "Рубашка и жилет в полоску"
}, {
  component: 8,
  drawable: 50,
  texture: 6,
  name: "Рубашка и жилет с звездами"
}, {
  component: 8,
  drawable: 52,
  texture: 0,
  name: "Футболка Freedom"
}, {
  component: 8,
  drawable: 52,
  texture: 1,
  name: "Футболка с флагом США"
}, {
  component: 11,
  drawable: 44,
  texture: 0,
  name: "Жилет с флагом"
}, {
  component: 11,
  drawable: 44,
  texture: 1,
  name: "Жилет с флагом США"
}, {
  component: 11,
  drawable: 44,
  texture: 2,
  name: "Жилет со звездным флагом"
}, {
  component: 11,
  drawable: 45,
  texture: 0,
  name: "Синий фрак"
}, {
  component: 11,
  drawable: 45,
  texture: 1,
  name: "Фрак со звездами"
}, {
  component: 11,
  drawable: 45,
  texture: 2,
  name: "Красный фрак"
}, {
  component: 1,
  drawable: 31,
  texture: 0,
  name: "Фуражка пилота"
}, {
  component: 4,
  drawable: 30,
  texture: 0,
  name: "Зеленые летные штаны"
}, {
  component: 6,
  drawable: 24,
  texture: 0,
  name: "Черные летные ботинки"
}, {
  component: 11,
  drawable: 47,
  texture: 0,
  name: "Зеленая летная куртка"
}, {
  component: 1,
  drawable: 32,
  texture: 0,
  name: "Черная защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 1,
  name: "Серая защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 2,
  name: "Пепельная защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 3,
  name: "Белая защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 4,
  name: "Зеленая защитная маска"
}, {
  component: 1,
  drawable: 33,
  texture: 0,
  name: "Черная скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 1,
  name: "Серая скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 2,
  name: "Пепельная скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 3,
  name: "Белая скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 4,
  name: "Зеленая скелетная"
}, {
  component: 1,
  drawable: 34,
  texture: 0,
  name: "Маска Please Stop Me"
}, {
  component: 3,
  drawable: 18,
  texture: 0,
  name: "Черные перчатки"
}, {
  component: 3,
  drawable: 18,
  texture: 1,
  name: "Серые перчатки"
}, {
  component: 3,
  drawable: 18,
  texture: 2,
  name: "Пепельные перчатки"
}, {
  component: 3,
  drawable: 18,
  texture: 3,
  name: "Белые перчатки"
}, {
  component: 3,
  drawable: 18,
  texture: 4,
  name: "Зеленые перчатки"
}, {
  component: 3,
  drawable: 19,
  texture: 0,
  name: "Черные шерстяные перчатки"
}, {
  component: 3,
  drawable: 19,
  texture: 1,
  name: "Серые шерстяные перчатки"
}, {
  component: 3,
  drawable: 19,
  texture: 2,
  name: "Пепельные шерстяные перч."
}, {
  component: 3,
  drawable: 19,
  texture: 3,
  name: "Белые шерстяные перч."
}, {
  component: 3,
  drawable: 19,
  texture: 4,
  name: "Зеленые шерстяные перчатки"
}, {
  component: 4,
  drawable: 31,
  texture: 0,
  name: "Черные военные штаны"
}, {
  component: 4,
  drawable: 31,
  texture: 1,
  name: "Серые военные штаны"
}, {
  component: 4,
  drawable: 31,
  texture: 2,
  name: "Пепельные военные штаны"
}, {
  component: 4,
  drawable: 31,
  texture: 3,
  name: "Белые военные штаны"
}, {
  component: 4,
  drawable: 31,
  texture: 4,
  name: "Зеленые военные штаны"
}, {
  component: 10,
  drawable: 8,
  texture: 0,
  name: "Большая эмблема банды"
}, {
  component: 11,
  drawable: 48,
  texture: 0,
  name: "Черная защитная футболка"
}, {
  component: 11,
  drawable: 48,
  texture: 1,
  name: "Серая защитная футболка"
}, {
  component: 11,
  drawable: 48,
  texture: 2,
  name: "Пепельная защитная футболка"
}, {
  component: 11,
  drawable: 48,
  texture: 3,
  name: "Белая защитная футболка"
}, {
  component: 11,
  drawable: 48,
  texture: 4,
  name: "Зеленая защитная футболка"
}, {
  component: 11,
  drawable: 49,
  texture: 0,
  name: "Черный военный свитер"
}, {
  component: 11,
  drawable: 49,
  texture: 1,
  name: "Серый военный свитер"
}, {
  component: 11,
  drawable: 49,
  texture: 2,
  name: "Пепельный военный свитер"
}, {
  component: 11,
  drawable: 49,
  texture: 3,
  name: "Белый военный свитер"
}, {
  component: 11,
  drawable: 49,
  texture: 4,
  name: "Зеленый военный свитер"
}, {
  component: 1,
  drawable: 35,
  texture: 0,
  name: "Ночное видение"
}, {
  component: 1,
  drawable: 36,
  texture: 0,
  name: "Дыхательный аппарат"
}, {
  component: 1,
  drawable: 37,
  texture: 0,
  name: "Потертая балаклава"
}, {
  component: 1,
  drawable: 38,
  texture: 0,
  name: "Противогаз"
}, {
  component: 1,
  drawable: 39,
  texture: 0,
  name: "Розовый плотоядный"
}, {
  component: 1,
  drawable: 39,
  texture: 1,
  name: "Коричневый плотоядный"
}, {
  component: 1,
  drawable: 40,
  texture: 0,
  name: "Белая мумия"
}, {
  component: 1,
  drawable: 40,
  texture: 1,
  name: "Зеленая мумия"
}, {
  component: 1,
  drawable: 41,
  texture: 0,
  name: "Белый вампир"
}, {
  component: 1,
  drawable: 41,
  texture: 1,
  name: "Синий вампир"
}, {
  component: 1,
  drawable: 42,
  texture: 0,
  name: "Бледный Фрэнк"
}, {
  component: 1,
  drawable: 42,
  texture: 1,
  name: "Серый Фрэнк"
}, {
  component: 1,
  drawable: 43,
  texture: 0,
  name: "Impotent Rage"
}, {
  component: 1,
  drawable: 44,
  texture: 0,
  name: "Princess Robot Bubblegum"
}, {
  component: 1,
  drawable: 45,
  texture: 0,
  name: "Moorehead"
}, {
  component: 1,
  drawable: 46,
  texture: 0,
  name: "Химзащитная маска"
}, {
  component: 1,
  drawable: 47,
  texture: 0,
  name: "Полицейская лента"
}, {
  component: 1,
  drawable: 47,
  texture: 1,
  name: "Лента с черными стрелками"
}, {
  component: 1,
  drawable: 47,
  texture: 2,
  name: "Лента Опасная зона"
}, {
  component: 1,
  drawable: 47,
  texture: 3,
  name: "Красно-белая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 0,
  name: "Светло-серая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 1,
  name: "Темно-серая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 2,
  name: "Белая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 3,
  name: "Разноцветная лента"
}, {
  component: 1,
  drawable: 49,
  texture: 0,
  name: "Пакет Up-n-Atom"
}, {
  component: 1,
  drawable: 49,
  texture: 1,
  name: "Маньячный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 2,
  name: "Грустный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 3,
  name: "Веселый пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 4,
  name: "Пакет Погладь кота"
}, {
  component: 1,
  drawable: 49,
  texture: 5,
  name: "Пакет Пасть"
}, {
  component: 1,
  drawable: 49,
  texture: 6,
  name: "Застенчивый пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 7,
  name: "Пакет Burger Shot"
}, {
  component: 1,
  drawable: 49,
  texture: 8,
  name: "Пакет КМП"
}, {
  component: 1,
  drawable: 49,
  texture: 9,
  name: "Дьявольский пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 10,
  name: "Полицейский пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 11,
  name: "Пакет Монстр"
}, {
  component: 1,
  drawable: 49,
  texture: 12,
  name: "Разъяренный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 13,
  name: "Пакет Зиг-Заг"
}, {
  component: 1,
  drawable: 49,
  texture: 14,
  name: "Пакет Череп"
}, {
  component: 1,
  drawable: 49,
  texture: 15,
  name: "Пакет Песик"
}, {
  component: 1,
  drawable: 49,
  texture: 16,
  name: "Розовый пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 17,
  name: "Пакет НЛО"
}, {
  component: 1,
  drawable: 49,
  texture: 18,
  name: "Пакет На помощь"
}, {
  component: 1,
  drawable: 49,
  texture: 19,
  name: "Пакет-головоломка"
}, {
  component: 1,
  drawable: 49,
  texture: 20,
  name: "Пакет Фак Ю"
}, {
  component: 1,
  drawable: 49,
  texture: 21,
  name: "Элегантный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 22,
  name: "Пакет с наклейками"
}, {
  component: 1,
  drawable: 49,
  texture: 23,
  name: "Пакет Модерн"
}, {
  component: 1,
  drawable: 49,
  texture: 24,
  name: "Романтичный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 25,
  name: "Пакет В отключке"
}, {
  component: 1,
  drawable: 50,
  texture: 0,
  name: "Зеленая маска"
}, {
  component: 1,
  drawable: 50,
  texture: 1,
  name: "Маска Дон"
}, {
  component: 1,
  drawable: 50,
  texture: 2,
  name: "Розовая маска"
}, {
  component: 1,
  drawable: 50,
  texture: 3,
  name: "Маска Клоун"
}, {
  component: 1,
  drawable: 50,
  texture: 4,
  name: "Черная маска"
}, {
  component: 1,
  drawable: 50,
  texture: 5,
  name: "Коричневая маска"
}, {
  component: 1,
  drawable: 50,
  texture: 6,
  name: "Маска Манекен"
}, {
  component: 1,
  drawable: 50,
  texture: 7,
  name: "Маска Кукла"
}, {
  component: 1,
  drawable: 50,
  texture: 8,
  name: "Маска Марионетка"
}, {
  component: 1,
  drawable: 50,
  texture: 9,
  name: "Маска Мим"
}, {
  component: 1,
  drawable: 51,
  texture: 0,
  name: "Черная бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 1,
  name: "Бандана с черепом"
}, {
  component: 1,
  drawable: 51,
  texture: 2,
  name: "Бандана (город)"
}, {
  component: 1,
  drawable: 51,
  texture: 3,
  name: "Бандана (пустыня)"
}, {
  component: 1,
  drawable: 51,
  texture: 4,
  name: "Бандана (лес)"
}, {
  component: 1,
  drawable: 51,
  texture: 5,
  name: "Зеленая бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 6,
  name: "Фиолетовая бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 7,
  name: "Бандана с узором"
}, {
  component: 1,
  drawable: 51,
  texture: 8,
  name: "Желтая бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 9,
  name: "Бандана с электрочерепом"
}, {
  component: 1,
  drawable: 52,
  texture: 0,
  name: "Черная балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 1,
  name: "Серая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 2,
  name: "Белая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 3,
  name: "Зеленая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 4,
  name: "Балаклава цвета хаки"
}, {
  component: 1,
  drawable: 52,
  texture: 5,
  name: "Пепельная балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 6,
  name: "Балаклава (лес)"
}, {
  component: 1,
  drawable: 52,
  texture: 7,
  name: "Балаклава (город)"
}, {
  component: 1,
  drawable: 52,
  texture: 8,
  name: "Синяя балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 9,
  name: "Желтая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 10,
  name: "Балаклава с черепом"
}, {
  component: 1,
  drawable: 53,
  texture: 0,
  name: "Черная балаклава-капюшон"
}, {
  component: 1,
  drawable: 53,
  texture: 1,
  name: "Серая балаклава-капюшон"
}, {
  component: 1,
  drawable: 53,
  texture: 2,
  name: "Белая балаклава-капюшон"
}, {
  component: 1,
  drawable: 53,
  texture: 3,
  name: "Балаклава-капюшон (зел.)"
}, {
  component: 1,
  drawable: 53,
  texture: 6,
  name: "Балаклава-капюшон (лес)"
}, {
  component: 1,
  drawable: 53,
  texture: 7,
  name: "Балаклава-капюшон (город)"
}, {
  component: 1,
  drawable: 53,
  texture: 8,
  name: "Балаклава Череп"
}, {
  component: 1,
  drawable: 54,
  texture: 0,
  name: "Черная маска из футболки"
}, {
  component: 1,
  drawable: 54,
  texture: 1,
  name: "Белая маска из футболки"
}, {
  component: 1,
  drawable: 54,
  texture: 2,
  name: "Бежевая маска-футболка"
}, {
  component: 1,
  drawable: 54,
  texture: 3,
  name: "Маска-футболка Benders"
}, {
  component: 1,
  drawable: 54,
  texture: 4,
  name: "Маска Справедливость"
}, {
  component: 1,
  drawable: 54,
  texture: 5,
  name: "Маска из футболки (лес)"
}, {
  component: 1,
  drawable: 54,
  texture: 6,
  name: "Полосатая маска-футболка"
}, {
  component: 1,
  drawable: 54,
  texture: 7,
  name: "Маска-футболка Love First"
}, {
  component: 1,
  drawable: 54,
  texture: 8,
  name: "Маска-футболка ТФИ"
}, {
  component: 1,
  drawable: 54,
  texture: 9,
  name: "Маска Розовый камуфляж"
}, {
  component: 1,
  drawable: 54,
  texture: 10,
  name: "Маска-футболка LSPD"
}, {
  component: 1,
  drawable: 55,
  texture: 0,
  name: "Пепельно-черная балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 0,
  name: "Синяя свободн. балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 1,
  name: "Черная свободн. балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 4,
  name: "Кровавая балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 5,
  name: "Свободная балаклава (лес)"
}, {
  component: 1,
  drawable: 56,
  texture: 6,
  name: "Красная балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 7,
  name: "Свободная балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 8,
  name: "Двуцветная балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 4,
  name: "Коричневая балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 5,
  name: "Радужная балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 7,
  name: "Грязная балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 8,
  name: "Розовая балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 9,
  name: "Балаклава Flying Bravo FB"
}, {
  component: 1,
  drawable: 57,
  texture: 10,
  name: "Балаклава Flying Bravo"
}, {
  component: 1,
  drawable: 57,
  texture: 11,
  name: "Балаклава Princess"
}, {
  component: 1,
  drawable: 57,
  texture: 12,
  name: "Балаклава Didier Sachs"
}, {
  component: 1,
  drawable: 57,
  texture: 13,
  name: "Балаклава Perseus Band"
}, {
  component: 1,
  drawable: 57,
  texture: 14,
  name: "Балаклава Perseus"
}, {
  component: 1,
  drawable: 57,
  texture: 15,
  name: "Балаклава Sessanta Nove"
}, {
  component: 1,
  drawable: 57,
  texture: 20,
  name: "Оранжевая балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 21,
  name: "Фиолетовая балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 0,
  name: "Бандитская балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 1,
  name: "Натуральная балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 2,
  name: "Лесная балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 5,
  name: "Балаклава Бессильная Злоба"
}, {
  component: 1,
  drawable: 58,
  texture: 6,
  name: "Балаклава Pogo"
}, {
  component: 1,
  drawable: 58,
  texture: 7,
  name: "Балаклава в синию полоску"
}, {
  component: 1,
  drawable: 58,
  texture: 8,
  name: "Балаклава в черную полоску"
}, {
  component: 1,
  drawable: 58,
  texture: 9,
  name: "Балаклава в розовую полоску"
}, {
  component: 3,
  drawable: 20,
  texture: 0,
  name: "Водительские перчатки"
}, {
  component: 3,
  drawable: 31,
  texture: 0,
  name: "Черные кожаные перчатки"
}, {
  component: 3,
  drawable: 31,
  texture: 1,
  name: "Коричневые перчатки"
}, {
  component: 3,
  drawable: 53,
  texture: 0,
  name: "Черные полуперчатки"
}, {
  component: 3,
  drawable: 53,
  texture: 1,
  name: "Серые полуперчатки"
}, {
  component: 3,
  drawable: 64,
  texture: 0,
  name: "Полуперчатки мусорщика"
}, {
  component: 3,
  drawable: 75,
  texture: 0,
  name: "Белые хлопчатые перчатки"
}, {
  component: 3,
  drawable: 86,
  texture: 0,
  name: "Хирургические перчатки"
}, {
  component: 4,
  drawable: 32,
  texture: 0,
  name: "Черные штаны грабителя"
}, {
  component: 4,
  drawable: 33,
  texture: 0,
  name: "Черные боевые штаны"
}, {
  component: 4,
  drawable: 36,
  texture: 0,
  name: "Изношенные серые брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 1,
  name: "Изношенные бежевые брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 2,
  name: "Изношенные черные брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 3,
  name: "Изношенные синие брюки"
}, {
  component: 4,
  drawable: 40,
  texture: 0,
  name: "Черные летные штаны"
}, {
  component: 6,
  drawable: 25,
  texture: 0,
  name: "Армейские черные ботинки"
}, {
  component: 6,
  drawable: 27,
  texture: 0,
  name: "Потертые черные ботинки"
}, {
  component: 7,
  drawable: 33,
  texture: 0,
  name: "Свободная черная бабочка"
}, {
  component: 7,
  drawable: 34,
  texture: 0,
  name: "Угольно-черный (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 1,
  name: "Со штриховкой (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 2,
  name: "В белую полоску (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 3,
  name: "Зеленый (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 4,
  name: "В лиловую клетку (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 5,
  name: "Розовый (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 6,
  name: "С серыми ромбами (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 7,
  name: "Песочного цвета (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 8,
  name: "В синюю полоску (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 9,
  name: "Сине-зеленый (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 10,
  name: "Оранжевый (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 11,
  name: "В синюю клетку (свободный)"
}, {
  component: 7,
  drawable: 34,
  texture: 12,
  name: "В песочную полоску (своб.)"
}, {
  component: 7,
  drawable: 34,
  texture: 14,
  name: "С зелеными ромбами (своб.)"
}, {
  component: 7,
  drawable: 34,
  texture: 15,
  name: "Синий (свободный)"
}, {
  component: 7,
  drawable: 35,
  texture: 0,
  name: "Угольно-черный (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 1,
  name: "Со штриховкой (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 2,
  name: "В белую полоску (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 3,
  name: "Зеленый (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 4,
  name: "В лиловую клетку (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 5,
  name: "Розовый (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 6,
  name: "С серыми ромбами (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 7,
  name: "Песочного цвета (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 8,
  name: "В синюю полоску (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 9,
  name: "Сине-зеленый (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 10,
  name: "Оранжевый (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 11,
  name: "В синюю клетку (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 12,
  name: "В песочную полоску (строгий)"
}, {
  component: 7,
  drawable: 35,
  texture: 14,
  name: "С зелеными ромбами (строг.)"
}, {
  component: 7,
  drawable: 35,
  texture: 15,
  name: "Синий (строгий)"
}, {
  component: 7,
  drawable: 36,
  texture: 0,
  name: "Угольно-черный (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 1,
  name: "Со штриховкой (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 2,
  name: "В белую полоску (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 3,
  name: "Зеленый (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 4,
  name: "В лиловую клетку (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 5,
  name: "Розовый (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 6,
  name: "С серыми ромбами (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 7,
  name: "Песочного цвета (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 8,
  name: "В синюю полоску (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 9,
  name: "Сине-зеленый (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 10,
  name: "Оранжевый (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 11,
  name: "В синюю клетку (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 12,
  name: "В пес. полоску (небрежный)"
}, {
  component: 7,
  drawable: 36,
  texture: 14,
  name: "С зелеными ромбами (небреж.)"
}, {
  component: 7,
  drawable: 36,
  texture: 15,
  name: "Синий (небрежный)"
}, {
  component: 8,
  drawable: 54,
  texture: 0,
  name: "Черный жилет"
}, {
  component: 11,
  drawable: 50,
  texture: 0,
  name: "Черный боевой жилет"
}, {
  component: 11,
  drawable: 50,
  texture: 1,
  name: "Серый боевой жилет"
}, {
  component: 11,
  drawable: 50,
  texture: 2,
  name: "Бежевый боевой жилет"
}, {
  component: 11,
  drawable: 50,
  texture: 3,
  name: "Камуфляжный боевой жилет"
}, {
  component: 11,
  drawable: 51,
  texture: 0,
  name: "Черная летная куртка"
}, {
  component: 11,
  drawable: 54,
  texture: 0,
  name: "Серая мешковатая толстовка"
}, {
  component: 11,
  drawable: 55,
  texture: 0,
  name: "Черный фрак"
}, {
  component: 11,
  drawable: 56,
  texture: 0,
  name: "Серый изношенный пиджак"
}, {
  component: 11,
  drawable: 56,
  texture: 1,
  name: "Бежевый изношенный пиджак"
}, {
  component: 11,
  drawable: 56,
  texture: 2,
  name: "Черный изношенный пиджак"
}, {
  component: 11,
  drawable: 56,
  texture: 3,
  name: "Синий изношенный пиджак"
}, {
  component: 11,
  drawable: 57,
  texture: 0,
  name: "Серый (засученные рукава)"
}, {
  component: 11,
  drawable: 57,
  texture: 1,
  name: "Бежевый (засученные рукава)"
}, {
  component: 11,
  drawable: 57,
  texture: 2,
  name: "Черный (засученные рукава)"
}, {
  component: 11,
  drawable: 57,
  texture: 3,
  name: "Синий (засученные рукава)"
}, {
  component: 11,
  drawable: 58,
  texture: 0,
  name: "Бежевая маск. куртка"
}, {
  component: 11,
  drawable: 58,
  texture: 1,
  name: "Серая маск. куртка"
}, {
  component: 11,
  drawable: 58,
  texture: 2,
  name: "Зеленая маск. куртка"
}, {
  component: 11,
  drawable: 58,
  texture: 3,
  name: "Черная маск. куртка"
}, {
  component: 11,
  drawable: 59,
  texture: 0,
  name: "Черная обтяг. кож. куртка"
}, {
  component: 11,
  drawable: 60,
  texture: 0,
  name: "Черная рубашка (подверн.)"
}, {
  component: 11,
  drawable: 61,
  texture: 0,
  name: "Черная кожаная куртка"
}, {
  component: 11,
  drawable: 65,
  texture: 0,
  name: "С капюшоном (черн.)"
}, {
  component: 11,
  drawable: 65,
  texture: 1,
  name: "С капюшоном (свет.-сер.)"
}, {
  component: 11,
  drawable: 65,
  texture: 2,
  name: "С капюшоном (темн.-сер.)"
}, {
  component: 11,
  drawable: 65,
  texture: 3,
  name: "С капюшоном (крас.)"
}, {
  component: 11,
  drawable: 65,
  texture: 4,
  name: "С капюшоном (темн.-син.)"
}, {
  component: 11,
  drawable: 65,
  texture: 5,
  name: "С капюшоном (бежев.)"
}, {
  component: 6,
  drawable: 28,
  texture: 0,
  name: "Белые клепаные кеды"
}, {
  component: 6,
  drawable: 28,
  texture: 1,
  name: "Черные клепаные кеды"
}, {
  component: 6,
  drawable: 28,
  texture: 2,
  name: "Багровые клепаные кеды"
}, {
  component: 6,
  drawable: 28,
  texture: 3,
  name: "Красные клепаные кеды"
}, {
  component: 6,
  drawable: 28,
  texture: 4,
  name: "Бежевые клепаные кеды"
}, {
  component: 6,
  drawable: 28,
  texture: 5,
  name: "Синие клепаные кеды"
}, {
  component: 6,
  drawable: 29,
  texture: 0,
  name: "Высокие золотые кеды"
}, {
  component: 7,
  drawable: 39,
  texture: 0,
  name: "Золотая цепь SN"
}, {
  component: 7,
  drawable: 39,
  texture: 1,
  name: "Платиновая цепь SN"
}, {
  component: 7,
  drawable: 40,
  texture: 0,
  name: "Золотая цепь Череп"
}, {
  component: 7,
  drawable: 40,
  texture: 1,
  name: "Платиновая цепь Череп"
}, {
  component: 7,
  drawable: 41,
  texture: 0,
  name: "Платиновая Балаклава"
}, {
  component: 7,
  drawable: 42,
  texture: 0,
  name: "Золотая цепь Zorse"
}, {
  component: 7,
  drawable: 42,
  texture: 1,
  name: "Платиновая цепь Zorse"
}, {
  component: 7,
  drawable: 43,
  texture: 0,
  name: "Золотая цепь LC"
}, {
  component: 7,
  drawable: 43,
  texture: 1,
  name: "Платиновая цепь LC"
}, {
  component: 7,
  drawable: 44,
  texture: 0,
  name: "Золотая цепь Dix"
}, {
  component: 7,
  drawable: 44,
  texture: 1,
  name: "Платиновая цепь Dix"
}, {
  component: 7,
  drawable: 45,
  texture: 0,
  name: "Золотая цепь Le Chien"
}, {
  component: 7,
  drawable: 45,
  texture: 1,
  name: "Платиновая цепь Le Chien"
}, {
  component: 8,
  drawable: 64,
  texture: 0,
  name: "Футболка Pegasus"
}, {
  component: 8,
  drawable: 64,
  texture: 1,
  name: "Футболка Andromeda"
}, {
  component: 8,
  drawable: 64,
  texture: 2,
  name: "Футболка Medusa"
}, {
  component: 8,
  drawable: 64,
  texture: 3,
  name: "Футболка Angelica"
}, {
  component: 8,
  drawable: 64,
  texture: 4,
  name: "Футболка Classic Perseus"
}, {
  component: 8,
  drawable: 64,
  texture: 5,
  name: "Футболка Shield & Sword"
}, {
  component: 8,
  drawable: 64,
  texture: 6,
  name: "Футболка Full Shield"
}, {
  component: 8,
  drawable: 64,
  texture: 7,
  name: "Темная футболка с узором"
}, {
  component: 8,
  drawable: 64,
  texture: 9,
  name: "Розовая футболка с узором"
}, {
  component: 8,
  drawable: 64,
  texture: 10,
  name: "Черная футболка с узором"
}, {
  component: 8,
  drawable: 64,
  texture: 11,
  name: "Золотая футболка SN"
}, {
  component: 8,
  drawable: 64,
  texture: 12,
  name: "Коричневая футболка SN"
}, {
  component: 8,
  drawable: 64,
  texture: 13,
  name: "Розовая футболка SN PRB"
}, {
  component: 8,
  drawable: 64,
  texture: 14,
  name: "Коричневая Geo PRB"
}, {
  component: 8,
  drawable: 64,
  texture: 15,
  name: "Футболка Fake Sessanta Nove"
}, {
  component: 8,
  drawable: 64,
  texture: 16,
  name: "Цветная футболка Geo PRB"
}, {
  component: 8,
  drawable: 64,
  texture: 17,
  name: "Цветная футболка Geo"
}, {
  component: 8,
  drawable: 64,
  texture: 18,
  name: "Коричневая футболка Geo"
}, {
  component: 8,
  drawable: 66,
  texture: 0,
  name: "Блестящая золотая футболка"
}, {
  component: 11,
  drawable: 67,
  texture: 0,
  name: "Коричневая куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 1,
  name: "Бежевая куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 2,
  name: "Темная куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 3,
  name: "Охровая куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 4,
  name: "Белая куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 5,
  name: "Куртка на меху леопарда"
}, {
  component: 11,
  drawable: 67,
  texture: 6,
  name: "Осенняя куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 7,
  name: "Охотничья куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 8,
  name: "Серая куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 9,
  name: "Черная куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 10,
  name: "Бордовая куртка на меху"
}, {
  component: 11,
  drawable: 67,
  texture: 11,
  name: "Темно-серая куртка на меху"
}, {
  component: 11,
  drawable: 69,
  texture: 0,
  name: "Бежевое пальто"
}, {
  component: 11,
  drawable: 69,
  texture: 1,
  name: "Серое пальто"
}, {
  component: 11,
  drawable: 69,
  texture: 2,
  name: "Черное пальто"
}, {
  component: 11,
  drawable: 69,
  texture: 3,
  name: "Темно-синее пальто"
}, {
  component: 11,
  drawable: 71,
  texture: 0,
  name: "Классический бомбер SN"
}, {
  component: 11,
  drawable: 71,
  texture: 1,
  name: "Коричневый бомбер Perseus"
}, {
  component: 11,
  drawable: 71,
  texture: 2,
  name: "Черный бомбер SN"
}, {
  component: 11,
  drawable: 71,
  texture: 3,
  name: "Разноцветный бомбер SN"
}, {
  component: 11,
  drawable: 71,
  texture: 4,
  name: "Бомбер с ромбами"
}, {
  component: 11,
  drawable: 71,
  texture: 5,
  name: "Бомбер с золотой монетой"
}, {
  component: 11,
  drawable: 71,
  texture: 6,
  name: "Ярко-неоновый бомбер"
}, {
  component: 11,
  drawable: 71,
  texture: 7,
  name: "Черный бомбер с узором"
}, {
  component: 11,
  drawable: 71,
  texture: 8,
  name: "Черный бомбер Dix"
}, {
  component: 11,
  drawable: 71,
  texture: 9,
  name: "Черный бомбер с цепью"
}, {
  component: 11,
  drawable: 71,
  texture: 10,
  name: "Красный бомбер с цепью"
}, {
  component: 11,
  drawable: 72,
  texture: 0,
  name: "Бомбер SN на молнии"
}, {
  component: 11,
  drawable: 72,
  texture: 3,
  name: "Цветной бомбер SN"
}, {
  component: 11,
  drawable: 72,
  texture: 6,
  name: "Яркий бомбер на молнии"
}, {
  component: 11,
  drawable: 72,
  texture: 7,
  name: "Черный бомбер на молнии"
}, {
  component: 11,
  drawable: 72,
  texture: 8,
  name: "Бомбер Dix с узором"
}, {
  component: 6,
  drawable: 30,
  texture: 0,
  name: "Универсальные лоферы"
}, {
  component: 6,
  drawable: 30,
  texture: 1,
  name: "Серые лоферы для вождения"
}, {
  component: 7,
  drawable: 71,
  texture: 0,
  name: "Крупная золотая цепочка"
}, {
  component: 7,
  drawable: 71,
  texture: 1,
  name: "Крупная платиновая цепочка"
}, {
  component: 7,
  drawable: 72,
  texture: 0,
  name: "Золотая цепочка Бельцер"
}, {
  component: 7,
  drawable: 72,
  texture: 1,
  name: "Цепочка Бельцер, платина"
}, {
  component: 7,
  drawable: 73,
  texture: 0,
  name: "Золотая цепочка Крендель"
}, {
  component: 7,
  drawable: 73,
  texture: 1,
  name: "Цепочка Крендель, платина"
}, {
  component: 7,
  drawable: 74,
  texture: 0,
  name: "Плотная золотая цепочка"
}, {
  component: 7,
  drawable: 74,
  texture: 1,
  name: "Плотная платиновая цепочка"
}, {
  component: 7,
  drawable: 75,
  texture: 0,
  name: "Золотая цепочка Ромбы"
}, {
  component: 7,
  drawable: 75,
  texture: 1,
  name: "Платиновая цепочка Ромбы"
}, {
  component: 7,
  drawable: 76,
  texture: 0,
  name: "Массивная золотая цепь"
}, {
  component: 7,
  drawable: 76,
  texture: 1,
  name: "Массивная платиновая цепь"
}, {
  component: 7,
  drawable: 77,
  texture: 0,
  name: "Плотная цепь Квадрат"
}, {
  component: 7,
  drawable: 77,
  texture: 1,
  name: "Плотная цепочка Квадрат"
}, {
  component: 7,
  drawable: 78,
  texture: 0,
  name: "Золотая цепочка Квадрат"
}, {
  component: 7,
  drawable: 78,
  texture: 1,
  name: "Цепочка Квадрат, платина"
}, {
  component: 7,
  drawable: 79,
  texture: 0,
  name: "Золотая цепочка Попкорн"
}, {
  component: 7,
  drawable: 79,
  texture: 1,
  name: "Цепочка Попкорн, платина"
}, {
  component: 7,
  drawable: 80,
  texture: 0,
  name: "Золотая цепочка Веревка"
}, {
  component: 7,
  drawable: 80,
  texture: 1,
  name: "Цепочка Веревка, платина"
}, {
  component: 7,
  drawable: 81,
  texture: 0,
  name: "Синий клетчатый шарф"
}, {
  component: 7,
  drawable: 81,
  texture: 1,
  name: "Зеленый клетчатый шарф"
}, {
  component: 7,
  drawable: 81,
  texture: 2,
  name: "Бежевый клетчатый шарф"
}, {
  component: 7,
  drawable: 81,
  texture: 3,
  name: "Серый клетчатый шарф"
}, {
  component: 7,
  drawable: 81,
  texture: 4,
  name: "Черный клетчатый шарф"
}, {
  component: 7,
  drawable: 81,
  texture: 5,
  name: "Персиковый клетчатый шарф"
}, {
  component: 11,
  drawable: 73,
  texture: 0,
  name: "Бежевый тренч"
}, {
  component: 11,
  drawable: 73,
  texture: 1,
  name: "Черный тренч"
}, {
  component: 11,
  drawable: 73,
  texture: 2,
  name: "Темно-синий тренч"
}, {
  component: 11,
  drawable: 73,
  texture: 3,
  name: "Серый тренч"
}, {
  component: 11,
  drawable: 73,
  texture: 4,
  name: "Зеленый тренч"
}, {
  component: 11,
  drawable: 74,
  texture: 0,
  name: "Серый макинтош"
}, {
  component: 11,
  drawable: 74,
  texture: 1,
  name: "Бежевый макинтош"
}, {
  component: 11,
  drawable: 74,
  texture: 2,
  name: "Темно-синий макинтош"
}, {
  component: 11,
  drawable: 74,
  texture: 3,
  name: "Зеленый макинтош"
}, {
  component: 11,
  drawable: 75,
  texture: 0,
  name: "Золотой свитер Geo"
}, {
  component: 11,
  drawable: 75,
  texture: 1,
  name: "Свитер Le Chien"
}, {
  component: 11,
  drawable: 75,
  texture: 2,
  name: "Черный свитер Geo"
}, {
  component: 11,
  drawable: 75,
  texture: 3,
  name: "Серебряный свитер Geo"
}, {
  component: 11,
  drawable: 75,
  texture: 4,
  name: "Свитер Hound"
}, {
  component: 11,
  drawable: 75,
  texture: 5,
  name: "Зеленовато-голубой свитер"
}, {
  component: 11,
  drawable: 75,
  texture: 6,
  name: "Бежевый свитер Perseus"
}, {
  component: 11,
  drawable: 75,
  texture: 7,
  name: "Свитер Perseus"
}, {
  component: 11,
  drawable: 75,
  texture: 8,
  name: "Свитер Sword & Shield"
}, {
  component: 11,
  drawable: 75,
  texture: 9,
  name: "Черный свитер SN"
}, {
  component: 11,
  drawable: 75,
  texture: 11,
  name: "Классический свитер SN"
}, {
  component: 11,
  drawable: 75,
  texture: 12,
  name: "Свитер с цветными ромбами"
}, {
  component: 11,
  drawable: 75,
  texture: 13,
  name: "Свитер с золотыми ромбами"
}, {
  component: 11,
  drawable: 75,
  texture: 14,
  name: "Разноцветный свитер SN"
}, {
  component: 11,
  drawable: 75,
  texture: 15,
  name: "Разноцветный свитер Geo"
}, {
  component: 4,
  drawable: 41,
  texture: 0,
  name: "Черные беговые шорты"
}, {
  component: 4,
  drawable: 41,
  texture: 1,
  name: "Серые беговые шорты"
}, {
  component: 4,
  drawable: 41,
  texture: 2,
  name: "Белые беговые шорты"
}, {
  component: 4,
  drawable: 41,
  texture: 3,
  name: "Синие беговые шорты"
}, {
  component: 4,
  drawable: 41,
  texture: 4,
  name: "Красные беговые шорты"
}, {
  component: 4,
  drawable: 41,
  texture: 5,
  name: "Желтые беговые шорты"
}, {
  component: 4,
  drawable: 41,
  texture: 6,
  name: "Зеленые беговые шорты"
}, {
  component: 4,
  drawable: 41,
  texture: 7,
  name: "Коричневые беговые шорты"
}, {
  component: 4,
  drawable: 42,
  texture: 0,
  name: "Синие свободные джинсы"
}, {
  component: 4,
  drawable: 42,
  texture: 1,
  name: "Черные свободные джинсы"
}, {
  component: 6,
  drawable: 31,
  texture: 0,
  name: "Кроссовки Calypso"
}, {
  component: 6,
  drawable: 31,
  texture: 1,
  name: "Кроссовки Buzz"
}, {
  component: 6,
  drawable: 31,
  texture: 2,
  name: "Кроссовки Fresh"
}, {
  component: 6,
  drawable: 31,
  texture: 3,
  name: "Кроссовки Jinx"
}, {
  component: 6,
  drawable: 31,
  texture: 4,
  name: "Кроссовки Animal"
}, {
  component: 6,
  drawable: 32,
  texture: 0,
  name: "Черные кеды Hi Top"
}, {
  component: 6,
  drawable: 32,
  texture: 1,
  name: "Белые кеды Hi Top"
}, {
  component: 6,
  drawable: 32,
  texture: 2,
  name: "Двухцветные кеды Hi Top"
}, {
  component: 6,
  drawable: 32,
  texture: 3,
  name: "Кеды Hi Top Яд"
}, {
  component: 6,
  drawable: 32,
  texture: 4,
  name: "Кеды Hi Top Лед"
}, {
  component: 6,
  drawable: 32,
  texture: 5,
  name: "Кеды Hi Top Трио"
}, {
  component: 6,
  drawable: 32,
  texture: 6,
  name: "Розовые кеды Hi Top"
}, {
  component: 6,
  drawable: 32,
  texture: 7,
  name: "Кеды Hi Top Опасность"
}, {
  component: 6,
  drawable: 32,
  texture: 8,
  name: "Камуфляжные кеды Hi Top"
}, {
  component: 6,
  drawable: 32,
  texture: 9,
  name: "Кеды Hi Top Отскок"
}, {
  component: 6,
  drawable: 32,
  texture: 10,
  name: "Кеды Hi Top Земля"
}, {
  component: 6,
  drawable: 32,
  texture: 11,
  name: "Кеды Hi Top Неон"
}, {
  component: 6,
  drawable: 32,
  texture: 12,
  name: "Алые кеды Hi Top"
}, {
  component: 6,
  drawable: 32,
  texture: 13,
  name: "Желтые кеды Hi Top"
}, {
  component: 6,
  drawable: 32,
  texture: 14,
  name: "Кеды Hi Top Жало"
}, {
  component: 6,
  drawable: 32,
  texture: 15,
  name: "Кеды Hi Top Корт"
}, {
  component: 7,
  drawable: 107,
  texture: 0,
  name: "Золотое ожерелье Magnetics"
}, {
  component: 7,
  drawable: 107,
  texture: 1,
  name: "Платин. ожерелье Magnetics"
}, {
  component: 10,
  drawable: 11,
  texture: 0,
  name: "Эмблема банды (перед и зад)"
}, {
  component: 11,
  drawable: 77,
  texture: 0,
  name: "Белая свободная футболка"
}, {
  component: 11,
  drawable: 77,
  texture: 1,
  name: "Черная свободная футболка"
}, {
  component: 11,
  drawable: 77,
  texture: 2,
  name: "Серая свободная футболка"
}, {
  component: 11,
  drawable: 78,
  texture: 0,
  name: "Черная спортивная футболка"
}, {
  component: 11,
  drawable: 78,
  texture: 1,
  name: "Белая спортивная футболка"
}, {
  component: 11,
  drawable: 78,
  texture: 2,
  name: "Серая спортивная футболка"
}, {
  component: 11,
  drawable: 79,
  texture: 0,
  name: "Серая свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 1,
  name: "Желтая свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 2,
  name: "Черная свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 3,
  name: "Коричневая полосатая рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 4,
  name: "Зеленая свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 5,
  name: "Розовая свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 7,
  name: "Ярко-розовая рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 8,
  name: "Светло-серая рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 9,
  name: "Синяя свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 11,
  name: "Зеленая полосатая рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 12,
  name: "Цветная свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 13,
  name: "Охровая свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 14,
  name: "Фиолетовая свободная рубашка"
}, {
  component: 11,
  drawable: 79,
  texture: 15,
  name: "Желтая полосатая рубашка"
}, {
  component: 11,
  drawable: 80,
  texture: 0,
  name: "Бейсбольная рубашка Broker"
}, {
  component: 11,
  drawable: 80,
  texture: 1,
  name: "Бейсбольная рубашка Double P"
}, {
  component: 11,
  drawable: 80,
  texture: 2,
  name: "Рубашка Magnetics"
}, {
  component: 11,
  drawable: 80,
  texture: 3,
  name: "Рубашка Trickster"
}, {
  component: 11,
  drawable: 80,
  texture: 4,
  name: "Бейсбольная рубашка Feud"
}, {
  component: 11,
  drawable: 81,
  texture: 0,
  name: "Ветровка Corkers"
}, {
  component: 11,
  drawable: 81,
  texture: 1,
  name: "Ветровка LS"
}, {
  component: 11,
  drawable: 81,
  texture: 2,
  name: "Ветровка SA"
}, {
  component: 11,
  drawable: 81,
  texture: 3,
  name: "Ветровка Squeezers"
}, {
  component: 11,
  drawable: 81,
  texture: 4,
  name: "Ветровка Feud"
}, {
  component: 11,
  drawable: 81,
  texture: 5,
  name: "Ветровка Boars"
}, {
  component: 11,
  drawable: 82,
  texture: 0,
  name: "Темно-синяя штормовка"
}, {
  component: 11,
  drawable: 83,
  texture: 0,
  name: "Черная спортивная толстовка"
}, {
  component: 11,
  drawable: 83,
  texture: 1,
  name: "Серая спортивная толстовка"
}, {
  component: 11,
  drawable: 83,
  texture: 2,
  name: "Белая спортивная толстовка"
}, {
  component: 11,
  drawable: 83,
  texture: 3,
  name: "Синяя спортивная толстовка"
}, {
  component: 11,
  drawable: 83,
  texture: 4,
  name: "Красная спортивная толстовка"
}, {
  component: 11,
  drawable: 84,
  texture: 0,
  name: "Красная куртка Double P"
}, {
  component: 11,
  drawable: 84,
  texture: 1,
  name: "Желтая куртка Magnetics"
}, {
  component: 11,
  drawable: 84,
  texture: 2,
  name: "Черная куртка Hinterland"
}, {
  component: 11,
  drawable: 84,
  texture: 3,
  name: "Зеленая куртка Magnetics"
}, {
  component: 11,
  drawable: 84,
  texture: 4,
  name: "Черная куртка Broker Print"
}, {
  component: 11,
  drawable: 84,
  texture: 5,
  name: "Серая куртка Broker Print"
}, {
  component: 11,
  drawable: 84,
  texture: 6,
  name: "Черная куртка Broker"
}, {
  component: 11,
  drawable: 84,
  texture: 7,
  name: "Белая куртка Trickster"
}, {
  component: 11,
  drawable: 84,
  texture: 8,
  name: "Черная куртка Trickster"
}, {
  component: 11,
  drawable: 84,
  texture: 9,
  name: "Коричневая куртка WSBL"
}, {
  component: 11,
  drawable: 84,
  texture: 10,
  name: "Синяя куртка Double P"
}, {
  component: 11,
  drawable: 84,
  texture: 11,
  name: "Синяя куртка LS"
}, {
  component: 11,
  drawable: 85,
  texture: 0,
  name: "Красный бомбер Double P"
}, {
  component: 11,
  drawable: 85,
  texture: 1,
  name: "Желтый бомбер Magnetics"
}, {
  component: 11,
  drawable: 85,
  texture: 2,
  name: "Черный бомбер Hinterland"
}, {
  component: 11,
  drawable: 85,
  texture: 3,
  name: "Зеленый бомбер Magnetics"
}, {
  component: 11,
  drawable: 85,
  texture: 4,
  name: "Черный бомбер Broker"
}, {
  component: 11,
  drawable: 85,
  texture: 5,
  name: "Серый бомбер Broker"
}, {
  component: 11,
  drawable: 85,
  texture: 7,
  name: "Белый бомбер Trickster"
}, {
  component: 11,
  drawable: 85,
  texture: 8,
  name: "Черный бомбер Trickster"
}, {
  component: 11,
  drawable: 85,
  texture: 9,
  name: "Коричневый бомбер WSBL"
}, {
  component: 11,
  drawable: 85,
  texture: 10,
  name: "Синий бомбер Double P"
}, {
  component: 11,
  drawable: 85,
  texture: 11,
  name: "Синий бомбер LS"
}, {
  component: 11,
  drawable: 86,
  texture: 0,
  name: "Черный свитер"
}, {
  component: 11,
  drawable: 86,
  texture: 1,
  name: "Серый свитер"
}, {
  component: 11,
  drawable: 86,
  texture: 2,
  name: "Белый свитер"
}, {
  component: 11,
  drawable: 86,
  texture: 3,
  name: "Зеленый свитер"
}, {
  component: 11,
  drawable: 87,
  texture: 0,
  name: "Куртка Университетская"
}, {
  component: 1,
  drawable: 60,
  texture: 0,
  name: "Злобная тыква"
}, {
  component: 1,
  drawable: 60,
  texture: 1,
  name: "Гнилая тыква"
}, {
  component: 1,
  drawable: 60,
  texture: 2,
  name: "Противный арбуз"
}, {
  component: 1,
  drawable: 61,
  texture: 0,
  name: "Жуткий дворецкий"
}, {
  component: 1,
  drawable: 61,
  texture: 1,
  name: "Мертвый дворецкий"
}, {
  component: 1,
  drawable: 61,
  texture: 2,
  name: "Гниющий дворецкий"
}, {
  component: 1,
  drawable: 62,
  texture: 0,
  name: "Белый обожженный псих"
}, {
  component: 1,
  drawable: 62,
  texture: 1,
  name: "Кровавый обожженный псих"
}, {
  component: 1,
  drawable: 62,
  texture: 2,
  name: "Черный обожженный псих"
}, {
  component: 1,
  drawable: 63,
  texture: 0,
  name: "Красный демон"
}, {
  component: 1,
  drawable: 63,
  texture: 1,
  name: "Зеленый демон"
}, {
  component: 1,
  drawable: 63,
  texture: 2,
  name: "Серый демон"
}, {
  component: 1,
  drawable: 64,
  texture: 0,
  name: "Белый череп с кожей"
}, {
  component: 1,
  drawable: 64,
  texture: 1,
  name: "Красный череп с кожей"
}, {
  component: 1,
  drawable: 64,
  texture: 2,
  name: "Кремовый череп с кожей"
}, {
  component: 1,
  drawable: 65,
  texture: 0,
  name: "Бледный оборотень"
}, {
  component: 1,
  drawable: 65,
  texture: 1,
  name: "Темный оборотень"
}, {
  component: 1,
  drawable: 65,
  texture: 2,
  name: "Серый оборотень"
}, {
  component: 1,
  drawable: 66,
  texture: 0,
  name: "Зеленое насекомое"
}, {
  component: 1,
  drawable: 66,
  texture: 1,
  name: "Красное насекомое"
}, {
  component: 1,
  drawable: 66,
  texture: 2,
  name: "Пурпурное насекомое"
}, {
  component: 1,
  drawable: 67,
  texture: 0,
  name: "Грязная канавная тварь"
}, {
  component: 1,
  drawable: 67,
  texture: 1,
  name: "Гнилая канавная тварь"
}, {
  component: 1,
  drawable: 67,
  texture: 2,
  name: "Паршивая канавная тварь"
}, {
  component: 1,
  drawable: 68,
  texture: 0,
  name: "Красный черт"
}, {
  component: 1,
  drawable: 68,
  texture: 1,
  name: "Оранжевый черт"
}, {
  component: 1,
  drawable: 68,
  texture: 2,
  name: "Черный черт"
}, {
  component: 1,
  drawable: 69,
  texture: 0,
  name: "Маньяк в классическом мешке"
}, {
  component: 1,
  drawable: 69,
  texture: 1,
  name: "Маньяк в кровавом мешке"
}, {
  component: 1,
  drawable: 69,
  texture: 2,
  name: "Маньяк в черном мешке"
}, {
  component: 1,
  drawable: 70,
  texture: 0,
  name: "Синий пришелец гипнотик"
}, {
  component: 1,
  drawable: 70,
  texture: 1,
  name: "Зеленый пришелец гипнотик"
}, {
  component: 1,
  drawable: 70,
  texture: 2,
  name: "Красный пришелец гипнотик"
}, {
  component: 1,
  drawable: 71,
  texture: 0,
  name: "Желтая измученная ведьма"
}, {
  component: 1,
  drawable: 71,
  texture: 1,
  name: "Серая измученная ведьма"
}, {
  component: 1,
  drawable: 71,
  texture: 2,
  name: "Белая измученная ведьма"
}, {
  component: 1,
  drawable: 72,
  texture: 0,
  name: "Красный бородатый демон"
}, {
  component: 1,
  drawable: 72,
  texture: 1,
  name: "Рыжий демон с бородой"
}, {
  component: 1,
  drawable: 72,
  texture: 2,
  name: "Черный бородатый демон"
}, {
  component: 4,
  drawable: 43,
  texture: 0,
  name: "Черные шорты"
}, {
  component: 4,
  drawable: 43,
  texture: 1,
  name: "Желто-коричневые шорты"
}, {
  component: 4,
  drawable: 43,
  texture: 2,
  name: "Синие рабочие шорты"
}, {
  component: 4,
  drawable: 43,
  texture: 3,
  name: "Шорты цвета хаки"
}, {
  component: 4,
  drawable: 44,
  texture: 0,
  name: "Классические синие джинсы"
}, {
  component: 6,
  drawable: 33,
  texture: 0,
  name: "Красные замшевые лоферы"
}, {
  component: 6,
  drawable: 34,
  texture: 0,
  name: "Серые матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 1,
  name: "Черные матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 2,
  name: "Белые матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 3,
  name: "Красные матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 4,
  name: "Синие матерчатые в клетку"
}, {
  component: 6,
  drawable: 34,
  texture: 5,
  name: "Полосатые матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 6,
  name: "Коричневые матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 7,
  name: "Камуфляжные матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 8,
  name: "Тропические матерчатые"
}, {
  component: 6,
  drawable: 34,
  texture: 9,
  name: "Зеленые матерчатые"
}, {
  component: 6,
  drawable: 35,
  texture: 0,
  name: "Желтые ботильоны"
}, {
  component: 6,
  drawable: 35,
  texture: 1,
  name: "Темно-серые ботильоны"
}, {
  component: 6,
  drawable: 35,
  texture: 2,
  name: "Джинсовые ботильоны"
}, {
  component: 6,
  drawable: 35,
  texture: 3,
  name: "Черно-белые ботильоны"
}, {
  component: 6,
  drawable: 35,
  texture: 4,
  name: "Синие ботильоны"
}, {
  component: 6,
  drawable: 35,
  texture: 5,
  name: "Красные ботильоны"
}, {
  component: 6,
  drawable: 35,
  texture: 6,
  name: "Зеленые ботильоны"
}, {
  component: 6,
  drawable: 35,
  texture: 7,
  name: "Черные ботильоны"
}, {
  component: 7,
  drawable: 109,
  texture: 0,
  name: "Золотой кулон колесо"
}, {
  component: 7,
  drawable: 109,
  texture: 1,
  name: "Платиновый кулон колесо"
}, {
  component: 7,
  drawable: 111,
  texture: 0,
  name: "Кулон из золотого сплава"
}, {
  component: 7,
  drawable: 111,
  texture: 1,
  name: "Кулон из платинового сплава"
}, {
  component: 11,
  drawable: 88,
  texture: 0,
  name: "С черно-белыми полосами"
}, {
  component: 11,
  drawable: 88,
  texture: 1,
  name: "С черно-синими полосами"
}, {
  component: 11,
  drawable: 88,
  texture: 2,
  name: "Черная полосатая толстовка"
}, {
  component: 11,
  drawable: 88,
  texture: 3,
  name: "Растаманская толстовка"
}, {
  component: 11,
  drawable: 88,
  texture: 4,
  name: "Серая толстовка хиппи"
}, {
  component: 11,
  drawable: 88,
  texture: 5,
  name: "Черная толстовка хиппи"
}, {
  component: 11,
  drawable: 88,
  texture: 6,
  name: "Толстовка Trickster"
}, {
  component: 11,
  drawable: 88,
  texture: 7,
  name: "Толстовка Fruntalot"
}, {
  component: 11,
  drawable: 88,
  texture: 8,
  name: "Толстовка Yeti"
}, {
  component: 11,
  drawable: 88,
  texture: 9,
  name: "Толстовка Sweatbox"
}, {
  component: 11,
  drawable: 88,
  texture: 10,
  name: "Толстовка Chianski"
}, {
  component: 11,
  drawable: 88,
  texture: 11,
  name: "Толстовка Dense"
}, {
  component: 11,
  drawable: 89,
  texture: 0,
  name: "Черная ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 1,
  name: "Бежевая ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 2,
  name: "Сине-зеленая ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 3,
  name: "Серая ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 4,
  name: "Городская ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 5,
  name: "Красно-черная ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 6,
  name: "Синяя ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 7,
  name: "Лесная ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 8,
  name: "Белая ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 9,
  name: "Ореховая ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 10,
  name: "Красная ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 11,
  name: "Зеленая ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 12,
  name: "Охотничья ветровка"
}, {
  component: 11,
  drawable: 89,
  texture: 13,
  name: "Серо-стальная ветровка"
}, {
  component: 11,
  drawable: 90,
  texture: 0,
  name: "Белая рабочая рубашка"
}, {
  component: 11,
  drawable: 90,
  texture: 1,
  name: "Темно-синяя рабочая рубашка"
}, {
  component: 11,
  drawable: 90,
  texture: 2,
  name: "Темно-серая рабочая рубашка"
}, {
  component: 11,
  drawable: 91,
  texture: 0,
  name: "Зеленая рабочая куртка"
}, {
  component: 11,
  drawable: 92,
  texture: 0,
  name: "Желто-коричневое пальто"
}, {
  component: 11,
  drawable: 93,
  texture: 0,
  name: "Синяя рубашка"
}, {
  component: 11,
  drawable: 93,
  texture: 1,
  name: "Коричневая рубашка"
}, {
  component: 11,
  drawable: 93,
  texture: 3,
  name: "Рубашка индиго"
}, {
  component: 11,
  drawable: 93,
  texture: 5,
  name: "Синяя с полосами"
}, {
  component: 11,
  drawable: 93,
  texture: 6,
  name: "Индиго с полосами"
}, {
  component: 11,
  drawable: 93,
  texture: 7,
  name: "Серая с полосами"
}, {
  component: 11,
  drawable: 93,
  texture: 8,
  name: "Охровая с полосами"
}, {
  component: 11,
  drawable: 93,
  texture: 9,
  name: "Зеленая в клетку"
}, {
  component: 11,
  drawable: 93,
  texture: 10,
  name: "Красная в клетку"
}, {
  component: 11,
  drawable: 93,
  texture: 11,
  name: "Черная в клетку"
}, {
  component: 11,
  drawable: 93,
  texture: 12,
  name: "Бурая в клетку"
}, {
  component: 11,
  drawable: 93,
  texture: 13,
  name: "Индиго в клетку"
}, {
  component: 11,
  drawable: 93,
  texture: 14,
  name: "Белая в клетку"
}, {
  component: 11,
  drawable: 94,
  texture: 0,
  name: "Открытая синяя рубашка"
}, {
  component: 11,
  drawable: 94,
  texture: 1,
  name: "Открытая коричневая рубашка"
}, {
  component: 11,
  drawable: 94,
  texture: 2,
  name: "Открытая зеленая рубашка"
}, {
  component: 11,
  drawable: 94,
  texture: 3,
  name: "Открытая рубашка индиго"
}, {
  component: 11,
  drawable: 94,
  texture: 4,
  name: "Открытая охровая рубашка"
}, {
  component: 11,
  drawable: 94,
  texture: 5,
  name: "Открытая, с синими полосами"
}, {
  component: 11,
  drawable: 94,
  texture: 6,
  name: "Открытая, с полосами индиго"
}, {
  component: 11,
  drawable: 94,
  texture: 7,
  name: "Открытая, с серыми полосами"
}, {
  component: 11,
  drawable: 94,
  texture: 8,
  name: "Открытая, с бурыми полосами"
}, {
  component: 11,
  drawable: 94,
  texture: 9,
  name: "Открытая, в зеленую клетку"
}, {
  component: 11,
  drawable: 94,
  texture: 10,
  name: "Открытая, в красную клетку"
}, {
  component: 11,
  drawable: 94,
  texture: 11,
  name: "Открытая, в черную клетку"
}, {
  component: 11,
  drawable: 94,
  texture: 12,
  name: "Открытая, в бурую клетку"
}, {
  component: 11,
  drawable: 94,
  texture: 13,
  name: "Открытая, в клетку индиго"
}, {
  component: 11,
  drawable: 94,
  texture: 14,
  name: "Открытая, в белую клетку"
}, {
  component: 4,
  drawable: 45,
  texture: 0,
  name: "Синие широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 1,
  name: "Бордовые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 2,
  name: "Бежевые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 3,
  name: "Васильковые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 4,
  name: "Красные широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 5,
  name: "Голубые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 6,
  name: "Оранжевые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 7,
  name: "Фиолетовые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 8,
  name: "Серые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 9,
  name: "Зеленые широкие штаны"
}, {
  component: 4,
  drawable: 45,
  texture: 10,
  name: "Белые широкие штаны"
}, {
  component: 6,
  drawable: 36,
  texture: 0,
  name: "Синие ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 1,
  name: "Ярко-розовые ковбойские"
}, {
  component: 6,
  drawable: 36,
  texture: 2,
  name: "Белые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 3,
  name: "Красные ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 4,
  name: "Бордовые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 5,
  name: "Алые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 6,
  name: "Зеленые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 7,
  name: "Фиолетовые ковбойские"
}, {
  component: 6,
  drawable: 36,
  texture: 8,
  name: "Оранжевые ковбойские"
}, {
  component: 6,
  drawable: 36,
  texture: 9,
  name: "Темно-синие ковбойские"
}, {
  component: 6,
  drawable: 36,
  texture: 10,
  name: "Розовые ковбойские сапоги"
}, {
  component: 7,
  drawable: 113,
  texture: 0,
  name: "Золотое ожерелье"
}, {
  component: 7,
  drawable: 113,
  texture: 1,
  name: "Жемчужное ожерелье"
}, {
  component: 8,
  drawable: 68,
  texture: 0,
  name: "Синяя рубашка под свитер"
}, {
  component: 8,
  drawable: 68,
  texture: 1,
  name: "Черная рубашка под свитер"
}, {
  component: 8,
  drawable: 68,
  texture: 2,
  name: "Клетчатая, под свитер"
}, {
  component: 8,
  drawable: 69,
  texture: 0,
  name: "Серая водолазка"
}, {
  component: 8,
  drawable: 69,
  texture: 1,
  name: "Красная водолазка"
}, {
  component: 8,
  drawable: 69,
  texture: 2,
  name: "Коричневая водолазка"
}, {
  component: 8,
  drawable: 69,
  texture: 3,
  name: "Черная водолазка"
}, {
  component: 8,
  drawable: 69,
  texture: 4,
  name: "Темно-синяя водолазка"
}, {
  component: 8,
  drawable: 69,
  texture: 5,
  name: "Бежевая водолазка"
}, {
  component: 8,
  drawable: 69,
  texture: 6,
  name: "Фиолетовая водолазка"
}, {
  component: 8,
  drawable: 69,
  texture: 7,
  name: "Зеленая водолазка"
}, {
  component: 11,
  drawable: 96,
  texture: 0,
  name: "Куртка SecuroServ"
}, {
  component: 11,
  drawable: 97,
  texture: 0,
  name: "Бомбер SecuroServ"
}, {
  component: 11,
  drawable: 98,
  texture: 0,
  name: "Темно-синяя поло Liberty"
}, {
  component: 11,
  drawable: 100,
  texture: 0,
  name: "Розовая, заправленная"
}, {
  component: 11,
  drawable: 101,
  texture: 0,
  name: "Черная толстовка Liberty"
}, {
  component: 11,
  drawable: 101,
  texture: 1,
  name: "Красная толстовка Liberty"
}, {
  component: 11,
  drawable: 101,
  texture: 2,
  name: "Белая Flying Bravo"
}, {
  component: 11,
  drawable: 102,
  texture: 0,
  name: "Королевская рубашка"
}, {
  component: 11,
  drawable: 102,
  texture: 1,
  name: "Рубашка с цветочным принтом"
}, {
  component: 11,
  drawable: 102,
  texture: 2,
  name: "Красочная рубашка"
}, {
  component: 11,
  drawable: 102,
  texture: 3,
  name: "Рубашка с голубым узором"
}, {
  component: 11,
  drawable: 102,
  texture: 4,
  name: "Рубашка с цветочным узором"
}, {
  component: 11,
  drawable: 102,
  texture: 5,
  name: "Ацтекская рубашка"
}, {
  component: 11,
  drawable: 102,
  texture: 6,
  name: "Вылинявшая рубашка"
}, {
  component: 11,
  drawable: 103,
  texture: 0,
  name: "Серая стеганка"
}, {
  component: 11,
  drawable: 103,
  texture: 1,
  name: "Стеганка цвета хаки"
}, {
  component: 11,
  drawable: 103,
  texture: 2,
  name: "Синяя стеганка"
}, {
  component: 11,
  drawable: 103,
  texture: 3,
  name: "Бежевая стеганка"
}, {
  component: 11,
  drawable: 103,
  texture: 4,
  name: "Коричневая стеганка"
}, {
  component: 11,
  drawable: 103,
  texture: 5,
  name: "Зеленая стеганка"
}, {
  component: 11,
  drawable: 103,
  texture: 6,
  name: "Черная стеганка"
}, {
  component: 11,
  drawable: 104,
  texture: 0,
  name: "Безрукавка с ромбами QB"
}, {
  component: 11,
  drawable: 104,
  texture: 1,
  name: "Темно-синяя безрукавка QB"
}, {
  component: 11,
  drawable: 104,
  texture: 2,
  name: "Синяя безрукавка Perseus"
}, {
  component: 11,
  drawable: 105,
  texture: 0,
  name: "Шоколадная полевая куртка"
}, {
  component: 11,
  drawable: 105,
  texture: 1,
  name: "Черная полевая куртка"
}, {
  component: 11,
  drawable: 105,
  texture: 2,
  name: "Коричневая полевая куртка"
}, {
  component: 11,
  drawable: 107,
  texture: 0,
  name: "Серо-голубой френч"
}, {
  component: 11,
  drawable: 107,
  texture: 1,
  name: "Светло-серый френч"
}, {
  component: 11,
  drawable: 107,
  texture: 2,
  name: "Серый френч"
}, {
  component: 11,
  drawable: 107,
  texture: 3,
  name: "Темно-серый френч"
}, {
  component: 11,
  drawable: 107,
  texture: 4,
  name: "Синий френч"
}, {
  component: 11,
  drawable: 107,
  texture: 5,
  name: "Темно-синий френч"
}, {
  component: 11,
  drawable: 107,
  texture: 6,
  name: "Черный френч"
}, {
  component: 11,
  drawable: 107,
  texture: 7,
  name: "Черный френч в полоску"
}, {
  component: 11,
  drawable: 107,
  texture: 8,
  name: "Синий френч в полоску"
}, {
  component: 11,
  drawable: 107,
  texture: 9,
  name: "Светло-коричневый френч"
}, {
  component: 11,
  drawable: 107,
  texture: 10,
  name: "Бордовый френч"
}, {
  component: 11,
  drawable: 107,
  texture: 11,
  name: "Фиолетовый френч"
}, {
  component: 11,
  drawable: 107,
  texture: 12,
  name: "Розовый френч"
}, {
  component: 11,
  drawable: 107,
  texture: 13,
  name: "Рябиновый френч в полоску"
}, {
  component: 11,
  drawable: 107,
  texture: 14,
  name: "Зеленоватый френч"
}, {
  component: 11,
  drawable: 108,
  texture: 0,
  name: "Синяя олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 1,
  name: "Бордовая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 2,
  name: "Бежевая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 3,
  name: "Полевая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 4,
  name: "Васильковая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 5,
  name: "Белая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 6,
  name: "Голубая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 7,
  name: "Малиновая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 8,
  name: "Трехцветная олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 9,
  name: "Серая олимпийка"
}, {
  component: 11,
  drawable: 108,
  texture: 10,
  name: "Серо-зеленая олимпийка"
}, {
  component: 11,
  drawable: 109,
  texture: 0,
  name: "Черное кашемировое пальто"
}, {
  component: 11,
  drawable: 109,
  texture: 1,
  name: "Бурое кашемировое пальто"
}, {
  component: 11,
  drawable: 109,
  texture: 2,
  name: "Светлое кашемировое пальто"
}, {
  component: 11,
  drawable: 111,
  texture: 0,
  name: "Пастельно-синяя пижама"
}, {
  component: 11,
  drawable: 111,
  texture: 1,
  name: "Пастельно-желтая пижама"
}, {
  component: 11,
  drawable: 111,
  texture: 2,
  name: "Пастельно-розовая пижама"
}, {
  component: 11,
  drawable: 111,
  texture: 3,
  name: "Пастельно-зеленая пижама"
}, {
  component: 11,
  drawable: 111,
  texture: 4,
  name: "Красочная пижама в клетку"
}, {
  component: 11,
  drawable: 111,
  texture: 5,
  name: "Синяя пижама в клетку"
}, {
  component: 11,
  drawable: 111,
  texture: 6,
  name: "Красная пижама с мотивом"
}, {
  component: 11,
  drawable: 111,
  texture: 7,
  name: "Белая пижама с рисунком"
}, {
  component: 11,
  drawable: 111,
  texture: 8,
  name: "Синяя пижама с завитками"
}, {
  component: 11,
  drawable: 111,
  texture: 9,
  name: "Желтая пижама с завитками"
}, {
  component: 11,
  drawable: 111,
  texture: 10,
  name: "Красная пижама с завитками"
}, {
  component: 11,
  drawable: 111,
  texture: 11,
  name: "Синяя пижама в полоску"
}, {
  component: 11,
  drawable: 111,
  texture: 12,
  name: "Пижама в широкую полоску"
}, {
  component: 11,
  drawable: 111,
  texture: 13,
  name: "Оранжевая пижама в полоску"
}, {
  component: 11,
  drawable: 112,
  texture: 0,
  name: "Пастельно-синий жакет"
}, {
  component: 11,
  drawable: 112,
  texture: 1,
  name: "Пастельно-желтый жакет"
}, {
  component: 11,
  drawable: 112,
  texture: 2,
  name: "Пастельно-розовый жакет"
}, {
  component: 11,
  drawable: 112,
  texture: 3,
  name: "Пастельно-зеленый жакет"
}, {
  component: 11,
  drawable: 112,
  texture: 4,
  name: "Красочный жакет в клетку"
}, {
  component: 11,
  drawable: 112,
  texture: 5,
  name: "Синий жакет в клетку"
}, {
  component: 11,
  drawable: 112,
  texture: 6,
  name: "Красный жакет с мотивом"
}, {
  component: 11,
  drawable: 112,
  texture: 7,
  name: "Белый жакет с рисунком"
}, {
  component: 11,
  drawable: 112,
  texture: 8,
  name: "Синий жакет с завитками"
}, {
  component: 11,
  drawable: 112,
  texture: 9,
  name: "Желтый жакет с завитками"
}, {
  component: 11,
  drawable: 112,
  texture: 10,
  name: "Красный жакет с завитками"
}, {
  component: 11,
  drawable: 112,
  texture: 11,
  name: "Синий жакет в полоску"
}, {
  component: 11,
  drawable: 112,
  texture: 12,
  name: "Жакет в широкую полоску"
}, {
  component: 11,
  drawable: 112,
  texture: 13,
  name: "Оранжевый жакет в полоску"
}, {
  component: 3,
  drawable: 99,
  texture: 0,
  name: "Гоночные перчатки"
}, {
  component: 3,
  drawable: 100,
  texture: 0,
  name: "Перчатки для мотокросса"
}, {
  component: 4,
  drawable: 50,
  texture: 0,
  name: "Треники с черепами"
}, {
  component: 4,
  drawable: 50,
  texture: 1,
  name: "Камуфляжные треники"
}, {
  component: 4,
  drawable: 50,
  texture: 2,
  name: "Серые камуфляжные треники"
}, {
  component: 4,
  drawable: 50,
  texture: 3,
  name: "Треники со звездами"
}, {
  component: 4,
  drawable: 50,
  texture: 8,
  name: "Треники Lazer Force"
}, {
  component: 4,
  drawable: 50,
  texture: 9,
  name: "Треники Бессильная злоба"
}, {
  component: 4,
  drawable: 50,
  texture: 10,
  name: "Треники Hamburgers"
}, {
  component: 4,
  drawable: 50,
  texture: 11,
  name: "Треники Up-n-Atom"
}, {
  component: 4,
  drawable: 50,
  texture: 12,
  name: "Треники Barfs"
}, {
  component: 4,
  drawable: 50,
  texture: 13,
  name: "Треники Bubblegum"
}, {
  component: 4,
  drawable: 50,
  texture: 14,
  name: "Яркие камуфляжные треники"
}, {
  component: 4,
  drawable: 50,
  texture: 15,
  name: "Треники Space Ranger"
}, {
  component: 4,
  drawable: 50,
  texture: 16,
  name: "Треники Sprunk"
}, {
  component: 4,
  drawable: 50,
  texture: 17,
  name: "Треники с рябью"
}, {
  component: 11,
  drawable: 117,
  texture: 0,
  name: "Черный с драконами"
}, {
  component: 11,
  drawable: 117,
  texture: 1,
  name: "Синий с драконами"
}, {
  component: 11,
  drawable: 117,
  texture: 2,
  name: "Черный с рыбами"
}, {
  component: 11,
  drawable: 117,
  texture: 3,
  name: "Белый с тиграми"
}, {
  component: 11,
  drawable: 117,
  texture: 4,
  name: "Желтый с солнцами"
}, {
  component: 11,
  drawable: 117,
  texture: 5,
  name: "Пурпурный с солнцами"
}, {
  component: 11,
  drawable: 117,
  texture: 6,
  name: "Синий с сакурой"
}, {
  component: 11,
  drawable: 117,
  texture: 7,
  name: "Белоснежный с сакурой"
}, {
  component: 11,
  drawable: 117,
  texture: 8,
  name: "Охровый с драконами"
}, {
  component: 11,
  drawable: 117,
  texture: 9,
  name: "Сине-зеленый с драконами"
}, {
  component: 11,
  drawable: 117,
  texture: 10,
  name: "Синий с рыбами"
}, {
  component: 11,
  drawable: 117,
  texture: 11,
  name: "Бежевый с тиграми"
}, {
  component: 11,
  drawable: 118,
  texture: 0,
  name: "Бурая куртка ДК"
}, {
  component: 11,
  drawable: 118,
  texture: 1,
  name: "Черная куртка ДК"
}, {
  component: 11,
  drawable: 118,
  texture: 2,
  name: "Серая куртка ДК"
}, {
  component: 11,
  drawable: 118,
  texture: 3,
  name: "Синяя куртка ДК"
}, {
  component: 11,
  drawable: 118,
  texture: 4,
  name: "Бежевая куртка ДК"
}, {
  component: 11,
  drawable: 118,
  texture: 5,
  name: "Бордовая куртка ДК"
}, {
  component: 11,
  drawable: 119,
  texture: 0,
  name: "Розово-черная джерси"
}, {
  component: 11,
  drawable: 119,
  texture: 1,
  name: "Пестрая джерси"
}, {
  component: 11,
  drawable: 119,
  texture: 2,
  name: "Джерси Atomic"
}, {
  component: 11,
  drawable: 119,
  texture: 3,
  name: "Джерси Экстрим"
}, {
  component: 11,
  drawable: 119,
  texture: 4,
  name: "Пятнистая джерси"
}, {
  component: 11,
  drawable: 119,
  texture: 5,
  name: "Джерси Rays"
}, {
  component: 11,
  drawable: 119,
  texture: 6,
  name: "Джерси Сила"
}, {
  component: 11,
  drawable: 119,
  texture: 7,
  name: "Джерси Радикально"
}, {
  component: 11,
  drawable: 119,
  texture: 8,
  name: "Джерси Турбо"
}, {
  component: 11,
  drawable: 119,
  texture: 9,
  name: "Джерси Слалом"
}, {
  component: 11,
  drawable: 119,
  texture: 10,
  name: "Вишневая джерси"
}, {
  component: 11,
  drawable: 119,
  texture: 11,
  name: "Джерси Ускорение"
}, {
  component: 11,
  drawable: 119,
  texture: 12,
  name: "Джерси Драйв"
}, {
  component: 11,
  drawable: 119,
  texture: 13,
  name: "Бело-желтая джерси"
}, {
  component: 11,
  drawable: 119,
  texture: 14,
  name: "Джерси Отрава"
}, {
  component: 11,
  drawable: 119,
  texture: 15,
  name: "Джерси Накачка"
}, {
  component: 11,
  drawable: 120,
  texture: 0,
  name: "Красная атласная куртка"
}, {
  component: 11,
  drawable: 120,
  texture: 1,
  name: "Черная атласная куртка"
}, {
  component: 11,
  drawable: 120,
  texture: 2,
  name: "Белая атласная куртка"
}, {
  component: 11,
  drawable: 120,
  texture: 3,
  name: "Синяя атласная куртка"
}, {
  component: 11,
  drawable: 120,
  texture: 4,
  name: "Оранжевая атласная куртка"
}, {
  component: 11,
  drawable: 120,
  texture: 5,
  name: "Коричневая атласная куртка"
}, {
  component: 11,
  drawable: 120,
  texture: 6,
  name: "Зеленая атласная куртка"
}, {
  component: 11,
  drawable: 120,
  texture: 7,
  name: "Атласная куртка хаки"
}, {
  component: 11,
  drawable: 120,
  texture: 8,
  name: "Атласная куртка каскадера"
}, {
  component: 11,
  drawable: 120,
  texture: 9,
  name: "Атласная куртка Смерть"
}, {
  component: 11,
  drawable: 120,
  texture: 10,
  name: "Атласная куртка Молния"
}, {
  component: 11,
  drawable: 120,
  texture: 11,
  name: "Атласная куртка Grotti"
}, {
  component: 11,
  drawable: 120,
  texture: 12,
  name: "Атласная куртка Howizter"
}, {
  component: 11,
  drawable: 120,
  texture: 13,
  name: "Атласная куртка Imponte"
}, {
  component: 11,
  drawable: 120,
  texture: 14,
  name: "Атласная куртка Love Fist"
}, {
  component: 11,
  drawable: 120,
  texture: 15,
  name: "Атласная куртка Малибу"
}, {
  component: 11,
  drawable: 120,
  texture: 16,
  name: "Атласная куртка Nagasaki"
}, {
  component: 11,
  drawable: 120,
  texture: 17,
  name: "Атласная куртка Rebel Radio"
}, {
  component: 11,
  drawable: 120,
  texture: 18,
  name: "Атласная куртка Steel Horse"
}, {
  component: 11,
  drawable: 120,
  texture: 19,
  name: "Атласная куртка Me TV"
}, {
  component: 11,
  drawable: 120,
  texture: 20,
  name: "Атласная куртка Vice Squad"
}, {
  component: 11,
  drawable: 120,
  texture: 21,
  name: "Атласная куртка V-Rock"
}, {
  component: 11,
  drawable: 121,
  texture: 0,
  name: "Мотокуртка Ruiner"
}, {
  component: 11,
  drawable: 121,
  texture: 1,
  name: "Мотокуртка Banshee"
}, {
  component: 11,
  drawable: 121,
  texture: 2,
  name: "Мотокуртка Pigalle"
}, {
  component: 11,
  drawable: 121,
  texture: 3,
  name: "Мотокуртка Grotti"
}, {
  component: 11,
  drawable: 121,
  texture: 4,
  name: "Мотокуртка Pegassi"
}, {
  component: 11,
  drawable: 121,
  texture: 5,
  name: "Мотокуртка Pfister"
}, {
  component: 11,
  drawable: 121,
  texture: 6,
  name: "Мотокуртка Ocelot"
}, {
  component: 11,
  drawable: 121,
  texture: 7,
  name: "Мотокуртка Dinka"
}, {
  component: 11,
  drawable: 123,
  texture: 0,
  name: "Бурая с логотипом ДК"
}, {
  component: 11,
  drawable: 123,
  texture: 1,
  name: "Черная с логотипом ДК"
}, {
  component: 11,
  drawable: 123,
  texture: 2,
  name: "Серая с логотипом ДК"
}, {
  component: 11,
  drawable: 123,
  texture: 3,
  name: "Синяя с логотипом ДК"
}, {
  component: 11,
  drawable: 123,
  texture: 4,
  name: "Бежевая с логотипом ДК"
}, {
  component: 11,
  drawable: 123,
  texture: 5,
  name: "Бордовая с логотипом ДК"
}, {
  component: 1,
  drawable: 75,
  texture: 0,
  name: "Морское чудище-амфибия"
}, {
  component: 1,
  drawable: 75,
  texture: 1,
  name: "Морское чудище-чужой"
}, {
  component: 1,
  drawable: 75,
  texture: 2,
  name: "Морское чудище-рептилия"
}, {
  component: 1,
  drawable: 75,
  texture: 3,
  name: "Морское чудище-пришелец"
}, {
  component: 1,
  drawable: 75,
  texture: 4,
  name: "Морское чудище-божество"
}, {
  component: 1,
  drawable: 75,
  texture: 5,
  name: "Морское чудище-демон"
}, {
  component: 1,
  drawable: 76,
  texture: 0,
  name: "Полосатый динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 1,
  name: "Серый динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 2,
  name: "Тропический динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 3,
  name: "Земляной динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 4,
  name: "Динозавр из джунглей"
}, {
  component: 1,
  drawable: 76,
  texture: 5,
  name: "Опасный динозавр"
}, {
  component: 1,
  drawable: 77,
  texture: 0,
  name: "Красный Они"
}, {
  component: 1,
  drawable: 77,
  texture: 1,
  name: "Синий Они"
}, {
  component: 1,
  drawable: 77,
  texture: 2,
  name: "Белый Они"
}, {
  component: 1,
  drawable: 77,
  texture: 3,
  name: "Черный Они"
}, {
  component: 1,
  drawable: 77,
  texture: 4,
  name: "Золотой демон"
}, {
  component: 1,
  drawable: 78,
  texture: 0,
  name: "Красный клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 1,
  name: "Синий клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 2,
  name: "Зеленый клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 3,
  name: "Оранжевый клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 4,
  name: "Клоун-падальщик"
}, {
  component: 1,
  drawable: 78,
  texture: 5,
  name: "Неоновый клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 6,
  name: "Клоун-франкенштейн"
}, {
  component: 1,
  drawable: 78,
  texture: 7,
  name: "Злобный клоун"
}, {
  component: 1,
  drawable: 79,
  texture: 0,
  name: "Безумная горилла"
}, {
  component: 1,
  drawable: 79,
  texture: 1,
  name: "Безумный орангутан"
}, {
  component: 1,
  drawable: 79,
  texture: 2,
  name: "Безумная серая обезьяна"
}, {
  component: 1,
  drawable: 79,
  texture: 3,
  name: "Безумный альбинос"
}, {
  component: 1,
  drawable: 80,
  texture: 0,
  name: "Гнедая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 1,
  name: "Вороная лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 2,
  name: "Серая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 3,
  name: "Бурая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 4,
  name: "Пегая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 5,
  name: "Зебра"
}, {
  component: 1,
  drawable: 81,
  texture: 0,
  name: "Единорог"
}, {
  component: 1,
  drawable: 82,
  texture: 0,
  name: "Красный узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 1,
  name: "Серебряный узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 2,
  name: "Синий узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 3,
  name: "Бирюзовый узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 4,
  name: "Белый узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 5,
  name: "Черный узорный череп"
}, {
  component: 1,
  drawable: 83,
  texture: 0,
  name: "Мопс Моу"
}, {
  component: 1,
  drawable: 83,
  texture: 1,
  name: "Черный мопс"
}, {
  component: 1,
  drawable: 83,
  texture: 2,
  name: "Серый мопс"
}, {
  component: 1,
  drawable: 83,
  texture: 3,
  name: "Коричневый мопс"
}, {
  component: 1,
  drawable: 83,
  texture: 4,
  name: "Мопс Жозефина"
}, {
  component: 1,
  drawable: 83,
  texture: 5,
  name: "Черно-бежевый мопс"
}, {
  component: 1,
  drawable: 84,
  texture: 0,
  name: "Оранжевая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 1,
  name: "Синяя маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 2,
  name: "Фиолетовая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 3,
  name: "Желтая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 4,
  name: "Осенняя маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 5,
  name: "Серая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 6,
  name: "Камуфляжная маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 7,
  name: "Серая камуфл. маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 8,
  name: "Коричневая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 9,
  name: "Черная маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 10,
  name: "Полосатая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 11,
  name: "Яркая Bigness с рисунком"
}, {
  component: 1,
  drawable: 84,
  texture: 12,
  name: "Светлая Bigness с рисунком"
}, {
  component: 1,
  drawable: 84,
  texture: 13,
  name: "Серая Bigness с рисунком"
}, {
  component: 1,
  drawable: 84,
  texture: 14,
  name: "Серая леопардовая Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 15,
  name: "Синяя камуфляжная Bigness"
}, {
  component: 4,
  drawable: 52,
  texture: 0,
  name: "Коричневые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 52,
  texture: 1,
  name: "Камуфляжные штаны лоу-кротч"
}, {
  component: 4,
  drawable: 52,
  texture: 2,
  name: "Черные штаны лоу-кротч"
}, {
  component: 4,
  drawable: 52,
  texture: 3,
  name: "Голубые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 52,
  texture: 4,
  name: "Светло-серые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 52,
  texture: 5,
  name: "Серые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 52,
  texture: 6,
  name: "Штаны лоу-кротч с ромбами"
}, {
  component: 4,
  drawable: 52,
  texture: 7,
  name: "Штаны лоу-кротч в полоску"
}, {
  component: 4,
  drawable: 53,
  texture: 1,
  name: "Красные штаны лоу-кротч"
}, {
  component: 4,
  drawable: 53,
  texture: 2,
  name: "Белые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 54,
  texture: 0,
  name: "Коричневые бриджи"
}, {
  component: 4,
  drawable: 54,
  texture: 1,
  name: "Камуфляжные бриджи"
}, {
  component: 4,
  drawable: 54,
  texture: 2,
  name: "Черные бриджи"
}, {
  component: 4,
  drawable: 54,
  texture: 3,
  name: "Голубые бриджи"
}, {
  component: 4,
  drawable: 54,
  texture: 4,
  name: "Светло-серые бриджи"
}, {
  component: 4,
  drawable: 54,
  texture: 5,
  name: "Серые бриджи"
}, {
  component: 4,
  drawable: 54,
  texture: 6,
  name: "Бриджи с ромбами"
}, {
  component: 4,
  drawable: 54,
  texture: 7,
  name: "Бриджи в полоску"
}, {
  component: 4,
  drawable: 55,
  texture: 1,
  name: "Красные бриджи"
}, {
  component: 4,
  drawable: 55,
  texture: 2,
  name: "Белые бриджи"
}, {
  component: 4,
  drawable: 56,
  texture: 0,
  name: "Синие лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 1,
  name: "Серо-синие лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 2,
  name: "Классические лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 3,
  name: "Серые лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 4,
  name: "Черные лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 5,
  name: "Потертые синие лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 6,
  name: "Потертые сизые лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 7,
  name: "Потертые строгие лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 8,
  name: "Потертые серые лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 9,
  name: "Потертые черные лоу-кротч"
}, {
  component: 4,
  drawable: 57,
  texture: 1,
  name: "Красные лоу-кротч"
}, {
  component: 4,
  drawable: 57,
  texture: 2,
  name: "Белые лоу-кротч"
}, {
  component: 4,
  drawable: 57,
  texture: 3,
  name: "Коричневые лоу-кротч"
}, {
  component: 6,
  drawable: 42,
  texture: 0,
  name: "Персиковые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 2,
  name: "Бледно-голубые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 3,
  name: "Бронзовые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 4,
  name: "Жемчужные кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 5,
  name: "Медные кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 6,
  name: "Серебряные кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 8,
  name: "Вишневые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 9,
  name: "Белые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 10,
  name: "Черные кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 11,
  name: "Розовые кеды"
}, {
  component: 10,
  drawable: 16,
  texture: 0,
  name: "Задняя эмблема банды"
}, {
  component: 11,
  drawable: 125,
  texture: 0,
  name: "Черная Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 1,
  name: "Серо-синяя Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 2,
  name: "Серая Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 3,
  name: "Пепельная Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 4,
  name: "Белая Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 5,
  name: "Красная Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 6,
  name: "Темно-красная Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 7,
  name: "Персиковая Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 8,
  name: "Охровая Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 9,
  name: "Лаймовая Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 11,
  name: "Шоколадная Longline"
}, {
  component: 11,
  drawable: 125,
  texture: 12,
  name: "Оливковая Longline"
}, {
  component: 11,
  drawable: 126,
  texture: 0,
  name: "Персиковая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 1,
  name: "Красная парка"
}, {
  component: 11,
  drawable: 126,
  texture: 2,
  name: "Коричневая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 3,
  name: "Лаймовая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 4,
  name: "Сине-зеленая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 5,
  name: "Мандариновая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 6,
  name: "Серая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 7,
  name: "Зеленая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 8,
  name: "Пятнистая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 9,
  name: "Охровая парка"
}, {
  component: 11,
  drawable: 126,
  texture: 10,
  name: "Синяя парка"
}, {
  component: 11,
  drawable: 127,
  texture: 0,
  name: "Персиковая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 1,
  name: "Красная расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 2,
  name: "Коричневая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 3,
  name: "Лаймовая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 4,
  name: "Сине-зеленая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 5,
  name: "Мандариновая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 6,
  name: "Серая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 7,
  name: "Зеленая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 8,
  name: "Пятнистая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 9,
  name: "Охровая расстегнутая"
}, {
  component: 11,
  drawable: 127,
  texture: 10,
  name: "Синяя расстегнутая"
}, {
  component: 11,
  drawable: 128,
  texture: 0,
  name: "Серый Sand Castle"
}, {
  component: 11,
  drawable: 128,
  texture: 1,
  name: "Красный Sand Castle"
}, {
  component: 11,
  drawable: 128,
  texture: 2,
  name: "Голубой Sand Castle"
}, {
  component: 11,
  drawable: 128,
  texture: 3,
  name: "Желтый Sand Castle"
}, {
  component: 11,
  drawable: 128,
  texture: 4,
  name: "Камуфляжный Sand Castle"
}, {
  component: 11,
  drawable: 128,
  texture: 5,
  name: "Цветной Sand Castle"
}, {
  component: 11,
  drawable: 128,
  texture: 6,
  name: "Свитер Fruit Squash"
}, {
  component: 11,
  drawable: 128,
  texture: 7,
  name: "Свитер Squash"
}, {
  component: 11,
  drawable: 128,
  texture: 8,
  name: "Свитер Squash с кляксами"
}, {
  component: 11,
  drawable: 128,
  texture: 9,
  name: "Свитер Squash Банан"
}, {
  component: 11,
  drawable: 128,
  texture: 10,
  name: "Свитер Squash Апельсин"
}, {
  component: 11,
  drawable: 128,
  texture: 11,
  name: "Синий свитер Squash"
}, {
  component: 11,
  drawable: 128,
  texture: 12,
  name: "Мятный свитер Squash"
}, {
  component: 11,
  drawable: 128,
  texture: 13,
  name: "Зеленый свитер Squash"
}, {
  component: 11,
  drawable: 128,
  texture: 14,
  name: "Оригинальный свитер Güffy"
}, {
  component: 11,
  drawable: 128,
  texture: 15,
  name: "Яркий свитер Güffy"
}, {
  component: 11,
  drawable: 128,
  texture: 16,
  name: "Güffy Бирюзовый леопард"
}, {
  component: 11,
  drawable: 128,
  texture: 17,
  name: "Güffy Фиолетовый леопард"
}, {
  component: 11,
  drawable: 128,
  texture: 18,
  name: "Скромный свитер G Güffy"
}, {
  component: 11,
  drawable: 128,
  texture: 19,
  name: "Свитер G Güffy Граффити"
}, {
  component: 11,
  drawable: 128,
  texture: 20,
  name: "Разноцветный свитер Manor"
}, {
  component: 11,
  drawable: 128,
  texture: 21,
  name: "Алмазный свитер Manor"
}, {
  component: 11,
  drawable: 128,
  texture: 22,
  name: "Ярко-голубой свитер Manor"
}, {
  component: 11,
  drawable: 128,
  texture: 23,
  name: "Фиолетовый свитер Manor"
}, {
  component: 11,
  drawable: 128,
  texture: 24,
  name: "Черный свитер Manor Brick"
}, {
  component: 11,
  drawable: 128,
  texture: 25,
  name: "Черный свитер Manor Dem"
}, {
  component: 11,
  drawable: 129,
  texture: 0,
  name: "Зеленый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 129,
  texture: 1,
  name: "Серый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 129,
  texture: 2,
  name: "Розовый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 129,
  texture: 3,
  name: "Белый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 129,
  texture: 4,
  name: "Осенний пуховик Bigness"
}, {
  component: 11,
  drawable: 129,
  texture: 5,
  name: "Bigness Серый леопард"
}, {
  component: 11,
  drawable: 129,
  texture: 6,
  name: "Bigness Бирюзовый леопард"
}, {
  component: 11,
  drawable: 129,
  texture: 7,
  name: "Черный пуховик Bigness"
}, {
  component: 11,
  drawable: 129,
  texture: 8,
  name: "Желтый пуховик Bigness"
}, {
  component: 11,
  drawable: 129,
  texture: 9,
  name: "Красный пуховик Bigness"
}, {
  component: 11,
  drawable: 129,
  texture: 10,
  name: "Розовый пуховик Bigness"
}, {
  component: 11,
  drawable: 129,
  texture: 11,
  name: "Пурпурный пуховик Bigness"
}, {
  component: 11,
  drawable: 129,
  texture: 12,
  name: "Пуховик Bigness с принтом"
}, {
  component: 11,
  drawable: 129,
  texture: 13,
  name: "Пуховик Bigness с узором"
}, {
  component: 11,
  drawable: 129,
  texture: 14,
  name: "Полосатый пуховик Bigness"
}, {
  component: 11,
  drawable: 129,
  texture: 15,
  name: "Bigness Красная зебра"
}, {
  component: 11,
  drawable: 129,
  texture: 16,
  name: "Черный пуховик Güffy"
}, {
  component: 11,
  drawable: 129,
  texture: 17,
  name: "Красный пуховик Güffy"
}, {
  component: 11,
  drawable: 129,
  texture: 18,
  name: "Темно-красный пуховик Güffy"
}, {
  component: 11,
  drawable: 129,
  texture: 19,
  name: "Темно-синий пуховик Güffy"
}, {
  component: 11,
  drawable: 129,
  texture: 20,
  name: "Стилизованный пуховик Güffy"
}, {
  component: 11,
  drawable: 129,
  texture: 21,
  name: "Пуховик G Güffy"
}, {
  component: 11,
  drawable: 129,
  texture: 22,
  name: "Пуховик Güffy с флорой"
}, {
  component: 11,
  drawable: 129,
  texture: 23,
  name: "Пуховик Güffy с листьями"
}, {
  component: 11,
  drawable: 129,
  texture: 25,
  name: "Синий пуховик Güffy"
}, {
  component: 11,
  drawable: 130,
  texture: 0,
  name: "Пепельное пальто"
}, {
  component: 11,
  drawable: 130,
  texture: 1,
  name: "Зеленое камуфляжное пальто"
}, {
  component: 11,
  drawable: 130,
  texture: 2,
  name: "Осеннее камуфляжное пальто"
}, {
  component: 11,
  drawable: 130,
  texture: 3,
  name: "Серое камуфляжное пальто"
}, {
  component: 11,
  drawable: 130,
  texture: 4,
  name: "Пальто с узором"
}, {
  component: 11,
  drawable: 130,
  texture: 6,
  name: "Красное пальто в клетку"
}, {
  component: 11,
  drawable: 130,
  texture: 7,
  name: "Коричневое пальто в клетку"
}, {
  component: 11,
  drawable: 130,
  texture: 8,
  name: "Зеленое пальто в клетку"
}, {
  component: 11,
  drawable: 130,
  texture: 9,
  name: "Серое пальто в клетку"
}, {
  component: 11,
  drawable: 130,
  texture: 10,
  name: "Красное пальто"
}, {
  component: 11,
  drawable: 130,
  texture: 11,
  name: "Темно-красное пальто"
}, {
  component: 11,
  drawable: 131,
  texture: 0,
  name: "Белая Güffy"
}, {
  component: 11,
  drawable: 131,
  texture: 1,
  name: "Неоновая Manor"
}, {
  component: 11,
  drawable: 131,
  texture: 2,
  name: "Güffy с листьями"
}, {
  component: 11,
  drawable: 131,
  texture: 3,
  name: "Черная Blagueurs"
}, {
  component: 11,
  drawable: 131,
  texture: 4,
  name: "Светло-серая Blagueurs"
}, {
  component: 11,
  drawable: 131,
  texture: 5,
  name: "Bigness с рисунком"
}, {
  component: 11,
  drawable: 131,
  texture: 6,
  name: "OJ Squash"
}, {
  component: 11,
  drawable: 131,
  texture: 7,
  name: "Желтая Squash"
}, {
  component: 11,
  drawable: 131,
  texture: 8,
  name: "Леопардовая Güffy"
}, {
  component: 11,
  drawable: 131,
  texture: 9,
  name: "Белая Güffy (логотип)"
}, {
  component: 11,
  drawable: 131,
  texture: 10,
  name: "Черная Güffy (логотип)"
}, {
  component: 11,
  drawable: 131,
  texture: 11,
  name: "Неоновая Güffy (логотип)"
}, {
  component: 11,
  drawable: 131,
  texture: 12,
  name: "Синяя Sand Castle"
}, {
  component: 11,
  drawable: 131,
  texture: 13,
  name: "Белая Sand Castle"
}, {
  component: 11,
  drawable: 131,
  texture: 14,
  name: "Черная Sand Castle"
}, {
  component: 11,
  drawable: 131,
  texture: 15,
  name: "Разноцветная Sand Castle"
}, {
  component: 11,
  drawable: 131,
  texture: 16,
  name: "Серая Sand Castle"
}, {
  component: 11,
  drawable: 131,
  texture: 17,
  name: "Manor с иллюзией"
}, {
  component: 11,
  drawable: 131,
  texture: 18,
  name: "Bigness с узором"
}, {
  component: 11,
  drawable: 131,
  texture: 19,
  name: "Белая Bigness"
}, {
  component: 11,
  drawable: 131,
  texture: 20,
  name: "Камуфляжная Bigness"
}, {
  component: 11,
  drawable: 131,
  texture: 21,
  name: "Осенняя Bigness"
}, {
  component: 11,
  drawable: 131,
  texture: 22,
  name: "Скейтерская Güffy"
}, {
  component: 11,
  drawable: 131,
  texture: 23,
  name: "Güffy (неоновые листья)"
}, {
  component: 11,
  drawable: 131,
  texture: 24,
  name: "Черно-белая Güffy"
}, {
  component: 11,
  drawable: 131,
  texture: 25,
  name: "Фиолетовая Güffy"
}, {
  component: 11,
  drawable: 132,
  texture: 0,
  name: "Светящийся Санта"
}, {
  component: 11,
  drawable: 132,
  texture: 1,
  name: "Светящийся Эльф"
}, {
  component: 11,
  drawable: 132,
  texture: 2,
  name: "Светящийся Пудинг"
}, {
  component: 11,
  drawable: 133,
  texture: 0,
  name: "Украшенный свитер с Сантой"
}, {
  component: 11,
  drawable: 133,
  texture: 1,
  name: "Украшенный свитер с эльфом"
}, {
  component: 11,
  drawable: 133,
  texture: 2,
  name: "Украшенный свитер с пудингом"
}, {
  component: 11,
  drawable: 134,
  texture: 0,
  name: "Серый светящийся Exsorbeo"
}, {
  component: 11,
  drawable: 134,
  texture: 1,
  name: "Черный светящийся Exsorbeo"
}, {
  component: 11,
  drawable: 134,
  texture: 2,
  name: "Чудовищный светящийся свитер"
}, {
  component: 11,
  drawable: 134,
  texture: 3,
  name: "Светящийся Snowman"
}, {
  component: 11,
  drawable: 134,
  texture: 4,
  name: "Охровый светящийся с оленем"
}, {
  component: 11,
  drawable: 134,
  texture: 5,
  name: "Красный светящийся с оленем"
}, {
  component: 11,
  drawable: 134,
  texture: 6,
  name: "Светящийся Naughty!"
}, {
  component: 11,
  drawable: 134,
  texture: 7,
  name: "Вязаный светящийся Naughty!"
}, {
  component: 11,
  drawable: 134,
  texture: 8,
  name: "Светящийся Holidays"
}, {
  component: 11,
  drawable: 134,
  texture: 9,
  name: "Светящийся Holidays с елкой"
}, {
  component: 11,
  drawable: 134,
  texture: 10,
  name: "Красный светящийся Love Fist"
}, {
  component: 11,
  drawable: 134,
  texture: 11,
  name: "Черный светящийся Love Fist"
}, {
  component: 11,
  drawable: 134,
  texture: 12,
  name: "Красный светящийся с елками"
}, {
  component: 11,
  drawable: 134,
  texture: 13,
  name: "Зеленый светящийся с елками"
}, {
  component: 11,
  drawable: 134,
  texture: 14,
  name: "Красный светящийся с котами"
}, {
  component: 11,
  drawable: 134,
  texture: 15,
  name: "Зеленый светящийся с котами"
}, {
  component: 11,
  drawable: 135,
  texture: 0,
  name: "Серый Exsorbeo"
}, {
  component: 11,
  drawable: 135,
  texture: 1,
  name: "Черный Exsorbeo"
}, {
  component: 11,
  drawable: 135,
  texture: 2,
  name: "Жуткий праздничный свитер"
}, {
  component: 11,
  drawable: 135,
  texture: 3,
  name: "Нарядный со снеговиком"
}, {
  component: 11,
  drawable: 135,
  texture: 4,
  name: "Охровый с оленями"
}, {
  component: 11,
  drawable: 135,
  texture: 5,
  name: "Красный с оленями"
}, {
  component: 11,
  drawable: 135,
  texture: 6,
  name: "Праздничный свитер Naughty!"
}, {
  component: 11,
  drawable: 135,
  texture: 7,
  name: "Вязаный свитер Naughty!"
}, {
  component: 11,
  drawable: 135,
  texture: 8,
  name: "Нарядный свитер Holidays"
}, {
  component: 11,
  drawable: 135,
  texture: 9,
  name: "Нарядный Holidays с елкой"
}, {
  component: 11,
  drawable: 135,
  texture: 10,
  name: "Красный Love Fist"
}, {
  component: 11,
  drawable: 135,
  texture: 11,
  name: "Черный Love Fist"
}, {
  component: 11,
  drawable: 135,
  texture: 12,
  name: "Красный с деревьями"
}, {
  component: 11,
  drawable: 135,
  texture: 13,
  name: "Зеленый нарядный с елками"
}, {
  component: 11,
  drawable: 135,
  texture: 14,
  name: "Красный с кошками"
}, {
  component: 11,
  drawable: 135,
  texture: 15,
  name: "Зеленый с кошками"
}, {
  component: 11,
  drawable: 136,
  texture: 0,
  name: "Синий светящийся с елками"
}, {
  component: 11,
  drawable: 136,
  texture: 2,
  name: "Серый светящийся с оленем"
}, {
  component: 11,
  drawable: 136,
  texture: 3,
  name: "Светящийся Noel"
}, {
  component: 11,
  drawable: 136,
  texture: 4,
  name: "Серый светящийся с елками"
}, {
  component: 11,
  drawable: 136,
  texture: 5,
  name: "Светящийся Праздничный"
}, {
  component: 11,
  drawable: 136,
  texture: 6,
  name: "Красный светящийся с узором"
}, {
  component: 11,
  drawable: 136,
  texture: 7,
  name: "Зеленый светящийся с узором"
}, {
  component: 11,
  drawable: 137,
  texture: 0,
  name: "Синий шерстяной с деревьями"
}, {
  component: 11,
  drawable: 137,
  texture: 1,
  name: "Красный шерстяной с оленями"
}, {
  component: 11,
  drawable: 137,
  texture: 2,
  name: "Серый шерстяной с оленями"
}, {
  component: 11,
  drawable: 137,
  texture: 3,
  name: "Шерстяной свитер Noel"
}, {
  component: 11,
  drawable: 137,
  texture: 4,
  name: "Серый шерстяной с деревьями"
}, {
  component: 11,
  drawable: 137,
  texture: 5,
  name: "Шерстяной Праздничный"
}, {
  component: 11,
  drawable: 137,
  texture: 6,
  name: "Красный шерстяной с узором"
}, {
  component: 11,
  drawable: 137,
  texture: 7,
  name: "Зеленый шерстяной с узором"
}, {
  component: 11,
  drawable: 138,
  texture: 0,
  name: "Оранжевая Squash"
}, {
  component: 11,
  drawable: 138,
  texture: 1,
  name: "Squash с кляксами"
}, {
  component: 11,
  drawable: 138,
  texture: 3,
  name: "Зеленая Blagueurs"
}, {
  component: 11,
  drawable: 138,
  texture: 4,
  name: "Разноцветная Squash"
}, {
  component: 11,
  drawable: 138,
  texture: 5,
  name: "Темно-синяя Güffy"
}, {
  component: 11,
  drawable: 138,
  texture: 6,
  name: "Зеленая Güffy"
}, {
  component: 11,
  drawable: 138,
  texture: 11,
  name: "Светло-серая Bigness"
}, {
  component: 11,
  drawable: 138,
  texture: 12,
  name: "Красная камуфляжная Bigness"
}, {
  component: 11,
  drawable: 138,
  texture: 13,
  name: "Разноцветная Bigness"
}, {
  component: 11,
  drawable: 138,
  texture: 14,
  name: "Черная Bigness"
}, {
  component: 11,
  drawable: 138,
  texture: 15,
  name: "Оранжевая Sand Castle"
}, {
  component: 11,
  drawable: 138,
  texture: 16,
  name: "Серая Güffy"
}, {
  component: 11,
  drawable: 138,
  texture: 17,
  name: "Güffy с заплатами"
}, {
  component: 11,
  drawable: 138,
  texture: 18,
  name: "Белая Squash"
}, {
  component: 11,
  drawable: 138,
  texture: 19,
  name: "Красная Squash"
}, {
  component: 11,
  drawable: 138,
  texture: 20,
  name: "Коричневая Blagueurs"
}, {
  component: 11,
  drawable: 138,
  texture: 21,
  name: "Лиловая камуфляжная Bigness"
}, {
  component: 11,
  drawable: 138,
  texture: 22,
  name: "Светло-серая Manor"
}, {
  component: 11,
  drawable: 138,
  texture: 23,
  name: "Бежевая Manor"
}, {
  component: 11,
  drawable: 138,
  texture: 24,
  name: "Черная Manor"
}, {
  component: 11,
  drawable: 138,
  texture: 25,
  name: "Белая Manor"
}, {
  component: 11,
  drawable: 140,
  texture: 0,
  name: "Черная без рукавов"
}, {
  component: 11,
  drawable: 140,
  texture: 1,
  name: "Темно-серая без рукавов"
}, {
  component: 11,
  drawable: 140,
  texture: 2,
  name: "Серая без рукавов"
}, {
  component: 11,
  drawable: 140,
  texture: 3,
  name: "Пепельная без рукавов"
}, {
  component: 11,
  drawable: 140,
  texture: 4,
  name: "Зеленая без рукавов"
}, {
  component: 1,
  drawable: 86,
  texture: 0,
  name: "Бордовая маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 1,
  name: "Бурая маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 2,
  name: "Черная маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 3,
  name: "Бежевая маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 4,
  name: "Бордовая маска с фильтром"
}, {
  component: 1,
  drawable: 86,
  texture: 5,
  name: "Бурая маска с фильтром"
}, {
  component: 1,
  drawable: 86,
  texture: 6,
  name: "Черная маска с фильтром"
}, {
  component: 1,
  drawable: 86,
  texture: 7,
  name: "Бежевая маска с фильтром"
}, {
  component: 4,
  drawable: 60,
  texture: 0,
  name: "Черные простые штаны"
}, {
  component: 4,
  drawable: 60,
  texture: 1,
  name: "Бордовые простые штаны"
}, {
  component: 4,
  drawable: 60,
  texture: 2,
  name: "Бурые простые штаны"
}, {
  component: 4,
  drawable: 60,
  texture: 3,
  name: "Старые черные простые"
}, {
  component: 4,
  drawable: 60,
  texture: 4,
  name: "Старые красные простые"
}, {
  component: 4,
  drawable: 60,
  texture: 5,
  name: "Старые бурые простые"
}, {
  component: 4,
  drawable: 62,
  texture: 0,
  name: "Черные штаны с защитой"
}, {
  component: 4,
  drawable: 62,
  texture: 1,
  name: "Бордовые штаны с защитой"
}, {
  component: 4,
  drawable: 62,
  texture: 2,
  name: "Бурые штаны с защитой"
}, {
  component: 4,
  drawable: 62,
  texture: 3,
  name: "Старые черные с защитой"
}, {
  component: 4,
  drawable: 62,
  texture: 4,
  name: "Старые бордовые с защитой"
}, {
  component: 4,
  drawable: 62,
  texture: 5,
  name: "Старые бурые с защитой"
}, {
  component: 4,
  drawable: 64,
  texture: 0,
  name: "Джинсы индиго со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 1,
  name: "Антрацитовые со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 2,
  name: "Потертые джинсы со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 3,
  name: "Темно-синие со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 4,
  name: "Обычные джинсы со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 5,
  name: "Темные джинсы со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 6,
  name: "Сизые джинсы со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 7,
  name: "Черные джинсы со стретчем"
}, {
  component: 4,
  drawable: 65,
  texture: 0,
  name: "Драные джинсы цвета индиго"
}, {
  component: 4,
  drawable: 65,
  texture: 1,
  name: "Антрацитовые драные джинсы"
}, {
  component: 4,
  drawable: 65,
  texture: 2,
  name: "Выцветшие драные джинсы"
}, {
  component: 4,
  drawable: 65,
  texture: 3,
  name: "Темно-синие драные джинсы"
}, {
  component: 4,
  drawable: 65,
  texture: 4,
  name: "Классические драные джинсы"
}, {
  component: 4,
  drawable: 65,
  texture: 5,
  name: "Темные драные джинсы"
}, {
  component: 4,
  drawable: 65,
  texture: 6,
  name: "Сизые драные джинсы"
}, {
  component: 4,
  drawable: 65,
  texture: 7,
  name: "Черные драные джинсы"
}, {
  component: 6,
  drawable: 44,
  texture: 0,
  name: "Черные застегнутые ботинки"
}, {
  component: 6,
  drawable: 44,
  texture: 1,
  name: "Бордовые застегнутые"
}, {
  component: 6,
  drawable: 44,
  texture: 2,
  name: "Бурые застегнутые ботинки"
}, {
  component: 6,
  drawable: 44,
  texture: 3,
  name: "Старые черные застегнутые"
}, {
  component: 6,
  drawable: 44,
  texture: 4,
  name: "Старые бордовые застегнутые"
}, {
  component: 6,
  drawable: 44,
  texture: 5,
  name: "Старые бурые застегнутые"
}, {
  component: 6,
  drawable: 46,
  texture: 0,
  name: "Бежевые ботинки со сбруей"
}, {
  component: 6,
  drawable: 46,
  texture: 1,
  name: "Черные ботинки со сбруей"
}, {
  component: 6,
  drawable: 47,
  texture: 0,
  name: "Черные расстегнутые"
}, {
  component: 6,
  drawable: 47,
  texture: 1,
  name: "Бордовые расстегнутые"
}, {
  component: 6,
  drawable: 47,
  texture: 2,
  name: "Бурые расстегнутые ботинки"
}, {
  component: 6,
  drawable: 47,
  texture: 3,
  name: "Старые черные ботинки"
}, {
  component: 6,
  drawable: 47,
  texture: 4,
  name: "Старые бордовые ботинки"
}, {
  component: 6,
  drawable: 47,
  texture: 5,
  name: "Старые бурые ботинки"
}, {
  component: 8,
  drawable: 78,
  texture: 12,
  name: "Бежевая футболка"
}, {
  component: 8,
  drawable: 78,
  texture: 13,
  name: "Футболка цвета хаки"
}, {
  component: 8,
  drawable: 87,
  texture: 0,
  name: "Кремовый с белой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 1,
  name: "Кремовый с серой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 2,
  name: "Кремовый с синей рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 3,
  name: "Кремовый с рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 4,
  name: "Красный с белой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 5,
  name: "Красный с серой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 6,
  name: "Красный с синей рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 7,
  name: "Красный с рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 8,
  name: "Синий с белой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 9,
  name: "Синий с серой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 10,
  name: "Синий с рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 11,
  name: "Синий с красной рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 12,
  name: "Голубой с белой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 13,
  name: "Голубой с серой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 14,
  name: "Голубой с синей рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 15,
  name: "Голубой с красной рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 16,
  name: "Черный с белой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 17,
  name: "Черный с рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 18,
  name: "Черный с синей рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 19,
  name: "Черный с красной рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 20,
  name: "Белый с рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 21,
  name: "Белый с серой рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 22,
  name: "Белый с синей рубашкой"
}, {
  component: 8,
  drawable: 87,
  texture: 23,
  name: "Белый с красной рубашкой"
}, {
  component: 8,
  drawable: 88,
  texture: 0,
  name: "Кремовый с белой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 1,
  name: "Кремовый с серой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 2,
  name: "Кремовый с синей битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 3,
  name: "Кремовый с битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 4,
  name: "Красный с белой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 5,
  name: "Красный с серой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 6,
  name: "Красный с синей битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 7,
  name: "Красный с битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 8,
  name: "Синий с белой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 9,
  name: "Синий с серой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 10,
  name: "Синий с битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 11,
  name: "Синий с красной битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 12,
  name: "Голубой с белой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 13,
  name: "Голубой с серой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 14,
  name: "Голубой с синей битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 15,
  name: "Голубой с красной битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 16,
  name: "Черный с белой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 17,
  name: "Черный с битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 18,
  name: "Черный с синей битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 19,
  name: "Черный с красной битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 20,
  name: "Белый с битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 21,
  name: "Белый с серой битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 22,
  name: "Белый с синей битловкой"
}, {
  component: 8,
  drawable: 88,
  texture: 23,
  name: "Белый с красной битловкой"
}, {
  component: 10,
  drawable: 19,
  texture: 0,
  name: "Черная толстовка Steel Horse"
}, {
  component: 10,
  drawable: 19,
  texture: 1,
  name: "Белая толстовка Steel Horse"
}, {
  component: 10,
  drawable: 19,
  texture: 2,
  name: "Черная толстовка Western"
}, {
  component: 10,
  drawable: 19,
  texture: 3,
  name: "Белая толстовка Western"
}, {
  component: 10,
  drawable: 19,
  texture: 4,
  name: "Белая толстовка Nagasaki"
}, {
  component: 10,
  drawable: 19,
  texture: 5,
  name: "Красно-белая Nagasaki"
}, {
  component: 10,
  drawable: 19,
  texture: 6,
  name: "Черная толстовка Nagasaki"
}, {
  component: 10,
  drawable: 19,
  texture: 7,
  name: "Черная Purple Helmets"
}, {
  component: 10,
  drawable: 19,
  texture: 8,
  name: "Черная толстовка Principe"
}, {
  component: 11,
  drawable: 144,
  texture: 0,
  name: "Черный кожаный жилет"
}, {
  component: 11,
  drawable: 144,
  texture: 1,
  name: "Потертый черный жилет"
}, {
  component: 11,
  drawable: 144,
  texture: 2,
  name: "Бурый кожаный жилет"
}, {
  component: 11,
  drawable: 144,
  texture: 3,
  name: "Бордовый кожаный жилет"
}, {
  component: 11,
  drawable: 145,
  texture: 0,
  name: "Черный жилет с защитой"
}, {
  component: 11,
  drawable: 145,
  texture: 1,
  name: "Потертый жилет с защитой"
}, {
  component: 11,
  drawable: 145,
  texture: 2,
  name: "Двухцветный жилет с защитой"
}, {
  component: 11,
  drawable: 146,
  texture: 0,
  name: "Черный приталенный жилет"
}, {
  component: 11,
  drawable: 146,
  texture: 1,
  name: "Потертый приталенный жилет"
}, {
  component: 11,
  drawable: 147,
  texture: 0,
  name: "Черный простой жилет"
}, {
  component: 11,
  drawable: 147,
  texture: 1,
  name: "Коричневый простой жилет"
}, {
  component: 11,
  drawable: 148,
  texture: 0,
  name: "Черная потертая косуха"
}, {
  component: 11,
  drawable: 148,
  texture: 1,
  name: "Бордовая косуха"
}, {
  component: 11,
  drawable: 148,
  texture: 2,
  name: "Бурая косуха"
}, {
  component: 11,
  drawable: 148,
  texture: 3,
  name: "Черная новая косуха"
}, {
  component: 11,
  drawable: 149,
  texture: 0,
  name: "Старый черный жилет-косуха"
}, {
  component: 11,
  drawable: 149,
  texture: 1,
  name: "Бордовый жилет-косуха"
}, {
  component: 11,
  drawable: 149,
  texture: 2,
  name: "Бурый жилет-косуха"
}, {
  component: 11,
  drawable: 149,
  texture: 3,
  name: "Черный жилет-косуха"
}, {
  component: 11,
  drawable: 150,
  texture: 0,
  name: "Приталенная куртка"
}, {
  component: 11,
  drawable: 151,
  texture: 0,
  name: "Кожаная футболка с каймой"
}, {
  component: 11,
  drawable: 151,
  texture: 1,
  name: "Черная кожаная футболка"
}, {
  component: 11,
  drawable: 151,
  texture: 2,
  name: "Серая кожаная футболка"
}, {
  component: 11,
  drawable: 152,
  texture: 0,
  name: "Цифровая для спортбайка"
}, {
  component: 11,
  drawable: 152,
  texture: 1,
  name: "Черная для спортбайка"
}, {
  component: 11,
  drawable: 152,
  texture: 2,
  name: "Камуфляжная для спортбайка"
}, {
  component: 11,
  drawable: 152,
  texture: 3,
  name: "Синяя для спортбайка"
}, {
  component: 11,
  drawable: 152,
  texture: 4,
  name: "Красная для спортбайка"
}, {
  component: 11,
  drawable: 152,
  texture: 5,
  name: "Зеленая для спортбайка"
}, {
  component: 11,
  drawable: 152,
  texture: 6,
  name: "Желтая для спортбайка"
}, {
  component: 11,
  drawable: 153,
  texture: 0,
  name: "Черная ребристая куртка"
}, {
  component: 11,
  drawable: 153,
  texture: 1,
  name: "Бордовая ребристая куртка"
}, {
  component: 11,
  drawable: 153,
  texture: 2,
  name: "Бурая ребристая куртка"
}, {
  component: 11,
  drawable: 153,
  texture: 3,
  name: "Старая черная ребристая"
}, {
  component: 11,
  drawable: 153,
  texture: 4,
  name: "Старая бордовая ребристая"
}, {
  component: 11,
  drawable: 153,
  texture: 5,
  name: "Старая бурая ребристая"
}, {
  component: 11,
  drawable: 154,
  texture: 0,
  name: "Красный пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 1,
  name: "Темно-красный пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 2,
  name: "Синий пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 3,
  name: "Черный пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 4,
  name: "Темно-зеленый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 5,
  name: "Горчичный пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 6,
  name: "Коричневый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 7,
  name: "Серый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 8,
  name: "Сиреневый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 9,
  name: "Оливковый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 10,
  name: "Фиолетовый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 11,
  name: "Бежевый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 12,
  name: "Оранжевый пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 13,
  name: "Голубой пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 14,
  name: "Белоснежный пуховик"
}, {
  component: 11,
  drawable: 154,
  texture: 15,
  name: "Зеленый пуховик"
}, {
  component: 11,
  drawable: 155,
  texture: 0,
  name: "Бурая кожаная толстовка"
}, {
  component: 11,
  drawable: 155,
  texture: 1,
  name: "Черная кожаная толстовка"
}, {
  component: 11,
  drawable: 155,
  texture: 2,
  name: "Серая кожаная толстовка"
}, {
  component: 11,
  drawable: 156,
  texture: 0,
  name: "Винтажная джинсовка"
}, {
  component: 11,
  drawable: 156,
  texture: 1,
  name: "Джинсовка индиго"
}, {
  component: 11,
  drawable: 156,
  texture: 2,
  name: "Блеклая джинсовка"
}, {
  component: 11,
  drawable: 156,
  texture: 3,
  name: "Черная джинсовка"
}, {
  component: 11,
  drawable: 157,
  texture: 0,
  name: "Винтажный джинсовый"
}, {
  component: 11,
  drawable: 157,
  texture: 1,
  name: "Синий джинсовый"
}, {
  component: 11,
  drawable: 157,
  texture: 2,
  name: "Блеклый джинсовый"
}, {
  component: 11,
  drawable: 157,
  texture: 3,
  name: "Черный джинсовый"
}, {
  component: 11,
  drawable: 159,
  texture: 0,
  name: "Винтажная джинсовка (патч)"
}, {
  component: 11,
  drawable: 159,
  texture: 1,
  name: "Джинсовка индиго (патч)"
}, {
  component: 11,
  drawable: 159,
  texture: 2,
  name: "Блеклая джинсовка (патч)"
}, {
  component: 11,
  drawable: 159,
  texture: 3,
  name: "Черная джинсовка (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 0,
  name: "Винтажный джинсовый (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 1,
  name: "Синий джинсовый (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 2,
  name: "Блеклый джинсовый (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 3,
  name: "Черный джинсовый (патч)"
}, {
  component: 11,
  drawable: 161,
  texture: 0,
  name: "Черная косуха (патч)"
}, {
  component: 11,
  drawable: 161,
  texture: 1,
  name: "Бордовая косуха (патч)"
}, {
  component: 11,
  drawable: 161,
  texture: 2,
  name: "Бурая косуха (патч)"
}, {
  component: 11,
  drawable: 162,
  texture: 0,
  name: "Старый жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 162,
  texture: 1,
  name: "Бордовый жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 162,
  texture: 2,
  name: "Бурый жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 162,
  texture: 3,
  name: "Черный жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 163,
  texture: 0,
  name: "Приталенный жилет (патч)"
}, {
  component: 11,
  drawable: 164,
  texture: 0,
  name: "Цифровой для спортбайка"
}, {
  component: 11,
  drawable: 164,
  texture: 1,
  name: "Черный для спортбайка"
}, {
  component: 11,
  drawable: 164,
  texture: 2,
  name: "Камуфляжный для спортбайка"
}, {
  component: 11,
  drawable: 164,
  texture: 3,
  name: "Синий для спортбайка"
}, {
  component: 11,
  drawable: 164,
  texture: 4,
  name: "Красный для спортбайка"
}, {
  component: 11,
  drawable: 164,
  texture: 5,
  name: "Зеленый для спортбайка"
}, {
  component: 11,
  drawable: 164,
  texture: 6,
  name: "Желтый для спортбайка"
}, {
  component: 11,
  drawable: 170,
  texture: 0,
  name: "Кремовый блейзер"
}, {
  component: 11,
  drawable: 170,
  texture: 1,
  name: "Красный блейзер"
}, {
  component: 11,
  drawable: 170,
  texture: 2,
  name: "Темно-синий блейзер"
}, {
  component: 11,
  drawable: 170,
  texture: 3,
  name: "Ярко-голубой блейзер"
}, {
  component: 11,
  drawable: 170,
  texture: 4,
  name: "Черный блейзер"
}, {
  component: 11,
  drawable: 170,
  texture: 5,
  name: "Белый блейзер"
}, {
  component: 11,
  drawable: 171,
  texture: 0,
  name: "Серая застегнутая парка"
}, {
  component: 11,
  drawable: 171,
  texture: 1,
  name: "Зеленая застегнутая парка"
}, {
  component: 11,
  drawable: 171,
  texture: 2,
  name: "Серая застегнутая (патч)"
}, {
  component: 11,
  drawable: 171,
  texture: 3,
  name: "Зеленая застегнутая (патч)"
}, {
  component: 11,
  drawable: 172,
  texture: 0,
  name: "Серая расстегнутая парка"
}, {
  component: 11,
  drawable: 172,
  texture: 1,
  name: "Зеленая расстегнутая парка"
}, {
  component: 11,
  drawable: 172,
  texture: 2,
  name: "Серая расстегнутая (патч)"
}, {
  component: 11,
  drawable: 172,
  texture: 3,
  name: "Зеленая расстегнутая (патч)"
}, {
  component: 1,
  drawable: 87,
  texture: 0,
  name: "Синий цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 1,
  name: "Бурый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 2,
  name: "Зеленый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 3,
  name: "Серый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 4,
  name: "Бежевый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 5,
  name: "Осенний зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 6,
  name: "Лесной зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 7,
  name: "Зомби в сетку"
}, {
  component: 1,
  drawable: 87,
  texture: 8,
  name: "Болотный цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 9,
  name: "Сероватый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 10,
  name: "Морской зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 11,
  name: "Оскольчатый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 12,
  name: "Контрастный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 13,
  name: "Галечный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 14,
  name: "Бежевый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 15,
  name: "Мазковый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 16,
  name: "Зомби флектарн"
}, {
  component: 1,
  drawable: 87,
  texture: 17,
  name: "Полевой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 18,
  name: "Болотный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 19,
  name: "Песочный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 20,
  name: "Черный гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 21,
  name: "Серо-синий гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 22,
  name: "Каменный гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 23,
  name: "Зеленый гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 24,
  name: "Лесной гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 25,
  name: "Болотный гниющий зомби"
}, {
  component: 1,
  drawable: 88,
  texture: 0,
  name: "Синяя цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 1,
  name: "Бурая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 2,
  name: "Зеленая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 3,
  name: "Серая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 4,
  name: "Бежевая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 5,
  name: "Осенняя тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 6,
  name: "Лесная тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 7,
  name: "Тактическая маска в сетку"
}, {
  component: 1,
  drawable: 88,
  texture: 8,
  name: "Болотно-цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 9,
  name: "Сероватая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 10,
  name: "Морская тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 11,
  name: "Оскольчатая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 12,
  name: "Контрастная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 13,
  name: "Галечная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 14,
  name: "Бежевая тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 15,
  name: "Мазковая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 16,
  name: "Тактическая флектарн"
}, {
  component: 1,
  drawable: 88,
  texture: 17,
  name: "Полевая тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 18,
  name: "Болотная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 19,
  name: "Песочная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 24,
  name: "Оливковая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 25,
  name: "Тактическая маска-череп"
}, {
  component: 1,
  drawable: 89,
  texture: 0,
  name: "Обсидиановый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 1,
  name: "Выветрившийся Они"
}, {
  component: 1,
  drawable: 89,
  texture: 2,
  name: "Песчаный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 3,
  name: "Белый узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 4,
  name: "Золотой узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 5,
  name: "Красный узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 6,
  name: "Черный узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 7,
  name: "Черный одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 8,
  name: "Коричневый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 9,
  name: "Желтый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 10,
  name: "Сливовый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 11,
  name: "Монохромный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 12,
  name: "Черно-желтый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 13,
  name: "Оранжевый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 14,
  name: "Золотой одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 15,
  name: "Каменный одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 16,
  name: "Серый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 17,
  name: "Черно-золотой Они"
}, {
  component: 1,
  drawable: 89,
  texture: 18,
  name: "Серо-оранжевый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 19,
  name: "Белый одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 20,
  name: "Серо-золотой Они"
}, {
  component: 1,
  drawable: 89,
  texture: 21,
  name: "Каменный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 22,
  name: "Сине-зеленый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 23,
  name: "Фиолетовый Они"
}, {
  component: 1,
  drawable: 90,
  texture: 0,
  name: "Синий цифровой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 1,
  name: "Бурый цифровой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 2,
  name: "Зеленый цифр. череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 3,
  name: "Серый цифровой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 4,
  name: "Бежевый цифр. череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 5,
  name: "Осенний череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 6,
  name: "Лесной череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 7,
  name: "Череп змеи в сетку"
}, {
  component: 1,
  drawable: 90,
  texture: 8,
  name: "Болотный цифр. череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 9,
  name: "Сероватый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 10,
  name: "Морской череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 11,
  name: "Оскольчатый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 12,
  name: "Контрастный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 13,
  name: "Галечный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 14,
  name: "Бежевый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 15,
  name: "Мазковый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 16,
  name: "Череп змеи флектарн"
}, {
  component: 1,
  drawable: 90,
  texture: 17,
  name: "Полевой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 18,
  name: "Болотный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 19,
  name: "Песочный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 24,
  name: "Красный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 25,
  name: "Белый череп змеи"
}, {
  component: 1,
  drawable: 91,
  texture: 0,
  name: "Синяя цифровая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 1,
  name: "Бурая цифровая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 2,
  name: "Зеленая цифр. с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 3,
  name: "Серая цифровая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 4,
  name: "Бежевая цифр. с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 5,
  name: "Осенняя маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 6,
  name: "Лесная маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 7,
  name: "Маска с фильтром в сетку"
}, {
  component: 1,
  drawable: 91,
  texture: 8,
  name: "Болотная цифр. с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 9,
  name: "Сероватая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 10,
  name: "Морская маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 11,
  name: "Оскольчатая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 12,
  name: "Контрастная с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 13,
  name: "Галечная маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 15,
  name: "Мазковая маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 16,
  name: "С фильтром флектарн"
}, {
  component: 1,
  drawable: 91,
  texture: 17,
  name: "Полевая маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 18,
  name: "Болотная маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 19,
  name: "Песочная маска с фильтром"
}, {
  component: 1,
  drawable: 92,
  texture: 0,
  name: "Чистый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 1,
  name: "Выветрившийся череп"
}, {
  component: 1,
  drawable: 92,
  texture: 2,
  name: "Старый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 3,
  name: "Токсичный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 4,
  name: "Свежий череп"
}, {
  component: 1,
  drawable: 92,
  texture: 5,
  name: "Необглоданный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 6,
  name: "Болотный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 7,
  name: "Песочный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 8,
  name: "Узорный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 9,
  name: "Запятнанный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 10,
  name: "Бурый кожаный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 11,
  name: "Кофейный кожаный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 12,
  name: "Рыжий глазастый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 13,
  name: "Одержимый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 14,
  name: "Глазастый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 15,
  name: "Татуированный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 16,
  name: "Синий крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 17,
  name: "Розовый крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 18,
  name: "Зеленый крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 19,
  name: "Горчичный крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 20,
  name: "Рыжий череп с завитками"
}, {
  component: 1,
  drawable: 92,
  texture: 21,
  name: "Солнечноглазый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 22,
  name: "Терракотовый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 23,
  name: "Череп с полосой"
}, {
  component: 3,
  drawable: 125,
  texture: 0,
  name: "Синие цифр. с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 1,
  name: "Бурые цифр. с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 2,
  name: "Зеленые цифр. с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 3,
  name: "Серые цифр. с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 4,
  name: "Бежевые цифр. с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 5,
  name: "Осенние с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 6,
  name: "Лесные с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 7,
  name: "С защитой в сетку"
}, {
  component: 3,
  drawable: 125,
  texture: 8,
  name: "Болотно-цифр. с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 9,
  name: "Сероватые с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 10,
  name: "Морские с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 11,
  name: "Оскольчатые с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 12,
  name: "Контрастные с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 13,
  name: "Галечные с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 14,
  name: "Бежевые с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 15,
  name: "Мазковые с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 16,
  name: "С защитой флектарн"
}, {
  component: 3,
  drawable: 125,
  texture: 17,
  name: "Полевые с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 18,
  name: "Болотные с защитой"
}, {
  component: 3,
  drawable: 125,
  texture: 19,
  name: "Песочные с защитой"
}, {
  component: 3,
  drawable: 126,
  texture: 0,
  name: "Синие цифр. армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 1,
  name: "Бурые цифр. армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 2,
  name: "Зеленые цифр. армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 3,
  name: "Серые цифр. армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 4,
  name: "Бежевые цифр. армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 5,
  name: "Осенние армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 6,
  name: "Лесные армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 7,
  name: "Армейские в сетку"
}, {
  component: 3,
  drawable: 126,
  texture: 8,
  name: "Болотно-цифр. армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 9,
  name: "Сероватые армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 10,
  name: "Морские армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 11,
  name: "Оскольчатые армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 12,
  name: "Контрастные армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 13,
  name: "Галечные армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 14,
  name: "Бежевые армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 15,
  name: "Мазковые армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 16,
  name: "Армейские флектарн"
}, {
  component: 3,
  drawable: 126,
  texture: 17,
  name: "Полевые армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 18,
  name: "Болотные армейские"
}, {
  component: 3,
  drawable: 126,
  texture: 19,
  name: "Песочные армейские"
}, {
  component: 4,
  drawable: 67,
  texture: 0,
  name: "Синие цифровые штаны"
}, {
  component: 4,
  drawable: 67,
  texture: 1,
  name: "Бурые цифровые штаны"
}, {
  component: 4,
  drawable: 67,
  texture: 2,
  name: "Зеленые цифровые штаны"
}, {
  component: 4,
  drawable: 67,
  texture: 3,
  name: "Серые цифровые штаны"
}, {
  component: 4,
  drawable: 67,
  texture: 4,
  name: "Бежевые цифровые штаны"
}, {
  component: 4,
  drawable: 67,
  texture: 5,
  name: "Осенние штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 6,
  name: "Лесные штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 7,
  name: "Штаны карго в сетку"
}, {
  component: 4,
  drawable: 67,
  texture: 8,
  name: "Болотные цифровые штаны"
}, {
  component: 4,
  drawable: 67,
  texture: 9,
  name: "Сероватые штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 10,
  name: "Морские штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 11,
  name: "Оскольчатые штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 12,
  name: "Контрастные штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 13,
  name: "Галечные штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 14,
  name: "Бежевые штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 15,
  name: "Мазковые штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 16,
  name: "Штаны карго флектарн"
}, {
  component: 4,
  drawable: 67,
  texture: 17,
  name: "Полевые штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 18,
  name: "Болотные штаны карго"
}, {
  component: 4,
  drawable: 67,
  texture: 19,
  name: "Песочные штаны карго"
}, {
  component: 4,
  drawable: 69,
  texture: 0,
  name: "Синие цифровые карго"
}, {
  component: 4,
  drawable: 69,
  texture: 1,
  name: "Бурые цифровые карго"
}, {
  component: 4,
  drawable: 69,
  texture: 2,
  name: "Зеленые цифровые карго"
}, {
  component: 4,
  drawable: 69,
  texture: 3,
  name: "Серые цифровые карго"
}, {
  component: 4,
  drawable: 69,
  texture: 4,
  name: "Бежевые цифровые карго"
}, {
  component: 4,
  drawable: 69,
  texture: 5,
  name: "Осенние шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 6,
  name: "Лесные шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 7,
  name: "Шорты карго в сетку"
}, {
  component: 4,
  drawable: 69,
  texture: 8,
  name: "Болотные цифровые карго"
}, {
  component: 4,
  drawable: 69,
  texture: 9,
  name: "Сероватые шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 10,
  name: "Морские шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 11,
  name: "Оскольчатые шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 12,
  name: "Контрастные шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 13,
  name: "Галечные шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 14,
  name: "Бежевые шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 15,
  name: "Мазковые шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 16,
  name: "Шорты карго флектарн"
}, {
  component: 4,
  drawable: 69,
  texture: 17,
  name: "Полевые шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 18,
  name: "Болотные шорты карго"
}, {
  component: 4,
  drawable: 69,
  texture: 19,
  name: "Песочные шорты карго"
}, {
  component: 4,
  drawable: 70,
  texture: 0,
  name: "Синий цифровой комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 1,
  name: "Бурый цифровой комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 2,
  name: "Зеленый цифр. комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 3,
  name: "Серый цифровой комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 4,
  name: "Бежевый цифр. комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 5,
  name: "Осенний комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 6,
  name: "Лесной комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 7,
  name: "Комбинезон в сетку"
}, {
  component: 4,
  drawable: 70,
  texture: 8,
  name: "Болотный цифр. комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 9,
  name: "Сероватый комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 10,
  name: "Морской комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 11,
  name: "Оскольчатый комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 12,
  name: "Контрастный комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 13,
  name: "Галечный комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 14,
  name: "Бежевый комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 15,
  name: "Мазковый комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 16,
  name: "Комбинезон флектарн"
}, {
  component: 4,
  drawable: 70,
  texture: 17,
  name: "Полевой комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 18,
  name: "Болотный комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 19,
  name: "Песочный комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 20,
  name: "Черный комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 21,
  name: "Серо-синий комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 22,
  name: "Белый комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 23,
  name: "Кофейный комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 24,
  name: "Оливковый комбинезон"
}, {
  component: 4,
  drawable: 70,
  texture: 25,
  name: "Светло-бурый комбинезон"
}, {
  component: 4,
  drawable: 71,
  texture: 0,
  name: "Джинсовый цвета индиго"
}, {
  component: 4,
  drawable: 71,
  texture: 1,
  name: "Потертый цвета индиго"
}, {
  component: 4,
  drawable: 71,
  texture: 2,
  name: "Темно-серый джинсовый"
}, {
  component: 4,
  drawable: 71,
  texture: 3,
  name: "Потертый темно-серый"
}, {
  component: 4,
  drawable: 71,
  texture: 4,
  name: "Светло-синий джинсовый"
}, {
  component: 4,
  drawable: 71,
  texture: 5,
  name: "Потертый светло-синий"
}, {
  component: 4,
  drawable: 71,
  texture: 6,
  name: "Серо-синий джинсовый"
}, {
  component: 4,
  drawable: 71,
  texture: 7,
  name: "Потертый серо-синий"
}, {
  component: 4,
  drawable: 71,
  texture: 9,
  name: "Потертый черный"
}, {
  component: 6,
  drawable: 51,
  texture: 0,
  name: "Синие цифровые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 1,
  name: "Бурые цифровые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 2,
  name: "Зеленые цифр. кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 3,
  name: "Серые цифровые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 4,
  name: "Бежевые цифр. кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 5,
  name: "Осенние кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 6,
  name: "Лесные кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 7,
  name: "Кроссовки в сетку"
}, {
  component: 6,
  drawable: 51,
  texture: 8,
  name: "Болотные цифр. кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 9,
  name: "Сероватые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 10,
  name: "Морские кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 11,
  name: "Оскольчатые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 12,
  name: "Контрастные кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 13,
  name: "Галечные кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 14,
  name: "Бежевые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 15,
  name: "Мазковые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 16,
  name: "Кроссовки флектарн"
}, {
  component: 6,
  drawable: 51,
  texture: 17,
  name: "Полевые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 18,
  name: "Болотные кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 19,
  name: "Песочные кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 20,
  name: "Черные кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 21,
  name: "Серо-синие кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 22,
  name: "Белые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 23,
  name: "Бурые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 24,
  name: "Зеленые кроссовки"
}, {
  component: 6,
  drawable: 51,
  texture: 25,
  name: "Красные кроссовки"
}, {
  component: 6,
  drawable: 52,
  texture: 0,
  name: "Черные спецботинки"
}, {
  component: 6,
  drawable: 52,
  texture: 1,
  name: "Бежевые спецботинки"
}, {
  component: 6,
  drawable: 52,
  texture: 2,
  name: "Бурые спецботинки"
}, {
  component: 6,
  drawable: 52,
  texture: 3,
  name: "Болотные спецботинки"
}, {
  component: 6,
  drawable: 52,
  texture: 4,
  name: "Темно-желтые спецботинки"
}, {
  component: 6,
  drawable: 52,
  texture: 5,
  name: "Токсичные спецботинки"
}, {
  component: 6,
  drawable: 52,
  texture: 6,
  name: "Желтые спецботинки"
}, {
  component: 6,
  drawable: 52,
  texture: 7,
  name: "Кофейные спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 1,
  name: "Серо-зеленые армейские"
}, {
  component: 6,
  drawable: 54,
  texture: 2,
  name: "Синие армейские"
}, {
  component: 6,
  drawable: 54,
  texture: 3,
  name: "Армейские цвета хаки"
}, {
  component: 6,
  drawable: 54,
  texture: 4,
  name: "Темно-серые армейские"
}, {
  component: 6,
  drawable: 54,
  texture: 5,
  name: "Ореховые армейские"
}, {
  component: 6,
  drawable: 54,
  texture: 6,
  name: "Серебристые армейские"
}, {
  component: 6,
  drawable: 54,
  texture: 7,
  name: "Оливковые армейские"
}, {
  component: 8,
  drawable: 93,
  texture: 0,
  name: "Синяя цифровая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 1,
  name: "Бурая цифровая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 2,
  name: "Зеленая цифровая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 3,
  name: "Серая цифровая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 4,
  name: "Бежевая цифровая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 5,
  name: "Осенняя футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 6,
  name: "Лесная футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 7,
  name: "Футболка в сетку"
}, {
  component: 8,
  drawable: 93,
  texture: 8,
  name: "Болотно-цифровая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 10,
  name: "Морская футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 11,
  name: "Оскольчатая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 12,
  name: "Контрастная футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 13,
  name: "Галечная футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 15,
  name: "Мазковая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 16,
  name: "Футболка флектарн"
}, {
  component: 8,
  drawable: 93,
  texture: 17,
  name: "Полевая футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 18,
  name: "Болотная футболка"
}, {
  component: 8,
  drawable: 93,
  texture: 19,
  name: "Песочная футболка"
}, {
  component: 8,
  drawable: 98,
  texture: 0,
  name: "Футболка Knuckleduster"
}, {
  component: 10,
  drawable: 45,
  texture: 0,
  name: "Белая толстовка Hawk & Little"
}, {
  component: 10,
  drawable: 45,
  texture: 1,
  name: "Черная толстовка Hawk & Little"
}, {
  component: 10,
  drawable: 45,
  texture: 2,
  name: "Белая толстовка Shrewsbury"
}, {
  component: 10,
  drawable: 45,
  texture: 3,
  name: "Черная толстовка Shrewsbury"
}, {
  component: 10,
  drawable: 45,
  texture: 4,
  name: "Белая толстовка Vom Feuer"
}, {
  component: 10,
  drawable: 45,
  texture: 5,
  name: "Черная толстовка Vom Feuer"
}, {
  component: 10,
  drawable: 45,
  texture: 6,
  name: "Белая толстовка Coil"
}, {
  component: 10,
  drawable: 45,
  texture: 7,
  name: "Черная толстовка Coil"
}, {
  component: 10,
  drawable: 45,
  texture: 8,
  name: "Черная толст. Амму-Нация"
}, {
  component: 10,
  drawable: 45,
  texture: 9,
  name: "Белая толст. Амму-Нация"
}, {
  component: 10,
  drawable: 45,
  texture: 10,
  name: "Черная толстовка Warstock"
}, {
  component: 11,
  drawable: 173,
  texture: 0,
  name: "Синяя цифр. без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 1,
  name: "Бурая цифр. без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 2,
  name: "Зеленая цифр. без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 3,
  name: "Серая цифр. без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 4,
  name: "Бежевая цифр. без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 5,
  name: "Осенняя без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 6,
  name: "Лесная без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 7,
  name: "Без рукавов в сетку"
}, {
  component: 11,
  drawable: 173,
  texture: 8,
  name: "Болотно-цифр. без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 9,
  name: "Сероватая без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 10,
  name: "Морская без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 11,
  name: "Оскольчатая без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 12,
  name: "Контрастная без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 13,
  name: "Галечная без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 14,
  name: "Бежевая без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 15,
  name: "Мазковая без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 16,
  name: "Без рукавов флектарн"
}, {
  component: 11,
  drawable: 173,
  texture: 17,
  name: "Полевая без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 18,
  name: "Болотная без рукавов"
}, {
  component: 11,
  drawable: 173,
  texture: 19,
  name: "Песочная без рукавов"
}, {
  component: 11,
  drawable: 176,
  texture: 0,
  name: "Синяя цифровая (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 1,
  name: "Бурая цифровая (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 2,
  name: "Зеленая цифр. (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 3,
  name: "Серая цифровая (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 4,
  name: "Бежевая цифр. (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 5,
  name: "Осенняя парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 6,
  name: "Голубая парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 7,
  name: "Парка в сетку (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 8,
  name: "Болотная цифр. (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 9,
  name: "Сероватая парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 10,
  name: "Морская парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 11,
  name: "Оскольчатая (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 12,
  name: "Контрастная (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 13,
  name: "Галечная парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 14,
  name: "Бежевая парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 15,
  name: "Лиловая парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 16,
  name: "Парка флектарн (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 17,
  name: "Полевая парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 18,
  name: "Болотная парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 19,
  name: "Песочная парка (воротник)"
}, {
  component: 11,
  drawable: 177,
  texture: 0,
  name: "Синяя цифровая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 1,
  name: "Бурая цифровая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 2,
  name: "Зеленая цифровая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 3,
  name: "Серая цифровая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 4,
  name: "Бежевая цифровая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 5,
  name: "Осенняя парка"
}, {
  component: 11,
  drawable: 177,
  texture: 6,
  name: "Голубая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 7,
  name: "Парка в сетку"
}, {
  component: 11,
  drawable: 177,
  texture: 8,
  name: "Болотная цифровая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 9,
  name: "Сероватая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 10,
  name: "Морская парка"
}, {
  component: 11,
  drawable: 177,
  texture: 11,
  name: "Оскольчатая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 12,
  name: "Контрастная парка"
}, {
  component: 11,
  drawable: 177,
  texture: 13,
  name: "Галечная парка"
}, {
  component: 11,
  drawable: 177,
  texture: 14,
  name: "Бежевая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 15,
  name: "Лиловая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 16,
  name: "Парка флектарн"
}, {
  component: 11,
  drawable: 177,
  texture: 17,
  name: "Полевая парка"
}, {
  component: 11,
  drawable: 177,
  texture: 18,
  name: "Болотная парка"
}, {
  component: 11,
  drawable: 177,
  texture: 19,
  name: "Песочная парка"
}, {
  component: 11,
  drawable: 179,
  texture: 0,
  name: "Синяя цифр. расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 1,
  name: "Бурая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 2,
  name: "Зеленая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 3,
  name: "Серая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 4,
  name: "Бежевая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 5,
  name: "Осенняя расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 6,
  name: "Голубая расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 7,
  name: "В сетку расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 8,
  name: "Болотно-цифр. расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 9,
  name: "Сероватая расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 10,
  name: "Морская расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 11,
  name: "Оскольчатая расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 12,
  name: "Контрастная расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 13,
  name: "Галечная расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 14,
  name: "Бежевая расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 15,
  name: "Лиловая расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 16,
  name: "Расстегнутая флектарн"
}, {
  component: 11,
  drawable: 179,
  texture: 17,
  name: "Полевая расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 18,
  name: "Болотная расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 19,
  name: "Песочная расстегнутая"
}, {
  component: 11,
  drawable: 180,
  texture: 0,
  name: "Синий цифровой защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 1,
  name: "Бурый цифровой защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 2,
  name: "Зеленый цифр. защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 3,
  name: "Серый цифровой защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 4,
  name: "Бежевый цифр. защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 5,
  name: "Осенний защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 6,
  name: "Лесной защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 7,
  name: "Защитный жилет в сетку"
}, {
  component: 11,
  drawable: 180,
  texture: 8,
  name: "Болотный цифр. защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 9,
  name: "Сероватый защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 10,
  name: "Морской защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 11,
  name: "Оскольчатый защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 12,
  name: "Контрастный защитный"
}, {
  component: 11,
  drawable: 180,
  texture: 13,
  name: "Галечный защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 14,
  name: "Бежевый защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 15,
  name: "Мазковый защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 16,
  name: "Защитный жилет флектарн"
}, {
  component: 11,
  drawable: 180,
  texture: 17,
  name: "Полевой защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 18,
  name: "Болотный защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 19,
  name: "Песочный защитный жилет"
}, {
  component: 11,
  drawable: 181,
  texture: 0,
  name: "Синяя цифровая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 1,
  name: "Бурая цифровая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 2,
  name: "Зеленая цифр. спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 3,
  name: "Серая цифровая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 4,
  name: "Бежевая цифр. спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 5,
  name: "Осенняя спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 6,
  name: "Лесная спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 7,
  name: "Спортивная в сетку"
}, {
  component: 11,
  drawable: 181,
  texture: 8,
  name: "Болотная цифр. спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 9,
  name: "Сероватая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 10,
  name: "Морская спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 11,
  name: "Оскольчатая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 12,
  name: "Контрастная спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 13,
  name: "Галечная спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 14,
  name: "Бежевая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 15,
  name: "Мазковая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 16,
  name: "Спортивная флектарн"
}, {
  component: 11,
  drawable: 181,
  texture: 17,
  name: "Полевая спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 18,
  name: "Болотная спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 19,
  name: "Песочная спортивная"
}, {
  component: 11,
  drawable: 182,
  texture: 0,
  name: "Синяя цифровая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 1,
  name: "Бурая цифровая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 2,
  name: "Зеленая цифр. джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 3,
  name: "Серая цифровая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 4,
  name: "Бежевая цифр. джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 5,
  name: "Осенняя джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 6,
  name: "Лесная джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 7,
  name: "Джинсовка в сетку"
}, {
  component: 11,
  drawable: 182,
  texture: 8,
  name: "Болотная цифр. джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 9,
  name: "Сероватая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 10,
  name: "Морская джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 11,
  name: "Оскольчатая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 12,
  name: "Контрастная джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 13,
  name: "Галечная джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 14,
  name: "Бежевая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 15,
  name: "Мазковая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 16,
  name: "Джинсовка флектарн"
}, {
  component: 11,
  drawable: 182,
  texture: 17,
  name: "Полевая джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 18,
  name: "Болотная джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 19,
  name: "Песочная джинсовка"
}, {
  component: 11,
  drawable: 183,
  texture: 0,
  name: "Синий цифровой джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 1,
  name: "Бурый цифровой джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 2,
  name: "Зеленый цифр. джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 3,
  name: "Серый цифровой джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 4,
  name: "Бежевый цифр. джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 5,
  name: "Осенний джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 6,
  name: "Лесной джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 7,
  name: "Джинсовый жилет в сетку"
}, {
  component: 11,
  drawable: 183,
  texture: 8,
  name: "Болотный цифр. джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 9,
  name: "Сероватый джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 10,
  name: "Морской джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 11,
  name: "Оскольчатый джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 12,
  name: "Контрастный джинсовый"
}, {
  component: 11,
  drawable: 183,
  texture: 13,
  name: "Галечный джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 14,
  name: "Бежевый джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 15,
  name: "Мазковый джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 16,
  name: "Джинсовый флектарн"
}, {
  component: 11,
  drawable: 183,
  texture: 17,
  name: "Полевой джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 18,
  name: "Болотный джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 19,
  name: "Песочный джинсовый жилет"
}, {
  component: 11,
  drawable: 184,
  texture: 0,
  name: "Городская парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 1,
  name: "Лесная парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 2,
  name: "Персиковая (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 3,
  name: "Красная парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 4,
  name: "Бурая парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 5,
  name: "Лаймовая парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 6,
  name: "Сине-зеленая (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 7,
  name: "Мандариновая (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 9,
  name: "Зеленая парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 10,
  name: "Пятнистая парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 11,
  name: "Охровая парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 12,
  name: "Синяя парка (воротник)"
}, {
  component: 11,
  drawable: 184,
  texture: 13,
  name: "Городская (воротник/патч)"
}, {
  component: 11,
  drawable: 184,
  texture: 14,
  name: "Лесная (воротник/патч)"
}, {
  component: 11,
  drawable: 186,
  texture: 8,
  name: "Болотная цифр. без рукавов"
}, {
  component: 11,
  drawable: 186,
  texture: 21,
  name: "Серо-синяя без рукавов"
}, {
  component: 11,
  drawable: 186,
  texture: 22,
  name: "Белая без рукавов"
}, {
  component: 11,
  drawable: 186,
  texture: 23,
  name: "Гранатовая без рукавов"
}, {
  component: 11,
  drawable: 186,
  texture: 24,
  name: "Синяя без рукавов"
}, {
  component: 11,
  drawable: 186,
  texture: 25,
  name: "Коричневая без рукавов"
}, {
  component: 11,
  drawable: 187,
  texture: 0,
  name: "Синяя цифровая боевая"
}, {
  component: 11,
  drawable: 187,
  texture: 1,
  name: "Бурая цифровая боевая"
}, {
  component: 11,
  drawable: 187,
  texture: 2,
  name: "Зеленая цифровая боевая"
}, {
  component: 11,
  drawable: 187,
  texture: 3,
  name: "Серая цифровая боевая"
}, {
  component: 11,
  drawable: 187,
  texture: 4,
  name: "Бежевая цифровая боевая"
}, {
  component: 11,
  drawable: 187,
  texture: 5,
  name: "Осенняя боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 6,
  name: "Лесная боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 7,
  name: "Боевая рубашка в сетку"
}, {
  component: 11,
  drawable: 187,
  texture: 8,
  name: "Болотная цифровая боевая"
}, {
  component: 11,
  drawable: 187,
  texture: 9,
  name: "Сероватая боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 10,
  name: "Морская боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 11,
  name: "Оскольчатая боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 12,
  name: "Контрастная боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 13,
  name: "Галечная боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 14,
  name: "Бежевая боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 15,
  name: "Мазковая боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 16,
  name: "Боевая рубашка флектарн"
}, {
  component: 11,
  drawable: 187,
  texture: 17,
  name: "Полевая боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 18,
  name: "Болотная боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 19,
  name: "Песочная боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 20,
  name: "Черная боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 21,
  name: "Серо-синяя боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 22,
  name: "Белая боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 23,
  name: "Коричневая боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 24,
  name: "Красная боевая рубашка"
}, {
  component: 11,
  drawable: 187,
  texture: 25,
  name: "Синяя боевая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 0,
  name: "Синяя цифровая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 1,
  name: "Бурая цифровая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 2,
  name: "Зеленая цифр. рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 3,
  name: "Серая цифровая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 4,
  name: "Бежевая цифр. рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 5,
  name: "Осенняя рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 6,
  name: "Лесная рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 7,
  name: "Рубашка в сетку"
}, {
  component: 11,
  drawable: 188,
  texture: 8,
  name: "Болотная цифр. рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 10,
  name: "Морская рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 11,
  name: "Оскольчатая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 12,
  name: "Контрастная рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 13,
  name: "Галечная рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 14,
  name: "Бежевая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 15,
  name: "Мазковая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 16,
  name: "Рубашка флектарн"
}, {
  component: 11,
  drawable: 188,
  texture: 17,
  name: "Полевая рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 18,
  name: "Болотная рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 19,
  name: "Песочная рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 21,
  name: "Серо-синяя рубашка"
}, {
  component: 11,
  drawable: 188,
  texture: 24,
  name: "Рубашка цвета хаки"
}, {
  component: 11,
  drawable: 189,
  texture: 0,
  name: "Синяя цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 1,
  name: "Бурая цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 2,
  name: "Зелено-цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 3,
  name: "Серая цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 4,
  name: "Бежево-цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 5,
  name: "Осенняя (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 6,
  name: "Лесная (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 7,
  name: "В сетку (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 8,
  name: "Болотная цифр. (подверн.)"
}, {
  component: 11,
  drawable: 189,
  texture: 9,
  name: "Сероватая (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 10,
  name: "Морская (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 11,
  name: "Оскольчатая (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 12,
  name: "Контрастная (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 13,
  name: "Галечная (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 14,
  name: "Бежевая (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 15,
  name: "Мазковая (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 16,
  name: "Флектарн (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 17,
  name: "Полевая (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 18,
  name: "Болотная (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 19,
  name: "Песочная (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 20,
  name: "Черная (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 21,
  name: "Серо-синяя (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 22,
  name: "Белая (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 23,
  name: "Коричневая (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 24,
  name: "Цвета хаки (подвернутая)"
}, {
  component: 11,
  drawable: 189,
  texture: 25,
  name: "Синяя (подвернутая)"
}, {
  component: 11,
  drawable: 190,
  texture: 0,
  name: "Черный пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 1,
  name: "Серый пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 2,
  name: "Белый пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 3,
  name: "Красный пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 4,
  name: "Оранжевый пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 5,
  name: "Желтый пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 6,
  name: "Лаймовый пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 7,
  name: "Зеленый пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 8,
  name: "Голубой пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 9,
  name: "Синий пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 10,
  name: "Лососевый пуховик-жилет"
}, {
  component: 11,
  drawable: 190,
  texture: 11,
  name: "Коричневый пуховик-жилет"
}, {
  component: 11,
  drawable: 191,
  texture: 0,
  name: "Черный легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 1,
  name: "Серый легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 2,
  name: "Белый легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 3,
  name: "Красный легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 4,
  name: "Оранжевый легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 5,
  name: "Желтый легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 6,
  name: "Лаймовый легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 7,
  name: "Зеленый легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 8,
  name: "Голубой легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 9,
  name: "Синий легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 10,
  name: "Лососевый легкий пуховик"
}, {
  component: 11,
  drawable: 191,
  texture: 11,
  name: "Коричневый легкий пуховик"
}, {
  component: 11,
  drawable: 192,
  texture: 0,
  name: "Синяя R* Class of '98"
}, {
  component: 11,
  drawable: 192,
  texture: 1,
  name: "Красная R* Class of '98"
}, {
  component: 1,
  drawable: 93,
  texture: 4,
  name: "Черный шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 5,
  name: "Охровый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 6,
  name: "Зеленый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 7,
  name: "Оливковый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 8,
  name: "Полевой шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 9,
  name: "Морской шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 10,
  name: "Оскольчатый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 11,
  name: "Цифровой шлем летчика"
}, {
  component: 11,
  drawable: 196,
  texture: 0,
  name: "Зеленая летная (закр.)"
}, {
  component: 11,
  drawable: 196,
  texture: 1,
  name: "Коричневая летная (закр.)"
}, {
  component: 11,
  drawable: 196,
  texture: 2,
  name: "Черная летная (закр.)"
}, {
  component: 11,
  drawable: 196,
  texture: 3,
  name: "Серая летная (закр.)"
}, {
  component: 11,
  drawable: 196,
  texture: 4,
  name: "Белая летная (закр.)"
}, {
  component: 11,
  drawable: 196,
  texture: 5,
  name: "Сине-зеленая летная (закр.)"
}, {
  component: 11,
  drawable: 196,
  texture: 6,
  name: "Темно-синяя летная (закр.)"
}, {
  component: 11,
  drawable: 196,
  texture: 7,
  name: "Бордовая летная (закр.)"
}, {
  component: 11,
  drawable: 197,
  texture: 1,
  name: "Коричневая летная куртка"
}, {
  component: 11,
  drawable: 197,
  texture: 3,
  name: "Серая летная куртка"
}, {
  component: 11,
  drawable: 197,
  texture: 4,
  name: "Белая летная куртка"
}, {
  component: 11,
  drawable: 197,
  texture: 5,
  name: "Сине-зеленая летная куртка"
}, {
  component: 11,
  drawable: 197,
  texture: 6,
  name: "Темно-синяя летная куртка"
}, {
  component: 11,
  drawable: 197,
  texture: 7,
  name: "Бордовая летная куртка"
}, {
  component: 1,
  drawable: 94,
  texture: 0,
  name: "Черная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 1,
  name: "Синяя цифр. маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 2,
  name: "Бурая цифр. маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 3,
  name: "Зеленая цифр. маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 4,
  name: "Осенняя маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 5,
  name: "Лесная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 6,
  name: "Маска робота в сетку"
}, {
  component: 1,
  drawable: 94,
  texture: 7,
  name: "Сероватая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 8,
  name: "Морская маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 9,
  name: "Оскольчатая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 10,
  name: "Контрастная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 11,
  name: "Галечная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 12,
  name: "Бежевая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 13,
  name: "Мазковая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 14,
  name: "Маска робота флектарн"
}, {
  component: 1,
  drawable: 94,
  texture: 15,
  name: "Полевая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 16,
  name: "Серо-синяя маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 17,
  name: "Серо-желтая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 18,
  name: "Рыже-белая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 19,
  name: "Желтая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 20,
  name: "Черно-белая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 21,
  name: "Белая маска робота"
}, {
  component: 1,
  drawable: 95,
  texture: 4,
  name: "Синяя бандана Blagueurs"
}, {
  component: 1,
  drawable: 95,
  texture: 5,
  name: "Красная бандана Blagueurs"
}, {
  component: 1,
  drawable: 95,
  texture: 6,
  name: "Яркая абстрактная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 7,
  name: "Геометрическая бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 8,
  name: "Оскольчатая бандана Bigness"
}, {
  component: 1,
  drawable: 95,
  texture: 9,
  name: "Красная бандана Bigness"
}, {
  component: 1,
  drawable: 95,
  texture: 10,
  name: "Зеленая бандана с листьями"
}, {
  component: 1,
  drawable: 95,
  texture: 11,
  name: "Синяя бандана с листьями"
}, {
  component: 1,
  drawable: 95,
  texture: 12,
  name: "Красная бандана Manor"
}, {
  component: 1,
  drawable: 95,
  texture: 13,
  name: "Черная бандана Manor"
}, {
  component: 1,
  drawable: 95,
  texture: 14,
  name: "Бандана Manor с черепами"
}, {
  component: 1,
  drawable: 95,
  texture: 15,
  name: "Белая бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 16,
  name: "Оранжевая бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 17,
  name: "Черная бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 18,
  name: "Cерая бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 19,
  name: "Звездно-полосатая бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 20,
  name: "Крашеная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 21,
  name: "Фрактальная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 22,
  name: "Контрастная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 23,
  name: "Черно-белая бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 24,
  name: "Бандана с темным узором"
}, {
  component: 1,
  drawable: 95,
  texture: 25,
  name: "Бандана со светлым узором"
}, {
  component: 1,
  drawable: 96,
  texture: 0,
  name: "Черная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 1,
  name: "Синяя цифр. маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 2,
  name: "Бурая цифр. маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 3,
  name: "Зеленая цифр. маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 4,
  name: "Осенняя маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 5,
  name: "Лесная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 6,
  name: "Маска-рыло в сетку"
}, {
  component: 1,
  drawable: 96,
  texture: 7,
  name: "Сероватая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 8,
  name: "Морская маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 9,
  name: "Оскольчатая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 10,
  name: "Контрастная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 11,
  name: "Галечная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 12,
  name: "Бежевая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 13,
  name: "Мазковая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 14,
  name: "Маска-рыло флектарн"
}, {
  component: 1,
  drawable: 96,
  texture: 15,
  name: "Полевая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 16,
  name: "Серо-синяя маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 17,
  name: "Серо-желтая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 18,
  name: "Рыже-белая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 19,
  name: "Желтая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 20,
  name: "Черно-белая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 21,
  name: "Белая маска-рыло"
}, {
  component: 1,
  drawable: 97,
  texture: 0,
  name: "Скейтерская плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 1,
  name: "Плотная с листьями"
}, {
  component: 1,
  drawable: 97,
  texture: 2,
  name: "Плотная лаймовая Xero"
}, {
  component: 1,
  drawable: 97,
  texture: 3,
  name: "Плотная тропическая Xero"
}, {
  component: 1,
  drawable: 97,
  texture: 4,
  name: "Плотная с красной полосой"
}, {
  component: 1,
  drawable: 97,
  texture: 5,
  name: "Плотная серая Bigness"
}, {
  component: 1,
  drawable: 97,
  texture: 6,
  name: "Оранжево-красная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 7,
  name: "Красочная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 8,
  name: "Плотная синяя Bigness"
}, {
  component: 1,
  drawable: 97,
  texture: 9,
  name: "Горчичная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 10,
  name: "Звездно-полосатая плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 11,
  name: "Плотная черная с черепом"
}, {
  component: 1,
  drawable: 97,
  texture: 12,
  name: "Плотная белая с черепом"
}, {
  component: 1,
  drawable: 97,
  texture: 17,
  name: "Плотная маска San Andreas"
}, {
  component: 1,
  drawable: 97,
  texture: 18,
  name: "Плотная черная звездная"
}, {
  component: 1,
  drawable: 97,
  texture: 19,
  name: "Черно-красная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 20,
  name: "Яркая абстрактная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 21,
  name: "Плотная камуфл. Bigness"
}, {
  component: 1,
  drawable: 98,
  texture: 0,
  name: "Коричневый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 1,
  name: "Сине-зеленый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 2,
  name: "Зеленый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 3,
  name: "Желтый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 4,
  name: "Бирюзовый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 5,
  name: "Бурый цифр. шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 6,
  name: "Шемаг с желтым узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 7,
  name: "Шемаг с бордовым узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 8,
  name: "Бежевый цифр. шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 9,
  name: "Осенний шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 10,
  name: "Лесной шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 11,
  name: "Шемаг с рыжим узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 12,
  name: "Шемаг с красным узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 13,
  name: "Сероватый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 14,
  name: "Шемаг с синим узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 15,
  name: "Оскольчатый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 16,
  name: "Шемаг с лиловым узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 17,
  name: "Шемаг Jolly Roger (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 18,
  name: "Бежевый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 19,
  name: "Мазковый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 20,
  name: "Шемаг флектарн (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 21,
  name: "Шемаг с военным узором (о)"
}, {
  component: 1,
  drawable: 99,
  texture: 0,
  name: "Коричневый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 1,
  name: "Сине-зеленый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 2,
  name: "Зеленый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 3,
  name: "Желтый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 4,
  name: "Бирюзовый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 5,
  name: "Бурый цифр. шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 6,
  name: "Шемаг с красным узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 7,
  name: "Шемаг Jolly Roger (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 8,
  name: "Бежевый цифр. шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 9,
  name: "Осенний шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 10,
  name: "Лесной шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 11,
  name: "Шемаг с военным узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 12,
  name: "Шемаг с синим узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 13,
  name: "Сероватый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 14,
  name: "Шемаг с темным узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 15,
  name: "Оскольчатый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 16,
  name: "Шемаг с бордовым узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 17,
  name: "Шемаг с рыжим узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 18,
  name: "Бежевый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 19,
  name: "Мазковый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 20,
  name: "Шемаг флектарн (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 21,
  name: "Шемаг с лиловым узором (з)"
}, {
  component: 1,
  drawable: 100,
  texture: 0,
  name: "Коричневый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 1,
  name: "Сине-зеленый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 2,
  name: "Зеленый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 3,
  name: "Желтый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 4,
  name: "Бирюзовый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 5,
  name: "Бурый цифр. шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 6,
  name: "Бордовый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 7,
  name: "Оранжевый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 8,
  name: "Бежевый цифр. шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 9,
  name: "Осенний шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 10,
  name: "Лесной шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 11,
  name: "Синий шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 12,
  name: "Лиловый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 13,
  name: "Сероватый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 14,
  name: "Шарф-труба с желтым узором"
}, {
  component: 1,
  drawable: 100,
  texture: 15,
  name: "Оскольчатый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 16,
  name: "Красный шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 17,
  name: "Военный шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 18,
  name: "Бежевый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 19,
  name: "Мазковый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 20,
  name: "Шарф-труба флектарн"
}, {
  component: 1,
  drawable: 100,
  texture: 21,
  name: "Шарф-труба Jolly Roger"
}, {
  component: 1,
  drawable: 101,
  texture: 0,
  name: "Вязаная в яркую полоску"
}, {
  component: 1,
  drawable: 101,
  texture: 1,
  name: "Темно-красная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 2,
  name: "Зелено-бежевая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 3,
  name: "Закатная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 4,
  name: "Серая цифровая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 5,
  name: "Сероватая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 6,
  name: "Бурая цифровая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 7,
  name: "Вязаная с красной полосой"
}, {
  component: 1,
  drawable: 101,
  texture: 8,
  name: "Вязаная с черепом"
}, {
  component: 1,
  drawable: 101,
  texture: 9,
  name: "Бордовая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 10,
  name: "Салатовая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 11,
  name: "Морская вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 12,
  name: "Разноцветная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 13,
  name: "Черно-красная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 14,
  name: "Зеленая полосатая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 15,
  name: "Тигровая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 16,
  name: "Леопардовая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 17,
  name: "Вязаная с темным узором"
}, {
  component: 1,
  drawable: 101,
  texture: 18,
  name: "Звездно-полосатая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 19,
  name: "Синяя вязаная Luchador"
}, {
  component: 1,
  drawable: 101,
  texture: 20,
  name: "Зеленая вязаная Luchador"
}, {
  component: 1,
  drawable: 102,
  texture: 4,
  name: "Пурпурная маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 5,
  name: "Темно-синяя маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 6,
  name: "Маска-футболка с листьями"
}, {
  component: 1,
  drawable: 102,
  texture: 7,
  name: "Серая цифр. маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 8,
  name: "Морская маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 9,
  name: "Красная камуфл. футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 10,
  name: "Камуфл. футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 11,
  name: "Черная футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 12,
  name: "Красная футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 13,
  name: "Серая футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 14,
  name: "Трехцветная маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 15,
  name: "Маска-футболка OJ Squash"
}, {
  component: 1,
  drawable: 102,
  texture: 16,
  name: "Зелено-розовая футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 17,
  name: "Звездно-полосатая футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 18,
  name: "Черная звездная футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 19,
  name: "Маска-футболка SA Republic"
}, {
  component: 1,
  drawable: 102,
  texture: 20,
  name: "Лазурная маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 21,
  name: "Психоделическая футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 22,
  name: "Розовая маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 23,
  name: "Футболка с рыжим узором"
}, {
  component: 1,
  drawable: 102,
  texture: 24,
  name: "Футболка с зеленым узором"
}, {
  component: 1,
  drawable: 102,
  texture: 25,
  name: "Футболка с розовым узором"
}, {
  component: 1,
  drawable: 103,
  texture: 0,
  name: "С черепом потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 1,
  name: "Пепельная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 2,
  name: "Угольно-черная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 3,
  name: "Каштановая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 4,
  name: "Синяя потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 5,
  name: "Джутовая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 6,
  name: "Бордовая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 11,
  name: "Ярко-зеленая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 12,
  name: "Бежевая полосатая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 13,
  name: "Растаманская потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 14,
  name: "Потертая с тремя полосками"
}, {
  component: 1,
  drawable: 103,
  texture: 15,
  name: "Потертая в желтую полоску"
}, {
  component: 1,
  drawable: 103,
  texture: 16,
  name: "Пурпурная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 17,
  name: "Красочная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 18,
  name: "Скейтерская потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 19,
  name: "Розовая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 20,
  name: "Морская потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 21,
  name: "Серая цифровая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 22,
  name: "Сероватая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 23,
  name: "Красивая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 24,
  name: "Неоновая потертая"
}, {
  component: 6,
  drawable: 57,
  texture: 0,
  name: "Классические прошитые"
}, {
  component: 6,
  drawable: 57,
  texture: 1,
  name: "Черные прошитые ботинки"
}, {
  component: 6,
  drawable: 57,
  texture: 2,
  name: "Угольно-черные прошитые"
}, {
  component: 6,
  drawable: 57,
  texture: 3,
  name: "Каштановые прошитые"
}, {
  component: 6,
  drawable: 57,
  texture: 4,
  name: "Бежевые прошитые ботинки"
}, {
  component: 6,
  drawable: 57,
  texture: 5,
  name: "Ржавые прошитые ботинки"
}, {
  component: 6,
  drawable: 57,
  texture: 6,
  name: "Рыжие прошитые ботинки"
}, {
  component: 8,
  drawable: 104,
  texture: 0,
  name: "Темная LC Beavers"
}, {
  component: 8,
  drawable: 104,
  texture: 1,
  name: "Светлая LC Beavers"
}, {
  component: 8,
  drawable: 104,
  texture: 2,
  name: "Темная LC Benders"
}, {
  component: 8,
  drawable: 104,
  texture: 3,
  name: "Светлая LC Benders"
}, {
  component: 8,
  drawable: 104,
  texture: 4,
  name: "Светлая LC Jardineros"
}, {
  component: 8,
  drawable: 104,
  texture: 5,
  name: "Темная LC Jardineros"
}, {
  component: 8,
  drawable: 104,
  texture: 6,
  name: "Темная Liberty Cocks"
}, {
  component: 8,
  drawable: 104,
  texture: 7,
  name: "Светлая Liberty Cocks"
}, {
  component: 8,
  drawable: 104,
  texture: 8,
  name: "Темная Red Mist XI"
}, {
  component: 8,
  drawable: 104,
  texture: 9,
  name: "Светлая Red Mist XI"
}, {
  component: 8,
  drawable: 104,
  texture: 10,
  name: "Темная Superstroika"
}, {
  component: 8,
  drawable: 104,
  texture: 11,
  name: "Светлая Superstroika"
}, {
  component: 8,
  drawable: 107,
  texture: 3,
  name: "Серая футболка в полоску"
}, {
  component: 8,
  drawable: 107,
  texture: 4,
  name: "Серо-бежевая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 8,
  name: "Болотная цифровая футболка"
}, {
  component: 11,
  drawable: 199,
  texture: 0,
  name: "Зеленая полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 1,
  name: "Песочная полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 2,
  name: "Коричневая полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 3,
  name: "Синяя полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 4,
  name: "Черная полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 5,
  name: "Угольная полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 6,
  name: "Пепельная полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 7,
  name: "Бежевая полевая (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 8,
  name: "Полевая куртка (закр.)"
}, {
  component: 11,
  drawable: 199,
  texture: 9,
  name: "Лесная полевая (закр.)"
}, {
  component: 11,
  drawable: 200,
  texture: 0,
  name: "Зеленая полевая куртка"
}, {
  component: 11,
  drawable: 200,
  texture: 1,
  name: "Песочная полевая куртка"
}, {
  component: 11,
  drawable: 200,
  texture: 3,
  name: "Синяя полевая куртка"
}, {
  component: 11,
  drawable: 200,
  texture: 5,
  name: "Угольная полевая куртка"
}, {
  component: 11,
  drawable: 200,
  texture: 6,
  name: "Пепельная полевая куртка"
}, {
  component: 11,
  drawable: 200,
  texture: 7,
  name: "Бежевая полевая куртка"
}, {
  component: 11,
  drawable: 200,
  texture: 8,
  name: "Полевая куртка"
}, {
  component: 11,
  drawable: 200,
  texture: 9,
  name: "Лесная полевая куртка"
}, {
  component: 11,
  drawable: 201,
  texture: 0,
  name: "Черная"
}, {
  component: 11,
  drawable: 201,
  texture: 1,
  name: "Угольная"
}, {
  component: 11,
  drawable: 201,
  texture: 2,
  name: "Серая"
}, {
  component: 11,
  drawable: 201,
  texture: 3,
  name: "Пепельная"
}, {
  component: 11,
  drawable: 201,
  texture: 4,
  name: "Белая"
}, {
  component: 11,
  drawable: 201,
  texture: 6,
  name: "Красная Güffy"
}, {
  component: 11,
  drawable: 201,
  texture: 7,
  name: "С разноцветными листьями"
}, {
  component: 11,
  drawable: 201,
  texture: 8,
  name: "С зелеными листьями"
}, {
  component: 11,
  drawable: 201,
  texture: 9,
  name: "Зеленая пятнистая"
}, {
  component: 11,
  drawable: 201,
  texture: 10,
  name: "Голубая пятнистая"
}, {
  component: 11,
  drawable: 201,
  texture: 11,
  name: "Неоновая Güffy"
}, {
  component: 11,
  drawable: 201,
  texture: 13,
  name: "Голубая с узором"
}, {
  component: 11,
  drawable: 201,
  texture: 14,
  name: "Розовая с узором"
}, {
  component: 11,
  drawable: 201,
  texture: 15,
  name: "Рубашка OJ"
}, {
  component: 11,
  drawable: 201,
  texture: 16,
  name: "Рубашка Splat"
}, {
  component: 11,
  drawable: 201,
  texture: 17,
  name: "Синяя в клетку"
}, {
  component: 11,
  drawable: 201,
  texture: 18,
  name: "Синяя с узором"
}, {
  component: 11,
  drawable: 201,
  texture: 21,
  name: "Серая в клетку"
}, {
  component: 11,
  drawable: 201,
  texture: 22,
  name: "Синяя в горошек"
}, {
  component: 11,
  drawable: 201,
  texture: 23,
  name: "Черная в горошек"
}, {
  component: 11,
  drawable: 201,
  texture: 24,
  name: "Голубая в горошек"
}, {
  component: 11,
  drawable: 201,
  texture: 25,
  name: "Белая в горошек"
}, {
  component: 11,
  drawable: 207,
  texture: 0,
  name: "Сине-зеленая куртка на меху"
}, {
  component: 11,
  drawable: 207,
  texture: 1,
  name: "Шафрановая куртка на меху"
}, {
  component: 11,
  drawable: 207,
  texture: 3,
  name: "Красная куртка на меху"
}, {
  component: 11,
  drawable: 207,
  texture: 4,
  name: "Оранжевая куртка на меху"
}, {
  component: 11,
  drawable: 207,
  texture: 5,
  name: "Гламурная куртка на меху"
}, {
  component: 1,
  drawable: 108,
  texture: 0,
  name: "Безумный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 1,
  name: "Безумный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 2,
  name: "Безумный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 3,
  name: "Веселый электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 4,
  name: "Веселый светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 5,
  name: "Веселый неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 6,
  name: "Взбешенный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 7,
  name: "Взбешенный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 8,
  name: "Взбешенный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 9,
  name: "Довольный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 10,
  name: "Довольный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 11,
  name: "Довольный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 12,
  name: "Мирный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 13,
  name: "Мирный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 14,
  name: "Мирный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 15,
  name: "Трансцендентный светящ."
}, {
  component: 1,
  drawable: 108,
  texture: 16,
  name: "Трансцендентный электрич."
}, {
  component: 1,
  drawable: 108,
  texture: 17,
  name: "Трансцендентный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 18,
  name: "Электрический трайбл"
}, {
  component: 1,
  drawable: 108,
  texture: 19,
  name: "Светящийся трайбл"
}, {
  component: 1,
  drawable: 108,
  texture: 20,
  name: "Неоновый трайбл"
}, {
  component: 1,
  drawable: 108,
  texture: 21,
  name: "Светящийся Iwazaru"
}, {
  component: 1,
  drawable: 108,
  texture: 22,
  name: "Электрический Iwazaru"
}, {
  component: 1,
  drawable: 108,
  texture: 23,
  name: "Неоновый Iwazaru"
}, {
  component: 1,
  drawable: 109,
  texture: 0,
  name: "Черная защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 1,
  name: "Серая защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 2,
  name: "Белая защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 3,
  name: "Песочная защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 8,
  name: "Песочная (выпуклые глаза)"
}, {
  component: 1,
  drawable: 109,
  texture: 9,
  name: "Красная (выпуклые глаза)"
}, {
  component: 1,
  drawable: 109,
  texture: 10,
  name: "Черная карбоновая"
}, {
  component: 1,
  drawable: 109,
  texture: 11,
  name: "Песочная карбоновая"
}, {
  component: 1,
  drawable: 109,
  texture: 12,
  name: "Узор-череп"
}, {
  component: 1,
  drawable: 109,
  texture: 13,
  name: "Флектарн"
}, {
  component: 1,
  drawable: 109,
  texture: 14,
  name: "Оскольчатая защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 15,
  name: "Красно-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 16,
  name: "Сине-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 17,
  name: "Желто-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 18,
  name: "Оранжево-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 19,
  name: "Черно-белая защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 20,
  name: "С красной полосой"
}, {
  component: 1,
  drawable: 109,
  texture: 21,
  name: "С черной полосой"
}, {
  component: 1,
  drawable: 109,
  texture: 22,
  name: "Красно-белая защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 23,
  name: "Красная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 24,
  name: "Коричневая цифровая"
}, {
  component: 1,
  drawable: 109,
  texture: 25,
  name: "Осенняя защитная"
}, {
  component: 1,
  drawable: 110,
  texture: 1,
  name: "Карбоновая"
}, {
  component: 1,
  drawable: 110,
  texture: 2,
  name: "Серая чешуйчатая"
}, {
  component: 1,
  drawable: 110,
  texture: 3,
  name: "Песочная цифровая"
}, {
  component: 1,
  drawable: 110,
  texture: 4,
  name: "Боевая Морской камуфляж"
}, {
  component: 1,
  drawable: 110,
  texture: 5,
  name: "Оскольчатая"
}, {
  component: 1,
  drawable: 110,
  texture: 6,
  name: "Оскольчатая Mono"
}, {
  component: 1,
  drawable: 110,
  texture: 7,
  name: "Тактическая Серый лес"
}, {
  component: 1,
  drawable: 110,
  texture: 8,
  name: "Тактическая Темный лес"
}, {
  component: 1,
  drawable: 110,
  texture: 9,
  name: "Электрический череп"
}, {
  component: 1,
  drawable: 110,
  texture: 10,
  name: "Полиция Лос-Сантоса"
}, {
  component: 1,
  drawable: 110,
  texture: 12,
  name: "Полосатая"
}, {
  component: 1,
  drawable: 110,
  texture: 13,
  name: "Тактическая Опера"
}, {
  component: 1,
  drawable: 111,
  texture: 0,
  name: "Маска Праздничный пряник"
}, {
  component: 1,
  drawable: 111,
  texture: 1,
  name: "Маска Веселый пряник"
}, {
  component: 1,
  drawable: 111,
  texture: 2,
  name: "Маска Радостный пряник"
}, {
  component: 1,
  drawable: 111,
  texture: 3,
  name: "Маска Довольный пряник"
}, {
  component: 1,
  drawable: 112,
  texture: 0,
  name: "Серый лес"
}, {
  component: 1,
  drawable: 112,
  texture: 1,
  name: "Маска Морской камуфляж"
}, {
  component: 1,
  drawable: 112,
  texture: 2,
  name: "Заголовок"
}, {
  component: 1,
  drawable: 112,
  texture: 3,
  name: "Оскольчатый камуфляж"
}, {
  component: 1,
  drawable: 112,
  texture: 4,
  name: "Коричневый цифровой"
}, {
  component: 1,
  drawable: 112,
  texture: 5,
  name: "Полосатый лесной"
}, {
  component: 1,
  drawable: 112,
  texture: 6,
  name: "Узор из камня"
}, {
  component: 1,
  drawable: 112,
  texture: 7,
  name: "Восходящее солнце"
}, {
  component: 1,
  drawable: 112,
  texture: 8,
  name: "Опера"
}, {
  component: 1,
  drawable: 112,
  texture: 9,
  name: "Звезды и полосы"
}, {
  component: 1,
  drawable: 112,
  texture: 10,
  name: "Зеленый узор"
}, {
  component: 1,
  drawable: 112,
  texture: 11,
  name: "Готика"
}, {
  component: 1,
  drawable: 113,
  texture: 0,
  name: "Серый противогаз"
}, {
  component: 1,
  drawable: 113,
  texture: 1,
  name: "Карбоновый противогаз"
}, {
  component: 1,
  drawable: 113,
  texture: 2,
  name: "Бежевый цифровой"
}, {
  component: 1,
  drawable: 113,
  texture: 3,
  name: "Морской камуфляж"
}, {
  component: 1,
  drawable: 113,
  texture: 4,
  name: "Оскольчатый противогаз"
}, {
  component: 1,
  drawable: 113,
  texture: 5,
  name: "Серый оскольчатый"
}, {
  component: 1,
  drawable: 113,
  texture: 6,
  name: "Серый полосатый"
}, {
  component: 1,
  drawable: 113,
  texture: 7,
  name: "Болотный полосатый"
}, {
  component: 1,
  drawable: 113,
  texture: 8,
  name: "Персиковый камуфляж"
}, {
  component: 1,
  drawable: 113,
  texture: 9,
  name: "Лесной цифровой"
}, {
  component: 1,
  drawable: 113,
  texture: 10,
  name: "Противогаз-череп"
}, {
  component: 1,
  drawable: 113,
  texture: 11,
  name: "Белый индустриальный"
}, {
  component: 1,
  drawable: 113,
  texture: 12,
  name: "Желтый индустриальный"
}, {
  component: 1,
  drawable: 113,
  texture: 13,
  name: "Оранжевый индустриальный"
}, {
  component: 1,
  drawable: 114,
  texture: 0,
  name: "Черный респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 1,
  name: "Респиратор флектарн"
}, {
  component: 1,
  drawable: 114,
  texture: 2,
  name: "Серый цифровой респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 3,
  name: "Морской камуфляжный"
}, {
  component: 1,
  drawable: 114,
  texture: 4,
  name: "Оскольчатый респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 6,
  name: "Тигровый респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 8,
  name: "Зеленый цифровой"
}, {
  component: 1,
  drawable: 114,
  texture: 9,
  name: "Мазковый респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 10,
  name: "Серый лесной респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 11,
  name: "Респиратор (узор из камня)"
}, {
  component: 1,
  drawable: 114,
  texture: 12,
  name: "Контрастный камуфляжный"
}, {
  component: 1,
  drawable: 114,
  texture: 13,
  name: "Респиратор Гадюка"
}, {
  component: 1,
  drawable: 114,
  texture: 14,
  name: "Респиратор в сетку"
}, {
  component: 1,
  drawable: 115,
  texture: 0,
  name: "Отвратительный Крампус"
}, {
  component: 1,
  drawable: 115,
  texture: 1,
  name: "Грозный Крампус"
}, {
  component: 1,
  drawable: 115,
  texture: 2,
  name: "Гнусный Крампус"
}, {
  component: 1,
  drawable: 115,
  texture: 3,
  name: "Мерзкий Крампус"
}, {
  component: 1,
  drawable: 116,
  texture: 0,
  name: "Черный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 1,
  name: "Белый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 2,
  name: "Серый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 3,
  name: "Синий ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 4,
  name: "Песочный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 5,
  name: "Болотный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 6,
  name: "Бурый камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 7,
  name: "Морской камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 8,
  name: "Серый камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 9,
  name: "Белый цифровой ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 10,
  name: "Зеленый цифровой ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 11,
  name: "Оскольчатый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 12,
  name: "Маскировочный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 13,
  name: "Коричневый цифровой ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 14,
  name: "Лесной ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 15,
  name: "Серый лесной ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 16,
  name: "ПНВ в сетку"
}, {
  component: 1,
  drawable: 116,
  texture: 18,
  name: "ПНВ (узор из камня)"
}, {
  component: 1,
  drawable: 116,
  texture: 19,
  name: "Болотный полосатый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 20,
  name: "Белый камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 21,
  name: "ПНВ (череп)"
}, {
  component: 6,
  drawable: 62,
  texture: 0,
  name: "Желто-зеленые ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 1,
  name: "Черные ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 2,
  name: "Серо-красные ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 3,
  name: "Серые ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 4,
  name: "Ботинки цвета хаки"
}, {
  component: 6,
  drawable: 62,
  texture: 5,
  name: "Песочные ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 6,
  name: "Ботинки цвета ржавчины"
}, {
  component: 6,
  drawable: 62,
  texture: 7,
  name: "Лесные камуфляжные"
}, {
  component: 6,
  drawable: 62,
  texture: 8,
  name: "Морские камуфляжные"
}, {
  component: 6,
  drawable: 62,
  texture: 9,
  name: "Голубые камуфляжные"
}, {
  component: 6,
  drawable: 62,
  texture: 10,
  name: "Розовые камуфляжные"
}, {
  component: 6,
  drawable: 62,
  texture: 11,
  name: "Серые камуфляжные"
}, {
  component: 6,
  drawable: 62,
  texture: 12,
  name: "Светло-синие ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 13,
  name: "Темно-синие ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 14,
  name: "Ботинки с узором"
}, {
  component: 6,
  drawable: 62,
  texture: 15,
  name: "Голубые ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 16,
  name: "Оранжевые ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 17,
  name: "Красные ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 18,
  name: "Болотные ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 19,
  name: "Синие ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 20,
  name: "Осенние камуфляжные"
}, {
  component: 6,
  drawable: 62,
  texture: 21,
  name: "Оскольчатые ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 22,
  name: "Красно-белые ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 23,
  name: "Черно-красные ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 24,
  name: "Черно-синие ботинки"
}, {
  component: 6,
  drawable: 62,
  texture: 25,
  name: "Коричневые ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 0,
  name: "Черные походные"
}, {
  component: 6,
  drawable: 64,
  texture: 1,
  name: "Черно-желтые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 2,
  name: "Черно-синие походные"
}, {
  component: 6,
  drawable: 64,
  texture: 3,
  name: "Бежевые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 4,
  name: "Серо-желтые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 5,
  name: "Осенние походные"
}, {
  component: 6,
  drawable: 64,
  texture: 6,
  name: "Серо-коричневые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 7,
  name: "Коричневые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 8,
  name: "Черно-коричневые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 9,
  name: "Белые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 10,
  name: "Лесные походные"
}, {
  component: 6,
  drawable: 64,
  texture: 11,
  name: "Темно-серые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 12,
  name: "Песочные походные"
}, {
  component: 6,
  drawable: 64,
  texture: 13,
  name: "Болотные походные"
}, {
  component: 6,
  drawable: 64,
  texture: 14,
  name: "Походные цвета хаки"
}, {
  component: 6,
  drawable: 64,
  texture: 15,
  name: "Серые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 16,
  name: "Угольные походные"
}, {
  component: 6,
  drawable: 64,
  texture: 17,
  name: "Красные походные"
}, {
  component: 6,
  drawable: 64,
  texture: 18,
  name: "Оранжевые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 19,
  name: "Синие походные"
}, {
  component: 6,
  drawable: 64,
  texture: 20,
  name: "Темно-синие походные"
}, {
  component: 6,
  drawable: 64,
  texture: 21,
  name: "Зеленые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 22,
  name: "Голубые походные"
}, {
  component: 6,
  drawable: 64,
  texture: 23,
  name: "Сине-коричневые походные"
}, {
  component: 8,
  drawable: 119,
  texture: 0,
  name: "Нагрудник (сверхлегкий)"
}, {
  component: 8,
  drawable: 120,
  texture: 0,
  name: "Нагрудник (легкий)"
}, {
  component: 8,
  drawable: 121,
  texture: 0,
  name: "Нагрудник (средний)"
}, {
  component: 8,
  drawable: 122,
  texture: 0,
  name: "Нагрудник (тяжелый)"
}, {
  component: 8,
  drawable: 123,
  texture: 0,
  name: "Нагрудник (сверхтяжелый)"
}, {
  component: 8,
  drawable: 126,
  texture: 0,
  name: "Черный бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 1,
  name: "Угольный бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 2,
  name: "Пепельный бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 3,
  name: "Белый бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 4,
  name: "Темно-синий бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 5,
  name: "Темно-желтый бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 6,
  name: "Песочный бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 7,
  name: "Светло-желтый бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 8,
  name: "Лососевый бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 9,
  name: "Болотный бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 10,
  name: "Бежевый бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 11,
  name: "Бурый цифровой бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 12,
  name: "Осенний бронежилет"
}, {
  component: 8,
  drawable: 126,
  texture: 13,
  name: "Белый камуфляжный"
}, {
  component: 8,
  drawable: 126,
  texture: 14,
  name: "Бежевый камуфляжный"
}, {
  component: 8,
  drawable: 126,
  texture: 15,
  name: "Красный камуфляжный"
}, {
  component: 11,
  drawable: 211,
  texture: 0,
  name: "Короткая цвета хаки"
}, {
  component: 11,
  drawable: 211,
  texture: 1,
  name: "Зеленая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 2,
  name: "Светло-серая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 3,
  name: "Маскировочная короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 4,
  name: "Голубая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 5,
  name: "Черная короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 6,
  name: "Черно-белая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 7,
  name: "Белая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 8,
  name: "Желто-зеленая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 9,
  name: "Розовая камуфл. короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 10,
  name: "Белая камуфл. короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 11,
  name: "Голубая камуфл. короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 12,
  name: "Черно-красная короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 13,
  name: "Зелено-красная короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 14,
  name: "Черно-серая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 15,
  name: "Охровая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 16,
  name: "Серо-коричневая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 17,
  name: "Горчичная короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 18,
  name: "Оранжевая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 19,
  name: "Темно-зеленая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 20,
  name: "Коричневая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 21,
  name: "Лилово-желтая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 22,
  name: "Темно-серая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 23,
  name: "Оскольчатая короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 24,
  name: "Осенняя короткая"
}, {
  component: 11,
  drawable: 211,
  texture: 25,
  name: "Синяя короткая"
}, {
  component: 11,
  drawable: 212,
  texture: 0,
  name: "Зеленый гадкий свитер"
}, {
  component: 11,
  drawable: 212,
  texture: 1,
  name: "Красный гадкий свитер"
}, {
  component: 11,
  drawable: 212,
  texture: 2,
  name: "Гадкий свитер Единорог"
}, {
  component: 11,
  drawable: 212,
  texture: 3,
  name: "Гадкий свитер Клаус"
}, {
  component: 11,
  drawable: 212,
  texture: 4,
  name: "Гадкий свитер Динозавр"
}, {
  component: 11,
  drawable: 212,
  texture: 5,
  name: "Гадкий свитер Чепуха"
}, {
  component: 11,
  drawable: 212,
  texture: 6,
  name: "Гадкий свитер Полюс"
}, {
  component: 11,
  drawable: 212,
  texture: 7,
  name: "Гадкий свитер Поверь"
}, {
  component: 11,
  drawable: 212,
  texture: 8,
  name: "Гадкий свитер Олень"
}, {
  component: 11,
  drawable: 212,
  texture: 9,
  name: "Гадкий свитер Эльф-шалун"
}, {
  component: 11,
  drawable: 214,
  texture: 2,
  name: "Охровая без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 4,
  name: "Угольная без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 5,
  name: "Без рукавов с синей каймой"
}, {
  component: 11,
  drawable: 214,
  texture: 6,
  name: "Без рукавов с алой каймой"
}, {
  component: 11,
  drawable: 214,
  texture: 9,
  name: "Белая камуфл. без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 12,
  name: "Розовая камуфл. без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 13,
  name: "Темно-синяя без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 14,
  name: "Темно-зеленая без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 15,
  name: "Оранжевая без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 16,
  name: "Светло-серая без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 17,
  name: "Черно-белая без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 18,
  name: "Голубая без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 19,
  name: "Без рукавов цвета хаки"
}, {
  component: 11,
  drawable: 214,
  texture: 21,
  name: "Голубая камуфл. без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 22,
  name: "Маскировочная без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 24,
  name: "Сине-серая без рукавов"
}, {
  component: 11,
  drawable: 214,
  texture: 25,
  name: "Серо-бурая без рукавов"
}, {
  component: 11,
  drawable: 215,
  texture: 0,
  name: "Черная удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 1,
  name: "Кофейная удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 2,
  name: "Оливковая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 3,
  name: "Лесная удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 4,
  name: "Синяя камуфляжная"
}, {
  component: 11,
  drawable: 215,
  texture: 5,
  name: "Бежевая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 6,
  name: "Черно-серая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 7,
  name: "Темно-желтая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 8,
  name: "Серо-черная удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 9,
  name: "Голубая камуфляжная"
}, {
  component: 11,
  drawable: 215,
  texture: 10,
  name: "Розовая камуфляжная"
}, {
  component: 11,
  drawable: 215,
  texture: 11,
  name: "Голубая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 12,
  name: "Охровая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 13,
  name: "Дымчатая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 14,
  name: "Оранжевая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 15,
  name: "Черно-красная удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 16,
  name: "Темно-синяя удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 17,
  name: "Белая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 18,
  name: "Пепельная удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 19,
  name: "Коричневая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 20,
  name: "Осенняя удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 21,
  name: "Оскольчатая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 22,
  name: "Серая удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 23,
  name: "Белая камуфляжная"
}, {
  component: 11,
  drawable: 215,
  texture: 24,
  name: "Угольная удлиненная"
}, {
  component: 11,
  drawable: 215,
  texture: 25,
  name: "Бежево-синяя удлиненная"
}, {
  component: 1,
  drawable: 117,
  texture: 0,
  name: "Темная маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 1,
  name: "Синяя маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 2,
  name: "Светлая маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 3,
  name: "Фиолетовая Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 4,
  name: "Темный камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 5,
  name: "Светлый камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 6,
  name: "Фиолетовый камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 7,
  name: "Лесной камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 8,
  name: "С абстрактным узором"
}, {
  component: 1,
  drawable: 117,
  texture: 9,
  name: "С геометрическим узором"
}, {
  component: 1,
  drawable: 117,
  texture: 10,
  name: "Синяя цифра"
}, {
  component: 1,
  drawable: 117,
  texture: 11,
  name: "Серая цифра"
}, {
  component: 1,
  drawable: 117,
  texture: 12,
  name: "Черно-белые полосы"
}, {
  component: 1,
  drawable: 117,
  texture: 13,
  name: "Пестрая маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 14,
  name: "Маска (дикая)"
}, {
  component: 1,
  drawable: 117,
  texture: 15,
  name: "Маска (осень)"
}, {
  component: 1,
  drawable: 117,
  texture: 16,
  name: "Оранжевая маска (осень)"
}, {
  component: 4,
  drawable: 81,
  texture: 0,
  name: "Темные треники (растения)"
}, {
  component: 4,
  drawable: 81,
  texture: 1,
  name: "Белые треники (растения)"
}, {
  component: 4,
  drawable: 81,
  texture: 2,
  name: "Персик. треники (растения)"
}, {
  component: 4,
  drawable: 81,
  texture: 3,
  name: "Сине-зеленые с узором"
}, {
  component: 4,
  drawable: 81,
  texture: 4,
  name: "Зеленые треники с узором"
}, {
  component: 4,
  drawable: 81,
  texture: 5,
  name: "Треники (осень)"
}, {
  component: 4,
  drawable: 81,
  texture: 6,
  name: "Оранжевые треники (осень)"
}, {
  component: 4,
  drawable: 81,
  texture: 7,
  name: "Лиловые треники (камуфляж)"
}, {
  component: 4,
  drawable: 81,
  texture: 8,
  name: "Белые треники (камуфляж)"
}, {
  component: 4,
  drawable: 81,
  texture: 9,
  name: "Темные треники (камуфляж)"
}, {
  component: 4,
  drawable: 81,
  texture: 12,
  name: "Полосатые треники"
}, {
  component: 4,
  drawable: 81,
  texture: 13,
  name: "Пятнистые треники"
}, {
  component: 6,
  drawable: 67,
  texture: 0,
  name: "Фиолетовая вспышка"
}, {
  component: 6,
  drawable: 67,
  texture: 1,
  name: "Полночь"
}, {
  component: 6,
  drawable: 67,
  texture: 2,
  name: "Закат"
}, {
  component: 6,
  drawable: 67,
  texture: 3,
  name: "Зеленые беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 4,
  name: "Кремово-розовые беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 5,
  name: "Черно-красные беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 6,
  name: "Серо-оранжевые беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 11,
  name: "Оранжевая вспышка"
}, {
  component: 6,
  drawable: 67,
  texture: 12,
  name: "Розовая вспышка"
}, {
  component: 6,
  drawable: 67,
  texture: 13,
  name: "Бело-оранжевые беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 14,
  name: "Беговые ярких цветов"
}, {
  component: 6,
  drawable: 67,
  texture: 15,
  name: "Пепельные беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 16,
  name: "Бежевые беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 17,
  name: "Серые беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 18,
  name: "Синие беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 19,
  name: "Красные беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 20,
  name: "Оттенки серого"
}, {
  component: 6,
  drawable: 67,
  texture: 21,
  name: "Синяя вспышка"
}, {
  component: 6,
  drawable: 67,
  texture: 22,
  name: "Белые беговые"
}, {
  component: 6,
  drawable: 67,
  texture: 23,
  name: "Беговые графитового цвета"
}, {
  component: 6,
  drawable: 67,
  texture: 24,
  name: "Мокко"
}, {
  component: 6,
  drawable: 67,
  texture: 25,
  name: "Одноцветные беговые"
}, {
  component: 8,
  drawable: 127,
  texture: 0,
  name: "Футболка с кругл. вырезом"
}, {
  component: 8,
  drawable: 127,
  texture: 1,
  name: "Белая Manor с зигзагами"
}, {
  component: 8,
  drawable: 127,
  texture: 2,
  name: "Белая футболка Manor"
}, {
  component: 8,
  drawable: 127,
  texture: 3,
  name: "Лиловая футболка Manor"
}, {
  component: 8,
  drawable: 127,
  texture: 4,
  name: "Салатовая футболка Manor"
}, {
  component: 8,
  drawable: 127,
  texture: 5,
  name: "Черная полосатая Manor"
}, {
  component: 8,
  drawable: 127,
  texture: 6,
  name: "Белая полосатая Manor"
}, {
  component: 8,
  drawable: 127,
  texture: 7,
  name: "Blagueurs с зеленым шаром"
}, {
  component: 8,
  drawable: 127,
  texture: 8,
  name: "Blagueurs с фиолет. шаром"
}, {
  component: 8,
  drawable: 127,
  texture: 9,
  name: "Брендовая Blagueurs"
}, {
  component: 8,
  drawable: 127,
  texture: 10,
  name: "Футболка Blagueurs LS"
}, {
  component: 8,
  drawable: 127,
  texture: 11,
  name: "Полосатая Blagueurs"
}, {
  component: 8,
  drawable: 127,
  texture: 12,
  name: "Спортивная Blagueurs"
}, {
  component: 8,
  drawable: 127,
  texture: 13,
  name: "Сине-зеленая Blagueurs LS"
}, {
  component: 8,
  drawable: 127,
  texture: 14,
  name: "Черно-белая Blagueurs LS"
}, {
  component: 8,
  drawable: 127,
  texture: 15,
  name: "Розово-оранж. Santo Capra"
}, {
  component: 8,
  drawable: 127,
  texture: 16,
  name: "Синяя Santo Capra"
}, {
  component: 8,
  drawable: 127,
  texture: 17,
  name: "Желтая Santo Capra"
}, {
  component: 8,
  drawable: 127,
  texture: 18,
  name: "Розовая Santo Capra"
}, {
  component: 8,
  drawable: 127,
  texture: 19,
  name: "Красно-черная Santo Capra"
}, {
  component: 8,
  drawable: 127,
  texture: 20,
  name: "Santo Capra в син. полоску"
}, {
  component: 11,
  drawable: 222,
  texture: 0,
  name: "Бело-оранжевый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 1,
  name: "Оранжевый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 2,
  name: "Бело-красный Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 3,
  name: "Бело-бирюзовый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 4,
  name: "Розовый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 5,
  name: "Бело-фиолетовый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 6,
  name: "Синий Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 7,
  name: "Фиолетовый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 8,
  name: "Сине-бирюзовый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 9,
  name: "Бело-золотой Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 10,
  name: "Розово-черный Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 11,
  name: "Черно-голубой Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 12,
  name: "Черно-салатовый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 13,
  name: "Красно-черный Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 14,
  name: "Сине-зеленый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 15,
  name: "Темный Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 16,
  name: "Сине-желтый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 17,
  name: "Черно-красный Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 19,
  name: "Желтый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 20,
  name: "Мандариновый Bigness"
}, {
  component: 11,
  drawable: 222,
  texture: 21,
  name: "Бело-зеленый Bigness"
}, {
  component: 11,
  drawable: 223,
  texture: 0,
  name: "Лиловая кошка (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 1,
  name: "Оранж. кошка (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 2,
  name: "Синяя кошка (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 3,
  name: "Золотая кошка (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 4,
  name: "Лилово-белая SN (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 5,
  name: "Зеленая SN (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 6,
  name: "Оранжевая SN (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 7,
  name: "Черно-оранж. SN (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 8,
  name: "Черная Bigness (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 9,
  name: "Серая Prolaps (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 10,
  name: "Синяя Prolaps (застег.)"
}, {
  component: 11,
  drawable: 223,
  texture: 11,
  name: "Красная Prolaps (застег.)"
}, {
  component: 11,
  drawable: 224,
  texture: 0,
  name: "Blagueurs в бежев. полоску"
}, {
  component: 11,
  drawable: 224,
  texture: 1,
  name: "Blagueurs в розов. полоску"
}, {
  component: 11,
  drawable: 224,
  texture: 2,
  name: "Blagueurs в салат. полоску"
}, {
  component: 11,
  drawable: 224,
  texture: 3,
  name: "Blagueurs в желтую полоску"
}, {
  component: 11,
  drawable: 224,
  texture: 4,
  name: "Blagueurs в оранж. полоску"
}, {
  component: 11,
  drawable: 224,
  texture: 5,
  name: "Blagueurs в синюю полоску"
}, {
  component: 11,
  drawable: 224,
  texture: 6,
  name: "Салатовая Blagueurs"
}, {
  component: 11,
  drawable: 224,
  texture: 7,
  name: "Песочно-фиолетовая Güffy"
}, {
  component: 11,
  drawable: 224,
  texture: 8,
  name: "Сине-красная Güffy"
}, {
  component: 11,
  drawable: 224,
  texture: 9,
  name: "Мандариново-белая Güffy"
}, {
  component: 11,
  drawable: 224,
  texture: 10,
  name: "Оранжево-желтая Güffy"
}, {
  component: 11,
  drawable: 224,
  texture: 11,
  name: "Белая Santo Capra"
}, {
  component: 11,
  drawable: 224,
  texture: 12,
  name: "Красная Santo Capra"
}, {
  component: 11,
  drawable: 224,
  texture: 13,
  name: "Santo Capra (дикая)"
}, {
  component: 11,
  drawable: 224,
  texture: 14,
  name: "SC белый шеврон"
}, {
  component: 11,
  drawable: 224,
  texture: 15,
  name: "SC розовый шеврон"
}, {
  component: 11,
  drawable: 224,
  texture: 16,
  name: "SC темный шеврон"
}, {
  component: 11,
  drawable: 224,
  texture: 17,
  name: "Желтая SC"
}, {
  component: 11,
  drawable: 224,
  texture: 18,
  name: "Бирюзовая SC"
}, {
  component: 11,
  drawable: 224,
  texture: 19,
  name: "Розовая SC"
}, {
  component: 11,
  drawable: 225,
  texture: 0,
  name: "Синий кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 1,
  name: "Розовый кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 2,
  name: "Оранжевый кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 3,
  name: "Красный кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 4,
  name: "Бело-серый кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 6,
  name: "Серо-красный кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 7,
  name: "Светло-коричневый кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 8,
  name: "Пурпурный кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 9,
  name: "Сине-зеленый кардиган"
}, {
  component: 11,
  drawable: 225,
  texture: 10,
  name: "Зеленый кардиган"
}, {
  component: 11,
  drawable: 226,
  texture: 0,
  name: "Свитер (лазурь)"
}, {
  component: 11,
  drawable: 226,
  texture: 1,
  name: "Свитер (рассвет)"
}, {
  component: 11,
  drawable: 226,
  texture: 2,
  name: "Свитер (тутти-фрутти)"
}, {
  component: 11,
  drawable: 226,
  texture: 3,
  name: "Свитер (ночь)"
}, {
  component: 11,
  drawable: 226,
  texture: 4,
  name: "Свитер (тундра)"
}, {
  component: 11,
  drawable: 226,
  texture: 5,
  name: "Свитер (тропики)"
}, {
  component: 11,
  drawable: 226,
  texture: 6,
  name: "Темно-синий свитер Perseus"
}, {
  component: 11,
  drawable: 226,
  texture: 7,
  name: "Коричн. брендовый Perseus"
}, {
  component: 11,
  drawable: 226,
  texture: 8,
  name: "Коричневый свитер Perseus"
}, {
  component: 11,
  drawable: 226,
  texture: 9,
  name: "Коричн. Perseus с принтом"
}, {
  component: 11,
  drawable: 226,
  texture: 10,
  name: "Свитер (зеленый узор)"
}, {
  component: 11,
  drawable: 226,
  texture: 11,
  name: "Свитер (фиолетовый узор)"
}, {
  component: 11,
  drawable: 226,
  texture: 12,
  name: "Свитер (синий узор)"
}, {
  component: 11,
  drawable: 226,
  texture: 13,
  name: "Свитер (красный узор)"
}, {
  component: 11,
  drawable: 226,
  texture: 14,
  name: "Зеленый свитер (растения)"
}, {
  component: 11,
  drawable: 226,
  texture: 15,
  name: "Лиловый свитер (растения)"
}, {
  component: 11,
  drawable: 226,
  texture: 16,
  name: "Белый свитер (растения)"
}, {
  component: 11,
  drawable: 226,
  texture: 17,
  name: "Розовый свитер (растения)"
}, {
  component: 11,
  drawable: 226,
  texture: 18,
  name: "Красный свитер (цветы)"
}, {
  component: 11,
  drawable: 226,
  texture: 19,
  name: "Синий свитер (цветы)"
}, {
  component: 11,
  drawable: 226,
  texture: 20,
  name: "Черный свитер (цветы)"
}, {
  component: 11,
  drawable: 226,
  texture: 21,
  name: "Белый свитер (цветы)"
}, {
  component: 11,
  drawable: 227,
  texture: 0,
  name: "Бордовая Garland"
}, {
  component: 11,
  drawable: 227,
  texture: 1,
  name: "Черная Garland"
}, {
  component: 11,
  drawable: 227,
  texture: 2,
  name: "Желтая Savanna"
}, {
  component: 11,
  drawable: 227,
  texture: 3,
  name: "Синяя Savanna"
}, {
  component: 11,
  drawable: 227,
  texture: 4,
  name: "Розовая Savanna"
}, {
  component: 11,
  drawable: 227,
  texture: 5,
  name: "Черная Savanna"
}, {
  component: 11,
  drawable: 227,
  texture: 6,
  name: "Персиковая (растения)"
}, {
  component: 11,
  drawable: 227,
  texture: 7,
  name: "Розовая (растения)"
}, {
  component: 11,
  drawable: 227,
  texture: 8,
  name: "Зеленая (растения)"
}, {
  component: 11,
  drawable: 227,
  texture: 9,
  name: "Бирюзовая (растения)"
}, {
  component: 11,
  drawable: 227,
  texture: 10,
  name: "Синяя (листья)"
}, {
  component: 11,
  drawable: 227,
  texture: 11,
  name: "Серая (листья)"
}, {
  component: 11,
  drawable: 227,
  texture: 12,
  name: "Красная (листья)"
}, {
  component: 11,
  drawable: 227,
  texture: 13,
  name: "Сине-зеленая (листья)"
}, {
  component: 11,
  drawable: 227,
  texture: 14,
  name: "Темно-синяя (букеты)"
}, {
  component: 11,
  drawable: 227,
  texture: 15,
  name: "Синяя (букеты)"
}, {
  component: 11,
  drawable: 227,
  texture: 16,
  name: "Лиловая (цветы)"
}, {
  component: 11,
  drawable: 227,
  texture: 17,
  name: "Рубашка (цветы)"
}, {
  component: 11,
  drawable: 227,
  texture: 18,
  name: "С ярким градиентом"
}, {
  component: 11,
  drawable: 227,
  texture: 19,
  name: "С красочным градиентом"
}, {
  component: 11,
  drawable: 227,
  texture: 20,
  name: "С городским градиентом"
}, {
  component: 11,
  drawable: 227,
  texture: 21,
  name: "С холодным градиентом"
}, {
  component: 11,
  drawable: 228,
  texture: 0,
  name: "Лиловая кошка (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 1,
  name: "Оранж. кошка (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 2,
  name: "Синяя кошка (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 3,
  name: "Золотая кошка (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 4,
  name: "Лилово-белая SN (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 5,
  name: "Зеленая SN (расстегнутая)"
}, {
  component: 11,
  drawable: 228,
  texture: 6,
  name: "Оранжевая SN (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 7,
  name: "Черно-оранж. SN (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 8,
  name: "Черная Bigness (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 9,
  name: "Серая Prolaps (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 10,
  name: "Синяя Prolaps (расстег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 11,
  name: "Красная Prolaps (расстег.)"
}, {
  component: 11,
  drawable: 229,
  texture: 0,
  name: "Серая толстовка Blagueurs"
}, {
  component: 11,
  drawable: 229,
  texture: 1,
  name: "Черная толстовка Blagueurs"
}, {
  component: 11,
  drawable: 229,
  texture: 2,
  name: "Белая толстовка Blagueurs"
}, {
  component: 11,
  drawable: 229,
  texture: 4,
  name: "Черная Güffy (граффити)"
}, {
  component: 11,
  drawable: 229,
  texture: 5,
  name: "Зеленая Güffy (брызги)"
}, {
  component: 11,
  drawable: 229,
  texture: 6,
  name: "Темная Güffy (пятна)"
}, {
  component: 11,
  drawable: 229,
  texture: 8,
  name: "Güffy (синие листья)"
}, {
  component: 11,
  drawable: 229,
  texture: 9,
  name: "Güffy (разноцветн. листья)"
}, {
  component: 11,
  drawable: 229,
  texture: 10,
  name: "Güffy (зеленые пятна)"
}, {
  component: 11,
  drawable: 229,
  texture: 11,
  name: "Güffy (фиолетовые пятна)"
}, {
  component: 11,
  drawable: 229,
  texture: 12,
  name: "Голубая толстовка SN"
}, {
  component: 11,
  drawable: 229,
  texture: 13,
  name: "Желтая толстовка SN"
}, {
  component: 11,
  drawable: 229,
  texture: 14,
  name: "Розовая толстовка SN"
}, {
  component: 11,
  drawable: 229,
  texture: 15,
  name: "Бело-персиковая Güffy"
}, {
  component: 11,
  drawable: 231,
  texture: 0,
  name: "Черная косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 1,
  name: "Шоколадная косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 2,
  name: "Поношенная косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 3,
  name: "Двуцветная косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 5,
  name: "Синяя косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 6,
  name: "Красная косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 7,
  name: "Охровая косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 8,
  name: "Бежевая косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 9,
  name: "Коричневая косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 10,
  name: "Cерая косуха"
}, {
  component: 11,
  drawable: 231,
  texture: 11,
  name: "Белая косуха"
}, {
  component: 11,
  drawable: 232,
  texture: 0,
  name: "Лиловый кожаный (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 1,
  name: "Зеленая в пятнах (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 2,
  name: "Оранж. в пятнах (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 3,
  name: "Синяя в пятнах (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 4,
  name: "Зеленый леопард (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 5,
  name: "Бледный леопард (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 6,
  name: "Фиолет. леопард (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 7,
  name: "Бирюзов. леопард (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 8,
  name: "Bigness зебра (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 9,
  name: "Bigness пятна (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 10,
  name: "Коричневая SN (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 11,
  name: "Черная SN (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 12,
  name: "Разноцветная SN (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 13,
  name: "Золотая SN (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 14,
  name: "Цветная Geo SN (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 15,
  name: "Золотая Geo SN (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 16,
  name: "Золотая Geo PRB (застег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 17,
  name: "Цветная Geo PRB (застег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 0,
  name: "Лиловый кожаный (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 1,
  name: "Зелен. в пятнах (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 2,
  name: "Оранж. в пятнах (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 3,
  name: "Синяя в пятнах (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 4,
  name: "Зеленый леопард (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 5,
  name: "Бледный леопард (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 6,
  name: "Фиолет. леопард (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 7,
  name: "Бирюз. леопард (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 8,
  name: "Bigness зебра (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 9,
  name: "Bigness пятна (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 10,
  name: "Коричневая SN (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 11,
  name: "Черная SN (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 12,
  name: "Разноцветная SN (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 13,
  name: "Золотая SN (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 14,
  name: "Цветная Geo SN (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 15,
  name: "Золотая Geo SN (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 16,
  name: "Золотая Geo PRB (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 17,
  name: "Цветная Geo PRB (расстег.)"
}, {
  component: 11,
  drawable: 234,
  texture: 0,
  name: "Зеленая Didier Sachs"
}, {
  component: 11,
  drawable: 234,
  texture: 1,
  name: "Черная Didier Sachs"
}, {
  component: 11,
  drawable: 234,
  texture: 2,
  name: "Серая Didier Sachs"
}, {
  component: 11,
  drawable: 234,
  texture: 3,
  name: "Красная Didier Sachs"
}, {
  component: 11,
  drawable: 234,
  texture: 4,
  name: "Охровая Didier Sachs"
}, {
  component: 11,
  drawable: 236,
  texture: 0,
  name: "Пуховик (яркий градиент)"
}, {
  component: 11,
  drawable: 236,
  texture: 1,
  name: "Пуховик (красочный град.)"
}, {
  component: 11,
  drawable: 236,
  texture: 2,
  name: "Пуховик (городской град.)"
}, {
  component: 11,
  drawable: 236,
  texture: 3,
  name: "Пуховик (холодный град.)"
}, {
  component: 11,
  drawable: 236,
  texture: 4,
  name: "Пуховик (зеленый градиент)"
}, {
  component: 11,
  drawable: 236,
  texture: 5,
  name: "Пуховик (фиолет. градиент)"
}, {
  component: 11,
  drawable: 236,
  texture: 6,
  name: "Зеленый леопард"
}, {
  component: 11,
  drawable: 236,
  texture: 7,
  name: "Бледный леопард"
}, {
  component: 11,
  drawable: 236,
  texture: 8,
  name: "Бирюзовый леопард"
}, {
  component: 11,
  drawable: 236,
  texture: 9,
  name: "Фиолетовый леопард"
}, {
  component: 11,
  drawable: 236,
  texture: 10,
  name: "Оранжево-неоновый пуховик"
}, {
  component: 11,
  drawable: 236,
  texture: 12,
  name: "Черно-неоновый пуховик"
}, {
  component: 11,
  drawable: 236,
  texture: 13,
  name: "Темный пуховик"
}, {
  component: 11,
  drawable: 236,
  texture: 14,
  name: "Черный брендовый пуховик"
}, {
  component: 11,
  drawable: 236,
  texture: 15,
  name: "Белый брендовый пуховик"
}, {
  component: 1,
  drawable: 120,
  texture: 0,
  name: "Коричневый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 1,
  name: "Белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 2,
  name: "Черный Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 3,
  name: "Стервятник (красный крест)"
}, {
  component: 1,
  drawable: 120,
  texture: 4,
  name: "Зеленый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 5,
  name: "Синий Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 6,
  name: "Бежевый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 7,
  name: "Стервятник (сетка)"
}, {
  component: 1,
  drawable: 120,
  texture: 8,
  name: "Оскольчатый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 9,
  name: "Красноперый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 10,
  name: "Черно-белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 11,
  name: "Пепельный Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 12,
  name: "Черно-желтый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 13,
  name: "Красно-белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 14,
  name: "Буро-белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 15,
  name: "Буро-желтый Стервятник"
}, {
  component: 1,
  drawable: 121,
  texture: 0,
  name: "Зеленый Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 1,
  name: "Коричневый Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 2,
  name: "Лиловый Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 3,
  name: "Красный Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 4,
  name: "Черный Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 5,
  name: "Звездный Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 6,
  name: "Бурый Ловец (камуфляж)"
}, {
  component: 1,
  drawable: 121,
  texture: 7,
  name: "Зеленый Ловец (камуфляж)"
}, {
  component: 1,
  drawable: 122,
  texture: 0,
  name: "Оранжевый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 1,
  name: "Темно-бурый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 2,
  name: "Каштановый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 3,
  name: "Красный Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 4,
  name: "Бежевый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 5,
  name: "Ярко-оранжевый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 6,
  name: "Синий Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 7,
  name: "Серый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 8,
  name: "Зеленый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 9,
  name: "Коричневый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 10,
  name: "Красно-серый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 11,
  name: "Оранжево-серый Налетчик"
}, {
  component: 1,
  drawable: 126,
  texture: 0,
  name: "Темно-коричневый Мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 1,
  name: "Радиоактивный мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 2,
  name: "Мародер (молния)"
}, {
  component: 1,
  drawable: 126,
  texture: 3,
  name: "Фирменный мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 4,
  name: "Мародер (череп и кости)"
}, {
  component: 1,
  drawable: 126,
  texture: 5,
  name: "Мародер (красная полоса)"
}, {
  component: 1,
  drawable: 126,
  texture: 6,
  name: "Желтый Мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 7,
  name: "Мародер (бильярдный шар)"
}, {
  component: 1,
  drawable: 126,
  texture: 8,
  name: "Мародер (черная стрела)"
}, {
  component: 1,
  drawable: 126,
  texture: 9,
  name: "Мародер (звезды)"
}, {
  component: 1,
  drawable: 126,
  texture: 10,
  name: "Бежевый Мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 11,
  name: "Черный Мародер"
}, {
  component: 1,
  drawable: 127,
  texture: 0,
  name: "Маска Paco the Taco"
}, {
  component: 1,
  drawable: 128,
  texture: 0,
  name: "Маска Burger Shot"
}, {
  component: 1,
  drawable: 129,
  texture: 0,
  name: "Маска Cluckin' Bell"
}, {
  component: 1,
  drawable: 130,
  texture: 0,
  name: "Синяя оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 1,
  name: "Белая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 2,
  name: "Черная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 3,
  name: "Красная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 4,
  name: "Зеленая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 5,
  name: "Желтая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 6,
  name: "Розовая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 7,
  name: "Оранжевая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 8,
  name: "Лиловая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 9,
  name: "Серо-красная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 10,
  name: "Черно-зеленая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 11,
  name: "Бежево-оранжевая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 12,
  name: "Оранжево-желтая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 13,
  name: "Бело-синяя оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 14,
  name: "Лилово-черная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 15,
  name: "Красно-черная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 16,
  name: "Зелено-желтая оптика"
}, {
  component: 4,
  drawable: 83,
  texture: 0,
  name: "Черные штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 1,
  name: "Серые штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 2,
  name: "Белые штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 3,
  name: "Бурые штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 4,
  name: "Песочные штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 5,
  name: "Бежевые штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 6,
  name: "Серые камуфляжные штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 7,
  name: "Зеленые камуфляжные штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 8,
  name: "Лесные штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 9,
  name: "Галечные штаны"
}, {
  component: 4,
  drawable: 83,
  texture: 10,
  name: "Зеленые штаны (лес)"
}, {
  component: 4,
  drawable: 83,
  texture: 11,
  name: "Бежевые штаны (лес)"
}, {
  component: 4,
  drawable: 83,
  texture: 12,
  name: "Серые штаны (лес)"
}, {
  component: 4,
  drawable: 83,
  texture: 13,
  name: "Песочные штаны (лес)"
}, {
  component: 4,
  drawable: 84,
  texture: 1,
  name: "Серые шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 3,
  name: "Бурые шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 4,
  name: "Песочные шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 5,
  name: "Бежевые шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 6,
  name: "Серые камуфляжные шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 7,
  name: "Зеленые камуфляжные шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 8,
  name: "Лесные шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 9,
  name: "Галечные шорты"
}, {
  component: 4,
  drawable: 84,
  texture: 10,
  name: "Зеленые шорты (лес)"
}, {
  component: 4,
  drawable: 84,
  texture: 11,
  name: "Бежевые шорты (лес)"
}, {
  component: 4,
  drawable: 84,
  texture: 12,
  name: "Серые шорты (лес)"
}, {
  component: 4,
  drawable: 84,
  texture: 13,
  name: "Песочные шорты (лес)"
}, {
  component: 4,
  drawable: 86,
  texture: 0,
  name: "Черные кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 1,
  name: "Черно-красные кожаные"
}, {
  component: 4,
  drawable: 86,
  texture: 2,
  name: "Белые кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 3,
  name: "Бордовые кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 4,
  name: "Красные кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 5,
  name: "Синие кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 6,
  name: "Темно-зеленые кожаные"
}, {
  component: 4,
  drawable: 86,
  texture: 7,
  name: "Серые кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 8,
  name: "Коричневые кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 9,
  name: "Оранжевые кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 10,
  name: "Пепельные кожаные штаны"
}, {
  component: 4,
  drawable: 86,
  texture: 11,
  name: "Красноватые кожаные штаны"
}, {
  component: 4,
  drawable: 88,
  texture: 0,
  name: "Бурые штаны Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 1,
  name: "Черные штаны Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 2,
  name: "Зеленые штаны Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 3,
  name: "Бежевые штаны Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 4,
  name: "Синие камуфляжные штаны"
}, {
  component: 4,
  drawable: 88,
  texture: 6,
  name: "Белые камуфляжные штаны"
}, {
  component: 4,
  drawable: 88,
  texture: 7,
  name: "Штаны в сетку Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 8,
  name: "Желтые штаны Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 9,
  name: "Черно-белые Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 10,
  name: "Красные штаны Налетчик"
}, {
  component: 4,
  drawable: 88,
  texture: 11,
  name: "Синие штаны Налетчик"
}, {
  component: 6,
  drawable: 69,
  texture: 0,
  name: "Белые с голубой подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 1,
  name: "Белые с зеленой подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 2,
  name: "Белые с розовой подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 3,
  name: "Белые с красной подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 4,
  name: "Серые с голубой подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 5,
  name: "Серые с зеленой подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 6,
  name: "Серые с розовой подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 7,
  name: "Серые с красной подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 8,
  name: "Черные (голубая подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 9,
  name: "Черные (зеленая подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 10,
  name: "Черные (розовая подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 11,
  name: "Черные (красная подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 12,
  name: "Розовые (синяя подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 13,
  name: "Розовые (зеленая подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 14,
  name: "Темные (розовая подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 15,
  name: "Красные с подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 16,
  name: "Светлые (голубая подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 17,
  name: "Темные (зеленая подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 18,
  name: "С ярко-розовой подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 19,
  name: "Светлые (красная подсветка)"
}, {
  component: 6,
  drawable: 69,
  texture: 20,
  name: "С красной подсветкой"
}, {
  component: 6,
  drawable: 69,
  texture: 21,
  name: "С розовой подсветкой"
}, {
  component: 6,
  drawable: 71,
  texture: 0,
  name: "Ботинки с горящим черепом"
}, {
  component: 6,
  drawable: 71,
  texture: 1,
  name: "Красные с горящим черепом"
}, {
  component: 6,
  drawable: 73,
  texture: 0,
  name: "Черные с черепом"
}, {
  component: 6,
  drawable: 73,
  texture: 1,
  name: "Темно-коричневые с черепом"
}, {
  component: 6,
  drawable: 73,
  texture: 2,
  name: "Песочные ботинки с черепом"
}, {
  component: 6,
  drawable: 76,
  texture: 0,
  name: "Коричневые Налетчик"
}, {
  component: 6,
  drawable: 76,
  texture: 1,
  name: "Темно-бурые Налетчик"
}, {
  component: 6,
  drawable: 76,
  texture: 2,
  name: "Зеленые Налетчик"
}, {
  component: 6,
  drawable: 76,
  texture: 3,
  name: "Бежевые Налетчик"
}, {
  component: 6,
  drawable: 76,
  texture: 4,
  name: "Белые Налетчик"
}, {
  component: 6,
  drawable: 76,
  texture: 5,
  name: "Серые Налетчик"
}, {
  component: 6,
  drawable: 76,
  texture: 6,
  name: "Красные Налетчик"
}, {
  component: 6,
  drawable: 76,
  texture: 7,
  name: "Коричнево-белые Налетчик"
}, {
  component: 6,
  drawable: 77,
  texture: 0,
  name: "Коричневые с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 1,
  name: "Черные с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 2,
  name: "Светло-зеленые с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 4,
  name: "Голубые с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 5,
  name: "Зеленые с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 6,
  name: "Белые с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 7,
  name: "С защитой и в сетку"
}, {
  component: 6,
  drawable: 77,
  texture: 8,
  name: "Желтые с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 9,
  name: "Стальные с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 10,
  name: "Красные с защитой"
}, {
  component: 6,
  drawable: 77,
  texture: 11,
  name: "Синие с защитой"
}, {
  component: 7,
  drawable: 119,
  texture: 0,
  name: "Медальон Эпсилон"
}, {
  component: 8,
  drawable: 133,
  texture: 2,
  name: "Черная Рейнджер"
}, {
  component: 8,
  drawable: 133,
  texture: 3,
  name: "Белая Рейнджер"
}, {
  component: 8,
  drawable: 133,
  texture: 4,
  name: "Желтая Рейнджер"
}, {
  component: 8,
  drawable: 133,
  texture: 5,
  name: "Зеленая Рейнджер"
}, {
  component: 8,
  drawable: 133,
  texture: 6,
  name: "Черная с лого Рейнджеры"
}, {
  component: 8,
  drawable: 133,
  texture: 7,
  name: "Зеленая с лого Рейнджеры"
}, {
  component: 8,
  drawable: 133,
  texture: 8,
  name: "Белая футболка Фазы"
}, {
  component: 8,
  drawable: 133,
  texture: 9,
  name: "Желтая футболка Фазы"
}, {
  component: 8,
  drawable: 133,
  texture: 10,
  name: "Синяя футболка Ракета"
}, {
  component: 8,
  drawable: 133,
  texture: 11,
  name: "Розовая футболка Ракета"
}, {
  component: 8,
  drawable: 133,
  texture: 12,
  name: "Черная Пришелец"
}, {
  component: 8,
  drawable: 133,
  texture: 13,
  name: "Розовая Пришелец"
}, {
  component: 8,
  drawable: 133,
  texture: 14,
  name: "Лиловая Две луны"
}, {
  component: 8,
  drawable: 133,
  texture: 15,
  name: "Синяя Две луны"
}, {
  component: 8,
  drawable: 133,
  texture: 16,
  name: "Розовая Две луны"
}, {
  component: 8,
  drawable: 133,
  texture: 17,
  name: "Синяя Цена свободы"
}, {
  component: 8,
  drawable: 133,
  texture: 18,
  name: "Зеленая Цена свободы"
}, {
  component: 8,
  drawable: 133,
  texture: 19,
  name: "Красная Цена свободы"
}, {
  component: 11,
  drawable: 242,
  texture: 0,
  name: "Зелено-желтый Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 1,
  name: "Верх Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 2,
  name: "Серый верх Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 4,
  name: "Коричнево-белый Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 5,
  name: "Болотно-зеленый Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 6,
  name: "Черный верх Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 7,
  name: "Белый верх Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 12,
  name: "Зелено-черный Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 13,
  name: "Разноцветный Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 14,
  name: "Красно-черный Налетчик"
}, {
  component: 11,
  drawable: 242,
  texture: 15,
  name: "Синий верх Налетчик"
}, {
  component: 11,
  drawable: 243,
  texture: 0,
  name: "Коричневый Кожа и перья"
}, {
  component: 11,
  drawable: 243,
  texture: 1,
  name: "Красноватый Кожа и перья"
}, {
  component: 11,
  drawable: 243,
  texture: 2,
  name: "Белый верх Кожа и перья"
}, {
  component: 11,
  drawable: 243,
  texture: 3,
  name: "Оранжевый Кожа и перья"
}, {
  component: 11,
  drawable: 243,
  texture: 4,
  name: "Красно-черный верх (кожа)"
}, {
  component: 11,
  drawable: 243,
  texture: 5,
  name: "Черный верх Кожа и перья"
}, {
  component: 11,
  drawable: 243,
  texture: 6,
  name: "Желто-черный верх (кожа)"
}, {
  component: 11,
  drawable: 243,
  texture: 7,
  name: "Зеленый Кожа и перья"
}, {
  component: 11,
  drawable: 246,
  texture: 0,
  name: "Толстовка Benedict Light"
}, {
  component: 11,
  drawable: 246,
  texture: 1,
  name: "Толстовка Taco Bomb"
}, {
  component: 11,
  drawable: 246,
  texture: 2,
  name: "Оранжевая Cluckin' Bell"
}, {
  component: 11,
  drawable: 246,
  texture: 3,
  name: "Толстовка Patriot Beer"
}, {
  component: 11,
  drawable: 246,
  texture: 4,
  name: "Толстовка Pisswasser"
}, {
  component: 11,
  drawable: 246,
  texture: 5,
  name: "Толстовка Burger Shot"
}, {
  component: 11,
  drawable: 246,
  texture: 6,
  name: "Толстовка Корн-дог"
}, {
  component: 11,
  drawable: 246,
  texture: 7,
  name: "Толстовка Пончик"
}, {
  component: 11,
  drawable: 246,
  texture: 8,
  name: "Толстовка Lucky Plucker"
}, {
  component: 11,
  drawable: 246,
  texture: 9,
  name: "Толстовка Logger Light"
}, {
  component: 11,
  drawable: 246,
  texture: 10,
  name: "Толстовка Пицца"
}, {
  component: 11,
  drawable: 246,
  texture: 11,
  name: "Толстовка Картошка фри"
}, {
  component: 11,
  drawable: 246,
  texture: 12,
  name: "Толстовка Грибы"
}, {
  component: 11,
  drawable: 246,
  texture: 13,
  name: "Толстовка Redwood"
}, {
  component: 11,
  drawable: 246,
  texture: 14,
  name: "Серая толстовка eCola"
}, {
  component: 11,
  drawable: 246,
  texture: 15,
  name: "Толстовка Cluckin' Bell"
}, {
  component: 11,
  drawable: 246,
  texture: 16,
  name: "Толстовка Лимоны"
}, {
  component: 11,
  drawable: 246,
  texture: 17,
  name: "Толстовка Тако"
}, {
  component: 11,
  drawable: 248,
  texture: 0,
  name: "Свитер Burger Shot (узор)"
}, {
  component: 11,
  drawable: 248,
  texture: 1,
  name: "Свитер с лого Burger Shot"
}, {
  component: 11,
  drawable: 248,
  texture: 2,
  name: "Свитер Burger Shot"
}, {
  component: 11,
  drawable: 248,
  texture: 3,
  name: "Белый свитер Sprunk"
}, {
  component: 11,
  drawable: 248,
  texture: 4,
  name: "Зеленый свитер Sprunk"
}, {
  component: 11,
  drawable: 248,
  texture: 5,
  name: "Свитер Wigwam"
}, {
  component: 11,
  drawable: 248,
  texture: 6,
  name: "Свитер Taco Bomb (чили)"
}, {
  component: 11,
  drawable: 248,
  texture: 7,
  name: "Желтый свитер Taco Bomb"
}, {
  component: 11,
  drawable: 248,
  texture: 8,
  name: "Зеленый свитер Taco Bomb"
}, {
  component: 11,
  drawable: 248,
  texture: 9,
  name: "Свитер Cluckin' Bell"
}, {
  component: 11,
  drawable: 248,
  texture: 10,
  name: "Синий свитер Cluckin' Bell"
}, {
  component: 11,
  drawable: 248,
  texture: 11,
  name: "Черный Cluckin' Bell"
}, {
  component: 11,
  drawable: 248,
  texture: 12,
  name: "Красный свитер eCola"
}, {
  component: 11,
  drawable: 248,
  texture: 13,
  name: "Заразительно вкусная"
}, {
  component: 11,
  drawable: 248,
  texture: 14,
  name: "Красный свитер MeTV"
}, {
  component: 11,
  drawable: 248,
  texture: 15,
  name: "Оранжевый свитер MeTV"
}, {
  component: 11,
  drawable: 248,
  texture: 16,
  name: "Ярко-голубой свитер Heat"
}, {
  component: 11,
  drawable: 248,
  texture: 17,
  name: "Сиреневый свитер Heat"
}, {
  component: 11,
  drawable: 248,
  texture: 18,
  name: "Свитер Degenatron"
}, {
  component: 11,
  drawable: 248,
  texture: 19,
  name: "Черный свитер Pisswasser"
}, {
  component: 11,
  drawable: 248,
  texture: 20,
  name: "Красный свитер Pisswasser"
}, {
  component: 11,
  drawable: 248,
  texture: 21,
  name: "Свитер Bolt Burger"
}, {
  component: 11,
  drawable: 248,
  texture: 22,
  name: "Свитер Lucky Plucker"
}, {
  component: 11,
  drawable: 248,
  texture: 23,
  name: "Свитер с лого Lucky Plucker"
}, {
  component: 11,
  drawable: 249,
  texture: 0,
  name: "Синее джерси Burger Shot"
}, {
  component: 11,
  drawable: 249,
  texture: 1,
  name: "Черное джерси Burger Shot"
}, {
  component: 11,
  drawable: 249,
  texture: 2,
  name: "Красное джерси Burger Shot"
}, {
  component: 11,
  drawable: 249,
  texture: 3,
  name: "Темно-красное Burger Shot"
}, {
  component: 11,
  drawable: 249,
  texture: 4,
  name: "Синее джерси Cluckin' Bell"
}, {
  component: 11,
  drawable: 249,
  texture: 5,
  name: "Черное джерси Cluckin' Bell"
}, {
  component: 11,
  drawable: 249,
  texture: 6,
  name: "Хоккейное джерси Wigwam"
}, {
  component: 11,
  drawable: 249,
  texture: 7,
  name: "Хоккейное джерси Redwood"
}, {
  component: 11,
  drawable: 249,
  texture: 8,
  name: "Джерси Bean Machine"
}, {
  component: 11,
  drawable: 249,
  texture: 9,
  name: "Красное джерси eCola"
}, {
  component: 11,
  drawable: 249,
  texture: 10,
  name: "Черное джерси eCola"
}, {
  component: 11,
  drawable: 249,
  texture: 11,
  name: "Черное джерси Phat Chips"
}, {
  component: 11,
  drawable: 249,
  texture: 12,
  name: "Синее джерси Phat Chips"
}, {
  component: 11,
  drawable: 249,
  texture: 13,
  name: "Темно-зеленое Sprunk"
}, {
  component: 11,
  drawable: 249,
  texture: 14,
  name: "Зеленое джерси Sprunk"
}, {
  component: 11,
  drawable: 249,
  texture: 15,
  name: "Джерси Sprunk (классика)"
}, {
  component: 11,
  drawable: 255,
  texture: 1,
  name: "Красный свитер Bleeder"
}, {
  component: 11,
  drawable: 255,
  texture: 2,
  name: "Синий свитер Bleeder"
}, {
  component: 11,
  drawable: 255,
  texture: 3,
  name: "Синий свитер Cluckin'"
}, {
  component: 11,
  drawable: 255,
  texture: 4,
  name: "Зеленый свитер Cluckin'"
}, {
  component: 11,
  drawable: 255,
  texture: 5,
  name: "Синий свитер Slaying"
}, {
  component: 11,
  drawable: 255,
  texture: 6,
  name: "Зеленый свитер Slaying"
}, {
  component: 11,
  drawable: 255,
  texture: 7,
  name: "Праздничный свитер Slasher"
}, {
  component: 11,
  drawable: 255,
  texture: 8,
  name: "Свитер Hail Santa"
}, {
  component: 11,
  drawable: 255,
  texture: 9,
  name: "Красный свитер с костями"
}, {
  component: 11,
  drawable: 255,
  texture: 10,
  name: "Черно-белый свитер с костями"
}, {
  component: 11,
  drawable: 255,
  texture: 11,
  name: "Черно-красный свитер с костями"
}, {
  component: 11,
  drawable: 255,
  texture: 12,
  name: "Свитер Merry Sprunkmas"
}, {
  component: 11,
  drawable: 255,
  texture: 13,
  name: "Свитер Ice Cold Sprunk"
}, {
  component: 11,
  drawable: 256,
  texture: 0,
  name: "Зеленый жилет наемника"
}, {
  component: 11,
  drawable: 256,
  texture: 1,
  name: "Черный жилет наемника"
}, {
  component: 11,
  drawable: 256,
  texture: 2,
  name: "Белый жилет наемника"
}, {
  component: 11,
  drawable: 256,
  texture: 3,
  name: "Синий жилет наемника"
}, {
  component: 11,
  drawable: 256,
  texture: 4,
  name: "Красный жилет наемника"
}, {
  component: 11,
  drawable: 256,
  texture: 5,
  name: "Желтый жилет наемника"
}, {
  component: 11,
  drawable: 256,
  texture: 6,
  name: "Жилет (темный камуфляж)"
}, {
  component: 11,
  drawable: 256,
  texture: 7,
  name: "Жилет (камуфляж)"
}, {
  component: 11,
  drawable: 256,
  texture: 8,
  name: "Зеленый оскольчатый жилет"
}, {
  component: 11,
  drawable: 256,
  texture: 9,
  name: "Синий цифровой жилет"
}, {
  component: 11,
  drawable: 256,
  texture: 10,
  name: "Черный оскольчатый жилет"
}, {
  component: 11,
  drawable: 256,
  texture: 11,
  name: "Черно-красный жилет"
}, {
  component: 1,
  drawable: 132,
  texture: 0,
  name: "Маска Бессильная Злоба"
}, {
  component: 1,
  drawable: 133,
  texture: 0,
  name: "Маска Клубника"
}, {
  component: 1,
  drawable: 134,
  texture: 0,
  name: "Маска Лимон"
}, {
  component: 1,
  drawable: 135,
  texture: 0,
  name: "Маска Виноград"
}, {
  component: 1,
  drawable: 136,
  texture: 0,
  name: "Маска Ананас"
}, {
  component: 1,
  drawable: 137,
  texture: 0,
  name: "Маска Вишня"
}, {
  component: 1,
  drawable: 138,
  texture: 0,
  name: "Счастливая семерка"
}, {
  component: 1,
  drawable: 139,
  texture: 0,
  name: "Синий джокер"
}, {
  component: 1,
  drawable: 139,
  texture: 1,
  name: "Красный джокер"
}, {
  component: 1,
  drawable: 139,
  texture: 2,
  name: "Зеленый джокер"
}, {
  component: 1,
  drawable: 139,
  texture: 3,
  name: "Фиолетовый джокер"
}, {
  component: 1,
  drawable: 140,
  texture: 0,
  name: "Червовый король"
}, {
  component: 1,
  drawable: 140,
  texture: 1,
  name: "Трефовый король"
}, {
  component: 1,
  drawable: 140,
  texture: 2,
  name: "Бубновый король"
}, {
  component: 1,
  drawable: 140,
  texture: 3,
  name: "Пиковый король"
}, {
  component: 1,
  drawable: 141,
  texture: 0,
  name: "Пиковая дама"
}, {
  component: 1,
  drawable: 141,
  texture: 1,
  name: "Червовая дама"
}, {
  component: 1,
  drawable: 141,
  texture: 2,
  name: "Бубновая дама"
}, {
  component: 1,
  drawable: 141,
  texture: 3,
  name: "Трефовая дама"
}, {
  component: 1,
  drawable: 142,
  texture: 0,
  name: "Пиковый валет"
}, {
  component: 1,
  drawable: 142,
  texture: 1,
  name: "Червовый валет"
}, {
  component: 1,
  drawable: 142,
  texture: 2,
  name: "Трефовый валет"
}, {
  component: 1,
  drawable: 142,
  texture: 3,
  name: "Бубновый валет"
}, {
  component: 1,
  drawable: 143,
  texture: 0,
  name: "Пиковый туз"
}, {
  component: 1,
  drawable: 143,
  texture: 1,
  name: "Червовый туз"
}, {
  component: 1,
  drawable: 143,
  texture: 2,
  name: "Трефовый туз"
}, {
  component: 1,
  drawable: 143,
  texture: 3,
  name: "Бубновый туз"
}, {
  component: 4,
  drawable: 97,
  texture: 0,
  name: "Коричневые SN"
}, {
  component: 4,
  drawable: 97,
  texture: 1,
  name: "Клетчатые брюки игрока"
}, {
  component: 4,
  drawable: 97,
  texture: 2,
  name: "В гусиную лапку"
}, {
  component: 4,
  drawable: 97,
  texture: 3,
  name: "Зеленые брюки игрока"
}, {
  component: 4,
  drawable: 97,
  texture: 4,
  name: "Песочные брюки игрока"
}, {
  component: 4,
  drawable: 97,
  texture: 5,
  name: "Брюки с пейсли"
}, {
  component: 4,
  drawable: 97,
  texture: 6,
  name: "Камуфляжные брюки игрока"
}, {
  component: 4,
  drawable: 97,
  texture: 7,
  name: "Брюки игрока с паттерном"
}, {
  component: 4,
  drawable: 97,
  texture: 8,
  name: "Черные брюки с паттерном"
}, {
  component: 4,
  drawable: 97,
  texture: 9,
  name: "Синие брюки с паттерном"
}, {
  component: 4,
  drawable: 98,
  texture: 0,
  name: "Красные шорты барокко"
}, {
  component: 4,
  drawable: 98,
  texture: 1,
  name: "Синие шорты барокко"
}, {
  component: 4,
  drawable: 98,
  texture: 2,
  name: "Белые шорты барокко"
}, {
  component: 4,
  drawable: 98,
  texture: 3,
  name: "Черные шорты барокко"
}, {
  component: 4,
  drawable: 98,
  texture: 4,
  name: "Шорты с ювелиркой"
}, {
  component: 4,
  drawable: 98,
  texture: 5,
  name: "Змеиные шорты"
}, {
  component: 4,
  drawable: 98,
  texture: 6,
  name: "Белые шорты SC Broker"
}, {
  component: 4,
  drawable: 98,
  texture: 7,
  name: "Черные шорты SC Broker"
}, {
  component: 4,
  drawable: 98,
  texture: 8,
  name: "Шорты Broker"
}, {
  component: 4,
  drawable: 98,
  texture: 9,
  name: "Фиолетовые узорные шорты"
}, {
  component: 4,
  drawable: 98,
  texture: 10,
  name: "Черные узорные шорты"
}, {
  component: 4,
  drawable: 99,
  texture: 0,
  name: "Черные брюки Perseus"
}, {
  component: 4,
  drawable: 99,
  texture: 1,
  name: "Сине-зеленые брюки Perseus"
}, {
  component: 4,
  drawable: 99,
  texture: 2,
  name: "Синие брюки Perseus"
}, {
  component: 4,
  drawable: 99,
  texture: 3,
  name: "Синие с литерой P"
}, {
  component: 4,
  drawable: 99,
  texture: 4,
  name: "Белые с литерой P"
}, {
  component: 4,
  drawable: 99,
  texture: 5,
  name: "Черные с литерой P"
}, {
  component: 4,
  drawable: 99,
  texture: 6,
  name: "Черные с литерой E"
}, {
  component: 4,
  drawable: 99,
  texture: 7,
  name: "Белые брюки Broker"
}, {
  component: 4,
  drawable: 99,
  texture: 8,
  name: "Фиолетовые Lazerforce"
}, {
  component: 4,
  drawable: 99,
  texture: 9,
  name: "Красные брюки Broker"
}, {
  component: 4,
  drawable: 99,
  texture: 10,
  name: "Сине-зеленые SC Broker"
}, {
  component: 4,
  drawable: 99,
  texture: 11,
  name: "Синие брюки Lazerforce"
}, {
  component: 4,
  drawable: 99,
  texture: 12,
  name: "Черные брюки Broker"
}, {
  component: 4,
  drawable: 99,
  texture: 13,
  name: "Белые брюки SC Broker"
}, {
  component: 4,
  drawable: 99,
  texture: 14,
  name: "Черные брюки Vinewood"
}, {
  component: 4,
  drawable: 99,
  texture: 15,
  name: "Розовые брюки Vinewood"
}, {
  component: 4,
  drawable: 99,
  texture: 16,
  name: "Серые брюки Lazerforce"
}, {
  component: 4,
  drawable: 99,
  texture: 17,
  name: "Зеленые брюки Sci-Fi"
}, {
  component: 4,
  drawable: 99,
  texture: 18,
  name: "Синие брюки Sci-Fi"
}, {
  component: 4,
  drawable: 99,
  texture: 19,
  name: "Желтые брюки Sci-Fi"
}, {
  component: 4,
  drawable: 99,
  texture: 20,
  name: "Серые брюки Blagueurs"
}, {
  component: 4,
  drawable: 99,
  texture: 21,
  name: "Серые брюки с узором"
}, {
  component: 4,
  drawable: 99,
  texture: 22,
  name: "Синие брюки с узором"
}, {
  component: 4,
  drawable: 99,
  texture: 23,
  name: "Оранжевые брюки с узором"
}, {
  component: 4,
  drawable: 99,
  texture: 24,
  name: "Розовые брюки с узором"
}, {
  component: 4,
  drawable: 99,
  texture: 25,
  name: "Черные брюки SC Broker"
}, {
  component: 6,
  drawable: 84,
  texture: 0,
  name: "Зеленые слипоны FB"
}, {
  component: 6,
  drawable: 84,
  texture: 1,
  name: "Синие слипоны FB Manor"
}, {
  component: 6,
  drawable: 84,
  texture: 2,
  name: "Зеленые слипоны FB Manor"
}, {
  component: 6,
  drawable: 84,
  texture: 3,
  name: "Красные слипоны FB Manor"
}, {
  component: 6,
  drawable: 84,
  texture: 4,
  name: "Желтые слипоны FB Manor"
}, {
  component: 6,
  drawable: 84,
  texture: 5,
  name: "Синие слипоны FB"
}, {
  component: 6,
  drawable: 84,
  texture: 6,
  name: "Красные слипоны FB"
}, {
  component: 6,
  drawable: 84,
  texture: 7,
  name: "Желтые слипоны FB"
}, {
  component: 6,
  drawable: 85,
  texture: 0,
  name: "Синие кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 1,
  name: "Коричневые кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 2,
  name: "Зеленые кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 3,
  name: "Фиолетовые кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 4,
  name: "Красные кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 5,
  name: "Двухцветные ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 6,
  name: "Однотонные кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 7,
  name: "Синие выцветшие ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 8,
  name: "Лиловые выцветшие ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 9,
  name: "Сиреневые выцветшие ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 10,
  name: "Оранжевые выцветшие ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 11,
  name: "Серые кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 12,
  name: "Пепельные кроссовки ретро"
}, {
  component: 6,
  drawable: 85,
  texture: 13,
  name: "Серые ретро с узором"
}, {
  component: 6,
  drawable: 85,
  texture: 14,
  name: "Белые ретро с узором"
}, {
  component: 7,
  drawable: 122,
  texture: 1,
  name: "Свободная белая бабочка"
}, {
  component: 7,
  drawable: 122,
  texture: 2,
  name: "Свободная серая бабочка"
}, {
  component: 7,
  drawable: 122,
  texture: 3,
  name: "Свободная голубая"
}, {
  component: 7,
  drawable: 122,
  texture: 4,
  name: "Свободная темно-синяя"
}, {
  component: 7,
  drawable: 122,
  texture: 5,
  name: "Свободная красная бабочка"
}, {
  component: 7,
  drawable: 122,
  texture: 6,
  name: "Свободная зеленая бабочка"
}, {
  component: 7,
  drawable: 122,
  texture: 7,
  name: "Свободная оранжевая"
}, {
  component: 7,
  drawable: 122,
  texture: 8,
  name: "Свободная желтая бабочка"
}, {
  component: 7,
  drawable: 122,
  texture: 9,
  name: "Свободная фиолетовая"
}, {
  component: 7,
  drawable: 122,
  texture: 10,
  name: "Свободная кофейная"
}, {
  component: 7,
  drawable: 122,
  texture: 11,
  name: "Свободная бежевая бабочка"
}, {
  component: 7,
  drawable: 122,
  texture: 12,
  name: "Синяя свободная с узором"
}, {
  component: 7,
  drawable: 122,
  texture: 13,
  name: "Желтая свободная с узором"
}, {
  component: 7,
  drawable: 122,
  texture: 14,
  name: "Сепия свободная с узором"
}, {
  component: 7,
  drawable: 122,
  texture: 15,
  name: "Розовая свободная с узором"
}, {
  component: 8,
  drawable: 141,
  texture: 0,
  name: "Опрятный жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 1,
  name: "Коричневый SN"
}, {
  component: 8,
  drawable: 141,
  texture: 2,
  name: "Клетчатый жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 4,
  name: "Зеленый жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 5,
  name: "Черный жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 6,
  name: "Песочный жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 7,
  name: "Красный жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 8,
  name: "Белый жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 9,
  name: "Камуфляжный жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 10,
  name: "Однотонный жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 11,
  name: "Голубой жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 12,
  name: "Вычурный жилет игрока"
}, {
  component: 8,
  drawable: 141,
  texture: 13,
  name: "Стильный жилет игрока"
}, {
  component: 8,
  drawable: 145,
  texture: 1,
  name: "Синяя рубашка игрока"
}, {
  component: 8,
  drawable: 145,
  texture: 2,
  name: "Клетчатая рубашка игрока"
}, {
  component: 8,
  drawable: 145,
  texture: 3,
  name: "Розовая рубашка игрока"
}, {
  component: 8,
  drawable: 145,
  texture: 5,
  name: "Белая рубашка игрока"
}, {
  component: 8,
  drawable: 145,
  texture: 10,
  name: "Черная рубашка игрока"
}, {
  component: 8,
  drawable: 145,
  texture: 13,
  name: "Горчичная рубашка игрока"
}, {
  component: 10,
  drawable: 64,
  texture: 0,
  name: "Футболка SC (обложка)"
}, {
  component: 10,
  drawable: 64,
  texture: 1,
  name: "Футболка SC Экшн"
}, {
  component: 10,
  drawable: 64,
  texture: 2,
  name: "Футболка The Bikers"
}, {
  component: 10,
  drawable: 64,
  texture: 3,
  name: "Футболка The Hoods"
}, {
  component: 10,
  drawable: 64,
  texture: 4,
  name: "Футболка The Punks"
}, {
  component: 10,
  drawable: 64,
  texture: 5,
  name: "Футболка The Yokels"
}, {
  component: 10,
  drawable: 64,
  texture: 6,
  name: "Street Crimes с логотипом"
}, {
  component: 10,
  drawable: 64,
  texture: 7,
  name: "Футболка Claim What's Yours"
}, {
  component: 10,
  drawable: 64,
  texture: 8,
  name: "Футболка Choose Your Side"
}, {
  component: 10,
  drawable: 64,
  texture: 9,
  name: "Футболка I&P RON"
}, {
  component: 10,
  drawable: 64,
  texture: 10,
  name: "Футболка I&P Tour"
}, {
  component: 10,
  drawable: 64,
  texture: 11,
  name: "Футболка I&P с логотипом"
}, {
  component: 10,
  drawable: 64,
  texture: 12,
  name: "Футболка Mission I"
}, {
  component: 10,
  drawable: 64,
  texture: 13,
  name: "Футболка Mission II"
}, {
  component: 10,
  drawable: 64,
  texture: 14,
  name: "Футболка Mission IV"
}, {
  component: 10,
  drawable: 64,
  texture: 15,
  name: "Футболка Mission III"
}, {
  component: 10,
  drawable: 64,
  texture: 16,
  name: "Футболка I&P (обложка)"
}, {
  component: 10,
  drawable: 64,
  texture: 17,
  name: "Футболка I&P Оккупант"
}, {
  component: 10,
  drawable: 64,
  texture: 18,
  name: "Футболка Я отстой в I&P"
}, {
  component: 11,
  drawable: 259,
  texture: 0,
  name: "Картежный нарядный"
}, {
  component: 11,
  drawable: 259,
  texture: 1,
  name: "Коричневый картежный SN"
}, {
  component: 11,
  drawable: 259,
  texture: 2,
  name: "Клетчатый картежный"
}, {
  component: 11,
  drawable: 259,
  texture: 3,
  name: "Картежный в гусиную лапку"
}, {
  component: 11,
  drawable: 259,
  texture: 4,
  name: "Зеленый картежный"
}, {
  component: 11,
  drawable: 259,
  texture: 5,
  name: "Черный картежный SN"
}, {
  component: 11,
  drawable: 259,
  texture: 7,
  name: "Песочный картежный"
}, {
  component: 11,
  drawable: 259,
  texture: 8,
  name: "Картежный с пейсли"
}, {
  component: 11,
  drawable: 259,
  texture: 9,
  name: "Лососевый картежный"
}, {
  component: 11,
  drawable: 259,
  texture: 10,
  name: "Камуфляжный картежный"
}, {
  component: 11,
  drawable: 259,
  texture: 11,
  name: "Алый картежный"
}, {
  component: 11,
  drawable: 259,
  texture: 12,
  name: "Картежный с цветами"
}, {
  component: 11,
  drawable: 259,
  texture: 13,
  name: "Картежный с паттерном"
}, {
  component: 11,
  drawable: 259,
  texture: 14,
  name: "Черный картежный с узором"
}, {
  component: 11,
  drawable: 259,
  texture: 15,
  name: "Белый картежный"
}, {
  component: 11,
  drawable: 259,
  texture: 16,
  name: "Синий картежный с узором"
}, {
  component: 11,
  drawable: 259,
  texture: 17,
  name: "Желтый картежный с узором"
}, {
  component: 11,
  drawable: 259,
  texture: 18,
  name: "Картежный индиго с узором"
}, {
  component: 11,
  drawable: 259,
  texture: 19,
  name: "Картежный с узором"
}, {
  component: 11,
  drawable: 259,
  texture: 20,
  name: "Картежный Банкноты"
}, {
  component: 11,
  drawable: 259,
  texture: 21,
  name: "Красный картежный  Карты"
}, {
  component: 11,
  drawable: 259,
  texture: 22,
  name: "Черный картежный Карты"
}, {
  component: 11,
  drawable: 259,
  texture: 23,
  name: "Синий картежный Карты"
}, {
  component: 11,
  drawable: 259,
  texture: 24,
  name: "Картежный Масти"
}, {
  component: 11,
  drawable: 259,
  texture: 25,
  name: "Картежный Дамы"
}, {
  component: 11,
  drawable: 261,
  texture: 0,
  name: "Черный с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 1,
  name: "Темно-серый с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 2,
  name: "Серый с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 3,
  name: "Пепельный с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 4,
  name: "Белый с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 5,
  name: "Шоколадный с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 6,
  name: "Молочный с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 7,
  name: "Темно-синий с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 8,
  name: "Голубой с карманом"
}, {
  component: 11,
  drawable: 261,
  texture: 9,
  name: "Бордовый с карманом"
}, {
  component: 11,
  drawable: 263,
  texture: 0,
  name: "Черная плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 1,
  name: "Бирюзовая плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 2,
  name: "Сиреневая плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 3,
  name: "Алая плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 4,
  name: "Горчичная плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 5,
  name: "С лесным камуфляжем"
}, {
  component: 11,
  drawable: 263,
  texture: 6,
  name: "С контрастным камуфляжем"
}, {
  component: 11,
  drawable: 263,
  texture: 7,
  name: "Оранжевая камуфляжная"
}, {
  component: 11,
  drawable: 263,
  texture: 8,
  name: "Неоновая плотная с узором"
}, {
  component: 11,
  drawable: 263,
  texture: 9,
  name: "Серая камуфляжная"
}, {
  component: 11,
  drawable: 263,
  texture: 10,
  name: "Лакричная плотная"
}, {
  component: 11,
  drawable: 263,
  texture: 11,
  name: "Синяя плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 12,
  name: "Черная плотная"
}, {
  component: 11,
  drawable: 263,
  texture: 13,
  name: "Лиловая плотная"
}, {
  component: 11,
  drawable: 263,
  texture: 14,
  name: "Желтая плотная"
}, {
  component: 11,
  drawable: 263,
  texture: 15,
  name: "Лаймовая плотная"
}, {
  component: 11,
  drawable: 263,
  texture: 16,
  name: "Черная плотная Güffy"
}, {
  component: 11,
  drawable: 263,
  texture: 17,
  name: "Лиловая плотная Güffy"
}, {
  component: 11,
  drawable: 263,
  texture: 18,
  name: "Красная плотная Güffy"
}, {
  component: 11,
  drawable: 263,
  texture: 19,
  name: "Красная плотная FB"
}, {
  component: 11,
  drawable: 263,
  texture: 20,
  name: "Зеленая плотная FB"
}, {
  component: 11,
  drawable: 263,
  texture: 21,
  name: "Синяя плотная FB"
}, {
  component: 11,
  drawable: 263,
  texture: 22,
  name: "Пятнистая плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 23,
  name: "Зеленая плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 24,
  name: "Лососевая плотная Bigness"
}, {
  component: 11,
  drawable: 263,
  texture: 25,
  name: "Лиловая плотная Bigness"
}, {
  component: 11,
  drawable: 265,
  texture: 0,
  name: "Черный Bigness"
}, {
  component: 11,
  drawable: 265,
  texture: 1,
  name: "Белый Bigness"
}, {
  component: 11,
  drawable: 265,
  texture: 2,
  name: "Черный Broker с монетой"
}, {
  component: 11,
  drawable: 265,
  texture: 3,
  name: "Белый Broker с монетой"
}, {
  component: 11,
  drawable: 265,
  texture: 4,
  name: "Красный Broker с монетой"
}, {
  component: 11,
  drawable: 265,
  texture: 5,
  name: "Лиловый Broker с монетой"
}, {
  component: 11,
  drawable: 265,
  texture: 6,
  name: "Аквамарин Broker с монетой"
}, {
  component: 11,
  drawable: 265,
  texture: 7,
  name: "Черный SC Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 8,
  name: "Белый SC Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 9,
  name: "Красный SC Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 10,
  name: "Фиолетовый SC Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 11,
  name: "Сине-зеленый SC Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 12,
  name: "Черный Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 13,
  name: "Белый Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 14,
  name: "Красный Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 15,
  name: "Фиолетовый Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 16,
  name: "Сине-зеленый Broker"
}, {
  component: 11,
  drawable: 265,
  texture: 17,
  name: "Красный в цветочек"
}, {
  component: 11,
  drawable: 265,
  texture: 18,
  name: "Черный с узором"
}, {
  component: 11,
  drawable: 265,
  texture: 19,
  name: "Белый с узором"
}, {
  component: 11,
  drawable: 265,
  texture: 20,
  name: "Сине-зеленый с узором"
}, {
  component: 11,
  drawable: 265,
  texture: 21,
  name: "Синий с узором"
}, {
  component: 11,
  drawable: 265,
  texture: 22,
  name: "Голубой Impotent Rage"
}, {
  component: 11,
  drawable: 265,
  texture: 23,
  name: "Белый Impotent Rage"
}, {
  component: 11,
  drawable: 265,
  texture: 24,
  name: "Розовый Impotent Rage"
}, {
  component: 11,
  drawable: 266,
  texture: 0,
  name: "Зеленая рубашка Sci-Fi"
}, {
  component: 11,
  drawable: 266,
  texture: 1,
  name: "Синяя рубашка Sci-Fi"
}, {
  component: 11,
  drawable: 266,
  texture: 2,
  name: "Желтая рубашка Sci-Fi"
}, {
  component: 11,
  drawable: 266,
  texture: 3,
  name: "Белая рубашка Blagueurs"
}, {
  component: 11,
  drawable: 266,
  texture: 4,
  name: "Рубашка Blagueurs с узором"
}, {
  component: 11,
  drawable: 266,
  texture: 5,
  name: "Фиолетовая с узором"
}, {
  component: 11,
  drawable: 266,
  texture: 6,
  name: "Розовая рубашка с узором"
}, {
  component: 11,
  drawable: 266,
  texture: 7,
  name: "Розовая цветочная"
}, {
  component: 11,
  drawable: 266,
  texture: 8,
  name: "Оранжевая цветочная"
}, {
  component: 11,
  drawable: 266,
  texture: 9,
  name: "Синяя цветочная"
}, {
  component: 11,
  drawable: 266,
  texture: 10,
  name: "Черная с иероглифами"
}, {
  component: 11,
  drawable: 266,
  texture: 11,
  name: "Синяя с иероглифами"
}, {
  component: 11,
  drawable: 266,
  texture: 12,
  name: "Красная с иероглифами"
}, {
  component: 11,
  drawable: 266,
  texture: 13,
  name: "Рубашка Крэпс"
}, {
  component: 11,
  drawable: 266,
  texture: 14,
  name: "Рубашка Кости"
}, {
  component: 11,
  drawable: 266,
  texture: 15,
  name: "Черная рубашка Фишки"
}, {
  component: 11,
  drawable: 266,
  texture: 16,
  name: "Красная рубашка Фишки"
}, {
  component: 11,
  drawable: 266,
  texture: 17,
  name: "Желтая рубашка Фишки"
}, {
  component: 11,
  drawable: 266,
  texture: 18,
  name: "Синяя рубашка Закат"
}, {
  component: 11,
  drawable: 266,
  texture: 19,
  name: "Зеленая рубашка Закат"
}, {
  component: 11,
  drawable: 266,
  texture: 20,
  name: "Желтая рубашка Закат"
}, {
  component: 11,
  drawable: 266,
  texture: 21,
  name: "Розовая рубашка Закат"
}, {
  component: 11,
  drawable: 266,
  texture: 22,
  name: "Синяя рубашка Прерия"
}, {
  component: 11,
  drawable: 266,
  texture: 23,
  name: "Лососевая Прерия"
}, {
  component: 11,
  drawable: 266,
  texture: 24,
  name: "Коричневая Прерия"
}, {
  component: 11,
  drawable: 266,
  texture: 25,
  name: "Розовая рубашка Прерия"
}, {
  component: 11,
  drawable: 267,
  texture: 0,
  name: "Лиловая вареная парка SN"
}, {
  component: 11,
  drawable: 267,
  texture: 1,
  name: "Зеленая вареная парка SN"
}, {
  component: 11,
  drawable: 267,
  texture: 2,
  name: "Серая вареная парка SN"
}, {
  component: 11,
  drawable: 267,
  texture: 3,
  name: "Розовая вареная парка SN"
}, {
  component: 11,
  drawable: 267,
  texture: 4,
  name: "Синяя парка SN"
}, {
  component: 11,
  drawable: 267,
  texture: 5,
  name: "Черная парка барокко"
}, {
  component: 11,
  drawable: 267,
  texture: 6,
  name: "Белая парка барокко"
}, {
  component: 11,
  drawable: 267,
  texture: 7,
  name: "Фиолетовая парка барокко"
}, {
  component: 11,
  drawable: 267,
  texture: 8,
  name: "Белая парка SC Broker"
}, {
  component: 11,
  drawable: 267,
  texture: 9,
  name: "Зеленая цветочная парка"
}, {
  component: 11,
  drawable: 267,
  texture: 10,
  name: "Желтая цветочная парка"
}, {
  component: 11,
  drawable: 267,
  texture: 11,
  name: "Фиолетовая цветочная парка"
}, {
  component: 11,
  drawable: 267,
  texture: 12,
  name: "Розовая цветочная парка"
}, {
  component: 11,
  drawable: 267,
  texture: 13,
  name: "Песочная парка Le Chien"
}, {
  component: 11,
  drawable: 267,
  texture: 14,
  name: "Черная парка Le Chien"
}, {
  component: 11,
  drawable: 267,
  texture: 15,
  name: "Красная парка Le Chien"
}, {
  component: 11,
  drawable: 267,
  texture: 16,
  name: "Кубическая парка Le Chien"
}, {
  component: 11,
  drawable: 267,
  texture: 17,
  name: "Желтая камуфляжная парка"
}, {
  component: 11,
  drawable: 267,
  texture: 18,
  name: "Парка с лесным камуфляжем"
}, {
  component: 11,
  drawable: 267,
  texture: 19,
  name: "Зеленая камуфляжная парка"
}, {
  component: 11,
  drawable: 267,
  texture: 20,
  name: "Рыжая камуфляжная парка"
}, {
  component: 11,
  drawable: 267,
  texture: 21,
  name: "Осенняя парка Blagueurs"
}, {
  component: 11,
  drawable: 267,
  texture: 22,
  name: "Серая парка Blagueurs"
}, {
  component: 11,
  drawable: 267,
  texture: 23,
  name: "Красная парка Blagueurs"
}, {
  component: 11,
  drawable: 267,
  texture: 24,
  name: "Зеленая парка Blagueurs"
}, {
  component: 11,
  drawable: 267,
  texture: 25,
  name: "Лиловая парка Blagueurs"
}, {
  component: 11,
  drawable: 271,
  texture: 0,
  name: "Меховая SC Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 1,
  name: "Меховая из змеиной кожи"
}, {
  component: 11,
  drawable: 271,
  texture: 2,
  name: "Пепельная меховая Perseus"
}, {
  component: 11,
  drawable: 271,
  texture: 3,
  name: "Кофейная меховая Perseus"
}, {
  component: 11,
  drawable: 271,
  texture: 4,
  name: "Меховая леопардовая"
}, {
  component: 11,
  drawable: 271,
  texture: 5,
  name: "Серая пятнистая меховая"
}, {
  component: 11,
  drawable: 271,
  texture: 6,
  name: "Пятнистая меховая"
}, {
  component: 11,
  drawable: 271,
  texture: 7,
  name: "Камуфляжная меховая"
}, {
  component: 11,
  drawable: 271,
  texture: 8,
  name: "Меховая в цветочек"
}, {
  component: 11,
  drawable: 271,
  texture: 9,
  name: "Меховая с боковым узором"
}, {
  component: 11,
  drawable: 272,
  texture: 0,
  name: "Белая толстовка Diamond"
}, {
  component: 11,
  drawable: 272,
  texture: 1,
  name: "Черная толстовка Diamond"
}, {
  component: 11,
  drawable: 272,
  texture: 2,
  name: "Пепельная Diamond"
}, {
  component: 11,
  drawable: 272,
  texture: 3,
  name: "Серая толстовка Diamond"
}, {
  component: 11,
  drawable: 272,
  texture: 4,
  name: "Красная толстовка Diamond"
}, {
  component: 11,
  drawable: 272,
  texture: 5,
  name: "Оранжевая Diamond"
}, {
  component: 11,
  drawable: 272,
  texture: 6,
  name: "Синяя толстовка Diamond"
}, {
  component: 11,
  drawable: 272,
  texture: 11,
  name: "Толстовка SC Broker"
}, {
  component: 11,
  drawable: 272,
  texture: 12,
  name: "Толстовка Broker с узором"
}, {
  component: 11,
  drawable: 272,
  texture: 13,
  name: "SC Broker с логотипом"
}, {
  component: 11,
  drawable: 272,
  texture: 15,
  name: "Оранжевая SN Bigness"
}, {
  component: 11,
  drawable: 272,
  texture: 16,
  name: "Фиолетовая SN Bigness"
}, {
  component: 11,
  drawable: 272,
  texture: 17,
  name: "Синяя толстовка SN Bigness"
}, {
  component: 11,
  drawable: 272,
  texture: 18,
  name: "Squash с квадратами"
}, {
  component: 11,
  drawable: 272,
  texture: 19,
  name: "Толстовка Squash 19"
}, {
  component: 11,
  drawable: 272,
  texture: 20,
  name: "Толстовка с ювелиркой"
}, {
  component: 11,
  drawable: 272,
  texture: 21,
  name: "Камуфляжная Blagueurs"
}, {
  component: 11,
  drawable: 272,
  texture: 22,
  name: "Толстовка Yeti Heat"
}, {
  component: 11,
  drawable: 272,
  texture: 23,
  name: "Серая толстовка Yeti LS 19"
}, {
  component: 11,
  drawable: 272,
  texture: 24,
  name: "Цветная Yeti LS 19"
}, {
  component: 11,
  drawable: 272,
  texture: 25,
  name: "Лесная Yeti LS 19"
}, {
  component: 11,
  drawable: 274,
  texture: 0,
  name: "Свитер Broker с узором"
}, {
  component: 11,
  drawable: 274,
  texture: 1,
  name: "Broker с орнаментом"
}, {
  component: 11,
  drawable: 274,
  texture: 2,
  name: "Свитер Broker с монетой"
}, {
  component: 11,
  drawable: 274,
  texture: 4,
  name: "Свитер SC Broker"
}, {
  component: 11,
  drawable: 274,
  texture: 5,
  name: "Серый Blagueurs (волны)"
}, {
  component: 11,
  drawable: 274,
  texture: 6,
  name: "Черный Blagueurs (волны)"
}, {
  component: 11,
  drawable: 274,
  texture: 8,
  name: "Свитер Squash Comic"
}, {
  component: 11,
  drawable: 274,
  texture: 9,
  name: "Черный LC в ромбик"
}, {
  component: 11,
  drawable: 274,
  texture: 10,
  name: "Красный LC в ромбик"
}, {
  component: 11,
  drawable: 274,
  texture: 11,
  name: "Красный камуфляжный SN"
}, {
  component: 11,
  drawable: 274,
  texture: 12,
  name: "Лиловый камуфляжный SN"
}, {
  component: 11,
  drawable: 274,
  texture: 14,
  name: "Синий свитер Pulga"
}, {
  component: 11,
  drawable: 274,
  texture: 15,
  name: "Белый свитер Pulga"
}, {
  component: 11,
  drawable: 274,
  texture: 16,
  name: "Красный свитер Pulga"
}, {
  component: 11,
  drawable: 274,
  texture: 17,
  name: "Желтый свитер Pulga"
}, {
  component: 11,
  drawable: 274,
  texture: 18,
  name: "Черный свитер Pulga"
}, {
  component: 11,
  drawable: 274,
  texture: 19,
  name: "Свитер SN Lazerforce"
}, {
  component: 11,
  drawable: 274,
  texture: 20,
  name: "Колоритный свитер SN"
}, {
  component: 11,
  drawable: 274,
  texture: 21,
  name: "Темно-синий эффектный"
}, {
  component: 11,
  drawable: 274,
  texture: 22,
  name: "Серый эффектный"
}, {
  component: 11,
  drawable: 274,
  texture: 23,
  name: "Сине-зеленый эффектный"
}, {
  component: 11,
  drawable: 275,
  texture: 0,
  name: "Белый свитер Bigness"
}, {
  component: 11,
  drawable: 275,
  texture: 1,
  name: "Черный свитер Bigness"
}, {
  component: 11,
  drawable: 275,
  texture: 2,
  name: "Белый Bigness с логотипом"
}, {
  component: 11,
  drawable: 275,
  texture: 3,
  name: "Черный Bigness с логотипом"
}, {
  component: 11,
  drawable: 275,
  texture: 5,
  name: "Черный свитер Blagueurs"
}, {
  component: 11,
  drawable: 275,
  texture: 6,
  name: "Белый свитер FB Manor"
}, {
  component: 11,
  drawable: 275,
  texture: 7,
  name: "Горчичный свитер FB Manor"
}, {
  component: 11,
  drawable: 275,
  texture: 8,
  name: "Свитер Sebastian Dix"
}, {
  component: 11,
  drawable: 275,
  texture: 9,
  name: "Серый свитер Dix"
}, {
  component: 11,
  drawable: 275,
  texture: 11,
  name: "Фиолетовый эффектный"
}, {
  component: 11,
  drawable: 276,
  texture: 0,
  name: "Бордовый пуховик Broker"
}, {
  component: 11,
  drawable: 276,
  texture: 1,
  name: "Черный пуховик Broker"
}, {
  component: 11,
  drawable: 276,
  texture: 2,
  name: "Бирюзовый пуховик Broker"
}, {
  component: 11,
  drawable: 276,
  texture: 3,
  name: "Зеленый пуховик FB"
}, {
  component: 11,
  drawable: 276,
  texture: 4,
  name: "Фиолетовый пуховик FB"
}, {
  component: 11,
  drawable: 276,
  texture: 5,
  name: "Желтый пуховик FB"
}, {
  component: 11,
  drawable: 276,
  texture: 7,
  name: "Бирюзовый пуховик Güffy"
}, {
  component: 11,
  drawable: 276,
  texture: 8,
  name: "Розовый пуховик Güffy"
}, {
  component: 11,
  drawable: 276,
  texture: 9,
  name: "Леопардовый пуховик Güffy"
}, {
  component: 11,
  drawable: 276,
  texture: 10,
  name: "Серый пуховик Yeti"
}, {
  component: 11,
  drawable: 276,
  texture: 11,
  name: "Цветной пуховик Yeti"
}, {
  component: 11,
  drawable: 276,
  texture: 12,
  name: "Лесной пуховик Yeti"
}, {
  component: 11,
  drawable: 276,
  texture: 13,
  name: "Цветочный пуховик Perseus"
}, {
  component: 11,
  drawable: 277,
  texture: 0,
  name: "Белый халат SC Broker"
}, {
  component: 11,
  drawable: 277,
  texture: 1,
  name: "Красный халат SC Broker"
}, {
  component: 11,
  drawable: 277,
  texture: 2,
  name: "Черный халат SC"
}, {
  component: 11,
  drawable: 277,
  texture: 3,
  name: "Золотой халат SC"
}, {
  component: 11,
  drawable: 277,
  texture: 4,
  name: "Белый халат Diamond"
}, {
  component: 11,
  drawable: 277,
  texture: 5,
  name: "Черный халат Diamond"
}, {
  component: 11,
  drawable: 277,
  texture: 6,
  name: "Fame or Shame с узором"
}, {
  component: 11,
  drawable: 277,
  texture: 7,
  name: "Черный Fame or Shame"
}, {
  component: 11,
  drawable: 277,
  texture: 8,
  name: "Алый Fame or Shame"
}, {
  component: 11,
  drawable: 277,
  texture: 9,
  name: "Ало-желтый Fame or Shame"
}, {
  component: 11,
  drawable: 277,
  texture: 10,
  name: "Белый Fame or Shame"
}, {
  component: 11,
  drawable: 278,
  texture: 0,
  name: "Черный Perseus"
}, {
  component: 11,
  drawable: 278,
  texture: 1,
  name: "Сине-зеленый Perseus"
}, {
  component: 11,
  drawable: 278,
  texture: 2,
  name: "Синий Perseus"
}, {
  component: 11,
  drawable: 278,
  texture: 3,
  name: "Синий с литерой P"
}, {
  component: 11,
  drawable: 278,
  texture: 4,
  name: "Белый с литерой P"
}, {
  component: 11,
  drawable: 278,
  texture: 5,
  name: "Черный с литерой P"
}, {
  component: 11,
  drawable: 278,
  texture: 6,
  name: "Черный с литерой Е"
}, {
  component: 11,
  drawable: 278,
  texture: 7,
  name: "Красно-синий Flying Bravo"
}, {
  component: 11,
  drawable: 278,
  texture: 8,
  name: "Бежевый Flying Bravo"
}, {
  component: 11,
  drawable: 278,
  texture: 9,
  name: "Красный Flying Bravo"
}, {
  component: 11,
  drawable: 278,
  texture: 10,
  name: "Синий Flying Bravo"
}, {
  component: 11,
  drawable: 278,
  texture: 11,
  name: "Синий вычурный"
}, {
  component: 11,
  drawable: 278,
  texture: 12,
  name: "Черный вычурный"
}, {
  component: 11,
  drawable: 278,
  texture: 13,
  name: "Серый вычурный"
}, {
  component: 11,
  drawable: 278,
  texture: 14,
  name: "Черный Vinewood"
}, {
  component: 11,
  drawable: 278,
  texture: 15,
  name: "Розовый Vinewood"
}, {
  component: 11,
  drawable: 278,
  texture: 16,
  name: "Серый Vinewood"
}, {
  component: 11,
  drawable: 278,
  texture: 17,
  name: "Сине-зеленый в цветочек"
}, {
  component: 11,
  drawable: 278,
  texture: 18,
  name: "Темно-синий в цветочек"
}, {
  component: 11,
  drawable: 278,
  texture: 19,
  name: "Кофейный в цветочек"
}, {
  component: 11,
  drawable: 278,
  texture: 20,
  name: "Розовый в цветочек"
}, {
  component: 11,
  drawable: 278,
  texture: 21,
  name: "Серый с узором"
}, {
  component: 11,
  drawable: 278,
  texture: 23,
  name: "Оранжевый с узором"
}, {
  component: 11,
  drawable: 278,
  texture: 24,
  name: "Розовый с узором"
}, {
  component: 11,
  drawable: 278,
  texture: 25,
  name: "SC Broker"
}, {
  component: 11,
  drawable: 280,
  texture: 0,
  name: "Футболка I&P Истребители"
}, {
  component: 11,
  drawable: 280,
  texture: 1,
  name: "Футболка I&P Враги"
}, {
  component: 11,
  drawable: 280,
  texture: 2,
  name: "Золотая I&P"
}, {
  component: 11,
  drawable: 280,
  texture: 3,
  name: "Футболка I&P Нефть"
}, {
  component: 11,
  drawable: 280,
  texture: 4,
  name: "Футболка I&P Герой"
}, {
  component: 11,
  drawable: 280,
  texture: 5,
  name: "Футболка SC Gangs цветная"
}, {
  component: 11,
  drawable: 280,
  texture: 6,
  name: "Зеленая I&P"
}, {
  component: 11,
  drawable: 280,
  texture: 7,
  name: "Футболка I&P Бочки"
}, {
  component: 11,
  drawable: 280,
  texture: 8,
  name: "Футболка SC Gangs красная"
}, {
  component: 11,
  drawable: 280,
  texture: 9,
  name: "Белая Street Crimes"
}, {
  component: 11,
  drawable: 280,
  texture: 10,
  name: "Черная Street Crimes"
}, {
  component: 1,
  drawable: 144,
  texture: 0,
  name: "Детская улыбка"
}, {
  component: 1,
  drawable: 145,
  texture: 0,
  name: "Маньяк"
}, {
  component: 1,
  drawable: 146,
  texture: 0,
  name: "Свинтус"
}, {
  component: 1,
  drawable: 147,
  texture: 0,
  name: "Обезьяна"
}, {
  component: 1,
  drawable: 148,
  texture: 0,
  name: "Ухмылка"
}, {
  component: 1,
  drawable: 149,
  texture: 0,
  name: "Милый кролик"
}, {
  component: 1,
  drawable: 151,
  texture: 0,
  name: "Снайпер"
}, {
  component: 1,
  drawable: 152,
  texture: 0,
  name: "Без кожи"
}, {
  component: 1,
  drawable: 153,
  texture: 0,
  name: "Черная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 1,
  name: "Серая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 2,
  name: "Светло-серая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 3,
  name: "Красная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 4,
  name: "Бирюзовая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 5,
  name: "Гетра Улыбка"
}, {
  component: 1,
  drawable: 153,
  texture: 6,
  name: "Серая цифровая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 7,
  name: "Синяя цифровая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 8,
  name: "Гетра Морская волна"
}, {
  component: 1,
  drawable: 153,
  texture: 9,
  name: "Звездно-полосатая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 10,
  name: "Гетра Оскал"
}, {
  component: 1,
  drawable: 153,
  texture: 11,
  name: "Гетра Волк"
}, {
  component: 1,
  drawable: 153,
  texture: 12,
  name: "Серая камуфляжная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 13,
  name: "Черная гетра Череп"
}, {
  component: 1,
  drawable: 153,
  texture: 14,
  name: "Гетра Крест"
}, {
  component: 1,
  drawable: 153,
  texture: 15,
  name: "Коричневая гетра Череп"
}, {
  component: 1,
  drawable: 153,
  texture: 16,
  name: "Зеленая камуфляжная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 17,
  name: "Зеленая неоновая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 18,
  name: "Лиловая неоновая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 19,
  name: "Галечная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 20,
  name: "Зеленая гетра Змея"
}, {
  component: 1,
  drawable: 153,
  texture: 21,
  name: "Лиловая гетра Змея"
}, {
  component: 1,
  drawable: 154,
  texture: 0,
  name: "Наблюдатель"
}, {
  component: 1,
  drawable: 155,
  texture: 0,
  name: "Угловатая лиса"
}, {
  component: 1,
  drawable: 156,
  texture: 0,
  name: "Угловатый рыже-белый кот"
}, {
  component: 1,
  drawable: 156,
  texture: 1,
  name: "Угловатый серо-белый кот"
}, {
  component: 1,
  drawable: 156,
  texture: 2,
  name: "Угловатый черно-белый кот"
}, {
  component: 1,
  drawable: 157,
  texture: 0,
  name: "Угловатая свинья"
}, {
  component: 1,
  drawable: 158,
  texture: 0,
  name: "Серо-красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 1,
  name: "Пепельно-белая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 2,
  name: "Серо-белая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 3,
  name: "Тускло-красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 4,
  name: "Тускло-желтая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 5,
  name: "Тускло-зеленая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 6,
  name: "Узорчатая черная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 7,
  name: "Узорчатая красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 8,
  name: "Узорчатая желтая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 9,
  name: "Бледная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 10,
  name: "Красногубая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 11,
  name: "Дымчатая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 12,
  name: "Красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 13,
  name: "Голубая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 14,
  name: "Темно-розовая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 15,
  name: "Зеленая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 16,
  name: "Персиковая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 17,
  name: "Лиловая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 18,
  name: "Светло-розовая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 19,
  name: "Терракотовая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 20,
  name: "Серо-синяя полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 21,
  name: "Серая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 22,
  name: "Желто-серая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 23,
  name: "Белая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 24,
  name: "Каменно-серая полумаска"
}, {
  component: 1,
  drawable: 159,
  texture: 0,
  name: "Желтый респиратор"
}, {
  component: 1,
  drawable: 159,
  texture: 1,
  name: "Зеленый респиратор"
}, {
  component: 1,
  drawable: 159,
  texture: 2,
  name: "Оранжевый респиратор"
}, {
  component: 1,
  drawable: 159,
  texture: 3,
  name: "Золотой респиратор"
}, {
  component: 1,
  drawable: 160,
  texture: 0,
  name: "Угловатая золотая собака"
}, {
  component: 1,
  drawable: 160,
  texture: 1,
  name: "Угловатая белая собака"
}, {
  component: 1,
  drawable: 160,
  texture: 2,
  name: "Угловатая бурая собака"
}, {
  component: 1,
  drawable: 160,
  texture: 3,
  name: "Угловатая серая собака"
}, {
  component: 1,
  drawable: 161,
  texture: 0,
  name: "Цербер"
}, {
  component: 1,
  drawable: 162,
  texture: 0,
  name: "Каменно-серая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 1,
  name: "Пепельно-белая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 2,
  name: "Серо-белая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 3,
  name: "Тускло-красная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 4,
  name: "Тускло-желтая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 5,
  name: "Тускло-зеленая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 6,
  name: "Узорчатая черная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 7,
  name: "Узорчатая красная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 8,
  name: "Узорчатая желтая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 9,
  name: "Бледная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 10,
  name: "Красногубая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 11,
  name: "Дымчатая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 12,
  name: "Красная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 13,
  name: "Голубая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 14,
  name: "Темно-розовая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 15,
  name: "Зеленая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 16,
  name: "Персиковая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 17,
  name: "Лиловая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 18,
  name: "Бледно-розовая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 19,
  name: "Терракотовая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 20,
  name: "Серо-синяя с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 21,
  name: "Серая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 22,
  name: "Желто-серая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 23,
  name: "Белая с ПНВ"
}, {
  component: 1,
  drawable: 163,
  texture: 0,
  name: "Усмешка"
}, {
  component: 1,
  drawable: 163,
  texture: 1,
  name: "Плач"
}, {
  component: 1,
  drawable: 163,
  texture: 2,
  name: "Смех"
}, {
  component: 1,
  drawable: 163,
  texture: 3,
  name: "Гримаса"
}, {
  component: 1,
  drawable: 163,
  texture: 4,
  name: "Влюбленность"
}, {
  component: 1,
  drawable: 163,
  texture: 5,
  name: "Поцелуй"
}, {
  component: 1,
  drawable: 163,
  texture: 6,
  name: "Ах!"
}, {
  component: 1,
  drawable: 163,
  texture: 7,
  name: "Подмигивание"
}, {
  component: 4,
  drawable: 103,
  texture: 0,
  name: "Штаны заключенного"
}, {
  component: 4,
  drawable: 105,
  texture: 0,
  name: "Синие с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 1,
  name: "Черные с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 2,
  name: "Серые с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 3,
  name: "Бежевые с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 4,
  name: "Кремовые с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 5,
  name: "Зеленые с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 10,
  name: "Синие камуфл. с наколен."
}, {
  component: 4,
  drawable: 105,
  texture: 11,
  name: "Оскольчатые с наколен."
}, {
  component: 4,
  drawable: 105,
  texture: 12,
  name: "Контрастные с наколен."
}, {
  component: 4,
  drawable: 105,
  texture: 13,
  name: "Зеленые цифр. с наколен."
}, {
  component: 4,
  drawable: 105,
  texture: 14,
  name: "Пустынные с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 15,
  name: "Лесные с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 16,
  name: "Лесные камуфл. с наколен."
}, {
  component: 4,
  drawable: 105,
  texture: 17,
  name: "Синие цифр. с наколен."
}, {
  component: 4,
  drawable: 105,
  texture: 18,
  name: "Галечные с наколенниками"
}, {
  component: 4,
  drawable: 105,
  texture: 19,
  name: "Бежевые камуфл. с наколен."
}, {
  component: 4,
  drawable: 106,
  texture: 0,
  name: "Темно-серые с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 1,
  name: "Черные с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 2,
  name: "Угольные с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 3,
  name: "Бежевые с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 4,
  name: "Белые с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 5,
  name: "Зеленые с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 10,
  name: "Синие камуфл. с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 11,
  name: "Оскольчатые с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 12,
  name: "Контрастные с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 13,
  name: "Зеленые цифр. с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 14,
  name: "Пустынные с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 15,
  name: "Лесные с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 16,
  name: "Лесные камуфл. с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 17,
  name: "Синие цифр. с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 18,
  name: "Галечные с щитками"
}, {
  component: 4,
  drawable: 106,
  texture: 19,
  name: "Бежевые камуфл. с щитками"
}, {
  component: 4,
  drawable: 107,
  texture: 0,
  name: "Ультрамариновые чинос"
}, {
  component: 6,
  drawable: 87,
  texture: 0,
  name: "Лоферы: собака с воротом"
}, {
  component: 7,
  drawable: 124,
  texture: 0,
  name: "Цепь: собака с воротом"
}, {
  component: 8,
  drawable: 147,
  texture: 0,
  name: "Серо-коричневая броня"
}, {
  component: 8,
  drawable: 147,
  texture: 1,
  name: "Бежевая броня"
}, {
  component: 8,
  drawable: 147,
  texture: 2,
  name: "Темно-зеленая броня"
}, {
  component: 8,
  drawable: 147,
  texture: 3,
  name: "Серо-зеленая броня"
}, {
  component: 8,
  drawable: 147,
  texture: 4,
  name: "Лесная камуфляжная броня"
}, {
  component: 8,
  drawable: 147,
  texture: 5,
  name: "Бежевая цифровая броня"
}, {
  component: 8,
  drawable: 147,
  texture: 6,
  name: "Контрастная камуфл. броня"
}, {
  component: 8,
  drawable: 147,
  texture: 7,
  name: "Синяя камуфляжная броня"
}, {
  component: 8,
  drawable: 147,
  texture: 8,
  name: "Камуфляжная броня: пустыня"
}, {
  component: 8,
  drawable: 147,
  texture: 9,
  name: "Зеленая камуфляжная броня"
}, {
  component: 8,
  drawable: 147,
  texture: 10,
  name: "Фиолетовая броня"
}, {
  component: 8,
  drawable: 147,
  texture: 11,
  name: "Салатовая броня"
}, {
  component: 8,
  drawable: 152,
  texture: 0,
  name: "Белая рубашка (парадн.)"
}, {
  component: 8,
  drawable: 158,
  texture: 0,
  name: "Черный жилет с карманами"
}, {
  component: 8,
  drawable: 159,
  texture: 0,
  name: "Черная усиленная броня"
}, {
  component: 11,
  drawable: 283,
  texture: 0,
  name: "Черная рубашка (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 1,
  name: "Зеленая рубашка (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 2,
  name: "Кремовая рубашка (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 3,
  name: "Бежевая рубашка (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 4,
  name: "Серо-зеленая рубашка (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 5,
  name: "Белая рубашка (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 6,
  name: "Светло-серая (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 7,
  name: "Серая рубашка (закр.)"
}, {
  component: 11,
  drawable: 283,
  texture: 8,
  name: "Темно-зеленая (закр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 0,
  name: "Черная рубашка (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 1,
  name: "Зеленая рубашка (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 2,
  name: "Кремовая рубашка (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 3,
  name: "Бежевая рубашка (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 4,
  name: "Серо-зеленая (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 5,
  name: "Белая рубашка (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 6,
  name: "Светло-серая (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 7,
  name: "Серая рубашка (откр.)"
}, {
  component: 11,
  drawable: 284,
  texture: 8,
  name: "Темно-зеленая (откр.)"
}, {
  component: 11,
  drawable: 285,
  texture: 0,
  name: "Черная летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 1,
  name: "Зеленая летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 2,
  name: "Кремовая летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 3,
  name: "Бежевая летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 4,
  name: "Серо-зеленая летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 5,
  name: "Белая летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 6,
  name: "Светло-серая летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 7,
  name: "Серая летняя (з)"
}, {
  component: 11,
  drawable: 285,
  texture: 8,
  name: "Темно-зеленая летняя (з)"
}, {
  component: 11,
  drawable: 286,
  texture: 0,
  name: "Черная летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 1,
  name: "Зеленая летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 2,
  name: "Кремовая летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 3,
  name: "Бежевая летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 4,
  name: "Серо-зеленая летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 5,
  name: "Белая летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 6,
  name: "Светло-серая летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 7,
  name: "Серая летняя (о)"
}, {
  component: 11,
  drawable: 286,
  texture: 8,
  name: "Темно-зеленая летняя (о)"
}, {
  component: 11,
  drawable: 290,
  texture: 0,
  name: "Белая футболка с собакой"
}, {
  component: 11,
  drawable: 290,
  texture: 1,
  name: "Желтая футболка с собакой"
}, {
  component: 11,
  drawable: 290,
  texture: 2,
  name: "Футболка Space Monkey 3"
}, {
  component: 11,
  drawable: 290,
  texture: 3,
  name: "Space Monkey: пиксели"
}, {
  component: 11,
  drawable: 290,
  texture: 4,
  name: "Space Monkey: персонажи"
}, {
  component: 11,
  drawable: 290,
  texture: 5,
  name: "Космо-обезьяна и бананы"
}, {
  component: 11,
  drawable: 290,
  texture: 6,
  name: "Space Monkey: радиация"
}, {
  component: 11,
  drawable: 290,
  texture: 7,
  name: "Wizard's Ruin: добыча"
}, {
  component: 11,
  drawable: 290,
  texture: 8,
  name: "Футболка Меч Тога"
}, {
  component: 11,
  drawable: 290,
  texture: 9,
  name: "Футболка Тог"
}, {
  component: 11,
  drawable: 290,
  texture: 10,
  name: "Футболка Тело Тога"
}, {
  component: 11,
  drawable: 290,
  texture: 11,
  name: "Футболка Monkey's Paradise"
}, {
  component: 11,
  drawable: 290,
  texture: 12,
  name: "Defender of the Faith ретро"
}, {
  component: 11,
  drawable: 290,
  texture: 13,
  name: "Defender of the Faith"
}, {
  component: 11,
  drawable: 290,
  texture: 14,
  name: "Футболка Penetrator"
}, {
  component: 11,
  drawable: 290,
  texture: 15,
  name: "Badlands Revenge II: орел"
}, {
  component: 11,
  drawable: 290,
  texture: 16,
  name: "Badlands Revenge II: роман"
}, {
  component: 11,
  drawable: 290,
  texture: 17,
  name: "Badlands Revenge II: мишка"
}, {
  component: 11,
  drawable: 290,
  texture: 18,
  name: "Badlands Revenge II: решето"
}, {
  component: 11,
  drawable: 290,
  texture: 19,
  name: "Badlands Revenge II: спаси!"
}, {
  component: 11,
  drawable: 290,
  texture: 20,
  name: "Race And Chase: финиш"
}, {
  component: 11,
  drawable: 290,
  texture: 21,
  name: "Race And Chase: тачки"
}, {
  component: 11,
  drawable: 290,
  texture: 22,
  name: "Race And Chase: знаки"
}, {
  component: 11,
  drawable: 290,
  texture: 23,
  name: "Race And Chase: декор"
}, {
  component: 11,
  drawable: 290,
  texture: 24,
  name: "Race And Chase: старт"
}, {
  component: 11,
  drawable: 290,
  texture: 25,
  name: "Футболка"
}, {
  component: 11,
  drawable: 291,
  texture: 0,
  name: "Синяя с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 1,
  name: "Черная с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 2,
  name: "Темно-серая с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 3,
  name: "Бежевая с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 4,
  name: "Кремовая с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 5,
  name: "Зеленая с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 10,
  name: "Синяя камуфл. с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 11,
  name: "Зеленая камуфл. с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 12,
  name: "Контрастная с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 13,
  name: "Зеленая цифр. с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 14,
  name: "Пустынная с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 15,
  name: "Лесная с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 16,
  name: "Лесная камуфл. с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 17,
  name: "Синяя цифр. с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 18,
  name: "Галечная с защитой"
}, {
  component: 11,
  drawable: 291,
  texture: 19,
  name: "Бежевая камуфл. с защитой"
}, {
  component: 11,
  drawable: 292,
  texture: 0,
  name: "Футболка Pixtro"
}, {
  component: 11,
  drawable: 292,
  texture: 1,
  name: "Футболка Akedo"
}, {
  component: 11,
  drawable: 292,
  texture: 2,
  name: "Футболка Pixel Pete's"
}, {
  component: 11,
  drawable: 292,
  texture: 3,
  name: "Футболка Eight Bit"
}, {
  component: 11,
  drawable: 292,
  texture: 4,
  name: "Футболка Wonderama"
}, {
  component: 11,
  drawable: 292,
  texture: 5,
  name: "Футболка Warehouse"
}, {
  component: 11,
  drawable: 292,
  texture: 18,
  name: "Love Professor: результаты"
}, {
  component: 11,
  drawable: 292,
  texture: 19,
  name: "Love Professor: с ним"
}, {
  component: 11,
  drawable: 292,
  texture: 20,
  name: "Love Professor: с ней"
}, {
  component: 11,
  drawable: 292,
  texture: 21,
  name: "Love Professor: френдзона"
}, {
  component: 11,
  drawable: 292,
  texture: 22,
  name: "Love Professor: враг"
}, {
  component: 11,
  drawable: 292,
  texture: 23,
  name: "Love Professor: секреты"
}, {
  component: 11,
  drawable: 293,
  texture: 0,
  name: "Свитер Хо-хо-хо!"
}, {
  component: 11,
  drawable: 294,
  texture: 0,
  name: "Черная легкая броня"
}, {
  component: 11,
  drawable: 295,
  texture: 0,
  name: "Черная рубашка (лазутчик)"
}, {
  component: 11,
  drawable: 296,
  texture: 0,
  name: "Куртка Yung Ancestor"
}, {
  component: 11,
  drawable: 297,
  texture: 0,
  name: "Толстовка Yung Ancestor"
}];
const componentsFemale = exports.componentsFemale = [{
  component: 4,
  drawable: 17,
  texture: 0,
  name: "Желтые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 1,
  name: "Шорты Flying Bravo"
}, {
  component: 4,
  drawable: 17,
  texture: 2,
  name: "Голубые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 3,
  name: "Розовые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 4,
  name: "Шорты Hawaiian Snow"
}, {
  component: 4,
  drawable: 17,
  texture: 5,
  name: "Шорты в красную клетку"
}, {
  component: 4,
  drawable: 17,
  texture: 6,
  name: "Бледно-голубые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 7,
  name: "Красные шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 8,
  name: "Бежевые шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 9,
  name: "Шорты в белую полоску"
}, {
  component: 4,
  drawable: 17,
  texture: 10,
  name: "Синие шорты"
}, {
  component: 4,
  drawable: 17,
  texture: 11,
  name: "Светло-розовые шорты"
}, {
  component: 4,
  drawable: 18,
  texture: 0,
  name: "Белое бикини"
}, {
  component: 4,
  drawable: 18,
  texture: 1,
  name: "Бикини крест-накрест"
}, {
  component: 4,
  drawable: 18,
  texture: 2,
  name: "Синее бикини"
}, {
  component: 4,
  drawable: 18,
  texture: 3,
  name: "Бикини Santo Capra Kitty"
}, {
  component: 4,
  drawable: 18,
  texture: 4,
  name: "Красное бикини"
}, {
  component: 4,
  drawable: 18,
  texture: 5,
  name: "Синее бикини - полосы"
}, {
  component: 4,
  drawable: 18,
  texture: 6,
  name: "Бикини Yeti"
}, {
  component: 4,
  drawable: 18,
  texture: 7,
  name: "Панк-бикини Harsh Souls"
}, {
  component: 4,
  drawable: 18,
  texture: 8,
  name: "Розовое бикини - узор"
}, {
  component: 4,
  drawable: 18,
  texture: 9,
  name: "Бикини - острова"
}, {
  component: 4,
  drawable: 18,
  texture: 10,
  name: "Бикини - цветы"
}, {
  component: 4,
  drawable: 18,
  texture: 11,
  name: "Оранжевое бикини"
}, {
  component: 6,
  drawable: 17,
  texture: 0,
  name: "Темно-серые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 1,
  name: "Охровые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 2,
  name: "Синие шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 3,
  name: "Шлепанцы Gutter & Blood"
}, {
  component: 6,
  drawable: 17,
  texture: 4,
  name: "Темно-розовые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 5,
  name: "Зеленые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 6,
  name: "Камуфляжные шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 7,
  name: "Шлепанцы Hawaiian Snow"
}, {
  component: 6,
  drawable: 17,
  texture: 8,
  name: "Фиолетовые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 9,
  name: "Розовые шлепанцы"
}, {
  component: 6,
  drawable: 17,
  texture: 10,
  name: "Шлепанцы Swingers"
}, {
  component: 6,
  drawable: 17,
  texture: 11,
  name: "Шлепанцы Penetrators"
}, {
  component: 7,
  drawable: 11,
  texture: 0,
  name: "Браслеты - цветы"
}, {
  component: 7,
  drawable: 11,
  texture: 1,
  name: "Кислотные браслеты MyMy"
}, {
  component: 7,
  drawable: 11,
  texture: 2,
  name: "Зеленые браслеты"
}, {
  component: 7,
  drawable: 11,
  texture: 3,
  name: "Красные браслеты"
}, {
  component: 7,
  drawable: 12,
  texture: 0,
  name: "Черное ожерелье MyMy"
}, {
  component: 7,
  drawable: 12,
  texture: 1,
  name: "Розовое ожерелье MyMy"
}, {
  component: 7,
  drawable: 12,
  texture: 2,
  name: "Розовое ожерелье"
}, {
  component: 7,
  drawable: 12,
  texture: 3,
  name: "Серебряное ожерелье"
}, {
  component: 8,
  drawable: 17,
  texture: 0,
  name: "Майка Yeti Barfs"
}, {
  component: 8,
  drawable: 17,
  texture: 1,
  name: "Розовая майка"
}, {
  component: 8,
  drawable: 17,
  texture: 2,
  name: "Светло-голубая майка"
}, {
  component: 8,
  drawable: 17,
  texture: 3,
  name: "Розовая майка Trey Baker"
}, {
  component: 8,
  drawable: 17,
  texture: 4,
  name: "Желтая майка Trey Baker"
}, {
  component: 8,
  drawable: 17,
  texture: 5,
  name: "Красная майка"
}, {
  component: 8,
  drawable: 17,
  texture: 6,
  name: "Темно-синяя майка"
}, {
  component: 11,
  drawable: 18,
  texture: 0,
  name: "Рубашка - попугаи"
}, {
  component: 1,
  drawable: 15,
  texture: 0,
  name: "Хоккейная Пуля"
}, {
  component: 1,
  drawable: 15,
  texture: 1,
  name: "Хоккейная Вайнвуд"
}, {
  component: 1,
  drawable: 15,
  texture: 2,
  name: "Хоккейная Турист"
}, {
  component: 1,
  drawable: 15,
  texture: 3,
  name: "Хоккейная Гончая"
}, {
  component: 1,
  drawable: 15,
  texture: 4,
  name: "Хоккейная Волк"
}, {
  component: 1,
  drawable: 15,
  texture: 5,
  name: "Хоккейная Зверь"
}, {
  component: 1,
  drawable: 15,
  texture: 6,
  name: "Хоккейная Медведь"
}, {
  component: 1,
  drawable: 15,
  texture: 7,
  name: "Хоккейная Dust Devils"
}, {
  component: 1,
  drawable: 15,
  texture: 8,
  name: "Хоккейная Rampage"
}, {
  component: 1,
  drawable: 15,
  texture: 9,
  name: "Хоккейная Королевская"
}, {
  component: 1,
  drawable: 15,
  texture: 10,
  name: "Хоккейная Мода"
}, {
  component: 1,
  drawable: 15,
  texture: 11,
  name: "Хоккейная Злобный зомби"
}, {
  component: 1,
  drawable: 15,
  texture: 12,
  name: "Хоккейная Гнилой зомби"
}, {
  component: 1,
  drawable: 15,
  texture: 13,
  name: "Хоккейная Огненный череп"
}, {
  component: 1,
  drawable: 15,
  texture: 14,
  name: "Хоккейная Жуткий череп"
}, {
  component: 1,
  drawable: 15,
  texture: 15,
  name: "Хоккейная Электрочереп"
}, {
  component: 1,
  drawable: 16,
  texture: 0,
  name: "Хоккейная Череп"
}, {
  component: 1,
  drawable: 16,
  texture: 1,
  name: "Хоккейная со стежками"
}, {
  component: 1,
  drawable: 16,
  texture: 2,
  name: "Хоккейная блеклая"
}, {
  component: 1,
  drawable: 17,
  texture: 0,
  name: "Металлическая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 1,
  name: "Электрическая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 2,
  name: "Расплавленная Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 3,
  name: "Неоновая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 4,
  name: "Карбоновая Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 5,
  name: "Воин с перекрестьем"
}, {
  component: 1,
  drawable: 17,
  texture: 6,
  name: "Каменная Воин"
}, {
  component: 1,
  drawable: 17,
  texture: 7,
  name: "Воин с молниями"
}, {
  component: 1,
  drawable: 17,
  texture: 8,
  name: "Деревянная Воин"
}, {
  component: 4,
  drawable: 19,
  texture: 0,
  name: "Белые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 1,
  name: "Синие брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 2,
  name: "Фиолетовые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 3,
  name: "Голубые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 4,
  name: "Серебристые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 5,
  name: "Оливковые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 6,
  name: "Желтые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 7,
  name: "Красные брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 8,
  name: "Розовые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 9,
  name: "Ярко-розовые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 10,
  name: "Черно-бежевые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 11,
  name: "Бордовые брюки"
}, {
  component: 4,
  drawable: 19,
  texture: 12,
  name: "Черно-белые брюки"
}, {
  component: 4,
  drawable: 20,
  texture: 0,
  name: "Узкая юбка с узором"
}, {
  component: 4,
  drawable: 20,
  texture: 1,
  name: "Синяя узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 2,
  name: "Клетчатая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 3,
  name: "Серая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 4,
  name: "Оливковая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 5,
  name: "Голубая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 6,
  name: "Юбка с цветочным узором"
}, {
  component: 4,
  drawable: 20,
  texture: 7,
  name: "Черно-белая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 8,
  name: "Леопардовая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 9,
  name: "Зеленая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 10,
  name: "Розовая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 11,
  name: "Фиолетовая узкая юбка"
}, {
  component: 4,
  drawable: 20,
  texture: 12,
  name: "Полосатая узкая юбка"
}, {
  component: 6,
  drawable: 18,
  texture: 0,
  name: "Оливковые туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 1,
  name: "Зеленоватые туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 2,
  name: "Коричневые туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 3,
  name: "Черно-красные туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 4,
  name: "Черно-розовые туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 5,
  name: "Туфли Кошечка"
}, {
  component: 6,
  drawable: 18,
  texture: 6,
  name: "Алые туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 7,
  name: "Бежево-розовые туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 8,
  name: "Персиковые туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 9,
  name: "Трехцветные туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 10,
  name: "Разноцветные туфли"
}, {
  component: 6,
  drawable: 18,
  texture: 11,
  name: "Синие туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 0,
  name: "Желтые леопардовые туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 2,
  name: "Кроваво-красные туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 3,
  name: "Серые туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 4,
  name: "Красные туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 5,
  name: "Розовые леопардовые туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 6,
  name: "Темно-синие туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 7,
  name: "Голубые туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 8,
  name: "Ярко-розовые туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 9,
  name: "Ярко-желтые туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 10,
  name: "Оранжево-белые туфли"
}, {
  component: 6,
  drawable: 19,
  texture: 11,
  name: "Туфли зебра"
}, {
  component: 7,
  drawable: 13,
  texture: 0,
  name: "Шарф в горошек"
}, {
  component: 7,
  drawable: 13,
  texture: 1,
  name: "Шарф в цветочек"
}, {
  component: 7,
  drawable: 13,
  texture: 2,
  name: "Розовый шарф"
}, {
  component: 7,
  drawable: 13,
  texture: 3,
  name: "Красный шарф"
}, {
  component: 7,
  drawable: 13,
  texture: 4,
  name: "Леопардовый шарф"
}, {
  component: 7,
  drawable: 13,
  texture: 5,
  name: "Белый шарф"
}, {
  component: 8,
  drawable: 19,
  texture: 0,
  name: "Белая камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 1,
  name: "Черная камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 2,
  name: "Красная камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 3,
  name: "Кремовая камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 4,
  name: "Фиолетовая камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 5,
  name: "Синяя камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 6,
  name: "Голубая камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 7,
  name: "Желтая камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 9,
  name: "Пепельная камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 10,
  name: "Оранжевая камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 11,
  name: "Леопардовая камисоль"
}, {
  component: 8,
  drawable: 19,
  texture: 12,
  name: "Розовая камисоль"
}, {
  component: 8,
  drawable: 20,
  texture: 0,
  name: "Белая блузка"
}, {
  component: 8,
  drawable: 20,
  texture: 1,
  name: "Черная блузка"
}, {
  component: 8,
  drawable: 20,
  texture: 2,
  name: "Песочная блузка"
}, {
  component: 8,
  drawable: 20,
  texture: 3,
  name: "Серая полосатая блузка"
}, {
  component: 8,
  drawable: 20,
  texture: 4,
  name: "Розовая полосатая блузка"
}, {
  component: 8,
  drawable: 20,
  texture: 5,
  name: "Серая блузка"
}, {
  component: 11,
  drawable: 20,
  texture: 0,
  name: "Черно-белый смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 1,
  name: "Сиреневый смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 2,
  name: "Серый смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 3,
  name: "Черный смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 4,
  name: "Леопардовый смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 5,
  name: "Красный смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 6,
  name: "Розовый клетчатый смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 7,
  name: "Синий смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 8,
  name: "Смокинг с цветочным узором"
}, {
  component: 11,
  drawable: 20,
  texture: 9,
  name: "Полосатый смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 10,
  name: "Желтый смокинг"
}, {
  component: 11,
  drawable: 20,
  texture: 11,
  name: "Оливковый смокинг"
}, {
  component: 11,
  drawable: 21,
  texture: 0,
  name: "Красный блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 1,
  name: "Сиреневый блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 2,
  name: "Кремовый блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 3,
  name: "Блейзер в красную клетку"
}, {
  component: 11,
  drawable: 21,
  texture: 4,
  name: "Синий блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 5,
  name: "Фиолетовый блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 6,
  name: "Розовый блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 7,
  name: "Бордовый блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 8,
  name: "Зеленый блейзер"
}, {
  component: 11,
  drawable: 21,
  texture: 9,
  name: "Леопардовый блейзер"
}, {
  component: 11,
  drawable: 24,
  texture: 0,
  name: "Светло-серый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 1,
  name: "Серый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 2,
  name: "Темно-синий жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 3,
  name: "Черный жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 4,
  name: "Бордовый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 5,
  name: "Серебристый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 6,
  name: "Оливковый жилет в клетку"
}, {
  component: 11,
  drawable: 24,
  texture: 7,
  name: "Кремовый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 8,
  name: "Оливковые жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 9,
  name: "Красно-белый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 10,
  name: "Серый жилет в клетку"
}, {
  component: 11,
  drawable: 24,
  texture: 11,
  name: "Жилет в полоску"
}, {
  component: 11,
  drawable: 24,
  texture: 12,
  name: "Черно-белый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 13,
  name: "Коричневый жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 14,
  name: "Синий жилет"
}, {
  component: 11,
  drawable: 24,
  texture: 15,
  name: "Фиолетовый жилет"
}, {
  component: 1,
  drawable: 18,
  texture: 0,
  name: "Белая загадочная"
}, {
  component: 1,
  drawable: 18,
  texture: 1,
  name: "Красная загадочная"
}, {
  component: 1,
  drawable: 18,
  texture: 2,
  name: "Черная загадочная"
}, {
  component: 1,
  drawable: 19,
  texture: 0,
  name: "Бронзовая маскарадная"
}, {
  component: 1,
  drawable: 19,
  texture: 1,
  name: "Серебряная маскарадная"
}, {
  component: 1,
  drawable: 19,
  texture: 2,
  name: "Черно-золотая маскарадная"
}, {
  component: 1,
  drawable: 20,
  texture: 0,
  name: "Купидон"
}, {
  component: 4,
  drawable: 21,
  texture: 0,
  name: "Белые кружевные шортики"
}, {
  component: 4,
  drawable: 21,
  texture: 1,
  name: "Красные кружевные шортики"
}, {
  component: 4,
  drawable: 21,
  texture: 2,
  name: "Черные кружевные шортики"
}, {
  component: 4,
  drawable: 21,
  texture: 3,
  name: "Серые кружевные шортики"
}, {
  component: 4,
  drawable: 21,
  texture: 4,
  name: "Голубые кружевные шортики"
}, {
  component: 4,
  drawable: 22,
  texture: 0,
  name: "Белые чулки"
}, {
  component: 4,
  drawable: 22,
  texture: 1,
  name: "Красные чулки"
}, {
  component: 4,
  drawable: 22,
  texture: 2,
  name: "Черные чулки"
}, {
  component: 7,
  drawable: 14,
  texture: 0,
  name: "Белые бусы"
}, {
  component: 7,
  drawable: 14,
  texture: 1,
  name: "Серебряные бусы"
}, {
  component: 7,
  drawable: 14,
  texture: 2,
  name: "Черные бусы"
}, {
  component: 8,
  drawable: 22,
  texture: 0,
  name: "Белая футболка Love"
}, {
  component: 8,
  drawable: 22,
  texture: 1,
  name: "Черная футболка Love"
}, {
  component: 8,
  drawable: 22,
  texture: 2,
  name: "Красная футболка Love"
}, {
  component: 8,
  drawable: 24,
  texture: 0,
  name: "Белое бюстье"
}, {
  component: 8,
  drawable: 24,
  texture: 1,
  name: "Красное бюстье"
}, {
  component: 8,
  drawable: 24,
  texture: 2,
  name: "Черное бюстье"
}, {
  component: 8,
  drawable: 24,
  texture: 3,
  name: "Серое бюстье"
}, {
  component: 8,
  drawable: 24,
  texture: 4,
  name: "Голубое бюстье"
}, {
  component: 11,
  drawable: 26,
  texture: 0,
  name: "Фиолетовый чарльстон"
}, {
  component: 11,
  drawable: 26,
  texture: 1,
  name: "Черный чарльстон"
}, {
  component: 11,
  drawable: 26,
  texture: 2,
  name: "Серо-белый чарльстон"
}, {
  component: 11,
  drawable: 26,
  texture: 3,
  name: "Сиреневый чарльстон"
}, {
  component: 11,
  drawable: 26,
  texture: 4,
  name: "Черно-золотой чарльстон"
}, {
  component: 11,
  drawable: 26,
  texture: 5,
  name: "Красный чарльстон"
}, {
  component: 1,
  drawable: 21,
  texture: 0,
  name: "Серый кот"
}, {
  component: 1,
  drawable: 21,
  texture: 1,
  name: "Полосатый кот"
}, {
  component: 1,
  drawable: 22,
  texture: 0,
  name: "Красная лиса"
}, {
  component: 1,
  drawable: 22,
  texture: 1,
  name: "Коричневая лиса"
}, {
  component: 1,
  drawable: 23,
  texture: 0,
  name: "Коричневая сова"
}, {
  component: 1,
  drawable: 23,
  texture: 1,
  name: "Белая сова"
}, {
  component: 1,
  drawable: 24,
  texture: 0,
  name: "Серый енот"
}, {
  component: 1,
  drawable: 24,
  texture: 1,
  name: "Черный енот"
}, {
  component: 4,
  drawable: 25,
  texture: 0,
  name: "Темно-синие потертые шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 1,
  name: "Синие потертые шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 3,
  name: "Черные выцветшие шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 4,
  name: "Леопардовые шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 5,
  name: "Шорты (змеиная кожа)"
}, {
  component: 4,
  drawable: 25,
  texture: 6,
  name: "Черные шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 7,
  name: "Пепельные шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 8,
  name: "Оливковые шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 9,
  name: "Темно-синие шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 10,
  name: "Синие шорты с бусами"
}, {
  component: 4,
  drawable: 25,
  texture: 11,
  name: "Сиреневые шорты"
}, {
  component: 4,
  drawable: 25,
  texture: 12,
  name: "Мятно-зеленые шорты"
}, {
  component: 4,
  drawable: 26,
  texture: 0,
  name: "Мини-юбка (леопард)"
}, {
  component: 4,
  drawable: 27,
  texture: 0,
  name: "Черные леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 1,
  name: "Серые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 2,
  name: "Желтые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 3,
  name: "Темно-коричневые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 4,
  name: "Красноватые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 5,
  name: "Леггинсы со скелетом"
}, {
  component: 4,
  drawable: 27,
  texture: 6,
  name: "Леггинсы Kreppsohle"
}, {
  component: 4,
  drawable: 27,
  texture: 7,
  name: "Полосатые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 8,
  name: "Тигровые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 9,
  name: "Леопардовые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 10,
  name: "Леггинсы c закатом"
}, {
  component: 4,
  drawable: 27,
  texture: 11,
  name: "Леггинсы Princess RB"
}, {
  component: 4,
  drawable: 27,
  texture: 12,
  name: "Яркие леггинсы с узором"
}, {
  component: 4,
  drawable: 27,
  texture: 13,
  name: "Темно-синие леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 14,
  name: "Голубые леггинсы"
}, {
  component: 4,
  drawable: 27,
  texture: 15,
  name: "Черные леггинсы Barlone"
}, {
  component: 6,
  drawable: 21,
  texture: 0,
  name: "Охровые сапоги"
}, {
  component: 6,
  drawable: 21,
  texture: 1,
  name: "Каштановые сапоги"
}, {
  component: 6,
  drawable: 21,
  texture: 2,
  name: "Фиолетовые сапоги"
}, {
  component: 6,
  drawable: 21,
  texture: 3,
  name: "Бордовые сапоги"
}, {
  component: 6,
  drawable: 21,
  texture: 4,
  name: "Синие сапоги"
}, {
  component: 6,
  drawable: 21,
  texture: 5,
  name: "Красноватые сапоги"
}, {
  component: 6,
  drawable: 21,
  texture: 6,
  name: "Сапоги кофейного цвета"
}, {
  component: 6,
  drawable: 21,
  texture: 7,
  name: "Сапоги с оттенком охры"
}, {
  component: 6,
  drawable: 21,
  texture: 8,
  name: "Светло-фиолетовые сапоги"
}, {
  component: 6,
  drawable: 21,
  texture: 9,
  name: "Сероватые сапоги"
}, {
  component: 6,
  drawable: 22,
  texture: 0,
  name: "Бежевые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 1,
  name: "Черные сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 2,
  name: "Кофейные сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 3,
  name: "Белые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 4,
  name: "Серые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 5,
  name: "Черно-белые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 6,
  name: "Оливковые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 7,
  name: "Синие сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 8,
  name: "Светлые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 9,
  name: "Красноватые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 10,
  name: "Шоколадные сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 11,
  name: "Розоватые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 12,
  name: "Фиолетовые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 13,
  name: "Медноватые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 14,
  name: "Леопардовые сапоги (подв.)"
}, {
  component: 6,
  drawable: 22,
  texture: 15,
  name: "Золоченые сапоги (подв.)"
}, {
  component: 7,
  drawable: 15,
  texture: 0,
  name: "Черно-белые ремешки"
}, {
  component: 7,
  drawable: 15,
  texture: 1,
  name: "Летние ремешки"
}, {
  component: 7,
  drawable: 15,
  texture: 2,
  name: "Разноцветные ремешки"
}, {
  component: 7,
  drawable: 15,
  texture: 3,
  name: "Розовые ремешки в клеточку"
}, {
  component: 7,
  drawable: 16,
  texture: 1,
  name: "Фиолетовый шарф"
}, {
  component: 7,
  drawable: 16,
  texture: 2,
  name: "Оливковый шарф"
}, {
  component: 7,
  drawable: 16,
  texture: 4,
  name: "Сине-зеленый шарф"
}, {
  component: 8,
  drawable: 26,
  texture: 0,
  name: "Леопардовая футболка"
}, {
  component: 8,
  drawable: 26,
  texture: 1,
  name: "Футболка с черепом"
}, {
  component: 8,
  drawable: 26,
  texture: 2,
  name: "Двухцветная футболка"
}, {
  component: 8,
  drawable: 27,
  texture: 0,
  name: "Белая футболка (кор.)"
}, {
  component: 8,
  drawable: 27,
  texture: 1,
  name: "Футболка Zebra (кор.)"
}, {
  component: 8,
  drawable: 27,
  texture: 2,
  name: "Футболка El. Zebra (кор.)"
}, {
  component: 8,
  drawable: 27,
  texture: 3,
  name: "Леопард. футболка (кор.)"
}, {
  component: 8,
  drawable: 27,
  texture: 4,
  name: "Футболка с попугаем (кор.)"
}, {
  component: 8,
  drawable: 27,
  texture: 5,
  name: "Футболка Santos 13 (кор.)"
}, {
  component: 8,
  drawable: 27,
  texture: 6,
  name: "Топик Princess RB"
}, {
  component: 8,
  drawable: 27,
  texture: 7,
  name: "Топик Softly Softly"
}, {
  component: 8,
  drawable: 27,
  texture: 8,
  name: "Неон. леоп. Футболка"
}, {
  component: 8,
  drawable: 28,
  texture: 0,
  name: "Купальник Love Fist"
}, {
  component: 8,
  drawable: 28,
  texture: 1,
  name: "Купальник 247"
}, {
  component: 8,
  drawable: 28,
  texture: 2,
  name: "Купальник The Barfs"
}, {
  component: 8,
  drawable: 28,
  texture: 3,
  name: "Купальник Princess RB"
}, {
  component: 8,
  drawable: 28,
  texture: 4,
  name: "Купальник Prison Bitches"
}, {
  component: 8,
  drawable: 29,
  texture: 0,
  name: "Зеленая футболка"
}, {
  component: 8,
  drawable: 29,
  texture: 1,
  name: "Желтая футболка"
}, {
  component: 8,
  drawable: 29,
  texture: 2,
  name: "Лиловая футболка"
}, {
  component: 8,
  drawable: 29,
  texture: 3,
  name: "Серая футболка"
}, {
  component: 11,
  drawable: 30,
  texture: 0,
  name: "Куртка цвета индиго"
}, {
  component: 11,
  drawable: 30,
  texture: 1,
  name: "Желто-зеленая куртка"
}, {
  component: 11,
  drawable: 30,
  texture: 2,
  name: "Вареная куртка в звездах"
}, {
  component: 11,
  drawable: 30,
  texture: 3,
  name: "Темно-синяя куртка"
}, {
  component: 11,
  drawable: 30,
  texture: 4,
  name: "Топазовая куртка"
}, {
  component: 11,
  drawable: 30,
  texture: 5,
  name: "Выцветшая куртка"
}, {
  component: 11,
  drawable: 30,
  texture: 6,
  name: "Пепельная куртка"
}, {
  component: 11,
  drawable: 33,
  texture: 0,
  name: "Камуфляжный блейзер"
}, {
  component: 11,
  drawable: 34,
  texture: 0,
  name: "Желтая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 1,
  name: "Небесно-голубая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 2,
  name: "Горчичная байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 3,
  name: "Розовая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 4,
  name: "Ржавая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 5,
  name: "Красная байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 6,
  name: "Зеленая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 7,
  name: "Синяя байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 8,
  name: "Алая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 9,
  name: "Леопардовая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 10,
  name: "Серебристая байкерская"
}, {
  component: 11,
  drawable: 34,
  texture: 11,
  name: "Байкерская с заклепками"
}, {
  component: 11,
  drawable: 36,
  texture: 0,
  name: "Платье с розовыми цветами"
}, {
  component: 11,
  drawable: 36,
  texture: 1,
  name: "Платье с синими цветами"
}, {
  component: 11,
  drawable: 36,
  texture: 2,
  name: "Платье с желтыми цветами"
}, {
  component: 11,
  drawable: 36,
  texture: 3,
  name: "Платье с красными цветами"
}, {
  component: 11,
  drawable: 36,
  texture: 4,
  name: "Платье с фиолетовыми цветами"
}, {
  component: 11,
  drawable: 36,
  texture: 5,
  name: "Платье с цветами фуксии"
}, {
  component: 1,
  drawable: 25,
  texture: 0,
  name: "Бурый медведь"
}, {
  component: 1,
  drawable: 25,
  texture: 1,
  name: "Серый медведь"
}, {
  component: 1,
  drawable: 26,
  texture: 0,
  name: "Коричневый бизон"
}, {
  component: 1,
  drawable: 26,
  texture: 1,
  name: "Золотой бизон"
}, {
  component: 1,
  drawable: 27,
  texture: 0,
  name: "Черный бык"
}, {
  component: 1,
  drawable: 27,
  texture: 1,
  name: "Коричневый бык"
}, {
  component: 1,
  drawable: 28,
  texture: 0,
  name: "Коричневый орел"
}, {
  component: 1,
  drawable: 28,
  texture: 1,
  name: "Белый орел"
}, {
  component: 1,
  drawable: 29,
  texture: 0,
  name: "Розовый гриф"
}, {
  component: 1,
  drawable: 29,
  texture: 1,
  name: "Черный гриф"
}, {
  component: 1,
  drawable: 30,
  texture: 0,
  name: "Серый волк"
}, {
  component: 1,
  drawable: 30,
  texture: 1,
  name: "Черный волк"
}, {
  component: 4,
  drawable: 28,
  texture: 0,
  name: "Юбка Independence"
}, {
  component: 6,
  drawable: 23,
  texture: 0,
  name: "Синие блестящие туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 1,
  name: "Красные блестящие туфли"
}, {
  component: 6,
  drawable: 23,
  texture: 2,
  name: "Белые блестящие туфли"
}, {
  component: 8,
  drawable: 30,
  texture: 0,
  name: "Топ с флагом США"
}, {
  component: 11,
  drawable: 38,
  texture: 0,
  name: "Фрак Independence"
}, {
  component: 1,
  drawable: 31,
  texture: 0,
  name: "Фуражка пилота"
}, {
  component: 4,
  drawable: 29,
  texture: 0,
  name: "Зеленые летные штаны"
}, {
  component: 6,
  drawable: 24,
  texture: 0,
  name: "Черные летные ботинки"
}, {
  component: 11,
  drawable: 40,
  texture: 0,
  name: "Зеленая летная куртка"
}, {
  component: 1,
  drawable: 32,
  texture: 0,
  name: "Черная защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 1,
  name: "Серая защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 2,
  name: "Пепельная защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 3,
  name: "Белая защитная маска"
}, {
  component: 1,
  drawable: 32,
  texture: 4,
  name: "Зеленая защитная маска"
}, {
  component: 1,
  drawable: 33,
  texture: 0,
  name: "Черная скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 1,
  name: "Серая скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 2,
  name: "Пепельная скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 3,
  name: "Белая скелетная"
}, {
  component: 1,
  drawable: 33,
  texture: 4,
  name: "Зеленая скелетная"
}, {
  component: 1,
  drawable: 34,
  texture: 0,
  name: "Маска Please Stop Me"
}, {
  component: 3,
  drawable: 19,
  texture: 0,
  name: "Черные перчатки"
}, {
  component: 3,
  drawable: 19,
  texture: 1,
  name: "Серые перчатки"
}, {
  component: 3,
  drawable: 19,
  texture: 2,
  name: "Пепельные перчатки"
}, {
  component: 3,
  drawable: 19,
  texture: 3,
  name: "Белые перчатки"
}, {
  component: 3,
  drawable: 19,
  texture: 4,
  name: "Зеленые перчатки"
}, {
  component: 3,
  drawable: 20,
  texture: 0,
  name: "Черные шерстяные перчатки"
}, {
  component: 3,
  drawable: 20,
  texture: 1,
  name: "Серые шерстяные перчатки"
}, {
  component: 3,
  drawable: 20,
  texture: 2,
  name: "Пепельные шерстяные перч."
}, {
  component: 3,
  drawable: 20,
  texture: 3,
  name: "Белые шерстяные перч."
}, {
  component: 3,
  drawable: 20,
  texture: 4,
  name: "Зеленые шерстяные перчатки"
}, {
  component: 4,
  drawable: 30,
  texture: 0,
  name: "Черные военные штаны"
}, {
  component: 4,
  drawable: 30,
  texture: 1,
  name: "Серый военные штаны"
}, {
  component: 4,
  drawable: 30,
  texture: 2,
  name: "Пепельные военные штаны"
}, {
  component: 4,
  drawable: 30,
  texture: 3,
  name: "Белые военные штаны"
}, {
  component: 4,
  drawable: 30,
  texture: 4,
  name: "Зеленые военные штаны"
}, {
  component: 10,
  drawable: 7,
  texture: 0,
  name: "Большая эмблема банды"
}, {
  component: 11,
  drawable: 41,
  texture: 0,
  name: "Черная защитная футболка"
}, {
  component: 11,
  drawable: 41,
  texture: 1,
  name: "Серая защитная футболка"
}, {
  component: 11,
  drawable: 41,
  texture: 2,
  name: "Пепельная защитная футболка"
}, {
  component: 11,
  drawable: 41,
  texture: 3,
  name: "Белая защитная футболка"
}, {
  component: 11,
  drawable: 41,
  texture: 4,
  name: "Зеленая защитная футболка"
}, {
  component: 11,
  drawable: 42,
  texture: 0,
  name: "Черный военный свитер"
}, {
  component: 11,
  drawable: 42,
  texture: 1,
  name: "Серый военный свитер"
}, {
  component: 11,
  drawable: 42,
  texture: 2,
  name: "Пепельный военный свитер"
}, {
  component: 11,
  drawable: 42,
  texture: 3,
  name: "Белый военный свитер"
}, {
  component: 11,
  drawable: 42,
  texture: 4,
  name: "Зеленый военный свитер"
}, {
  component: 1,
  drawable: 35,
  texture: 0,
  name: "Ночное видение"
}, {
  component: 1,
  drawable: 36,
  texture: 0,
  name: "Дыхательный аппарат"
}, {
  component: 1,
  drawable: 37,
  texture: 0,
  name: "Потертая балаклава"
}, {
  component: 1,
  drawable: 38,
  texture: 0,
  name: "Противогаз"
}, {
  component: 1,
  drawable: 39,
  texture: 0,
  name: "Розовый плотоядный"
}, {
  component: 1,
  drawable: 39,
  texture: 1,
  name: "Коричневый плотоядный"
}, {
  component: 1,
  drawable: 40,
  texture: 0,
  name: "Белая мумия"
}, {
  component: 1,
  drawable: 40,
  texture: 1,
  name: "Зеленая мумия"
}, {
  component: 1,
  drawable: 41,
  texture: 0,
  name: "Белый вампир"
}, {
  component: 1,
  drawable: 41,
  texture: 1,
  name: "Синий вампир"
}, {
  component: 1,
  drawable: 42,
  texture: 0,
  name: "Бледный Фрэнк"
}, {
  component: 1,
  drawable: 42,
  texture: 1,
  name: "Серый Фрэнк"
}, {
  component: 1,
  drawable: 43,
  texture: 0,
  name: "Impotent Rage"
}, {
  component: 1,
  drawable: 44,
  texture: 0,
  name: "Princess Robot Bubblegum"
}, {
  component: 1,
  drawable: 45,
  texture: 0,
  name: "Moorehead"
}, {
  component: 1,
  drawable: 46,
  texture: 0,
  name: "Химзащитная маска"
}, {
  component: 1,
  drawable: 47,
  texture: 0,
  name: "Полицейская лента"
}, {
  component: 1,
  drawable: 47,
  texture: 1,
  name: "Лента с черными стрелками"
}, {
  component: 1,
  drawable: 47,
  texture: 2,
  name: "Лента Опасная зона"
}, {
  component: 1,
  drawable: 47,
  texture: 3,
  name: "Красно-белая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 0,
  name: "Светло-серая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 1,
  name: "Темно-серая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 2,
  name: "Белая лента"
}, {
  component: 1,
  drawable: 48,
  texture: 3,
  name: "Разноцветная лента"
}, {
  component: 1,
  drawable: 49,
  texture: 0,
  name: "Пакет Up-n-Atom"
}, {
  component: 1,
  drawable: 49,
  texture: 1,
  name: "Маньячный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 2,
  name: "Грустный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 3,
  name: "Веселый пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 4,
  name: "Пакет Погладь кота"
}, {
  component: 1,
  drawable: 49,
  texture: 5,
  name: "Пакет Пасть"
}, {
  component: 1,
  drawable: 49,
  texture: 6,
  name: "Застенчивый пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 7,
  name: "Пакет Burger Shot"
}, {
  component: 1,
  drawable: 49,
  texture: 8,
  name: "Пакет КМП"
}, {
  component: 1,
  drawable: 49,
  texture: 9,
  name: "Дьявольский пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 10,
  name: "Полицейский пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 11,
  name: "Пакет Монстр"
}, {
  component: 1,
  drawable: 49,
  texture: 12,
  name: "Разъяренный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 13,
  name: "Пакет Зиг-Заг"
}, {
  component: 1,
  drawable: 49,
  texture: 14,
  name: "Пакет Череп"
}, {
  component: 1,
  drawable: 49,
  texture: 15,
  name: "Пакет Песик"
}, {
  component: 1,
  drawable: 49,
  texture: 16,
  name: "Розовый пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 17,
  name: "Пакет НЛО"
}, {
  component: 1,
  drawable: 49,
  texture: 18,
  name: "Пакет На помощь"
}, {
  component: 1,
  drawable: 49,
  texture: 19,
  name: "Пакет-головоломка"
}, {
  component: 1,
  drawable: 49,
  texture: 20,
  name: "Пакет Фак Ю"
}, {
  component: 1,
  drawable: 49,
  texture: 21,
  name: "Элегантный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 22,
  name: "Пакет с наклейками"
}, {
  component: 1,
  drawable: 49,
  texture: 23,
  name: "Пакет Модерн"
}, {
  component: 1,
  drawable: 49,
  texture: 24,
  name: "Романтичный пакет"
}, {
  component: 1,
  drawable: 49,
  texture: 25,
  name: "Пакет В отключке"
}, {
  component: 1,
  drawable: 50,
  texture: 0,
  name: "Зеленая маска"
}, {
  component: 1,
  drawable: 50,
  texture: 1,
  name: "Маска Дон"
}, {
  component: 1,
  drawable: 50,
  texture: 2,
  name: "Розовая маска"
}, {
  component: 1,
  drawable: 50,
  texture: 3,
  name: "Маска Клоун"
}, {
  component: 1,
  drawable: 50,
  texture: 4,
  name: "Черная маска"
}, {
  component: 1,
  drawable: 50,
  texture: 5,
  name: "Коричневая маска"
}, {
  component: 1,
  drawable: 50,
  texture: 6,
  name: "Маска Манекен"
}, {
  component: 1,
  drawable: 50,
  texture: 7,
  name: "Маска Кукла"
}, {
  component: 1,
  drawable: 50,
  texture: 8,
  name: "Маска Марионетка"
}, {
  component: 1,
  drawable: 50,
  texture: 9,
  name: "Маска Мим"
}, {
  component: 1,
  drawable: 51,
  texture: 0,
  name: "Черная бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 1,
  name: "Бандана с черепом"
}, {
  component: 1,
  drawable: 51,
  texture: 2,
  name: "Бандана (город)"
}, {
  component: 1,
  drawable: 51,
  texture: 3,
  name: "Бандана (пустыня)"
}, {
  component: 1,
  drawable: 51,
  texture: 4,
  name: "Бандана (лес)"
}, {
  component: 1,
  drawable: 51,
  texture: 5,
  name: "Зеленая бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 6,
  name: "Фиолетовая бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 7,
  name: "Бандана с узором"
}, {
  component: 1,
  drawable: 51,
  texture: 8,
  name: "Желтая бандана"
}, {
  component: 1,
  drawable: 51,
  texture: 9,
  name: "Бандана с электрочерепом"
}, {
  component: 1,
  drawable: 52,
  texture: 0,
  name: "Черная балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 1,
  name: "Серая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 2,
  name: "Белая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 3,
  name: "Зеленая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 4,
  name: "Балаклава цвета хаки"
}, {
  component: 1,
  drawable: 52,
  texture: 5,
  name: "Пепельная балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 6,
  name: "Балаклава (лес)"
}, {
  component: 1,
  drawable: 52,
  texture: 7,
  name: "Балаклава (город)"
}, {
  component: 1,
  drawable: 52,
  texture: 8,
  name: "Синяя балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 9,
  name: "Желтая балаклава"
}, {
  component: 1,
  drawable: 52,
  texture: 10,
  name: "Балаклава с черепом"
}, {
  component: 1,
  drawable: 53,
  texture: 0,
  name: "Черная балаклава-капюшон"
}, {
  component: 1,
  drawable: 53,
  texture: 1,
  name: "Серая балаклава-капюшон"
}, {
  component: 1,
  drawable: 53,
  texture: 2,
  name: "Белая балаклава-капюшон"
}, {
  component: 1,
  drawable: 53,
  texture: 3,
  name: "Балаклава-капюшон (зел.)"
}, {
  component: 1,
  drawable: 53,
  texture: 6,
  name: "Балаклава-капюшон (лес)"
}, {
  component: 1,
  drawable: 53,
  texture: 7,
  name: "Балаклава-капюшон (город)"
}, {
  component: 1,
  drawable: 53,
  texture: 8,
  name: "Балаклава Череп"
}, {
  component: 1,
  drawable: 54,
  texture: 0,
  name: "Черная маска из футболки"
}, {
  component: 1,
  drawable: 54,
  texture: 1,
  name: "Белая маска из футболки"
}, {
  component: 1,
  drawable: 54,
  texture: 2,
  name: "Бежевая маска-футболка"
}, {
  component: 1,
  drawable: 54,
  texture: 3,
  name: "Маска-футболка Benders"
}, {
  component: 1,
  drawable: 54,
  texture: 4,
  name: "Маска Справедливость"
}, {
  component: 1,
  drawable: 54,
  texture: 5,
  name: "Маска из футболки (лес)"
}, {
  component: 1,
  drawable: 54,
  texture: 6,
  name: "Полосатая маска-футболка"
}, {
  component: 1,
  drawable: 54,
  texture: 7,
  name: "Маска-футболка Love First"
}, {
  component: 1,
  drawable: 54,
  texture: 8,
  name: "Маска-футболка ТФИ"
}, {
  component: 1,
  drawable: 54,
  texture: 9,
  name: "Маска Розовый камуфляж"
}, {
  component: 1,
  drawable: 54,
  texture: 10,
  name: "Маска-футболка LSPD"
}, {
  component: 1,
  drawable: 56,
  texture: 0,
  name: "Синяя свободн. балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 1,
  name: "Черная свободн. балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 4,
  name: "Кровавая балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 5,
  name: "Свободная балаклава (лес)"
}, {
  component: 1,
  drawable: 56,
  texture: 6,
  name: "Красная балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 7,
  name: "Свободная балаклава"
}, {
  component: 1,
  drawable: 56,
  texture: 8,
  name: "Двуцветная балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 4,
  name: "Коричневая балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 5,
  name: "Радужная балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 7,
  name: "Грязная балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 8,
  name: "Розовая балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 9,
  name: "Балаклава Flying Bravo FB"
}, {
  component: 1,
  drawable: 57,
  texture: 10,
  name: "Балаклава Flying Bravo"
}, {
  component: 1,
  drawable: 57,
  texture: 11,
  name: "Балаклава Princess"
}, {
  component: 1,
  drawable: 57,
  texture: 12,
  name: "Балаклава Didier Sachs"
}, {
  component: 1,
  drawable: 57,
  texture: 13,
  name: "Балаклава Perseus Band"
}, {
  component: 1,
  drawable: 57,
  texture: 14,
  name: "Балаклава Perseus"
}, {
  component: 1,
  drawable: 57,
  texture: 15,
  name: "Балаклава Sessanta Nove"
}, {
  component: 1,
  drawable: 57,
  texture: 20,
  name: "Оранжевая балаклава"
}, {
  component: 1,
  drawable: 57,
  texture: 21,
  name: "Фиолетовая балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 0,
  name: "Бандитская балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 1,
  name: "Натуральная балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 2,
  name: "Лесная балаклава"
}, {
  component: 1,
  drawable: 58,
  texture: 5,
  name: "Балаклава Бессильная Злоба"
}, {
  component: 1,
  drawable: 58,
  texture: 6,
  name: "Балаклава Pogo"
}, {
  component: 1,
  drawable: 58,
  texture: 7,
  name: "Балаклава в синию полоску"
}, {
  component: 1,
  drawable: 58,
  texture: 8,
  name: "Балаклава в черную полоску"
}, {
  component: 1,
  drawable: 58,
  texture: 9,
  name: "Балаклава в розовую полоску"
}, {
  component: 3,
  drawable: 21,
  texture: 0,
  name: "Водительские перчатки"
}, {
  component: 3,
  drawable: 34,
  texture: 0,
  name: "Черные кожаные перчатки"
}, {
  component: 3,
  drawable: 34,
  texture: 1,
  name: "Коричневые перчатки"
}, {
  component: 3,
  drawable: 60,
  texture: 0,
  name: "Черные полуперчатки"
}, {
  component: 3,
  drawable: 60,
  texture: 1,
  name: "Серые полуперчатки"
}, {
  component: 3,
  drawable: 73,
  texture: 0,
  name: "Полуперчатки мусорщика"
}, {
  component: 3,
  drawable: 86,
  texture: 0,
  name: "Белые хлопчатые перчатки"
}, {
  component: 3,
  drawable: 99,
  texture: 0,
  name: "Хирургические перчатки"
}, {
  component: 4,
  drawable: 31,
  texture: 0,
  name: "Черные штаны грабителя"
}, {
  component: 4,
  drawable: 32,
  texture: 0,
  name: "Черные боевые штаны"
}, {
  component: 4,
  drawable: 35,
  texture: 0,
  name: "Серая юбка-карандаш"
}, {
  component: 4,
  drawable: 35,
  texture: 1,
  name: "Бежевая юбка-карандаш"
}, {
  component: 4,
  drawable: 35,
  texture: 2,
  name: "Черная юбка-карандаш"
}, {
  component: 4,
  drawable: 35,
  texture: 3,
  name: "Синяя юбка-карандаш"
}, {
  component: 4,
  drawable: 36,
  texture: 0,
  name: "Простые черные брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 1,
  name: "Простые серые брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 2,
  name: "Простые синие брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 3,
  name: "Простые зеленые брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 4,
  name: "Простые красные брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 5,
  name: "Простые белые брюки"
}, {
  component: 4,
  drawable: 36,
  texture: 6,
  name: "Простые коричневые брюки"
}, {
  component: 4,
  drawable: 40,
  texture: 0,
  name: "Изношенные серые брюки"
}, {
  component: 4,
  drawable: 40,
  texture: 1,
  name: "Изношенные бежевые брюки"
}, {
  component: 4,
  drawable: 40,
  texture: 2,
  name: "Изношенные черные брюки"
}, {
  component: 4,
  drawable: 40,
  texture: 3,
  name: "Изношенные синие брюки"
}, {
  component: 4,
  drawable: 41,
  texture: 0,
  name: "Черные летные штаны"
}, {
  component: 6,
  drawable: 25,
  texture: 0,
  name: "Армейские черные ботинки"
}, {
  component: 6,
  drawable: 26,
  texture: 0,
  name: "Потертые черные ботинки"
}, {
  component: 6,
  drawable: 27,
  texture: 0,
  name: "Черные кеды"
}, {
  component: 6,
  drawable: 28,
  texture: 0,
  name: "Черные Sports"
}, {
  component: 6,
  drawable: 29,
  texture: 0,
  name: "Черные оксфорды"
}, {
  component: 6,
  drawable: 29,
  texture: 1,
  name: "Белые оксфорды"
}, {
  component: 6,
  drawable: 29,
  texture: 2,
  name: "Коричневые оксфорды"
}, {
  component: 7,
  drawable: 18,
  texture: 0,
  name: "Свободная черная бабочка"
}, {
  component: 7,
  drawable: 19,
  texture: 0,
  name: "Угольно-черный (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 1,
  name: "Со штриховкой (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 2,
  name: "В белую полоску (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 3,
  name: "Зеленый (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 4,
  name: "В лиловую клетку (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 5,
  name: "Розовый (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 6,
  name: "С серыми ромбами (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 7,
  name: "Песочного цвета (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 8,
  name: "В синюю полоску (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 9,
  name: "Сине-зеленый (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 10,
  name: "Оранжевый (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 11,
  name: "В синюю клетку (свободный)"
}, {
  component: 7,
  drawable: 19,
  texture: 12,
  name: "В песочную полоску (своб.)"
}, {
  component: 7,
  drawable: 19,
  texture: 14,
  name: "С зелеными ромбами (своб.)"
}, {
  component: 7,
  drawable: 19,
  texture: 15,
  name: "Синий (свободный)"
}, {
  component: 7,
  drawable: 20,
  texture: 0,
  name: "Белый галстук"
}, {
  component: 7,
  drawable: 20,
  texture: 1,
  name: "Серый узкий галстук"
}, {
  component: 7,
  drawable: 20,
  texture: 2,
  name: "Черный узкий галстук"
}, {
  component: 7,
  drawable: 21,
  texture: 0,
  name: "Угольно-черный (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 1,
  name: "Со штриховкой (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 2,
  name: "В белую полоску (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 3,
  name: "Зеленый (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 4,
  name: "В лиловую клетку (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 5,
  name: "Розовый (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 6,
  name: "С серыми ромбами (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 7,
  name: "Песочного цвета (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 8,
  name: "В синюю полоску (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 9,
  name: "Сине-зеленый (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 10,
  name: "Оранжевый (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 11,
  name: "В синюю клетку (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 12,
  name: "В песочную полоску (строгий)"
}, {
  component: 7,
  drawable: 21,
  texture: 14,
  name: "С зелеными ромбами (строг.)"
}, {
  component: 7,
  drawable: 21,
  texture: 15,
  name: "Синий (строгий)"
}, {
  component: 7,
  drawable: 22,
  texture: 0,
  name: "Черная бабочка"
}, {
  component: 7,
  drawable: 22,
  texture: 1,
  name: "Белая бабочка"
}, {
  component: 7,
  drawable: 22,
  texture: 2,
  name: "Красная бабочка"
}, {
  component: 8,
  drawable: 37,
  texture: 0,
  name: "Белая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 1,
  name: "Серебристая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 2,
  name: "Темно-серая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 3,
  name: "Голубая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 4,
  name: "Светло-голубая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 5,
  name: "Розовая клетчатая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 6,
  name: "Синяя рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 7,
  name: "Розовая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 8,
  name: "Оливковая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 9,
  name: "Рубашка цвета фуксии"
}, {
  component: 8,
  drawable: 37,
  texture: 10,
  name: "Грязно-белая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 11,
  name: "Мятная рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 12,
  name: "Синяя полосатая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 13,
  name: "Розовая полосатая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 14,
  name: "Желто-коричневая рубашка"
}, {
  component: 8,
  drawable: 37,
  texture: 15,
  name: "Голубая полосатая рубашка"
}, {
  component: 8,
  drawable: 39,
  texture: 1,
  name: "Бежевый жилет"
}, {
  component: 8,
  drawable: 39,
  texture: 2,
  name: "Черная жилетка"
}, {
  component: 8,
  drawable: 39,
  texture: 4,
  name: "Серая жилетка"
}, {
  component: 8,
  drawable: 39,
  texture: 5,
  name: "Темно-синяя жилетка"
}, {
  component: 8,
  drawable: 39,
  texture: 6,
  name: "Сине-зеленая жилетка"
}, {
  component: 8,
  drawable: 39,
  texture: 7,
  name: "Красная жилетка"
}, {
  component: 8,
  drawable: 39,
  texture: 8,
  name: "Белая жилетка"
}, {
  component: 8,
  drawable: 39,
  texture: 9,
  name: "Коричневая жилетка"
}, {
  component: 8,
  drawable: 43,
  texture: 0,
  name: "Черная футболка SN"
}, {
  component: 11,
  drawable: 43,
  texture: 0,
  name: "Черный боевой жилет"
}, {
  component: 11,
  drawable: 43,
  texture: 1,
  name: "Серый боевой жилет"
}, {
  component: 11,
  drawable: 43,
  texture: 2,
  name: "Бежевый боевой жилет"
}, {
  component: 11,
  drawable: 43,
  texture: 3,
  name: "Камуфляжный боевой жилет"
}, {
  component: 11,
  drawable: 44,
  texture: 0,
  name: "Черная летная куртка"
}, {
  component: 11,
  drawable: 47,
  texture: 0,
  name: "Серая мешковатая толстовка"
}, {
  component: 11,
  drawable: 48,
  texture: 0,
  name: "Черный фрак"
}, {
  component: 11,
  drawable: 49,
  texture: 0,
  name: "Серый изношенный пиджак"
}, {
  component: 11,
  drawable: 49,
  texture: 1,
  name: "Бежевый изношенный пиджак"
}, {
  component: 11,
  drawable: 49,
  texture: 2,
  name: "Черный изношенный пиджак"
}, {
  component: 11,
  drawable: 49,
  texture: 3,
  name: "Синий изношенный пиджак"
}, {
  component: 11,
  drawable: 50,
  texture: 0,
  name: "Серый (засученные рукава)"
}, {
  component: 11,
  drawable: 50,
  texture: 1,
  name: "Бежевый (засученные рукава)"
}, {
  component: 11,
  drawable: 50,
  texture: 2,
  name: "Черный (засученные рукава)"
}, {
  component: 11,
  drawable: 50,
  texture: 3,
  name: "Синий (засученные рукава)"
}, {
  component: 11,
  drawable: 51,
  texture: 0,
  name: "Бежевая маск. куртка"
}, {
  component: 11,
  drawable: 51,
  texture: 1,
  name: "Серая маск. куртка"
}, {
  component: 11,
  drawable: 51,
  texture: 2,
  name: "Зеленая маск. куртка"
}, {
  component: 11,
  drawable: 51,
  texture: 3,
  name: "Черная маск. куртка"
}, {
  component: 11,
  drawable: 52,
  texture: 0,
  name: "Черная куртка байкера"
}, {
  component: 11,
  drawable: 53,
  texture: 0,
  name: "Черная рубашка (подверн.)"
}, {
  component: 11,
  drawable: 54,
  texture: 0,
  name: "Открытый черный смокинг"
}, {
  component: 11,
  drawable: 54,
  texture: 1,
  name: "Открытый серый смокинг"
}, {
  component: 11,
  drawable: 54,
  texture: 2,
  name: "Открытый синий смокинг"
}, {
  component: 11,
  drawable: 54,
  texture: 3,
  name: "Cине-зеленый смокинг (откр.)"
}, {
  component: 11,
  drawable: 54,
  texture: 4,
  name: "Открытый красный смокинг"
}, {
  component: 11,
  drawable: 54,
  texture: 5,
  name: "Открытый белый смокинг"
}, {
  component: 11,
  drawable: 54,
  texture: 6,
  name: "Коричневый смокинг (откр.)"
}, {
  component: 11,
  drawable: 54,
  texture: 7,
  name: "Снежно-белый смокинг (откр.)"
}, {
  component: 11,
  drawable: 54,
  texture: 8,
  name: "Открытый смокинг (серый)"
}, {
  component: 11,
  drawable: 55,
  texture: 2,
  name: "Темно-синий смокинг"
}, {
  component: 11,
  drawable: 55,
  texture: 3,
  name: "Сине-зеленый смокинг"
}, {
  component: 11,
  drawable: 55,
  texture: 5,
  name: "Белый смокинг"
}, {
  component: 11,
  drawable: 55,
  texture: 6,
  name: "Коричневый смокинг"
}, {
  component: 11,
  drawable: 55,
  texture: 7,
  name: "Снежно-белый смокинг"
}, {
  component: 11,
  drawable: 59,
  texture: 0,
  name: "С капюшоном (черн.)"
}, {
  component: 11,
  drawable: 59,
  texture: 1,
  name: "С капюшоном (свет.-сер.)"
}, {
  component: 11,
  drawable: 59,
  texture: 2,
  name: "С капюшоном (темн.-сер.)"
}, {
  component: 11,
  drawable: 59,
  texture: 3,
  name: "С капюшоном (крас.)"
}, {
  component: 11,
  drawable: 59,
  texture: 5,
  name: "С капюшоном (бежев.)"
}, {
  component: 4,
  drawable: 42,
  texture: 0,
  name: "Черные с молниями"
}, {
  component: 4,
  drawable: 42,
  texture: 1,
  name: "Красные с молниями"
}, {
  component: 4,
  drawable: 42,
  texture: 2,
  name: "Коричневые с молниями"
}, {
  component: 4,
  drawable: 42,
  texture: 3,
  name: "Бежевые с молниями"
}, {
  component: 4,
  drawable: 42,
  texture: 4,
  name: "Бордовые с молниями"
}, {
  component: 6,
  drawable: 30,
  texture: 0,
  name: "Кожаные клепаные сапоги"
}, {
  component: 6,
  drawable: 31,
  texture: 0,
  name: "Высокие золотые кеды"
}, {
  component: 7,
  drawable: 28,
  texture: 0,
  name: "Золотая цепь SN"
}, {
  component: 7,
  drawable: 28,
  texture: 1,
  name: "Платиновая цепь SN"
}, {
  component: 7,
  drawable: 29,
  texture: 0,
  name: "Золотая цепь с черепом"
}, {
  component: 7,
  drawable: 29,
  texture: 1,
  name: "Платиновая цепь с черепом"
}, {
  component: 7,
  drawable: 30,
  texture: 0,
  name: "Платиновая Балаклава"
}, {
  component: 7,
  drawable: 31,
  texture: 0,
  name: "Золотая цепь Zorse"
}, {
  component: 7,
  drawable: 31,
  texture: 1,
  name: "Платиновая цепь Zorse"
}, {
  component: 7,
  drawable: 32,
  texture: 0,
  name: "Золотая цепь LC"
}, {
  component: 7,
  drawable: 32,
  texture: 1,
  name: "Платиновая цепь LC"
}, {
  component: 7,
  drawable: 33,
  texture: 0,
  name: "Золотая цепь Dix"
}, {
  component: 7,
  drawable: 33,
  texture: 1,
  name: "Платиновая цепь Dix"
}, {
  component: 7,
  drawable: 34,
  texture: 0,
  name: "Золотая цепь Le Chien"
}, {
  component: 7,
  drawable: 34,
  texture: 1,
  name: "Платиновая цепь Le Chien"
}, {
  component: 8,
  drawable: 44,
  texture: 0,
  name: "Футболка Pegasus"
}, {
  component: 8,
  drawable: 44,
  texture: 1,
  name: "Футболка Andromeda"
}, {
  component: 8,
  drawable: 44,
  texture: 2,
  name: "Футболка Medusa"
}, {
  component: 8,
  drawable: 44,
  texture: 3,
  name: "Футболка Angelica"
}, {
  component: 8,
  drawable: 44,
  texture: 4,
  name: "Футболка Classic Perseus"
}, {
  component: 8,
  drawable: 44,
  texture: 5,
  name: "Футболка Shield & Sword"
}, {
  component: 8,
  drawable: 44,
  texture: 6,
  name: "Футболка Full Shield"
}, {
  component: 8,
  drawable: 44,
  texture: 7,
  name: "Темная футболка с узором"
}, {
  component: 8,
  drawable: 44,
  texture: 9,
  name: "Розовая футболка с узором"
}, {
  component: 8,
  drawable: 44,
  texture: 10,
  name: "Черная футболка"
}, {
  component: 8,
  drawable: 44,
  texture: 11,
  name: "Золотая футболка SN"
}, {
  component: 8,
  drawable: 44,
  texture: 12,
  name: "Коричневая футболка SN"
}, {
  component: 8,
  drawable: 44,
  texture: 13,
  name: "Розовая футболка SN PRB"
}, {
  component: 8,
  drawable: 44,
  texture: 14,
  name: "Бежевая футболка Geo PRB"
}, {
  component: 8,
  drawable: 44,
  texture: 16,
  name: "Белая футболка SN Stripe"
}, {
  component: 8,
  drawable: 44,
  texture: 17,
  name: "Цветная футболка Geo PRB"
}, {
  component: 8,
  drawable: 44,
  texture: 18,
  name: "Цветная футболка Geo"
}, {
  component: 8,
  drawable: 44,
  texture: 19,
  name: "Коричневая футболка Geo"
}, {
  component: 8,
  drawable: 48,
  texture: 0,
  name: "Золотой топ"
}, {
  component: 11,
  drawable: 61,
  texture: 0,
  name: "Кремовое пальто"
}, {
  component: 11,
  drawable: 61,
  texture: 1,
  name: "Черное пальто"
}, {
  component: 11,
  drawable: 61,
  texture: 2,
  name: "Темно-синее пальто"
}, {
  component: 11,
  drawable: 61,
  texture: 3,
  name: "Серое пальто"
}, {
  component: 11,
  drawable: 61,
  texture: 4,
  name: "Зеленое пальто"
}, {
  component: 11,
  drawable: 62,
  texture: 0,
  name: "Красная куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 1,
  name: "Коричневая куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 2,
  name: "Бежевая куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 3,
  name: "Темная куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 4,
  name: "Белая куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 5,
  name: "Куртка на меху леопарда"
}, {
  component: 11,
  drawable: 62,
  texture: 6,
  name: "Осенняя куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 7,
  name: "Синяя куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 8,
  name: "Охотничья куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 9,
  name: "Зеленая куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 10,
  name: "Серая куртка на меху"
}, {
  component: 11,
  drawable: 62,
  texture: 11,
  name: "Черная куртка на меху"
}, {
  component: 11,
  drawable: 63,
  texture: 0,
  name: "Черный пиджак с поясом"
}, {
  component: 11,
  drawable: 63,
  texture: 1,
  name: "Темный пиджак с поясом"
}, {
  component: 11,
  drawable: 63,
  texture: 2,
  name: "Красный пиджак с поясом"
}, {
  component: 11,
  drawable: 63,
  texture: 3,
  name: "Синий пиджак с поясом"
}, {
  component: 4,
  drawable: 43,
  texture: 0,
  name: "Черные c разрезами"
}, {
  component: 4,
  drawable: 43,
  texture: 1,
  name: "Красные с разрезами"
}, {
  component: 4,
  drawable: 43,
  texture: 2,
  name: "Коричневые с разрезами"
}, {
  component: 4,
  drawable: 43,
  texture: 3,
  name: "Бежевые с разрезами"
}, {
  component: 4,
  drawable: 43,
  texture: 4,
  name: "Бордовые с разрезами"
}, {
  component: 7,
  drawable: 52,
  texture: 0,
  name: "Крупная золотая цепочка"
}, {
  component: 7,
  drawable: 52,
  texture: 1,
  name: "Крупная платиновая цепочка"
}, {
  component: 7,
  drawable: 53,
  texture: 0,
  name: "Золотая цепочка Бельцер"
}, {
  component: 7,
  drawable: 53,
  texture: 1,
  name: "Цепочка Бельцер, платина"
}, {
  component: 7,
  drawable: 54,
  texture: 0,
  name: "Золотая цепочка Крендель"
}, {
  component: 7,
  drawable: 54,
  texture: 1,
  name: "Цепочка Крендель, платина"
}, {
  component: 7,
  drawable: 55,
  texture: 0,
  name: "Плотная золотая цепочка"
}, {
  component: 7,
  drawable: 55,
  texture: 1,
  name: "Плотная платиновая цепочка"
}, {
  component: 7,
  drawable: 56,
  texture: 0,
  name: "Золотая цепочка Ромбы"
}, {
  component: 7,
  drawable: 56,
  texture: 1,
  name: "Платиновая цепочка Ромбы"
}, {
  component: 7,
  drawable: 57,
  texture: 0,
  name: "Массивная золотая цепь"
}, {
  component: 7,
  drawable: 57,
  texture: 1,
  name: "Массивная платиновая цепь"
}, {
  component: 7,
  drawable: 58,
  texture: 0,
  name: "Плотная цепь Квадрат"
}, {
  component: 7,
  drawable: 59,
  texture: 0,
  name: "Золотая цепочка Квадрат"
}, {
  component: 7,
  drawable: 59,
  texture: 1,
  name: "Цепочка Квадрат, платина"
}, {
  component: 7,
  drawable: 60,
  texture: 0,
  name: "Золотая цепочка Попкорн"
}, {
  component: 7,
  drawable: 60,
  texture: 1,
  name: "Цепочка Попкорн, платина"
}, {
  component: 7,
  drawable: 61,
  texture: 0,
  name: "Золотая цепочка Веревка"
}, {
  component: 7,
  drawable: 61,
  texture: 1,
  name: "Цепочка Веревка, платина"
}, {
  component: 7,
  drawable: 62,
  texture: 0,
  name: "Синий клетчатый шарф"
}, {
  component: 7,
  drawable: 62,
  texture: 1,
  name: "Зеленый клетчатый шарф"
}, {
  component: 7,
  drawable: 62,
  texture: 2,
  name: "Бежевый клетчатый шарф"
}, {
  component: 7,
  drawable: 62,
  texture: 3,
  name: "Серый клетчатый шарф"
}, {
  component: 7,
  drawable: 62,
  texture: 4,
  name: "Черный клетчатый шарф"
}, {
  component: 7,
  drawable: 62,
  texture: 5,
  name: "Персиковый клетчатый шарф"
}, {
  component: 11,
  drawable: 66,
  texture: 0,
  name: "Подбитая кожаная куртка"
}, {
  component: 11,
  drawable: 67,
  texture: 0,
  name: "Кремовый тренч"
}, {
  component: 11,
  drawable: 67,
  texture: 1,
  name: "Черный тренч"
}, {
  component: 11,
  drawable: 67,
  texture: 2,
  name: "Темно-синий тренч"
}, {
  component: 11,
  drawable: 67,
  texture: 3,
  name: "Серый тренч"
}, {
  component: 11,
  drawable: 67,
  texture: 4,
  name: "Зеленый тренч"
}, {
  component: 11,
  drawable: 68,
  texture: 0,
  name: "Золотой свитер Geo"
}, {
  component: 11,
  drawable: 68,
  texture: 1,
  name: "Свитер Le Chien"
}, {
  component: 11,
  drawable: 68,
  texture: 2,
  name: "Черный свитер Geo"
}, {
  component: 11,
  drawable: 68,
  texture: 3,
  name: "Серебряный свитер Geo"
}, {
  component: 11,
  drawable: 68,
  texture: 4,
  name: "Свитер Hound"
}, {
  component: 11,
  drawable: 68,
  texture: 5,
  name: "Зеленовато-голубой свитер"
}, {
  component: 11,
  drawable: 68,
  texture: 6,
  name: "Светлый свитер Perseus"
}, {
  component: 11,
  drawable: 68,
  texture: 7,
  name: "Cвитер Perseus"
}, {
  component: 11,
  drawable: 68,
  texture: 8,
  name: "Свитер Sword & Shield"
}, {
  component: 11,
  drawable: 68,
  texture: 9,
  name: "Черный свитер SN"
}, {
  component: 11,
  drawable: 68,
  texture: 10,
  name: "Свитер Perseus"
}, {
  component: 11,
  drawable: 68,
  texture: 11,
  name: "Классический свитер SN"
}, {
  component: 11,
  drawable: 68,
  texture: 12,
  name: "Свитер с цветными ромбами"
}, {
  component: 11,
  drawable: 68,
  texture: 13,
  name: "Свитер с золотыми ромбами"
}, {
  component: 11,
  drawable: 68,
  texture: 14,
  name: "Разноцветный свитер SN"
}, {
  component: 11,
  drawable: 68,
  texture: 15,
  name: "Разноцветный свитер Geo"
}, {
  component: 4,
  drawable: 44,
  texture: 0,
  name: "Штаны карго цвета хаки"
}, {
  component: 4,
  drawable: 44,
  texture: 1,
  name: "Черные свободные штаны карго"
}, {
  component: 4,
  drawable: 44,
  texture: 2,
  name: "Белые свободные штаны карго"
}, {
  component: 4,
  drawable: 44,
  texture: 3,
  name: "Серые свободные штаны карго"
}, {
  component: 6,
  drawable: 32,
  texture: 0,
  name: "Кроссовки Calypso"
}, {
  component: 6,
  drawable: 32,
  texture: 1,
  name: "Кроссовки Buzz"
}, {
  component: 6,
  drawable: 32,
  texture: 2,
  name: "Кроссовки Fresh"
}, {
  component: 6,
  drawable: 32,
  texture: 3,
  name: "Кроссовки Jinx"
}, {
  component: 6,
  drawable: 32,
  texture: 4,
  name: "Кроссовки Animal"
}, {
  component: 6,
  drawable: 33,
  texture: 0,
  name: "Желтые Canvas и гетры"
}, {
  component: 6,
  drawable: 33,
  texture: 1,
  name: "Черные Canvas и гетры"
}, {
  component: 6,
  drawable: 33,
  texture: 2,
  name: "Серые Canvas и гетры"
}, {
  component: 6,
  drawable: 33,
  texture: 3,
  name: "Белые Canvas и гетры"
}, {
  component: 6,
  drawable: 33,
  texture: 4,
  name: "Красные Canvas и гетры"
}, {
  component: 6,
  drawable: 33,
  texture: 5,
  name: "Синие Canvas и гетры"
}, {
  component: 6,
  drawable: 33,
  texture: 6,
  name: "Зеленые Canvas и гетры"
}, {
  component: 6,
  drawable: 33,
  texture: 7,
  name: "Коричневые Canvas и гетры"
}, {
  component: 7,
  drawable: 80,
  texture: 0,
  name: "Золотое ожерелье Magnetics"
}, {
  component: 7,
  drawable: 80,
  texture: 1,
  name: "Платиновое Magnetics"
}, {
  component: 8,
  drawable: 56,
  texture: 0,
  name: "Белая классика"
}, {
  component: 8,
  drawable: 56,
  texture: 1,
  name: "Черная классика"
}, {
  component: 8,
  drawable: 56,
  texture: 2,
  name: "Серая классика"
}, {
  component: 8,
  drawable: 59,
  texture: 0,
  name: "Белая свободная блузка"
}, {
  component: 8,
  drawable: 59,
  texture: 1,
  name: "Черная свободная блузка"
}, {
  component: 8,
  drawable: 59,
  texture: 2,
  name: "Серая свободная блузка"
}, {
  component: 8,
  drawable: 60,
  texture: 0,
  name: "Майка с желтым рисунком"
}, {
  component: 8,
  drawable: 60,
  texture: 1,
  name: "Майка с белым рисунком"
}, {
  component: 8,
  drawable: 60,
  texture: 2,
  name: "Желтая майка"
}, {
  component: 8,
  drawable: 60,
  texture: 3,
  name: "Черная майка"
}, {
  component: 10,
  drawable: 10,
  texture: 0,
  name: "Эмблема банды (перед и зад)"
}, {
  component: 11,
  drawable: 73,
  texture: 0,
  name: "Майка Broker"
}, {
  component: 11,
  drawable: 73,
  texture: 1,
  name: "Майка Double P"
}, {
  component: 11,
  drawable: 73,
  texture: 2,
  name: "Майка Magnetics"
}, {
  component: 11,
  drawable: 73,
  texture: 3,
  name: "Майка Trickster"
}, {
  component: 11,
  drawable: 73,
  texture: 4,
  name: "Майка Feud"
}, {
  component: 11,
  drawable: 74,
  texture: 0,
  name: "Темно-синяя штормовка"
}, {
  component: 11,
  drawable: 75,
  texture: 0,
  name: "Черная спортивная толстовка"
}, {
  component: 11,
  drawable: 75,
  texture: 1,
  name: "Серая спортивная толстовка"
}, {
  component: 11,
  drawable: 75,
  texture: 2,
  name: "Лиловая толстовка"
}, {
  component: 11,
  drawable: 75,
  texture: 3,
  name: "Бирюзовая толстовка"
}, {
  component: 11,
  drawable: 75,
  texture: 4,
  name: "Розовая спортивная толстовка"
}, {
  component: 11,
  drawable: 75,
  texture: 5,
  name: "Белая спортивная толстовка"
}, {
  component: 11,
  drawable: 75,
  texture: 6,
  name: "Синяя спортивная толстовка"
}, {
  component: 11,
  drawable: 75,
  texture: 7,
  name: "Красная спортивная толстовка"
}, {
  component: 11,
  drawable: 76,
  texture: 0,
  name: "Черный свитер"
}, {
  component: 11,
  drawable: 76,
  texture: 1,
  name: "Серый свитер"
}, {
  component: 11,
  drawable: 76,
  texture: 2,
  name: "Белый свитер"
}, {
  component: 11,
  drawable: 76,
  texture: 3,
  name: "Зеленый свитер"
}, {
  component: 11,
  drawable: 77,
  texture: 0,
  name: "Куртка Университетская"
}, {
  component: 11,
  drawable: 78,
  texture: 0,
  name: "Красная куртка Double P"
}, {
  component: 11,
  drawable: 78,
  texture: 1,
  name: "Желтая куртка Magnetics"
}, {
  component: 11,
  drawable: 78,
  texture: 2,
  name: "Черная куртка Hinterland"
}, {
  component: 11,
  drawable: 78,
  texture: 3,
  name: "Зеленая куртка Magnetics"
}, {
  component: 11,
  drawable: 78,
  texture: 4,
  name: "Черная куртка Broker Print"
}, {
  component: 11,
  drawable: 78,
  texture: 5,
  name: "Серая куртка Broker Print"
}, {
  component: 11,
  drawable: 78,
  texture: 6,
  name: "Черная куртка Broker"
}, {
  component: 11,
  drawable: 78,
  texture: 7,
  name: "Белая куртка Trickster"
}, {
  component: 11,
  drawable: 78,
  texture: 8,
  name: "Черная куртка Trickster"
}, {
  component: 11,
  drawable: 78,
  texture: 9,
  name: "Коричневая куртка WSBL"
}, {
  component: 11,
  drawable: 78,
  texture: 10,
  name: "Синяя куртка Double P"
}, {
  component: 11,
  drawable: 78,
  texture: 11,
  name: "Синяя куртка LS"
}, {
  component: 1,
  drawable: 60,
  texture: 0,
  name: "Злобная тыква"
}, {
  component: 1,
  drawable: 60,
  texture: 1,
  name: "Гнилая тыква"
}, {
  component: 1,
  drawable: 60,
  texture: 2,
  name: "Противный арбуз"
}, {
  component: 1,
  drawable: 61,
  texture: 0,
  name: "Жуткий дворецкий"
}, {
  component: 1,
  drawable: 61,
  texture: 1,
  name: "Мертвый дворецкий"
}, {
  component: 1,
  drawable: 61,
  texture: 2,
  name: "Гниющий дворецкий"
}, {
  component: 1,
  drawable: 62,
  texture: 0,
  name: "Белый обожженный псих"
}, {
  component: 1,
  drawable: 62,
  texture: 1,
  name: "Кровавый обожженный псих"
}, {
  component: 1,
  drawable: 62,
  texture: 2,
  name: "Черный обожженный псих"
}, {
  component: 1,
  drawable: 63,
  texture: 0,
  name: "Красный демон"
}, {
  component: 1,
  drawable: 63,
  texture: 1,
  name: "Зеленый демон"
}, {
  component: 1,
  drawable: 63,
  texture: 2,
  name: "Серый демон"
}, {
  component: 1,
  drawable: 64,
  texture: 0,
  name: "Белый череп с кожей"
}, {
  component: 1,
  drawable: 64,
  texture: 1,
  name: "Красный череп с кожей"
}, {
  component: 1,
  drawable: 64,
  texture: 2,
  name: "Кремовый череп с кожей"
}, {
  component: 1,
  drawable: 65,
  texture: 0,
  name: "Бледный оборотень"
}, {
  component: 1,
  drawable: 65,
  texture: 1,
  name: "Темный оборотень"
}, {
  component: 1,
  drawable: 65,
  texture: 2,
  name: "Серый оборотень"
}, {
  component: 1,
  drawable: 66,
  texture: 0,
  name: "Зеленое насекомое"
}, {
  component: 1,
  drawable: 66,
  texture: 1,
  name: "Красное насекомое"
}, {
  component: 1,
  drawable: 66,
  texture: 2,
  name: "Пурпурное насекомое"
}, {
  component: 1,
  drawable: 67,
  texture: 0,
  name: "Грязная канавная тварь"
}, {
  component: 1,
  drawable: 67,
  texture: 1,
  name: "Гнилая канавная тварь"
}, {
  component: 1,
  drawable: 67,
  texture: 2,
  name: "Паршивая канавная тварь"
}, {
  component: 1,
  drawable: 68,
  texture: 0,
  name: "Красный черт"
}, {
  component: 1,
  drawable: 68,
  texture: 1,
  name: "Оранжевый черт"
}, {
  component: 1,
  drawable: 68,
  texture: 2,
  name: "Черный черт"
}, {
  component: 1,
  drawable: 69,
  texture: 0,
  name: "Маньяк в классическом мешке"
}, {
  component: 1,
  drawable: 69,
  texture: 1,
  name: "Маньяк в кровавом мешке"
}, {
  component: 1,
  drawable: 69,
  texture: 2,
  name: "Маньяк в черном мешке"
}, {
  component: 1,
  drawable: 70,
  texture: 0,
  name: "Синий пришелец гипнотик"
}, {
  component: 1,
  drawable: 70,
  texture: 1,
  name: "Зеленый пришелец гипнотик"
}, {
  component: 1,
  drawable: 70,
  texture: 2,
  name: "Красный пришелец гипнотик"
}, {
  component: 1,
  drawable: 71,
  texture: 0,
  name: "Желтая измученная ведьма"
}, {
  component: 1,
  drawable: 71,
  texture: 1,
  name: "Серая измученная ведьма"
}, {
  component: 1,
  drawable: 71,
  texture: 2,
  name: "Белая измученная ведьма"
}, {
  component: 1,
  drawable: 72,
  texture: 0,
  name: "Красный бородатый демон"
}, {
  component: 1,
  drawable: 72,
  texture: 1,
  name: "Рыжий демон с бородой"
}, {
  component: 1,
  drawable: 72,
  texture: 2,
  name: "Черный бородатый демон"
}, {
  component: 4,
  drawable: 45,
  texture: 0,
  name: "Кремовые узкие чинос"
}, {
  component: 4,
  drawable: 45,
  texture: 1,
  name: "Черные узкие чинос"
}, {
  component: 4,
  drawable: 45,
  texture: 2,
  name: "Хаки узкие чинос"
}, {
  component: 4,
  drawable: 45,
  texture: 3,
  name: "Серые узкие чинос"
}, {
  component: 4,
  drawable: 46,
  texture: 0,
  name: "Черные с высокой талией"
}, {
  component: 4,
  drawable: 46,
  texture: 1,
  name: "Белые с высокой талией"
}, {
  component: 4,
  drawable: 46,
  texture: 2,
  name: "Серые с высокой талией"
}, {
  component: 6,
  drawable: 34,
  texture: 0,
  name: "Желтые ботинки на танкетке"
}, {
  component: 6,
  drawable: 34,
  texture: 1,
  name: "Черные ботинки на танкетке"
}, {
  component: 6,
  drawable: 34,
  texture: 2,
  name: "Серые ботинки на танкетке"
}, {
  component: 6,
  drawable: 34,
  texture: 3,
  name: "Белые ботинки на танкетке"
}, {
  component: 6,
  drawable: 34,
  texture: 4,
  name: "Красные ботинки на танкетке"
}, {
  component: 6,
  drawable: 34,
  texture: 5,
  name: "Синие ботинки на танкетке"
}, {
  component: 6,
  drawable: 34,
  texture: 6,
  name: "Зеленые ботинки на танкетке"
}, {
  component: 6,
  drawable: 34,
  texture: 7,
  name: "Бурые ботинки на танкетке"
}, {
  component: 6,
  drawable: 35,
  texture: 0,
  name: "Желтые кроссовки (с кабл.)"
}, {
  component: 6,
  drawable: 35,
  texture: 1,
  name: "Черные кроссовки (с кабл.)"
}, {
  component: 6,
  drawable: 35,
  texture: 2,
  name: "Серые кроссовки (с кабл.)"
}, {
  component: 6,
  drawable: 35,
  texture: 3,
  name: "Белые кроссовки (с кабл.)"
}, {
  component: 6,
  drawable: 35,
  texture: 4,
  name: "Красные кроссовки (с кабл.)"
}, {
  component: 6,
  drawable: 35,
  texture: 5,
  name: "Синие кроссовки (с кабл.)"
}, {
  component: 6,
  drawable: 35,
  texture: 6,
  name: "Зеленые кроссовки (с кабл.)"
}, {
  component: 6,
  drawable: 35,
  texture: 7,
  name: "Бурые кроссовки (с кабл.)"
}, {
  component: 7,
  drawable: 82,
  texture: 0,
  name: "Черные подтяжки"
}, {
  component: 7,
  drawable: 82,
  texture: 1,
  name: "Белые подтяжки"
}, {
  component: 7,
  drawable: 82,
  texture: 2,
  name: "Красные подтяжки"
}, {
  component: 7,
  drawable: 83,
  texture: 0,
  name: "Золотой кулон колесо"
}, {
  component: 7,
  drawable: 83,
  texture: 1,
  name: "Платиновый кулон колесо"
}, {
  component: 7,
  drawable: 85,
  texture: 0,
  name: "Кулон из золотого сплава"
}, {
  component: 7,
  drawable: 85,
  texture: 1,
  name: "Кулон из платинового сплава"
}, {
  component: 8,
  drawable: 63,
  texture: 0,
  name: "Белая футболка (подверн.)"
}, {
  component: 8,
  drawable: 63,
  texture: 1,
  name: "Черная футболка (подверн.)"
}, {
  component: 8,
  drawable: 63,
  texture: 2,
  name: "Серая футболка (подверн.)"
}, {
  component: 11,
  drawable: 81,
  texture: 0,
  name: "Белая рабочая рубашка"
}, {
  component: 11,
  drawable: 81,
  texture: 1,
  name: "Темно-синяя рабочая рубашка"
}, {
  component: 11,
  drawable: 81,
  texture: 2,
  name: "Темно-серая рабочая рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 0,
  name: "Открытая синяя рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 1,
  name: "Открытая, с бурыми полосами"
}, {
  component: 11,
  drawable: 82,
  texture: 2,
  name: "Открытая зеленая рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 3,
  name: "Открытая рубашка индиго"
}, {
  component: 11,
  drawable: 82,
  texture: 4,
  name: "Открытая охровая рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 6,
  name: "Открытая, с синими полосами"
}, {
  component: 11,
  drawable: 82,
  texture: 7,
  name: "Открытая, с полосами индиго"
}, {
  component: 11,
  drawable: 82,
  texture: 8,
  name: "Открытая, с серыми полосами"
}, {
  component: 11,
  drawable: 82,
  texture: 9,
  name: "Открытая, с полосами аква"
}, {
  component: 11,
  drawable: 82,
  texture: 11,
  name: "Открытая белая рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 12,
  name: "Открытая красная рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 13,
  name: "Открытая, в зеленую клетку"
}, {
  component: 11,
  drawable: 82,
  texture: 14,
  name: "Открытая черная рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 15,
  name: "Открытая бурая рубашка"
}, {
  component: 11,
  drawable: 82,
  texture: 16,
  name: "Открытая, в клетку индиго"
}, {
  component: 11,
  drawable: 83,
  texture: 1,
  name: "Коричневая рубашка"
}, {
  component: 11,
  drawable: 83,
  texture: 2,
  name: "Зеленая рубашка"
}, {
  component: 11,
  drawable: 83,
  texture: 3,
  name: "Рубашка индиго"
}, {
  component: 11,
  drawable: 83,
  texture: 4,
  name: "Охровая рубашка"
}, {
  component: 11,
  drawable: 83,
  texture: 5,
  name: "Бурая с полосами"
}, {
  component: 11,
  drawable: 83,
  texture: 6,
  name: "Синяя с полосами"
}, {
  component: 11,
  drawable: 83,
  texture: 7,
  name: "Индиго с полосами"
}, {
  component: 11,
  drawable: 83,
  texture: 8,
  name: "Серая с полосами"
}, {
  component: 11,
  drawable: 83,
  texture: 9,
  name: "Голубая с полосами"
}, {
  component: 11,
  drawable: 83,
  texture: 11,
  name: "Белая в клетку"
}, {
  component: 11,
  drawable: 83,
  texture: 12,
  name: "Красная в клетку"
}, {
  component: 11,
  drawable: 83,
  texture: 13,
  name: "Зеленая в клетку"
}, {
  component: 11,
  drawable: 83,
  texture: 14,
  name: "Черная в клетку"
}, {
  component: 11,
  drawable: 83,
  texture: 15,
  name: "Бурая в клетку"
}, {
  component: 11,
  drawable: 83,
  texture: 16,
  name: "Индиго в клетку"
}, {
  component: 11,
  drawable: 84,
  texture: 0,
  name: "Желто-коричневое пальто"
}, {
  component: 11,
  drawable: 85,
  texture: 0,
  name: "С черно-белыми полосами"
}, {
  component: 11,
  drawable: 85,
  texture: 1,
  name: "С черно-синими полосами"
}, {
  component: 11,
  drawable: 85,
  texture: 2,
  name: "Черная полосатая толстовка"
}, {
  component: 11,
  drawable: 85,
  texture: 3,
  name: "Растаманская толстовка"
}, {
  component: 11,
  drawable: 85,
  texture: 4,
  name: "Серая толстовка хиппи"
}, {
  component: 11,
  drawable: 85,
  texture: 5,
  name: "Черная толстовка хиппи"
}, {
  component: 11,
  drawable: 85,
  texture: 6,
  name: "Толстовка Trickster"
}, {
  component: 11,
  drawable: 85,
  texture: 7,
  name: "Толстовка Fruntalot"
}, {
  component: 11,
  drawable: 85,
  texture: 8,
  name: "Толстовка Yeti"
}, {
  component: 11,
  drawable: 85,
  texture: 9,
  name: "Толстовка Sweatbox"
}, {
  component: 11,
  drawable: 85,
  texture: 10,
  name: "Толстовка Chianski"
}, {
  component: 11,
  drawable: 85,
  texture: 11,
  name: "Толстовка Dense"
}, {
  component: 11,
  drawable: 86,
  texture: 0,
  name: "Белая блузка с жабо"
}, {
  component: 11,
  drawable: 86,
  texture: 1,
  name: "Черная блузка с жабо"
}, {
  component: 11,
  drawable: 86,
  texture: 2,
  name: "Красная блузка с жабо"
}, {
  component: 11,
  drawable: 88,
  texture: 0,
  name: "Черная спортивная футболка"
}, {
  component: 11,
  drawable: 88,
  texture: 1,
  name: "Белая спортивная футболка"
}, {
  component: 11,
  drawable: 88,
  texture: 2,
  name: "Серая спортивная футболка"
}, {
  component: 4,
  drawable: 47,
  texture: 0,
  name: "Синие широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 1,
  name: "Бордовые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 2,
  name: "Бежевые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 3,
  name: "Васильковые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 4,
  name: "Красные широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 5,
  name: "Голубые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 6,
  name: "Оранжевые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 7,
  name: "Фиолетовые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 8,
  name: "Серые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 9,
  name: "Зеленые широкие штаны"
}, {
  component: 4,
  drawable: 47,
  texture: 10,
  name: "Белые широкие штаны"
}, {
  component: 6,
  drawable: 36,
  texture: 0,
  name: "Синие ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 1,
  name: "Ярко-розовые ковбойские"
}, {
  component: 6,
  drawable: 36,
  texture: 2,
  name: "Белые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 3,
  name: "Красные ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 4,
  name: "Бордовые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 5,
  name: "Алые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 6,
  name: "Зеленые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 7,
  name: "Лиловые ковбойские сапоги"
}, {
  component: 6,
  drawable: 36,
  texture: 8,
  name: "Оранжевые ковбойские"
}, {
  component: 6,
  drawable: 36,
  texture: 9,
  name: "Темно-синие ковбойские"
}, {
  component: 6,
  drawable: 36,
  texture: 10,
  name: "Розовые ковбойские сапоги"
}, {
  component: 7,
  drawable: 87,
  texture: 0,
  name: "Золотое ожерелье"
}, {
  component: 7,
  drawable: 87,
  texture: 1,
  name: "Жемчужное ожерелье"
}, {
  component: 8,
  drawable: 69,
  texture: 0,
  name: "Синяя рубашка под свитер"
}, {
  component: 8,
  drawable: 69,
  texture: 1,
  name: "Черная рубашка под свитер"
}, {
  component: 8,
  drawable: 69,
  texture: 2,
  name: "Клетчатая, под свитер"
}, {
  component: 8,
  drawable: 70,
  texture: 0,
  name: "Серая водолазка"
}, {
  component: 8,
  drawable: 70,
  texture: 1,
  name: "Красная водолазка"
}, {
  component: 8,
  drawable: 70,
  texture: 2,
  name: "Коричневая водолазка"
}, {
  component: 8,
  drawable: 70,
  texture: 3,
  name: "Черная водолазка"
}, {
  component: 8,
  drawable: 70,
  texture: 4,
  name: "Темно-синяя водолазка"
}, {
  component: 8,
  drawable: 70,
  texture: 5,
  name: "Бежевая водолазка"
}, {
  component: 8,
  drawable: 70,
  texture: 6,
  name: "Фиолетовая водолазка"
}, {
  component: 8,
  drawable: 70,
  texture: 7,
  name: "Зеленая водолазка"
}, {
  component: 11,
  drawable: 89,
  texture: 0,
  name: "Бомбер SecuroServ"
}, {
  component: 11,
  drawable: 90,
  texture: 0,
  name: "Темно-синяя поло Liberty"
}, {
  component: 11,
  drawable: 92,
  texture: 0,
  name: "Двуцветная, заправленная"
}, {
  component: 11,
  drawable: 93,
  texture: 0,
  name: "Черная толстовка Liberty"
}, {
  component: 11,
  drawable: 93,
  texture: 1,
  name: "Красная толстовка Liberty"
}, {
  component: 11,
  drawable: 93,
  texture: 2,
  name: "Белая Flying Bravo"
}, {
  component: 11,
  drawable: 94,
  texture: 0,
  name: "Королевская рубашка"
}, {
  component: 11,
  drawable: 94,
  texture: 1,
  name: "Рубашка с цветочным принтом"
}, {
  component: 11,
  drawable: 94,
  texture: 2,
  name: "Красочная рубашка"
}, {
  component: 11,
  drawable: 94,
  texture: 3,
  name: "Рубашка с голубым узором"
}, {
  component: 11,
  drawable: 94,
  texture: 4,
  name: "Рубашка с цветочным узором"
}, {
  component: 11,
  drawable: 94,
  texture: 5,
  name: "Ацтекская рубашка"
}, {
  component: 11,
  drawable: 94,
  texture: 6,
  name: "Вылинявшая рубашка"
}, {
  component: 11,
  drawable: 95,
  texture: 0,
  name: "Серая стеганка"
}, {
  component: 11,
  drawable: 95,
  texture: 1,
  name: "Оливковая стеганка"
}, {
  component: 11,
  drawable: 95,
  texture: 2,
  name: "Синяя стеганка"
}, {
  component: 11,
  drawable: 95,
  texture: 3,
  name: "Бежевая стеганка"
}, {
  component: 11,
  drawable: 95,
  texture: 4,
  name: "Коричневая стеганка"
}, {
  component: 11,
  drawable: 95,
  texture: 5,
  name: "Зеленая стеганка"
}, {
  component: 11,
  drawable: 95,
  texture: 6,
  name: "Черная стеганка"
}, {
  component: 11,
  drawable: 96,
  texture: 0,
  name: "Безрукавка с ромбами QB"
}, {
  component: 11,
  drawable: 96,
  texture: 1,
  name: "Темно-синяя безрукавка QB"
}, {
  component: 11,
  drawable: 96,
  texture: 2,
  name: "Синяя безрукавка Perseus"
}, {
  component: 11,
  drawable: 97,
  texture: 0,
  name: "Шоколадная полевая куртка"
}, {
  component: 11,
  drawable: 97,
  texture: 1,
  name: "Черная полевая куртка"
}, {
  component: 11,
  drawable: 97,
  texture: 2,
  name: "Коричневая полевая куртка"
}, {
  component: 11,
  drawable: 99,
  texture: 0,
  name: "Сине-голубой френч"
}, {
  component: 11,
  drawable: 99,
  texture: 1,
  name: "Светло-серый френч"
}, {
  component: 11,
  drawable: 99,
  texture: 2,
  name: "Серый френч"
}, {
  component: 11,
  drawable: 99,
  texture: 3,
  name: "Темно-серый френч"
}, {
  component: 11,
  drawable: 99,
  texture: 4,
  name: "Синий френч"
}, {
  component: 11,
  drawable: 99,
  texture: 5,
  name: "Темно-синий френч"
}, {
  component: 11,
  drawable: 99,
  texture: 6,
  name: "Черный френч"
}, {
  component: 11,
  drawable: 99,
  texture: 7,
  name: "Черный френч в полоску"
}, {
  component: 11,
  drawable: 99,
  texture: 8,
  name: "Синий френч в полоску"
}, {
  component: 11,
  drawable: 99,
  texture: 9,
  name: "Светло-коричневый френч"
}, {
  component: 11,
  drawable: 99,
  texture: 10,
  name: "Бордовый френч"
}, {
  component: 11,
  drawable: 99,
  texture: 11,
  name: "Фиолетовый френч"
}, {
  component: 11,
  drawable: 99,
  texture: 12,
  name: "Розовый френч"
}, {
  component: 11,
  drawable: 99,
  texture: 13,
  name: "Рябиновый френч в полоску"
}, {
  component: 11,
  drawable: 99,
  texture: 14,
  name: "Зеленоватый френч"
}, {
  component: 11,
  drawable: 100,
  texture: 0,
  name: "Синяя олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 1,
  name: "Бордовая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 2,
  name: "Бежевая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 3,
  name: "Полевая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 4,
  name: "Васильковая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 5,
  name: "Белая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 6,
  name: "Голубая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 7,
  name: "Малиновая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 8,
  name: "Трехцветная олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 9,
  name: "Серая олимпийка"
}, {
  component: 11,
  drawable: 100,
  texture: 10,
  name: "Cеро-зеленая олимпийка"
}, {
  component: 11,
  drawable: 101,
  texture: 0,
  name: "Черное кашемировое пальто"
}, {
  component: 11,
  drawable: 101,
  texture: 1,
  name: "Бурое кашемировое пальто"
}, {
  component: 11,
  drawable: 101,
  texture: 2,
  name: "Светлое кашемировое пальто"
}, {
  component: 11,
  drawable: 104,
  texture: 0,
  name: "Пастельно-синяя пижама"
}, {
  component: 11,
  drawable: 104,
  texture: 1,
  name: "Пастельно-желтая пижама"
}, {
  component: 11,
  drawable: 104,
  texture: 2,
  name: "Пастельно-розовая пижама"
}, {
  component: 11,
  drawable: 104,
  texture: 3,
  name: "Пастельно-зеленая пижама"
}, {
  component: 11,
  drawable: 104,
  texture: 4,
  name: "Красочная пижама в клетку"
}, {
  component: 11,
  drawable: 104,
  texture: 5,
  name: "Синяя пижама в клетку"
}, {
  component: 11,
  drawable: 104,
  texture: 6,
  name: "Красная пижама с мотивом"
}, {
  component: 11,
  drawable: 104,
  texture: 7,
  name: "Белая пижама с рисунком"
}, {
  component: 11,
  drawable: 104,
  texture: 8,
  name: "Синяя пижама с завитками"
}, {
  component: 11,
  drawable: 104,
  texture: 9,
  name: "Желтая пижама с завитками"
}, {
  component: 11,
  drawable: 104,
  texture: 10,
  name: "Красная пижама с завитками"
}, {
  component: 11,
  drawable: 104,
  texture: 11,
  name: "Синяя пижама в полоску"
}, {
  component: 11,
  drawable: 104,
  texture: 12,
  name: "Пижама в широкую полоску"
}, {
  component: 11,
  drawable: 104,
  texture: 13,
  name: "Оранжевая пижама в полоску"
}, {
  component: 11,
  drawable: 105,
  texture: 0,
  name: "Пастельно-синий жакет"
}, {
  component: 11,
  drawable: 105,
  texture: 1,
  name: "Пастельно-желтый жакет"
}, {
  component: 11,
  drawable: 105,
  texture: 2,
  name: "Пастельно-розовый жакет"
}, {
  component: 11,
  drawable: 105,
  texture: 3,
  name: "Пастельно-зеленый жакет"
}, {
  component: 11,
  drawable: 105,
  texture: 4,
  name: "Красочный жакет в клетку"
}, {
  component: 11,
  drawable: 105,
  texture: 5,
  name: "Синий жакет в клетку"
}, {
  component: 11,
  drawable: 105,
  texture: 6,
  name: "Красный жакет с мотивом"
}, {
  component: 11,
  drawable: 105,
  texture: 7,
  name: "Белый жакет с рисунком"
}, {
  component: 11,
  drawable: 105,
  texture: 8,
  name: "Синий жакет с завитками"
}, {
  component: 11,
  drawable: 105,
  texture: 9,
  name: "Желтый жакет с завитками"
}, {
  component: 11,
  drawable: 105,
  texture: 10,
  name: "Красный жакет с завитками"
}, {
  component: 11,
  drawable: 105,
  texture: 11,
  name: "Синий жакет в полоску"
}, {
  component: 11,
  drawable: 105,
  texture: 12,
  name: "Жакет в широкую полоску"
}, {
  component: 11,
  drawable: 105,
  texture: 13,
  name: "Оранжевый жакет в полоску"
}, {
  component: 3,
  drawable: 114,
  texture: 0,
  name: "Гоночные перчатки"
}, {
  component: 3,
  drawable: 115,
  texture: 0,
  name: "Перчатки для мотокросса"
}, {
  component: 4,
  drawable: 52,
  texture: 0,
  name: "Треники с черепами"
}, {
  component: 4,
  drawable: 52,
  texture: 1,
  name: "Камуфляжные треники"
}, {
  component: 4,
  drawable: 52,
  texture: 2,
  name: "Серые камуфляжные треники"
}, {
  component: 4,
  drawable: 52,
  texture: 3,
  name: "Треники со звездами"
}, {
  component: 4,
  drawable: 52,
  texture: 8,
  name: "Треники Lazer Force"
}, {
  component: 4,
  drawable: 52,
  texture: 9,
  name: "Треники Бессильная злоба"
}, {
  component: 4,
  drawable: 52,
  texture: 10,
  name: "Треники Hamburgers"
}, {
  component: 4,
  drawable: 52,
  texture: 11,
  name: "Треники Up-n-Atom"
}, {
  component: 4,
  drawable: 52,
  texture: 12,
  name: "Треники Barfs"
}, {
  component: 4,
  drawable: 52,
  texture: 13,
  name: "Треники Bubblegum"
}, {
  component: 4,
  drawable: 52,
  texture: 14,
  name: "Яркие камуфляжные треники"
}, {
  component: 4,
  drawable: 52,
  texture: 15,
  name: "Треники Space Ranger"
}, {
  component: 4,
  drawable: 52,
  texture: 16,
  name: "Треники Sprunk"
}, {
  component: 4,
  drawable: 52,
  texture: 17,
  name: "Треники с рябью"
}, {
  component: 11,
  drawable: 109,
  texture: 0,
  name: "Черный с драконами"
}, {
  component: 11,
  drawable: 109,
  texture: 1,
  name: "Синий с драконами"
}, {
  component: 11,
  drawable: 109,
  texture: 2,
  name: "Черный с рыбами"
}, {
  component: 11,
  drawable: 109,
  texture: 3,
  name: "Белый с тиграми"
}, {
  component: 11,
  drawable: 109,
  texture: 4,
  name: "Желтый с солнцами"
}, {
  component: 11,
  drawable: 109,
  texture: 5,
  name: "Пурпурный с солнцами"
}, {
  component: 11,
  drawable: 109,
  texture: 6,
  name: "Синий с сакурой"
}, {
  component: 11,
  drawable: 109,
  texture: 7,
  name: "Белоснежный с сакурой"
}, {
  component: 11,
  drawable: 109,
  texture: 8,
  name: "Охровый с драконами"
}, {
  component: 11,
  drawable: 109,
  texture: 9,
  name: "Сине-зеленый с драконами"
}, {
  component: 11,
  drawable: 109,
  texture: 10,
  name: "Синий с рыбами"
}, {
  component: 11,
  drawable: 109,
  texture: 11,
  name: "Бежевый с тиграми"
}, {
  component: 11,
  drawable: 110,
  texture: 0,
  name: "Бурая куртка ДК"
}, {
  component: 11,
  drawable: 110,
  texture: 1,
  name: "Черная куртка ДК"
}, {
  component: 11,
  drawable: 110,
  texture: 2,
  name: "Серая куртка ДК"
}, {
  component: 11,
  drawable: 110,
  texture: 3,
  name: "Синяя куртка ДК"
}, {
  component: 11,
  drawable: 110,
  texture: 4,
  name: "Бежевая куртка ДК"
}, {
  component: 11,
  drawable: 110,
  texture: 5,
  name: "Бордовая куртка ДК"
}, {
  component: 11,
  drawable: 111,
  texture: 0,
  name: "Розово-черная джерси"
}, {
  component: 11,
  drawable: 111,
  texture: 1,
  name: "Пестрая джерси"
}, {
  component: 11,
  drawable: 111,
  texture: 2,
  name: "Джерси Atomic"
}, {
  component: 11,
  drawable: 111,
  texture: 3,
  name: "Джерси Экстрим"
}, {
  component: 11,
  drawable: 111,
  texture: 4,
  name: "Пятнистая джерси"
}, {
  component: 11,
  drawable: 111,
  texture: 5,
  name: "Джерси Rays"
}, {
  component: 11,
  drawable: 111,
  texture: 6,
  name: "Джерси Сила"
}, {
  component: 11,
  drawable: 111,
  texture: 7,
  name: "Джерси Радикально"
}, {
  component: 11,
  drawable: 111,
  texture: 8,
  name: "Джерси Турбо"
}, {
  component: 11,
  drawable: 111,
  texture: 9,
  name: "Джерси Слалом"
}, {
  component: 11,
  drawable: 111,
  texture: 10,
  name: "Вишневая джерси"
}, {
  component: 11,
  drawable: 111,
  texture: 11,
  name: "Джерси Ускорение"
}, {
  component: 11,
  drawable: 111,
  texture: 12,
  name: "Джерси Драйв"
}, {
  component: 11,
  drawable: 111,
  texture: 13,
  name: "Бело-желтая джерси"
}, {
  component: 11,
  drawable: 111,
  texture: 14,
  name: "Джерси Отрава"
}, {
  component: 11,
  drawable: 111,
  texture: 15,
  name: "Джерси Накачка"
}, {
  component: 11,
  drawable: 112,
  texture: 0,
  name: "Красная атласная куртка"
}, {
  component: 11,
  drawable: 112,
  texture: 1,
  name: "Черная атласная куртка"
}, {
  component: 11,
  drawable: 112,
  texture: 2,
  name: "Белая атласная куртка"
}, {
  component: 11,
  drawable: 112,
  texture: 3,
  name: "Синяя атласная куртка"
}, {
  component: 11,
  drawable: 112,
  texture: 4,
  name: "Оранжевая атласная куртка"
}, {
  component: 11,
  drawable: 112,
  texture: 5,
  name: "Коричневая атласная куртка"
}, {
  component: 11,
  drawable: 112,
  texture: 6,
  name: "Зеленая атласная куртка"
}, {
  component: 11,
  drawable: 112,
  texture: 7,
  name: "Атласная куртка хаки"
}, {
  component: 11,
  drawable: 112,
  texture: 8,
  name: "Атласная куртка каскадера"
}, {
  component: 11,
  drawable: 112,
  texture: 9,
  name: "Атласная куртка Смерть"
}, {
  component: 11,
  drawable: 112,
  texture: 10,
  name: "Атласная куртка Молния"
}, {
  component: 11,
  drawable: 112,
  texture: 11,
  name: "Атласная куртка Grotti"
}, {
  component: 11,
  drawable: 112,
  texture: 12,
  name: "Атласная куртка Howizter"
}, {
  component: 11,
  drawable: 112,
  texture: 13,
  name: "Атласная куртка Imponte"
}, {
  component: 11,
  drawable: 112,
  texture: 14,
  name: "Атласная куртка Love Fist"
}, {
  component: 11,
  drawable: 112,
  texture: 15,
  name: "Атласная куртка Малибу"
}, {
  component: 11,
  drawable: 112,
  texture: 16,
  name: "Атласная куртка Nagasaki"
}, {
  component: 11,
  drawable: 112,
  texture: 17,
  name: "Атласная куртка Rebel Radio"
}, {
  component: 11,
  drawable: 112,
  texture: 18,
  name: "Атласная куртка Steel Horse"
}, {
  component: 11,
  drawable: 112,
  texture: 19,
  name: "Атласная куртка Me TV"
}, {
  component: 11,
  drawable: 112,
  texture: 20,
  name: "Атласная куртка Vice Squad"
}, {
  component: 11,
  drawable: 112,
  texture: 21,
  name: "Атласная куртка V-Rock"
}, {
  component: 11,
  drawable: 113,
  texture: 0,
  name: "Мотокуртка Ruiner"
}, {
  component: 11,
  drawable: 113,
  texture: 1,
  name: "Мотокуртка Banshee"
}, {
  component: 11,
  drawable: 113,
  texture: 2,
  name: "Мотокуртка Pigalle"
}, {
  component: 11,
  drawable: 113,
  texture: 3,
  name: "Мотокуртка Grotti"
}, {
  component: 11,
  drawable: 113,
  texture: 4,
  name: "Мотокуртка Pegassi"
}, {
  component: 11,
  drawable: 113,
  texture: 5,
  name: "Мотокуртка Pfister"
}, {
  component: 11,
  drawable: 113,
  texture: 6,
  name: "Мотокуртка Ocelot"
}, {
  component: 11,
  drawable: 113,
  texture: 7,
  name: "Мотокуртка Dinka"
}, {
  component: 11,
  drawable: 115,
  texture: 0,
  name: "Бурая с логотипом ДК"
}, {
  component: 11,
  drawable: 115,
  texture: 1,
  name: "Черная с логотипом ДК"
}, {
  component: 11,
  drawable: 115,
  texture: 2,
  name: "Серая с логотипом ДК"
}, {
  component: 11,
  drawable: 115,
  texture: 3,
  name: "Синяя с логотипом ДК"
}, {
  component: 11,
  drawable: 115,
  texture: 4,
  name: "Бежевая с логотипом ДК"
}, {
  component: 11,
  drawable: 115,
  texture: 5,
  name: "Бордовая с логотипом ДК"
}, {
  component: 1,
  drawable: 75,
  texture: 0,
  name: "Морское чудище-амфибия"
}, {
  component: 1,
  drawable: 75,
  texture: 1,
  name: "Морское чудище-чужой"
}, {
  component: 1,
  drawable: 75,
  texture: 2,
  name: "Морское чудище-рептилия"
}, {
  component: 1,
  drawable: 75,
  texture: 3,
  name: "Морское чудище-пришелец"
}, {
  component: 1,
  drawable: 75,
  texture: 4,
  name: "Морское чудище-божество"
}, {
  component: 1,
  drawable: 75,
  texture: 5,
  name: "Морское чудище-демон"
}, {
  component: 1,
  drawable: 76,
  texture: 0,
  name: "Полосатый динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 1,
  name: "Серый динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 2,
  name: "Тропический динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 3,
  name: "Земляной динозавр"
}, {
  component: 1,
  drawable: 76,
  texture: 4,
  name: "Динозавр из джунглей"
}, {
  component: 1,
  drawable: 76,
  texture: 5,
  name: "Опасный динозавр"
}, {
  component: 1,
  drawable: 77,
  texture: 0,
  name: "Красный Они"
}, {
  component: 1,
  drawable: 77,
  texture: 1,
  name: "Синий Они"
}, {
  component: 1,
  drawable: 77,
  texture: 2,
  name: "Белый Они"
}, {
  component: 1,
  drawable: 77,
  texture: 3,
  name: "Черный Они"
}, {
  component: 1,
  drawable: 77,
  texture: 4,
  name: "Золотой демон"
}, {
  component: 1,
  drawable: 78,
  texture: 0,
  name: "Красный клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 1,
  name: "Синий клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 2,
  name: "Зеленый клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 3,
  name: "Оранжевый клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 4,
  name: "Клоун-падальщик"
}, {
  component: 1,
  drawable: 78,
  texture: 5,
  name: "Неоновый клоун"
}, {
  component: 1,
  drawable: 78,
  texture: 6,
  name: "Клоун-франкенштейн"
}, {
  component: 1,
  drawable: 78,
  texture: 7,
  name: "Злобный клоун"
}, {
  component: 1,
  drawable: 79,
  texture: 0,
  name: "Безумная горилла"
}, {
  component: 1,
  drawable: 79,
  texture: 1,
  name: "Безумный орангутан"
}, {
  component: 1,
  drawable: 79,
  texture: 2,
  name: "Безумная серая обезьяна"
}, {
  component: 1,
  drawable: 79,
  texture: 3,
  name: "Безумный альбинос"
}, {
  component: 1,
  drawable: 80,
  texture: 0,
  name: "Гнедая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 1,
  name: "Вороная лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 2,
  name: "Серая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 3,
  name: "Бурая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 4,
  name: "Пегая лошадь"
}, {
  component: 1,
  drawable: 80,
  texture: 5,
  name: "Зебра"
}, {
  component: 1,
  drawable: 81,
  texture: 0,
  name: "Единорог"
}, {
  component: 1,
  drawable: 82,
  texture: 0,
  name: "Красный узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 1,
  name: "Серебряный узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 2,
  name: "Синий узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 3,
  name: "Бирюзовый узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 4,
  name: "Белый узорный череп"
}, {
  component: 1,
  drawable: 82,
  texture: 5,
  name: "Черный узорный череп"
}, {
  component: 1,
  drawable: 83,
  texture: 0,
  name: "Мопс Моу"
}, {
  component: 1,
  drawable: 83,
  texture: 1,
  name: "Черный мопс"
}, {
  component: 1,
  drawable: 83,
  texture: 2,
  name: "Серый мопс"
}, {
  component: 1,
  drawable: 83,
  texture: 3,
  name: "Коричневый мопс"
}, {
  component: 1,
  drawable: 83,
  texture: 4,
  name: "Мопс Жозефина"
}, {
  component: 1,
  drawable: 83,
  texture: 5,
  name: "Черно-бежевый мопс"
}, {
  component: 1,
  drawable: 84,
  texture: 0,
  name: "Оранжевая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 1,
  name: "Синяя маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 2,
  name: "Фиолетовая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 3,
  name: "Желтая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 4,
  name: "Осенняя маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 5,
  name: "Серая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 6,
  name: "Камуфляжная маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 7,
  name: "Серая камуфл. маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 8,
  name: "Коричневая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 9,
  name: "Черная маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 10,
  name: "Полосатая маска Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 11,
  name: "Яркая Bigness с рисунком"
}, {
  component: 1,
  drawable: 84,
  texture: 12,
  name: "Светлая Bigness с рисунком"
}, {
  component: 1,
  drawable: 84,
  texture: 13,
  name: "Серая Bigness с рисунком"
}, {
  component: 1,
  drawable: 84,
  texture: 14,
  name: "Серая леопардовая Bigness"
}, {
  component: 1,
  drawable: 84,
  texture: 15,
  name: "Синяя камуфляжная Bigness"
}, {
  component: 4,
  drawable: 54,
  texture: 0,
  name: "Коричневые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 54,
  texture: 1,
  name: "Камуфляжные штаны лоу-кротч"
}, {
  component: 4,
  drawable: 54,
  texture: 2,
  name: "Черные штаны лоу-кротч"
}, {
  component: 4,
  drawable: 54,
  texture: 3,
  name: "Голубые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 54,
  texture: 4,
  name: "Светло-серые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 54,
  texture: 5,
  name: "Серые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 54,
  texture: 6,
  name: "Штаны лоу-кротч с ромбами"
}, {
  component: 4,
  drawable: 54,
  texture: 7,
  name: "Лоу-кротч штаны в полоску"
}, {
  component: 4,
  drawable: 55,
  texture: 1,
  name: "Красные штаны лоу-кротч"
}, {
  component: 4,
  drawable: 55,
  texture: 2,
  name: "Белые штаны лоу-кротч"
}, {
  component: 4,
  drawable: 56,
  texture: 0,
  name: "Коричневые бриджи"
}, {
  component: 4,
  drawable: 56,
  texture: 1,
  name: "Камуфляжные бриджи"
}, {
  component: 4,
  drawable: 56,
  texture: 2,
  name: "Черные бриджи"
}, {
  component: 4,
  drawable: 56,
  texture: 3,
  name: "Голубые бриджи"
}, {
  component: 4,
  drawable: 56,
  texture: 4,
  name: "Светло-серые бриджи"
}, {
  component: 4,
  drawable: 56,
  texture: 5,
  name: "Серые бриджи"
}, {
  component: 4,
  drawable: 56,
  texture: 6,
  name: "Бриджи с ромбами"
}, {
  component: 4,
  drawable: 56,
  texture: 7,
  name: "Бриджи в полоску"
}, {
  component: 4,
  drawable: 57,
  texture: 1,
  name: "Красные бриджи"
}, {
  component: 4,
  drawable: 57,
  texture: 2,
  name: "Белые бриджи"
}, {
  component: 4,
  drawable: 58,
  texture: 0,
  name: "Синие лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 1,
  name: "Серо-синие лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 2,
  name: "Классические лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 3,
  name: "Серые лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 4,
  name: "Черные лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 5,
  name: "Потертые синие лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 6,
  name: "Потертые сизые лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 7,
  name: "Потертые строгие лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 8,
  name: "Потертые серые лоу-кротч"
}, {
  component: 4,
  drawable: 58,
  texture: 9,
  name: "Потертые черные лоу-кротч"
}, {
  component: 4,
  drawable: 59,
  texture: 1,
  name: "Красные лоу-кротч"
}, {
  component: 4,
  drawable: 59,
  texture: 2,
  name: "Белые лоу-кротч"
}, {
  component: 4,
  drawable: 59,
  texture: 3,
  name: "Коричневые лоу-кротч"
}, {
  component: 4,
  drawable: 61,
  texture: 0,
  name: "Ярко-серые камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 1,
  name: "Розовые камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 2,
  name: "Коричневые камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 3,
  name: "Красные камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 4,
  name: "Оранжевые камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 5,
  name: "Серые камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 6,
  name: "Зеленые камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 7,
  name: "Сине-серые камуфляжные"
}, {
  component: 4,
  drawable: 61,
  texture: 8,
  name: "Серые тигровые леггинсы"
}, {
  component: 4,
  drawable: 61,
  texture: 9,
  name: "Розовые тигровые леггинсы"
}, {
  component: 4,
  drawable: 61,
  texture: 10,
  name: "Голубые тигровые леггинсы"
}, {
  component: 4,
  drawable: 61,
  texture: 11,
  name: "Серые с редким камуфляжем"
}, {
  component: 4,
  drawable: 61,
  texture: 13,
  name: "Леггинсы в цветочек"
}, {
  component: 4,
  drawable: 61,
  texture: 14,
  name: "Леггинсы с бананами"
}, {
  component: 4,
  drawable: 61,
  texture: 15,
  name: "Леггинсы с апельсинами"
}, {
  component: 6,
  drawable: 42,
  texture: 0,
  name: "Персиковые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 1,
  name: "Фиолетовые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 2,
  name: "Бледно-голубые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 3,
  name: "Бронзовые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 4,
  name: "Жемчужные кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 5,
  name: "Медные кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 6,
  name: "Серебряные кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 7,
  name: "Зеленые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 8,
  name: "Вишневые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 9,
  name: "Белые кеды"
}, {
  component: 6,
  drawable: 42,
  texture: 11,
  name: "Розовые кеды"
}, {
  component: 8,
  drawable: 81,
  texture: 0,
  name: "Bigness Камо (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 1,
  name: "Зебра (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 2,
  name: "Зеленая Squash (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 3,
  name: "Леопардовая (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 4,
  name: "GoPostal (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 5,
  name: "Manor (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 6,
  name: "Разноцветная (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 7,
  name: "Squash (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 8,
  name: "Яркая Squash (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 9,
  name: "Красная Güffy (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 10,
  name: "Желтая Güffy (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 11,
  name: "OJ (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 12,
  name: "Blue Sky (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 13,
  name: "Яркая Güffy (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 14,
  name: "С кляксами (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 15,
  name: "Geo Bigness (подвернутая)"
}, {
  component: 8,
  drawable: 81,
  texture: 16,
  name: "Sand Castle (подвернутая)"
}, {
  component: 10,
  drawable: 15,
  texture: 0,
  name: "Задняя эмблема банды"
}, {
  component: 11,
  drawable: 117,
  texture: 0,
  name: "Черная Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 1,
  name: "Серо-синяя Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 2,
  name: "Серая Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 3,
  name: "Пепельная Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 4,
  name: "Белая Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 5,
  name: "Красная Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 6,
  name: "Темно-красная Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 7,
  name: "Персиковая Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 8,
  name: "Охровая Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 9,
  name: "Лаймовая Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 11,
  name: "Шоколадная Longline"
}, {
  component: 11,
  drawable: 117,
  texture: 12,
  name: "Оливковая Longline"
}, {
  component: 11,
  drawable: 118,
  texture: 0,
  name: "Персиковая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 1,
  name: "Красная парка"
}, {
  component: 11,
  drawable: 118,
  texture: 2,
  name: "Коричневая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 3,
  name: "Лаймовая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 4,
  name: "Сине-зеленая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 5,
  name: "Мандариновая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 6,
  name: "Серая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 7,
  name: "Зеленая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 8,
  name: "Пятнистая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 9,
  name: "Охровая парка"
}, {
  component: 11,
  drawable: 118,
  texture: 10,
  name: "Синяя парка"
}, {
  component: 11,
  drawable: 119,
  texture: 0,
  name: "Персиковая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 1,
  name: "Красная расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 2,
  name: "Коричневая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 3,
  name: "Лаймовая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 4,
  name: "Сине-зеленая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 5,
  name: "Мандариновая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 6,
  name: "Серая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 7,
  name: "Зеленая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 8,
  name: "Пятнистая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 9,
  name: "Охровая расстегнутая"
}, {
  component: 11,
  drawable: 119,
  texture: 10,
  name: "Синяя расстегнутая"
}, {
  component: 11,
  drawable: 120,
  texture: 0,
  name: "Серый Sand Castle"
}, {
  component: 11,
  drawable: 120,
  texture: 1,
  name: "Красный Sand Castle"
}, {
  component: 11,
  drawable: 120,
  texture: 2,
  name: "Голубой Sand Castle"
}, {
  component: 11,
  drawable: 120,
  texture: 3,
  name: "Желтый Sand Castle"
}, {
  component: 11,
  drawable: 120,
  texture: 4,
  name: "Камуфляжный Sand Castle"
}, {
  component: 11,
  drawable: 120,
  texture: 5,
  name: "Цветной Sand Castle"
}, {
  component: 11,
  drawable: 120,
  texture: 6,
  name: "Свитер Fruit Squash"
}, {
  component: 11,
  drawable: 120,
  texture: 7,
  name: "Свитер Squash"
}, {
  component: 11,
  drawable: 120,
  texture: 8,
  name: "Cвитер Squash с кляксами"
}, {
  component: 11,
  drawable: 120,
  texture: 9,
  name: "Свитер Squash Банан"
}, {
  component: 11,
  drawable: 120,
  texture: 10,
  name: "Свитер Squash Апельсин"
}, {
  component: 11,
  drawable: 120,
  texture: 11,
  name: "Синий свитер Squash"
}, {
  component: 11,
  drawable: 120,
  texture: 12,
  name: "Мятный свитер Squash"
}, {
  component: 11,
  drawable: 120,
  texture: 13,
  name: "Зеленый свитер Squash"
}, {
  component: 11,
  drawable: 120,
  texture: 14,
  name: "Оригинальный свитер Güffy"
}, {
  component: 11,
  drawable: 120,
  texture: 15,
  name: "Яркий свитер Güffy"
}, {
  component: 11,
  drawable: 120,
  texture: 16,
  name: "Güffy Бирюзовый леопард"
}, {
  component: 11,
  drawable: 120,
  texture: 17,
  name: "Güffy Фиолетовый леопард"
}, {
  component: 11,
  drawable: 120,
  texture: 18,
  name: "Скромный свитер G Güffy"
}, {
  component: 11,
  drawable: 120,
  texture: 19,
  name: "Свитер G Güffy Граффити"
}, {
  component: 11,
  drawable: 120,
  texture: 20,
  name: "Разноцветный свитер Manor"
}, {
  component: 11,
  drawable: 120,
  texture: 21,
  name: "Алмазный свитер Manor"
}, {
  component: 11,
  drawable: 120,
  texture: 22,
  name: "Ярко-голубой свитер Manor"
}, {
  component: 11,
  drawable: 120,
  texture: 23,
  name: "Фиолетовый свитер Manor"
}, {
  component: 11,
  drawable: 120,
  texture: 24,
  name: "Черный свитер Manor Brick"
}, {
  component: 11,
  drawable: 120,
  texture: 25,
  name: "Черный свитер Manor Dem"
}, {
  component: 11,
  drawable: 121,
  texture: 0,
  name: "Зеленый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 121,
  texture: 1,
  name: "Серый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 121,
  texture: 2,
  name: "Розовый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 121,
  texture: 3,
  name: "Белый Bigness (камуфляж)"
}, {
  component: 11,
  drawable: 121,
  texture: 4,
  name: "Осенний пуховик Bigness"
}, {
  component: 11,
  drawable: 121,
  texture: 5,
  name: "Bigness Серый леопард"
}, {
  component: 11,
  drawable: 121,
  texture: 6,
  name: "Bigness Бирюзовый леопард"
}, {
  component: 11,
  drawable: 121,
  texture: 7,
  name: "Черный пуховик Bigness"
}, {
  component: 11,
  drawable: 121,
  texture: 8,
  name: "Желтый пуховик Bigness"
}, {
  component: 11,
  drawable: 121,
  texture: 9,
  name: "Красный пуховик Bigness"
}, {
  component: 11,
  drawable: 121,
  texture: 10,
  name: "Розовый пуховик Bigness"
}, {
  component: 11,
  drawable: 121,
  texture: 11,
  name: "Пурпурный пуховик Bigness"
}, {
  component: 11,
  drawable: 121,
  texture: 12,
  name: "Пуховик Bigness с узором"
}, {
  component: 11,
  drawable: 121,
  texture: 14,
  name: "Полосатый пуховик Bigness"
}, {
  component: 11,
  drawable: 121,
  texture: 15,
  name: "Bigness Красная зебра"
}, {
  component: 11,
  drawable: 121,
  texture: 16,
  name: "Черный пуховик Güffy"
}, {
  component: 11,
  drawable: 121,
  texture: 17,
  name: "Красный пуховик Güffy"
}, {
  component: 11,
  drawable: 121,
  texture: 18,
  name: "Темно-красный пуховик Güffy"
}, {
  component: 11,
  drawable: 121,
  texture: 19,
  name: "Темно-синий пуховик Güffy"
}, {
  component: 11,
  drawable: 121,
  texture: 20,
  name: "Стилизованный пуховик Güffy"
}, {
  component: 11,
  drawable: 121,
  texture: 21,
  name: "Пуховик G Güffy"
}, {
  component: 11,
  drawable: 121,
  texture: 22,
  name: "Пуховик Güffy с флорой"
}, {
  component: 11,
  drawable: 121,
  texture: 23,
  name: "Пуховик Güffy с листьями"
}, {
  component: 11,
  drawable: 121,
  texture: 25,
  name: "Синий пуховик Güffy"
}, {
  component: 11,
  drawable: 122,
  texture: 0,
  name: "Пепельное пальто"
}, {
  component: 11,
  drawable: 122,
  texture: 1,
  name: "Зеленое камуфляжное пальто"
}, {
  component: 11,
  drawable: 122,
  texture: 2,
  name: "Осеннее камуфляжное пальто"
}, {
  component: 11,
  drawable: 122,
  texture: 3,
  name: "Серое камуфляжное пальто"
}, {
  component: 11,
  drawable: 122,
  texture: 4,
  name: "Пальто с узором"
}, {
  component: 11,
  drawable: 122,
  texture: 6,
  name: "Красное пальто в клетку"
}, {
  component: 11,
  drawable: 122,
  texture: 7,
  name: "Коричневое пальто в клетку"
}, {
  component: 11,
  drawable: 122,
  texture: 8,
  name: "Зеленое пальто в клетку"
}, {
  component: 11,
  drawable: 122,
  texture: 9,
  name: "Серое пальто в клетку"
}, {
  component: 11,
  drawable: 122,
  texture: 10,
  name: "Красное пальто"
}, {
  component: 11,
  drawable: 122,
  texture: 11,
  name: "Темно-красное пальто"
}, {
  component: 11,
  drawable: 123,
  texture: 0,
  name: "Рваная Güffy (разводы)"
}, {
  component: 11,
  drawable: 123,
  texture: 1,
  name: "Рваная скейтерская Güffy"
}, {
  component: 11,
  drawable: 123,
  texture: 2,
  name: "Рваная леопардовая"
}, {
  component: 11,
  drawable: 123,
  texture: 3,
  name: "Рваная неоновая Manor"
}, {
  component: 11,
  drawable: 123,
  texture: 4,
  name: "Рваная белая Güffy"
}, {
  component: 11,
  drawable: 123,
  texture: 5,
  name: "Рваная Bigness с рисунком"
}, {
  component: 11,
  drawable: 123,
  texture: 6,
  name: "Рваная черная G Güffy"
}, {
  component: 11,
  drawable: 123,
  texture: 7,
  name: "Рваная черно-неоновая Güffy"
}, {
  component: 11,
  drawable: 123,
  texture: 8,
  name: "Рваная черная Sand Castle"
}, {
  component: 11,
  drawable: 123,
  texture: 9,
  name: "Рваная белая Sand Castle"
}, {
  component: 11,
  drawable: 123,
  texture: 10,
  name: "Рваная разноцветная Manor"
}, {
  component: 11,
  drawable: 123,
  texture: 11,
  name: "Рваная Güffy с узором"
}, {
  component: 11,
  drawable: 123,
  texture: 12,
  name: "Рваная белая Bigness"
}, {
  component: 11,
  drawable: 123,
  texture: 13,
  name: "Рваная Bigness"
}, {
  component: 11,
  drawable: 123,
  texture: 14,
  name: "Рваная Güffy с листьями"
}, {
  component: 11,
  drawable: 123,
  texture: 15,
  name: "Рваная черно-белая Güffy"
}, {
  component: 11,
  drawable: 123,
  texture: 16,
  name: "Рваная розовая Güffy"
}, {
  component: 11,
  drawable: 123,
  texture: 17,
  name: "Рваная леопардовая Güffy"
}, {
  component: 11,
  drawable: 123,
  texture: 18,
  name: "Рваная GoPostal"
}, {
  component: 11,
  drawable: 123,
  texture: 19,
  name: "Рваная Squash"
}, {
  component: 11,
  drawable: 123,
  texture: 20,
  name: "Рваная Squash с фруктами"
}, {
  component: 11,
  drawable: 123,
  texture: 21,
  name: "Рваная желтая Squash"
}, {
  component: 11,
  drawable: 123,
  texture: 22,
  name: "Рваная оранжевая Squash"
}, {
  component: 11,
  drawable: 123,
  texture: 23,
  name: "Рваная с кляксами Squash"
}, {
  component: 11,
  drawable: 123,
  texture: 25,
  name: "Рваная бежевая Squash"
}, {
  component: 11,
  drawable: 124,
  texture: 0,
  name: "Светящийся Санта"
}, {
  component: 11,
  drawable: 124,
  texture: 1,
  name: "Светящийся Эльф"
}, {
  component: 11,
  drawable: 124,
  texture: 2,
  name: "Светящийся Пудинг"
}, {
  component: 11,
  drawable: 125,
  texture: 0,
  name: "Украшенный свитер с Сантой"
}, {
  component: 11,
  drawable: 125,
  texture: 1,
  name: "Украшенный свитер с эльфом"
}, {
  component: 11,
  drawable: 125,
  texture: 2,
  name: "Украшенный свитер с пудингом"
}, {
  component: 11,
  drawable: 126,
  texture: 0,
  name: "Серый светящийся Exsorbeo"
}, {
  component: 11,
  drawable: 126,
  texture: 1,
  name: "Черный светящийся Exsorbeo"
}, {
  component: 11,
  drawable: 126,
  texture: 2,
  name: "Чудовищный светящийся свитер"
}, {
  component: 11,
  drawable: 126,
  texture: 3,
  name: "Светящийся Snowman"
}, {
  component: 11,
  drawable: 126,
  texture: 4,
  name: "Охровый светящийся с оленем"
}, {
  component: 11,
  drawable: 126,
  texture: 5,
  name: "Красный светящийся с оленем"
}, {
  component: 11,
  drawable: 126,
  texture: 6,
  name: "Светящийся Naughty!"
}, {
  component: 11,
  drawable: 126,
  texture: 7,
  name: "Вязаный светящийся Naughty!"
}, {
  component: 11,
  drawable: 126,
  texture: 8,
  name: "Светящийся Holidays"
}, {
  component: 11,
  drawable: 126,
  texture: 9,
  name: "Светящийся Holidays с елкой"
}, {
  component: 11,
  drawable: 126,
  texture: 10,
  name: "Красный светящийся Love Fist"
}, {
  component: 11,
  drawable: 126,
  texture: 11,
  name: "Черный светящийся Love Fist"
}, {
  component: 11,
  drawable: 126,
  texture: 12,
  name: "Красный светящийся с елками"
}, {
  component: 11,
  drawable: 126,
  texture: 13,
  name: "Зеленый светящийся с елками"
}, {
  component: 11,
  drawable: 126,
  texture: 14,
  name: "Красный светящийся с котами"
}, {
  component: 11,
  drawable: 126,
  texture: 15,
  name: "Зеленый светящийся с котами"
}, {
  component: 11,
  drawable: 127,
  texture: 0,
  name: "Серый Exsorbeo"
}, {
  component: 11,
  drawable: 127,
  texture: 1,
  name: "Черный Exsorbeo"
}, {
  component: 11,
  drawable: 127,
  texture: 2,
  name: "Жуткий праздничный свитер"
}, {
  component: 11,
  drawable: 127,
  texture: 3,
  name: "Нарядный со снеговиком"
}, {
  component: 11,
  drawable: 127,
  texture: 4,
  name: "Свитер с оленем"
}, {
  component: 11,
  drawable: 127,
  texture: 5,
  name: "Красный с оленем"
}, {
  component: 11,
  drawable: 127,
  texture: 6,
  name: "Праздничный свитер Naughty!"
}, {
  component: 11,
  drawable: 127,
  texture: 7,
  name: "Праздничный вязаный Naughty!"
}, {
  component: 11,
  drawable: 127,
  texture: 8,
  name: "Нарядный свитер Holidays"
}, {
  component: 11,
  drawable: 127,
  texture: 9,
  name: "Нарядный Holidays с елкой"
}, {
  component: 11,
  drawable: 127,
  texture: 10,
  name: "Красный Love Fist"
}, {
  component: 11,
  drawable: 127,
  texture: 11,
  name: "Черный Love Fist"
}, {
  component: 11,
  drawable: 127,
  texture: 12,
  name: "Красный с деревьями"
}, {
  component: 11,
  drawable: 127,
  texture: 13,
  name: "Зеленый нарядный с елками"
}, {
  component: 11,
  drawable: 127,
  texture: 14,
  name: "Красный с кошками"
}, {
  component: 11,
  drawable: 127,
  texture: 15,
  name: "Зеленый с кошками"
}, {
  component: 11,
  drawable: 128,
  texture: 0,
  name: "Синий светящийся с елками"
}, {
  component: 11,
  drawable: 128,
  texture: 2,
  name: "Серый светящийся с оленем"
}, {
  component: 11,
  drawable: 128,
  texture: 3,
  name: "Светящийся Noel"
}, {
  component: 11,
  drawable: 128,
  texture: 4,
  name: "Серый светящийся с елками"
}, {
  component: 11,
  drawable: 128,
  texture: 5,
  name: "Светящийся Праздничный"
}, {
  component: 11,
  drawable: 128,
  texture: 6,
  name: "Красный светящийся с узором"
}, {
  component: 11,
  drawable: 128,
  texture: 7,
  name: "Зеленый светящийся с узором"
}, {
  component: 11,
  drawable: 129,
  texture: 0,
  name: "Синий с деревьями"
}, {
  component: 11,
  drawable: 129,
  texture: 1,
  name: "Красный шерстяной с оленями"
}, {
  component: 11,
  drawable: 129,
  texture: 2,
  name: "Серый шерстяной с оленями"
}, {
  component: 11,
  drawable: 129,
  texture: 3,
  name: "Шерстяной свитер Noel"
}, {
  component: 11,
  drawable: 129,
  texture: 4,
  name: "Серый с деревьями"
}, {
  component: 11,
  drawable: 129,
  texture: 5,
  name: "Шерстяной Праздничный"
}, {
  component: 11,
  drawable: 129,
  texture: 6,
  name: "Красный с узором"
}, {
  component: 11,
  drawable: 129,
  texture: 7,
  name: "Зеленый с узором"
}, {
  component: 11,
  drawable: 130,
  texture: 0,
  name: "Оранжевая Squash"
}, {
  component: 11,
  drawable: 130,
  texture: 1,
  name: "Squash с кляксами"
}, {
  component: 11,
  drawable: 130,
  texture: 2,
  name: "Черная Blagueurs"
}, {
  component: 11,
  drawable: 130,
  texture: 3,
  name: "Зеленая Blagueurs"
}, {
  component: 11,
  drawable: 130,
  texture: 4,
  name: "Разноцветная Squash"
}, {
  component: 11,
  drawable: 130,
  texture: 5,
  name: "Темно-синяя Güffy"
}, {
  component: 11,
  drawable: 130,
  texture: 6,
  name: "Зеленая Güffy"
}, {
  component: 11,
  drawable: 130,
  texture: 7,
  name: "Белая толстовка Güffy"
}, {
  component: 11,
  drawable: 130,
  texture: 8,
  name: "Фиолетовая Güffy"
}, {
  component: 11,
  drawable: 130,
  texture: 10,
  name: "Камуфляжная Bigness"
}, {
  component: 11,
  drawable: 130,
  texture: 11,
  name: "Светло-серая Bigness"
}, {
  component: 11,
  drawable: 130,
  texture: 12,
  name: "Красная камуфляжная Bigness"
}, {
  component: 11,
  drawable: 130,
  texture: 13,
  name: "Разноцветная Bigness"
}, {
  component: 11,
  drawable: 130,
  texture: 14,
  name: "Черная Bigness"
}, {
  component: 11,
  drawable: 130,
  texture: 15,
  name: "Оранжевая Sand Castle"
}, {
  component: 11,
  drawable: 130,
  texture: 16,
  name: "Серая Güffy"
}, {
  component: 11,
  drawable: 130,
  texture: 17,
  name: "Güffy с заплатами"
}, {
  component: 11,
  drawable: 130,
  texture: 18,
  name: "Белая Squash"
}, {
  component: 11,
  drawable: 130,
  texture: 19,
  name: "Красная Squash"
}, {
  component: 11,
  drawable: 130,
  texture: 20,
  name: "Коричневая Blagueurs"
}, {
  component: 11,
  drawable: 130,
  texture: 21,
  name: "Лиловая камуфляжная Bigness"
}, {
  component: 11,
  drawable: 130,
  texture: 22,
  name: "Светло-серая Manor"
}, {
  component: 11,
  drawable: 130,
  texture: 23,
  name: "Бежевая Manor"
}, {
  component: 11,
  drawable: 130,
  texture: 24,
  name: "Черная Manor"
}, {
  component: 11,
  drawable: 130,
  texture: 25,
  name: "Белая Manor"
}, {
  component: 11,
  drawable: 132,
  texture: 0,
  name: "Черная без рукавов"
}, {
  component: 11,
  drawable: 132,
  texture: 1,
  name: "Темно-серая без рукавов"
}, {
  component: 11,
  drawable: 132,
  texture: 2,
  name: "Серая без рукавов"
}, {
  component: 11,
  drawable: 132,
  texture: 3,
  name: "Пепельная без рукавов"
}, {
  component: 11,
  drawable: 132,
  texture: 4,
  name: "Зеленая без рукавов"
}, {
  component: 1,
  drawable: 86,
  texture: 0,
  name: "Бордовая маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 1,
  name: "Бурая маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 2,
  name: "Черная маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 3,
  name: "Бежевая маска с прорезями"
}, {
  component: 1,
  drawable: 86,
  texture: 4,
  name: "Бордовая маска с фильтром"
}, {
  component: 1,
  drawable: 86,
  texture: 5,
  name: "Бурая маска с фильтром"
}, {
  component: 1,
  drawable: 86,
  texture: 6,
  name: "Черная маска с фильтром"
}, {
  component: 1,
  drawable: 86,
  texture: 7,
  name: "Бежевая маска с фильтром"
}, {
  component: 4,
  drawable: 63,
  texture: 0,
  name: "Грязные джинсы со стретчем"
}, {
  component: 4,
  drawable: 63,
  texture: 1,
  name: "Черные джинсы со стретчем"
}, {
  component: 4,
  drawable: 63,
  texture: 2,
  name: "Темно-синие со стретчем"
}, {
  component: 4,
  drawable: 63,
  texture: 3,
  name: "Вареные джинсы со стретчем"
}, {
  component: 4,
  drawable: 63,
  texture: 4,
  name: "Старые джинсы со стретчем"
}, {
  component: 4,
  drawable: 63,
  texture: 5,
  name: "Блеклые джинсы со стретчем"
}, {
  component: 4,
  drawable: 64,
  texture: 0,
  name: "Грязные драные джинсы"
}, {
  component: 4,
  drawable: 64,
  texture: 1,
  name: "Черные драные джинсы"
}, {
  component: 4,
  drawable: 64,
  texture: 2,
  name: "Темно-синие драные джинсы"
}, {
  component: 4,
  drawable: 64,
  texture: 3,
  name: "Вареные драные джинсы"
}, {
  component: 4,
  drawable: 64,
  texture: 4,
  name: "Винтажные драные джинсы"
}, {
  component: 4,
  drawable: 64,
  texture: 5,
  name: "Застиранные драные джинсы"
}, {
  component: 4,
  drawable: 65,
  texture: 0,
  name: "Черные простые штаны"
}, {
  component: 4,
  drawable: 65,
  texture: 1,
  name: "Коричневые простые штаны"
}, {
  component: 4,
  drawable: 65,
  texture: 2,
  name: "Красные простые штаны"
}, {
  component: 4,
  drawable: 66,
  texture: 0,
  name: "Черные прошитые штаны"
}, {
  component: 4,
  drawable: 66,
  texture: 1,
  name: "Кофейные прошитые штаны"
}, {
  component: 4,
  drawable: 66,
  texture: 2,
  name: "Красные прошитые штаны"
}, {
  component: 4,
  drawable: 67,
  texture: 0,
  name: "Черные штаны со стретчем"
}, {
  component: 4,
  drawable: 67,
  texture: 1,
  name: "Кофейные штаны со стретчем"
}, {
  component: 4,
  drawable: 67,
  texture: 2,
  name: "Красные штаны со стретчем"
}, {
  component: 4,
  drawable: 68,
  texture: 0,
  name: "Бриджи индиго с чулками"
}, {
  component: 4,
  drawable: 68,
  texture: 1,
  name: "Серо-синие бриджи с чулками"
}, {
  component: 4,
  drawable: 68,
  texture: 2,
  name: "Черные бриджи с чулками"
}, {
  component: 4,
  drawable: 68,
  texture: 3,
  name: "Пепельные бриджи с чулками"
}, {
  component: 6,
  drawable: 44,
  texture: 0,
  name: "Черные застегнутые ботинки"
}, {
  component: 6,
  drawable: 44,
  texture: 1,
  name: "Бордовые застегнутые"
}, {
  component: 6,
  drawable: 44,
  texture: 2,
  name: "Бурые застегнутые ботинки"
}, {
  component: 6,
  drawable: 44,
  texture: 3,
  name: "Старые черные застегнутые"
}, {
  component: 6,
  drawable: 44,
  texture: 4,
  name: "Старые бордовые застегнутые"
}, {
  component: 6,
  drawable: 44,
  texture: 5,
  name: "Старые бурые застегнутые"
}, {
  component: 6,
  drawable: 46,
  texture: 0,
  name: "Бежевые ботинки со сбруей"
}, {
  component: 6,
  drawable: 46,
  texture: 1,
  name: "Черные ботинки со сбруей"
}, {
  component: 6,
  drawable: 47,
  texture: 0,
  name: "Черные расстегнутые"
}, {
  component: 6,
  drawable: 47,
  texture: 1,
  name: "Бордовые расстегнутые"
}, {
  component: 6,
  drawable: 47,
  texture: 2,
  name: "Бурые расстегнутые ботинки"
}, {
  component: 6,
  drawable: 47,
  texture: 3,
  name: "Старые черные ботинки"
}, {
  component: 6,
  drawable: 47,
  texture: 4,
  name: "Старые бордовые ботинки"
}, {
  component: 6,
  drawable: 47,
  texture: 5,
  name: "Старые бурые ботинки"
}, {
  component: 6,
  drawable: 49,
  texture: 0,
  name: "Черные байкерские сапоги"
}, {
  component: 6,
  drawable: 49,
  texture: 1,
  name: "Бордовые байкерские сапоги"
}, {
  component: 6,
  drawable: 49,
  texture: 2,
  name: "Бежевые байкерские сапоги"
}, {
  component: 8,
  drawable: 93,
  texture: 25,
  name: "Бежевая футболка"
}, {
  component: 8,
  drawable: 94,
  texture: 0,
  name: "Футболка цвета хаки"
}, {
  component: 8,
  drawable: 108,
  texture: 0,
  name: "Темно-синяя рубашка"
}, {
  component: 8,
  drawable: 108,
  texture: 1,
  name: "Красная рубашка"
}, {
  component: 8,
  drawable: 109,
  texture: 0,
  name: "Кремовый с белой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 1,
  name: "Кремовый с серой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 2,
  name: "Кремовый с синей рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 3,
  name: "Кремовый с рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 4,
  name: "Красный с белой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 5,
  name: "Красный с серой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 6,
  name: "Красный с синей рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 7,
  name: "Красный с рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 8,
  name: "Синий с белой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 9,
  name: "Синий с серой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 10,
  name: "Синий с рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 11,
  name: "Синий с красной рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 12,
  name: "Голубой с белой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 13,
  name: "Голубой с серой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 14,
  name: "Голубой с синей рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 15,
  name: "Голубой с красной рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 16,
  name: "Черный с белой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 17,
  name: "Черный с рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 18,
  name: "Черный с синей рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 19,
  name: "Черный с красной рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 20,
  name: "Белый с рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 21,
  name: "Белый с серой рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 22,
  name: "Белый с синей рубашкой"
}, {
  component: 8,
  drawable: 109,
  texture: 23,
  name: "Белый с красной рубашкой"
}, {
  component: 8,
  drawable: 110,
  texture: 0,
  name: "Кремовый с белой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 1,
  name: "Кремовый с серой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 2,
  name: "Кремовый с синей битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 3,
  name: "Кремовый с битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 4,
  name: "Красный с белой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 5,
  name: "Красный с серой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 6,
  name: "Красный с синей битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 7,
  name: "Красный с битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 8,
  name: "Синий с белой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 9,
  name: "Синий с серой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 10,
  name: "Синий с битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 11,
  name: "Синий с красной битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 12,
  name: "Голубой с белой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 13,
  name: "Голубой с серой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 14,
  name: "Голубой с синей битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 15,
  name: "Голубой с красной битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 16,
  name: "Черный с белой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 17,
  name: "Черный с битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 18,
  name: "Черный с синей битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 19,
  name: "Черный с красной битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 20,
  name: "Белый с битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 21,
  name: "Белый с серой битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 22,
  name: "Белый с синей битловкой"
}, {
  component: 8,
  drawable: 110,
  texture: 23,
  name: "Белый с красной битловкой"
}, {
  component: 10,
  drawable: 18,
  texture: 0,
  name: "Черная толстовка SH"
}, {
  component: 10,
  drawable: 18,
  texture: 1,
  name: "Белая толстовка SH"
}, {
  component: 10,
  drawable: 18,
  texture: 2,
  name: "Черная толстовка Western"
}, {
  component: 10,
  drawable: 18,
  texture: 3,
  name: "Белая толстовка Western"
}, {
  component: 10,
  drawable: 18,
  texture: 4,
  name: "Белая толстовка Nagasaki"
}, {
  component: 10,
  drawable: 18,
  texture: 5,
  name: "Красно-белая Nagasaki"
}, {
  component: 10,
  drawable: 18,
  texture: 6,
  name: "Черная толстовка Nagasaki"
}, {
  component: 10,
  drawable: 18,
  texture: 7,
  name: "Черная Purple Helmets"
}, {
  component: 10,
  drawable: 18,
  texture: 8,
  name: "Черная толстовка Principe"
}, {
  component: 10,
  drawable: 37,
  texture: 0,
  name: "Маленькая эмблема банды"
}, {
  component: 11,
  drawable: 138,
  texture: 1,
  name: "Потертый черный жилет"
}, {
  component: 11,
  drawable: 138,
  texture: 2,
  name: "Бурый кожаный жилет"
}, {
  component: 11,
  drawable: 138,
  texture: 3,
  name: "Бордовый кожаный жилет"
}, {
  component: 11,
  drawable: 139,
  texture: 0,
  name: "Черный жилет с защитой"
}, {
  component: 11,
  drawable: 139,
  texture: 1,
  name: "Потертый жилет с защитой"
}, {
  component: 11,
  drawable: 139,
  texture: 2,
  name: "Двухцветный жилет с защитой"
}, {
  component: 11,
  drawable: 140,
  texture: 0,
  name: "Черный приталенный жилет"
}, {
  component: 11,
  drawable: 140,
  texture: 1,
  name: "Потертый приталенный жилет"
}, {
  component: 11,
  drawable: 141,
  texture: 0,
  name: "Черный простой жилет"
}, {
  component: 11,
  drawable: 141,
  texture: 1,
  name: "Коричневый простой жилет"
}, {
  component: 11,
  drawable: 142,
  texture: 0,
  name: "Черная потертая косуха"
}, {
  component: 11,
  drawable: 142,
  texture: 1,
  name: "Бордовая потертая косуха"
}, {
  component: 11,
  drawable: 142,
  texture: 2,
  name: "Бурая косуха"
}, {
  component: 11,
  drawable: 142,
  texture: 3,
  name: "Черная новая косуха"
}, {
  component: 11,
  drawable: 143,
  texture: 0,
  name: "Старый жилет-косуха"
}, {
  component: 11,
  drawable: 143,
  texture: 1,
  name: "Бордовый жилет-косуха"
}, {
  component: 11,
  drawable: 143,
  texture: 2,
  name: "Бурый жилет-косуха"
}, {
  component: 11,
  drawable: 143,
  texture: 3,
  name: "Черный жилет-косуха"
}, {
  component: 11,
  drawable: 144,
  texture: 0,
  name: "Приталенная куртка"
}, {
  component: 11,
  drawable: 145,
  texture: 0,
  name: "Кожаная футболка с каймой"
}, {
  component: 11,
  drawable: 145,
  texture: 1,
  name: "Черная кожаная футболка"
}, {
  component: 11,
  drawable: 145,
  texture: 2,
  name: "Серая кожаная футболка"
}, {
  component: 11,
  drawable: 146,
  texture: 0,
  name: "Цифровая для спортбайка"
}, {
  component: 11,
  drawable: 146,
  texture: 1,
  name: "Черная для спортбайка"
}, {
  component: 11,
  drawable: 146,
  texture: 2,
  name: "Камуфляжная для спортбайка"
}, {
  component: 11,
  drawable: 146,
  texture: 3,
  name: "Синяя для спортбайка"
}, {
  component: 11,
  drawable: 146,
  texture: 4,
  name: "Красная для спортбайка"
}, {
  component: 11,
  drawable: 146,
  texture: 5,
  name: "Зеленая для спортбайка"
}, {
  component: 11,
  drawable: 146,
  texture: 6,
  name: "Желтая для спортбайка"
}, {
  component: 11,
  drawable: 147,
  texture: 0,
  name: "Черная ребристая куртка"
}, {
  component: 11,
  drawable: 147,
  texture: 1,
  name: "Бордовая ребристая куртка"
}, {
  component: 11,
  drawable: 147,
  texture: 2,
  name: "Бурая ребристая куртка"
}, {
  component: 11,
  drawable: 147,
  texture: 3,
  name: "Старая черная ребристая"
}, {
  component: 11,
  drawable: 147,
  texture: 4,
  name: "Старая бордовая ребристая"
}, {
  component: 11,
  drawable: 147,
  texture: 5,
  name: "Старая бурая ребристая"
}, {
  component: 11,
  drawable: 148,
  texture: 0,
  name: "Красный пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 1,
  name: "Темно-красный пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 2,
  name: "Синий пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 3,
  name: "Черный пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 4,
  name: "Темно-зеленый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 5,
  name: "Горчичный пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 6,
  name: "Коричневый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 7,
  name: "Серый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 8,
  name: "Сиреневый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 9,
  name: "Оливковый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 10,
  name: "Фиолетовый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 11,
  name: "Бежевый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 12,
  name: "Оранжевый пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 13,
  name: "Голубой пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 14,
  name: "Белоснежный пуховик"
}, {
  component: 11,
  drawable: 148,
  texture: 15,
  name: "Зеленый пуховик"
}, {
  component: 11,
  drawable: 149,
  texture: 0,
  name: "Бурая кожаная толстовка"
}, {
  component: 11,
  drawable: 149,
  texture: 1,
  name: "Черная кожаная толстовка"
}, {
  component: 11,
  drawable: 149,
  texture: 2,
  name: "Серая кожаная толстовка"
}, {
  component: 11,
  drawable: 150,
  texture: 0,
  name: "Винтажная джинсовка"
}, {
  component: 11,
  drawable: 150,
  texture: 1,
  name: "Джинсовка индиго"
}, {
  component: 11,
  drawable: 150,
  texture: 2,
  name: "Застиранная джинсовка"
}, {
  component: 11,
  drawable: 150,
  texture: 3,
  name: "Черная джинсовка"
}, {
  component: 11,
  drawable: 151,
  texture: 0,
  name: "Винтажный джинсовый"
}, {
  component: 11,
  drawable: 151,
  texture: 1,
  name: "Синий джинсовый"
}, {
  component: 11,
  drawable: 151,
  texture: 2,
  name: "Блеклый джинсовый"
}, {
  component: 11,
  drawable: 151,
  texture: 3,
  name: "Черный джинсовый"
}, {
  component: 11,
  drawable: 152,
  texture: 0,
  name: "Черная рваная майка"
}, {
  component: 11,
  drawable: 152,
  texture: 1,
  name: "Серая рваная майка"
}, {
  component: 11,
  drawable: 152,
  texture: 2,
  name: "Бордовая рваная майка"
}, {
  component: 11,
  drawable: 152,
  texture: 3,
  name: "Белая рваная майка"
}, {
  component: 11,
  drawable: 152,
  texture: 4,
  name: "Коричневая рваная майка"
}, {
  component: 11,
  drawable: 152,
  texture: 5,
  name: "Камуфляжная рваная майка"
}, {
  component: 11,
  drawable: 153,
  texture: 0,
  name: "Черная рваная футболка"
}, {
  component: 11,
  drawable: 153,
  texture: 1,
  name: "Серая рваная футболка"
}, {
  component: 11,
  drawable: 153,
  texture: 2,
  name: "Бордовая рваная футболка"
}, {
  component: 11,
  drawable: 153,
  texture: 3,
  name: "Белая рваная футболка"
}, {
  component: 11,
  drawable: 153,
  texture: 4,
  name: "Коричневая рваная футболка"
}, {
  component: 11,
  drawable: 153,
  texture: 5,
  name: "Камуфляжная рваная футболка"
}, {
  component: 11,
  drawable: 154,
  texture: 0,
  name: "Черная короткая майка"
}, {
  component: 11,
  drawable: 154,
  texture: 1,
  name: "Серая короткая майка"
}, {
  component: 11,
  drawable: 154,
  texture: 2,
  name: "Бордовая короткая майка"
}, {
  component: 11,
  drawable: 154,
  texture: 3,
  name: "Белая короткая майка"
}, {
  component: 11,
  drawable: 154,
  texture: 4,
  name: "Медная короткая майка"
}, {
  component: 11,
  drawable: 154,
  texture: 5,
  name: "Камуфляжная короткая майка"
}, {
  component: 11,
  drawable: 155,
  texture: 0,
  name: "Рубашка индиго с узлом"
}, {
  component: 11,
  drawable: 155,
  texture: 1,
  name: "Винтажная рубашка с узлом"
}, {
  component: 11,
  drawable: 155,
  texture: 2,
  name: "Черная рубашка с узлом"
}, {
  component: 11,
  drawable: 155,
  texture: 3,
  name: "Блеклая рубашка с узлом"
}, {
  component: 11,
  drawable: 155,
  texture: 4,
  name: "Бордовая рубашка с узлом"
}, {
  component: 11,
  drawable: 155,
  texture: 5,
  name: "Пепельная рубашка с узлом"
}, {
  component: 11,
  drawable: 155,
  texture: 6,
  name: "Синяя рубашка с узлом"
}, {
  component: 11,
  drawable: 155,
  texture: 7,
  name: "Зеленая рубашка с узлом"
}, {
  component: 11,
  drawable: 157,
  texture: 0,
  name: "Кожаный жилет с бретелью"
}, {
  component: 11,
  drawable: 158,
  texture: 0,
  name: "Винтажная джинсовка (патч)"
}, {
  component: 11,
  drawable: 158,
  texture: 1,
  name: "Джинсовка индиго (патч)"
}, {
  component: 11,
  drawable: 158,
  texture: 2,
  name: "Блеклая джинсовка (патч)"
}, {
  component: 11,
  drawable: 158,
  texture: 3,
  name: "Черная джинсовка (патч)"
}, {
  component: 11,
  drawable: 159,
  texture: 0,
  name: "Винтажный джинсовый (патч)"
}, {
  component: 11,
  drawable: 159,
  texture: 1,
  name: "Синий джинсовый (патч)"
}, {
  component: 11,
  drawable: 159,
  texture: 2,
  name: "Блеклый джинсовый (патч)"
}, {
  component: 11,
  drawable: 159,
  texture: 3,
  name: "Черный джинсовый (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 0,
  name: "Старая косуха (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 1,
  name: "Бордовая косуха (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 2,
  name: "Бурая косуха (патч)"
}, {
  component: 11,
  drawable: 160,
  texture: 3,
  name: "Черная косуха (патч)"
}, {
  component: 11,
  drawable: 161,
  texture: 0,
  name: "Старый жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 161,
  texture: 1,
  name: "Бордовый жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 161,
  texture: 2,
  name: "Бурый жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 161,
  texture: 3,
  name: "Черный жилет-косуха (патч)"
}, {
  component: 11,
  drawable: 162,
  texture: 0,
  name: "Приталенный жилет (патч)"
}, {
  component: 11,
  drawable: 163,
  texture: 0,
  name: "Цифровой для спортбайка"
}, {
  component: 11,
  drawable: 163,
  texture: 1,
  name: "Черный для спортбайка"
}, {
  component: 11,
  drawable: 163,
  texture: 2,
  name: "Камуфляжный для спортбайка"
}, {
  component: 11,
  drawable: 163,
  texture: 3,
  name: "Синий для спортбайка"
}, {
  component: 11,
  drawable: 163,
  texture: 4,
  name: "Красный для спортбайка"
}, {
  component: 11,
  drawable: 163,
  texture: 5,
  name: "Зеленый для спортбайка"
}, {
  component: 11,
  drawable: 163,
  texture: 6,
  name: "Желтый для спортбайка"
}, {
  component: 11,
  drawable: 169,
  texture: 2,
  name: "Темно-синий блейзер"
}, {
  component: 11,
  drawable: 169,
  texture: 3,
  name: "Ярко-голубой блейзер"
}, {
  component: 11,
  drawable: 169,
  texture: 4,
  name: "Черный блейзер"
}, {
  component: 11,
  drawable: 169,
  texture: 5,
  name: "Белый блейзер"
}, {
  component: 11,
  drawable: 170,
  texture: 0,
  name: "Серая застегнутая парка"
}, {
  component: 11,
  drawable: 170,
  texture: 1,
  name: "Зеленая застегнутая парка"
}, {
  component: 11,
  drawable: 170,
  texture: 2,
  name: "Серая застегнутая (патч)"
}, {
  component: 11,
  drawable: 170,
  texture: 3,
  name: "Зеленая застегнутая (патч)"
}, {
  component: 11,
  drawable: 171,
  texture: 0,
  name: "Серая расстегнутая парка"
}, {
  component: 11,
  drawable: 171,
  texture: 1,
  name: "Зеленая расстегнутая парка"
}, {
  component: 11,
  drawable: 171,
  texture: 2,
  name: "Серая расстегнутая (патч)"
}, {
  component: 11,
  drawable: 171,
  texture: 3,
  name: "Зеленая расстегнутая (патч)"
}, {
  component: 1,
  drawable: 87,
  texture: 0,
  name: "Синий цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 1,
  name: "Бурый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 2,
  name: "Зеленый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 3,
  name: "Серый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 4,
  name: "Бежевый цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 5,
  name: "Осенний зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 6,
  name: "Лесной зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 7,
  name: "Зомби в сетку"
}, {
  component: 1,
  drawable: 87,
  texture: 8,
  name: "Болотный цифровой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 9,
  name: "Сероватый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 10,
  name: "Морской зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 11,
  name: "Оскольчатый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 12,
  name: "Контрастный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 13,
  name: "Галечный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 14,
  name: "Бежевый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 15,
  name: "Мазковый зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 16,
  name: "Зомби флектарн"
}, {
  component: 1,
  drawable: 87,
  texture: 17,
  name: "Полевой зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 18,
  name: "Болотный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 19,
  name: "Песочный зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 20,
  name: "Черный гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 21,
  name: "Серо-синий гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 22,
  name: "Каменный гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 23,
  name: "Зеленый гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 24,
  name: "Лесной гниющий зомби"
}, {
  component: 1,
  drawable: 87,
  texture: 25,
  name: "Болотный гниющий зомби"
}, {
  component: 1,
  drawable: 88,
  texture: 0,
  name: "Синяя цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 1,
  name: "Бурая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 2,
  name: "Зеленая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 3,
  name: "Серая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 4,
  name: "Бежевая цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 5,
  name: "Осенняя тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 6,
  name: "Лесная тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 7,
  name: "Тактическая маска в сетку"
}, {
  component: 1,
  drawable: 88,
  texture: 8,
  name: "Болотно-цифр. тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 9,
  name: "Сероватая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 10,
  name: "Морская тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 11,
  name: "Оскольчатая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 12,
  name: "Контрастная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 13,
  name: "Галечная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 14,
  name: "Бежевая тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 15,
  name: "Мазковая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 16,
  name: "Тактическая флектарн"
}, {
  component: 1,
  drawable: 88,
  texture: 17,
  name: "Полевая тактическая маска"
}, {
  component: 1,
  drawable: 88,
  texture: 18,
  name: "Болотная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 19,
  name: "Песочная тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 24,
  name: "Оливковая тактическая"
}, {
  component: 1,
  drawable: 88,
  texture: 25,
  name: "Тактическая маска-череп"
}, {
  component: 1,
  drawable: 89,
  texture: 0,
  name: "Обсидиановый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 1,
  name: "Выветрившийся Они"
}, {
  component: 1,
  drawable: 89,
  texture: 2,
  name: "Песчаный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 3,
  name: "Белый узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 4,
  name: "Золотой узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 5,
  name: "Красный узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 6,
  name: "Черный узорный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 7,
  name: "Черный одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 8,
  name: "Коричневый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 9,
  name: "Желтый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 10,
  name: "Сливовый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 11,
  name: "Монохромный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 12,
  name: "Черно-желтый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 13,
  name: "Оранжевый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 14,
  name: "Золотой одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 15,
  name: "Каменный одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 16,
  name: "Серый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 17,
  name: "Черно-золотой Они"
}, {
  component: 1,
  drawable: 89,
  texture: 18,
  name: "Серо-оранжевый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 19,
  name: "Белый одержимый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 20,
  name: "Серо-золотой Они"
}, {
  component: 1,
  drawable: 89,
  texture: 21,
  name: "Каменный Они"
}, {
  component: 1,
  drawable: 89,
  texture: 22,
  name: "Сине-зеленый Они"
}, {
  component: 1,
  drawable: 89,
  texture: 23,
  name: "Фиолетовый Они"
}, {
  component: 1,
  drawable: 90,
  texture: 0,
  name: "Синий цифровой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 1,
  name: "Бурый цифровой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 2,
  name: "Зеленый цифр. череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 3,
  name: "Серый цифровой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 4,
  name: "Бежевый цифр. череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 5,
  name: "Осенний череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 6,
  name: "Лесной череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 7,
  name: "Череп змеи в сетку"
}, {
  component: 1,
  drawable: 90,
  texture: 8,
  name: "Болотный цифр. череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 9,
  name: "Сероватый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 10,
  name: "Морской череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 11,
  name: "Оскольчатый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 12,
  name: "Контрастный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 13,
  name: "Галечный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 14,
  name: "Бежевый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 15,
  name: "Мазковый череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 16,
  name: "Череп змеи флектарн"
}, {
  component: 1,
  drawable: 90,
  texture: 17,
  name: "Полевой череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 18,
  name: "Болотный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 19,
  name: "Песочный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 24,
  name: "Красный череп змеи"
}, {
  component: 1,
  drawable: 90,
  texture: 25,
  name: "Белый череп змеи"
}, {
  component: 1,
  drawable: 91,
  texture: 0,
  name: "Синяя цифровая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 1,
  name: "Бурая цифровая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 2,
  name: "Зеленая цифр. с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 3,
  name: "Серая цифровая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 4,
  name: "Бежевая цифр. с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 5,
  name: "Осенняя маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 6,
  name: "Лесная маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 7,
  name: "Маска с фильтром в сетку"
}, {
  component: 1,
  drawable: 91,
  texture: 8,
  name: "Болотная цифр. с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 9,
  name: "Сероватая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 10,
  name: "Морская маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 11,
  name: "Оскольчатая с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 12,
  name: "Контрастная с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 13,
  name: "Галечная маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 15,
  name: "Мазковая маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 16,
  name: "С фильтром флектарн"
}, {
  component: 1,
  drawable: 91,
  texture: 17,
  name: "Полевая маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 18,
  name: "Болотная маска с фильтром"
}, {
  component: 1,
  drawable: 91,
  texture: 19,
  name: "Песочная маска с фильтром"
}, {
  component: 1,
  drawable: 92,
  texture: 0,
  name: "Чистый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 1,
  name: "Выветрившийся череп"
}, {
  component: 1,
  drawable: 92,
  texture: 2,
  name: "Старый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 3,
  name: "Токсичный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 4,
  name: "Свежий череп"
}, {
  component: 1,
  drawable: 92,
  texture: 5,
  name: "Необглоданный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 6,
  name: "Болотный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 7,
  name: "Песочный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 8,
  name: "Узорный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 9,
  name: "Запятнанный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 10,
  name: "Бежевый кожаный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 11,
  name: "Кофейный кожаный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 12,
  name: "Рыжий глазастый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 13,
  name: "Одержимый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 14,
  name: "Глазастый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 15,
  name: "Татуированный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 16,
  name: "Синий крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 17,
  name: "Розовый крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 18,
  name: "Зеленый крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 19,
  name: "Горчичный крашеный череп"
}, {
  component: 1,
  drawable: 92,
  texture: 20,
  name: "Рыжий череп с завитками"
}, {
  component: 1,
  drawable: 92,
  texture: 21,
  name: "Солнечноглазый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 22,
  name: "Терракотовый череп"
}, {
  component: 1,
  drawable: 92,
  texture: 23,
  name: "Череп с полосой"
}, {
  component: 3,
  drawable: 156,
  texture: 0,
  name: "Синие цифр. с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 1,
  name: "Бурые цифр. с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 2,
  name: "Зеленые цифр. с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 3,
  name: "Серые цифр. с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 4,
  name: "Бежевые цифр. с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 5,
  name: "Осенние с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 6,
  name: "Лесные с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 7,
  name: "С защитой в сетку"
}, {
  component: 3,
  drawable: 156,
  texture: 8,
  name: "Болотно-цифр. с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 9,
  name: "Сероватые с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 10,
  name: "Морские с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 11,
  name: "Оскольчатые с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 12,
  name: "Контрастные с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 13,
  name: "Галечные с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 14,
  name: "Бежевые с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 15,
  name: "Мазковые с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 16,
  name: "С защитой флектарн"
}, {
  component: 3,
  drawable: 156,
  texture: 17,
  name: "Полевые с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 18,
  name: "Болотные с защитой"
}, {
  component: 3,
  drawable: 156,
  texture: 19,
  name: "Песочные с защитой"
}, {
  component: 3,
  drawable: 157,
  texture: 0,
  name: "Синие цифр. армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 1,
  name: "Бурые цифр. армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 2,
  name: "Зеленые цифр. армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 3,
  name: "Серые цифр. армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 4,
  name: "Бежевые цифр. армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 5,
  name: "Осенние армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 6,
  name: "Лесные армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 7,
  name: "Армейские в сетку"
}, {
  component: 3,
  drawable: 157,
  texture: 8,
  name: "Болотно-цифр. армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 9,
  name: "Сероватые армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 10,
  name: "Морские армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 11,
  name: "Оскольчатые армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 12,
  name: "Контрастные армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 13,
  name: "Галечные армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 14,
  name: "Бежевые армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 15,
  name: "Мазковые армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 16,
  name: "Армейские флектарн"
}, {
  component: 3,
  drawable: 157,
  texture: 17,
  name: "Полевые армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 18,
  name: "Болотные армейские"
}, {
  component: 3,
  drawable: 157,
  texture: 19,
  name: "Песочные армейские"
}, {
  component: 4,
  drawable: 70,
  texture: 0,
  name: "Синие цифровые штаны"
}, {
  component: 4,
  drawable: 70,
  texture: 1,
  name: "Бурые цифровые штаны"
}, {
  component: 4,
  drawable: 70,
  texture: 2,
  name: "Зеленые цифровые штаны"
}, {
  component: 4,
  drawable: 70,
  texture: 3,
  name: "Серые цифровые штаны"
}, {
  component: 4,
  drawable: 70,
  texture: 4,
  name: "Бежевые цифровые штаны"
}, {
  component: 4,
  drawable: 70,
  texture: 5,
  name: "Осенние штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 6,
  name: "Лесные штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 7,
  name: "Штаны карго в сетку"
}, {
  component: 4,
  drawable: 70,
  texture: 8,
  name: "Болотные цифровые штаны"
}, {
  component: 4,
  drawable: 70,
  texture: 9,
  name: "Сероватые штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 10,
  name: "Морские штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 11,
  name: "Оскольчатые штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 12,
  name: "Контрастные штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 13,
  name: "Галечные штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 14,
  name: "Бежевые штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 15,
  name: "Мазковые штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 16,
  name: "Штаны карго флектарн"
}, {
  component: 4,
  drawable: 70,
  texture: 17,
  name: "Полевые штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 18,
  name: "Болотные штаны карго"
}, {
  component: 4,
  drawable: 70,
  texture: 19,
  name: "Песочные штаны карго"
}, {
  component: 4,
  drawable: 72,
  texture: 0,
  name: "Синие цифровые карго"
}, {
  component: 4,
  drawable: 72,
  texture: 1,
  name: "Бурые цифровые карго"
}, {
  component: 4,
  drawable: 72,
  texture: 2,
  name: "Зеленые цифровые карго"
}, {
  component: 4,
  drawable: 72,
  texture: 3,
  name: "Серые цифровые карго"
}, {
  component: 4,
  drawable: 72,
  texture: 4,
  name: "Бежевые цифровые карго"
}, {
  component: 4,
  drawable: 72,
  texture: 5,
  name: "Осенние шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 6,
  name: "Лесные шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 7,
  name: "Шорты карго в сетку"
}, {
  component: 4,
  drawable: 72,
  texture: 8,
  name: "Болотные цифровые карго"
}, {
  component: 4,
  drawable: 72,
  texture: 9,
  name: "Сероватые шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 10,
  name: "Морские шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 11,
  name: "Оскольчатые шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 12,
  name: "Контрастные шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 13,
  name: "Галечные шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 14,
  name: "Бежевые шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 15,
  name: "Мазковые шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 16,
  name: "Шорты карго флектарн"
}, {
  component: 4,
  drawable: 72,
  texture: 17,
  name: "Полевые шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 18,
  name: "Болотные шорты карго"
}, {
  component: 4,
  drawable: 72,
  texture: 19,
  name: "Песочные шорты карго"
}, {
  component: 4,
  drawable: 73,
  texture: 0,
  name: "Синий цифровой комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 1,
  name: "Бурый цифровой комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 2,
  name: "Зеленый цифр. комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 3,
  name: "Серый цифровой комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 4,
  name: "Бежевый цифр. комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 5,
  name: "Осенний комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 6,
  name: "Лесной комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 7,
  name: "Комбинезон в сетку"
}, {
  component: 4,
  drawable: 73,
  texture: 8,
  name: "Болотный цифр. комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 9,
  name: "Сероватый комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 10,
  name: "Морской комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 11,
  name: "Оскольчатый комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 12,
  name: "Контрастный комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 13,
  name: "Галечный комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 14,
  name: "Бежевый комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 15,
  name: "Мазковый комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 16,
  name: "Комбинезон флектарн"
}, {
  component: 4,
  drawable: 73,
  texture: 17,
  name: "Полевой комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 18,
  name: "Болотный комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 19,
  name: "Песочный комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 20,
  name: "Черный комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 21,
  name: "Серо-синий комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 22,
  name: "Белый комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 23,
  name: "Кофейный комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 24,
  name: "Оливковый комбинезон"
}, {
  component: 4,
  drawable: 73,
  texture: 25,
  name: "Светло-бурый комбинезон"
}, {
  component: 4,
  drawable: 74,
  texture: 0,
  name: "Джинсовый цвета индиго"
}, {
  component: 4,
  drawable: 74,
  texture: 1,
  name: "Потертый цвета индиго"
}, {
  component: 4,
  drawable: 74,
  texture: 2,
  name: "Темно-серый джинсовый"
}, {
  component: 4,
  drawable: 74,
  texture: 3,
  name: "Потертый темно-серый"
}, {
  component: 4,
  drawable: 74,
  texture: 4,
  name: "Светло-синий джинсовый"
}, {
  component: 4,
  drawable: 74,
  texture: 5,
  name: "Потертый светло-синий"
}, {
  component: 4,
  drawable: 74,
  texture: 6,
  name: "Серо-синий джинсовый"
}, {
  component: 4,
  drawable: 74,
  texture: 7,
  name: "Потертый серо-синий"
}, {
  component: 4,
  drawable: 74,
  texture: 9,
  name: "Потертый черный"
}, {
  component: 6,
  drawable: 53,
  texture: 0,
  name: "Синие цифровые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 1,
  name: "Бурые цифровые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 2,
  name: "Зеленые цифр. кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 3,
  name: "Серые цифровые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 4,
  name: "Бежевые цифр. кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 5,
  name: "Осенние кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 6,
  name: "Лесные кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 7,
  name: "Кроссовки в сетку"
}, {
  component: 6,
  drawable: 53,
  texture: 8,
  name: "Болотные цифр. кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 9,
  name: "Сероватые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 10,
  name: "Морские кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 11,
  name: "Оскольчатые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 12,
  name: "Контрастные кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 13,
  name: "Галечные кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 14,
  name: "Бежевые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 15,
  name: "Мазковые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 16,
  name: "Кроссовки флектарн"
}, {
  component: 6,
  drawable: 53,
  texture: 17,
  name: "Полевые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 18,
  name: "Болотные кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 19,
  name: "Песочные кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 20,
  name: "Черные кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 21,
  name: "Серо-синие кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 22,
  name: "Белые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 23,
  name: "Бурые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 24,
  name: "Зеленые кроссовки"
}, {
  component: 6,
  drawable: 53,
  texture: 25,
  name: "Красные кроссовки"
}, {
  component: 6,
  drawable: 54,
  texture: 0,
  name: "Черные спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 1,
  name: "Бежевые спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 2,
  name: "Бурые спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 3,
  name: "Болотные спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 4,
  name: "Темно-желтые спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 5,
  name: "Токсичные спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 6,
  name: "Желтые спецботинки"
}, {
  component: 6,
  drawable: 54,
  texture: 7,
  name: "Кофейные спецботинки"
}, {
  component: 6,
  drawable: 56,
  texture: 1,
  name: "Серо-зеленые армейские"
}, {
  component: 6,
  drawable: 56,
  texture: 2,
  name: "Синие армейские"
}, {
  component: 6,
  drawable: 56,
  texture: 3,
  name: "Армейские цвета хаки"
}, {
  component: 6,
  drawable: 56,
  texture: 4,
  name: "Темно-серые армейские"
}, {
  component: 6,
  drawable: 56,
  texture: 5,
  name: "Ореховые армейские"
}, {
  component: 6,
  drawable: 56,
  texture: 6,
  name: "Серебристые армейские"
}, {
  component: 6,
  drawable: 56,
  texture: 7,
  name: "Оливковые армейские"
}, {
  component: 8,
  drawable: 112,
  texture: 0,
  name: "Синяя цифровая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 1,
  name: "Бурая цифровая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 2,
  name: "Зеленая цифровая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 3,
  name: "Серая цифровая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 4,
  name: "Бежевая цифровая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 5,
  name: "Осенняя футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 6,
  name: "Лесная футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 7,
  name: "Футболка в сетку"
}, {
  component: 8,
  drawable: 112,
  texture: 8,
  name: "Болотно-цифровая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 9,
  name: "Сероватая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 10,
  name: "Морская футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 11,
  name: "Оскольчатая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 12,
  name: "Контрастная футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 13,
  name: "Галечная футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 15,
  name: "Мазковая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 16,
  name: "Футболка флектарн"
}, {
  component: 8,
  drawable: 112,
  texture: 17,
  name: "Полевая футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 18,
  name: "Болотная футболка"
}, {
  component: 8,
  drawable: 112,
  texture: 19,
  name: "Песочная футболка"
}, {
  component: 8,
  drawable: 124,
  texture: 0,
  name: "Синяя цифровая (подверн.)"
}, {
  component: 8,
  drawable: 124,
  texture: 1,
  name: "Бурая цифровая (подверн.)"
}, {
  component: 8,
  drawable: 124,
  texture: 2,
  name: "Зеленая цифровая (подв.)"
}, {
  component: 8,
  drawable: 124,
  texture: 3,
  name: "Серая цифровая (подверн.)"
}, {
  component: 8,
  drawable: 124,
  texture: 4,
  name: "Бежевая цифровая (подв.)"
}, {
  component: 8,
  drawable: 124,
  texture: 5,
  name: "Осенняя (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 6,
  name: "Лесная (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 7,
  name: "В сетку (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 8,
  name: "Болотная цифровая (подв.)"
}, {
  component: 8,
  drawable: 124,
  texture: 9,
  name: "Сероватая (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 10,
  name: "Морская (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 11,
  name: "Оскольчатая (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 12,
  name: "Контрастная (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 13,
  name: "Галечная (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 14,
  name: "Бежевая (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 15,
  name: "Мазковая (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 16,
  name: "Футболка флектарн (подв.)"
}, {
  component: 8,
  drawable: 124,
  texture: 17,
  name: "Полевая (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 18,
  name: "Болотная (подвернутая)"
}, {
  component: 8,
  drawable: 124,
  texture: 19,
  name: "Песочная (подвернутая)"
}, {
  component: 8,
  drawable: 136,
  texture: 0,
  name: "Футболка Knuckleduster"
}, {
  component: 10,
  drawable: 53,
  texture: 0,
  name: "Белая толстовка Hawk & Little"
}, {
  component: 10,
  drawable: 53,
  texture: 1,
  name: "Черная толстовка Hawk & Little"
}, {
  component: 10,
  drawable: 53,
  texture: 2,
  name: "Белая толстовка Shrewsbury"
}, {
  component: 10,
  drawable: 53,
  texture: 3,
  name: "Черная толстовка Shrewsbury"
}, {
  component: 10,
  drawable: 53,
  texture: 4,
  name: "Белая толстовка Vom Feuer"
}, {
  component: 10,
  drawable: 53,
  texture: 5,
  name: "Черная толстовка Vom Feuer"
}, {
  component: 10,
  drawable: 53,
  texture: 6,
  name: "Белая толстовка Coil"
}, {
  component: 10,
  drawable: 53,
  texture: 7,
  name: "Черная толстовка Coil"
}, {
  component: 10,
  drawable: 53,
  texture: 8,
  name: "Черная толст. Амму-Нация"
}, {
  component: 10,
  drawable: 53,
  texture: 9,
  name: "Белая толст. Амму-Нация"
}, {
  component: 10,
  drawable: 53,
  texture: 10,
  name: "Черная толстовка Warstock"
}, {
  component: 11,
  drawable: 172,
  texture: 0,
  name: "Синяя цифр. без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 1,
  name: "Бурая цифр. без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 2,
  name: "Зеленая цифр. без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 3,
  name: "Серая цифр. без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 4,
  name: "Бежевая цифр. без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 5,
  name: "Осенняя без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 6,
  name: "Лесная без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 7,
  name: "Без рукавов в сетку"
}, {
  component: 11,
  drawable: 172,
  texture: 8,
  name: "Болотно-цифр. без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 9,
  name: "Сероватая без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 10,
  name: "Морская без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 11,
  name: "Оскольчатая без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 12,
  name: "Контрастная без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 13,
  name: "Галечная без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 14,
  name: "Бежевая без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 15,
  name: "Мазковая без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 16,
  name: "Без рукавов флектарн"
}, {
  component: 11,
  drawable: 172,
  texture: 17,
  name: "Полевая без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 18,
  name: "Болотная без рукавов"
}, {
  component: 11,
  drawable: 172,
  texture: 19,
  name: "Песочная без рукавов"
}, {
  component: 11,
  drawable: 175,
  texture: 0,
  name: "Синяя цифровая (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 1,
  name: "Бурая цифровая (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 2,
  name: "Зеленая цифр. (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 3,
  name: "Серая цифровая (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 4,
  name: "Бежевая цифр. (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 5,
  name: "Осенняя парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 6,
  name: "Голубая парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 7,
  name: "Парка в сетку (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 8,
  name: "Болотная цифр. (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 9,
  name: "Сероватая парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 10,
  name: "Морская парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 11,
  name: "Оскольчатая (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 12,
  name: "Контрастная (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 13,
  name: "Галечная парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 14,
  name: "Бежевая парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 15,
  name: "Лиловая парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 16,
  name: "Парка флектарн (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 17,
  name: "Полевая парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 18,
  name: "Болотная парка (воротник)"
}, {
  component: 11,
  drawable: 175,
  texture: 19,
  name: "Песочная парка (воротник)"
}, {
  component: 11,
  drawable: 176,
  texture: 0,
  name: "Синяя цифровая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 1,
  name: "Бурая цифровая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 2,
  name: "Зеленая цифровая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 3,
  name: "Серая цифровая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 4,
  name: "Бежевая цифровая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 5,
  name: "Осенняя парка"
}, {
  component: 11,
  drawable: 176,
  texture: 6,
  name: "Голубая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 7,
  name: "Парка в сетку"
}, {
  component: 11,
  drawable: 176,
  texture: 8,
  name: "Болотная цифровая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 9,
  name: "Сероватая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 10,
  name: "Морская парка"
}, {
  component: 11,
  drawable: 176,
  texture: 11,
  name: "Оскольчатая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 12,
  name: "Контрастная парка"
}, {
  component: 11,
  drawable: 176,
  texture: 13,
  name: "Галечная парка"
}, {
  component: 11,
  drawable: 176,
  texture: 14,
  name: "Бежевая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 15,
  name: "Лиловая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 16,
  name: "Парка флектарн"
}, {
  component: 11,
  drawable: 176,
  texture: 17,
  name: "Полевая парка"
}, {
  component: 11,
  drawable: 176,
  texture: 18,
  name: "Болотная парка"
}, {
  component: 11,
  drawable: 176,
  texture: 19,
  name: "Песочная парка"
}, {
  component: 11,
  drawable: 178,
  texture: 0,
  name: "Синяя цифр. расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 1,
  name: "Бурая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 2,
  name: "Зеленая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 3,
  name: "Серая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 4,
  name: "Бежевая цифр. расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 5,
  name: "Осенняя расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 6,
  name: "Голубая расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 7,
  name: "В сетку расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 8,
  name: "Болотно-цифр. расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 9,
  name: "Сероватая расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 10,
  name: "Морская расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 11,
  name: "Оскольчатая расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 12,
  name: "Контрастная расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 13,
  name: "Галечная расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 14,
  name: "Бежевая расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 15,
  name: "Лиловая расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 16,
  name: "Расстегнутая флектарн"
}, {
  component: 11,
  drawable: 178,
  texture: 17,
  name: "Полевая расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 18,
  name: "Болотная расстегнутая"
}, {
  component: 11,
  drawable: 178,
  texture: 19,
  name: "Песочная расстегнутая"
}, {
  component: 11,
  drawable: 179,
  texture: 0,
  name: "Синий цифровой защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 1,
  name: "Бурый цифровой защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 2,
  name: "Зеленый цифр. защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 3,
  name: "Серый цифровой защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 4,
  name: "Бежевый цифр. защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 5,
  name: "Осенний защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 6,
  name: "Лесной защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 7,
  name: "Защитный жилет в сетку"
}, {
  component: 11,
  drawable: 179,
  texture: 8,
  name: "Болотный цифр. защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 9,
  name: "Сероватый защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 10,
  name: "Морской защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 11,
  name: "Оскольчатый защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 12,
  name: "Контрастный защитный"
}, {
  component: 11,
  drawable: 179,
  texture: 13,
  name: "Галечный защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 14,
  name: "Бежевый защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 15,
  name: "Мазковый защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 16,
  name: "Защитный жилет флектарн"
}, {
  component: 11,
  drawable: 179,
  texture: 17,
  name: "Полевой защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 18,
  name: "Болотный защитный жилет"
}, {
  component: 11,
  drawable: 179,
  texture: 19,
  name: "Песочный защитный жилет"
}, {
  component: 11,
  drawable: 180,
  texture: 0,
  name: "Синяя цифровая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 1,
  name: "Бурая цифровая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 2,
  name: "Зеленая цифр. спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 3,
  name: "Серая цифровая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 4,
  name: "Бежевая цифр. спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 5,
  name: "Осенняя спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 6,
  name: "Лесная спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 7,
  name: "Спортивная в сетку"
}, {
  component: 11,
  drawable: 180,
  texture: 8,
  name: "Болотная цифр. спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 9,
  name: "Сероватая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 10,
  name: "Морская спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 11,
  name: "Оскольчатая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 12,
  name: "Контрастная спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 13,
  name: "Галечная спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 14,
  name: "Бежевая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 15,
  name: "Мазковая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 16,
  name: "Спортивная флектарн"
}, {
  component: 11,
  drawable: 180,
  texture: 17,
  name: "Полевая спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 18,
  name: "Болотная спортивная"
}, {
  component: 11,
  drawable: 180,
  texture: 19,
  name: "Песочная спортивная"
}, {
  component: 11,
  drawable: 181,
  texture: 0,
  name: "Синяя цифровая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 1,
  name: "Бурая цифровая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 2,
  name: "Зеленая цифр. джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 3,
  name: "Серая цифровая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 4,
  name: "Бежевая цифр. джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 5,
  name: "Осенняя джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 6,
  name: "Лесная джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 7,
  name: "Джинсовка в сетку"
}, {
  component: 11,
  drawable: 181,
  texture: 8,
  name: "Болотная цифр. джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 9,
  name: "Сероватая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 10,
  name: "Морская джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 11,
  name: "Оскольчатая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 12,
  name: "Контрастная джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 13,
  name: "Галечная джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 14,
  name: "Бежевая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 15,
  name: "Мазковая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 16,
  name: "Джинсовка флектарн"
}, {
  component: 11,
  drawable: 181,
  texture: 17,
  name: "Полевая джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 18,
  name: "Болотная джинсовка"
}, {
  component: 11,
  drawable: 181,
  texture: 19,
  name: "Песочная джинсовка"
}, {
  component: 11,
  drawable: 182,
  texture: 0,
  name: "Синий цифровой джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 1,
  name: "Бурый цифровой джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 2,
  name: "Зеленый цифр. джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 3,
  name: "Серый цифровой джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 4,
  name: "Бежевый цифр. джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 5,
  name: "Осенний джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 6,
  name: "Лесной джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 7,
  name: "Джинсовый жилет в сетку"
}, {
  component: 11,
  drawable: 182,
  texture: 8,
  name: "Болотный цифр. джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 9,
  name: "Сероватый джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 10,
  name: "Морской джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 11,
  name: "Оскольчатый джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 12,
  name: "Контрастный джинсовый"
}, {
  component: 11,
  drawable: 182,
  texture: 13,
  name: "Галечный джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 14,
  name: "Бежевый джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 15,
  name: "Мазковый джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 16,
  name: "Джинсовый флектарн"
}, {
  component: 11,
  drawable: 182,
  texture: 17,
  name: "Полевой джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 18,
  name: "Болотный джинсовый жилет"
}, {
  component: 11,
  drawable: 182,
  texture: 19,
  name: "Песочный джинсовый жилет"
}, {
  component: 11,
  drawable: 183,
  texture: 0,
  name: "Синяя цифровая рваная"
}, {
  component: 11,
  drawable: 183,
  texture: 1,
  name: "Бурая цифровая рваная"
}, {
  component: 11,
  drawable: 183,
  texture: 2,
  name: "Зеленая цифровая рваная"
}, {
  component: 11,
  drawable: 183,
  texture: 3,
  name: "Серая цифровая рваная"
}, {
  component: 11,
  drawable: 183,
  texture: 4,
  name: "Бежевая цифровая рваная"
}, {
  component: 11,
  drawable: 183,
  texture: 5,
  name: "Осенняя рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 6,
  name: "Лесная рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 7,
  name: "Рваная майка в сетку"
}, {
  component: 11,
  drawable: 183,
  texture: 8,
  name: "Болотная цифровая рваная"
}, {
  component: 11,
  drawable: 183,
  texture: 9,
  name: "Сероватая рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 10,
  name: "Морская рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 11,
  name: "Оскольчатая рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 12,
  name: "Контрастная рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 13,
  name: "Галечная рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 14,
  name: "Бежевая рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 15,
  name: "Мазковая рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 16,
  name: "Рваная майка флектарн"
}, {
  component: 11,
  drawable: 183,
  texture: 17,
  name: "Лиловая рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 18,
  name: "Болотная рваная майка"
}, {
  component: 11,
  drawable: 183,
  texture: 19,
  name: "Песочная рваная майка"
}, {
  component: 11,
  drawable: 184,
  texture: 5,
  name: "Осенняя рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 6,
  name: "Лесная рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 7,
  name: "Рваная футболка в сетку"
}, {
  component: 11,
  drawable: 184,
  texture: 9,
  name: "Сероватая рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 10,
  name: "Морская рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 11,
  name: "Оскольчатая рваная"
}, {
  component: 11,
  drawable: 184,
  texture: 12,
  name: "Контрастная рваная"
}, {
  component: 11,
  drawable: 184,
  texture: 13,
  name: "Галечная рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 14,
  name: "Бежевая рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 15,
  name: "Мазковая рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 16,
  name: "Рваная флектарн"
}, {
  component: 11,
  drawable: 184,
  texture: 17,
  name: "Лиловая рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 18,
  name: "Болотная рваная футболка"
}, {
  component: 11,
  drawable: 184,
  texture: 19,
  name: "Песочная рваная футболка"
}, {
  component: 11,
  drawable: 185,
  texture: 0,
  name: "Синяя цифровая короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 1,
  name: "Бурая цифровая короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 2,
  name: "Зеленая цифровая короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 3,
  name: "Серая цифровая короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 4,
  name: "Бежевая цифровая короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 5,
  name: "Осенняя короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 6,
  name: "Лесная короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 7,
  name: "Короткая майка в сетку"
}, {
  component: 11,
  drawable: 185,
  texture: 8,
  name: "Болотно-цифровая короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 9,
  name: "Сероватая короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 10,
  name: "Морская короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 11,
  name: "Оскольчатая короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 12,
  name: "Контрастная короткая"
}, {
  component: 11,
  drawable: 185,
  texture: 13,
  name: "Галечная короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 14,
  name: "Бежевая короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 15,
  name: "Мазковая короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 16,
  name: "Короткая майка флектарн"
}, {
  component: 11,
  drawable: 185,
  texture: 17,
  name: "Лиловая короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 18,
  name: "Болотная короткая майка"
}, {
  component: 11,
  drawable: 185,
  texture: 19,
  name: "Песочная короткая майка"
}, {
  component: 11,
  drawable: 189,
  texture: 0,
  name: "Городская парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 1,
  name: "Лесная парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 2,
  name: "Персиковая (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 3,
  name: "Красная парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 4,
  name: "Бурая парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 5,
  name: "Лаймовая парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 6,
  name: "Сине-зеленая (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 7,
  name: "Мандариновая (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 9,
  name: "Зеленая парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 10,
  name: "Пятнистая парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 11,
  name: "Охровая парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 12,
  name: "Синяя парка (воротник)"
}, {
  component: 11,
  drawable: 189,
  texture: 13,
  name: "Городская (воротник/патч)"
}, {
  component: 11,
  drawable: 189,
  texture: 14,
  name: "Лесная (воротник/патч)"
}, {
  component: 11,
  drawable: 191,
  texture: 8,
  name: "Болотная цифр. без рукавов"
}, {
  component: 11,
  drawable: 191,
  texture: 21,
  name: "Серо-синяя без рукавов"
}, {
  component: 11,
  drawable: 191,
  texture: 22,
  name: "Белая без рукавов"
}, {
  component: 11,
  drawable: 191,
  texture: 23,
  name: "Гранатовая без рукавов"
}, {
  component: 11,
  drawable: 191,
  texture: 24,
  name: "Синяя без рукавов"
}, {
  component: 11,
  drawable: 191,
  texture: 25,
  name: "Коричневая без рукавов"
}, {
  component: 11,
  drawable: 192,
  texture: 0,
  name: "Синяя цифровая боевая"
}, {
  component: 11,
  drawable: 192,
  texture: 1,
  name: "Бурая цифровая боевая"
}, {
  component: 11,
  drawable: 192,
  texture: 2,
  name: "Зеленая цифровая боевая"
}, {
  component: 11,
  drawable: 192,
  texture: 3,
  name: "Серая цифровая боевая"
}, {
  component: 11,
  drawable: 192,
  texture: 4,
  name: "Бежевая цифровая боевая"
}, {
  component: 11,
  drawable: 192,
  texture: 5,
  name: "Осенняя боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 6,
  name: "Лесная боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 7,
  name: "Боевая рубашка в сетку"
}, {
  component: 11,
  drawable: 192,
  texture: 8,
  name: "Болотная цифровая боевая"
}, {
  component: 11,
  drawable: 192,
  texture: 9,
  name: "Сероватая боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 10,
  name: "Морская боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 11,
  name: "Оскольчатая боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 12,
  name: "Контрастная боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 13,
  name: "Галечная боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 14,
  name: "Бежевая боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 15,
  name: "Мазковая боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 16,
  name: "Боевая рубашка флектарн"
}, {
  component: 11,
  drawable: 192,
  texture: 17,
  name: "Полевая боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 18,
  name: "Болотная боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 19,
  name: "Песочная боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 20,
  name: "Черная боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 21,
  name: "Серо-синяя боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 22,
  name: "Белая боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 23,
  name: "Коричневая боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 24,
  name: "Красная боевая рубашка"
}, {
  component: 11,
  drawable: 192,
  texture: 25,
  name: "Синяя боевая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 0,
  name: "Синяя цифровая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 1,
  name: "Бурая цифровая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 2,
  name: "Зеленая цифр. рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 3,
  name: "Серая цифровая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 4,
  name: "Бежевая цифр. рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 5,
  name: "Осенняя рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 6,
  name: "Лесная рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 7,
  name: "Рубашка в сетку"
}, {
  component: 11,
  drawable: 193,
  texture: 8,
  name: "Болотная цифр. рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 9,
  name: "Сероватая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 10,
  name: "Морская рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 11,
  name: "Оскольчатая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 12,
  name: "Контрастная рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 13,
  name: "Галечная рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 14,
  name: "Бежевая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 15,
  name: "Мазковая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 16,
  name: "Рубашка флектарн"
}, {
  component: 11,
  drawable: 193,
  texture: 17,
  name: "Полевая рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 18,
  name: "Болотная рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 19,
  name: "Песочная рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 20,
  name: "Черная рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 21,
  name: "Серо-синяя рубашка"
}, {
  component: 11,
  drawable: 193,
  texture: 24,
  name: "Рубашка цвета хаки"
}, {
  component: 11,
  drawable: 194,
  texture: 0,
  name: "Синяя цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 1,
  name: "Бурая цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 2,
  name: "Зелено-цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 3,
  name: "Серая цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 4,
  name: "Бежево-цифр. (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 8,
  name: "Болотная цифр. (подверн.)"
}, {
  component: 11,
  drawable: 194,
  texture: 16,
  name: "Флектарн (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 20,
  name: "Черная (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 21,
  name: "Серо-синяя (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 22,
  name: "Белая (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 23,
  name: "Коричневая (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 24,
  name: "Цвета хаки (подвернутая)"
}, {
  component: 11,
  drawable: 194,
  texture: 25,
  name: "Синяя (подвернутая)"
}, {
  component: 11,
  drawable: 195,
  texture: 0,
  name: "Черный пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 1,
  name: "Серый пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 2,
  name: "Белый пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 3,
  name: "Красный пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 4,
  name: "Оранжевый пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 5,
  name: "Желтый пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 6,
  name: "Лаймовый пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 7,
  name: "Зеленый пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 8,
  name: "Голубой пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 9,
  name: "Синий пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 10,
  name: "Лососевый пуховик-жилет"
}, {
  component: 11,
  drawable: 195,
  texture: 11,
  name: "Коричневый пуховик-жилет"
}, {
  component: 11,
  drawable: 196,
  texture: 0,
  name: "Черный легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 1,
  name: "Серый легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 2,
  name: "Белый легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 3,
  name: "Красный легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 4,
  name: "Оранжевый легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 5,
  name: "Желтый легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 6,
  name: "Лаймовый легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 7,
  name: "Зеленый легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 8,
  name: "Голубой легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 9,
  name: "Синий легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 10,
  name: "Лососевый легкий пуховик"
}, {
  component: 11,
  drawable: 196,
  texture: 11,
  name: "Коричневый легкий пуховик"
}, {
  component: 11,
  drawable: 197,
  texture: 0,
  name: "Синяя R* Class of '98"
}, {
  component: 11,
  drawable: 197,
  texture: 1,
  name: "Красная R* Class of '98"
}, {
  component: 1,
  drawable: 93,
  texture: 4,
  name: "Черный шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 5,
  name: "Охровый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 6,
  name: "Зеленый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 7,
  name: "Оливковый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 8,
  name: "Полевой шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 9,
  name: "Морской шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 10,
  name: "Оскольчатый шлем летчика"
}, {
  component: 1,
  drawable: 93,
  texture: 11,
  name: "Цифровой шлем летчика"
}, {
  component: 11,
  drawable: 201,
  texture: 0,
  name: "Зеленая летная (закр.)"
}, {
  component: 11,
  drawable: 201,
  texture: 1,
  name: "Коричневая летная (закр.)"
}, {
  component: 11,
  drawable: 201,
  texture: 2,
  name: "Черная летная (закр.)"
}, {
  component: 11,
  drawable: 201,
  texture: 3,
  name: "Серая летная (закр.)"
}, {
  component: 11,
  drawable: 201,
  texture: 4,
  name: "Белая летная (закр.)"
}, {
  component: 11,
  drawable: 201,
  texture: 5,
  name: "Сине-зеленая летная (закр.)"
}, {
  component: 11,
  drawable: 201,
  texture: 6,
  name: "Темно-синяя летная (закр.)"
}, {
  component: 11,
  drawable: 201,
  texture: 7,
  name: "Бордовая летная (закр.)"
}, {
  component: 11,
  drawable: 202,
  texture: 1,
  name: "Коричневая летная куртка"
}, {
  component: 11,
  drawable: 202,
  texture: 3,
  name: "Серая летная куртка"
}, {
  component: 11,
  drawable: 202,
  texture: 4,
  name: "Белая летная куртка"
}, {
  component: 11,
  drawable: 202,
  texture: 5,
  name: "Сине-зеленая летная куртка"
}, {
  component: 11,
  drawable: 202,
  texture: 6,
  name: "Темно-синяя летная куртка"
}, {
  component: 11,
  drawable: 202,
  texture: 7,
  name: "Бордовая летная куртка"
}, {
  component: 1,
  drawable: 94,
  texture: 0,
  name: "Черная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 1,
  name: "Синяя цифр. маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 2,
  name: "Бурая цифр. маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 3,
  name: "Зеленая цифр. маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 4,
  name: "Осенняя маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 5,
  name: "Лесная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 6,
  name: "Маска робота в сетку"
}, {
  component: 1,
  drawable: 94,
  texture: 7,
  name: "Сероватая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 8,
  name: "Морская маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 9,
  name: "Оскольчатая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 10,
  name: "Контрастная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 11,
  name: "Галечная маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 12,
  name: "Бежевая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 13,
  name: "Мазковая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 14,
  name: "Маска робота флектарн"
}, {
  component: 1,
  drawable: 94,
  texture: 15,
  name: "Полевая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 16,
  name: "Серо-синяя маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 17,
  name: "Серо-желтая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 18,
  name: "Рыже-белая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 19,
  name: "Желтая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 20,
  name: "Черно-белая маска робота"
}, {
  component: 1,
  drawable: 94,
  texture: 21,
  name: "Белая маска робота"
}, {
  component: 1,
  drawable: 95,
  texture: 4,
  name: "Синяя бандана Blagueurs"
}, {
  component: 1,
  drawable: 95,
  texture: 5,
  name: "Красная бандана Blagueurs"
}, {
  component: 1,
  drawable: 95,
  texture: 6,
  name: "Яркая абстрактная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 7,
  name: "Геометрическая бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 8,
  name: "Оскольчатая бандана Bigness"
}, {
  component: 1,
  drawable: 95,
  texture: 9,
  name: "Красная бандана Bigness"
}, {
  component: 1,
  drawable: 95,
  texture: 10,
  name: "Зеленая бандана с листьями"
}, {
  component: 1,
  drawable: 95,
  texture: 11,
  name: "Синяя бандана с листьями"
}, {
  component: 1,
  drawable: 95,
  texture: 12,
  name: "Красная бандана Manor"
}, {
  component: 1,
  drawable: 95,
  texture: 13,
  name: "Черная бандана Manor"
}, {
  component: 1,
  drawable: 95,
  texture: 14,
  name: "Бандана Manor с черепами"
}, {
  component: 1,
  drawable: 95,
  texture: 15,
  name: "Белая бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 16,
  name: "Оранжевая бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 17,
  name: "Черная бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 18,
  name: "Cерая бандана Broker"
}, {
  component: 1,
  drawable: 95,
  texture: 19,
  name: "Звездно-полосатая бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 20,
  name: "Крашеная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 21,
  name: "Фрактальная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 22,
  name: "Контрастная бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 23,
  name: "Черно-белая бандана"
}, {
  component: 1,
  drawable: 95,
  texture: 24,
  name: "Бандана с темным узором"
}, {
  component: 1,
  drawable: 95,
  texture: 25,
  name: "Бандана со светлым узором"
}, {
  component: 1,
  drawable: 96,
  texture: 0,
  name: "Черная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 1,
  name: "Синяя цифр. маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 2,
  name: "Бурая цифр. маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 3,
  name: "Зеленая цифр. маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 4,
  name: "Осенняя маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 5,
  name: "Лесная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 6,
  name: "Маска-рыло в сетку"
}, {
  component: 1,
  drawable: 96,
  texture: 7,
  name: "Сероватая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 8,
  name: "Морская маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 9,
  name: "Оскольчатая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 10,
  name: "Контрастная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 11,
  name: "Галечная маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 12,
  name: "Бежевая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 13,
  name: "Мазковая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 14,
  name: "Маска-рыло флектарн"
}, {
  component: 1,
  drawable: 96,
  texture: 15,
  name: "Полевая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 16,
  name: "Серо-синяя маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 17,
  name: "Серо-желтая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 18,
  name: "Рыже-белая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 19,
  name: "Желтая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 20,
  name: "Черно-белая маска-рыло"
}, {
  component: 1,
  drawable: 96,
  texture: 21,
  name: "Белая маска-рыло"
}, {
  component: 1,
  drawable: 97,
  texture: 0,
  name: "Скейтерская плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 1,
  name: "Плотная с листьями"
}, {
  component: 1,
  drawable: 97,
  texture: 2,
  name: "Плотная лаймовая Xero"
}, {
  component: 1,
  drawable: 97,
  texture: 3,
  name: "Плотная тропическая Xero"
}, {
  component: 1,
  drawable: 97,
  texture: 4,
  name: "Плотная с красной полосой"
}, {
  component: 1,
  drawable: 97,
  texture: 5,
  name: "Плотная серая Bigness"
}, {
  component: 1,
  drawable: 97,
  texture: 6,
  name: "Оранжево-красная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 7,
  name: "Красочная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 8,
  name: "Плотная синяя Bigness"
}, {
  component: 1,
  drawable: 97,
  texture: 9,
  name: "Горчичная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 10,
  name: "Звездно-полосатая плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 11,
  name: "Плотная черная с черепом"
}, {
  component: 1,
  drawable: 97,
  texture: 12,
  name: "Плотная белая с черепом"
}, {
  component: 1,
  drawable: 97,
  texture: 17,
  name: "Плотная маска San Andreas"
}, {
  component: 1,
  drawable: 97,
  texture: 18,
  name: "Плотная черная звездная"
}, {
  component: 1,
  drawable: 97,
  texture: 19,
  name: "Черно-красная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 20,
  name: "Яркая абстрактная плотная"
}, {
  component: 1,
  drawable: 97,
  texture: 21,
  name: "Плотная камуфл. Bigness"
}, {
  component: 1,
  drawable: 98,
  texture: 0,
  name: "Коричневый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 1,
  name: "Сине-зеленый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 2,
  name: "Зеленый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 3,
  name: "Желтый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 4,
  name: "Бирюзовый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 5,
  name: "Бурый цифр. шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 6,
  name: "Шемаг с желтым узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 7,
  name: "Шемаг с бордовым узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 8,
  name: "Бежевый цифр. шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 9,
  name: "Осенний шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 10,
  name: "Лесной шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 11,
  name: "Шемаг с рыжим узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 12,
  name: "Шемаг с красным узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 13,
  name: "Сероватый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 14,
  name: "Шемаг с синим узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 15,
  name: "Оскольчатый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 16,
  name: "Шемаг с лиловым узором (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 17,
  name: "Шемаг Jolly Roger (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 18,
  name: "Бежевый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 19,
  name: "Мазковый шемаг (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 20,
  name: "Шемаг флектарн (о)"
}, {
  component: 1,
  drawable: 98,
  texture: 21,
  name: "Шемаг с военным узором (о)"
}, {
  component: 1,
  drawable: 99,
  texture: 0,
  name: "Коричневый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 1,
  name: "Сине-зеленый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 2,
  name: "Зеленый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 3,
  name: "Желтый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 4,
  name: "Бирюзовый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 5,
  name: "Бурый цифр. шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 6,
  name: "Шемаг с красным узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 7,
  name: "Шемаг Jolly Roger (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 8,
  name: "Бежевый цифр. шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 9,
  name: "Осенний шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 10,
  name: "Лесной шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 11,
  name: "Шемаг с военным узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 12,
  name: "Шемаг с синим узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 13,
  name: "Сероватый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 14,
  name: "Шемаг с темным узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 15,
  name: "Оскольчатый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 16,
  name: "Шемаг с бордовым узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 17,
  name: "Шемаг с рыжим узором (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 18,
  name: "Бежевый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 19,
  name: "Мазковый шемаг (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 20,
  name: "Шемаг флектарн (з)"
}, {
  component: 1,
  drawable: 99,
  texture: 21,
  name: "Шемаг с лиловым узором (з)"
}, {
  component: 1,
  drawable: 100,
  texture: 0,
  name: "Коричневый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 1,
  name: "Сине-зеленый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 2,
  name: "Зеленый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 3,
  name: "Желтый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 4,
  name: "Бирюзовый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 5,
  name: "Бурый цифр. шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 6,
  name: "Бордовый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 7,
  name: "Оранжевый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 8,
  name: "Бежевый цифр. шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 9,
  name: "Осенний шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 10,
  name: "Лесной шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 11,
  name: "Синий шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 12,
  name: "Лиловый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 13,
  name: "Сероватый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 14,
  name: "Шарф-труба с желтым узором"
}, {
  component: 1,
  drawable: 100,
  texture: 15,
  name: "Оскольчатый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 16,
  name: "Красный шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 17,
  name: "Военный шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 18,
  name: "Бежевый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 19,
  name: "Мазковый шарф-труба"
}, {
  component: 1,
  drawable: 100,
  texture: 20,
  name: "Шарф-труба флектарн"
}, {
  component: 1,
  drawable: 100,
  texture: 21,
  name: "Шарф-труба Jolly Roger"
}, {
  component: 1,
  drawable: 101,
  texture: 0,
  name: "Вязаная в яркую полоску"
}, {
  component: 1,
  drawable: 101,
  texture: 1,
  name: "Темно-красная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 2,
  name: "Зелено-бежевая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 3,
  name: "Закатная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 4,
  name: "Серая цифровая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 5,
  name: "Сероватая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 6,
  name: "Бурая цифровая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 7,
  name: "Вязаная с красной полосой"
}, {
  component: 1,
  drawable: 101,
  texture: 8,
  name: "Вязаная с черепом"
}, {
  component: 1,
  drawable: 101,
  texture: 9,
  name: "Бордовая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 10,
  name: "Салатовая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 11,
  name: "Морская вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 12,
  name: "Разноцветная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 13,
  name: "Черно-красная вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 14,
  name: "Зеленая полосатая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 15,
  name: "Тигровая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 16,
  name: "Леопардовая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 17,
  name: "Вязаная с темным узором"
}, {
  component: 1,
  drawable: 101,
  texture: 18,
  name: "Звездно-полосатая вязаная"
}, {
  component: 1,
  drawable: 101,
  texture: 19,
  name: "Синяя вязаная Luchador"
}, {
  component: 1,
  drawable: 101,
  texture: 20,
  name: "Зеленая вязаная Luchador"
}, {
  component: 1,
  drawable: 102,
  texture: 4,
  name: "Пурпурная маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 5,
  name: "Темно-синяя маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 6,
  name: "Маска-футболка с листьями"
}, {
  component: 1,
  drawable: 102,
  texture: 7,
  name: "Серая цифр. маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 8,
  name: "Морская маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 9,
  name: "Красная камуфл. футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 10,
  name: "Камуфл. футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 11,
  name: "Черная футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 12,
  name: "Красная футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 13,
  name: "Серая футболка Bigness"
}, {
  component: 1,
  drawable: 102,
  texture: 14,
  name: "Трехцветная маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 15,
  name: "Маска-футболка OJ Squash"
}, {
  component: 1,
  drawable: 102,
  texture: 16,
  name: "Зелено-розовая футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 17,
  name: "Звездно-полосатая футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 18,
  name: "Черная звездная футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 19,
  name: "Маска-футболка SA Republic"
}, {
  component: 1,
  drawable: 102,
  texture: 20,
  name: "Лазурная маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 21,
  name: "Психоделическая футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 22,
  name: "Розовая маска-футболка"
}, {
  component: 1,
  drawable: 102,
  texture: 23,
  name: "Футболка с рыжим узором"
}, {
  component: 1,
  drawable: 102,
  texture: 24,
  name: "Футболка с зеленым узором"
}, {
  component: 1,
  drawable: 102,
  texture: 25,
  name: "Футболка с розовым узором"
}, {
  component: 1,
  drawable: 103,
  texture: 0,
  name: "С черепом потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 1,
  name: "Пепельная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 2,
  name: "Угольно-черная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 3,
  name: "Каштановая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 4,
  name: "Синяя потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 5,
  name: "Джутовая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 6,
  name: "Бордовая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 11,
  name: "Ярко-зеленая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 12,
  name: "Бежевая полосатая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 13,
  name: "Растаманская потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 14,
  name: "Потертая c тремя полосками"
}, {
  component: 1,
  drawable: 103,
  texture: 15,
  name: "Потертая в желтую полоску"
}, {
  component: 1,
  drawable: 103,
  texture: 16,
  name: "Пурпурная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 17,
  name: "Красочная потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 18,
  name: "Скейтерская потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 19,
  name: "Розовая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 20,
  name: "Морская потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 21,
  name: "Серая цифровая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 22,
  name: "Сероватая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 23,
  name: "Красивая потертая"
}, {
  component: 1,
  drawable: 103,
  texture: 24,
  name: "Неоновая потертая"
}, {
  component: 6,
  drawable: 59,
  texture: 0,
  name: "Классические прошитые"
}, {
  component: 6,
  drawable: 59,
  texture: 1,
  name: "Черные прошитые ботинки"
}, {
  component: 6,
  drawable: 59,
  texture: 2,
  name: "Угольно-черные прошитые"
}, {
  component: 6,
  drawable: 59,
  texture: 3,
  name: "Каштановые прошитые"
}, {
  component: 6,
  drawable: 59,
  texture: 4,
  name: "Бежевые прошитые ботинки"
}, {
  component: 6,
  drawable: 59,
  texture: 5,
  name: "Ржавые прошитые ботинки"
}, {
  component: 6,
  drawable: 59,
  texture: 6,
  name: "Рыжие прошитые ботинки"
}, {
  component: 8,
  drawable: 143,
  texture: 0,
  name: "Темная LC Beavers"
}, {
  component: 8,
  drawable: 143,
  texture: 1,
  name: "Светлая LC Beavers"
}, {
  component: 8,
  drawable: 143,
  texture: 2,
  name: "Темная LC Benders"
}, {
  component: 8,
  drawable: 143,
  texture: 3,
  name: "Светлая LC Benders"
}, {
  component: 8,
  drawable: 143,
  texture: 4,
  name: "Светлая LC Jardineros"
}, {
  component: 8,
  drawable: 143,
  texture: 5,
  name: "Темная LC Jardineros"
}, {
  component: 8,
  drawable: 143,
  texture: 6,
  name: "Темная Liberty Cocks"
}, {
  component: 8,
  drawable: 143,
  texture: 7,
  name: "Светлая Liberty Cocks"
}, {
  component: 8,
  drawable: 143,
  texture: 8,
  name: "Темная Red Mist XI"
}, {
  component: 8,
  drawable: 143,
  texture: 9,
  name: "Светлая Red Mist XI"
}, {
  component: 8,
  drawable: 143,
  texture: 10,
  name: "Темная Superstroika"
}, {
  component: 8,
  drawable: 143,
  texture: 11,
  name: "Светлая Superstroika"
}, {
  component: 11,
  drawable: 204,
  texture: 0,
  name: "Зеленая полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 1,
  name: "Песочная полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 2,
  name: "Коричневая полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 3,
  name: "Синяя полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 4,
  name: "Черная полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 5,
  name: "Угольная полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 6,
  name: "Пепельная полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 7,
  name: "Бежевая полевая (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 8,
  name: "Полевая куртка (закр.)"
}, {
  component: 11,
  drawable: 204,
  texture: 9,
  name: "Лесная полевая (закр.)"
}, {
  component: 11,
  drawable: 205,
  texture: 0,
  name: "Зеленая полевая куртка"
}, {
  component: 11,
  drawable: 205,
  texture: 1,
  name: "Песочная полевая куртка"
}, {
  component: 11,
  drawable: 205,
  texture: 3,
  name: "Синяя полевая куртка"
}, {
  component: 11,
  drawable: 205,
  texture: 5,
  name: "Угольная полевая куртка"
}, {
  component: 11,
  drawable: 205,
  texture: 6,
  name: "Пепельная полевая куртка"
}, {
  component: 11,
  drawable: 205,
  texture: 7,
  name: "Бежевая полевая куртка"
}, {
  component: 11,
  drawable: 205,
  texture: 8,
  name: "Полевая куртка"
}, {
  component: 11,
  drawable: 205,
  texture: 9,
  name: "Лесная полевая куртка"
}, {
  component: 11,
  drawable: 206,
  texture: 0,
  name: "Черная"
}, {
  component: 11,
  drawable: 206,
  texture: 1,
  name: "Угольная"
}, {
  component: 11,
  drawable: 206,
  texture: 2,
  name: "Серая"
}, {
  component: 11,
  drawable: 206,
  texture: 3,
  name: "Пепельная"
}, {
  component: 11,
  drawable: 206,
  texture: 4,
  name: "Белая"
}, {
  component: 11,
  drawable: 206,
  texture: 5,
  name: "Скейтерская Güffy"
}, {
  component: 11,
  drawable: 206,
  texture: 6,
  name: "Красная Güffy"
}, {
  component: 11,
  drawable: 206,
  texture: 7,
  name: "С разноцветными листьями"
}, {
  component: 11,
  drawable: 206,
  texture: 8,
  name: "С зелеными листьями"
}, {
  component: 11,
  drawable: 206,
  texture: 9,
  name: "Зеленая пятнистая"
}, {
  component: 11,
  drawable: 206,
  texture: 10,
  name: "Голубая пятнистая"
}, {
  component: 11,
  drawable: 206,
  texture: 11,
  name: "Неоновая Güffy"
}, {
  component: 11,
  drawable: 206,
  texture: 12,
  name: "Белая Güffy"
}, {
  component: 11,
  drawable: 206,
  texture: 13,
  name: "Голубая с узором"
}, {
  component: 11,
  drawable: 206,
  texture: 14,
  name: "Розовая с узором"
}, {
  component: 11,
  drawable: 206,
  texture: 15,
  name: "Рубашка OJ"
}, {
  component: 11,
  drawable: 206,
  texture: 16,
  name: "Рубашка Splat"
}, {
  component: 11,
  drawable: 206,
  texture: 17,
  name: "Синяя в клетку"
}, {
  component: 11,
  drawable: 206,
  texture: 18,
  name: "Синяя с узором"
}, {
  component: 11,
  drawable: 206,
  texture: 21,
  name: "Серая в клетку"
}, {
  component: 11,
  drawable: 206,
  texture: 22,
  name: "Синяя в горошек"
}, {
  component: 11,
  drawable: 206,
  texture: 23,
  name: "Черная в горошек"
}, {
  component: 11,
  drawable: 206,
  texture: 24,
  name: "Голубая в горошек"
}, {
  component: 11,
  drawable: 206,
  texture: 25,
  name: "Белая в горошек"
}, {
  component: 11,
  drawable: 210,
  texture: 0,
  name: "Сине-зеленая куртка на меху"
}, {
  component: 11,
  drawable: 210,
  texture: 1,
  name: "Шафрановая куртка на меху"
}, {
  component: 11,
  drawable: 210,
  texture: 4,
  name: "Оранжевая куртка на меху"
}, {
  component: 11,
  drawable: 210,
  texture: 5,
  name: "Гламурная куртка на меху"
}, {
  component: 1,
  drawable: 108,
  texture: 0,
  name: "Безумный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 1,
  name: "Безумный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 2,
  name: "Безумный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 3,
  name: "Веселый электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 4,
  name: "Веселый светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 5,
  name: "Веселый неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 6,
  name: "Взбешенный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 7,
  name: "Взбешенный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 8,
  name: "Взбешенный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 9,
  name: "Довольный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 10,
  name: "Довольный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 11,
  name: "Довольный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 12,
  name: "Мирный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 13,
  name: "Мирный электрический"
}, {
  component: 1,
  drawable: 108,
  texture: 14,
  name: "Мирный светящийся"
}, {
  component: 1,
  drawable: 108,
  texture: 15,
  name: "Трансцендентный светящ."
}, {
  component: 1,
  drawable: 108,
  texture: 16,
  name: "Трансцендентный электрич."
}, {
  component: 1,
  drawable: 108,
  texture: 17,
  name: "Трансцендентный неоновый"
}, {
  component: 1,
  drawable: 108,
  texture: 18,
  name: "Электрический трайбл"
}, {
  component: 1,
  drawable: 108,
  texture: 19,
  name: "Светящийся трайбл"
}, {
  component: 1,
  drawable: 108,
  texture: 20,
  name: "Неоновый трайбл"
}, {
  component: 1,
  drawable: 108,
  texture: 21,
  name: "Светящийся Iwazaru"
}, {
  component: 1,
  drawable: 108,
  texture: 22,
  name: "Электрический Iwazaru"
}, {
  component: 1,
  drawable: 108,
  texture: 23,
  name: "Неоновый Iwazaru"
}, {
  component: 1,
  drawable: 109,
  texture: 0,
  name: "Черная защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 1,
  name: "Серая защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 2,
  name: "Белая защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 3,
  name: "Песочная защитная Mono"
}, {
  component: 1,
  drawable: 109,
  texture: 8,
  name: "Песочная (выпуклые глаза)"
}, {
  component: 1,
  drawable: 109,
  texture: 9,
  name: "Красная (выпуклые глаза)"
}, {
  component: 1,
  drawable: 109,
  texture: 10,
  name: "Черная карбоновая"
}, {
  component: 1,
  drawable: 109,
  texture: 11,
  name: "Песочная карбоновая"
}, {
  component: 1,
  drawable: 109,
  texture: 12,
  name: "Узор-череп"
}, {
  component: 1,
  drawable: 109,
  texture: 13,
  name: "Флектарн"
}, {
  component: 1,
  drawable: 109,
  texture: 14,
  name: "Оскольчатая защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 15,
  name: "Красно-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 16,
  name: "Сине-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 17,
  name: "Желто-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 18,
  name: "Оранжево-черная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 19,
  name: "Черно-белая защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 20,
  name: "С красной полосой"
}, {
  component: 1,
  drawable: 109,
  texture: 21,
  name: "С черной полосой"
}, {
  component: 1,
  drawable: 109,
  texture: 22,
  name: "Красно-белая защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 23,
  name: "Красная защитная"
}, {
  component: 1,
  drawable: 109,
  texture: 24,
  name: "Коричневая цифровая"
}, {
  component: 1,
  drawable: 109,
  texture: 25,
  name: "Осенняя защитная"
}, {
  component: 1,
  drawable: 110,
  texture: 1,
  name: "Карбоновая"
}, {
  component: 1,
  drawable: 110,
  texture: 2,
  name: "Серая чешуйчатая"
}, {
  component: 1,
  drawable: 110,
  texture: 3,
  name: "Песочная цифровая"
}, {
  component: 1,
  drawable: 110,
  texture: 4,
  name: "Боевая Морской камуфляж"
}, {
  component: 1,
  drawable: 110,
  texture: 5,
  name: "Оскольчатая"
}, {
  component: 1,
  drawable: 110,
  texture: 6,
  name: "Оскольчатая Mono"
}, {
  component: 1,
  drawable: 110,
  texture: 7,
  name: "Тактическая Серый лес"
}, {
  component: 1,
  drawable: 110,
  texture: 8,
  name: "Тактическая Темный лес"
}, {
  component: 1,
  drawable: 110,
  texture: 9,
  name: "Электрический череп"
}, {
  component: 1,
  drawable: 110,
  texture: 10,
  name: "Полиция Лос-Сантоса"
}, {
  component: 1,
  drawable: 110,
  texture: 12,
  name: "Полосатая"
}, {
  component: 1,
  drawable: 110,
  texture: 13,
  name: "Опера"
}, {
  component: 1,
  drawable: 111,
  texture: 0,
  name: "Маска Праздничный пряник"
}, {
  component: 1,
  drawable: 111,
  texture: 1,
  name: "Маска Веселый пряник"
}, {
  component: 1,
  drawable: 111,
  texture: 2,
  name: "Маска Радостный пряник"
}, {
  component: 1,
  drawable: 111,
  texture: 3,
  name: "Маска Довольный пряник"
}, {
  component: 1,
  drawable: 112,
  texture: 0,
  name: "Серый лес"
}, {
  component: 1,
  drawable: 112,
  texture: 1,
  name: "Маска Морской камуфляж"
}, {
  component: 1,
  drawable: 112,
  texture: 2,
  name: "Заголовок"
}, {
  component: 1,
  drawable: 112,
  texture: 3,
  name: "Оскольчатый камуфляж"
}, {
  component: 1,
  drawable: 112,
  texture: 4,
  name: "Коричневый цифровой"
}, {
  component: 1,
  drawable: 112,
  texture: 5,
  name: "Полосатый лесной"
}, {
  component: 1,
  drawable: 112,
  texture: 6,
  name: "Узор из камня"
}, {
  component: 1,
  drawable: 112,
  texture: 7,
  name: "Восходящее солнце"
}, {
  component: 1,
  drawable: 112,
  texture: 9,
  name: "Звезды и полосы"
}, {
  component: 1,
  drawable: 112,
  texture: 10,
  name: "Зеленый узор"
}, {
  component: 1,
  drawable: 112,
  texture: 11,
  name: "Готика"
}, {
  component: 1,
  drawable: 113,
  texture: 0,
  name: "Серый противогаз"
}, {
  component: 1,
  drawable: 113,
  texture: 1,
  name: "Карбоновый противогаз"
}, {
  component: 1,
  drawable: 113,
  texture: 2,
  name: "Бежевый цифровой"
}, {
  component: 1,
  drawable: 113,
  texture: 3,
  name: "Морской камуфляж"
}, {
  component: 1,
  drawable: 113,
  texture: 4,
  name: "Оскольчатый противогаз"
}, {
  component: 1,
  drawable: 113,
  texture: 5,
  name: "Серый оскольчатый"
}, {
  component: 1,
  drawable: 113,
  texture: 6,
  name: "Серый полосатый"
}, {
  component: 1,
  drawable: 113,
  texture: 7,
  name: "Болотный полосатый"
}, {
  component: 1,
  drawable: 113,
  texture: 8,
  name: "Персиковый камуфляж"
}, {
  component: 1,
  drawable: 113,
  texture: 9,
  name: "Лесной цифровой"
}, {
  component: 1,
  drawable: 113,
  texture: 10,
  name: "Противогаз-череп"
}, {
  component: 1,
  drawable: 113,
  texture: 11,
  name: "Белый индустриальный"
}, {
  component: 1,
  drawable: 113,
  texture: 12,
  name: "Желтый индустриальный"
}, {
  component: 1,
  drawable: 113,
  texture: 13,
  name: "Оранжевый индустриальный"
}, {
  component: 1,
  drawable: 114,
  texture: 0,
  name: "Черный респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 1,
  name: "Респиратор флектарн"
}, {
  component: 1,
  drawable: 114,
  texture: 2,
  name: "Серый цифровой респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 3,
  name: "Морской камуфляжный"
}, {
  component: 1,
  drawable: 114,
  texture: 4,
  name: "Оскольчатый респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 6,
  name: "Тигровый респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 8,
  name: "Зеленый цифровой"
}, {
  component: 1,
  drawable: 114,
  texture: 9,
  name: "Мазковый респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 10,
  name: "Серый лесной респиратор"
}, {
  component: 1,
  drawable: 114,
  texture: 11,
  name: "Респиратор (узор из камня)"
}, {
  component: 1,
  drawable: 114,
  texture: 12,
  name: "Контрастный камуфляжный"
}, {
  component: 1,
  drawable: 114,
  texture: 13,
  name: "Респиратор Гадюка"
}, {
  component: 1,
  drawable: 114,
  texture: 14,
  name: "Респиратор в сетку"
}, {
  component: 1,
  drawable: 115,
  texture: 0,
  name: "Отвратительный Крампус"
}, {
  component: 1,
  drawable: 115,
  texture: 1,
  name: "Грозный Крампус"
}, {
  component: 1,
  drawable: 115,
  texture: 2,
  name: "Гнусный Крампус"
}, {
  component: 1,
  drawable: 115,
  texture: 3,
  name: "Мерзкий Крампус"
}, {
  component: 1,
  drawable: 116,
  texture: 0,
  name: "Черный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 1,
  name: "Белый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 2,
  name: "Серый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 3,
  name: "Синий ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 4,
  name: "Песочный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 5,
  name: "Болотный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 6,
  name: "Бурый камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 7,
  name: "Морской камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 8,
  name: "Серый камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 9,
  name: "Белый цифровой ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 10,
  name: "Зеленый цифровой ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 11,
  name: "Оскольчатый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 12,
  name: "Маскировочный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 13,
  name: "Коричневый цифровой ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 14,
  name: "Лесной ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 15,
  name: "Серый лесной ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 16,
  name: "ПНВ в сетку"
}, {
  component: 1,
  drawable: 116,
  texture: 18,
  name: "ПНВ (узор из камня)"
}, {
  component: 1,
  drawable: 116,
  texture: 19,
  name: "Болотный полосатый ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 20,
  name: "Белый камуфляжный ПНВ"
}, {
  component: 1,
  drawable: 116,
  texture: 21,
  name: "ПНВ (череп)"
}, {
  component: 6,
  drawable: 64,
  texture: 0,
  name: "Желто-зеленые ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 1,
  name: "Черные ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 2,
  name: "Серо-красные ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 3,
  name: "Серые ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 4,
  name: "Ботинки цвета хаки"
}, {
  component: 6,
  drawable: 64,
  texture: 5,
  name: "Песочные ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 6,
  name: "Ботинки цвета ржавчины"
}, {
  component: 6,
  drawable: 64,
  texture: 7,
  name: "Лесные камуфляжные"
}, {
  component: 6,
  drawable: 64,
  texture: 8,
  name: "Морские камуфляжные"
}, {
  component: 6,
  drawable: 64,
  texture: 9,
  name: "Голубые камуфляжные"
}, {
  component: 6,
  drawable: 64,
  texture: 12,
  name: "Светло-синие ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 13,
  name: "Темно-синие ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 14,
  name: "Ботинки с узором"
}, {
  component: 6,
  drawable: 64,
  texture: 15,
  name: "Голубые ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 16,
  name: "Оранжевые ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 17,
  name: "Красные ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 18,
  name: "Болотные ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 19,
  name: "Синие ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 20,
  name: "Осенние камуфляжные"
}, {
  component: 6,
  drawable: 64,
  texture: 21,
  name: "Оскольчатые ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 22,
  name: "Красно-белые ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 23,
  name: "Черно-красные ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 24,
  name: "Черно-синие ботинки"
}, {
  component: 6,
  drawable: 64,
  texture: 25,
  name: "Коричневые ботинки"
}, {
  component: 6,
  drawable: 66,
  texture: 0,
  name: "Черные походные"
}, {
  component: 6,
  drawable: 66,
  texture: 1,
  name: "Черно-желтые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 2,
  name: "Черно-синие походные"
}, {
  component: 6,
  drawable: 66,
  texture: 3,
  name: "Бежевые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 4,
  name: "Серо-желтые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 5,
  name: "Осенние походные"
}, {
  component: 6,
  drawable: 66,
  texture: 6,
  name: "Серо-коричневые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 7,
  name: "Коричневые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 8,
  name: "Черно-коричневые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 9,
  name: "Белые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 10,
  name: "Лесные походные"
}, {
  component: 6,
  drawable: 66,
  texture: 11,
  name: "Темно-серые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 12,
  name: "Песочные походные"
}, {
  component: 6,
  drawable: 66,
  texture: 13,
  name: "Болотные походные"
}, {
  component: 6,
  drawable: 66,
  texture: 14,
  name: "Походные цвета хаки"
}, {
  component: 6,
  drawable: 66,
  texture: 15,
  name: "Серые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 16,
  name: "Угольные походные"
}, {
  component: 6,
  drawable: 66,
  texture: 17,
  name: "Красные походные"
}, {
  component: 6,
  drawable: 66,
  texture: 18,
  name: "Оранжевые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 19,
  name: "Синие походные"
}, {
  component: 6,
  drawable: 66,
  texture: 20,
  name: "Темно-синие походные"
}, {
  component: 6,
  drawable: 66,
  texture: 21,
  name: "Зеленые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 22,
  name: "Голубые походные"
}, {
  component: 6,
  drawable: 66,
  texture: 23,
  name: "Сине-коричневые походные"
}, {
  component: 6,
  drawable: 68,
  texture: 0,
  name: "Черные для кэтсьюта"
}, {
  component: 6,
  drawable: 68,
  texture: 1,
  name: "Серые для кэтсьюта"
}, {
  component: 6,
  drawable: 68,
  texture: 2,
  name: "Коричневые для кэтсьюта"
}, {
  component: 6,
  drawable: 68,
  texture: 3,
  name: "Бежевые для кэтсьюта"
}, {
  component: 6,
  drawable: 68,
  texture: 4,
  name: "Желтые для кэтсьюта"
}, {
  component: 8,
  drawable: 148,
  texture: 0,
  name: "Нагрудник (сверхлегкий)"
}, {
  component: 8,
  drawable: 149,
  texture: 0,
  name: "Нагрудник (легкий)"
}, {
  component: 8,
  drawable: 150,
  texture: 0,
  name: "Нагрудник (средний)"
}, {
  component: 8,
  drawable: 151,
  texture: 0,
  name: "Нагрудник (тяжелый)"
}, {
  component: 8,
  drawable: 152,
  texture: 0,
  name: "Нагрудник (сверхтяжелый)"
}, {
  component: 8,
  drawable: 155,
  texture: 0,
  name: "Черный бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 1,
  name: "Угольный бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 2,
  name: "Пепельный бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 3,
  name: "Белый бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 4,
  name: "Темно-синий бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 5,
  name: "Темно-желтый бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 6,
  name: "Песочный бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 7,
  name: "Светло-желтый бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 8,
  name: "Лососевый бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 9,
  name: "Болотный бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 10,
  name: "Бежевый бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 11,
  name: "Бурый цифровой бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 12,
  name: "Осенний бронежилет"
}, {
  component: 8,
  drawable: 155,
  texture: 13,
  name: "Белый камуфляжный"
}, {
  component: 8,
  drawable: 155,
  texture: 14,
  name: "Бежевый камуфляжный"
}, {
  component: 8,
  drawable: 155,
  texture: 15,
  name: "Красный камуфляжный"
}, {
  component: 11,
  drawable: 214,
  texture: 0,
  name: "Короткая цвета хаки"
}, {
  component: 11,
  drawable: 214,
  texture: 1,
  name: "Зеленая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 2,
  name: "Светло-серая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 3,
  name: "Маскировочная короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 4,
  name: "Голубая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 5,
  name: "Черная короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 6,
  name: "Черно-белая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 7,
  name: "Белая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 8,
  name: "Желто-зеленая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 9,
  name: "Розовая камуфл. короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 10,
  name: "Белая камуфл. короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 11,
  name: "Голубая камуфл. короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 12,
  name: "Черно-красная короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 13,
  name: "Зелено-красная короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 14,
  name: "Черно-серая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 15,
  name: "Охровая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 16,
  name: "Серо-коричневая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 17,
  name: "Горчичная короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 18,
  name: "Оранжевая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 19,
  name: "Темно-зеленая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 20,
  name: "Коричневая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 21,
  name: "Лилово-желтая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 22,
  name: "Темно-серая короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 24,
  name: "Осенняя короткая"
}, {
  component: 11,
  drawable: 214,
  texture: 25,
  name: "Синяя короткая"
}, {
  component: 11,
  drawable: 215,
  texture: 0,
  name: "Зеленый гадкий свитер"
}, {
  component: 11,
  drawable: 215,
  texture: 1,
  name: "Красный гадкий свитер"
}, {
  component: 11,
  drawable: 215,
  texture: 2,
  name: "Гадкий свитер Единорог"
}, {
  component: 11,
  drawable: 215,
  texture: 3,
  name: "Гадкий свитер Клаус"
}, {
  component: 11,
  drawable: 215,
  texture: 4,
  name: "Гадкий свитер Динозавр"
}, {
  component: 11,
  drawable: 215,
  texture: 5,
  name: "Гадкий свитер Чепуха"
}, {
  component: 11,
  drawable: 215,
  texture: 6,
  name: "Гадкий свитер Полюс"
}, {
  component: 11,
  drawable: 215,
  texture: 7,
  name: "Гадкий свитер Поверь"
}, {
  component: 11,
  drawable: 215,
  texture: 8,
  name: "Гадкий свитер Олень"
}, {
  component: 11,
  drawable: 215,
  texture: 9,
  name: "Гадкий свитер Эльф-шалун"
}, {
  component: 11,
  drawable: 217,
  texture: 2,
  name: "Охровая без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 4,
  name: "Угольная без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 5,
  name: "Без рукавов с синей каймой"
}, {
  component: 11,
  drawable: 217,
  texture: 6,
  name: "Без рукавов с алой каймой"
}, {
  component: 11,
  drawable: 217,
  texture: 9,
  name: "Белая камуфл. без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 12,
  name: "Розовая камуфл. без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 13,
  name: "Темно-синяя без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 14,
  name: "Темно-зеленая без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 15,
  name: "Оранжевая без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 16,
  name: "Светло-серая без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 17,
  name: "Черно-белая без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 18,
  name: "Голубая без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 19,
  name: "Без рукавов цвета хаки"
}, {
  component: 11,
  drawable: 217,
  texture: 21,
  name: "Голубая камуфл. без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 22,
  name: "Маскировочная без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 24,
  name: "Сине-серая без рукавов"
}, {
  component: 11,
  drawable: 217,
  texture: 25,
  name: "Серо-бурая без рукавов"
}, {
  component: 11,
  drawable: 218,
  texture: 0,
  name: "Черная удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 1,
  name: "Кофейная удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 2,
  name: "Оливковая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 3,
  name: "Лесная удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 4,
  name: "Синяя камуфляжная"
}, {
  component: 11,
  drawable: 218,
  texture: 5,
  name: "Бежевая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 6,
  name: "Черно-серая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 7,
  name: "Темно-желтая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 8,
  name: "Серо-черная удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 9,
  name: "Голубая камуфляжная"
}, {
  component: 11,
  drawable: 218,
  texture: 10,
  name: "Розовая камуфляжная"
}, {
  component: 11,
  drawable: 218,
  texture: 11,
  name: "Голубая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 12,
  name: "Охровая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 13,
  name: "Дымчатая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 14,
  name: "Оранжевая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 15,
  name: "Черно-красная удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 16,
  name: "Темно-синяя удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 17,
  name: "Белая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 18,
  name: "Пепельная удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 19,
  name: "Коричневая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 20,
  name: "Осенняя удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 21,
  name: "Оскольчатая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 22,
  name: "Серая удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 23,
  name: "Белая камуфляжная"
}, {
  component: 11,
  drawable: 218,
  texture: 24,
  name: "Угольная удлиненная"
}, {
  component: 11,
  drawable: 218,
  texture: 25,
  name: "Бежево-синяя удлиненная"
}, {
  component: 1,
  drawable: 117,
  texture: 0,
  name: "Темная маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 1,
  name: "Синяя маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 2,
  name: "Светлая маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 3,
  name: "Фиолетовая Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 4,
  name: "Темный камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 5,
  name: "Светлый камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 6,
  name: "Фиолетовый камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 7,
  name: "Лесной камуфляж"
}, {
  component: 1,
  drawable: 117,
  texture: 8,
  name: "С абстрактным узором"
}, {
  component: 1,
  drawable: 117,
  texture: 9,
  name: "С геометрическим узором"
}, {
  component: 1,
  drawable: 117,
  texture: 10,
  name: "Синяя цифра"
}, {
  component: 1,
  drawable: 117,
  texture: 11,
  name: "Серая цифра"
}, {
  component: 1,
  drawable: 117,
  texture: 12,
  name: "Черно-белые полосы"
}, {
  component: 1,
  drawable: 117,
  texture: 13,
  name: "Пестрая маска Bigness SN"
}, {
  component: 1,
  drawable: 117,
  texture: 14,
  name: "Маска (дикая)"
}, {
  component: 1,
  drawable: 117,
  texture: 15,
  name: "Маска (осень)"
}, {
  component: 1,
  drawable: 117,
  texture: 16,
  name: "Оранжевая маска (осень)"
}, {
  component: 4,
  drawable: 85,
  texture: 0,
  name: "Темные треники (растения)"
}, {
  component: 4,
  drawable: 85,
  texture: 1,
  name: "Белые треники (растения)"
}, {
  component: 4,
  drawable: 85,
  texture: 2,
  name: "Персик. треники (растения)"
}, {
  component: 4,
  drawable: 85,
  texture: 3,
  name: "Сине-зеленые с узором"
}, {
  component: 4,
  drawable: 85,
  texture: 4,
  name: "Зеленые треники с узором"
}, {
  component: 4,
  drawable: 85,
  texture: 5,
  name: "Треники (осень)"
}, {
  component: 4,
  drawable: 85,
  texture: 6,
  name: "Оранжевые треники (осень)"
}, {
  component: 4,
  drawable: 85,
  texture: 7,
  name: "Лиловые треники (камуфляж)"
}, {
  component: 4,
  drawable: 85,
  texture: 8,
  name: "Белые треники (камуфляж)"
}, {
  component: 4,
  drawable: 85,
  texture: 9,
  name: "Темные треники (камуфляж)"
}, {
  component: 4,
  drawable: 85,
  texture: 12,
  name: "Полосатые треники"
}, {
  component: 4,
  drawable: 85,
  texture: 13,
  name: "Пятнистые треники"
}, {
  component: 4,
  drawable: 87,
  texture: 0,
  name: "Охровые с молниями"
}, {
  component: 4,
  drawable: 87,
  texture: 1,
  name: "Серые с молниями"
}, {
  component: 4,
  drawable: 87,
  texture: 2,
  name: "Желтые с молниями"
}, {
  component: 4,
  drawable: 87,
  texture: 3,
  name: "Белые с молниями"
}, {
  component: 4,
  drawable: 87,
  texture: 4,
  name: "Алые с молниями"
}, {
  component: 4,
  drawable: 87,
  texture: 5,
  name: "Зеленые с молниями"
}, {
  component: 4,
  drawable: 87,
  texture: 6,
  name: "Карамельные с молниями"
}, {
  component: 4,
  drawable: 87,
  texture: 7,
  name: "Синие с молниями"
}, {
  component: 4,
  drawable: 88,
  texture: 0,
  name: "Горчичные шорты"
}, {
  component: 4,
  drawable: 88,
  texture: 3,
  name: "Серые шорты"
}, {
  component: 4,
  drawable: 88,
  texture: 4,
  name: "Бордовые шорты"
}, {
  component: 4,
  drawable: 88,
  texture: 5,
  name: "Шорты (зигзаг)"
}, {
  component: 4,
  drawable: 88,
  texture: 6,
  name: "Неоновые шорты (краска)"
}, {
  component: 4,
  drawable: 88,
  texture: 7,
  name: "Темно-синие шорты (краска)"
}, {
  component: 4,
  drawable: 88,
  texture: 8,
  name: "Шорты (рассвет)"
}, {
  component: 4,
  drawable: 88,
  texture: 9,
  name: "Шорты (лазурь)"
}, {
  component: 4,
  drawable: 88,
  texture: 10,
  name: "Шорты (тропики)"
}, {
  component: 4,
  drawable: 88,
  texture: 11,
  name: "Зеленые шорты (листья)"
}, {
  component: 4,
  drawable: 89,
  texture: 0,
  name: "Зеленая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 1,
  name: "Синеватая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 2,
  name: "Белая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 3,
  name: "Золотая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 4,
  name: "Юбка с блестками леопард"
}, {
  component: 4,
  drawable: 89,
  texture: 5,
  name: "Розовая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 6,
  name: "Синяя юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 8,
  name: "Золотистая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 9,
  name: "Сероватая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 10,
  name: "Розоватая юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 11,
  name: "Юбка с блестками (полосы)"
}, {
  component: 4,
  drawable: 89,
  texture: 12,
  name: "Темная юбка с блестками"
}, {
  component: 4,
  drawable: 89,
  texture: 13,
  name: "Юбка с блестками (цветы)"
}, {
  component: 4,
  drawable: 89,
  texture: 14,
  name: "Золотая юбка с блестками SN"
}, {
  component: 4,
  drawable: 89,
  texture: 15,
  name: "Белая юбка с блестками SN"
}, {
  component: 6,
  drawable: 70,
  texture: 0,
  name: "Фиолетовая вспышка"
}, {
  component: 6,
  drawable: 70,
  texture: 1,
  name: "Полночь"
}, {
  component: 6,
  drawable: 70,
  texture: 2,
  name: "Закат"
}, {
  component: 6,
  drawable: 70,
  texture: 3,
  name: "Зеленые беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 4,
  name: "Кремово-розовые беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 5,
  name: "Черно-красные беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 6,
  name: "Серо-оранжевые беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 11,
  name: "Оранжевая вспышка"
}, {
  component: 6,
  drawable: 70,
  texture: 12,
  name: "Розовая вспышка"
}, {
  component: 6,
  drawable: 70,
  texture: 13,
  name: "Бело-оранжевые беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 14,
  name: "Яркие беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 15,
  name: "Пепельные беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 16,
  name: "Бежевые беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 17,
  name: "Серые беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 18,
  name: "Синие беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 19,
  name: "Красные беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 20,
  name: "Оттенки серого"
}, {
  component: 6,
  drawable: 70,
  texture: 21,
  name: "Синяя вспышка"
}, {
  component: 6,
  drawable: 70,
  texture: 22,
  name: "Белые беговые"
}, {
  component: 6,
  drawable: 70,
  texture: 23,
  name: "Беговые цвета графита"
}, {
  component: 6,
  drawable: 70,
  texture: 24,
  name: "Мокко"
}, {
  component: 6,
  drawable: 70,
  texture: 25,
  name: "Одноцветные беговые"
}, {
  component: 8,
  drawable: 156,
  texture: 0,
  name: "Футболка с кругл. вырезом"
}, {
  component: 8,
  drawable: 156,
  texture: 1,
  name: "Белая Manor (зигзаг)"
}, {
  component: 8,
  drawable: 156,
  texture: 3,
  name: "Сиреневая Manor"
}, {
  component: 8,
  drawable: 156,
  texture: 4,
  name: "Мятно-зеленая Manor"
}, {
  component: 8,
  drawable: 156,
  texture: 5,
  name: "Черная Manor (полосы)"
}, {
  component: 8,
  drawable: 156,
  texture: 6,
  name: "Белая Manor (полосы)"
}, {
  component: 8,
  drawable: 156,
  texture: 7,
  name: "Зеленая Blagueurs (глобус)"
}, {
  component: 8,
  drawable: 156,
  texture: 8,
  name: "Лиловая Blagueurs (глобус)"
}, {
  component: 8,
  drawable: 156,
  texture: 9,
  name: "Брендовая Blagueurs"
}, {
  component: 8,
  drawable: 156,
  texture: 10,
  name: "Blagueurs LS"
}, {
  component: 8,
  drawable: 156,
  texture: 11,
  name: "Полосатая Blagueurs"
}, {
  component: 8,
  drawable: 156,
  texture: 12,
  name: "Спортивная Blagueurs"
}, {
  component: 8,
  drawable: 156,
  texture: 13,
  name: "Сине-зеленая Blagueurs LS"
}, {
  component: 8,
  drawable: 156,
  texture: 14,
  name: "Черно-белая Blagueurs LS"
}, {
  component: 8,
  drawable: 156,
  texture: 15,
  name: "Лососевая Santo Capra"
}, {
  component: 8,
  drawable: 156,
  texture: 16,
  name: "Синяя Santo Capra"
}, {
  component: 8,
  drawable: 156,
  texture: 17,
  name: "Желтая Santo Capra"
}, {
  component: 8,
  drawable: 156,
  texture: 18,
  name: "Розовая Santo Capra"
}, {
  component: 8,
  drawable: 156,
  texture: 19,
  name: "Красно-черная Santo Capra"
}, {
  component: 8,
  drawable: 156,
  texture: 20,
  name: "Синяя полосатая Santo Capra"
}, {
  component: 8,
  drawable: 169,
  texture: 0,
  name: "Свободный топ леопард"
}, {
  component: 8,
  drawable: 169,
  texture: 1,
  name: "Синий свободный топ зебра"
}, {
  component: 8,
  drawable: 169,
  texture: 2,
  name: "Свободный топ зебра"
}, {
  component: 8,
  drawable: 169,
  texture: 3,
  name: "Розовый свободный топ SC"
}, {
  component: 8,
  drawable: 169,
  texture: 4,
  name: "Синий свободный топ SC"
}, {
  component: 8,
  drawable: 169,
  texture: 5,
  name: "Желтый свободный топ SC"
}, {
  component: 8,
  drawable: 169,
  texture: 6,
  name: "Свободный топ змея"
}, {
  component: 8,
  drawable: 169,
  texture: 7,
  name: "Зеленый свободный топ"
}, {
  component: 8,
  drawable: 169,
  texture: 8,
  name: "Бледный свободный топ"
}, {
  component: 8,
  drawable: 169,
  texture: 9,
  name: "Фиолетовый свободный топ"
}, {
  component: 8,
  drawable: 169,
  texture: 10,
  name: "Ярко-голубой свободный топ"
}, {
  component: 8,
  drawable: 169,
  texture: 11,
  name: "Леопардовый свободный топ"
}, {
  component: 8,
  drawable: 170,
  texture: 0,
  name: "Камисоль леопард"
}, {
  component: 8,
  drawable: 170,
  texture: 1,
  name: "Синяя полосатая камисоль"
}, {
  component: 8,
  drawable: 170,
  texture: 2,
  name: "Полосатая камисоль зебра"
}, {
  component: 8,
  drawable: 170,
  texture: 3,
  name: "Персиковая камисоль"
}, {
  component: 8,
  drawable: 170,
  texture: 4,
  name: "Коричневая камисоль"
}, {
  component: 8,
  drawable: 170,
  texture: 5,
  name: "Бирюзовая камисоль"
}, {
  component: 8,
  drawable: 170,
  texture: 6,
  name: "Зеленая камисоль"
}, {
  component: 8,
  drawable: 170,
  texture: 7,
  name: "Неоновая камисоль (краска)"
}, {
  component: 8,
  drawable: 170,
  texture: 8,
  name: "Синяя камисоль (листья)"
}, {
  component: 8,
  drawable: 170,
  texture: 9,
  name: "Цветная камисоль (листья)"
}, {
  component: 8,
  drawable: 170,
  texture: 10,
  name: "Неоновая камисоль (листья)"
}, {
  component: 8,
  drawable: 171,
  texture: 0,
  name: "Бикини леопард"
}, {
  component: 8,
  drawable: 171,
  texture: 1,
  name: "Синее бикини зебра"
}, {
  component: 8,
  drawable: 171,
  texture: 2,
  name: "Бикини зебра"
}, {
  component: 8,
  drawable: 171,
  texture: 3,
  name: "Бикини (фигурный узор)"
}, {
  component: 8,
  drawable: 171,
  texture: 4,
  name: "Бикини (абстрактный узор)"
}, {
  component: 8,
  drawable: 171,
  texture: 5,
  name: "Белое бикини змея"
}, {
  component: 8,
  drawable: 171,
  texture: 6,
  name: "Зеленое бикини змея"
}, {
  component: 8,
  drawable: 171,
  texture: 7,
  name: "Черное бикини (цветочек)"
}, {
  component: 11,
  drawable: 226,
  texture: 0,
  name: "Бело-оранжевый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 1,
  name: "Оранжевый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 2,
  name: "Бело-красный Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 3,
  name: "Бело-бирюзовый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 4,
  name: "Розовый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 5,
  name: "Бело-фиолетовый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 6,
  name: "Синий Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 7,
  name: "Фиолетовый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 8,
  name: "Сине-бирюзовый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 9,
  name: "Бело-золотой Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 10,
  name: "Розово-черный Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 11,
  name: "Черно-голубой Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 12,
  name: "Черно-салатовый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 13,
  name: "Красно-черный Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 14,
  name: "Сине-зеленый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 15,
  name: "Темный Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 16,
  name: "Сине-желтый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 17,
  name: "Черно-красный Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 19,
  name: "Желтый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 20,
  name: "Мандариновый Bigness"
}, {
  component: 11,
  drawable: 226,
  texture: 21,
  name: "Бело-зеленый Bigness"
}, {
  component: 11,
  drawable: 227,
  texture: 0,
  name: "Лиловая кошка (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 1,
  name: "Оранж. кошка (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 2,
  name: "Синяя кошка (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 3,
  name: "Золотая кошка (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 4,
  name: "Лилово-белая SN (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 5,
  name: "Зеленая SN (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 6,
  name: "Оранжевая SN (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 7,
  name: "Черно-оранж. SN (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 8,
  name: "Черная Bigness (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 9,
  name: "Серая Prolaps (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 10,
  name: "Синяя Prolaps (застег.)"
}, {
  component: 11,
  drawable: 227,
  texture: 11,
  name: "Красная Prolaps (застег.)"
}, {
  component: 11,
  drawable: 228,
  texture: 0,
  name: "Blagueurs в бежев. полоску"
}, {
  component: 11,
  drawable: 228,
  texture: 1,
  name: "Blagueurs в розов. полоску"
}, {
  component: 11,
  drawable: 228,
  texture: 2,
  name: "Blagueurs в салат. полоску"
}, {
  component: 11,
  drawable: 228,
  texture: 3,
  name: "Blagueurs в желтую полоску"
}, {
  component: 11,
  drawable: 228,
  texture: 4,
  name: "Blagueurs в оранж. полоску"
}, {
  component: 11,
  drawable: 228,
  texture: 5,
  name: "Blagueurs в синюю полоску"
}, {
  component: 11,
  drawable: 228,
  texture: 6,
  name: "Салатовая Blagueurs"
}, {
  component: 11,
  drawable: 228,
  texture: 7,
  name: "Песочно-фиолетовая Güffy"
}, {
  component: 11,
  drawable: 228,
  texture: 8,
  name: "Сине-красная Güffy"
}, {
  component: 11,
  drawable: 228,
  texture: 9,
  name: "Мандариново-белая Güffy"
}, {
  component: 11,
  drawable: 228,
  texture: 10,
  name: "Оранжево-желтая Güffy"
}, {
  component: 11,
  drawable: 228,
  texture: 11,
  name: "Белая Santo Capra"
}, {
  component: 11,
  drawable: 228,
  texture: 12,
  name: "Красная Santo Capra"
}, {
  component: 11,
  drawable: 228,
  texture: 13,
  name: "Santo Capra (дикая)"
}, {
  component: 11,
  drawable: 228,
  texture: 14,
  name: "SC белый шеврон"
}, {
  component: 11,
  drawable: 228,
  texture: 15,
  name: "SC розовый шеврон"
}, {
  component: 11,
  drawable: 228,
  texture: 16,
  name: "SC темный шеврон"
}, {
  component: 11,
  drawable: 228,
  texture: 17,
  name: "Желтая SC"
}, {
  component: 11,
  drawable: 228,
  texture: 18,
  name: "Бирюзовая SC"
}, {
  component: 11,
  drawable: 228,
  texture: 19,
  name: "Розовая SC"
}, {
  component: 11,
  drawable: 229,
  texture: 0,
  name: "Синий кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 1,
  name: "Розовый кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 2,
  name: "Оранжевый кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 3,
  name: "Красный кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 4,
  name: "Бело-серый кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 6,
  name: "Серо-красный кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 7,
  name: "Светло-коричневый кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 8,
  name: "Пурпурный кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 9,
  name: "Сине-зеленый кардиган"
}, {
  component: 11,
  drawable: 229,
  texture: 10,
  name: "Зеленый кардиган"
}, {
  component: 11,
  drawable: 230,
  texture: 0,
  name: "Свитер (лазурь)"
}, {
  component: 11,
  drawable: 230,
  texture: 1,
  name: "Свитер (рассвет)"
}, {
  component: 11,
  drawable: 230,
  texture: 2,
  name: "Свитер (тутти-фрутти)"
}, {
  component: 11,
  drawable: 230,
  texture: 3,
  name: "Свитер (ночь)"
}, {
  component: 11,
  drawable: 230,
  texture: 4,
  name: "Свитер (тундра)"
}, {
  component: 11,
  drawable: 230,
  texture: 5,
  name: "Свитер (тропики)"
}, {
  component: 11,
  drawable: 230,
  texture: 6,
  name: "Темно-синий свитер Perseus"
}, {
  component: 11,
  drawable: 230,
  texture: 7,
  name: "Коричн. брендовый Perseus"
}, {
  component: 11,
  drawable: 230,
  texture: 8,
  name: "Коричневый свитер Perseus"
}, {
  component: 11,
  drawable: 230,
  texture: 9,
  name: "Коричн. Perseus с принтом"
}, {
  component: 11,
  drawable: 230,
  texture: 10,
  name: "Свитер (зеленый узор)"
}, {
  component: 11,
  drawable: 230,
  texture: 11,
  name: "Свитер (фиолетовый узор)"
}, {
  component: 11,
  drawable: 230,
  texture: 12,
  name: "Свитер (синий узор)"
}, {
  component: 11,
  drawable: 230,
  texture: 13,
  name: "Свитер (красный узор)"
}, {
  component: 11,
  drawable: 230,
  texture: 14,
  name: "Зеленый свитер (растения)"
}, {
  component: 11,
  drawable: 230,
  texture: 15,
  name: "Лиловый свитер (растения)"
}, {
  component: 11,
  drawable: 230,
  texture: 16,
  name: "Белый свитер (растения)"
}, {
  component: 11,
  drawable: 230,
  texture: 17,
  name: "Розовый свитер (растения)"
}, {
  component: 11,
  drawable: 230,
  texture: 18,
  name: "Красный свитер (цветы)"
}, {
  component: 11,
  drawable: 230,
  texture: 19,
  name: "Синий свитер (цветы)"
}, {
  component: 11,
  drawable: 230,
  texture: 20,
  name: "Черный свитер (цветы)"
}, {
  component: 11,
  drawable: 230,
  texture: 21,
  name: "Белый свитер (цветы)"
}, {
  component: 11,
  drawable: 231,
  texture: 0,
  name: "Бордовая Garland"
}, {
  component: 11,
  drawable: 231,
  texture: 1,
  name: "Черная Garland"
}, {
  component: 11,
  drawable: 231,
  texture: 2,
  name: "Желтая Savanna"
}, {
  component: 11,
  drawable: 231,
  texture: 3,
  name: "Синяя Savanna"
}, {
  component: 11,
  drawable: 231,
  texture: 4,
  name: "Розовая Savanna"
}, {
  component: 11,
  drawable: 231,
  texture: 5,
  name: "Черная Savanna"
}, {
  component: 11,
  drawable: 231,
  texture: 6,
  name: "Персиковая (растения)"
}, {
  component: 11,
  drawable: 231,
  texture: 7,
  name: "Розовая (растения)"
}, {
  component: 11,
  drawable: 231,
  texture: 8,
  name: "Зеленая (растения)"
}, {
  component: 11,
  drawable: 231,
  texture: 9,
  name: "Бирюзовая (растения)"
}, {
  component: 11,
  drawable: 231,
  texture: 10,
  name: "Синяя (листья)"
}, {
  component: 11,
  drawable: 231,
  texture: 11,
  name: "Серая (листья)"
}, {
  component: 11,
  drawable: 231,
  texture: 12,
  name: "Красная (листья)"
}, {
  component: 11,
  drawable: 231,
  texture: 13,
  name: "Сине-зеленая (листья)"
}, {
  component: 11,
  drawable: 231,
  texture: 14,
  name: "Темно-синяя (букеты)"
}, {
  component: 11,
  drawable: 231,
  texture: 15,
  name: "Синяя (букеты)"
}, {
  component: 11,
  drawable: 231,
  texture: 16,
  name: "Лиловая (цветы)"
}, {
  component: 11,
  drawable: 231,
  texture: 17,
  name: "Рубашка (цветы)"
}, {
  component: 11,
  drawable: 231,
  texture: 18,
  name: "С ярким градиентом"
}, {
  component: 11,
  drawable: 231,
  texture: 19,
  name: "С красочным градиентом"
}, {
  component: 11,
  drawable: 231,
  texture: 20,
  name: "С городским градиентом"
}, {
  component: 11,
  drawable: 231,
  texture: 21,
  name: "С холодным градиентом"
}, {
  component: 11,
  drawable: 232,
  texture: 0,
  name: "Лиловая кошка (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 1,
  name: "Оранж. кошка (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 2,
  name: "Синяя кошка (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 3,
  name: "Золотая кошка (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 4,
  name: "Лилово-белая SN (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 5,
  name: "Зеленая SN (расстегнутая)"
}, {
  component: 11,
  drawable: 232,
  texture: 6,
  name: "Оранжевая SN (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 7,
  name: "Черно-оранж. SN (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 8,
  name: "Черная Bigness (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 9,
  name: "Серая Prolaps (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 10,
  name: "Синяя Prolaps (расстег.)"
}, {
  component: 11,
  drawable: 232,
  texture: 11,
  name: "Красная Prolaps (расстег.)"
}, {
  component: 11,
  drawable: 233,
  texture: 0,
  name: "Серая толстовка Blagueurs"
}, {
  component: 11,
  drawable: 233,
  texture: 1,
  name: "Черная толстовка Blagueurs"
}, {
  component: 11,
  drawable: 233,
  texture: 2,
  name: "Белая толстовка Blagueurs"
}, {
  component: 11,
  drawable: 233,
  texture: 4,
  name: "Черная Güffy (граффити)"
}, {
  component: 11,
  drawable: 233,
  texture: 5,
  name: "Зеленая Güffy (брызги)"
}, {
  component: 11,
  drawable: 233,
  texture: 6,
  name: "Темная Güffy (пятна)"
}, {
  component: 11,
  drawable: 233,
  texture: 7,
  name: "Güffy (неоновые листья)"
}, {
  component: 11,
  drawable: 233,
  texture: 8,
  name: "Güffy (синие листья)"
}, {
  component: 11,
  drawable: 233,
  texture: 9,
  name: "Güffy (разноцветн. листья)"
}, {
  component: 11,
  drawable: 233,
  texture: 10,
  name: "Güffy (зеленые пятна)"
}, {
  component: 11,
  drawable: 233,
  texture: 11,
  name: "Güffy (фиолетовые пятна)"
}, {
  component: 11,
  drawable: 233,
  texture: 12,
  name: "Голубая толстовка SN"
}, {
  component: 11,
  drawable: 233,
  texture: 13,
  name: "Желтая толстовка SN"
}, {
  component: 11,
  drawable: 233,
  texture: 14,
  name: "Розовая толстовка SN"
}, {
  component: 11,
  drawable: 233,
  texture: 15,
  name: "Бело-персиковая Güffy"
}, {
  component: 11,
  drawable: 235,
  texture: 0,
  name: "Темная подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 1,
  name: "Светло-серая подбитая"
}, {
  component: 11,
  drawable: 235,
  texture: 2,
  name: "Багряная подбитая"
}, {
  component: 11,
  drawable: 235,
  texture: 3,
  name: "Коричневая подбитая"
}, {
  component: 11,
  drawable: 235,
  texture: 4,
  name: "Синяя подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 5,
  name: "Косуха цвета ржавчины"
}, {
  component: 11,
  drawable: 235,
  texture: 6,
  name: "Серая подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 7,
  name: "Желтая подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 8,
  name: "Кремовая подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 9,
  name: "Красная подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 10,
  name: "Зеленая подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 11,
  name: "Песочная подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 12,
  name: "Какао подбитая кожаная"
}, {
  component: 11,
  drawable: 235,
  texture: 13,
  name: "Ледяная белая подбитая"
}, {
  component: 11,
  drawable: 235,
  texture: 14,
  name: "Голубая подбитая"
}, {
  component: 11,
  drawable: 235,
  texture: 15,
  name: "Оранжевая подбитая кожаная"
}, {
  component: 11,
  drawable: 236,
  texture: 0,
  name: "Лиловый кожаный (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 1,
  name: "Зеленая в пятнах (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 2,
  name: "Оранж. в пятнах (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 3,
  name: "Синяя в пятнах (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 4,
  name: "Зеленый леопард (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 5,
  name: "Бледный леопард (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 6,
  name: "Фиолет. леопард (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 7,
  name: "Бирюзов. леопард (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 8,
  name: "Bigness зебра (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 9,
  name: "Bigness пятна (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 10,
  name: "Коричневая SN (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 11,
  name: "Черная SN (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 12,
  name: "Разноцветная SN (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 13,
  name: "Золотая SN (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 14,
  name: "Цветная Geo SN (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 15,
  name: "Золотая Geo SN (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 16,
  name: "Золотая Geo PRB (застег.)"
}, {
  component: 11,
  drawable: 236,
  texture: 17,
  name: "Цветная Geo PRB (застег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 0,
  name: "Лилов. в пятнах (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 1,
  name: "Зелен. в пятнах (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 2,
  name: "Оранж. в пятнах (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 3,
  name: "Синяя в пятнах (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 4,
  name: "Зеленый леопард (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 5,
  name: "Бледный леопард (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 6,
  name: "Фиолет. леопард (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 7,
  name: "Бирюз. леопард (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 8,
  name: "Bigness зебра (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 9,
  name: "Bigness пятна (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 10,
  name: "Коричневая SN (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 11,
  name: "Черная SN (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 12,
  name: "Разноцветная SN (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 13,
  name: "Золотая SN (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 14,
  name: "Цветная Geo SN (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 15,
  name: "Золотая Geo SN (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 16,
  name: "Золотая Geo PRB (расстег.)"
}, {
  component: 11,
  drawable: 237,
  texture: 17,
  name: "Цветная Geo PRB (расстег.)"
}, {
  component: 11,
  drawable: 238,
  texture: 0,
  name: "Зеленая Didier Sachs"
}, {
  component: 11,
  drawable: 238,
  texture: 1,
  name: "Черная Didier Sachs"
}, {
  component: 11,
  drawable: 238,
  texture: 2,
  name: "Серая Didier Sachs"
}, {
  component: 11,
  drawable: 238,
  texture: 3,
  name: "Красная Didier Sachs"
}, {
  component: 11,
  drawable: 238,
  texture: 4,
  name: "Охровая Didier Sachs"
}, {
  component: 11,
  drawable: 240,
  texture: 0,
  name: "Пуховик (яркий градиент)"
}, {
  component: 11,
  drawable: 240,
  texture: 1,
  name: "Пуховик (красочный град.)"
}, {
  component: 11,
  drawable: 240,
  texture: 2,
  name: "Пуховик (городской град.)"
}, {
  component: 11,
  drawable: 240,
  texture: 3,
  name: "Пуховик (холодный град.)"
}, {
  component: 11,
  drawable: 240,
  texture: 4,
  name: "Пуховик (зеленый градиент)"
}, {
  component: 11,
  drawable: 240,
  texture: 5,
  name: "Пуховик (фиолет. градиент)"
}, {
  component: 11,
  drawable: 240,
  texture: 6,
  name: "Зеленый леопард"
}, {
  component: 11,
  drawable: 240,
  texture: 7,
  name: "Бледный леопард"
}, {
  component: 11,
  drawable: 240,
  texture: 8,
  name: "Бирюзовый леопард"
}, {
  component: 11,
  drawable: 240,
  texture: 9,
  name: "Фиолетовый леопард"
}, {
  component: 11,
  drawable: 240,
  texture: 10,
  name: "Оранжево-неоновый пуховик"
}, {
  component: 11,
  drawable: 240,
  texture: 12,
  name: "Черно-неоновый пуховик"
}, {
  component: 11,
  drawable: 240,
  texture: 13,
  name: "Темный пуховик"
}, {
  component: 11,
  drawable: 240,
  texture: 14,
  name: "Черный брендовый пуховик"
}, {
  component: 11,
  drawable: 240,
  texture: 15,
  name: "Белый брендовый пуховик"
}, {
  component: 1,
  drawable: 120,
  texture: 0,
  name: "Коричневый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 1,
  name: "Белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 2,
  name: "Черный Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 3,
  name: "Стервятник (красный крест)"
}, {
  component: 1,
  drawable: 120,
  texture: 4,
  name: "Зеленый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 5,
  name: "Синий Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 6,
  name: "Бежевый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 7,
  name: "Стервятник (сетка)"
}, {
  component: 1,
  drawable: 120,
  texture: 8,
  name: "Оскольчатый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 9,
  name: "Красноперый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 10,
  name: "Черно-белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 11,
  name: "Пепельный Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 12,
  name: "Черно-желтый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 13,
  name: "Красно-белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 14,
  name: "Буро-белый Стервятник"
}, {
  component: 1,
  drawable: 120,
  texture: 15,
  name: "Буро-желтый Стервятник"
}, {
  component: 1,
  drawable: 121,
  texture: 0,
  name: "Зеленый Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 1,
  name: "Коричневый Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 2,
  name: "Лиловый Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 3,
  name: "Красный Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 4,
  name: "Черный Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 5,
  name: "Звездный Ловец"
}, {
  component: 1,
  drawable: 121,
  texture: 6,
  name: "Бурый Ловец (камуфляж)"
}, {
  component: 1,
  drawable: 121,
  texture: 7,
  name: "Зеленый Ловец (камуфляж)"
}, {
  component: 1,
  drawable: 122,
  texture: 0,
  name: "Оранжевый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 1,
  name: "Темно-бурый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 2,
  name: "Каштановый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 3,
  name: "Красный Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 4,
  name: "Бежевый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 5,
  name: "Ярко-оранжевый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 6,
  name: "Синий Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 7,
  name: "Серый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 8,
  name: "Зеленый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 9,
  name: "Коричневый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 10,
  name: "Красно-серый Налетчик"
}, {
  component: 1,
  drawable: 122,
  texture: 11,
  name: "Оранжево-серый Налетчик"
}, {
  component: 1,
  drawable: 126,
  texture: 0,
  name: "Темно-коричневый Мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 1,
  name: "Радиоактивный мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 2,
  name: "Мародер (молния)"
}, {
  component: 1,
  drawable: 126,
  texture: 3,
  name: "Фирменный мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 4,
  name: "Мародер (череп и кости)"
}, {
  component: 1,
  drawable: 126,
  texture: 5,
  name: "Мародер (красная полоса)"
}, {
  component: 1,
  drawable: 126,
  texture: 6,
  name: "Желтый Мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 7,
  name: "Мародер (бильярдный шар)"
}, {
  component: 1,
  drawable: 126,
  texture: 8,
  name: "Мародер (черная стрела)"
}, {
  component: 1,
  drawable: 126,
  texture: 9,
  name: "Мародер (звезды)"
}, {
  component: 1,
  drawable: 126,
  texture: 10,
  name: "Бежевый Мародер"
}, {
  component: 1,
  drawable: 126,
  texture: 11,
  name: "Черный Мародер"
}, {
  component: 1,
  drawable: 127,
  texture: 0,
  name: "Маска Paco the Taco"
}, {
  component: 1,
  drawable: 128,
  texture: 0,
  name: "Маска Burger Shot"
}, {
  component: 1,
  drawable: 129,
  texture: 0,
  name: "Маска Cluckin' Bell"
}, {
  component: 1,
  drawable: 130,
  texture: 0,
  name: "Синяя оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 1,
  name: "Белая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 2,
  name: "Черная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 3,
  name: "Красная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 4,
  name: "Зеленая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 5,
  name: "Желтая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 6,
  name: "Розовая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 7,
  name: "Оранжевая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 8,
  name: "Лиловая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 9,
  name: "Серо-красная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 10,
  name: "Черно-зеленая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 11,
  name: "Бежево-оранжевая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 12,
  name: "Оранжево-желтая оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 13,
  name: "Бело-синяя оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 14,
  name: "Лилово-черная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 15,
  name: "Красно-черная оптика"
}, {
  component: 1,
  drawable: 130,
  texture: 16,
  name: "Зелено-желтая оптика"
}, {
  component: 4,
  drawable: 90,
  texture: 0,
  name: "Черные штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 1,
  name: "Серые штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 2,
  name: "Белые штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 3,
  name: "Бурые штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 4,
  name: "Песочные штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 5,
  name: "Бежевые штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 6,
  name: "Серые камуфляжные штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 7,
  name: "Зеленые камуфляжные штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 8,
  name: "Лесные штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 9,
  name: "Галечные штаны"
}, {
  component: 4,
  drawable: 90,
  texture: 10,
  name: "Зеленые штаны (лес)"
}, {
  component: 4,
  drawable: 90,
  texture: 11,
  name: "Бежевые штаны (лес)"
}, {
  component: 4,
  drawable: 90,
  texture: 12,
  name: "Серые штаны (лес)"
}, {
  component: 4,
  drawable: 90,
  texture: 13,
  name: "Песочные штаны (лес)"
}, {
  component: 4,
  drawable: 91,
  texture: 2,
  name: "Белые шорты"
}, {
  component: 4,
  drawable: 91,
  texture: 3,
  name: "Бурые шорты"
}, {
  component: 4,
  drawable: 91,
  texture: 4,
  name: "Песочные шорты"
}, {
  component: 4,
  drawable: 91,
  texture: 6,
  name: "Серые камуфляжные шорты"
}, {
  component: 4,
  drawable: 91,
  texture: 7,
  name: "Зеленые камуфляжные шорты"
}, {
  component: 4,
  drawable: 91,
  texture: 8,
  name: "Лесные шорты"
}, {
  component: 4,
  drawable: 91,
  texture: 9,
  name: "Галечные шорты"
}, {
  component: 4,
  drawable: 91,
  texture: 10,
  name: "Зеленые шорты (лес)"
}, {
  component: 4,
  drawable: 91,
  texture: 11,
  name: "Бежевые шорты (лес)"
}, {
  component: 4,
  drawable: 91,
  texture: 12,
  name: "Серые шорты (лес)"
}, {
  component: 4,
  drawable: 91,
  texture: 13,
  name: "Песочные шорты (лес)"
}, {
  component: 4,
  drawable: 93,
  texture: 0,
  name: "Черные кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 1,
  name: "Черно-красные кожаные"
}, {
  component: 4,
  drawable: 93,
  texture: 2,
  name: "Белые кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 3,
  name: "Бордовые кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 4,
  name: "Красные кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 5,
  name: "Синие кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 6,
  name: "Темно-зеленые кожаные"
}, {
  component: 4,
  drawable: 93,
  texture: 7,
  name: "Серые кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 8,
  name: "Коричневые кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 9,
  name: "Оранжевые кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 10,
  name: "Пепельные кожаные штаны"
}, {
  component: 4,
  drawable: 93,
  texture: 11,
  name: "Красноватые кожаные штаны"
}, {
  component: 4,
  drawable: 95,
  texture: 0,
  name: "Бурые штаны Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 1,
  name: "Черные штаны Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 2,
  name: "Зеленые штаны Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 3,
  name: "Бежевые штаны Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 4,
  name: "Синие камуфляжные штаны"
}, {
  component: 4,
  drawable: 95,
  texture: 6,
  name: "Белые камуфляжные штаны"
}, {
  component: 4,
  drawable: 95,
  texture: 7,
  name: "Штаны в сетку Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 8,
  name: "Желтые штаны Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 9,
  name: "Черно-белые Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 10,
  name: "Красные штаны Налетчик"
}, {
  component: 4,
  drawable: 95,
  texture: 11,
  name: "Синие штаны Налетчик"
}, {
  component: 6,
  drawable: 72,
  texture: 0,
  name: "Белые с голубой подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 1,
  name: "Белые с зеленой подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 2,
  name: "Белые с розовой подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 3,
  name: "Белые с красной подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 4,
  name: "Серые с голубой подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 5,
  name: "Серые с зеленой подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 6,
  name: "Серые с розовой подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 7,
  name: "Серые с красной подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 8,
  name: "Черные (голубая подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 9,
  name: "Черные (зеленая подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 10,
  name: "Черные (розовая подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 11,
  name: "Черные (красная подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 12,
  name: "Розовые (синяя подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 13,
  name: "Розовые (зеленая подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 14,
  name: "Темные (розовая подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 15,
  name: "Красные с подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 16,
  name: "Светлые (голубая подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 17,
  name: "Темные (зеленая подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 18,
  name: "С ярко-розовой подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 19,
  name: "Светлые (красная подсветка)"
}, {
  component: 6,
  drawable: 72,
  texture: 20,
  name: "С красной подсветкой"
}, {
  component: 6,
  drawable: 72,
  texture: 21,
  name: "С розовой подсветкой"
}, {
  component: 6,
  drawable: 74,
  texture: 0,
  name: "Ботинки с горящим черепом"
}, {
  component: 6,
  drawable: 74,
  texture: 1,
  name: "Красные с горящим черепом"
}, {
  component: 6,
  drawable: 76,
  texture: 0,
  name: "Черные с черепом"
}, {
  component: 6,
  drawable: 76,
  texture: 1,
  name: "Темно-коричневые с черепом"
}, {
  component: 6,
  drawable: 76,
  texture: 2,
  name: "Песочные ботинки с черепом"
}, {
  component: 6,
  drawable: 79,
  texture: 0,
  name: "Коричневые Налетчик"
}, {
  component: 6,
  drawable: 79,
  texture: 1,
  name: "Темно-бурые Налетчик"
}, {
  component: 6,
  drawable: 79,
  texture: 2,
  name: "Зеленые Налетчик"
}, {
  component: 6,
  drawable: 79,
  texture: 3,
  name: "Бежевые Налетчик"
}, {
  component: 6,
  drawable: 79,
  texture: 4,
  name: "Белые Налетчик"
}, {
  component: 6,
  drawable: 79,
  texture: 5,
  name: "Серые Налетчик"
}, {
  component: 6,
  drawable: 79,
  texture: 6,
  name: "Красные Налетчик"
}, {
  component: 6,
  drawable: 79,
  texture: 7,
  name: "Коричнево-белые Налетчик"
}, {
  component: 6,
  drawable: 80,
  texture: 0,
  name: "Коричневые с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 1,
  name: "Черные с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 2,
  name: "Светло-зеленые с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 4,
  name: "Голубые с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 5,
  name: "Зеленые с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 6,
  name: "Белые с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 7,
  name: "С защитой и в сетку"
}, {
  component: 6,
  drawable: 80,
  texture: 8,
  name: "Желтые с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 9,
  name: "Стальные с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 10,
  name: "Красные с защитой"
}, {
  component: 6,
  drawable: 80,
  texture: 11,
  name: "Синие с защитой"
}, {
  component: 7,
  drawable: 93,
  texture: 0,
  name: "Медальон Эпсилон"
}, {
  component: 8,
  drawable: 172,
  texture: 2,
  name: "Черная Рейнджер"
}, {
  component: 8,
  drawable: 172,
  texture: 3,
  name: "Белая Рейнджер"
}, {
  component: 8,
  drawable: 172,
  texture: 4,
  name: "Желтая Рейнджер"
}, {
  component: 8,
  drawable: 172,
  texture: 5,
  name: "Зеленая Рейнджер"
}, {
  component: 8,
  drawable: 172,
  texture: 6,
  name: "Черная с лого Рейнджеры"
}, {
  component: 8,
  drawable: 172,
  texture: 7,
  name: "Зеленая с лого Рейнджеры"
}, {
  component: 8,
  drawable: 172,
  texture: 8,
  name: "Белая футболка Фазы"
}, {
  component: 8,
  drawable: 172,
  texture: 9,
  name: "Желтая футболка Фазы"
}, {
  component: 8,
  drawable: 172,
  texture: 10,
  name: "Синяя футболка Ракета"
}, {
  component: 8,
  drawable: 172,
  texture: 11,
  name: "Розовая футболка Ракета"
}, {
  component: 8,
  drawable: 172,
  texture: 12,
  name: "Черная Пришелец"
}, {
  component: 8,
  drawable: 172,
  texture: 13,
  name: "Розовая Пришелец"
}, {
  component: 8,
  drawable: 172,
  texture: 14,
  name: "Лиловая Две луны"
}, {
  component: 8,
  drawable: 172,
  texture: 15,
  name: "Синяя Две луны"
}, {
  component: 8,
  drawable: 172,
  texture: 16,
  name: "Розовая Две луны"
}, {
  component: 8,
  drawable: 172,
  texture: 17,
  name: "Синяя Цена свободы"
}, {
  component: 8,
  drawable: 172,
  texture: 18,
  name: "Зеленая Цена свободы"
}, {
  component: 8,
  drawable: 172,
  texture: 19,
  name: "Красная Цена свободы"
}, {
  component: 11,
  drawable: 250,
  texture: 0,
  name: "Зелено-желтый Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 1,
  name: "Верх Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 4,
  name: "Коричнево-белый Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 5,
  name: "Болотно-зеленый Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 6,
  name: "Черный верх Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 7,
  name: "Белый верх Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 12,
  name: "Зелено-черный Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 13,
  name: "Разноцветный Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 14,
  name: "Красно-черный Налетчик"
}, {
  component: 11,
  drawable: 250,
  texture: 15,
  name: "Синий верх Налетчик"
}, {
  component: 11,
  drawable: 251,
  texture: 0,
  name: "Коричневый Кожа и перья"
}, {
  component: 11,
  drawable: 251,
  texture: 1,
  name: "Красноватый Кожа и перья"
}, {
  component: 11,
  drawable: 251,
  texture: 2,
  name: "Белый верх Кожа и перья"
}, {
  component: 11,
  drawable: 251,
  texture: 3,
  name: "Оранжевый Кожа и перья"
}, {
  component: 11,
  drawable: 251,
  texture: 4,
  name: "Красно-черный верх (кожа)"
}, {
  component: 11,
  drawable: 251,
  texture: 5,
  name: "Черный верх Кожа и перья"
}, {
  component: 11,
  drawable: 251,
  texture: 6,
  name: "Желтый верх Кожа и перья"
}, {
  component: 11,
  drawable: 251,
  texture: 7,
  name: "Зеленый Кожа и перья"
}, {
  component: 11,
  drawable: 254,
  texture: 0,
  name: "Толстовка Benedict Light"
}, {
  component: 11,
  drawable: 254,
  texture: 1,
  name: "Толстовка Taco Bomb"
}, {
  component: 11,
  drawable: 254,
  texture: 2,
  name: "Оранжевая Cluckin' Bell"
}, {
  component: 11,
  drawable: 254,
  texture: 3,
  name: "Толстовка Patriot Beer"
}, {
  component: 11,
  drawable: 254,
  texture: 4,
  name: "Толстовка Pisswasser"
}, {
  component: 11,
  drawable: 254,
  texture: 5,
  name: "Толстовка Burger Shot"
}, {
  component: 11,
  drawable: 254,
  texture: 6,
  name: "Толстовка Корн-дог"
}, {
  component: 11,
  drawable: 254,
  texture: 7,
  name: "Толстовка Пончик"
}, {
  component: 11,
  drawable: 254,
  texture: 8,
  name: "Толстовка Lucky Plucker"
}, {
  component: 11,
  drawable: 254,
  texture: 9,
  name: "Толстовка Logger Light"
}, {
  component: 11,
  drawable: 254,
  texture: 10,
  name: "Толстовка Пицца"
}, {
  component: 11,
  drawable: 254,
  texture: 11,
  name: "Толстовка Картошка фри"
}, {
  component: 11,
  drawable: 254,
  texture: 12,
  name: "Толстовка Грибы"
}, {
  component: 11,
  drawable: 254,
  texture: 13,
  name: "Толстовка Redwood"
}, {
  component: 11,
  drawable: 254,
  texture: 14,
  name: "Серая толстовка eCola"
}, {
  component: 11,
  drawable: 254,
  texture: 15,
  name: "Толстовка Cluckin' Bell"
}, {
  component: 11,
  drawable: 254,
  texture: 16,
  name: "Толстовка Лимоны"
}, {
  component: 11,
  drawable: 254,
  texture: 17,
  name: "Толстовка Тако"
}, {
  component: 11,
  drawable: 256,
  texture: 0,
  name: "Свитер Burger Shot (узор)"
}, {
  component: 11,
  drawable: 256,
  texture: 1,
  name: "Свитер с лого Burger Shot"
}, {
  component: 11,
  drawable: 256,
  texture: 2,
  name: "Свитер Burger Shot"
}, {
  component: 11,
  drawable: 256,
  texture: 3,
  name: "Белый свитер Sprunk"
}, {
  component: 11,
  drawable: 256,
  texture: 4,
  name: "Зеленый свитер Sprunk"
}, {
  component: 11,
  drawable: 256,
  texture: 5,
  name: "Свитер Wigwam"
}, {
  component: 11,
  drawable: 256,
  texture: 6,
  name: "Свитер Taco Bomb (чили)"
}, {
  component: 11,
  drawable: 256,
  texture: 7,
  name: "Желтый свитер Taco Bomb"
}, {
  component: 11,
  drawable: 256,
  texture: 8,
  name: "Зеленый свитер Taco Bomb"
}, {
  component: 11,
  drawable: 256,
  texture: 9,
  name: "Свитер Cluckin' Bell"
}, {
  component: 11,
  drawable: 256,
  texture: 10,
  name: "Синий свитер Cluckin' Bell"
}, {
  component: 11,
  drawable: 256,
  texture: 11,
  name: "Черный Cluckin' Bell"
}, {
  component: 11,
  drawable: 256,
  texture: 12,
  name: "Красный свитер eCola"
}, {
  component: 11,
  drawable: 256,
  texture: 13,
  name: "Заразительно вкусная"
}, {
  component: 11,
  drawable: 256,
  texture: 14,
  name: "Красный свитер MeTV"
}, {
  component: 11,
  drawable: 256,
  texture: 15,
  name: "Оранжевый свитер MeTV"
}, {
  component: 11,
  drawable: 256,
  texture: 16,
  name: "Ярко-голубой свитер Heat"
}, {
  component: 11,
  drawable: 256,
  texture: 17,
  name: "Сиреневый свитер Heat"
}, {
  component: 11,
  drawable: 256,
  texture: 18,
  name: "Свитер Degenatron"
}, {
  component: 11,
  drawable: 256,
  texture: 19,
  name: "Черный свитер Pisswasser"
}, {
  component: 11,
  drawable: 256,
  texture: 20,
  name: "Красный свитер Pisswasser"
}, {
  component: 11,
  drawable: 256,
  texture: 21,
  name: "Свитер Bolt Burger"
}, {
  component: 11,
  drawable: 256,
  texture: 22,
  name: "Свитер Lucky Plucker"
}, {
  component: 11,
  drawable: 256,
  texture: 23,
  name: "Свитер с лого Lucky Plucker"
}, {
  component: 11,
  drawable: 257,
  texture: 0,
  name: "Синее джерси Burger Shot"
}, {
  component: 11,
  drawable: 257,
  texture: 1,
  name: "Черное джерси Burger Shot"
}, {
  component: 11,
  drawable: 257,
  texture: 2,
  name: "Красное джерси Burger Shot"
}, {
  component: 11,
  drawable: 257,
  texture: 3,
  name: "Темно-красное Burger Shot"
}, {
  component: 11,
  drawable: 257,
  texture: 4,
  name: "Синее джерси Cluckin' Bell"
}, {
  component: 11,
  drawable: 257,
  texture: 5,
  name: "Черное джерси Cluckin' Bell"
}, {
  component: 11,
  drawable: 257,
  texture: 6,
  name: "Хоккейное джерси Wigwam"
}, {
  component: 11,
  drawable: 257,
  texture: 7,
  name: "Хоккейное джерси Redwood"
}, {
  component: 11,
  drawable: 257,
  texture: 8,
  name: "Джерси Bean Machine"
}, {
  component: 11,
  drawable: 257,
  texture: 9,
  name: "Красное джерси eCola"
}, {
  component: 11,
  drawable: 257,
  texture: 10,
  name: "Черное джерси eCola"
}, {
  component: 11,
  drawable: 257,
  texture: 11,
  name: "Черное джерси Phat Chips"
}, {
  component: 11,
  drawable: 257,
  texture: 12,
  name: "Синее джерси Phat Chips"
}, {
  component: 11,
  drawable: 257,
  texture: 13,
  name: "Темно-зеленое Sprunk"
}, {
  component: 11,
  drawable: 257,
  texture: 14,
  name: "Зеленое джерси Sprunk"
}, {
  component: 11,
  drawable: 257,
  texture: 15,
  name: "Джерси Sprunk (классика)"
}, {
  component: 11,
  drawable: 263,
  texture: 1,
  name: "Красный свитер Bleeder"
}, {
  component: 11,
  drawable: 263,
  texture: 2,
  name: "Синий свитер Bleeder"
}, {
  component: 11,
  drawable: 263,
  texture: 3,
  name: "Синий свитер Cluckin'"
}, {
  component: 11,
  drawable: 263,
  texture: 4,
  name: "Зеленый свитер Cluckin'"
}, {
  component: 11,
  drawable: 263,
  texture: 5,
  name: "Синий свитер Slaying"
}, {
  component: 11,
  drawable: 263,
  texture: 6,
  name: "Зеленый свитер Slaying"
}, {
  component: 11,
  drawable: 263,
  texture: 7,
  name: "Праздничный свитер Slasher"
}, {
  component: 11,
  drawable: 263,
  texture: 8,
  name: "Свитер Hail Santa"
}, {
  component: 11,
  drawable: 263,
  texture: 9,
  name: "Красный свитер с костями"
}, {
  component: 11,
  drawable: 263,
  texture: 10,
  name: "Черно-белый свитер с костями"
}, {
  component: 11,
  drawable: 263,
  texture: 11,
  name: "Черно-красный свитер с костями"
}, {
  component: 11,
  drawable: 263,
  texture: 12,
  name: "Свитер Merry Sprunkmas"
}, {
  component: 11,
  drawable: 263,
  texture: 13,
  name: "Свитер Ice Cold Sprunk"
}, {
  component: 11,
  drawable: 264,
  texture: 0,
  name: "Зеленый жилет наемника"
}, {
  component: 11,
  drawable: 264,
  texture: 1,
  name: "Черный жилет наемника"
}, {
  component: 11,
  drawable: 264,
  texture: 2,
  name: "Белый жилет наемника"
}, {
  component: 11,
  drawable: 264,
  texture: 3,
  name: "Синий жилет наемника"
}, {
  component: 11,
  drawable: 264,
  texture: 4,
  name: "Красный жилет наемника"
}, {
  component: 11,
  drawable: 264,
  texture: 5,
  name: "Желтый жилет наемника"
}, {
  component: 11,
  drawable: 264,
  texture: 6,
  name: "Жилет (темный камуфляж)"
}, {
  component: 11,
  drawable: 264,
  texture: 7,
  name: "Жилет (камуфляж)"
}, {
  component: 11,
  drawable: 264,
  texture: 8,
  name: "Зеленый оскольчатый жилет"
}, {
  component: 11,
  drawable: 264,
  texture: 9,
  name: "Синий цифровой жилет"
}, {
  component: 11,
  drawable: 264,
  texture: 10,
  name: "Черный оскольчатый жилет"
}, {
  component: 11,
  drawable: 264,
  texture: 11,
  name: "Черно-красный жилет"
}, {
  component: 1,
  drawable: 132,
  texture: 0,
  name: "Маска Бессильная Злоба"
}, {
  component: 1,
  drawable: 133,
  texture: 0,
  name: "Маска Клубника"
}, {
  component: 1,
  drawable: 134,
  texture: 0,
  name: "Маска Лимон"
}, {
  component: 1,
  drawable: 135,
  texture: 0,
  name: "Маска Виноград"
}, {
  component: 1,
  drawable: 136,
  texture: 0,
  name: "Маска Ананас"
}, {
  component: 1,
  drawable: 137,
  texture: 0,
  name: "Маска Вишня"
}, {
  component: 1,
  drawable: 138,
  texture: 0,
  name: "Счастливая семерка"
}, {
  component: 1,
  drawable: 139,
  texture: 0,
  name: "Синий джокер"
}, {
  component: 1,
  drawable: 139,
  texture: 1,
  name: "Красный джокер"
}, {
  component: 1,
  drawable: 139,
  texture: 2,
  name: "Зеленый джокер"
}, {
  component: 1,
  drawable: 139,
  texture: 3,
  name: "Фиолетовый джокер"
}, {
  component: 1,
  drawable: 140,
  texture: 0,
  name: "Червовый король"
}, {
  component: 1,
  drawable: 140,
  texture: 1,
  name: "Трефовый король"
}, {
  component: 1,
  drawable: 140,
  texture: 2,
  name: "Бубновый король"
}, {
  component: 1,
  drawable: 140,
  texture: 3,
  name: "Пиковый король"
}, {
  component: 1,
  drawable: 141,
  texture: 0,
  name: "Пиковая дама"
}, {
  component: 1,
  drawable: 141,
  texture: 1,
  name: "Червовая дама"
}, {
  component: 1,
  drawable: 141,
  texture: 2,
  name: "Бубновая дама"
}, {
  component: 1,
  drawable: 141,
  texture: 3,
  name: "Трефовая дама"
}, {
  component: 1,
  drawable: 142,
  texture: 0,
  name: "Пиковый валет"
}, {
  component: 1,
  drawable: 142,
  texture: 1,
  name: "Червовый валет"
}, {
  component: 1,
  drawable: 142,
  texture: 2,
  name: "Трефовый валет"
}, {
  component: 1,
  drawable: 142,
  texture: 3,
  name: "Бубновый валет"
}, {
  component: 1,
  drawable: 143,
  texture: 0,
  name: "Пиковый туз"
}, {
  component: 1,
  drawable: 143,
  texture: 1,
  name: "Червовый туз"
}, {
  component: 1,
  drawable: 143,
  texture: 2,
  name: "Трефовый туз"
}, {
  component: 1,
  drawable: 143,
  texture: 3,
  name: "Бубновый туз"
}, {
  component: 4,
  drawable: 104,
  texture: 0,
  name: "Красные шорты барокко"
}, {
  component: 4,
  drawable: 104,
  texture: 1,
  name: "Синие шорты барокко"
}, {
  component: 4,
  drawable: 104,
  texture: 2,
  name: "Белые шорты барокко"
}, {
  component: 4,
  drawable: 104,
  texture: 3,
  name: "Черные шорты барокко"
}, {
  component: 4,
  drawable: 104,
  texture: 4,
  name: "Шорты с ювелиркой"
}, {
  component: 4,
  drawable: 104,
  texture: 5,
  name: "Змеиные шорты"
}, {
  component: 4,
  drawable: 104,
  texture: 6,
  name: "Белые шорты SC Broker"
}, {
  component: 4,
  drawable: 104,
  texture: 7,
  name: "Черные шорты SC Broker"
}, {
  component: 4,
  drawable: 104,
  texture: 8,
  name: "Шорты Broker"
}, {
  component: 4,
  drawable: 104,
  texture: 9,
  name: "Фиолетовые узорные шорты"
}, {
  component: 4,
  drawable: 104,
  texture: 10,
  name: "Черные узорные шорты"
}, {
  component: 4,
  drawable: 105,
  texture: 0,
  name: "Черные брюки Perseus"
}, {
  component: 4,
  drawable: 105,
  texture: 1,
  name: "Сине-зеленые брюки Perseus"
}, {
  component: 4,
  drawable: 105,
  texture: 2,
  name: "Синие брюки Perseus"
}, {
  component: 4,
  drawable: 105,
  texture: 3,
  name: "Синие с литерой P"
}, {
  component: 4,
  drawable: 105,
  texture: 4,
  name: "Белые с литерой P"
}, {
  component: 4,
  drawable: 105,
  texture: 5,
  name: "Черные с литерой P"
}, {
  component: 4,
  drawable: 105,
  texture: 6,
  name: "Черные с литерой E"
}, {
  component: 4,
  drawable: 105,
  texture: 7,
  name: "Белые брюки Broker"
}, {
  component: 4,
  drawable: 105,
  texture: 8,
  name: "Фиолетовые Lazerforce"
}, {
  component: 4,
  drawable: 105,
  texture: 9,
  name: "Красные брюки Broker"
}, {
  component: 4,
  drawable: 105,
  texture: 10,
  name: "Сине-зеленые SC Broker"
}, {
  component: 4,
  drawable: 105,
  texture: 11,
  name: "Синие брюки Lazerforce"
}, {
  component: 4,
  drawable: 105,
  texture: 12,
  name: "Черные брюки Broker"
}, {
  component: 4,
  drawable: 105,
  texture: 13,
  name: "Белые брюки SC Broker"
}, {
  component: 4,
  drawable: 105,
  texture: 14,
  name: "Черные брюки Vinewood"
}, {
  component: 4,
  drawable: 105,
  texture: 15,
  name: "Розовые брюки Vinewood"
}, {
  component: 4,
  drawable: 105,
  texture: 16,
  name: "Серые брюки Lazerforce"
}, {
  component: 4,
  drawable: 105,
  texture: 17,
  name: "Зеленые брюки Sci-Fi"
}, {
  component: 4,
  drawable: 105,
  texture: 18,
  name: "Синие брюки Sci-Fi"
}, {
  component: 4,
  drawable: 105,
  texture: 19,
  name: "Желтые брюки Sci-Fi"
}, {
  component: 4,
  drawable: 105,
  texture: 20,
  name: "Серые брюки Blagueurs"
}, {
  component: 4,
  drawable: 105,
  texture: 21,
  name: "Серые брюки с узором"
}, {
  component: 4,
  drawable: 105,
  texture: 22,
  name: "Синие брюки с узором"
}, {
  component: 4,
  drawable: 105,
  texture: 23,
  name: "Оранжевые брюки с узором"
}, {
  component: 4,
  drawable: 105,
  texture: 24,
  name: "Розовые брюки с узором"
}, {
  component: 4,
  drawable: 105,
  texture: 25,
  name: "Черные брюки SC Broker"
}, {
  component: 6,
  drawable: 87,
  texture: 0,
  name: "Синие кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 1,
  name: "Коричневые кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 2,
  name: "Зеленые кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 3,
  name: "Фиолетовые кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 4,
  name: "Красные кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 5,
  name: "Двухцветные ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 6,
  name: "Однотонные кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 7,
  name: "Синие выцветшие ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 8,
  name: "Лиловые выцветшие ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 9,
  name: "Сиреневые выцветшие ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 10,
  name: "Оранжевые выцветшие ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 11,
  name: "Серые кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 12,
  name: "Пепельные кроссовки ретро"
}, {
  component: 6,
  drawable: 87,
  texture: 13,
  name: "Серые ретро с узором"
}, {
  component: 6,
  drawable: 87,
  texture: 14,
  name: "Белые ретро с узором"
}, {
  component: 6,
  drawable: 89,
  texture: 0,
  name: "Зеленые слипоны FB"
}, {
  component: 6,
  drawable: 89,
  texture: 1,
  name: "Синие слипоны FB Manor"
}, {
  component: 6,
  drawable: 89,
  texture: 2,
  name: "Зеленые слипоны FB Manor"
}, {
  component: 6,
  drawable: 89,
  texture: 3,
  name: "Красные слипоны FB Manor"
}, {
  component: 6,
  drawable: 89,
  texture: 4,
  name: "Желтые слипоны FB Manor"
}, {
  component: 6,
  drawable: 89,
  texture: 5,
  name: "Синие слипоны FB"
}, {
  component: 6,
  drawable: 89,
  texture: 6,
  name: "Красные слипоны FB"
}, {
  component: 6,
  drawable: 89,
  texture: 7,
  name: "Желтые слипоны FB"
}, {
  component: 10,
  drawable: 73,
  texture: 0,
  name: "Футболка SC (обложка)"
}, {
  component: 10,
  drawable: 73,
  texture: 1,
  name: "Футболка SC Экшн"
}, {
  component: 10,
  drawable: 73,
  texture: 2,
  name: "Футболка The Bikers"
}, {
  component: 10,
  drawable: 73,
  texture: 3,
  name: "Футболка The Hoods"
}, {
  component: 10,
  drawable: 73,
  texture: 4,
  name: "Футболка The Punks"
}, {
  component: 10,
  drawable: 73,
  texture: 5,
  name: "Футболка The Yokels"
}, {
  component: 10,
  drawable: 73,
  texture: 6,
  name: "Street Crimes с логотипом"
}, {
  component: 10,
  drawable: 73,
  texture: 7,
  name: "Футболка Claim What's Yours"
}, {
  component: 10,
  drawable: 73,
  texture: 8,
  name: "Футболка Choose Your Side"
}, {
  component: 10,
  drawable: 73,
  texture: 9,
  name: "Футболка I&P RON"
}, {
  component: 10,
  drawable: 73,
  texture: 10,
  name: "Футболка I&P Tour"
}, {
  component: 10,
  drawable: 73,
  texture: 11,
  name: "Футболка I&P с логотипом"
}, {
  component: 10,
  drawable: 73,
  texture: 12,
  name: "Футболка Mission I"
}, {
  component: 10,
  drawable: 73,
  texture: 13,
  name: "Футболка Mission II"
}, {
  component: 10,
  drawable: 73,
  texture: 14,
  name: "Футболка Mission IV"
}, {
  component: 10,
  drawable: 73,
  texture: 15,
  name: "Футболка Mission III"
}, {
  component: 10,
  drawable: 73,
  texture: 16,
  name: "Футболка I&P (обложка)"
}, {
  component: 10,
  drawable: 73,
  texture: 17,
  name: "Футболка I&P Оккупант"
}, {
  component: 10,
  drawable: 73,
  texture: 18,
  name: "Футболка Я отстой в I&P"
}, {
  component: 11,
  drawable: 267,
  texture: 0,
  name: "Черный с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 1,
  name: "Темно-серый с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 2,
  name: "Серый с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 3,
  name: "Пепельный с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 4,
  name: "Белый с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 5,
  name: "Шоколадный с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 6,
  name: "Молочный с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 7,
  name: "Темно-синий с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 8,
  name: "Синий с карманом"
}, {
  component: 11,
  drawable: 267,
  texture: 9,
  name: "Бордовый с карманом"
}, {
  component: 11,
  drawable: 269,
  texture: 0,
  name: "Черная плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 1,
  name: "Бирюзовая плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 2,
  name: "Сиреневая плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 3,
  name: "Алая плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 4,
  name: "Горчичная плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 5,
  name: "С лесным камуфляжем"
}, {
  component: 11,
  drawable: 269,
  texture: 6,
  name: "С контрастным камуфляжем"
}, {
  component: 11,
  drawable: 269,
  texture: 7,
  name: "Оранжевая камуфляжная"
}, {
  component: 11,
  drawable: 269,
  texture: 8,
  name: "Неоновая плотная с узором"
}, {
  component: 11,
  drawable: 269,
  texture: 9,
  name: "Серая камуфляжная"
}, {
  component: 11,
  drawable: 269,
  texture: 10,
  name: "Лакричная плотная"
}, {
  component: 11,
  drawable: 269,
  texture: 11,
  name: "Синяя плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 12,
  name: "Черная плотная"
}, {
  component: 11,
  drawable: 269,
  texture: 13,
  name: "Лиловая плотная"
}, {
  component: 11,
  drawable: 269,
  texture: 14,
  name: "Желтая плотная"
}, {
  component: 11,
  drawable: 269,
  texture: 15,
  name: "Лаймовая плотная"
}, {
  component: 11,
  drawable: 269,
  texture: 16,
  name: "Черная плотная Güffy"
}, {
  component: 11,
  drawable: 269,
  texture: 17,
  name: "Лиловая плотная Güffy"
}, {
  component: 11,
  drawable: 269,
  texture: 18,
  name: "Красная плотная Güffy"
}, {
  component: 11,
  drawable: 269,
  texture: 19,
  name: "Красная плотная FB"
}, {
  component: 11,
  drawable: 269,
  texture: 20,
  name: "Зеленая плотная FB"
}, {
  component: 11,
  drawable: 269,
  texture: 21,
  name: "Синяя плотная FB"
}, {
  component: 11,
  drawable: 269,
  texture: 22,
  name: "Пятнистая плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 23,
  name: "Зеленая плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 24,
  name: "Лососевая плотная Bigness"
}, {
  component: 11,
  drawable: 269,
  texture: 25,
  name: "Лиловая плотная Bigness"
}, {
  component: 11,
  drawable: 271,
  texture: 0,
  name: "Черный Bigness"
}, {
  component: 11,
  drawable: 271,
  texture: 1,
  name: "Белый Bigness"
}, {
  component: 11,
  drawable: 271,
  texture: 2,
  name: "Черный Broker с монетой"
}, {
  component: 11,
  drawable: 271,
  texture: 3,
  name: "Белый Broker с монетой"
}, {
  component: 11,
  drawable: 271,
  texture: 4,
  name: "Красный Broker с монетой"
}, {
  component: 11,
  drawable: 271,
  texture: 5,
  name: "Лиловый Broker с монетой"
}, {
  component: 11,
  drawable: 271,
  texture: 6,
  name: "Аквамарин Broker с монетой"
}, {
  component: 11,
  drawable: 271,
  texture: 7,
  name: "Черный SC Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 8,
  name: "Белый SC Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 9,
  name: "Красный SC Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 10,
  name: "Фиолетовый SC Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 11,
  name: "Сине-зеленый SC Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 12,
  name: "Черный Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 13,
  name: "Белый Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 14,
  name: "Красный Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 15,
  name: "Фиолетовый Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 16,
  name: "Сине-зеленый Broker"
}, {
  component: 11,
  drawable: 271,
  texture: 17,
  name: "Красный в цветочек"
}, {
  component: 11,
  drawable: 271,
  texture: 18,
  name: "Черный с узором"
}, {
  component: 11,
  drawable: 271,
  texture: 19,
  name: "Белый с узором"
}, {
  component: 11,
  drawable: 271,
  texture: 20,
  name: "Сине-зеленый с узором"
}, {
  component: 11,
  drawable: 271,
  texture: 21,
  name: "Синий с узором"
}, {
  component: 11,
  drawable: 271,
  texture: 22,
  name: "Голубой Impotent Rage"
}, {
  component: 11,
  drawable: 271,
  texture: 23,
  name: "Белый Impotent Rage"
}, {
  component: 11,
  drawable: 271,
  texture: 24,
  name: "Розовый Impotent Rage"
}, {
  component: 11,
  drawable: 272,
  texture: 0,
  name: "Зеленая рубашка Sci-Fi"
}, {
  component: 11,
  drawable: 272,
  texture: 1,
  name: "Синяя рубашка Sci-Fi"
}, {
  component: 11,
  drawable: 272,
  texture: 2,
  name: "Желтая рубашка Sci-Fi"
}, {
  component: 11,
  drawable: 272,
  texture: 3,
  name: "Белая рубашка Blagueurs"
}, {
  component: 11,
  drawable: 272,
  texture: 4,
  name: "Рубашка Blagueurs с узором"
}, {
  component: 11,
  drawable: 272,
  texture: 5,
  name: "Фиолетовая с узором"
}, {
  component: 11,
  drawable: 272,
  texture: 6,
  name: "Розовая рубашка с узором"
}, {
  component: 11,
  drawable: 272,
  texture: 7,
  name: "Розовая цветочная"
}, {
  component: 11,
  drawable: 272,
  texture: 8,
  name: "Оранжевая цветочная"
}, {
  component: 11,
  drawable: 272,
  texture: 9,
  name: "Синяя цветочная"
}, {
  component: 11,
  drawable: 272,
  texture: 10,
  name: "Черная с иероглифами"
}, {
  component: 11,
  drawable: 272,
  texture: 11,
  name: "Синяя с иероглифами"
}, {
  component: 11,
  drawable: 272,
  texture: 12,
  name: "Красная с иероглифами"
}, {
  component: 11,
  drawable: 272,
  texture: 13,
  name: "Рубашка Крэпс"
}, {
  component: 11,
  drawable: 272,
  texture: 14,
  name: "Рубашка Кости"
}, {
  component: 11,
  drawable: 272,
  texture: 15,
  name: "Черная рубашка Фишки"
}, {
  component: 11,
  drawable: 272,
  texture: 16,
  name: "Красная рубашка Фишки"
}, {
  component: 11,
  drawable: 272,
  texture: 17,
  name: "Желтая рубашка Фишки"
}, {
  component: 11,
  drawable: 272,
  texture: 18,
  name: "Синяя рубашка Закат"
}, {
  component: 11,
  drawable: 272,
  texture: 19,
  name: "Зеленая рубашка Закат"
}, {
  component: 11,
  drawable: 272,
  texture: 20,
  name: "Желтая рубашка Закат"
}, {
  component: 11,
  drawable: 272,
  texture: 21,
  name: "Розовая рубашка Закат"
}, {
  component: 11,
  drawable: 272,
  texture: 22,
  name: "Синяя рубашка Прерия"
}, {
  component: 11,
  drawable: 272,
  texture: 23,
  name: "Лососевая Прерия"
}, {
  component: 11,
  drawable: 272,
  texture: 24,
  name: "Коричневая Прерия"
}, {
  component: 11,
  drawable: 272,
  texture: 25,
  name: "Розовая рубашка Прерия"
}, {
  component: 11,
  drawable: 273,
  texture: 0,
  name: "Лиловая вареная парка SN"
}, {
  component: 11,
  drawable: 273,
  texture: 1,
  name: "Зеленая вареная парка SN"
}, {
  component: 11,
  drawable: 273,
  texture: 2,
  name: "Серая вареная парка SN"
}, {
  component: 11,
  drawable: 273,
  texture: 3,
  name: "Розовая вареная парка SN"
}, {
  component: 11,
  drawable: 273,
  texture: 4,
  name: "Синяя парка SN"
}, {
  component: 11,
  drawable: 273,
  texture: 5,
  name: "Черная парка барокко"
}, {
  component: 11,
  drawable: 273,
  texture: 6,
  name: "Белая парка барокко"
}, {
  component: 11,
  drawable: 273,
  texture: 7,
  name: "Фиолетовая парка барокко"
}, {
  component: 11,
  drawable: 273,
  texture: 8,
  name: "Белая парка SC Broker"
}, {
  component: 11,
  drawable: 273,
  texture: 9,
  name: "Зеленая цветочная парка"
}, {
  component: 11,
  drawable: 273,
  texture: 10,
  name: "Желтая цветочная парка"
}, {
  component: 11,
  drawable: 273,
  texture: 11,
  name: "Фиолетовая цветочная парка"
}, {
  component: 11,
  drawable: 273,
  texture: 12,
  name: "Розовая цветочная парка"
}, {
  component: 11,
  drawable: 273,
  texture: 13,
  name: "Песочная парка Le Chien"
}, {
  component: 11,
  drawable: 273,
  texture: 14,
  name: "Черная парка Le Chien"
}, {
  component: 11,
  drawable: 273,
  texture: 15,
  name: "Красная парка Le Chien"
}, {
  component: 11,
  drawable: 273,
  texture: 16,
  name: "Кубическая парка Le Chien"
}, {
  component: 11,
  drawable: 273,
  texture: 17,
  name: "Желтая камуфляжная парка"
}, {
  component: 11,
  drawable: 273,
  texture: 19,
  name: "Зеленая камуфляжная парка"
}, {
  component: 11,
  drawable: 273,
  texture: 20,
  name: "Рыжая камуфляжная парка"
}, {
  component: 11,
  drawable: 273,
  texture: 21,
  name: "Осенняя парка Blagueurs"
}, {
  component: 11,
  drawable: 273,
  texture: 22,
  name: "Серая парка Blagueurs"
}, {
  component: 11,
  drawable: 273,
  texture: 23,
  name: "Красная парка Blagueurs"
}, {
  component: 11,
  drawable: 273,
  texture: 24,
  name: "Зеленая парка Blagueurs"
}, {
  component: 11,
  drawable: 273,
  texture: 25,
  name: "Лиловая парка Blagueurs"
}, {
  component: 11,
  drawable: 277,
  texture: 0,
  name: "Меховая SC Broker"
}, {
  component: 11,
  drawable: 277,
  texture: 1,
  name: "Меховая из змеиной кожи"
}, {
  component: 11,
  drawable: 277,
  texture: 2,
  name: "Пепельная меховая Perseus"
}, {
  component: 11,
  drawable: 277,
  texture: 3,
  name: "Кофейная меховая Perseus"
}, {
  component: 11,
  drawable: 277,
  texture: 4,
  name: "Меховая леопардовая"
}, {
  component: 11,
  drawable: 277,
  texture: 5,
  name: "Серая пятнистая меховая"
}, {
  component: 11,
  drawable: 277,
  texture: 6,
  name: "Пятнистая меховая"
}, {
  component: 11,
  drawable: 277,
  texture: 7,
  name: "Камуфляжная меховая"
}, {
  component: 11,
  drawable: 277,
  texture: 8,
  name: "Меховая в цветочек"
}, {
  component: 11,
  drawable: 277,
  texture: 9,
  name: "Меховая с боковым узором"
}, {
  component: 11,
  drawable: 278,
  texture: 0,
  name: "Белая толстовка Diamond"
}, {
  component: 11,
  drawable: 278,
  texture: 1,
  name: "Черная толстовка Diamond"
}, {
  component: 11,
  drawable: 278,
  texture: 2,
  name: "Пепельная Diamond"
}, {
  component: 11,
  drawable: 278,
  texture: 3,
  name: "Серая толстовка Diamond"
}, {
  component: 11,
  drawable: 278,
  texture: 4,
  name: "Красная толстовка Diamond"
}, {
  component: 11,
  drawable: 278,
  texture: 5,
  name: "Оранжевая Diamond"
}, {
  component: 11,
  drawable: 278,
  texture: 6,
  name: "Синяя толстовка Diamond"
}, {
  component: 11,
  drawable: 278,
  texture: 11,
  name: "Толстовка SC Broker"
}, {
  component: 11,
  drawable: 278,
  texture: 12,
  name: "Толстовка Broker с узором"
}, {
  component: 11,
  drawable: 278,
  texture: 13,
  name: "SC Broker с логотипом"
}, {
  component: 11,
  drawable: 278,
  texture: 15,
  name: "Оранжевая SN Bigness"
}, {
  component: 11,
  drawable: 278,
  texture: 16,
  name: "Фиолетовая SN Bigness"
}, {
  component: 11,
  drawable: 278,
  texture: 17,
  name: "Синяя толстовка SN Bigness"
}, {
  component: 11,
  drawable: 278,
  texture: 18,
  name: "Squash с квадратами"
}, {
  component: 11,
  drawable: 278,
  texture: 19,
  name: "Толстовка Squash 19"
}, {
  component: 11,
  drawable: 278,
  texture: 20,
  name: "Толстовка с ювелиркой"
}, {
  component: 11,
  drawable: 278,
  texture: 21,
  name: "Камуфляжная Blagueurs"
}, {
  component: 11,
  drawable: 278,
  texture: 22,
  name: "Толстовка Yeti Heat"
}, {
  component: 11,
  drawable: 278,
  texture: 23,
  name: "Серая толстовка Yeti LS 19"
}, {
  component: 11,
  drawable: 278,
  texture: 24,
  name: "Цветная Yeti LS 19"
}, {
  component: 11,
  drawable: 278,
  texture: 25,
  name: "Лесная Yeti LS 19"
}, {
  component: 11,
  drawable: 280,
  texture: 0,
  name: "Свитер Broker с узором"
}, {
  component: 11,
  drawable: 280,
  texture: 1,
  name: "Broker с орнаментом"
}, {
  component: 11,
  drawable: 280,
  texture: 2,
  name: "Свитер Broker с монетой"
}, {
  component: 11,
  drawable: 280,
  texture: 4,
  name: "Свитер SC Broker"
}, {
  component: 11,
  drawable: 280,
  texture: 5,
  name: "Серый Blagueurs (волны)"
}, {
  component: 11,
  drawable: 280,
  texture: 6,
  name: "Черный Blagueurs (волны)"
}, {
  component: 11,
  drawable: 280,
  texture: 8,
  name: "Свитер Squash Comic"
}, {
  component: 11,
  drawable: 280,
  texture: 9,
  name: "Черный LC в ромбик"
}, {
  component: 11,
  drawable: 280,
  texture: 10,
  name: "Красный LC в ромбик"
}, {
  component: 11,
  drawable: 280,
  texture: 11,
  name: "Красный камуфляжный SN"
}, {
  component: 11,
  drawable: 280,
  texture: 12,
  name: "Лиловый камуфляжный SN"
}, {
  component: 11,
  drawable: 280,
  texture: 14,
  name: "Синий свитер Pulga"
}, {
  component: 11,
  drawable: 280,
  texture: 15,
  name: "Белый свитер Pulga"
}, {
  component: 11,
  drawable: 280,
  texture: 16,
  name: "Красный свитер Pulga"
}, {
  component: 11,
  drawable: 280,
  texture: 17,
  name: "Желтый свитер Pulga"
}, {
  component: 11,
  drawable: 280,
  texture: 18,
  name: "Черный свитер Pulga"
}, {
  component: 11,
  drawable: 280,
  texture: 19,
  name: "Свитер SN Lazerforce"
}, {
  component: 11,
  drawable: 280,
  texture: 20,
  name: "Колоритный свитер SN"
}, {
  component: 11,
  drawable: 280,
  texture: 21,
  name: "Темно-синий эффектный"
}, {
  component: 11,
  drawable: 280,
  texture: 22,
  name: "Серый эффектный"
}, {
  component: 11,
  drawable: 280,
  texture: 23,
  name: "Сине-зеленый эффектный"
}, {
  component: 11,
  drawable: 281,
  texture: 0,
  name: "Белый свитер Bigness"
}, {
  component: 11,
  drawable: 281,
  texture: 1,
  name: "Черный свитер Bigness"
}, {
  component: 11,
  drawable: 281,
  texture: 2,
  name: "Белый Bigness с логотипом"
}, {
  component: 11,
  drawable: 281,
  texture: 3,
  name: "Черный Bigness с логотипом"
}, {
  component: 11,
  drawable: 281,
  texture: 5,
  name: "Черный свитер Blagueurs"
}, {
  component: 11,
  drawable: 281,
  texture: 6,
  name: "Белый свитер FB Manor"
}, {
  component: 11,
  drawable: 281,
  texture: 7,
  name: "Горчичный свитер FB Manor"
}, {
  component: 11,
  drawable: 281,
  texture: 8,
  name: "Свитер Sebastian Dix"
}, {
  component: 11,
  drawable: 281,
  texture: 9,
  name: "Серый свитер Dix"
}, {
  component: 11,
  drawable: 281,
  texture: 11,
  name: "Фиолетовый эффектный"
}, {
  component: 11,
  drawable: 282,
  texture: 0,
  name: "Бордовый пуховик Broker"
}, {
  component: 11,
  drawable: 282,
  texture: 1,
  name: "Черный пуховик Broker"
}, {
  component: 11,
  drawable: 282,
  texture: 2,
  name: "Бирюзовый пуховик Broker"
}, {
  component: 11,
  drawable: 282,
  texture: 3,
  name: "Зеленый пуховик FB"
}, {
  component: 11,
  drawable: 282,
  texture: 4,
  name: "Фиолетовый пуховик FB"
}, {
  component: 11,
  drawable: 282,
  texture: 5,
  name: "Желтый пуховик FB"
}, {
  component: 11,
  drawable: 282,
  texture: 7,
  name: "Бирюзовый пуховик Güffy"
}, {
  component: 11,
  drawable: 282,
  texture: 8,
  name: "Розовый пуховик Güffy"
}, {
  component: 11,
  drawable: 282,
  texture: 9,
  name: "Леопардовый пуховик Güffy"
}, {
  component: 11,
  drawable: 282,
  texture: 10,
  name: "Серый пуховик Yeti"
}, {
  component: 11,
  drawable: 282,
  texture: 11,
  name: "Цветной пуховик Yeti"
}, {
  component: 11,
  drawable: 282,
  texture: 12,
  name: "Лесной пуховик Yeti"
}, {
  component: 11,
  drawable: 282,
  texture: 13,
  name: "Цветочный пуховик Perseus"
}, {
  component: 11,
  drawable: 283,
  texture: 0,
  name: "Белый халат SC Broker"
}, {
  component: 11,
  drawable: 283,
  texture: 1,
  name: "Красный халат SC Broker"
}, {
  component: 11,
  drawable: 283,
  texture: 2,
  name: "Черный халат SC"
}, {
  component: 11,
  drawable: 283,
  texture: 3,
  name: "Золотой халат SC"
}, {
  component: 11,
  drawable: 283,
  texture: 4,
  name: "Белый халат Diamond"
}, {
  component: 11,
  drawable: 283,
  texture: 5,
  name: "Черный халат Diamond"
}, {
  component: 11,
  drawable: 283,
  texture: 6,
  name: "Fame or Shame с узором"
}, {
  component: 11,
  drawable: 283,
  texture: 7,
  name: "Черный Fame or Shame"
}, {
  component: 11,
  drawable: 283,
  texture: 8,
  name: "Алый Fame or Shame"
}, {
  component: 11,
  drawable: 283,
  texture: 9,
  name: "Ало-желтый Fame or Shame"
}, {
  component: 11,
  drawable: 283,
  texture: 10,
  name: "Белый Fame or Shame"
}, {
  component: 11,
  drawable: 284,
  texture: 0,
  name: "Бледно-золотое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 1,
  name: "Золотое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 2,
  name: "Черное нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 3,
  name: "Нарядное с лесным узором"
}, {
  component: 11,
  drawable: 284,
  texture: 4,
  name: "Нарядное с гео-принтом"
}, {
  component: 11,
  drawable: 284,
  texture: 5,
  name: "Чернильное нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 6,
  name: "Бело-красное нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 7,
  name: "Алое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 8,
  name: "Фиолетовое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 9,
  name: "Черное нарядное с узором"
}, {
  component: 11,
  drawable: 284,
  texture: 10,
  name: "Лазурное нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 11,
  name: "Сине-зеленое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 12,
  name: "Белое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 13,
  name: "Темно-синее нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 14,
  name: "Цветочное нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 15,
  name: "Зеленое в полоску"
}, {
  component: 11,
  drawable: 284,
  texture: 16,
  name: "Коричневое в полоску"
}, {
  component: 11,
  drawable: 284,
  texture: 17,
  name: "Аквамариновое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 18,
  name: "Кремовое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 19,
  name: "Зеленое нарядное"
}, {
  component: 11,
  drawable: 284,
  texture: 20,
  name: "Платье Карты"
}, {
  component: 11,
  drawable: 284,
  texture: 21,
  name: "Платье Банкноты"
}, {
  component: 11,
  drawable: 284,
  texture: 22,
  name: "Платье Масти"
}, {
  component: 11,
  drawable: 284,
  texture: 23,
  name: "Платье Дамы"
}, {
  component: 11,
  drawable: 284,
  texture: 24,
  name: "Платье Кости"
}, {
  component: 11,
  drawable: 284,
  texture: 25,
  name: "Платье Крэпс"
}, {
  component: 11,
  drawable: 285,
  texture: 0,
  name: "Платье Broker"
}, {
  component: 11,
  drawable: 285,
  texture: 1,
  name: "Бежевое с розами"
}, {
  component: 11,
  drawable: 285,
  texture: 2,
  name: "Черное с розами"
}, {
  component: 11,
  drawable: 285,
  texture: 3,
  name: "Белое с розами"
}, {
  component: 11,
  drawable: 285,
  texture: 4,
  name: "Красное с розами"
}, {
  component: 11,
  drawable: 285,
  texture: 5,
  name: "Белое барокко"
}, {
  component: 11,
  drawable: 285,
  texture: 6,
  name: "Черное барокко"
}, {
  component: 11,
  drawable: 285,
  texture: 7,
  name: "Розовое барокко"
}, {
  component: 11,
  drawable: 285,
  texture: 8,
  name: "Фиолетовое барокко"
}, {
  component: 11,
  drawable: 285,
  texture: 9,
  name: "Бирюзовое барокко"
}, {
  component: 11,
  drawable: 285,
  texture: 10,
  name: "Белое с литерой Е"
}, {
  component: 11,
  drawable: 285,
  texture: 11,
  name: "Бирюзовое с литерой Е"
}, {
  component: 11,
  drawable: 285,
  texture: 12,
  name: "Белое с бутонами"
}, {
  component: 11,
  drawable: 285,
  texture: 13,
  name: "Черное c бутонами"
}, {
  component: 11,
  drawable: 285,
  texture: 14,
  name: "Лиловое с бутонами"
}, {
  component: 11,
  drawable: 285,
  texture: 15,
  name: "Белое с орнаментом"
}, {
  component: 11,
  drawable: 285,
  texture: 16,
  name: "Черное с орнаментом"
}, {
  component: 11,
  drawable: 285,
  texture: 17,
  name: "Бежевое с орнаментом"
}, {
  component: 11,
  drawable: 285,
  texture: 18,
  name: "Розовое платье в цветочек"
}, {
  component: 11,
  drawable: 285,
  texture: 19,
  name: "Голубое платье в цветочек"
}, {
  component: 11,
  drawable: 285,
  texture: 20,
  name: "Белое SN с узором"
}, {
  component: 11,
  drawable: 285,
  texture: 21,
  name: "Розовое SN с узором"
}, {
  component: 11,
  drawable: 285,
  texture: 22,
  name: "Бирюзовое SN с узором"
}, {
  component: 11,
  drawable: 285,
  texture: 23,
  name: "Лиловое платье с узором"
}, {
  component: 11,
  drawable: 285,
  texture: 24,
  name: "Бирюзовое платье с узором"
}, {
  component: 11,
  drawable: 285,
  texture: 25,
  name: "Желтое платье с узором"
}, {
  component: 11,
  drawable: 286,
  texture: 0,
  name: "Футболка I&P Истребители"
}, {
  component: 11,
  drawable: 286,
  texture: 1,
  name: "Футболка I&P Враги"
}, {
  component: 11,
  drawable: 286,
  texture: 2,
  name: "Золотая Invade and Persuade"
}, {
  component: 11,
  drawable: 286,
  texture: 3,
  name: "Футболка I&P Нефть"
}, {
  component: 11,
  drawable: 286,
  texture: 4,
  name: "Футболка I&P Герой"
}, {
  component: 11,
  drawable: 286,
  texture: 5,
  name: "Футболка SC Gangs цветная"
}, {
  component: 11,
  drawable: 286,
  texture: 6,
  name: "Зеленая Invade and Persuade"
}, {
  component: 11,
  drawable: 286,
  texture: 7,
  name: "Футболка I&P Бочки"
}, {
  component: 11,
  drawable: 286,
  texture: 8,
  name: "Футболка SC Gangs красная"
}, {
  component: 11,
  drawable: 286,
  texture: 9,
  name: "Белая Street Crimes"
}, {
  component: 11,
  drawable: 286,
  texture: 10,
  name: "Черная Street Crimes"
}, {
  component: 1,
  drawable: 144,
  texture: 0,
  name: "Детская улыбка"
}, {
  component: 1,
  drawable: 145,
  texture: 0,
  name: "Маньяк"
}, {
  component: 1,
  drawable: 146,
  texture: 0,
  name: "Свинтус"
}, {
  component: 1,
  drawable: 147,
  texture: 0,
  name: "Обезьяна"
}, {
  component: 1,
  drawable: 148,
  texture: 0,
  name: "Ухмылка"
}, {
  component: 1,
  drawable: 149,
  texture: 0,
  name: "Милый кролик"
}, {
  component: 1,
  drawable: 151,
  texture: 0,
  name: "Снайпер"
}, {
  component: 1,
  drawable: 152,
  texture: 0,
  name: "Без кожи"
}, {
  component: 1,
  drawable: 153,
  texture: 0,
  name: "Черная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 1,
  name: "Серая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 2,
  name: "Светло-серая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 3,
  name: "Красная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 4,
  name: "Бирюзовая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 5,
  name: "Гетра Улыбка"
}, {
  component: 1,
  drawable: 153,
  texture: 6,
  name: "Серая цифровая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 7,
  name: "Синяя цифровая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 8,
  name: "Гетра Морская волна"
}, {
  component: 1,
  drawable: 153,
  texture: 9,
  name: "Звездно-полосатая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 10,
  name: "Гетра Оскал"
}, {
  component: 1,
  drawable: 153,
  texture: 11,
  name: "Гетра Волк"
}, {
  component: 1,
  drawable: 153,
  texture: 12,
  name: "Серая камуфляжная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 13,
  name: "Черная гетра Череп"
}, {
  component: 1,
  drawable: 153,
  texture: 14,
  name: "Гетра Крест"
}, {
  component: 1,
  drawable: 153,
  texture: 15,
  name: "Коричневая гетра Череп"
}, {
  component: 1,
  drawable: 153,
  texture: 16,
  name: "Зеленая камуфляжная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 17,
  name: "Зеленая неоновая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 18,
  name: "Лиловая неоновая гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 19,
  name: "Галечная гетра"
}, {
  component: 1,
  drawable: 153,
  texture: 20,
  name: "Зеленая гетра Змея"
}, {
  component: 1,
  drawable: 153,
  texture: 21,
  name: "Лиловая гетра Змея"
}, {
  component: 1,
  drawable: 154,
  texture: 0,
  name: "Наблюдатель"
}, {
  component: 1,
  drawable: 155,
  texture: 0,
  name: "Угловатая лиса"
}, {
  component: 1,
  drawable: 156,
  texture: 0,
  name: "Угловатый рыже-белый кот"
}, {
  component: 1,
  drawable: 156,
  texture: 1,
  name: "Угловатый серо-белый кот"
}, {
  component: 1,
  drawable: 156,
  texture: 2,
  name: "Угловатый черно-белый кот"
}, {
  component: 1,
  drawable: 157,
  texture: 0,
  name: "Угловатая свинья"
}, {
  component: 1,
  drawable: 158,
  texture: 0,
  name: "Серо-красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 1,
  name: "Пепельно-белая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 2,
  name: "Серо-белая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 3,
  name: "Тускло-красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 4,
  name: "Тускло-желтая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 5,
  name: "Тускло-зеленая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 6,
  name: "Узорчатая черная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 7,
  name: "Узорчатая красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 8,
  name: "Узорчатая желтая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 9,
  name: "Бледная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 10,
  name: "Красногубая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 11,
  name: "Дымчатая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 12,
  name: "Красная полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 13,
  name: "Голубая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 14,
  name: "Темно-розовая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 15,
  name: "Зеленая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 16,
  name: "Персиковая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 17,
  name: "Лиловая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 18,
  name: "Светло-розовая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 19,
  name: "Терракотовая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 20,
  name: "Серо-синяя полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 21,
  name: "Серая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 22,
  name: "Желто-серая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 23,
  name: "Белая полумаска"
}, {
  component: 1,
  drawable: 158,
  texture: 24,
  name: "Каменно-серая полумаска"
}, {
  component: 1,
  drawable: 159,
  texture: 0,
  name: "Желтый респиратор"
}, {
  component: 1,
  drawable: 159,
  texture: 1,
  name: "Зеленый респиратор"
}, {
  component: 1,
  drawable: 159,
  texture: 2,
  name: "Оранжевый респиратор"
}, {
  component: 1,
  drawable: 159,
  texture: 3,
  name: "Золотой респиратор"
}, {
  component: 1,
  drawable: 160,
  texture: 0,
  name: "Угловатая золотая собака"
}, {
  component: 1,
  drawable: 160,
  texture: 1,
  name: "Угловатая белая собака"
}, {
  component: 1,
  drawable: 160,
  texture: 2,
  name: "Угловатая бурая собака"
}, {
  component: 1,
  drawable: 160,
  texture: 3,
  name: "Угловатая серая собака"
}, {
  component: 1,
  drawable: 161,
  texture: 0,
  name: "Цербер"
}, {
  component: 1,
  drawable: 162,
  texture: 0,
  name: "Серо-красная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 1,
  name: "Пепельно-белая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 2,
  name: "Серо-белая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 3,
  name: "Тускло-красная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 4,
  name: "Тускло-желтая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 5,
  name: "Тускло-зеленая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 6,
  name: "Узорчатая черная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 7,
  name: "Узорчатая красная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 8,
  name: "Узорчатая желтая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 9,
  name: "Бледная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 10,
  name: "Красногубая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 11,
  name: "Дымчатая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 12,
  name: "Красная с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 13,
  name: "Голубая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 14,
  name: "Темно-розовая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 15,
  name: "Зеленая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 16,
  name: "Персиковая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 17,
  name: "Лиловая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 18,
  name: "Бледно-розовая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 19,
  name: "Терракотовая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 20,
  name: "Серо-синяя с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 21,
  name: "Серая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 22,
  name: "Желто-серая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 23,
  name: "Белая с ПНВ"
}, {
  component: 1,
  drawable: 162,
  texture: 24,
  name: "Каменно-серая с ПНВ"
}, {
  component: 1,
  drawable: 163,
  texture: 0,
  name: "Усмешка"
}, {
  component: 1,
  drawable: 163,
  texture: 1,
  name: "Плач"
}, {
  component: 1,
  drawable: 163,
  texture: 2,
  name: "Смех"
}, {
  component: 1,
  drawable: 163,
  texture: 3,
  name: "Гримаса"
}, {
  component: 1,
  drawable: 163,
  texture: 4,
  name: "Влюбленность"
}, {
  component: 1,
  drawable: 163,
  texture: 5,
  name: "Поцелуй"
}, {
  component: 1,
  drawable: 163,
  texture: 6,
  name: "Ах!"
}, {
  component: 1,
  drawable: 163,
  texture: 7,
  name: "Подмигивание"
}, {
  component: 4,
  drawable: 109,
  texture: 0,
  name: "Штаны заключенного"
}, {
  component: 4,
  drawable: 111,
  texture: 0,
  name: "Синие с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 1,
  name: "Черные с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 2,
  name: "Серые с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 3,
  name: "Бежевые с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 4,
  name: "Кремовые с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 5,
  name: "Зеленые с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 10,
  name: "Синие камуфл. с наколен."
}, {
  component: 4,
  drawable: 111,
  texture: 11,
  name: "Оскольчатые с наколен."
}, {
  component: 4,
  drawable: 111,
  texture: 12,
  name: "Контрастные с наколен."
}, {
  component: 4,
  drawable: 111,
  texture: 13,
  name: "Зеленые цифр. с наколен."
}, {
  component: 4,
  drawable: 111,
  texture: 14,
  name: "Пустынные с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 15,
  name: "Лесные с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 16,
  name: "Лесные камуфл. с наколен."
}, {
  component: 4,
  drawable: 111,
  texture: 17,
  name: "Синие цифр. с наколен."
}, {
  component: 4,
  drawable: 111,
  texture: 18,
  name: "Галечные с наколенниками"
}, {
  component: 4,
  drawable: 111,
  texture: 19,
  name: "Бежевые камуфл. с наколен."
}, {
  component: 4,
  drawable: 112,
  texture: 0,
  name: "Темно-серые с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 1,
  name: "Черные с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 2,
  name: "Угольные с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 3,
  name: "Бежевые с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 4,
  name: "Белые с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 5,
  name: "Зеленые с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 10,
  name: "Синие камуфл. с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 11,
  name: "Оскольчатые с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 12,
  name: "Контрастные с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 13,
  name: "Зеленые цифр. с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 14,
  name: "Пустынные с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 15,
  name: "Лесные с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 16,
  name: "Лесные камуфл. с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 17,
  name: "Синие цифр. с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 18,
  name: "Галечные с щитками"
}, {
  component: 4,
  drawable: 112,
  texture: 19,
  name: "Бежевые камуфл. с щитками"
}, {
  component: 6,
  drawable: 90,
  texture: 0,
  name: "Лоферы: собака с воротом"
}, {
  component: 7,
  drawable: 97,
  texture: 0,
  name: "Цепь: собака с воротом"
}, {
  component: 8,
  drawable: 182,
  texture: 0,
  name: "Серо-коричневая броня"
}, {
  component: 8,
  drawable: 182,
  texture: 1,
  name: "Бежевая броня"
}, {
  component: 8,
  drawable: 182,
  texture: 2,
  name: "Темно-зеленая броня"
}, {
  component: 8,
  drawable: 182,
  texture: 3,
  name: "Серо-зеленая броня"
}, {
  component: 8,
  drawable: 182,
  texture: 4,
  name: "Лесная камуфляжная броня"
}, {
  component: 8,
  drawable: 182,
  texture: 5,
  name: "Бежевая цифровая броня"
}, {
  component: 8,
  drawable: 182,
  texture: 6,
  name: "Контрастная камуфл. броня"
}, {
  component: 8,
  drawable: 182,
  texture: 7,
  name: "Синяя камуфляжная броня"
}, {
  component: 8,
  drawable: 182,
  texture: 8,
  name: "Камуфляжная броня: пустыня"
}, {
  component: 8,
  drawable: 182,
  texture: 9,
  name: "Зеленая камуфляжная броня"
}, {
  component: 8,
  drawable: 182,
  texture: 10,
  name: "Фиолетовая броня"
}, {
  component: 8,
  drawable: 182,
  texture: 11,
  name: "Салатовая броня"
}, {
  component: 8,
  drawable: 187,
  texture: 0,
  name: "Белая рубашка (откр.)"
}, {
  component: 8,
  drawable: 193,
  texture: 0,
  name: "Черный жилет с карманами"
}, {
  component: 8,
  drawable: 194,
  texture: 0,
  name: "Черная усиленная броня"
}, {
  component: 11,
  drawable: 289,
  texture: 0,
  name: "Черная рубашка (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 1,
  name: "Зеленая рубашка (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 2,
  name: "Кремовая рубашка (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 3,
  name: "Бежевая рубашка (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 4,
  name: "Серо-зеленая рубашка (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 5,
  name: "Белая рубашка (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 6,
  name: "Светло-серая (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 7,
  name: "Серая рубашка (закр.)"
}, {
  component: 11,
  drawable: 289,
  texture: 8,
  name: "Темно-зеленая (закр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 0,
  name: "Черная рубашка (откр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 1,
  name: "Зеленая рубашка (откр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 2,
  name: "Кремовая рубашка (откр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 3,
  name: "Бежевая рубашка (откр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 4,
  name: "Серо-зеленая (откр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 6,
  name: "Светло-серая (откр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 7,
  name: "Серая рубашка (откр.)"
}, {
  component: 11,
  drawable: 290,
  texture: 8,
  name: "Темно-зеленая (откр.)"
}, {
  component: 11,
  drawable: 291,
  texture: 0,
  name: "Черная летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 1,
  name: "Зеленая летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 2,
  name: "Кремовая летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 3,
  name: "Бежевая летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 4,
  name: "Серо-зеленая летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 5,
  name: "Белая летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 6,
  name: "Светло-серая летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 7,
  name: "Серая летняя (з)"
}, {
  component: 11,
  drawable: 291,
  texture: 8,
  name: "Темно-зеленая летняя (з)"
}, {
  component: 11,
  drawable: 292,
  texture: 0,
  name: "Черная летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 1,
  name: "Зеленая летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 2,
  name: "Кремовая летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 3,
  name: "Бежевая летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 4,
  name: "Серо-зеленая летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 5,
  name: "Белая летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 6,
  name: "Светло-серая летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 7,
  name: "Серая летняя (о)"
}, {
  component: 11,
  drawable: 292,
  texture: 8,
  name: "Темно-зеленая летняя (о)"
}, {
  component: 11,
  drawable: 296,
  texture: 2,
  name: "Розовый жилет"
}, {
  component: 11,
  drawable: 296,
  texture: 3,
  name: "Полосатый жилет"
}, {
  component: 11,
  drawable: 296,
  texture: 6,
  name: "Пепельный жилет"
}, {
  component: 11,
  drawable: 296,
  texture: 8,
  name: "Красный жилет"
}, {
  component: 11,
  drawable: 296,
  texture: 9,
  name: "Жилет цвета бургунди"
}, {
  component: 11,
  drawable: 296,
  texture: 10,
  name: "Жилет патриота"
}, {
  component: 11,
  drawable: 296,
  texture: 11,
  name: "Жилет США"
}, {
  component: 11,
  drawable: 296,
  texture: 12,
  name: "Звездно-полосатый жилет"
}, {
  component: 11,
  drawable: 296,
  texture: 13,
  name: "Жилет в синюю клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 14,
  name: "Жилет в красную полоску"
}, {
  component: 11,
  drawable: 296,
  texture: 15,
  name: "Жилет в серо-синюю клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 16,
  name: "Жилет в лиловую клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 17,
  name: "Жилет в серую клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 18,
  name: "Жилет в голубую клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 19,
  name: "Жилет в коричневую клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 20,
  name: "Жилет в горчичн. клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 21,
  name: "Жилет в малиновую клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 22,
  name: "Жилет в клетку (классика)"
}, {
  component: 11,
  drawable: 296,
  texture: 23,
  name: "Жилет в бежевую клетку"
}, {
  component: 11,
  drawable: 296,
  texture: 24,
  name: "Жилет в лазурную клетку"
}, {
  component: 11,
  drawable: 297,
  texture: 0,
  name: "Белая футболка с собакой"
}, {
  component: 11,
  drawable: 297,
  texture: 1,
  name: "Желтая футболка с собакой"
}, {
  component: 11,
  drawable: 297,
  texture: 2,
  name: "Футболка Space Monkey 3"
}, {
  component: 11,
  drawable: 297,
  texture: 3,
  name: "Space Monkey: пиксели"
}, {
  component: 11,
  drawable: 297,
  texture: 4,
  name: "Space Monkey: персонажи"
}, {
  component: 11,
  drawable: 297,
  texture: 5,
  name: "Космо-обезьяна и бананы"
}, {
  component: 11,
  drawable: 297,
  texture: 6,
  name: "Space Monkey: радиация"
}, {
  component: 11,
  drawable: 297,
  texture: 7,
  name: "Wizard's Ruin: добыча"
}, {
  component: 11,
  drawable: 297,
  texture: 8,
  name: "Футболка Меч Тога"
}, {
  component: 11,
  drawable: 297,
  texture: 9,
  name: "Футболка Тог"
}, {
  component: 11,
  drawable: 297,
  texture: 10,
  name: "Футболка Тело Тога"
}, {
  component: 11,
  drawable: 297,
  texture: 11,
  name: "Футболка Monkey's Paradise"
}, {
  component: 11,
  drawable: 297,
  texture: 12,
  name: "Defender of the Faith ретро"
}, {
  component: 11,
  drawable: 297,
  texture: 13,
  name: "Defender of the Faith"
}, {
  component: 11,
  drawable: 297,
  texture: 14,
  name: "Футболка Penetrator"
}, {
  component: 11,
  drawable: 297,
  texture: 15,
  name: "Badlands Revenge II: орел"
}, {
  component: 11,
  drawable: 297,
  texture: 16,
  name: "Badlands Revenge II: роман"
}, {
  component: 11,
  drawable: 297,
  texture: 17,
  name: "Badlands Revenge II: мишка"
}, {
  component: 11,
  drawable: 297,
  texture: 18,
  name: "Badlands Revenge II: решето"
}, {
  component: 11,
  drawable: 297,
  texture: 19,
  name: "Badlands Revenge II: спаси!"
}, {
  component: 11,
  drawable: 297,
  texture: 20,
  name: "Race And Chase: финиш"
}, {
  component: 11,
  drawable: 297,
  texture: 21,
  name: "Race And Chase: тачки"
}, {
  component: 11,
  drawable: 297,
  texture: 22,
  name: "Race And Chase: знаки"
}, {
  component: 11,
  drawable: 297,
  texture: 23,
  name: "Race And Chase: декор"
}, {
  component: 11,
  drawable: 297,
  texture: 24,
  name: "Race And Chase: старт"
}, {
  component: 11,
  drawable: 297,
  texture: 25,
  name: "Футболка"
}, {
  component: 11,
  drawable: 298,
  texture: 0,
  name: "Синяя с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 1,
  name: "Черная с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 2,
  name: "Темно-серая с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 3,
  name: "Бежевая с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 4,
  name: "Кремовая с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 5,
  name: "Зеленая с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 10,
  name: "Синяя камуфл. с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 11,
  name: "Зеленая камуфл. с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 12,
  name: "Контрастная с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 13,
  name: "Зеленая цифр. с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 14,
  name: "Пустынная с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 15,
  name: "Лесная с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 16,
  name: "Лесная камуфл. с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 17,
  name: "Синяя цифр. с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 18,
  name: "Галечная с защитой"
}, {
  component: 11,
  drawable: 298,
  texture: 19,
  name: "Бежевая камуфл. с защитой"
}, {
  component: 11,
  drawable: 299,
  texture: 0,
  name: "Футболка Pixtro"
}, {
  component: 11,
  drawable: 299,
  texture: 1,
  name: "Футболка Akedo"
}, {
  component: 11,
  drawable: 299,
  texture: 2,
  name: "Футболка Pixel Pete's"
}, {
  component: 11,
  drawable: 299,
  texture: 3,
  name: "Футболка Eight Bit"
}, {
  component: 11,
  drawable: 299,
  texture: 4,
  name: "Футболка Wonderama"
}, {
  component: 11,
  drawable: 299,
  texture: 5,
  name: "Футболка Warehouse"
}, {
  component: 11,
  drawable: 300,
  texture: 10,
  name: "Love Professor: результаты"
}, {
  component: 11,
  drawable: 300,
  texture: 11,
  name: "Love Professor: с ним"
}, {
  component: 11,
  drawable: 300,
  texture: 12,
  name: "Love Professor: с ней"
}, {
  component: 11,
  drawable: 300,
  texture: 13,
  name: "Love Professor: френдзона"
}, {
  component: 11,
  drawable: 300,
  texture: 14,
  name: "Love Professor: враг"
}, {
  component: 11,
  drawable: 300,
  texture: 15,
  name: "Love Professor: секреты"
}, {
  component: 11,
  drawable: 301,
  texture: 0,
  name: "Черный гладкий пиджак"
}, {
  component: 11,
  drawable: 301,
  texture: 1,
  name: "Серый гладкий пиджак"
}, {
  component: 11,
  drawable: 301,
  texture: 2,
  name: "Синий гладкий пиджак"
}, {
  component: 11,
  drawable: 301,
  texture: 3,
  name: "Сизый гладкий пиджак"
}, {
  component: 11,
  drawable: 301,
  texture: 4,
  name: "Красный гладкий пиджак"
}, {
  component: 11,
  drawable: 301,
  texture: 5,
  name: "Белый гладкий пиджак"
}, {
  component: 11,
  drawable: 301,
  texture: 6,
  name: "Коричневый гладкий пиджак"
}, {
  component: 11,
  drawable: 301,
  texture: 7,
  name: "Белоснежный гладкий пиджак"
}, {
  component: 11,
  drawable: 303,
  texture: 0,
  name: "Свитер Хо-хо-хо!"
}, {
  component: 11,
  drawable: 304,
  texture: 0,
  name: "Черная легкая броня"
}, {
  component: 11,
  drawable: 305,
  texture: 0,
  name: "Черная рубашка (лазутчик)"
}, {
  component: 11,
  drawable: 306,
  texture: 0,
  name: "Куртка Yung Ancestor"
}, {
  component: 11,
  drawable: 307,
  texture: 0,
  name: "Толстовка Yung Ancestor"
}];
},{}],"Vt6D":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.partsListAdmin = exports.partsList = exports.getPartName = exports.getBoneData = exports.getAllUndershirts = exports.getAllTorsos = exports.getAllTops = exports.getAllShoes = exports.getAllMasks = exports.getAllLegs = exports.dressShopPartsList = exports.clothShopNames = exports.boneParts = exports.CLOTH_VARIATION_ID_MULTIPLER = exports.ArmorNames = void 0;
var _clothesData = require("./clothesData");
const clothShopNames = exports.clothShopNames = ["Магазин одежды", "Магазин одежды", "Магазин одежды", "Магазин одежды", "Эксклюзивная одежда"];
const CLOTH_VARIATION_ID_MULTIPLER = exports.CLOTH_VARIATION_ID_MULTIPLER = 10000000;
const getPartName = id => {
  let res = "";
  switch (id) {
    case 1:
      res = "Маска";
      break;
    case 3:
      res = "Торс";
      break;
    case 4:
      res = "Ноги";
      break;
    case 5:
      res = "Рюкзаки и парашюты";
      break;
    case 6:
      res = "Обувь";
      break;
    case 7:
      res = "Аксессуары";
      break;
    case 8:
      res = "Нижняя часть торса";
      break;
    case 9:
      res = "Броня";
      break;
    case 11:
      res = "Верх";
      break;
  }
  return res;
};
exports.getPartName = getPartName;
const partsList = exports.partsList = [[1, "Маска"], [3, "Торс"], [333, "Полный"], [4, "Ноги"], [6, "Обувь"], [7, "Аксессуары"], [9, "Броня"], [100, "Головные уборы"], [101, "Очки"], [102, "Уши"], [106, "Часы"], [107, "Браслеты"], [1000, "Перчатки"]];
const dressShopPartsList = exports.dressShopPartsList = [[1, "Маска"], [3, "Торс"], [333, "Полный"], [4, "Ноги"], [6, "Обувь"], [7, "Аксессуары"], [100, "Головные уборы"], [101, "Очки"], [102, "Уши"], [106, "Часы"], [107, "Браслеты"], [1000, "Перчатки"]];
const partsListAdmin = exports.partsListAdmin = [...partsList, [5, "Рюкзаки и парашюты"], [10, "Декали"]];
const boneParts = exports.boneParts = [[1, 31086, 0.5, 2.5, 1], [3, 24818, 0, 3.5, 0.3], [4, 63931, -1.0, 3.0, 0], [6, 52301, 1.0, 2.5, 0], [7, 24818, 0, 2.5, 0], [100, 31086, 1.5, 2.0, 1.3], [101, 31086, 0.0, 2.5, 1], [102, 31086, 0.8, 0.0, 0.7], [106, 60309, 0, 2.5, 0], [107, 28422, 0, 2.5, 0]];
var ArmorNames;
(function (ArmorNames) {
  ArmorNames["StandardArmor"] = "\u0421\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["PurpleArmor"] = "\u0424\u0438\u043E\u043B\u0435\u0442\u043E\u0432\u044B\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["GreenArmor"] = "\u0417\u0435\u043B\u0435\u043D\u044B\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["BlueArmor"] = "\u0421\u0438\u043D\u0438\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["RedArmor"] = "\u041A\u0440\u0430\u0441\u043D\u044B\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["YellowArmor"] = "\u0416\u0435\u043B\u0442\u044B\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["GovernmentArmor"] = "\u041F\u0440\u0430\u0432\u0438\u0442\u0435\u043B\u044C\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["PoliceArmor"] = "\u041F\u043E\u043B\u0438\u0446\u0435\u0439\u0441\u043A\u0438\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["FibArmor"] = "\u0411\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442 FIB";
  ArmorNames["ArmyArmor"] = "\u0410\u0440\u043C\u0435\u0439\u0441\u043A\u0438\u0439 \u0431\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442";
  ArmorNames["SheriffArmor"] = "\u0411\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442 \u0448\u0435\u0440\u0438\u0444\u043E\u0432";
  ArmorNames["YakuzaArmor"] = "\u0411\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442 \u044F\u043A\u0443\u0434\u0437\u0430";
  ArmorNames["RMArmor"] = "\u0411\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442 \u0420\u041C";
  ArmorNames["LCNArmor"] = "\u0411\u0440\u043E\u043D\u0435\u0436\u0438\u043B\u0435\u0442 \u043B\u043A\u043D";
})(ArmorNames || (exports.ArmorNames = ArmorNames = {}));
const getBoneData = part => {
  const cfg = boneParts.find(q => q[0] == part);
  if (!cfg) return null;
  return {
    bone: cfg[1],
    x: cfg[2],
    y: cfg[3],
    z: cfg[4]
  };
};
exports.getBoneData = getBoneData;
const getAllMasks = (male = true) => {
  return (male ? _clothesData.componentsMale : _clothesData.componentsFemale).filter(q => q.component === 1);
};
exports.getAllMasks = getAllMasks;
const getAllTorsos = (male = true) => {
  return (male ? _clothesData.componentsMale : _clothesData.componentsFemale).filter(q => q.component === 3);
};
exports.getAllTorsos = getAllTorsos;
const getAllTops = (male = true) => {
  return (male ? _clothesData.componentsMale : _clothesData.componentsFemale).filter(q => q.component === 11);
};
exports.getAllTops = getAllTops;
const getAllUndershirts = (male = true) => {
  return (male ? _clothesData.componentsMale : _clothesData.componentsFemale).filter(q => q.component === 8);
};
exports.getAllUndershirts = getAllUndershirts;
const getAllLegs = (male = true) => {
  return (male ? _clothesData.componentsMale : _clothesData.componentsFemale).filter(q => q.component === 4);
};
exports.getAllLegs = getAllLegs;
const getAllShoes = (male = true) => {
  return (male ? _clothesData.componentsMale : _clothesData.componentsFemale).filter(q => q.component === 6);
};
exports.getAllShoes = getAllShoes;
},{"./clothesData":"OpP5"}],"tsnK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npcVehicles = exports.npcVehicleJack = exports.npcGrabCarSetting = exports.maxAfkTime = exports.maxAfkRentCarTime = exports.maxAfkFractionCarTime = exports.isAPlane = exports.isAMotorcycle = exports.isAHeli = exports.isABike = exports.fuelTypeNames = exports.commercialVehicles = exports.VEHICLE_GRAB_COOLDOWN_MINUTES = exports.VEHICLE_FUEL_TYPE = exports.VEHICLE_FUEL_RATE = exports.PLANES_LIST = exports.MOTORCYCLES_LIST = exports.MOD_COST_TYPE = exports.HELI_LIST = exports.FUEL_MAX_DEFAULT = exports.BIKE_LIST = exports.ANCHOR_LIST = void 0;
const ANCHOR_LIST = exports.ANCHOR_LIST = ["dinghy2", "dinghy", "dinghy3", "dinghy4", "toro", "suntrap", "toro2", "tropic", "tropic2", "speeder", "jetmax", "riot2", "riot", "insurgent2"];
const VEHICLE_GRAB_COOLDOWN_MINUTES = exports.VEHICLE_GRAB_COOLDOWN_MINUTES = 10;
const MOTORCYCLES_LIST = exports.MOTORCYCLES_LIST = ["akuma", "avarus", "bagger", "bati", "bati2", "bf1401", "carbonrs", "chimera", "cliffhanger", "daemon", "daemon2", "defiler", "deathbike", "deathbike2", "deathbike3", "diablous", "diablous2", "double", "enduro", "esskey", "faggio", "faggio2", "faggio3", "fcr", "fcr2", "gargoyle", "hakuchou", "hakuchou2", "hexer", "innovation", "lectro", "manchez", "nemesis", "nightblade", "oppressor", "oppressor2", "pcj", "ratbike", "ruffian", "rrocket", "sanchez", "sanchez2", "sanctus", "shotaro", "sovereign", "stryder", "thrust", "vader", "vindicator", "vortex", "wolfsbane", "zombiea", "zombieb", "manchez2", "policeb"];
const BIKE_LIST = exports.BIKE_LIST = ["bmx", "cruiser", "fixter", "scorcher", "tribike", "tribike2", "tribike3"];
const PLANES_LIST = exports.PLANES_LIST = ["alphaz1", "avenger", "avenger2", "besra", "blimp", "blimp2", "blimp3", "bombushka", "cargoplane", "cuban1901", "dodo", "duster", "howard", "hydra", "jet", "lazer", "luxor", "luxor2", "mammatus", "microlight", "miljet", "mogul", "molotok", "nimbus", "nokota", "pyro", "rogue", "seabreeze", "shamal", "starling", "strikeforce", "stunt", "titan", "tula", "velum", "velum2", "vestra", "volatol", "alkonost"];
const HELI_LIST = exports.HELI_LIST = ["akula", "annihilator", "buzzard", "buzzard2", "cargobob", "cargobob3", "cargobob4", "frogger", "frogger2", "havok", "hunter", "maverick", "savage", "seasparrow", "skylift", "supervolito", "supervolito2", "swift", "swift2", "valkyrie", "valkyrie2", "volatus", "annihilator2", "seasparrow2", "seasparrow3", "polmav"];
const isAMotorcycle = model => {
  return MOTORCYCLES_LIST.includes(model);
};
exports.isAMotorcycle = isAMotorcycle;
const isABike = model => {
  return BIKE_LIST.includes(model);
};
exports.isABike = isABike;
const isAPlane = model => {
  return PLANES_LIST.includes(model);
};
exports.isAPlane = isAPlane;
const isAHeli = model => {
  return HELI_LIST.includes(model);
};
exports.isAHeli = isAHeli;
const fuelTypeNames = exports.fuelTypeNames = ["Электричество", "92", "95", "98", "Дизель", "Авиатопливо"];
const commercialVehicles = exports.commercialVehicles = ["benson", "biff", "hauler", "hauler2", "mule", "mule2", "mule3", "mule4", "packer", "phantom", "phantom3", "pounder", "pounder2", "guardian", "brutus", "bison", "bison2", "burrito3", "gburrito", "gburrito2", "pony", "speedo4", "speedo", "rumpo3", "youga", "youga2", "bobcatxl", "burrito", "burrito4", "paradise", "bison", "burrito2", "sadler", "contender", "sandking2", "sandking", "riata"];
const maxAfkTime = exports.maxAfkTime = 100;
const maxAfkRentCarTime = exports.maxAfkRentCarTime = 10;
const maxAfkFractionCarTime = exports.maxAfkFractionCarTime = 120;
const FUEL_MAX_DEFAULT = exports.FUEL_MAX_DEFAULT = 80;
var VEHICLE_FUEL_RATE;
(function (VEHICLE_FUEL_RATE) {
  VEHICLE_FUEL_RATE[VEHICLE_FUEL_RATE["SPEED"] = 0.001] = "SPEED";
  VEHICLE_FUEL_RATE[VEHICLE_FUEL_RATE["PASSENGERS"] = 0.005] = "PASSENGERS";
  VEHICLE_FUEL_RATE[VEHICLE_FUEL_RATE["AFK"] = 0.06] = "AFK";
  VEHICLE_FUEL_RATE[VEHICLE_FUEL_RATE["INTERVAL"] = 15] = "INTERVAL";
})(VEHICLE_FUEL_RATE || (exports.VEHICLE_FUEL_RATE = VEHICLE_FUEL_RATE = {}));
var VEHICLE_FUEL_TYPE;
(function (VEHICLE_FUEL_TYPE) {
  VEHICLE_FUEL_TYPE[VEHICLE_FUEL_TYPE["ELECTRO"] = 0] = "ELECTRO";
  VEHICLE_FUEL_TYPE[VEHICLE_FUEL_TYPE["A92"] = 1] = "A92";
  VEHICLE_FUEL_TYPE[VEHICLE_FUEL_TYPE["A95"] = 2] = "A95";
  VEHICLE_FUEL_TYPE[VEHICLE_FUEL_TYPE["A98"] = 3] = "A98";
  VEHICLE_FUEL_TYPE[VEHICLE_FUEL_TYPE["DISEL"] = 4] = "DISEL";
  VEHICLE_FUEL_TYPE[VEHICLE_FUEL_TYPE["AIR"] = 5] = "AIR";
})(VEHICLE_FUEL_TYPE || (exports.VEHICLE_FUEL_TYPE = VEHICLE_FUEL_TYPE = {}));
var MOD_COST_TYPE;
(function (MOD_COST_TYPE) {
  MOD_COST_TYPE[MOD_COST_TYPE["DEFAULT"] = 0] = "DEFAULT";
  MOD_COST_TYPE[MOD_COST_TYPE["PROGRESSIVE"] = 1] = "PROGRESSIVE";
})(MOD_COST_TYPE || (exports.MOD_COST_TYPE = MOD_COST_TYPE = {}));
const npcVehicleJack = exports.npcVehicleJack = [['banshee', 1401], ['bullet', 1501], ['coquette', 1701], ["bjxl", 1401], ["carbonizzare", 1501], ["feltzer2", 1501], ["felon", 1401], ["felon2", 1201], ["f620", 1801], ["infernus", 1401], ["jackal", 1201], ["ninef", 1401], ["ninef2", 1401], ["comet2", 1801], ["exemplar", 1401], ["rapidgt", 1901], ["rapidgt2", 1801], ["rocoto", 1501], ["superd", 1201], ["surano", 1201], ["schafter2", 1401], ["schwarzer", 1901], ["sentinel", 1201], ["sentinel2", 1201], ["zion", 1801], ["serrano", 1401], ["voltic", 1701], ["tornado", 1201], ["jester", 1901], ["alpha", 1801], ["massacro", 1501], ["huntley", 1401], ["furoregt", 1201], ["asterope", 1901], ["baller", 1501], ["baller2", 1501], ["buffalo", 1801], ["blista", 1901], ["blista2", 1901], ["cavalcade", 1201], ["cavalcade2", 1801], ["dominator", 1401], ["gresley", 1901], ["dubsta", 1701], ["dukes", 1201], ["dilettante", 1201], ["emperor", 1201], ["fq2", 1701], ["futo", 1801], ["fugitive", 1201], ["fusilade", 1501], ["habanero", 1201], ["issi2", 1201], ["gauntlet", 1201], ["granger", 1801], ["landstalker", 1201], ["mesa", 1201], ["oracle", 1401], ["oracle2", 1401], ["patriot", 1901], ["peyote", 1701], ["penumbra", 1801], ["prairie", 1901], ["radi", 1801], ["ruiner", 1501], ["rumpo", 1701], ["sabregt", 1801], ["seminole", 1201], ["stalion", 1201], ["stanier", 1701], ["surge", 1801], ["tornado2", 1701], ["washington", 1401], ["zion2", 1801], ["panto", 1201], ["pigalle", 1701], ["asea", 1801], ["buccaneer", 1401], ["emperor2", 1801], ["intruder", 1501], ["ingot", 1801], ["manana", 1701], ["minivan", 1201], ["phoenix", 1501], ["picador", 1901], ["premier", 1201], ["primo", 1801], ["rancherxl", 1901], ["regina", 1901], ["sultan", 1201], ["stratum", 1201], ["youga", 1401], ["tornado3", 1501], ["vigero", 1801], ["warrener", 1401], ["glendale", 1801], ["rhapsody", 1201], ["vader", 1801], ["faggio2", 1901], ["akuma", 1401], ["bagger", 1201], ["bati", 1801], ["daemon", 1401], ["nemesis", 1901], ["pcj", 1901], ["double", 1701], ["ruffian", 1701], ["thrust", 1401], ["hakuchou", 1801], ["pounder", 1801], ["biff", 1901], ["mule", 1701], ["taco", 1401], ["asbo", 1501], ["club", 1901], ["cogcabrio", 1801], ["seminole2", 1501], ["blista3", 1201], ["elegy", 1701], ["revolter", 1201], ["schlagen", 1501], ["seven70", 1701], ["dynasty", 1801], ["manana2", 1401], ["nebula", 1501], ["retinue2", 1901], ["ztype", 1201], ["zion3", 1401], ["zentorno", 2000], ["yosemite", 1401], ["virgo3", 1801]];
const npcVehicles = exports.npcVehicles = ["banshee", "bjxl", "bullet", "carbonizzare", "coquette", "feltzer2", "felon", "felon2", "f620", "infernus", "jackal", "ninef", "ninef2", "comet2", "exemplar", "rapidgt", "rapidgt2", "rocoto", "superd", "surano", "schafter2", "schwarzer", "sentinel", "sentinel2", "zion", "serrano", "voltic", "tornado", "jester", "alpha", "massacro", "huntley", "furoregt", "asterope", "baller", "baller2", "buffalo", "blista", "blista2", "cavalcade", "cavalcade2", "dominator", "gresley", "dubsta", "dukes", "dilettante", "emperor", "fq2", "futo", "fugitive", "fusilade", "habanero", "issi2", "gauntlet", "granger", "landstalker", "mesa", "oracle", "oracle2", "patriot", "peyote", "penumbra", "prairie", "radi", "ruiner", "rumpo", "sabregt", "seminole", "stalion", "stanier", "surge", "tornado2", "washington", "zion2", "panto", "pigalle", "asea", "buccaneer", "emperor2", "intruder", "ingot", "manana", "minivan", "phoenix", "picador", "premier", "primo", "rancherxl", "regina", "sultan", "stratum", "youga", "tornado3", "vigero", "warrener", "glendale", "rhapsody", "vader", "faggio2", "akuma", "bagger", "bati", "daemon", "nemesis", "pcj", "double", "ruffian", "thrust", "hakuchou", "pounder", "biff", "mule", "taco", "asbo", "club", "cogcabrio", "seminole2", "blista3", "elegy", "revolter", "schlagen", "seven70", "dynasty", "manana2", "nebula", "retinue2", "ztype", "zion3", "zentorno"];
const npcGrabCarSetting = exports.npcGrabCarSetting = {
  vehPosOffset: 15,
  npcModel: 'ig_lamardavis',
  npcPos: {
    x: 297.33,
    y: -1184.32,
    z: 29.34
  },
  npcHeading: 129,
  vehiclePos: {
    x: 293.73,
    y: -1188.57,
    z: 28.26
  },
  incorrectCarText: ["Я конечно всё понимаю, но этот транспорт мне нафиг не нужен", "Нет, мне это не нужно", "Я вроде как не просил эту модель", "Не надо мне свозить что попало, только то, что я прошу", "Я это не приму, что мне с этим делать?"]
};
},{}],"ixde":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocationCategoryEnum = exports.GPSPointType = void 0;
var LocationCategoryEnum;
(function (LocationCategoryEnum) {
  LocationCategoryEnum["Weapons_Shop"] = "\u041C\u0430\u0433\u0430\u0437\u0438\u043D\u044B \u043E\u0440\u0443\u0436\u0438\u044F";
  LocationCategoryEnum["Clothing_Store"] = "\u041C\u0430\u0433\u0430\u0437\u0438\u043D\u044B \u043E\u0434\u0435\u0436\u0434\u044B";
  LocationCategoryEnum["Shop_24_7"] = "\u041C\u0430\u0433\u0430\u0437\u0438\u043D\u044B";
  LocationCategoryEnum["Banks"] = "\u0411\u0430\u043D\u043A\u0438";
  LocationCategoryEnum["Refueling"] = "\u0417\u0430\u043F\u0440\u0430\u0432\u043A\u0438";
  LocationCategoryEnum["Car_Showroom"] = "\u0410\u0432\u0442\u043E\u0441\u0430\u043B\u043E\u043D";
  LocationCategoryEnum["Gangs"] = "\u0411\u0430\u043D\u0434\u044B";
  LocationCategoryEnum["Car_Wash"] = "\u0410\u0432\u0442\u043E\u043C\u043E\u0439\u043A\u0438";
  LocationCategoryEnum["Rentals"] = "\u041F\u0440\u043E\u0434\u0430\u0436\u0430/\u041F\u0440\u043E\u043A\u0430\u0442 \u0442\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\u0430";
  LocationCategoryEnum["Pharmacy"] = "\u0410\u043F\u0442\u0435\u043A\u0438";
  LocationCategoryEnum["Clubs"] = "\u041A\u043B\u0443\u0431\u044B/\u0411\u0430\u0440\u044B";
  LocationCategoryEnum["Burgers"] = "\u0411\u0443\u0440\u0433\u0435\u0440\u043D\u044B\u0435";
  LocationCategoryEnum["ATM"] = "\u0411\u0430\u043D\u043A\u043E\u043C\u0430\u0442\u044B";
  LocationCategoryEnum["NPC"] = "NPC";
  LocationCategoryEnum["Parking"] = "\u041F\u0430\u0440\u043A\u043E\u0432\u043A\u0438";
  LocationCategoryEnum["Licenses"] = "\u041B\u0438\u0446\u0435\u043D\u0437\u0438\u0438";
  LocationCategoryEnum["Los_Santos_Customs"] = "\u0410\u0432\u0442\u043E\u043C\u0430\u0441\u0442\u0435\u0440\u0441\u043A\u0438\u0435";
  LocationCategoryEnum["Events"] = "\u0421\u043E\u0431\u044B\u0442\u0438\u044F";
})(LocationCategoryEnum || (exports.LocationCategoryEnum = LocationCategoryEnum = {}));
var GPSPointType;
(function (GPSPointType) {
  GPSPointType[GPSPointType["Business"] = 0] = "Business";
  GPSPointType[GPSPointType["Event"] = 1] = "Event";
})(GPSPointType || (exports.GPSPointType = GPSPointType = {}));
},{}],"ZFkC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npcBusiness = exports.getFuelCost = exports.StaticVehicleStreamRange = exports.StaticVehicle = exports.FUEL_COST = exports.DAYLY_ADD_MONEY = exports.BUSINESS_TYPE_NAMES = exports.BUSINESS_TYPE_CATEGORIES = exports.BUSINESS_TYPE = exports.BUSINESS_SUBTYPE_NAMES = exports.BUSINESS_GOV_PERCENT = exports.BUSINESS_BUY_LEVEL = void 0;
var _cloth = require("./cloth");
var _vehicles = require("./vehicles");
var _locationCategories = require("./phone/locationCategories.enum");
const BUSINESS_GOV_PERCENT = exports.BUSINESS_GOV_PERCENT = 2;
const BUSINESS_BUY_LEVEL = exports.BUSINESS_BUY_LEVEL = 0;
var FUEL_COST;
(function (FUEL_COST) {
  FUEL_COST[FUEL_COST["ELECTRO"] = 5] = "ELECTRO";
  FUEL_COST[FUEL_COST["A92"] = 10] = "A92";
  FUEL_COST[FUEL_COST["A95"] = 12] = "A95";
  FUEL_COST[FUEL_COST["A98"] = 15] = "A98";
  FUEL_COST[FUEL_COST["DISEL"] = 8] = "DISEL";
  FUEL_COST[FUEL_COST["AIR"] = 18] = "AIR";
})(FUEL_COST || (exports.FUEL_COST = FUEL_COST = {}));
const getFuelCost = type => {
  if (type === _vehicles.VEHICLE_FUEL_TYPE.DISEL) return FUEL_COST.DISEL;else if (type === _vehicles.VEHICLE_FUEL_TYPE.ELECTRO) return FUEL_COST.ELECTRO;else if (type === _vehicles.VEHICLE_FUEL_TYPE.AIR) return FUEL_COST.AIR;else if (type === _vehicles.VEHICLE_FUEL_TYPE.A98) return FUEL_COST.A98;else if (type === _vehicles.VEHICLE_FUEL_TYPE.A95) return FUEL_COST.A95;else if (type === _vehicles.VEHICLE_FUEL_TYPE.A92) return FUEL_COST.A92;else return 0;
};
exports.getFuelCost = getFuelCost;
var BUSINESS_TYPE;
(function (BUSINESS_TYPE) {
  BUSINESS_TYPE[BUSINESS_TYPE["BANK"] = 0] = "BANK";
  BUSINESS_TYPE[BUSINESS_TYPE["VEHICLE_SHOP"] = 1] = "VEHICLE_SHOP";
  BUSINESS_TYPE[BUSINESS_TYPE["ITEM_SHOP"] = 2] = "ITEM_SHOP";
  BUSINESS_TYPE[BUSINESS_TYPE["FUEL"] = 3] = "FUEL";
  BUSINESS_TYPE[BUSINESS_TYPE["DRESS_SHOP"] = 4] = "DRESS_SHOP";
  BUSINESS_TYPE[BUSINESS_TYPE["TATTOO_SALON"] = 5] = "TATTOO_SALON";
  BUSINESS_TYPE[BUSINESS_TYPE["TUNING"] = 6] = "TUNING";
  BUSINESS_TYPE[BUSINESS_TYPE["BAR"] = 7] = "BAR";
  BUSINESS_TYPE[BUSINESS_TYPE["PARKING"] = 8] = "PARKING";
  BUSINESS_TYPE[BUSINESS_TYPE["BARBER"] = 9] = "BARBER";
  BUSINESS_TYPE[BUSINESS_TYPE["WASH"] = 10] = "WASH";
})(BUSINESS_TYPE || (exports.BUSINESS_TYPE = BUSINESS_TYPE = {}));
const BUSINESS_TYPE_NAMES = exports.BUSINESS_TYPE_NAMES = ["Банки", "Продажа/Прокат транспорта", "Магазины", "Заправки", "Магазины одежды", "Тату салоны", "Автомастерские", "Клубы/Бары", 'Парковки', 'Барбершопы', 'Автомойки'];
const BUSINESS_TYPE_CATEGORIES = exports.BUSINESS_TYPE_CATEGORIES = [_locationCategories.LocationCategoryEnum.Banks, _locationCategories.LocationCategoryEnum.Car_Showroom, _locationCategories.LocationCategoryEnum.Shop_24_7, _locationCategories.LocationCategoryEnum.Refueling, _locationCategories.LocationCategoryEnum.Clothing_Store, _locationCategories.LocationCategoryEnum.Clothing_Store, _locationCategories.LocationCategoryEnum.Los_Santos_Customs, _locationCategories.LocationCategoryEnum.Clubs, _locationCategories.LocationCategoryEnum.Parking, _locationCategories.LocationCategoryEnum.Clothing_Store, _locationCategories.LocationCategoryEnum.Car_Wash];
const BUSINESS_SUBTYPE_NAMES = exports.BUSINESS_SUBTYPE_NAMES = [["Pacific Standart Bank", "Maze Bank", "Fleeca Bank", "Blane Bank"], ["Прокат транспорта", "Автосалон", "Автосалон", "Автосалон", "Мотосалон", "Лодочная станция", "Воздушный транспорт", "Автосалон", "Редкий транспорт"], ["Магазин 24/7", "Магазин электроники", "Оружейный магазин", "Аптека", "Магазин сумок и рюкзаков", "Фермерский магазин", "Магазин питомцев", "Табачный магазин"], ["Заправка", "Заправка"], _cloth.clothShopNames, ["Тату салон", "Тату салон", "Тату салон", "Тату салон", "Тату салон"], ["Автомастерская", "Чип-тюнинг"], ["Клуб", "Клуб"], ["Парковка", "Парковка"], ["Барбершоп", "Барбершоп", "Барбершоп", "Барбершоп"], ["Автомойка"]];
const DAYLY_ADD_MONEY = exports.DAYLY_ADD_MONEY = 2;
const npcBusiness = exports.npcBusiness = {
  ITEM: [['s_m_y_busboy_01', 's_m_m_linecook', 'ig_manuel', 'cs_marnie', 's_f_y_migrant_01', 's_m_m_migrant_01', 'ig_russiandrunk', 'a_m_m_salton_02', 'g_m_y_salvagoon_02', 'mp_m_shopkeep_01', 'a_f_m_soucent_02', 'a_f_y_soucent_02', 's_m_m_strvend_01', 's_f_m_sweatshop_01', 's_f_y_sweatshop_01', 'mp_f_counterfeit_01', 'mp_f_weed_01', 'u_m_y_burgerdrug_01', 'a_m_m_farmer_01', 'a_m_o_genstreet_01', 'cs_jimmyboston', 'ig_oneil'], ['a_m_y_stlat_01', 'u_m_y_baygor', 's_m_y_strvend_01', 'a_m_y_stwhi_02', 'cs_taocheng', 'a_m_y_vinewood_03', 'mp_f_execpa_01', 'ig_andreas', 'a_m_y_bevhills_01', 'a_m_y_bevhills_02', 'mp_f_boatstaff_01', 'u_m_y_burgerdrug_01', 'a_m_y_busicas_01', 'a_f_y_business_02', 'a_m_y_business_02', 'a_f_y_business_04', 'u_m_y_chip', 'csb_imran', 'g_m_y_pologoon_01', 'ig_popov'], ['u_m_y_baygor', 'u_m_y_baygor', 'u_m_o_taphillbilly', 'ig_terry', 'mp_m_weapexp_01', 's_m_y_ammucity_01', 'a_m_m_bevhills_02', 'a_f_y_business_04', 's_m_o_busker_01', 'ig_car3guy1', 'ig_car3guy2', 'csb_chin_goon', 'ig_cletus', 's_m_m_cntrybar_01', 'mp_m_exarmy_01', 'u_m_m_filmdirector', 'ig_josef', 'a_m_o_ktown_01', 'ig_popov', 'ig_russiandrunk'], ['u_m_y_baygor', 'a_m_y_beachvesp_01', 'a_m_y_beachvesp_02', 'a_m_m_bevhills_01', 'a_m_m_bevhills_02', 'a_m_y_bevhills_02', 'mp_f_boatstaff_01', 'a_f_y_business_04', 'a_m_o_genstreet_01', 'ig_jay_norris', 'a_f_o_ktown_01', 'a_f_m_tourist_01', 'mp_f_execpa_01'], ['u_m_y_baygor', 'u_m_y_baygor', 'u_m_o_taphillbilly', 'ig_terry', 'mp_m_weapexp_01', 's_m_y_ammucity_01', 'a_m_m_bevhills_02', 'a_f_y_business_04', 's_m_o_busker_01', 'ig_car3guy1', 'ig_car3guy2', 'csb_chin_goon', 'ig_cletus', 's_m_m_cntrybar_01', 'mp_m_exarmy_01', 'u_m_m_filmdirector', 'ig_josef', 'a_m_o_ktown_01', 'ig_popov', 'ig_russiandrunk'], ['u_m_y_baygor', 'u_m_y_baygor', 'u_m_o_taphillbilly', 'ig_terry', 'mp_m_weapexp_01', 's_m_y_ammucity_01', 'a_m_m_bevhills_02', 'a_f_y_business_04', 's_m_o_busker_01', 'ig_car3guy1', 'ig_car3guy2', 'csb_chin_goon', 'ig_cletus', 's_m_m_cntrybar_01', 'mp_m_exarmy_01', 'u_m_m_filmdirector', 'ig_josef', 'a_m_o_ktown_01', 'ig_popov', 'ig_russiandrunk'], ['u_m_y_baygor', 'u_m_y_baygor', 'u_m_o_taphillbilly', 'ig_terry', 'mp_m_weapexp_01', 's_m_y_ammucity_01', 'a_m_m_bevhills_02', 'a_f_y_business_04', 's_m_o_busker_01', 'ig_car3guy1', 'ig_car3guy2', 'csb_chin_goon', 'ig_cletus', 's_m_m_cntrybar_01', 'mp_m_exarmy_01', 'u_m_m_filmdirector', 'ig_josef', 'a_m_o_ktown_01', 'ig_popov', 'ig_russiandrunk'], ['u_m_y_baygor', 'u_m_y_baygor', 'u_m_o_taphillbilly', 'ig_terry', 'mp_m_weapexp_01', 's_m_y_ammucity_01', 'a_m_m_bevhills_02', 'a_f_y_business_04', 's_m_o_busker_01', 'ig_car3guy1', 'ig_car3guy2', 'csb_chin_goon', 'ig_cletus', 's_m_m_cntrybar_01', 'mp_m_exarmy_01', 'u_m_m_filmdirector', 'ig_josef', 'a_m_o_ktown_01', 'ig_popov', 'ig_russiandrunk']],
  DRESS: [['a_f_m_bevhills_01', 'a_m_y_bevhills_01', 'ig_bride', 'a_f_y_business_01', 'csb_customer', 'ig_denise', 'a_m_y_cyclist_01', 'a_f_y_eastsa_01', 'a_f_y_eastsa_03', 'a_f_y_epsilon_01', 'a_m_y_eastsa_02', 'g_m_y_famfor_01', 'cs_jewelass', 'a_m_y_indian_01', 'ig_lamardavis', 'u_f_y_mistress', 'cs_movpremf_01'], ['a_m_y_mexthug_01', 'csb_oscar', 'g_m_y_pologoon_01', 'a_f_o_soucent_01', 'a_m_m_soucent_01', 'g_m_y_strpunk_01', 's_m_y_strvend_01', 'a_m_y_sunbathe_01', 's_f_y_sweatshop_01', 'a_f_y_vinewood_01', 'a_f_y_vinewood_02', 'a_m_y_vinewood_03', 'a_f_y_vinewood_04'], ['g_m_y_ballaeast_01', 'g_m_y_ballaorig_01', 'g_f_y_ballas_01', 'g_m_y_ballasout_01', 'g_m_m_chigoon_02', 'ig_claypain', 'g_m_y_famdnf_01', 'g_f_y_families_01', 'a_f_y_fitness_01', 'ig_g', 's_m_y_grip_01'], ['s_f_y_airhostess_01', 'ig_barry', 'mp_f_boatstaff_01', 'mp_m_boatstaff_01', 'u_f_y_comjane', 'ig_dale', 'u_f_y_jewelass_01', 'u_m_m_jewelthief', 'ig_josh', 'ig_milton', 'cs_movpremmale', 'u_f_y_princess', 'csb_reporter', 'a_f_y_femaleagent'], ['s_f_y_airhostess_01', 'ig_barry', 'mp_f_boatstaff_01', 'mp_m_boatstaff_01', 'u_f_y_comjane', 'ig_dale', 'u_f_y_jewelass_01', 'u_m_m_jewelthief', 'ig_josh', 'ig_milton', 'cs_movpremmale', 'u_f_y_princess', 'csb_reporter', 'a_f_y_femaleagent']],
  TATTOO: [['u_m_y_baygor', 'a_f_y_juggalo_01', 'g_f_y_lost_01', 's_m_y_robber_01', 'ig_benny', 'ig_hao'], ['u_m_y_baygor', 'u_f_y_bikerchic', 'g_m_y_lost_01', 'ig_g', 'a_m_y_gay_01', 'u_m_y_tattoo_01'], ['u_m_y_baygor', 'u_m_y_guido_01', 'ig_ortega', 'cs_jimmyboston', 'a_m_m_soucent_04', 'ig_terry'], ['u_m_y_baygor', 'u_m_y_sbike', 'csb_porndudes', 'ig_stretch', 'g_m_y_strpunk_01'], ['u_m_y_baygor', 'g_f_y_vagos_01', 'a_f_y_vinewood_02', 's_m_y_xmech_02', 'g_m_y_strpunk_02', 's_m_y_strvend_01', 'a_m_m_soucent_04']],
  BAR: [['csb_anita', 's_m_y_barman_01', 'a_m_y_beachvesp_02', 'ig_benny', 'u_f_y_bikerchic', 'mp_f_boatstaff_01', 'a_f_y_business_04', 'ig_car3guy1', 'ig_car3guy2', 'u_m_y_chip', 'ig_dale', 'ig_g', 'u_m_y_gunvend_01', 'csb_imran', 'ig_jewelass', 'u_m_m_jewelthief', 'ig_taocheng', 'mp_f_execpa_01'], ['u_m_m_aldinapoli', 'a_m_y_beachvesp_01', 'ig_benny', 'a_m_m_bevhills_02', 'a_f_y_bevhills_04', 'u_f_y_bikerchic', 'ig_car3guy1', 'ig_car3guy2', 'ig_clay', 'ig_cletus', 's_m_m_cntrybar_01', 'a_m_y_eastsa_02', 'a_m_y_genstreet_01', 'a_m_y_hipster_02', 'csb_hugh', 'ig_jay_norris', 'g_m_y_lost_01', 'u_f_y_mistress', 'g_m_y_pologoon_01', 's_m_y_strvend_01', 'u_m_o_taphillbilly', 'u_m_y_tattoo_01', 'g_f_y_vagos_01', 'a_f_y_vinewood_02', 's_m_y_xmech_02_mp']],
  BARBER: [['u_m_y_baygor', 'a_f_y_juggalo_01', 'g_f_y_lost_01', 's_m_y_robber_01', 'ig_benny', 'ig_hao'], ['u_m_y_baygor', 'a_f_y_juggalo_01', 'g_f_y_lost_01', 's_m_y_robber_01', 'ig_benny', 'ig_hao'], ['u_m_y_baygor', 'a_f_y_juggalo_01', 'g_f_y_lost_01', 's_m_y_robber_01', 'ig_benny', 'ig_hao'], ['u_m_y_baygor', 'a_f_y_juggalo_01', 'g_f_y_lost_01', 's_m_y_robber_01', 'ig_benny', 'ig_hao']]
};
const StaticVehicleStreamRange = exports.StaticVehicleStreamRange = 200;
const StaticVehicle = exports.StaticVehicle = [{
  model: "f355",
  x: -775.63,
  y: -222.16,
  z: 37.09,
  h: 208,
  color1: [1, 1, 1],
  color2: [1, 1, 1]
}, {
  model: "chiron300",
  x: -771.01,
  y: -233.17,
  z: 37.37,
  h: 76,
  color1: [1, 1, 1],
  color2: [1, 1, 1]
}, {
  model: "m5f90",
  x: -786.06,
  y: -243.51,
  z: 37.28,
  h: 346,
  color1: [1, 1, 1],
  color2: [1, 1, 1]
}, {
  model: "rs7",
  x: -791.79,
  y: -236.33,
  z: 36.93,
  h: 28,
  color1: [1, 1, 1],
  color2: [1, 1, 1]
}, {
  model: "camonyx",
  x: 1099.74,
  y: 219.95,
  z: -48.75,
  h: 291,
  color1: [1, 1, 1],
  color2: [1, 1, 1]
}, {
  model: "cls63s",
  x: -796.12,
  y: -228.89,
  z: 37.65,
  h: 291,
  color1: [1, 1, 1],
  color2: [1, 1, 1]
}, {
  model: "cullinan",
  x: -482.14,
  y: -83.56,
  z: 39.72,
  h: 265,
  color1: [0, 0, 128],
  color2: [0, 0, 139]
}, {
  model: "lambasianv12",
  x: -477.42,
  y: -88.25,
  z: 39.72,
  h: 256,
  color1: [85, 107, 47],
  color2: [210, 105, 30]
}, {
  model: "mersg63",
  x: -462.75,
  y: -84.60,
  z: 39.72,
  h: 58,
  color1: [0, 0, 0],
  color2: [245, 255, 250]
}, {
  model: "turbo911",
  x: -468.01,
  y: -88.40,
  z: 39.72,
  h: 88,
  color1: [192, 192, 192],
  color2: [0, 0, 0]
}, {
  model: "chiron300",
  x: -472.05,
  y: -78.55,
  z: 39.72,
  h: 203,
  color1: [255, 250, 250],
  color2: [0, 0, 0]
}];
},{"./cloth":"Vt6D","./vehicles":"tsnK","./phone/locationCategories.enum":"ixde"}],"JcVt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PARKING_STEP = exports.PARKING_START_COST = exports.PARKING_EXIT = exports.PARKING_DAY_COST = exports.PARKING_CARS_PLAYER_MAX = exports.PARKING_CARS = exports.PARKING_AVIA_EXIT = exports.PARKING_AVIA = exports.BUSINESS_REWARD_PERCENT = void 0;
const PARKING_CARS_PLAYER_MAX = exports.PARKING_CARS_PLAYER_MAX = 1;
const PARKING_STEP = exports.PARKING_STEP = 1000;
const BUSINESS_REWARD_PERCENT = exports.BUSINESS_REWARD_PERCENT = 60;
const PARKING_DAY_COST = exports.PARKING_DAY_COST = 1000;
const PARKING_START_COST = exports.PARKING_START_COST = 5000;
const PARKING_EXIT = exports.PARKING_EXIT = new mp.Vector3(1252.56, 230.10, -48.84);
const PARKING_AVIA_EXIT = exports.PARKING_AVIA_EXIT = new mp.Vector3(-1446.84, -3261.47, -26.64);
const PARKING_CARS = exports.PARKING_CARS = [{
  x: 1309.35,
  y: 258.40,
  z: -49.48,
  h: 90
}, {
  x: 1309.35,
  y: 249.80,
  z: -49.48,
  h: 90
}, {
  x: 1309.35,
  y: 241.30,
  z: -49.48,
  h: 90
}, {
  x: 1309.35,
  y: 231.80,
  z: -49.48,
  h: 90
}, {
  x: 1295.35,
  y: 231.80,
  z: -49.48,
  h: 90
}, {
  x: 1295.35,
  y: 241.30,
  z: -49.48,
  h: 90
}, {
  x: 1295.35,
  y: 249.80,
  z: -49.48,
  h: 90
}, {
  x: 1281.00,
  y: 258.40,
  z: -49.78,
  h: 270
}, {
  x: 1281.00,
  y: 249.80,
  z: -49.48,
  h: 270
}, {
  x: 1281.00,
  y: 241.30,
  z: -49.48,
  h: 270
}];
const PARKING_AVIA = exports.PARKING_AVIA = [{
  x: -1428.87,
  y: -3307.79,
  z: -25.64,
  h: 326
}];
},{}],"nzl1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tattooRemoveMoneySendToBusinessMultipler = exports.tattooRemoveCostMultipler = exports.startMoney = exports.startDocumentCost = exports.startChips = exports.shopFineWhenNoItems = exports.restoreDocumentCost = exports.newBankCardCost = exports.houseVehicleRemoveFine = exports.houseLockRepairCost = exports.houseKeyCost = exports.getDonateItemConfig = exports.familyFractionPayDayRewardPercent = exports.bankPercentMoneyReceive = exports.bankPercentDefault = exports.bankMaxPercent = exports.bankCardMax = exports.bankCardCostCreate = exports.bankAccountClose = exports.WAREHOUSE_TAX_PERCENT_DAY_MAX = exports.WAREHOUSE_TAX_PERCENT = exports.WAREHOUSE_MAX_TAX_DAYS_DEFAULT = exports.VOICE_MINUTE_COST = exports.VOICE_CONNECT_COST = exports.VEHICLE_TAX_PERCENT = exports.VEHICLE_RESPAWN_COST = exports.VEHICLE_REPAIR_COST = exports.VEHICLE_MAX_TAX_PERCENT_DAY = exports.VEHICLE_KEY_CREATE_COST = exports.VEHICLE_FINE_POLICE_MAX = exports.UNEMPLOYMENT_BENEFIT = exports.SMS_COST = exports.SELL_GOS_TAX_PERCENT_DONATE = exports.SELL_GOS_TAX_PERCENT = exports.REMOVAL_BANK_MONEY_PERCENT = exports.QUICK_HEAL_COST = exports.PLAYTIME_TYPE = exports.PLAYTIME_TIME = exports.PLAYTIME_MONEY = exports.PAYDAY_MONEY_PER_HOUR_MULTIPLE = exports.MEDIA_PROMOCODE = exports.JOB_MONEY_PER_HOUR_MULTIPLE = exports.HOUSE_UPGRADE_LEVEL_COST = exports.HOUSE_TAX_PERCENT_DAY_MAX = exports.HOUSE_TAX_PERCENT = exports.HOUSE_MAX_TAX_DAYS_DEFAULT = exports.HOUSE_CHEST_MAX_LEVEL = exports.HOUSE_CHEST_LEVEL_COST_MULTIPLE = exports.HOUSE_CHEST_LEVEL_COST_COIN = exports.HOUSE_CHEST_LEVEL_COST = exports.HOUSE_CHEST_KG_PER_LEVEL = exports.HOUSE_CHEST_KG_DEFAULT = exports.GIVE_MONEY_PER_TASK = exports.GIVE_MONEY_PER_DAY = exports.EVENT_ANNOUNCE_MINUTE = exports.EVENT_ANNOUNCE_COST = exports.Donate_Items = exports.DONATE_VIRTS_PER_COIN = exports.DONATE_STATUS = exports.DONATE_SLOT_PERSONAGE_COST = exports.DONATE_MONEY_NAMES = exports.DEFAULT_VEHICLE_PLAYER_LIMIT_MAX = exports.DEFAULT_VEHICLE_PLAYER_LIMIT = exports.COINS_FOR_ONE_ROUBLE = exports.BUSINESS_UPGRADE_DATA = exports.BUSINESS_MAX_TAX_DAYS_DEFAULT = exports.BANK_TAX = exports.BANK_CARD_STYLE_LIST = exports.BANK_CARD_NAME_LIST = exports.ARREST_MONEY = void 0;
var _business = require("./business");
var _parking = require("./parking");
const COINS_FOR_ONE_ROUBLE = exports.COINS_FOR_ONE_ROUBLE = 2;
const JOB_MONEY_PER_HOUR_MULTIPLE = exports.JOB_MONEY_PER_HOUR_MULTIPLE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const PAYDAY_MONEY_PER_HOUR_MULTIPLE = exports.PAYDAY_MONEY_PER_HOUR_MULTIPLE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const DONATE_MONEY_NAMES = exports.DONATE_MONEY_NAMES = ["коин", "коины", "коинов"];
const DONATE_VIRTS_PER_COIN = exports.DONATE_VIRTS_PER_COIN = 500000;
const PLAYTIME_TIME = exports.PLAYTIME_TIME = 4;
const PLAYTIME_MONEY = exports.PLAYTIME_MONEY = 200;
const PLAYTIME_TYPE = exports.PLAYTIME_TYPE = 'donate';
const MEDIA_PROMOCODE = exports.MEDIA_PROMOCODE = {
  BLOCK_MULTIPLE: true,
  GIVE_MONEY_PLAYER: 40000000,
  GIVE_DONATE_PLAYER: 0,
  GIVE_DONATE_MEDIA: 10,
  NOTIFY: true,
  LEVEL_MAX: 2,
  GIVE_MONEY_PLAYER_LEVEL: 40000000,
  LEVEL_TWO: 3,
  REWARD_STAGE_LIST: [{
    count: 10,
    class: 'font24 fontw600',
    name: `$40 000 000`,
    data: 40000000
  }, {
    count: 20,
    class: 'font24 fontw600',
    name: `VIP Diamond<br/><small>на месяц</small>`
  }, {
    count: 30,
    class: 'font24 fontw600',
    name: `<small>Семья</small><br/>бесплатно`
  }, {
    count: 40,
    class: 'font24 fontw600',
    name: `Пак лицензий`
  }, {
    count: 70,
    class: 'font24 fontw600',
    name: `Ford<br/>Mustang`,
    data: 'must1onyx'
  }]
};
const UNEMPLOYMENT_BENEFIT = exports.UNEMPLOYMENT_BENEFIT = 200000;
const startMoney = exports.startMoney = 250000000;
const startChips = exports.startChips = 0;
const DONATE_SLOT_PERSONAGE_COST = exports.DONATE_SLOT_PERSONAGE_COST = 500;
const SELL_GOS_TAX_PERCENT = exports.SELL_GOS_TAX_PERCENT = 30;
const SELL_GOS_TAX_PERCENT_DONATE = exports.SELL_GOS_TAX_PERCENT_DONATE = 0;
const DEFAULT_VEHICLE_PLAYER_LIMIT = exports.DEFAULT_VEHICLE_PLAYER_LIMIT = 11;
const DEFAULT_VEHICLE_PLAYER_LIMIT_MAX = exports.DEFAULT_VEHICLE_PLAYER_LIMIT_MAX = 11;
const REMOVAL_BANK_MONEY_PERCENT = exports.REMOVAL_BANK_MONEY_PERCENT = 2;
const EVENT_ANNOUNCE_COST = exports.EVENT_ANNOUNCE_COST = 20000000;
const EVENT_ANNOUNCE_MINUTE = exports.EVENT_ANNOUNCE_MINUTE = 10;
const SMS_COST = exports.SMS_COST = 8000;
const VOICE_CONNECT_COST = exports.VOICE_CONNECT_COST = 5000;
const VOICE_MINUTE_COST = exports.VOICE_MINUTE_COST = 4000;
const bankCardMax = exports.bankCardMax = [10000000, 100000000, 500000000];
const newBankCardCost = exports.newBankCardCost = 400000;
const bankCardCostCreate = exports.bankCardCostCreate = [300000, 500000, 1000000];
const bankAccountClose = exports.bankAccountClose = 100000;
const BANK_CARD_NAME_LIST = exports.BANK_CARD_NAME_LIST = ["Debit", "Gold", "Platinum"];
const BANK_CARD_STYLE_LIST = exports.BANK_CARD_STYLE_LIST = ["debit", "gold", "platinum"];
const bankMaxPercent = exports.bankMaxPercent = 5;
const bankPercentDefault = exports.bankPercentDefault = 5;
const bankPercentMoneyReceive = exports.bankPercentMoneyReceive = 100;
var BANK_TAX;
(function (BANK_TAX) {
  BANK_TAX[BANK_TAX["DAY_TAX_PERCENT"] = 0.45] = "DAY_TAX_PERCENT";
})(BANK_TAX || (exports.BANK_TAX = BANK_TAX = {}));
const shopFineWhenNoItems = exports.shopFineWhenNoItems = 1;
const BUSINESS_MAX_TAX_DAYS_DEFAULT = exports.BUSINESS_MAX_TAX_DAYS_DEFAULT = 14;
const BUSINESS_UPGRADE_DATA = exports.BUSINESS_UPGRADE_DATA = [{
  type: [_business.BUSINESS_TYPE.BAR, _business.BUSINESS_TYPE.ITEM_SHOP, _business.BUSINESS_TYPE.BARBER, _business.BUSINESS_TYPE.TATTOO_SALON, _business.BUSINESS_TYPE.FUEL, _business.BUSINESS_TYPE.DRESS_SHOP, _business.BUSINESS_TYPE.TUNING],
  desc: `Уменьшает закупочную стоимость продукции на 10%`,
  max_level: 4,
  level_percent: 10,
  step_by_step: true
}, {
  type: [_business.BUSINESS_TYPE.PARKING],
  desc: `Добавляет дополнительный этаж с парковочными местами`,
  max_level: Math.min(30, _parking.PARKING_STEP),
  level_percent: 10,
  step_by_step: true
}, {
  type: [_business.BUSINESS_TYPE.VEHICLE_SHOP],
  desc: `Оптимизирует расходы повышая доход на 10%`,
  max_level: 4,
  level_percent: 10,
  step_by_step: true
}];
const tattooRemoveCostMultipler = exports.tattooRemoveCostMultipler = 3;
const tattooRemoveMoneySendToBusinessMultipler = exports.tattooRemoveMoneySendToBusinessMultipler = 1;
const familyFractionPayDayRewardPercent = exports.familyFractionPayDayRewardPercent = 0.7;
const startDocumentCost = exports.startDocumentCost = 0;
const restoreDocumentCost = exports.restoreDocumentCost = 400000;
const houseKeyCost = exports.houseKeyCost = 99900;
const houseLockRepairCost = exports.houseLockRepairCost = 100000;
const houseVehicleRemoveFine = exports.houseVehicleRemoveFine = 100000;
const HOUSE_TAX_PERCENT = exports.HOUSE_TAX_PERCENT = 0.4;
const HOUSE_TAX_PERCENT_DAY_MAX = exports.HOUSE_TAX_PERCENT_DAY_MAX = 19000000;
const HOUSE_MAX_TAX_DAYS_DEFAULT = exports.HOUSE_MAX_TAX_DAYS_DEFAULT = 14;
const HOUSE_UPGRADE_LEVEL_COST = exports.HOUSE_UPGRADE_LEVEL_COST = [{
  house: 0,
  price: 0,
  amount: 0
}, {
  house: 50000,
  price: 10000,
  amount: 50
}, {
  house: 100000,
  price: 20000,
  amount: 100
}, {
  house: 400000,
  price: 50000,
  amount: 150
}, {
  house: 1000000,
  price: 100000,
  amount: 200
}];
const HOUSE_CHEST_KG_DEFAULT = exports.HOUSE_CHEST_KG_DEFAULT = 1000;
const HOUSE_CHEST_MAX_LEVEL = exports.HOUSE_CHEST_MAX_LEVEL = 8;
const HOUSE_CHEST_KG_PER_LEVEL = exports.HOUSE_CHEST_KG_PER_LEVEL = 500;
const HOUSE_CHEST_LEVEL_COST = exports.HOUSE_CHEST_LEVEL_COST = 300000;
const HOUSE_CHEST_LEVEL_COST_COIN = exports.HOUSE_CHEST_LEVEL_COST_COIN = 500;
const HOUSE_CHEST_LEVEL_COST_MULTIPLE = exports.HOUSE_CHEST_LEVEL_COST_MULTIPLE = 1.2;
const WAREHOUSE_TAX_PERCENT = exports.WAREHOUSE_TAX_PERCENT = 1;
const WAREHOUSE_TAX_PERCENT_DAY_MAX = exports.WAREHOUSE_TAX_PERCENT_DAY_MAX = 10000;
const WAREHOUSE_MAX_TAX_DAYS_DEFAULT = exports.WAREHOUSE_MAX_TAX_DAYS_DEFAULT = 14;
const VEHICLE_TAX_PERCENT = exports.VEHICLE_TAX_PERCENT = 0;
const VEHICLE_MAX_TAX_PERCENT_DAY = exports.VEHICLE_MAX_TAX_PERCENT_DAY = 1;
const VEHICLE_KEY_CREATE_COST = exports.VEHICLE_KEY_CREATE_COST = 999;
const VEHICLE_FINE_POLICE_MAX = exports.VEHICLE_FINE_POLICE_MAX = 5000;
const VEHICLE_REPAIR_COST = exports.VEHICLE_REPAIR_COST = 45000;
const VEHICLE_RESPAWN_COST = exports.VEHICLE_RESPAWN_COST = 20000;
const GIVE_MONEY_PER_TASK = exports.GIVE_MONEY_PER_TASK = 50000000;
const GIVE_MONEY_PER_DAY = exports.GIVE_MONEY_PER_DAY = 150000000;
var QUICK_HEAL_COST;
(function (QUICK_HEAL_COST) {
  QUICK_HEAL_COST[QUICK_HEAL_COST["MANUAL"] = 37000] = "MANUAL";
  QUICK_HEAL_COST[QUICK_HEAL_COST["MANUAL_LICENSE"] = 300000] = "MANUAL_LICENSE";
  QUICK_HEAL_COST[QUICK_HEAL_COST["AUTO"] = 55000] = "AUTO";
  QUICK_HEAL_COST[QUICK_HEAL_COST["AUTO_LICENSE"] = 359000] = "AUTO_LICENSE";
})(QUICK_HEAL_COST || (exports.QUICK_HEAL_COST = QUICK_HEAL_COST = {}));
const Donate_Items = exports.Donate_Items = [{
  id: 4,
  name: "Получить $",
  desc: "Обменяйте коины на валюту",
  price: DONATE_VIRTS_PER_COIN,
  pic: "d-virt"
}, {
  id: 2,
  name: "Снять варн",
  desc: "Больше не нарушайте",
  price: 500,
  pic: "d-warn"
}, {
  id: 3,
  name: "Сменить внешность",
  desc: "Сделайте пластическую операцию",
  price: 250,
  pic: "d-face"
}, {
  id: 1,
  name: "Смена имени",
  desc: "Смените имя",
  price: 100,
  pic: "d-name"
}, {
  id: 5,
  name: "Сменить возраст",
  desc: "Выпейте таблетку от старости",
  price: 50,
  pic: "d-age"
}, {
  id: 6,
  name: "Дополнительный слот для ТС",
  desc: "Позволяет владеть дополнительным транспортом на вашем персонаже",
  price: 500,
  pic: "d-slots"
}, {
  id: 7,
  name: "Увеличение вместительности инвентаря",
  desc: `Добавляет 5кг к максимальному весу инвентаря`,
  price: 500,
  pic: "inventory"
}];
const getDonateItemConfig = id => {
  return Donate_Items.find(q => q.id === id);
};
exports.getDonateItemConfig = getDonateItemConfig;
var DONATE_STATUS;
(function (DONATE_STATUS) {
  DONATE_STATUS[DONATE_STATUS["CREATED"] = 0] = "CREATED";
  DONATE_STATUS[DONATE_STATUS["PAYED"] = 1] = "PAYED";
  DONATE_STATUS[DONATE_STATUS["DONE"] = 2] = "DONE";
})(DONATE_STATUS || (exports.DONATE_STATUS = DONATE_STATUS = {}));
const ARREST_MONEY = exports.ARREST_MONEY = 0;
},{"./business":"ZFkC","./parking":"JcVt"}],"bCq5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fractionList = exports.TENCODES_LIST = exports.MAIFA_INVITE_RANKS_MINUS = exports.GOS_INVITE_RANKS_MINUS = exports.GANG_INVITE_RANKS_MINUS = exports.FACTION_ID = exports.DISPATCH_TYPES = exports.CRIME_ROBBERY_PROFIT_LIMIT = exports.CRIME_ROBBERY_INTEREST = exports.CRIME_ROBBERY_COOLDOWN = void 0;
var _cloth = require("./cloth");
const TENCODES_LIST = exports.TENCODES_LIST = [['Код 0', "Офицер убит или ранен"], ['Код 1', "Офицер в бедственном положении (По офицерам открыт огонь)"], ['Код 2', "Прибыть на место без сирен и стробоскобов"], ['Код 3', "Срочный вызов с сиреной и маячками"], ['Код 4', "Все спокойно"], ['Код 5', "Ложная тревога"], ['Код 6', "Массовые беспорядки"], ['Код 7', "Скопление вооруженных людей"]];
const GOS_INVITE_RANKS_MINUS = exports.GOS_INVITE_RANKS_MINUS = 3;
const GANG_INVITE_RANKS_MINUS = exports.GANG_INVITE_RANKS_MINUS = 2;
const MAIFA_INVITE_RANKS_MINUS = exports.MAIFA_INVITE_RANKS_MINUS = 2;
const CRIME_ROBBERY_COOLDOWN = exports.CRIME_ROBBERY_COOLDOWN = 3600;
const CRIME_ROBBERY_INTEREST = exports.CRIME_ROBBERY_INTEREST = 20;
const CRIME_ROBBERY_PROFIT_LIMIT = exports.CRIME_ROBBERY_PROFIT_LIMIT = 10000000;
var DISPATCH_TYPES;
(function (DISPATCH_TYPES) {
  DISPATCH_TYPES[DISPATCH_TYPES["CALL"] = 0] = "CALL";
  DISPATCH_TYPES[DISPATCH_TYPES["TEN_CODE"] = 1] = "TEN_CODE";
})(DISPATCH_TYPES || (exports.DISPATCH_TYPES = DISPATCH_TYPES = {}));
var FACTION_ID;
(function (FACTION_ID) {
  FACTION_ID[FACTION_ID["GOV"] = 1] = "GOV";
  FACTION_ID[FACTION_ID["LSPD"] = 2] = "LSPD";
  FACTION_ID[FACTION_ID["FIB"] = 3] = "FIB";
  FACTION_ID[FACTION_ID["ARMY"] = 4] = "ARMY";
  FACTION_ID[FACTION_ID["LIFEINVADER"] = 5] = "LIFEINVADER";
  FACTION_ID[FACTION_ID["SHERIFF"] = 7] = "SHERIFF";
  FACTION_ID[FACTION_ID["EMS"] = 16] = "EMS";
  FACTION_ID[FACTION_ID["BALLAS"] = 18] = "BALLAS";
  FACTION_ID[FACTION_ID["FAMILIES"] = 19] = "FAMILIES";
  FACTION_ID[FACTION_ID["MARABUNTA"] = 20] = "MARABUNTA";
  FACTION_ID[FACTION_ID["BLOODS"] = 21] = "BLOODS";
  FACTION_ID[FACTION_ID["VAGOS"] = 22] = "VAGOS";
  FACTION_ID[FACTION_ID["MAFIA1"] = 23] = "MAFIA1";
  FACTION_ID[FACTION_ID["MAFIA2"] = 24] = "MAFIA2";
  FACTION_ID[FACTION_ID["MAFIA3"] = 25] = "MAFIA3";
})(FACTION_ID || (exports.FACTION_ID = FACTION_ID = {}));
const fractionList = exports.fractionList = [{
  id: 1,
  name: "Government",
  desc: "Правительство",
  icon: "GOV",
  gos: true,
  police: true,
  mafia: false,
  gang: false,
  government: true,
  ranks: ["Trainee", "Junior Secretary", "Junior Officer of the USSS", "Secretary", "Lawyer", "USSS Officer", "Assiastant Secretary", "Senior Lawyer", "USSS Agent", "EVENT Manager", "HR Manager", "USSS Secret Agent", "Dep.Head of the Department", "Head of the Department", "Attorney", "Judge", "Mayor", "Chief of Staff", "Dep.Dir. of the USSS", "Director of the USSS", "Chief Justice", "Dep. Minister", "Minister", "Attorney General", "Counsel to the Governor", "Vice Governor", "Governor"],
  moneybase: 0,
  salaries: [2000, 2300, 2300, 2300, 3800, 3300, 3300, 3300, 4300, 3800, 3800, 3800, 4800, 5000, 3800, 4000, 3800, 4200, 5200, 5400, 5600, 5800, 6000, 6400, 6000, 6400, 6800],
  spawn: {
    x: -549.89,
    y: -184.01,
    z: 47.90,
    h: 131
  },
  armour_male: {
    drawable: 68,
    texture: 1
  },
  armour_female: {
    drawable: 58,
    texture: 1
  },
  armorName: _cloth.ArmorNames.GovernmentArmor
}, {
  id: 2,
  name: "LSPD",
  desc: "Отделение полиции",
  icon: "LSPD",
  gos: true,
  police: true,
  mafia: false,
  gang: false,
  ranks: ["Cadet PA", "Police Officier I", "Police Officier II", "Police Officier III", "Police Officier III+1", "Sergeant I", "Sergeant II", "Lieutenant I", "Lieutenant II", "Captain I", "Captain II", "Commander", "Assistant Chief of Police", "Chief of Police"],
  moneybase: 0,
  salaries: [1300, 1600, 1900, 2300, 2700, 3100, 3500, 3800, 4100, 4500, 4800, 5500, 5800, 6400],
  spawn: {
    x: 479.24,
    y: -997.16,
    z: 23.31,
    h: 83
  },
  armour_male: {
    drawable: 68,
    texture: 2
  },
  armour_female: {
    drawable: 58,
    texture: 2
  },
  armorName: _cloth.ArmorNames.PoliceArmor
}, {
  id: 3,
  name: "FIB",
  desc: "Отделение FIB",
  icon: "fib",
  gos: true,
  police: true,
  mafia: false,
  gang: false,
  ranks: ["Trainee FIB", "Junior Agent", "Agent", "Special Agent", "Secret Agent", "Senior Agent", "Free Agent", "Deputy of Department", "Head of Department", "Inspector FIB", "Assistant Director", "Deputy Director", "Director FIB"],
  moneybase: 0,
  salaries: [1500, 2100, 2700, 3300, 3900, 4400, 4900, 5500, 6100, 6700, 6800, 6800, 6900],
  spawn: {
    x: 2487.22,
    y: -415.19,
    z: 100.36,
    h: 281
  },
  armour_male: {
    drawable: 22,
    texture: 9
  },
  armour_female: {
    drawable: 20,
    texture: 9
  },
  armorName: _cloth.ArmorNames.FibArmor
}, {
  id: 4,
  name: "Army",
  desc: "Армия",
  icon: "Army",
  gos: true,
  mafia: false,
  police: true,
  gang: false,
  ranks: ["Private", "Private Second Class", "Private First Class", "Specialist", "Corporal", "Sergeant", "Staff Sergeant", "Master Sergeant", "Sergeant Major", "Warrant Officer", "Chief Warrant Officer", "Lieutenant", "Lieutenant Colonel", "Colonel"],
  moneybase: 0,
  salaries: [1300, 1600, 1900, 2200, 2500, 2900, 3300, 3700, 4100, 4500, 5000, 5500, 6000, 6600],
  spawn: {
    x: -2342.48,
    y: 3224.74,
    z: 29.22,
    h: 136
  },
  armour_male: {
    drawable: 68,
    texture: 0
  },
  armour_female: {
    drawable: 58,
    texture: 0
  },
  armorName: _cloth.ArmorNames.ArmyArmor
}, {
  id: 5,
  name: "Weazel News",
  desc: "Агенство новостей",
  icon: "LifeInvader",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Promoter", "Trainee", "Editor", "Radio Host", "Event Manager", "Operator", "Journalist", "Chief Editor", "Manager", "Dep.Head of the Department", "Head of the Department", "Dep.Director", "Director"],
  moneybase: 0,
  salaries: [1300, 1700, 2100, 2600, 3100, 3600, 4100, 4600, 5100, 5600, 5400, 5700, 6000],
  spawn: {
    x: -578.08,
    y: -937.52,
    z: 28.18,
    h: 47
  }
}, {
  id: 7,
  name: "Sheriffs Department",
  desc: "Шериф Департамент",
  icon: "Sheriff",
  gos: true,
  police: true,
  mafia: false,
  gang: false,
  ranks: ["Deputy Sheriff Treinee", "Deputy Sheriff", "Corporal", "Sergeant", "Lieutenant", "Senior-Lieutenant", "Captain", "Commander", "Division Chief", "Assistant Sheriff", "Undersheriff", "Sheriff"],
  moneybase: 0,
  salaries: [1300, 1600, 1900, 2200, 2500, 2900, 3400, 3700, 4100, 4600, 5000, 6000],
  spawn: {
    x: -436.02,
    y: 6008.00,
    z: 31.72,
    h: 30
  },
  armour_male: {
    drawable: 68,
    texture: 4
  },
  armour_female: {
    drawable: 58,
    texture: 4
  },
  armorName: _cloth.ArmorNames.SheriffArmor
}, {
  id: 16,
  name: "EMS",
  desc: "Отделение Больницы",
  icon: "EMS",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Trainee", "Intern", "Ordinator", "Paramedic", "Jr.Specialist", "Senior Specialist", "Chief Specialist", "Doctors Assistant", "Doctor", "Senior Doctor", "Dep.Head of Department", "Head of the Department", "Dep.Chief Physician", "Chief Physician"],
  moneybase: 0,
  salaries: [1200, 1600, 2000, 2400, 2800, 3200, 3600, 4000, 4400, 4800, 5200, 5600, 6000, 6200],
  spawn: {
    x: 306.11,
    y: -598.19,
    z: 43.26,
    h: 29
  }
}, {
  id: 18,
  name: "Ballas",
  desc: "Ballas",
  icon: "Ballas",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Blade", "Buster", "Сracker", "gunBrogh", "upBrogh", "Gangster", "Federal block", "Foulkes", "Rich Nig", "Big Gangster"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#CD42FF",
  blipgangcolor: 7,
  spawn: {
    x: 901.31,
    y: -2171.85,
    z: 32.27,
    h: 353
  },
  armour_male: {
    drawable: 22,
    texture: 2
  },
  armour_female: {
    drawable: 20,
    texture: 2
  },
  armorName: _cloth.ArmorNames.PurpleArmor
}, {
  id: 19,
  name: "Families",
  desc: "Families",
  icon: "Families",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Beginner", "Youngsta", "Killa", "Wang G", "Shooter", "Big Brother", "High", "The King", "Deputy Boss", "Mad Dog"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#41AB5D",
  blipgangcolor: 25,
  spawn: {
    x: 111.55,
    y: -1968.08,
    z: 21.32,
    h: 323
  },
  armour_male: {
    drawable: 22,
    texture: 0
  },
  armour_female: {
    drawable: 20,
    texture: 0
  },
  armorName: _cloth.ArmorNames.GreenArmor
}, {
  id: 20,
  name: "Marabunta Grande",
  desc: "Marabunta Grande",
  icon: "mara",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Novato", "Experimentado", "Maton", "El asesino", "Viendo", "Trusted", "Cerrar", "Mano izquierda", "Mano derecha", "Capitulo"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#49A2E6",
  blipgangcolor: 3,
  spawn: {
    x: 447.77,
    y: -1313.57,
    z: 29.27,
    h: 308
  },
  armour_male: {
    drawable: 22,
    texture: 5
  },
  armour_female: {
    drawable: 20,
    texture: 5
  },
  armorName: _cloth.ArmorNames.BlueArmor
}, {
  id: 21,
  name: "Bloods",
  desc: "Bloods",
  icon: "Bloods",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Boy Blood.", "Young Blood", "Mature Blood", "Gangster Blood", "Killa Blood", "Old Blood", "Boss Gangster Blood", "Looker Blood", "Big Boss Blood", "King of Blood"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#FF0000",
  blipgangcolor: 59,
  spawn: {
    x: -491.94,
    y: -1724.18,
    z: 19.51,
    h: 277
  },
  armour_male: {
    drawable: 22,
    texture: 4
  },
  armour_female: {
    drawable: 20,
    texture: 4
  },
  armorName: _cloth.ArmorNames.RedArmor
}, {
  id: 22,
  name: "Vagos",
  desc: "Vagos",
  icon: "Vagos",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Novito", "Ordinario", "Configuracion regional", "Verifikado", "Bandito", "V. E. G", "Assessino", "Lider V. E. G.", "Padrino", "Padre"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#FFFF00",
  blipgangcolor: 5,
  spawn: {
    x: 484.01,
    y: -1951.13,
    z: 24.72,
    h: 309
  },
  armour_male: {
    drawable: 22,
    texture: 1
  },
  armour_female: {
    drawable: 20,
    texture: 1
  },
  armorName: _cloth.ArmorNames.YellowArmor
}, {
  id: 23,
  name: "Yakuza",
  desc: "Yakuza",
  icon: "Yakuza",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Iangy-Rodo", "Iangy-Rodo Sha", "Shatei", "Kie Dai", "Siatei Gasira", "Singin", "Kaikei", "Vaka Gasira", "Saiko Komon", "Oyabun"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#41AB5D",
  blipgangcolor: 25,
  spawn: {
    x: -355.71,
    y: 207.21,
    z: 88.57,
    h: 259
  },
  armour_male: {
    drawable: 22,
    texture: 0
  },
  armour_female: {
    drawable: 20,
    texture: 0
  },
  armorName: _cloth.ArmorNames.YakuzaArmor
}, {
  id: 24,
  name: "Russian",
  desc: "Russian",
  icon: "Russian",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Шнырь", "Хулиган", "Фраер", "Жулик", "Барыга", "Блатной", "Авторитет", "Смотрящий", "Положенец", "Вор в Законе"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#41AB5D",
  blipgangcolor: 25,
  spawn: {
    x: -1524.51,
    y: 842.90,
    z: 181.60,
    h: 256
  },
  armour_male: {
    drawable: 22,
    texture: 0
  },
  armour_female: {
    drawable: 20,
    texture: 0
  },
  armorName: _cloth.ArmorNames.RMArmor
}, {
  id: 25,
  name: "La Cosa Nostra",
  desc: "La Cosa Nostra",
  icon: "La Cosa Nostra",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Novizio", "Testato", "Associato", "Combattente", "Soldato", "Confidente", "Capo", "Strada Boss", "Сonsigliere", "Don"],
  moneybase: 0,
  salaries: [400, 400, 400, 400, 400, 400, 400, 400, 400, 400],
  color: "#41AB5D",
  blipgangcolor: 25,
  spawn: {
    x: 1400.91,
    y: 1144.58,
    z: 114.33,
    h: 57
  },
  armour_male: {
    drawable: 22,
    texture: 0
  },
  armour_female: {
    drawable: 20,
    texture: 0
  },
  armorName: _cloth.ArmorNames.LCNArmor
}];
},{"./cloth":"Vt6D"}],"vpPR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertInventoryItemObjectToArray = exports.convertInventoryItemArrayToObject = exports.canUse = exports.business_stock_level = exports.WEAPON_AMMO_WEIGHT = exports.SCREWS_ITEM_ID = exports.SCREWS_DESTROYER_ITEM_IDS = exports.PLAYER_INVENTORY_MAX_LEVEL = exports.PLAYER_INVENTORY_KG_PER_LEVEL = exports.PLAYER_DEFAULT_WEIGHT_KG = exports.OWNER_TYPES = exports.MAXIMUM_ITEMS_IN_ONE_EXCHANGE = exports.KEYS_ITEM_ID = exports.ITEM_TYPE_ARRAY = exports.ITEM_TYPE = exports.HOUSE_DEFAULT_WEIGHT_KG = exports.HALLOWEEN_BASKET_ITEM_ID = exports.ExchangeReadyStatus = exports.ELECTRO_SHOP_ITEMS = exports.CUFFS_KEY_ITEM_ID = exports.CUFFS_ITEM_ID = exports.CONTAINERS_DATA = exports.AUTO_SOUND_ITEM_ID = exports.ARMOR_ITEM_ID = void 0;
exports.getAllItemsWeightText = getAllItemsWeightText;
exports.weapon_list = exports.inventoryShared = exports.getWeaponAddonKeyByItemId = exports.getItemWeightText = exports.getItemWeight = exports.getItemName = exports.getItemDesc = exports.getContainerByOwnerType = exports.getContainerByItemID = exports.getBaseItemNameById = void 0;
var _licence = require("./licence");
var _system = require("./system");
var _documents = require("./documents");
var _economy = require("./economy");
var _fractions = require("./fractions");
const business_stock_level = exports.business_stock_level = [100000, 500000, 1000000];
const HOUSE_DEFAULT_WEIGHT_KG = exports.HOUSE_DEFAULT_WEIGHT_KG = 150;
const getItemDesc = item_id => {
  const cfg = inventoryShared.get(item_id);
  if (!cfg) return null;
  let text = ``;
  let cfgWeapon = ITEM_TYPE.WEAPON == cfg.type ? inventoryShared.getWeaponConfigByItemId(cfg.item_id) : null;
  if ([ITEM_TYPE.WEAPON_MAGAZINE, ITEM_TYPE.WEAPON].includes(cfg.type)) text += `Калибр: ${cfgWeapon.caliber}mm\n`;
  if (cfg.type == ITEM_TYPE.AMMO_BOX) text += `Количество патронов: ${cfg.default_count} шт\n`;
  if (cfg.type == ITEM_TYPE.WEAPON_MAGAZINE) text += `Вместительность: ${cfg.default_count} шт\n`;
  if (cfg.type === ITEM_TYPE.WEAPON_ADDON) {
    const list = [];
    weapon_list.filter(q => q.addons).map(q => {
      for (let type in q.addons) {
        const data = q.addons[type];
        if (data) {
          if (data.item_id === cfg.item_id) list.push(inventoryShared.get(q.weapon).name);
        }
      }
    });
    if (list.length > 0) {
      text += `Совместимое оружие: ${list.join(', ')}\n`;
    }
  }
  if (cfg.type === ITEM_TYPE.WEAPON) {
    const weapon = inventoryShared.getWeaponConfigByItemId(cfg.item_id);
    if (weapon && weapon.addons) {
      const list = [];
      for (let type in weapon.addons) {
        const data = weapon.addons[type];
        if (data.hash.includes('WEAPON_TINT')) continue;
        if (data) {
          const itm = inventoryShared.get(data.item_id);
          if (itm) list.push(itm.name);
        }
      }
      if (list.length > 0) {
        text += `Совместимые модификации: ${list.join(', ')}\n`;
      }
    }
  } else {
    const container = getContainerByItemID(cfg.item_id);
    if (container) {
      text += `Вместимость: ${(container.max_size / 1000).toFixed(1)} кг\n`;
    }
  }
  if (cfg.desc) text += `${cfg.desc}\n`;
  return text;
};
exports.getItemDesc = getItemDesc;
const PLAYER_DEFAULT_WEIGHT_KG = exports.PLAYER_DEFAULT_WEIGHT_KG = 40;
const PLAYER_INVENTORY_MAX_LEVEL = exports.PLAYER_INVENTORY_MAX_LEVEL = 4;
const PLAYER_INVENTORY_KG_PER_LEVEL = exports.PLAYER_INVENTORY_KG_PER_LEVEL = 5;
var OWNER_TYPES;
(function (OWNER_TYPES) {
  OWNER_TYPES[OWNER_TYPES["WORLD"] = 0] = "WORLD";
  OWNER_TYPES[OWNER_TYPES["PLAYER"] = 1] = "PLAYER";
  OWNER_TYPES[OWNER_TYPES["PLAYER_TEMP"] = 1111] = "PLAYER_TEMP";
  OWNER_TYPES[OWNER_TYPES["VEHICLE"] = 2] = "VEHICLE";
  OWNER_TYPES[OWNER_TYPES["VEHICLE_TEMP"] = 1000] = "VEHICLE_TEMP";
  OWNER_TYPES[OWNER_TYPES["HOUSE"] = 3] = "HOUSE";
  OWNER_TYPES[OWNER_TYPES["STOCK_1"] = 4] = "STOCK_1";
  OWNER_TYPES[OWNER_TYPES["STOCK_2"] = 5] = "STOCK_2";
  OWNER_TYPES[OWNER_TYPES["STOCK_3"] = 6] = "STOCK_3";
  OWNER_TYPES[OWNER_TYPES["STOCK_4"] = 7] = "STOCK_4";
  OWNER_TYPES[OWNER_TYPES["STOCK_5"] = 8] = "STOCK_5";
  OWNER_TYPES[OWNER_TYPES["STOCK_6"] = 9] = "STOCK_6";
  OWNER_TYPES[OWNER_TYPES["STOCK_7"] = 10] = "STOCK_7";
  OWNER_TYPES[OWNER_TYPES["STOCK_8"] = 11] = "STOCK_8";
  OWNER_TYPES[OWNER_TYPES["STOCK_9"] = 12] = "STOCK_9";
  OWNER_TYPES[OWNER_TYPES["STOCK_10"] = 13] = "STOCK_10";
  OWNER_TYPES[OWNER_TYPES["STOCK_11"] = 14] = "STOCK_11";
  OWNER_TYPES[OWNER_TYPES["STOCK_12"] = 15] = "STOCK_12";
  OWNER_TYPES[OWNER_TYPES["STOCK_13"] = 16] = "STOCK_13";
  OWNER_TYPES[OWNER_TYPES["STOCK_14"] = 17] = "STOCK_14";
  OWNER_TYPES[OWNER_TYPES["STOCK_15"] = 18] = "STOCK_15";
  OWNER_TYPES[OWNER_TYPES["STOCK_SAFE"] = 19] = "STOCK_SAFE";
  OWNER_TYPES[OWNER_TYPES["BUSINESS"] = 100] = "BUSINESS";
  OWNER_TYPES[OWNER_TYPES["FRACTION_VEHICLE"] = 20] = "FRACTION_VEHICLE";
  OWNER_TYPES[OWNER_TYPES["WALLET"] = 21] = "WALLET";
  OWNER_TYPES[OWNER_TYPES["BAG"] = 22] = "BAG";
  OWNER_TYPES[OWNER_TYPES["WEAPON_MODS"] = 23] = "WEAPON_MODS";
  OWNER_TYPES[OWNER_TYPES["MINING_FARM"] = 25] = "MINING_FARM";
  OWNER_TYPES[OWNER_TYPES["EXCHANGE_MENU"] = 600] = "EXCHANGE_MENU";
  OWNER_TYPES[OWNER_TYPES["GANGWAR_CONTAINER"] = 997] = "GANGWAR_CONTAINER";
  OWNER_TYPES[OWNER_TYPES["TEMP"] = 999] = "TEMP";
  OWNER_TYPES[OWNER_TYPES["HOTKEY"] = 9998] = "HOTKEY";
  OWNER_TYPES[OWNER_TYPES["WEAPON"] = 9997] = "WEAPON";
  OWNER_TYPES[OWNER_TYPES["CLOTHES"] = 9996] = "CLOTHES";
  OWNER_TYPES[OWNER_TYPES["MARKET_STOCK"] = 500] = "MARKET_STOCK";
  OWNER_TYPES[OWNER_TYPES["FARM_STOCK"] = 501] = "FARM_STOCK";
  OWNER_TYPES[OWNER_TYPES["BP_STORAGE"] = 502] = "BP_STORAGE";
  OWNER_TYPES[OWNER_TYPES["DONATE_STORAGE"] = 503] = "DONATE_STORAGE";
  OWNER_TYPES[OWNER_TYPES["BAG1"] = 15000] = "BAG1";
  OWNER_TYPES[OWNER_TYPES["BAG2"] = 15001] = "BAG2";
  OWNER_TYPES[OWNER_TYPES["BAG3"] = 15002] = "BAG3";
  OWNER_TYPES[OWNER_TYPES["BAG4"] = 15003] = "BAG4";
  OWNER_TYPES[OWNER_TYPES["BAG5"] = 15004] = "BAG5";
  OWNER_TYPES[OWNER_TYPES["BAG6"] = 15005] = "BAG6";
  OWNER_TYPES[OWNER_TYPES["BAG7"] = 15006] = "BAG7";
  OWNER_TYPES[OWNER_TYPES["BAG8"] = 15007] = "BAG8";
  OWNER_TYPES[OWNER_TYPES["BAG9"] = 15008] = "BAG9";
  OWNER_TYPES[OWNER_TYPES["BAG10"] = 15010] = "BAG10";
  OWNER_TYPES[OWNER_TYPES["BAG11"] = 15011] = "BAG11";
  OWNER_TYPES[OWNER_TYPES["BAG12"] = 15012] = "BAG12";
  OWNER_TYPES[OWNER_TYPES["BAG13"] = 15013] = "BAG13";
  OWNER_TYPES[OWNER_TYPES["BAG14"] = 15014] = "BAG14";
  OWNER_TYPES[OWNER_TYPES["BAG15"] = 15015] = "BAG15";
  OWNER_TYPES[OWNER_TYPES["BAG16"] = 15016] = "BAG16";
  OWNER_TYPES[OWNER_TYPES["BAG17"] = 15017] = "BAG17";
  OWNER_TYPES[OWNER_TYPES["BAG18"] = 15018] = "BAG18";
  OWNER_TYPES[OWNER_TYPES["BAG19"] = 15019] = "BAG19";
  OWNER_TYPES[OWNER_TYPES["BAG20"] = 15020] = "BAG20";
  OWNER_TYPES[OWNER_TYPES["BAG21"] = 15021] = "BAG21";
  OWNER_TYPES[OWNER_TYPES["BAG22"] = 15023] = "BAG22";
  OWNER_TYPES[OWNER_TYPES["BAG23"] = 15024] = "BAG23";
  OWNER_TYPES[OWNER_TYPES["BAG24"] = 15025] = "BAG24";
  OWNER_TYPES[OWNER_TYPES["BAG25"] = 15026] = "BAG25";
  OWNER_TYPES[OWNER_TYPES["BAG26"] = 15027] = "BAG26";
  OWNER_TYPES[OWNER_TYPES["BAG27"] = 15028] = "BAG27";
  OWNER_TYPES[OWNER_TYPES["BAG28"] = 15029] = "BAG28";
  OWNER_TYPES[OWNER_TYPES["BAG29"] = 15030] = "BAG29";
  OWNER_TYPES[OWNER_TYPES["BAG30"] = 15031] = "BAG30";
  OWNER_TYPES[OWNER_TYPES["BAG31"] = 15032] = "BAG31";
  OWNER_TYPES[OWNER_TYPES["BAG32"] = 15033] = "BAG32";
  OWNER_TYPES[OWNER_TYPES["BAG33"] = 15034] = "BAG33";
  OWNER_TYPES[OWNER_TYPES["BAG34"] = 15035] = "BAG34";
  OWNER_TYPES[OWNER_TYPES["BAG35"] = 15036] = "BAG35";
  OWNER_TYPES[OWNER_TYPES["BAG36"] = 15037] = "BAG36";
  OWNER_TYPES[OWNER_TYPES["BAG37"] = 15038] = "BAG37";
  OWNER_TYPES[OWNER_TYPES["BAG38"] = 15039] = "BAG38";
  OWNER_TYPES[OWNER_TYPES["BAG39"] = 15040] = "BAG39";
  OWNER_TYPES[OWNER_TYPES["BAG40"] = 15041] = "BAG40";
  OWNER_TYPES[OWNER_TYPES["BAG41"] = 15042] = "BAG41";
  OWNER_TYPES[OWNER_TYPES["BAG42"] = 15043] = "BAG42";
  OWNER_TYPES[OWNER_TYPES["BAG43"] = 15044] = "BAG43";
  OWNER_TYPES[OWNER_TYPES["BAG44"] = 15045] = "BAG44";
  OWNER_TYPES[OWNER_TYPES["BAG45"] = 15046] = "BAG45";
  OWNER_TYPES[OWNER_TYPES["BAG46"] = 15047] = "BAG46";
  OWNER_TYPES[OWNER_TYPES["BAG47"] = 15048] = "BAG47";
  OWNER_TYPES[OWNER_TYPES["BAG48"] = 15049] = "BAG48";
  OWNER_TYPES[OWNER_TYPES["BAG49"] = 15050] = "BAG49";
  OWNER_TYPES[OWNER_TYPES["BAG50"] = 15051] = "BAG50";
  OWNER_TYPES[OWNER_TYPES["BAG51"] = 15052] = "BAG51";
  OWNER_TYPES[OWNER_TYPES["BAG53"] = 15053] = "BAG53";
  OWNER_TYPES[OWNER_TYPES["BAG54"] = 15053] = "BAG54";
  OWNER_TYPES[OWNER_TYPES["BAG55"] = 15053] = "BAG55";
  OWNER_TYPES[OWNER_TYPES["BAG56"] = 15053] = "BAG56";
  OWNER_TYPES[OWNER_TYPES["BAG57"] = 15054] = "BAG57";
  OWNER_TYPES[OWNER_TYPES["BAG58"] = 15055] = "BAG58";
  OWNER_TYPES[OWNER_TYPES["BAG59"] = 15056] = "BAG59";
  OWNER_TYPES[OWNER_TYPES["BAG60"] = 15057] = "BAG60";
  OWNER_TYPES[OWNER_TYPES["BAG61"] = 15058] = "BAG61";
  OWNER_TYPES[OWNER_TYPES["BAG62"] = 15059] = "BAG62";
  OWNER_TYPES[OWNER_TYPES["BAG63"] = 15060] = "BAG63";
  OWNER_TYPES[OWNER_TYPES["BAG64"] = 15061] = "BAG64";
  OWNER_TYPES[OWNER_TYPES["BAG65"] = 15062] = "BAG65";
  OWNER_TYPES[OWNER_TYPES["BAG66"] = 15063] = "BAG66";
  OWNER_TYPES[OWNER_TYPES["BAG67"] = 15064] = "BAG67";
  OWNER_TYPES[OWNER_TYPES["BAG68"] = 15065] = "BAG68";
  OWNER_TYPES[OWNER_TYPES["BAG69"] = 15066] = "BAG69";
  OWNER_TYPES[OWNER_TYPES["BAG70"] = 15067] = "BAG70";
  OWNER_TYPES[OWNER_TYPES["BAG71"] = 15068] = "BAG71";
  OWNER_TYPES[OWNER_TYPES["BAG72"] = 15069] = "BAG72";
  OWNER_TYPES[OWNER_TYPES["BAG73"] = 15070] = "BAG73";
  OWNER_TYPES[OWNER_TYPES["BAG74"] = 15071] = "BAG74";
  OWNER_TYPES[OWNER_TYPES["BAG75"] = 15072] = "BAG75";
  OWNER_TYPES[OWNER_TYPES["BAG76"] = 15073] = "BAG76";
  OWNER_TYPES[OWNER_TYPES["BAG77"] = 15074] = "BAG77";
  OWNER_TYPES[OWNER_TYPES["BAG78"] = 15075] = "BAG78";
  OWNER_TYPES[OWNER_TYPES["BAG79"] = 15076] = "BAG79";
  OWNER_TYPES[OWNER_TYPES["BAG80"] = 15077] = "BAG80";
  OWNER_TYPES[OWNER_TYPES["BAG81"] = 15078] = "BAG81";
  OWNER_TYPES[OWNER_TYPES["BAG82"] = 15079] = "BAG82";
  OWNER_TYPES[OWNER_TYPES["BAG83"] = 15080] = "BAG83";
  OWNER_TYPES[OWNER_TYPES["BAG84"] = 15081] = "BAG84";
  OWNER_TYPES[OWNER_TYPES["BAG85"] = 15082] = "BAG85";
  OWNER_TYPES[OWNER_TYPES["BAG86"] = 15083] = "BAG86";
  OWNER_TYPES[OWNER_TYPES["BAG87"] = 15084] = "BAG87";
  OWNER_TYPES[OWNER_TYPES["BAG88"] = 15085] = "BAG88";
  OWNER_TYPES[OWNER_TYPES["BAG89"] = 15086] = "BAG89";
  OWNER_TYPES[OWNER_TYPES["BAG90"] = 15087] = "BAG90";
  OWNER_TYPES[OWNER_TYPES["BAG91"] = 15088] = "BAG91";
  OWNER_TYPES[OWNER_TYPES["BAG92"] = 15089] = "BAG92";
  OWNER_TYPES[OWNER_TYPES["BAG93"] = 15090] = "BAG93";
  OWNER_TYPES[OWNER_TYPES["BAG94"] = 15091] = "BAG94";
  OWNER_TYPES[OWNER_TYPES["BAG95"] = 15092] = "BAG95";
  OWNER_TYPES[OWNER_TYPES["BAG96"] = 15093] = "BAG96";
  OWNER_TYPES[OWNER_TYPES["BAG97"] = 15094] = "BAG97";
  OWNER_TYPES[OWNER_TYPES["BAG98"] = 15095] = "BAG98";
  OWNER_TYPES[OWNER_TYPES["BAG99"] = 15096] = "BAG99";
  OWNER_TYPES[OWNER_TYPES["BAG100"] = 15097] = "BAG100";
  OWNER_TYPES[OWNER_TYPES["BAG101"] = 15098] = "BAG101";
  OWNER_TYPES[OWNER_TYPES["BAG_102"] = 19999] = "BAG_102";
  OWNER_TYPES[OWNER_TYPES["BAG_103"] = 20000] = "BAG_103";
  OWNER_TYPES[OWNER_TYPES["BAG_104"] = 20001] = "BAG_104";
  OWNER_TYPES[OWNER_TYPES["BAG_105"] = 20002] = "BAG_105";
  OWNER_TYPES[OWNER_TYPES["BAG_106"] = 20003] = "BAG_106";
  OWNER_TYPES[OWNER_TYPES["BAG_107"] = 20004] = "BAG_107";
  OWNER_TYPES[OWNER_TYPES["BAG_108"] = 20005] = "BAG_108";
  OWNER_TYPES[OWNER_TYPES["BAG_109"] = 20006] = "BAG_109";
  OWNER_TYPES[OWNER_TYPES["BAG_110"] = 20007] = "BAG_110";
  OWNER_TYPES[OWNER_TYPES["BAG_111"] = 20008] = "BAG_111";
  OWNER_TYPES[OWNER_TYPES["BAG_112"] = 20009] = "BAG_112";
  OWNER_TYPES[OWNER_TYPES["BAG_113"] = 20010] = "BAG_113";
  OWNER_TYPES[OWNER_TYPES["BAG_114"] = 20011] = "BAG_114";
  OWNER_TYPES[OWNER_TYPES["BAG_115"] = 20012] = "BAG_115";
  OWNER_TYPES[OWNER_TYPES["BAG_116"] = 20013] = "BAG_116";
  OWNER_TYPES[OWNER_TYPES["BAG_117"] = 20014] = "BAG_117";
  OWNER_TYPES[OWNER_TYPES["BAG_118"] = 20015] = "BAG_118";
  OWNER_TYPES[OWNER_TYPES["BAG_119"] = 20016] = "BAG_119";
  OWNER_TYPES[OWNER_TYPES["BAG_120"] = 20017] = "BAG_120";
  OWNER_TYPES[OWNER_TYPES["BAG_121"] = 20018] = "BAG_121";
  OWNER_TYPES[OWNER_TYPES["BAG_122"] = 20019] = "BAG_122";
  OWNER_TYPES[OWNER_TYPES["BAG_123"] = 20020] = "BAG_123";
  OWNER_TYPES[OWNER_TYPES["BAG_124"] = 20021] = "BAG_124";
  OWNER_TYPES[OWNER_TYPES["BAG_125"] = 20022] = "BAG_125";
  OWNER_TYPES[OWNER_TYPES["BAG_126"] = 20023] = "BAG_126";
  OWNER_TYPES[OWNER_TYPES["BAG_127"] = 20024] = "BAG_127";
  OWNER_TYPES[OWNER_TYPES["BAG_128"] = 20025] = "BAG_128";
  OWNER_TYPES[OWNER_TYPES["BAG_129"] = 20026] = "BAG_129";
  OWNER_TYPES[OWNER_TYPES["BAG_130"] = 20027] = "BAG_130";
  OWNER_TYPES[OWNER_TYPES["BAG_131"] = 20028] = "BAG_131";
  OWNER_TYPES[OWNER_TYPES["BAG_132"] = 20029] = "BAG_132";
  OWNER_TYPES[OWNER_TYPES["BAG_133"] = 20030] = "BAG_133";
  OWNER_TYPES[OWNER_TYPES["BAG_134"] = 20031] = "BAG_134";
  OWNER_TYPES[OWNER_TYPES["BAG_135"] = 20032] = "BAG_135";
  OWNER_TYPES[OWNER_TYPES["BAG_136"] = 20033] = "BAG_136";
  OWNER_TYPES[OWNER_TYPES["BAG_137"] = 20034] = "BAG_137";
  OWNER_TYPES[OWNER_TYPES["BAG_138"] = 20035] = "BAG_138";
  OWNER_TYPES[OWNER_TYPES["BAG_139"] = 20036] = "BAG_139";
  OWNER_TYPES[OWNER_TYPES["BAG_140"] = 20038] = "BAG_140";
  OWNER_TYPES[OWNER_TYPES["BAG_141"] = 20039] = "BAG_141";
  OWNER_TYPES[OWNER_TYPES["BAG_142"] = 20040] = "BAG_142";
  OWNER_TYPES[OWNER_TYPES["BAG_143"] = 20041] = "BAG_143";
  OWNER_TYPES[OWNER_TYPES["BAG_144"] = 20042] = "BAG_144";
  OWNER_TYPES[OWNER_TYPES["BAG_145"] = 20043] = "BAG_145";
  OWNER_TYPES[OWNER_TYPES["BAG_146"] = 20044] = "BAG_146";
  OWNER_TYPES[OWNER_TYPES["BAG_147"] = 20045] = "BAG_147";
  OWNER_TYPES[OWNER_TYPES["BAG_148"] = 20046] = "BAG_148";
  OWNER_TYPES[OWNER_TYPES["BAG_149"] = 20047] = "BAG_149";
  OWNER_TYPES[OWNER_TYPES["BAG_150"] = 20048] = "BAG_150";
  OWNER_TYPES[OWNER_TYPES["BAG_151"] = 20049] = "BAG_151";
  OWNER_TYPES[OWNER_TYPES["BAG_152"] = 20050] = "BAG_152";
  OWNER_TYPES[OWNER_TYPES["BAG_153"] = 20051] = "BAG_153";
  OWNER_TYPES[OWNER_TYPES["BAG_154"] = 20052] = "BAG_154";
  OWNER_TYPES[OWNER_TYPES["BAG_155"] = 20053] = "BAG_155";
})(OWNER_TYPES || (exports.OWNER_TYPES = OWNER_TYPES = {}));
const getContainerByOwnerType = owner_type => {
  return CONTAINERS_DATA.find(q => q.owner_type === owner_type);
};
exports.getContainerByOwnerType = getContainerByOwnerType;
const getContainerByItemID = item_id => {
  return CONTAINERS_DATA.find(q => q.item_id === item_id);
};
exports.getContainerByItemID = getContainerByItemID;
const MAXIMUM_ITEMS_IN_ONE_EXCHANGE = exports.MAXIMUM_ITEMS_IN_ONE_EXCHANGE = 20;
var ExchangeReadyStatus;
(function (ExchangeReadyStatus) {
  ExchangeReadyStatus[ExchangeReadyStatus["NOT_READY"] = 0] = "NOT_READY";
  ExchangeReadyStatus[ExchangeReadyStatus["READY"] = 1] = "READY";
  ExchangeReadyStatus[ExchangeReadyStatus["CONFIRMED"] = 2] = "CONFIRMED";
})(ExchangeReadyStatus || (exports.ExchangeReadyStatus = ExchangeReadyStatus = {}));
var ITEM_TYPE;
(function (ITEM_TYPE) {
  ITEM_TYPE[ITEM_TYPE["WATER"] = 0] = "WATER";
  ITEM_TYPE[ITEM_TYPE["FOOD"] = 1] = "FOOD";
  ITEM_TYPE[ITEM_TYPE["WEAPON"] = 2] = "WEAPON";
  ITEM_TYPE[ITEM_TYPE["AMMO_BOX"] = 3] = "AMMO_BOX";
  ITEM_TYPE[ITEM_TYPE["WEAPON_MAGAZINE"] = 4] = "WEAPON_MAGAZINE";
  ITEM_TYPE[ITEM_TYPE["DRUG"] = 5] = "DRUG";
  ITEM_TYPE[ITEM_TYPE["SYSTEM"] = 6] = "SYSTEM";
  ITEM_TYPE[ITEM_TYPE["MEDICATION"] = 7] = "MEDICATION";
  ITEM_TYPE[ITEM_TYPE["DONAT"] = 8] = "DONAT";
  ITEM_TYPE[ITEM_TYPE["CLOTH"] = 9] = "CLOTH";
  ITEM_TYPE[ITEM_TYPE["ALCO"] = 10] = "ALCO";
  ITEM_TYPE[ITEM_TYPE["OTHER"] = 11] = "OTHER";
  ITEM_TYPE[ITEM_TYPE["WEAPON_ADDON"] = 12] = "WEAPON_ADDON";
  ITEM_TYPE[ITEM_TYPE["BAGS"] = 13] = "BAGS";
  ITEM_TYPE[ITEM_TYPE["MINING"] = 14] = "MINING";
  ITEM_TYPE[ITEM_TYPE["POTION"] = 15] = "POTION";
  ITEM_TYPE[ITEM_TYPE["ANIMAL"] = 16] = "ANIMAL";
  ITEM_TYPE[ITEM_TYPE["SMOKING"] = 17] = "SMOKING";
})(ITEM_TYPE || (exports.ITEM_TYPE = ITEM_TYPE = {}));
const ITEM_TYPE_ARRAY = exports.ITEM_TYPE_ARRAY = ["Напитки", "Еда", "Оружие", "Коробка патронов", "Оружейный магазин", "Наркотики", "Системные", "Медикаменты", "Донат вещи", "Одежда", "Алкоголь", "Прочее", "Модификации оружия", "Сумки и рюкзаки", "Компоненты майнинга", "Зелья", "Животные"];
const convertInventoryItemObjectToArray = item => {
  return [item.id, item.item_id, item.count, item.serial, item.extra];
};
exports.convertInventoryItemObjectToArray = convertInventoryItemObjectToArray;
const convertInventoryItemArrayToObject = item => {
  const cfg = inventoryShared.get(item[1]);
  return {
    id: item[0],
    item_id: item[1],
    count: item[2],
    serial: item[3],
    extra: item[4],
    desc: cfg.desc
  };
};
exports.convertInventoryItemArrayToObject = convertInventoryItemArrayToObject;
const ELECTRO_SHOP_ITEMS = exports.ELECTRO_SHOP_ITEMS = [];
const getItemName = item => {
  let name = getBaseItemNameById(item.item_id);
  if (item.serial) {
    let cfg = inventoryShared.get(item.item_id);
    if (cfg) {
      if ([ITEM_TYPE.WEAPON_MAGAZINE, ITEM_TYPE.WEAPON].includes(cfg.type) || item.item_id == 800) {
        name += ` (#${item.serial})`;
      }
      if (item.item_id == 805) {
        name += ` ${item.serial}`;
      }
      if (item.item_id == 851) {
        const q = item.serial.split('_');
        if (q.length > 0) {
          name += ` #${q[q.length - 1]}`;
        }
      }
      if (item.item_id == 803) {
        const q = item.serial.split('-');
        if (q.length === 5) {
          name += ` на ${_licence.LicenseName[q[0]]} ${parseInt(q[3]) < _system.systemUtil.timestamp ? ' (Просрочена)' : ''}`;
        }
      }
      if (item.item_id == 802) {
        const q = item.serial.split('|');
        if (q.length === 10) {
          const doc = _documents.document_templates.find(s => s.id === q[0]);
          name += ` ${doc.typeShort}`;
        }
      }
      if (item.item_id == 801) {
        if (!item.extra) {
          name += " (Заблокирована)";
        } else {
          const [sub_type, id, tarifid, rand] = item.serial.split('A');
          name += ` (${_economy.BANK_CARD_NAME_LIST[parseInt(tarifid)] || "Debit"})`;
        }
      }
      if (cfg.type == ITEM_TYPE.CLOTH) {
        name += ` (${item.serial})`;
      }
    }
  }
  return name;
};
exports.getItemName = getItemName;
const getBaseItemNameById = item_id => {
  let cfg = inventoryShared.get(item_id);
  if (!cfg) return "Безымянный";
  return cfg.name;
};
exports.getBaseItemNameById = getBaseItemNameById;
const canUse = item_id => {
  let cfg = inventoryShared.get(item_id);
  if (!cfg) return false;
  return !!cfg.use;
};
exports.canUse = canUse;
const getItemWeight = (item, count, returnKg = false) => {
  let cfg = inventoryShared.get(typeof item === "number" ? item : item.item_id);
  if (!cfg) return 0;
  if (typeof count !== "number") count = cfg.default_count;
  if (typeof item === "object") return item.weight * count;
  if (!cfg) return 0;
  let weight = cfg.weight * count;
  if (cfg.base_weight) weight += cfg.base_weight;
  if (returnKg) return weight / 1000;
  return weight;
};
exports.getItemWeight = getItemWeight;
const getItemWeightText = (item, count) => {
  let weight = getItemWeight(item, count);
  if (weight > 1000) return `${(weight / 1000).toFixed(3)} кг`;else return `${Math.floor(weight)} г`;
};
exports.getItemWeightText = getItemWeightText;
function getAllItemsWeightText(...itm) {
  let weight = 0;
  itm.map(i => {
    weight += getItemWeight(i[0], i[1]);
  });
  if (weight > 1000) return `${(weight / 1000).toFixed(3)} кг`;else return `${Math.floor(weight)} г`;
}
const CUFFS_ITEM_ID = exports.CUFFS_ITEM_ID = 804;
const CUFFS_KEY_ITEM_ID = exports.CUFFS_KEY_ITEM_ID = 899;
const SCREWS_ITEM_ID = exports.SCREWS_ITEM_ID = 799;
const SCREWS_DESTROYER_ITEM_IDS = exports.SCREWS_DESTROYER_ITEM_IDS = [552, 890];
const ARMOR_ITEM_ID = exports.ARMOR_ITEM_ID = 960;
var WEAPON_AMMO_WEIGHT;
(function (WEAPON_AMMO_WEIGHT) {
  WEAPON_AMMO_WEIGHT[WEAPON_AMMO_WEIGHT["AK"] = 10] = "AK";
  WEAPON_AMMO_WEIGHT[WEAPON_AMMO_WEIGHT["NATO"] = 12] = "NATO";
  WEAPON_AMMO_WEIGHT[WEAPON_AMMO_WEIGHT["COMBAT"] = 15] = "COMBAT";
  WEAPON_AMMO_WEIGHT[WEAPON_AMMO_WEIGHT["HEAVY"] = 20] = "HEAVY";
  WEAPON_AMMO_WEIGHT[WEAPON_AMMO_WEIGHT["PISTOL"] = 8] = "PISTOL";
  WEAPON_AMMO_WEIGHT[WEAPON_AMMO_WEIGHT["SHOTGUN"] = 30] = "SHOTGUN";
})(WEAPON_AMMO_WEIGHT || (exports.WEAPON_AMMO_WEIGHT = WEAPON_AMMO_WEIGHT = {}));
const itemsList = [{
  item_id: 99919,
  name: 'Хэллоуин рюкзак',
  type: ITEM_TYPE.SYSTEM,
  weight: 1,
  base_weight: 30,
  prop: 'ghostbusters_bag',
  default_count: 0
}, {
  item_id: 1,
  name: "Бутылка воды",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 30,
  prop: "prop_ld_flow_bottle",
  default_count: 500,
  use: true,
  count_use: 100,
  defaultCost: 90,
  propAttachParam: [0.120, 0.075, 0.000, 248, 0, 0],
  protect: true
}, {
  item_id: 2,
  name: "Банка Кока Колы",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 30,
  prop: "prop_ecola_can",
  default_count: 330,
  use: true,
  defaultCost: 100,
  propAttachParam: [0.135, 0.020, 0.040, 247, 0, 0],
  protect: true
}, {
  item_id: 3,
  name: "Банка Спрайта",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 30,
  prop: "ba_prop_club_tonic_can",
  default_count: 330,
  use: true,
  defaultCost: 100,
  propAttachParam: [0.135, -0.035, 0.060, 247, 0, 0],
  protect: true
}, {
  item_id: 4,
  name: "Апельсиновая газировка",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 30,
  prop: "prop_orang_can_01",
  default_count: 330,
  use: true,
  defaultCost: 100,
  propAttachParam: [0.135, 0.025, 0.025, 243, 0, 0],
  protect: true
}, {
  item_id: 5,
  name: "Кофе",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 30,
  prop: "prop_food_bs_coffee",
  default_count: 230,
  use: true,
  defaultCost: 120,
  propAttachParam: [0.120, -0.045, 0.070, 256, 0, 0],
  protect: true
}, {
  item_id: 6,
  name: "Бутылка Тоника",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 30,
  prop: "ba_prop_club_tonic_bottle",
  default_count: 450,
  use: true,
  count_use: 100,
  defaultCost: 50,
  propAttachParam: [0.130, -0.095, 0.095, 240, 0, 0],
  protect: true
}, {
  item_id: 7,
  name: "Энергетик",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 30,
  prop: "prop_energy_drink",
  default_count: 400,
  use: true,
  count_use: 100,
  defaultCost: 140,
  propAttachParam: [0.135, 0.040, 0.025, 241, 0, 0],
  protect: true
}, {
  item_id: 8,
  name: "Чай",
  type: ITEM_TYPE.WATER,
  weight: 1,
  base_weight: 20,
  prop: "v_res_fa_pottea",
  default_count: 300,
  use: true,
  defaultCost: 120,
  propAttachParam: [0.135, 0.040, 0.025, 241, 0, 0],
  protect: true
}, {
  item_id: 150,
  name: "Коробка патронов 5.45",
  type: ITEM_TYPE.AMMO_BOX,
  weight: WEAPON_AMMO_WEIGHT.AK,
  base_weight: 10,
  prop: "prop_ld_ammo_pack_03",
  default_count: 70,
  need_group: true,
  defaultCost: 1400,
  canSplit: true
}, {
  item_id: 151,
  name: "Коробка патронов 5.56",
  type: ITEM_TYPE.AMMO_BOX,
  weight: WEAPON_AMMO_WEIGHT.NATO,
  base_weight: 10,
  prop: "prop_ld_ammo_pack_03",
  default_count: 70,
  need_group: true,
  defaultCost: 1750,
  canSplit: true
}, {
  item_id: 152,
  name: "Коробка патронов 12.7",
  type: ITEM_TYPE.AMMO_BOX,
  weight: WEAPON_AMMO_WEIGHT.HEAVY,
  base_weight: 70,
  prop: "prop_box_ammo02a",
  default_count: 30,
  need_group: true,
  defaultCost: 1850,
  canSplit: true
}, {
  item_id: 153,
  name: "Коробка патронов 9mm",
  type: ITEM_TYPE.AMMO_BOX,
  weight: WEAPON_AMMO_WEIGHT.PISTOL,
  base_weight: 10,
  prop: "prop_ld_ammo_pack_01",
  default_count: 70,
  need_group: true,
  defaultCost: 1350,
  canSplit: true
}, {
  item_id: 154,
  name: "Коробка патронов 18.5",
  type: ITEM_TYPE.AMMO_BOX,
  weight: WEAPON_AMMO_WEIGHT.SHOTGUN,
  base_weight: 10,
  prop: "prop_ld_ammo_pack_01",
  default_count: 70,
  need_group: true,
  defaultCost: 1350,
  canSplit: true
}, {
  item_id: 155,
  name: "Коробка патронов 7.62",
  type: ITEM_TYPE.AMMO_BOX,
  weight: WEAPON_AMMO_WEIGHT.COMBAT,
  base_weight: 10,
  prop: "prop_ld_ammo_pack_01",
  default_count: 70,
  need_group: true,
  defaultCost: 1200,
  canSplit: true
}, {
  item_id: 156,
  name: "Смесь для огнетушителя",
  type: ITEM_TYPE.AMMO_BOX,
  weight: 1,
  base_weight: 10,
  prop: "prop_ld_ammo_pack_01",
  default_count: 999,
  need_group: true,
  defaultCost: 500,
  canSplit: false,
  blockMove: true
}, {
  item_id: 20,
  name: "Чизбургер",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 10,
  prop: "prop_cs_burger_01",
  default_count: 200,
  use: true,
  defaultCost: 250,
  propAttachParam: [0.155, 0.035, 0.035, 163, 29, 0],
  protect: true
}, {
  item_id: 21,
  name: "Чипсы",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 20,
  prop: "prop_food_cb_chips",
  default_count: 250,
  use: true,
  defaultCost: 150,
  propAttachParam: [0.150, -0.045, 0.030, 260, 19, 15],
  protect: true
}, {
  item_id: 22,
  name: "Картошка фри",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 20,
  prop: "prop_food_bs_chips",
  default_count: 200,
  use: true,
  defaultCost: 150,
  propAttachParam: [0.155, -0.030, 0.060, 232, 0, 0],
  protect: true
}, {
  item_id: 23,
  name: "Чипсы с сыром",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 10,
  prop: "ng_proc_food_chips01a",
  default_count: 200,
  use: true,
  defaultCost: 150,
  propAttachParam: [0.165, 0.000, 0.060, 332, 161, 0],
  need_group: true,
  protect: true
}, {
  item_id: 24,
  name: "Пицца",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 50,
  prop: "prop_pizza_box_01",
  default_count: 800,
  use: true,
  count_use: 400,
  defaultCost: 200,
  protect: true
}, {
  item_id: 25,
  name: "Банан",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 100,
  prop: "ng_proc_food_nana1a",
  default_count: 300,
  use: true,
  defaultCost: 90,
  propAttachParam: [0.170, 0.000, 0.000, 357, 0, 0],
  protect: true
}, {
  item_id: 26,
  name: "Пончики",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 50,
  prop: "prop_food_cb_donuts",
  default_count: 500,
  use: true,
  count_use: 200,
  defaultCost: 100,
  propAttachParam: [0.155, 0.015, 0.040, 281, 17, 88],
  protect: true
}, {
  item_id: 27,
  name: "Нагетсы",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 30,
  prop: "prop_food_cb_nugets",
  default_count: 500,
  use: true,
  defaultCost: 200,
  propAttachParam: [0.155, 0.015, 0.040, 281, 17, 88],
  protect: true
}, {
  item_id: 28,
  name: "Яблоко",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  prop: "ng_proc_food_aple2a",
  default_count: 300,
  use: true,
  defaultCost: 90,
  propAttachParam: [0.120, -0.000, -0.025, 327, 0, 0],
  protect: true
}, {
  item_id: 29,
  name: "Апельсин",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 100,
  prop: "ng_proc_food_ornge1a",
  default_count: 90,
  use: true,
  defaultCost: 100,
  propAttachParam: [0.130, 0.000, 0.000, 328, 0, 0],
  protect: true
}, {
  item_id: 30,
  name: "Сухпаек",
  type: ITEM_TYPE.FOOD,
  weight: 1,
  base_weight: 1000,
  prop: "prop_food_cb_chips",
  default_count: 500,
  use: true
}, {
  item_id: 50,
  name: "Пакетик с амфетамином",
  type: ITEM_TYPE.DRUG,
  weight: 1,
  base_weight: 5,
  prop: "bkr_prop_meth_smallbag_01a",
  default_count: 50,
  use: true,
  count_use: 1,
  drugMultiple: 300,
  drugHeal: 7,
  need_group: true,
  canSplit: true
}, {
  item_id: 51,
  name: "Пакетик с марихуанной",
  type: ITEM_TYPE.DRUG,
  weight: 1,
  base_weight: 5,
  prop: "bkr_prop_weed_smallbag_01a",
  default_count: 50,
  use: true,
  count_use: 1,
  drugMultiple: 100,
  drugHeal: 6,
  need_group: true,
  canSplit: true
}, {
  item_id: 52,
  name: "Пакетик с ЛСД",
  type: ITEM_TYPE.DRUG,
  weight: 1,
  base_weight: 5,
  prop: "bkr_prop_meth_smallbag_01a",
  default_count: 50,
  use: true,
  count_use: 1,
  drugMultiple: 350,
  drugHeal: 7,
  need_group: true,
  canSplit: true
}, {
  item_id: 53,
  name: "Пакетик с DMT",
  type: ITEM_TYPE.DRUG,
  weight: 1,
  base_weight: 5,
  prop: "bkr_prop_meth_smallbag_01a",
  default_count: 50,
  use: true,
  count_use: 1,
  drugMultiple: 300,
  drugHeal: 6,
  need_group: true,
  canSplit: true
}, {
  item_id: 54,
  name: "Пакетик с кокаином",
  type: ITEM_TYPE.DRUG,
  weight: 1,
  base_weight: 5,
  prop: "bkr_prop_meth_smallbag_01a",
  default_count: 50,
  use: true,
  count_use: 1,
  drugMultiple: 300,
  drugHeal: 10,
  need_group: true,
  canSplit: true
}, {
  item_id: 55,
  name: "Зип-лок",
  type: ITEM_TYPE.SYSTEM,
  weight: 1,
  base_weight: 5,
  prop: "ng_proc_drug01a002",
  default_count: 1,
  need_group: true,
  defaultCost: 10,
  canSplit: true,
  protect: true
}, {
  item_id: 56,
  name: "Фольга",
  type: ITEM_TYPE.SYSTEM,
  weight: 1,
  base_weight: 5,
  prop: "rop_a4_pile_01",
  default_count: 1,
  need_group: true,
  defaultCost: 5,
  canSplit: true,
  protect: true
}, {
  item_id: 57,
  name: "Лист бумаги",
  type: ITEM_TYPE.SYSTEM,
  weight: 1,
  base_weight: 5,
  prop: "p_a4_sheets_s",
  default_count: 1,
  need_group: true,
  defaultCost: 5,
  canSplit: true,
  protect: true
}, {
  item_id: 58,
  name: "Кислота",
  type: ITEM_TYPE.OTHER,
  weight: 1,
  base_weight: 100,
  prop: "prop_drug_bottle",
  default_count: 1,
  need_group: true,
  canSplit: true,
  protect: true
}, {
  item_id: 59,
  name: "Пропанол",
  type: ITEM_TYPE.OTHER,
  weight: 1,
  base_weight: 100,
  prop: "prop_cs_script_bottle",
  default_count: 1,
  need_group: true,
  canSplit: true,
  protect: true
}, {
  item_id: 60,
  name: "Лин",
  type: ITEM_TYPE.OTHER,
  weight: 1,
  base_weight: 100,
  prop: "prop_energy_drink",
  default_count: 1,
  need_group: true,
  canSplit: true,
  protect: true
}, {
  item_id: 200,
  name: "Сидр",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "ng_proc_beerbottle_01a",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 1200,
  propAttachParam: [0.135, -0.060, 0.065, 242, 0, 0],
  protect: true
}, {
  item_id: 201,
  name: "Крафтовое Пиво",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_amb_beer_bottle",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  propAttachParam: [0.135, 0.055, 0.005, 234, 0, 0],
  protect: true
}, {
  item_id: 202,
  name: "Пиво Dusche",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_beerdusche",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  propAttachParam: [0.130, -0.140, 0.150, 233, 0, 0],
  protect: true
}, {
  item_id: 203,
  name: "Китайское Пиво",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_beer_amopen",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  propAttachParam: [0.135, -0.125, 0.140, 234, 0, 0],
  protect: true
}, {
  item_id: 204,
  name: "Пиво Barracho",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_beer_bar",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  propAttachParam: [0.135, -0.125, 0.140, 232, 0, 0],
  protect: true
}, {
  item_id: 205,
  name: "Пиво Blarney",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_beer_blr",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  propAttachParam: [0.135, -0.135, 0.110, 239, 0, 0],
  need_group: true,
  protect: true
}, {
  item_id: 206,
  name: "Пиво Patriot",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_beer_patriot",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  protect: true
}, {
  item_id: 207,
  name: "Пиво Pride",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_beer_pride",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  protect: true
}, {
  item_id: 208,
  name: "Пиво Stronz",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_beer_stz",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 800,
  protect: true
}, {
  item_id: 209,
  name: "Виски Richards",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "ba_prop_battle_whiskey_opaque_s",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 1500,
  protect: true
}, {
  item_id: 210,
  name: "Бурбон The Mount",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_cs_whiskey_bottle",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 1500,
  protect: true
}, {
  item_id: 211,
  name: "Водка",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_vodka_bottle",
  default_count: 500,
  use: true,
  count_use: 1,
  defaultCost: 1000,
  protect: true
}, {
  item_id: 212,
  name: "Белое полусладкое Вино",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_bot_01",
  default_count: 750,
  use: true,
  count_use: 1,
  defaultCost: 1200,
  protect: true
}, {
  item_id: 213,
  name: "Белое сладкое Вино",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_bot_02",
  default_count: 750,
  use: true,
  count_use: 1,
  defaultCost: 1200,
  protect: true
}, {
  item_id: 214,
  name: "Красное сухое Вино",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 750,
  use: true,
  count_use: 1,
  defaultCost: 1200,
  protect: true
}, {
  item_id: 215,
  name: "Коньяк",
  type: ITEM_TYPE.ALCO,
  weight: 1,
  base_weight: 100,
  prop: "prop_bottle_cognac",
  default_count: 750,
  use: true,
  count_use: 1,
  defaultCost: 1400,
  protect: true
}, {
  item_id: 500,
  name: "АК-47",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7700,
  prop: "w_ar_assaultrifle",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 3000
}, {
  item_id: 501,
  name: "Taurus PT92",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_pi_pistol",
  default_count: 1,
  use: true,
  defaultCost: 1500,
  attachBody: "SHORT"
}, {
  item_id: 502,
  name: "Beretta 90Two",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_pi_pistolmk2",
  default_count: 1,
  use: true,
  defaultCost: 1600,
  attachBody: "SHORT"
}, {
  item_id: 503,
  name: "P99",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 700,
  prop: "w_pi_combatpistol",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 800
}, {
  item_id: 504,
  name: "TDI Kard",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 700,
  prop: "w_pi_appistol",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 800
}, {
  item_id: 505,
  name: "Desert Eagle",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 700,
  prop: "w_pi_pistol50",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 1500
}, {
  item_id: 506,
  name: "HK P7M10",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_pi_sns_pistol",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 800
}, {
  item_id: 507,
  name: "AMT Backup",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_pi_sns_pistolmk2",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 800
}, {
  item_id: 508,
  name: "Remington 1911",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 700,
  prop: "w_pi_heavypistol",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 1200
}, {
  item_id: 509,
  name: "FN Model 1922",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 800,
  prop: "w_pi_vintage_pistol",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 1000
}, {
  item_id: 510,
  name: "Contender G2",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 1100,
  prop: "w_pi_singleshot",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 1500
}, {
  item_id: 511,
  name: "Taurus Raging Bull",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 1200,
  prop: "w_pi_revolver",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 5000
}, {
  item_id: 512,
  name: "Taurus Raging Bull Mod",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 1200,
  prop: "w_pi_revolvermk2",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 5500
}, {
  item_id: 513,
  name: "Colt New Service",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 1300,
  prop: "w_pi_wep1_gun",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 5000
}, {
  item_id: 514,
  name: "Glock 17",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_pi_ceramic_pistol",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 800
}, {
  item_id: 515,
  name: "Colt Navy",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 1400,
  prop: "w_pi_wep2_gun",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 1500
}, {
  item_id: 516,
  name: "Mini Uzi",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_sb_microsmg",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 6500
}, {
  item_id: 517,
  name: "MP5A3",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 3300,
  prop: "w_sb_smg",
  default_count: 1,
  use: true,
  defaultCost: 4500,
  attachBody: "SHORT"
}, {
  item_id: 518,
  name: "MP5K",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 1000,
  prop: "w_sb_smgmk2",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 3000
}, {
  item_id: 519,
  name: "P-90",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 1500,
  prop: "w_sb_assaultsmg",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 5000
}, {
  item_id: 520,
  name: "SIG MPX-SD",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 3200,
  prop: "w_sb_pdw",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 3000
}, {
  item_id: 521,
  name: "Intratec TEC-9",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 700,
  prop: "w_sb_compactsmg",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 2000
}, {
  item_id: 522,
  name: "Scorpion",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 450,
  prop: "w_sb_minismg",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 2000
}, {
  item_id: 523,
  name: "Mossberg 590 A1",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "w_sg_pumpshotgun",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 4500
}, {
  item_id: 524,
  name: "Mossberg 590 A1 Mod",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "w_sg_pumpshotgunmk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 525,
  name: "Mossberg 500",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "w_sg_sawnoff",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 4000
}, {
  item_id: 526,
  name: "UTS-15",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "w_sg_assaultshotgun",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 527,
  name: "KSG 12",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "w_sg_bullpupshotgun",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 528,
  name: "Land Pattern Musket",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 8000,
  prop: "w_ar_musket",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 7000
}, {
  item_id: 529,
  name: "Сайга-12К",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7500,
  prop: "w_sg_heavyshotgun",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 6000
}, {
  item_id: 530,
  name: "Обрез",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7500,
  prop: "w_sg_doublebarrel",
  default_count: 1,
  use: true,
  defaultCost: 3000,
  attachBody: "SHORT"
}, {
  item_id: 531,
  name: "Protecta",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7500,
  prop: "w_sg_sweeper",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 4000
}, {
  item_id: 532,
  name: "AK-103",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "w_ar_assaultriflemk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 20000
}, {
  item_id: 533,
  name: "HK-416",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 6500,
  prop: "w_ar_carbinerifle",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 534,
  name: "HK Mod",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 6500,
  prop: "w_ar_carbineriflemk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 6000
}, {
  item_id: 535,
  name: "Tavor CTar-21",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 6500,
  prop: "w_ar_advancedrifle",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 7000
}, {
  item_id: 536,
  name: "G36C",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 6400,
  prop: "w_ar_specialcarbine",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 537,
  name: "G36KV",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 6200,
  prop: "w_ar_specialcarbinemk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 538,
  name: "QBZ-97",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 8000,
  prop: "w_ar_bullpuprifle",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 539,
  name: "QBZ-95",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 8000,
  prop: "w_ar_bullpupriflemk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 540,
  name: "АКС-74У",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 4200,
  prop: "w_ar_assaultrifle_smg",
  default_count: 1,
  use: true,
  defaultCost: 5000,
  attachBody: "LONG"
}, {
  item_id: 541,
  name: "Печенег",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 11700,
  prop: "w_mg_mg",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 100000
}, {
  item_id: 542,
  name: "Mk 48",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 14500,
  prop: "w_mg_combatmg",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 70000
}, {
  item_id: 543,
  name: "MG42",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 15000,
  prop: "w_mg_combatmgmk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 100000
}, {
  item_id: 544,
  name: "Thompson M1918A1",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 11000,
  prop: "w_sb_gusenberg",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 5000
}, {
  item_id: 545,
  name: "AWM L115A3",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 11000,
  prop: "w_sr_sniperrifle",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 60000
}, {
  item_id: 546,
  name: "Barrett M82A1",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 13000,
  prop: "w_sr_heavysniper",
  default_count: 1,
  use: true,
  attachBody: "LONG"
}, {
  item_id: 547,
  name: "Винтовка для охоты",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 14000,
  prop: "w_sr_heavysnipermk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 100000
}, {
  item_id: 548,
  name: "M14 EBR",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 13000,
  prop: "w_sr_marksmanrifle",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 150000
}, {
  item_id: 549,
  name: "SOCOM 16",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 13000,
  prop: "w_sr_marksmanriflemk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 150000
}, {
  item_id: 550,
  name: "Taser",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_pi_stungun",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 551,
  name: "Бита",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_me_bat",
  default_count: 1,
  use: true,
  attachBody: "BAT"
}, {
  item_id: 552,
  name: "Охотничий нож",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 553,
  name: "Дубинка",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_me_nightstick",
  default_count: 1,
  use: true,
  attachBody: "BATON"
}, {
  item_id: 554,
  name: "РПГ феерверки",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_lr_firework",
  default_count: 1,
  use: true,
  attachBody: "LONG"
}, {
  item_id: 555,
  name: "Фонарик",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_flashlight",
  default_count: 1,
  use: true,
  attachBody: "SHORT",
  defaultCost: 500
}, {
  item_id: 556,
  name: "Бластер",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_flashlight",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 557,
  name: "Лучевой миниган",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_flashlight",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 558,
  name: "Рельсовое оружие",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_flashlight",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 559,
  name: "Мини гранатомет",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_flashlight",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 560,
  name: "Огнетушитель",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "w_am_fire_exting",
  default_count: 1,
  use: true,
  blockMove: true
}, {
  item_id: 561,
  name: "Розочка",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 562,
  name: "Ломик",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 563,
  name: "Строительный молоток",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 564,
  name: "Топорик",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 565,
  name: "Кастет",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 566,
  name: "Мачете",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 567,
  name: "Трубный ключ",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 568,
  name: "Axe топор",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 569,
  name: "Кий",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 570,
  name: "Каменный топор",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 571,
  name: "AUG A3",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "w_ar_assaultriflemk2",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 20000
}, {
  item_id: 572,
  name: "Perico pistol",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 7000,
  prop: "weapon_flashlight",
  default_count: 1,
  use: true,
  attachBody: "LONG",
  defaultCost: 20000
}, {
  item_id: 573,
  name: "Клюшка",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 574,
  name: "Выкидной нож",
  type: ITEM_TYPE.WEAPON,
  weight: 0,
  base_weight: 500,
  prop: "weapon_knife",
  default_count: 1,
  use: true,
  attachBody: "SHORT"
}, {
  item_id: 798,
  name: "Спец. пластид",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5400,
  prop: "ch_prop_ch_ld_bomb_01a",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 799,
  name: "Стяжки",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "prop_cs_cuffs_01",
  default_count: 1,
  use: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 800,
  name: "ID Карта",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 40,
  prop: "p_ld_id_card_002",
  default_count: 1,
  use: true,
  helpIcon: 'document',
  protect: true,
  helpDesc: 'Нажав использовать на ID карту в инвентаре вы можете посмотреть свою роспись и данные, а также показать другим игрокам'
}, {
  item_id: 801,
  name: "Банковская карта",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 40,
  prop: "prop_cs_credit_card",
  default_count: 1,
  use: true,
  helpIcon: 'card',
  helpDesc: 'Банковская карта используется для оплаты товаров в магазинах',
  protect: true
}, {
  item_id: 802,
  name: "Документ",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paper_03a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 803,
  name: "Лицензия",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 804,
  name: "Наручники",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "prop_cs_cuffs_01",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 805,
  name: "Ключи",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "prop_cuff_keys_01",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 806,
  name: "Полицейское ограждение",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 1100,
  prop: "prop_barrier_work05",
  default_count: 1,
  canFactionsTake: [_fractions.FACTION_ID.LSPD, _fractions.FACTION_ID.ARMY, _fractions.FACTION_ID.FIB]
}, {
  item_id: 807,
  name: "Длинный полосатый конус",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 800,
  prop: "prop_mp_cone_01",
  default_count: 1,
  canFactionsTake: [_fractions.FACTION_ID.LSPD, _fractions.FACTION_ID.ARMY, _fractions.FACTION_ID.FIB]
}, {
  item_id: 808,
  name: "Полосатый конус",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 600,
  prop: "prop_cone_float_1",
  default_count: 1,
  canFactionsTake: [_fractions.FACTION_ID.LSPD, _fractions.FACTION_ID.ARMY, _fractions.FACTION_ID.FIB]
}, {
  item_id: 809,
  name: "Красный конус",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 600,
  prop: "prop_mp_cone_03",
  default_count: 1,
  canFactionsTake: [_fractions.FACTION_ID.LSPD, _fractions.FACTION_ID.ARMY, _fractions.FACTION_ID.FIB]
}, {
  item_id: 810,
  name: "Длинный конус с огнями",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 600,
  prop: "prop_air_conelight",
  default_count: 1,
  canFactionsTake: [_fractions.FACTION_ID.LSPD, _fractions.FACTION_ID.ARMY, _fractions.FACTION_ID.FIB]
}, {
  item_id: 811,
  name: "Пачка отмычек",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 330,
  prop: "p_cash_envelope_01_s",
  default_count: 1,
  use: true
}, {
  item_id: 813,
  name: "Отмычка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "gr_prop_gr_jailer_keys_01a",
  default_count: 1,
  use: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 815,
  name: "Набор инструментов",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 330,
  prop: "gr_prop_gr_tool_box_01a",
  default_count: 1,
  use: true,
  defaultCost: 500,
  protect: true
}, {
  item_id: 816,
  name: "Верёвка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 330,
  prop: "prop_devin_rope_01",
  default_count: 1,
  use: true,
  defaultCost: 100,
  protect: true
}, {
  item_id: 817,
  name: "Канистра с бензином",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10000,
  prop: "prop_ld_jerrycan_01",
  default_count: 15,
  use: true,
  defaultCost: 500,
  protect: true
}, {
  item_id: 818,
  name: "Бетонный блок",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 30000,
  prop: "prop_barier_conc_01a",
  default_count: 1
}, {
  item_id: 819,
  name: "Лосось",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 820,
  name: "Фуга",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 821,
  name: "Камбала",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 822,
  name: "Осётр",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 823,
  name: "Кижуч",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 824,
  name: "Удостоверение",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "prop_cs_documents_01",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 830,
  name: "Мясо Кабана",
  type: ITEM_TYPE.SYSTEM,
  weight: 8500,
  base_weight: 0,
  prop: "prop_cs_steak",
  default_count: 1,
  need_group: true,
  canSplit: true,
  helpDesc: "Мясо кабана вы можете продать одному из 2 скупщиков (желтая иконка животного на карте). У каждого скупщика своя цена. Скупщик в порту покупает больше мяса и за большую стоимость. Каждый час цена у торговцев меняется. Чтобы продать мясо нужно иметь лицензию на охоту, которую вы можете приобрести в Правительстве за 15 000$",
  helpIcon: "meat",
  protect: true
}, {
  item_id: 831,
  name: "Мясо Койота",
  type: ITEM_TYPE.SYSTEM,
  weight: 3000,
  base_weight: 0,
  prop: "prop_cs_steak",
  default_count: 1,
  need_group: true,
  canSplit: true,
  helpDesc: "Мясо койота вы можете продать одному из 2 скупщиков (желтая иконка животного на карте). У каждого скупщика своя цена. Скупщик в порту покупает больше мяса и за большую стоимость. Каждый час цена у торговцев меняется. Чтобы продать мясо нужно иметь лицензию на охоту, которую вы можете приобрести в Правительстве за 15 000$",
  helpIcon: "meat",
  protect: true
}, {
  item_id: 832,
  name: "Мясо Оленя",
  type: ITEM_TYPE.SYSTEM,
  weight: 10000,
  base_weight: 0,
  prop: "prop_cs_steak",
  default_count: 1,
  need_group: true,
  canSplit: true,
  helpDesc: "Мясо оленя вы можете продать одному из 2 скупщиков (желтая иконка животного на карте). У каждого скупщика своя цена. Скупщик в порту покупает больше мяса и за большую стоимость. Каждый час цена у торговцев меняется. Чтобы продать мясо нужно иметь лицензию на охоту, которую вы можете приобрести в Правительстве за 15 000$",
  helpIcon: "meat",
  protect: true
}, {
  item_id: 833,
  name: "Мясо Курицы",
  type: ITEM_TYPE.SYSTEM,
  weight: 1000,
  base_weight: 0,
  prop: "prop_cs_steak",
  default_count: 1,
  need_group: true,
  canSplit: true,
  helpDesc: "Мясо курицы вы можете продать одному из 2 скупщиков (желтая иконка животного на карте). У каждого скупщика своя цена. Скупщик в порту покупает больше мяса и за большую стоимость. Каждый час цена у торговцев меняется. Чтобы продать мясо нужно иметь лицензию на охоту, которую вы можете приобрести в Правительстве за 15 000$",
  helpIcon: "meat",
  protect: true
}, {
  item_id: 834,
  name: "Мясо Кролика",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_steak",
  default_count: 1,
  need_group: true,
  canSplit: true,
  helpDesc: "Мясо кролика вы можете продать одному из 2 скупщиков (желтая иконка животного на карте). У каждого скупщика своя цена. Скупщик в порту покупает больше мяса и за большую стоимость. Каждый час цена у торговцев меняется. Чтобы продать мясо нужно иметь лицензию на охоту, которую вы можете приобрести в Правительстве за 15 000$",
  helpIcon: "meat",
  protect: true
}, {
  item_id: 835,
  name: "Мясо Свиньи",
  type: ITEM_TYPE.SYSTEM,
  weight: 7000,
  base_weight: 0,
  prop: "prop_cs_steak",
  default_count: 1,
  need_group: true,
  canSplit: true,
  helpDesc: "Мясо свиньи вы можете продать одному из 2 скупщиков (желтая иконка животного на карте). У каждого скупщика своя цена. Скупщик в порту покупает больше мяса и за большую стоимость. Каждый час цена у торговцев меняется. Чтобы продать мясо нужно иметь лицензию на охоту, которую вы можете приобрести в Правительстве за 15 000$",
  helpIcon: "meat",
  protect: true
}, {
  item_id: 836,
  name: "Мясо Пумы",
  type: ITEM_TYPE.SYSTEM,
  weight: 4500,
  base_weight: 0,
  prop: "prop_cs_steak",
  default_count: 1,
  need_group: true,
  canSplit: true,
  helpDesc: "Мясо пумы вы можете продать одному из 2 скупщиков (желтая иконка животного на карте). У каждого скупщика своя цена. Скупщик в порту покупает больше мяса и за большую стоимость. Каждый час цена у торговцев меняется. Чтобы продать мясо нужно иметь лицензию на охоту, которую вы можете приобрести в Правительстве за 15 000$",
  helpIcon: "meat",
  protect: true
}, {
  item_id: 849,
  name: "Легкий бронежилет",
  type: ITEM_TYPE.OTHER,
  weight: 5,
  base_weight: 4500,
  prop: "prop_bodyarmour_03",
  default_count: 50,
  use: true,
  defaultCost: 2000
}, {
  item_id: 850,
  name: "Телефон",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 450,
  prop: "prop_amb_phone",
  default_count: 1,
  use: true,
  defaultCost: 2200,
  helpIcon: 'phone',
  helpDesc: 'Чтобы начать пользоваться телефоном, вам нужно купить и активировать сим карту, нажав "Использовать". Для удобства, перенесите телефон в слот быстрого доступа в инвентаре, после чего вы сможете быстро открыть или закрыть телефон, нажимая на выбранную клавишу.',
  protect: true
}, {
  item_id: 851,
  name: "Сим карта",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "ch_prop_vault_key_card_01a",
  default_count: 1,
  use: true,
  defaultCost: 100,
  helpIcon: 'sim-card',
  helpDesc: 'Чтобы начать пользоваться телефоном, в инвентаре вам нужно активировать сим карту, нажав "Использовать" на нее.',
  protect: true
}, {
  item_id: 852,
  name: "Рация",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 550,
  prop: "prop_cs_hand_radio",
  default_count: 1,
  use: true,
  defaultCost: 1000,
  protect: true
}, {
  item_id: 853,
  name: "Cherry Portable",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 550,
  prop: "hei_bank_heist_laptop",
  default_count: 1,
  use: true
}, {
  item_id: 854,
  name: "Самодельная взрывчатка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5400,
  prop: "ch_prop_ch_ld_bomb_01a",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 855,
  name: "Обычная удочка",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 2500,
  prop: "prop_fishing_rod_02",
  default_count: 1,
  defaultCost: 5000,
  use: true
}, {
  item_id: 856,
  name: "Планшет",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 800,
  prop: "xm_prop_x17_tablet_01",
  default_count: 1,
  defaultCost: 2500,
  protect: true,
  use: true,
  helpIcon: 'tablet',
  helpDesc: 'Для удобства использования планшета перенесите его в быстрый доступ на удобный вам слот в инвентаре. Чтобы открыть его, нажимайте по выбранной клавише быстрого доступа, чтобы закрыть нажмите ESC'
}, {
  item_id: 857,
  name: "Тротил",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 800,
  prop: "ch_prop_ch_explosive_01a",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 858,
  name: "Провода",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 800,
  prop: "prop_ld_cable_tie_01",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 859,
  name: "Электронная плата",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 800,
  prop: "prop_prototype_minibomb",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 860,
  name: "Бронежилет",
  type: ITEM_TYPE.OTHER,
  weight: 10,
  base_weight: 9000,
  prop: "prop_bodyarmour_03",
  default_count: 100,
  use: true,
  defaultCost: 4000
}, {
  item_id: 861,
  name: "Бумажник",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  defaultCost: 1500,
  protect: true,
  use: true
}, {
  item_id: 862,
  name: "Аккумулятор для электромобиля",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10000,
  prop: "prop_ld_jerrycan_01",
  default_count: 15,
  use: true,
  defaultCost: 10000,
  protect: true
}, {
  item_id: 863,
  name: "Найденная сумка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 1000,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  protect: true
}, {
  item_id: 864,
  name: "Семейный груз",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10000,
  prop: "prop_onyx_box",
  default_count: 1,
  protect: true
}, {
  item_id: 865,
  name: "Противоугонная система",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 1000,
  prop: "w_ar_railgun_mag1",
  default_count: 1,
  use: true,
  defaultCost: 5000,
  protect: true
}, {
  item_id: 866,
  name: "Бонусный купон",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true,
  blockMove: true
}, {
  item_id: 867,
  name: "Сумка",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 15000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 868,
  name: "Фейерверк",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 2000,
  prop: "ind_prop_firework_03",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 15000
}, {
  item_id: 869,
  name: "Цветы",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 2000,
  prop: "pp_flowersbucket",
  default_count: 1,
  use: true,
  inHand: true,
  defaultCost: 5000,
  propAttachParam: [0.135, -0.060, 0.065, 242, 0, 0]
}, {
  item_id: 870,
  name: "Розовый дилдо",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_dildo_01",
  default_count: 1,
  use: true,
  inHand: true,
  defaultCost: 5000,
  propAttachParam: [0.130, 0.050, -0.005, 66, 159, 0],
  protect: true
}, {
  item_id: 871,
  name: "Плюшевый мишка",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1000,
  prop: "prop_mr_rasberryclean",
  default_count: 1,
  use: true,
  inHand: true,
  defaultCost: 25000,
  propAttachParam: [-0.015, 0.150, -0.050, 186, 271, 0],
  protect: true
}, {
  item_id: 872,
  name: "Корпус",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  protect: true
}, {
  item_id: 873,
  name: "Ствол",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 874,
  name: "Затвор",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  protect: true
}, {
  item_id: 875,
  name: "Прицел",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  protect: true
}, {
  item_id: 876,
  name: "Курок",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  protect: true
}, {
  item_id: 877,
  name: "Боёк",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  protect: true
}, {
  item_id: 878,
  name: "Патронник",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 300,
  prop: "prop_bodyarmour_03",
  default_count: 1,
  protect: true
}, {
  item_id: 879,
  name: "Плоды винограда",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 200,
  prop: "prop_grapes_01",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 880,
  name: "Ганджубас",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 100,
  prop: "bkr_prop_weed_smallbag_01a",
  default_count: 1,
  use: false,
  need_group: true,
  canSplit: true
}, {
  item_id: 881,
  name: "Виноградный сок",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1000,
  prop: "prop_wine_red",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 882,
  name: "Бутылки с вином",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1500,
  prop: "winerow",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 883,
  name: "Листва",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 5,
  prop: "ng_proc_leaves05",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 884,
  name: "Био топливо",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1000,
  prop: "v_ind_cs_jerrycan02",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 885,
  name: "Каменая порода",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 15000,
  prop: "rock_4_cl_2_1",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 886,
  name: "Порода содежащяя серебро",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 15000,
  prop: "rock_4_cl_2_1",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 887,
  name: "Золото содержащяя порода",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 15000,
  prop: "rock_4_cl_2_1",
  default_count: 1,
  use: false,
  protect: true
}, {
  item_id: 888,
  name: "Большой чёрный дилдо",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1000,
  prop: "v_res_d_dildo_f",
  default_count: 1,
  use: true,
  inHand: true,
  defaultCost: 15000,
  propAttachParam: [0.130, 0.050, -0.005, 66, 159, 0],
  protect: true
}, {
  item_id: 889,
  name: "Микрофон",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 3000,
  prop: "v_microphone",
  default_count: 1,
  defaultCost: 10000,
  protect: true
}, {
  item_id: 890,
  name: "Нож для разделки",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "prop_cs_bowie_knife",
  default_count: 1,
  protect: true,
  use: true,
  inHand: true,
  defaultCost: 10000,
  propAttachParam: [0.130, 0.050, -0.005, 252, 19, 0],
  helpDesc: "Этот нож используется для разделки туши животного. Животных можно найти в зонах охоты. Существует всего 5 зон охоты все они показаны на карте.",
  helpIcon: "knife"
}, {
  item_id: 891,
  name: "Костёр",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 600,
  prop: "prop_beach_fire",
  default_count: 1,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 892,
  name: "Палатка",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1000,
  prop: "prop_skid_tent_01",
  default_count: 1,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 893,
  name: "Стул",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "prop_chaircamp",
  default_count: 1,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 894,
  name: "Музыкальный плеер",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 1000,
  prop: "prop_tapeplayer_01",
  default_count: 1,
  use: true,
  helpDesc: 'Используйте бумбокс в инвентаре (ПКМ - Использовать). Теперь вы можете слушать свою музыку и включать ее окружающим. Для того чтобы убрать проигрыватель, в интерфейсе имеется кнопка "забрать плеер"',
  helpIcon: "boombox",
  defaultCost: 10000,
  protect: true
}, {
  item_id: 895,
  name: "Трава",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "bkr_prop_weed_smallbag_01a",
  default_count: 1,
  protect: true
}, {
  item_id: 896,
  name: "Силос",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "bkr_prop_weed_smallbag_01a",
  default_count: 1,
  protect: true
}, {
  item_id: 897,
  name: "Рыба для суши",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "prop_cs_steak",
  default_count: 1,
  protect: true
}, {
  item_id: 898,
  name: "Суши",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "prop_cs_steak",
  default_count: 1,
  protect: true
}, {
  item_id: 899,
  name: "Ключ от наручников",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 50,
  prop: "prop_cuff_keys_01",
  default_count: 1
}, {
  item_id: 900,
  name: "Антипохмелин",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "prop_cs_pills",
  default_count: 1,
  use: true,
  count_use: 1,
  defaultCost: 120,
  need_group: true,
  canSplit: true,
  protect: true
}, {
  item_id: 901,
  name: "Обезболивающие",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "ex_office_swag_pills2",
  default_count: 1,
  use: true,
  count_use: 1,
  defaultCost: 150,
  need_group: true,
  canSplit: true,
  protect: true
}, {
  item_id: 902,
  name: "Аптечка",
  type: ITEM_TYPE.MEDICATION,
  weight: 350,
  base_weight: 10,
  prop: "prop_ld_health_pack",
  default_count: 1,
  use: true,
  need_group: true,
  defaultCost: 500,
  canSplit: true,
  healUse: 100,
  protect: true
}, {
  item_id: 903,
  name: "Набор таблеток",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "ex_office_swag_pills3",
  default_count: 1,
  count_use: 1,
  defaultCost: 500,
  need_group: true,
  canSplit: true,
  use: true,
  protect: true
}, {
  item_id: 904,
  name: "Антибиотик",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "ex_office_swag_pills2",
  default_count: 1,
  use: true,
  count_use: 1,
  defaultCost: 300,
  need_group: true,
  canSplit: true,
  protect: true
}, {
  item_id: 905,
  name: "Шприц с обезболивающим",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "prop_syringe_01",
  default_count: 1,
  need_group: true,
  defaultCost: 150,
  canSplit: true,
  protect: true
}, {
  item_id: 906,
  name: "Медицинский набор",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "prop_cs_package_01",
  default_count: 1,
  need_group: true,
  defaultCost: 150,
  canSplit: true,
  protect: true
}, {
  item_id: 907,
  name: "Бинты",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "p_w_ar_musket_chrg",
  default_count: 1,
  need_group: true,
  defaultCost: 125,
  canSplit: true,
  healUse: 25,
  use: true,
  protect: true
}, {
  item_id: 908,
  name: "Красная аптечка",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "prop_ld_health_pack2",
  default_count: 1,
  need_group: true,
  defaultCost: 200,
  canSplit: true,
  healUse: 50,
  use: true,
  protect: true
}, {
  item_id: 909,
  name: "Активированный уголь",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "p_w_ar_musket_chrg",
  default_count: 1,
  need_group: true,
  defaultCost: 150,
  canSplit: true,
  use: true,
  protect: true
}, {
  item_id: 910,
  name: "Эпинефрин",
  type: ITEM_TYPE.MEDICATION,
  weight: 1,
  base_weight: 5,
  prop: "p_w_ar_musket_chrg",
  default_count: 1,
  need_group: true,
  defaultCost: 7000,
  canSplit: true,
  use: true,
  protect: true
}, {
  item_id: 949,
  name: "Перчатки",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 100,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 950,
  name: "Маска",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 500,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 951,
  name: "Торс",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 1500,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 952,
  name: "Ноги",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 800,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 953,
  name: "Обувь",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 800,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 954,
  name: "Головные уборы",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 400,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 955,
  name: "Очки",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 300,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 956,
  name: "Уши",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 200,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 957,
  name: "Часы",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 200,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 958,
  name: "Аксессуары",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 100,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 959,
  name: "Браслеты",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 150,
  prop: "bkr_prop_duffel_bag_01a",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 960,
  name: "Бронежилет",
  type: ITEM_TYPE.CLOTH,
  weight: 0,
  base_weight: 4500,
  prop: "prop_bodyarmour_03",
  default_count: 100,
  use: true,
  protect: false,
  blockHotkey: true,
  defaultCost: 2500
}, {
  item_id: 1003,
  name: "Прицел Макро",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 150,
  prop: "w_at_scope_macro",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 2000
}, {
  item_id: 1004,
  name: "Прицел Малый",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 160,
  prop: "w_at_scope_small",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3500
}, {
  item_id: 1005,
  name: "Прицел Средний",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 170,
  prop: "w_at_scope_medium",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1006,
  name: "Прицел Большой",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 180,
  prop: "w_at_scope_large",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 6500
}, {
  item_id: 1007,
  name: "Прицел Максимальный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 350,
  prop: "w_at_scope_max",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 8000
}, {
  item_id: 1008,
  name: "Прицел Голографический",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_sights_1",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 2000
}, {
  item_id: 1009,
  name: "Прицел Ночного виденья",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_scope_nv",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 15000
}, {
  item_id: 1010,
  name: "Прицел Термальный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 650,
  prop: "w_at_scope_nv",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 15000
}, {
  item_id: 1100,
  name: "Глушитель Крупный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 300,
  prop: "w_at_ar_supp",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 7000
}, {
  item_id: 1101,
  name: "Рукоятка",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 150,
  prop: "w_at_afgrip_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1102,
  name: "Фонарик",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 300,
  prop: "w_me_flashlight_flash",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 1301,
  name: "Глушитель Тяжёлый",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 500,
  prop: "w_at_sr_supp",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 9000
}, {
  item_id: 1401,
  name: "Глушитель Маленький",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 250,
  prop: "w_at_pi_supp",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1403,
  name: "Компенсатор",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_pi_comp_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3500
}, {
  item_id: 1404,
  name: "Прицел Монтированый",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 150,
  prop: "w_at_pi_rail_1",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 2000
}, {
  item_id: 1501,
  name: "ДТ Плоский",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_1",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3000
}, {
  item_id: 1502,
  name: "ДТ Тактический",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3100
}, {
  item_id: 1503,
  name: "ДТ Жирный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_3",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3200
}, {
  item_id: 1504,
  name: "ДТ Высокоточный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_4",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3300
}, {
  item_id: 1505,
  name: "ДТ Устойчивый",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_5",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3400
}, {
  item_id: 1506,
  name: "ДТ Наклонный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_6",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3500
}, {
  item_id: 1507,
  name: "ДТ Разъемный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_7",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3600
}, {
  item_id: 1508,
  name: "ДТ Квадратный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_8",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3700
}, {
  item_id: 1509,
  name: "ДТ Bell-End",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 200,
  prop: "w_at_muzzle_9",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 3800
}, {
  item_id: 1601,
  name: "Ствол усиленный",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 4800
}, {
  item_id: 1603,
  name: "Зеленый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 10000
}, {
  item_id: 1604,
  name: "Золотой камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 1605,
  name: "Розовый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 40000
}, {
  item_id: 1606,
  name: "Военный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 15000
}, {
  item_id: 1607,
  name: "LSPD камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 10000
}, {
  item_id: 1608,
  name: "Оранжевый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 15000
}, {
  item_id: 1609,
  name: "Платиновый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 45000
}, {
  item_id: 1611,
  name: "Классический серый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1612,
  name: "Классический двухцветный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 25000
}, {
  item_id: 1613,
  name: "Классический белый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 30000
}, {
  item_id: 1614,
  name: "Классический бежевый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1615,
  name: "Классический зеленый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1616,
  name: "Классический голубой камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 6000
}, {
  item_id: 1617,
  name: "Классический земляной камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1618,
  name: "Классический коричневый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1619,
  name: "Красный контрастный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 5000
}, {
  item_id: 1620,
  name: "Голубой контрастный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 7000
}, {
  item_id: 1621,
  name: "Желтый контрастный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 20000
}, {
  item_id: 1622,
  name: "Оранжевый контрастный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 12000
}, {
  item_id: 1623,
  name: "Розовый контрастный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 30000
}, {
  item_id: 1624,
  name: "Фиолетово-желтый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 60000
}, {
  item_id: 1625,
  name: "Оранжевый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 1626,
  name: "Зелено-фиолетовый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 55000
}, {
  item_id: 1627,
  name: "Черно-красный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 1628,
  name: "Черно-зеленый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 1629,
  name: "Черно-голубой камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 1630,
  name: "Черно-желтый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 1631,
  name: "Красно-белый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 1632,
  name: "Бело-голубой камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 90000
}, {
  item_id: 1633,
  name: "Металлический золотой камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 120000
}, {
  item_id: 1634,
  name: "Металлический платиновый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 90000
}, {
  item_id: 1635,
  name: "Металлический сиренево-серый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 35000
}, {
  item_id: 1636,
  name: "Металлический лаймово-фиолетовый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 90000
}, {
  item_id: 1637,
  name: "Металлический красный камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 85000
}, {
  item_id: 1638,
  name: "Металлический зеленый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 80000
}, {
  item_id: 1639,
  name: "Металлический голубой камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 1640,
  name: "Металлический аква белый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 120000
}, {
  item_id: 1641,
  name: "Металлический красно-желтый камуфляж",
  type: ITEM_TYPE.WEAPON_ADDON,
  weight: 0,
  base_weight: 600,
  prop: "w_at_sb_barrel_2",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 120000
}, {
  item_id: 2000,
  name: "Черный рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2001,
  name: "Серый рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2002,
  name: "Песочный рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2003,
  name: "Зеленый рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2004,
  name: "Зеленый рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2005,
  name: "Оранжевый рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2006,
  name: "Фиолетовый рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2007,
  name: "Розовый рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2008,
  name: "Темно красный рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2009,
  name: "Синий рюкзак",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 2000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2010,
  name: "Черная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2011,
  name: "Голубая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2012,
  name: "Желтая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2013,
  name: "Красная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2014,
  name: "Салатовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2015,
  name: "Оранжевая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2016,
  name: "Фиолетовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2017,
  name: "Розовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2018,
  name: "Красно синяя сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2019,
  name: "Бирюзовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2020,
  name: "Синяя милитари сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2021,
  name: "Травянистая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2022,
  name: "Болотная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2023,
  name: "Песочная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2024,
  name: "Милитари сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2025,
  name: "Белая Bigness сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2026,
  name: "Красная Bigness сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2027,
  name: "Цветочная Bigness сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2028,
  name: "Зеленая Guffy сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2029,
  name: "Розовая Guffy сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2030,
  name: "Берюзово травянистая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2031,
  name: "Серая травянистая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2032,
  name: "Розовая Jackal сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2033,
  name: "Бирюзовая Jackal сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2034,
  name: "Карбоновая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2035,
  name: "Бирюзовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2036,
  name: "Розовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2037,
  name: "Красная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2038,
  name: "Нежно розовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2039,
  name: "Бирюзовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2040,
  name: "Бирюзово салатовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2041,
  name: "Серо желтая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2042,
  name: "Голубовато розовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2043,
  name: "Серая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2044,
  name: "Бирюзовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2045,
  name: "Бирюзовая милитари сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2046,
  name: "Расписная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2047,
  name: "Расписная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2048,
  name: "Расписная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2049,
  name: "Расписная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 7000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2050,
  name: "Рюкзак Adidas серый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2051,
  name: "Рюкзак Adidas розовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2052,
  name: "Рюкзак Adidas красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2053,
  name: "Рюкзак Adidas фиолетовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2054,
  name: "Рюкзак Gucci бежевый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2055,
  name: "Рюкзак Gucci красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2056,
  name: "Рюкзак Gucci серый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2057,
  name: "Рюкзак Gucci черный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2058,
  name: "Черная бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2059,
  name: "Бирюзовая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2060,
  name: "Фиолетовая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2061,
  name: "Красная бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2062,
  name: "Виноградная бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2063,
  name: "Черная сумка конверт",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2064,
  name: "Леопардовая сумка конверт",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2065,
  name: "Белая сумка конверт",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2066,
  name: "Красная сумка конверт",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2067,
  name: "Бежевая сумка конверт",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2068,
  name: "Розовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2069,
  name: "Черная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2070,
  name: "Песочная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2071,
  name: "Розовая сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2072,
  name: "Черная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2073,
  name: "Песочная сумка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2074,
  name: "Черная сумка Louis",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2075,
  name: "Коричневая сумка Louis",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2076,
  name: "Белая сумка Louis",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2077,
  name: "Черная сумка Louis",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2078,
  name: "Коричневая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2079,
  name: "Голубая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2080,
  name: "Бирюзовая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2081,
  name: "Зеленая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2082,
  name: "Красная бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2083,
  name: "Желтая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2084,
  name: "Фиолетовая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2085,
  name: "Черная бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2086,
  name: "Серая бананка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 1000
}, {
  item_id: 2087,
  name: "Рюкзак дьявола красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2088,
  name: "Рюкзак дьявола оранжевый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2089,
  name: "Рюкзак halloween оранжевый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2090,
  name: "Рюкзак halloween красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2091,
  name: "Рюкзак с крыльями красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2092,
  name: "Рюкзак с крыльями оранжевый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2093,
  name: "Бананка halloween оранжевая ",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2094,
  name: "Бананка halloween красная",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2095,
  name: "Бананка halloween розовая",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2096,
  name: "Бананка halloween черно оранжевая",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2097,
  name: "Бананка halloween серая",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2098,
  name: "Рюкзак новогодний олень",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2099,
  name: "Рюкзак новогодний тигр",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2100,
  name: "Рюкзак сердце красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2101,
  name: "Рюкзак сердце синий",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2102,
  name: "Рюкзак сердце бордовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2103,
  name: "Рюкзак сердце черный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2104,
  name: "Рюкзак сердце розовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2105,
  name: "Рюкзак сердце зеленый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2106,
  name: "Рюкзак котик серый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2107,
  name: "Рюкзак котик голубой",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2108,
  name: "Рюкзак котик красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2109,
  name: "Рюкзак котик розовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2110,
  name: "Рюкзак котик фиолетовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2111,
  name: "Рюкзак котик бирюзовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2112,
  name: "Рюкзак котик розовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2113,
  name: "Рюкзак котик бежевый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2114,
  name: "Рюкзак котик с ушками голубой",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2115,
  name: "Рюкзак котик с ушками салатовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2116,
  name: "Рюкзак котик с ушками фиолетовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2117,
  name: "Рюкзак котик с ушками розовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2118,
  name: "Рюкзак котик с ушками серый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2119,
  name: "Рюкзак котик с ушками песочный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2120,
  name: "Сумка ручная гепард",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2121,
  name: "Сумка ручная бело коричневый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2122,
  name: "Сумка ручная бело песочный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2123,
  name: "Сумка ручная красная",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2124,
  name: "Сумка ручная бежевая",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2125,
  name: "Сумка ручная красно белая",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2126,
  name: "Сумка ручная черная",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2127,
  name: "Рюкзак пингвин синий",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2128,
  name: "Рюкзак коровка",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2129,
  name: "Катана какаси",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2130,
  name: "Бананка маршмелло",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2131,
  name: "Рюкзак спортивный белый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2132,
  name: "Рюкзак спортивный черный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2133,
  name: "Рюкзак спортивный синий",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2134,
  name: "Рюкзак спортивный голубой",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2135,
  name: "Рюкзак спортивный бирюзовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2136,
  name: "Рюкзак спортивный оранжевый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2137,
  name: "Рюкзак спортивный красный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2138,
  name: "Рюкзак спортивный оранжевый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2139,
  name: "Рюкзак спортивный зеленый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2140,
  name: "Рюкзак спортивный розовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2141,
  name: "Рюкзак спортивный салатовый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2142,
  name: "Сумочка Gucci",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2143,
  name: "Рюкзак Versace",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2144,
  name: "Рюкзак Nike Черный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2145,
  name: "Рюкзак Nike Белый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2146,
  name: "Рюкзак разгрузочный черный",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 2147,
  name: "Рюкзак разгрузочный белый",
  type: ITEM_TYPE.BAGS,
  weight: 0,
  base_weight: 3000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 3000,
  name: "Криптоключ",
  desc: 'Данный ключ хранит информацию о вашем криптокошельке. Без него невозможны операции Offline',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 100,
  prop: "ch_prop_ch_usb_drive01x",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 150000
}, {
  item_id: 3001,
  name: "Майнинг ферма",
  desc: 'Это стартовый набор, который устанавливается в квартире',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 5000,
  prop: "ba_prop_battle_chest_closed",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 3100,
  name: "GTX 1050",
  desc: 'Видеокарта, предназначенная для майнинг ферм',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_videocard760",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 3101,
  name: "GTX 1060",
  desc: 'Видеокарта, предназначенная для майнинг ферм',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_videocard760",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 3102,
  name: "GTX 1660ti",
  desc: 'Видеокарта, предназначенная для майнинг ферм',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_videocard760",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 120000
}, {
  item_id: 3103,
  name: "GTX 1070",
  desc: 'Видеокарта, предназначенная для майнинг ферм',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_videocard760",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 150000
}, {
  item_id: 3104,
  name: "GTX 1080",
  desc: 'Видеокарта, предназначенная для майнинг ферм',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_videocard760",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 200000
}, {
  item_id: 3105,
  name: "GTX 1080super",
  desc: 'Видеокарта, предназначенная для майнинг ферм',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_videocard760",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 250000
}, {
  item_id: 3200,
  name: "Флешка с ПО (Алгоритм Альфа)",
  desc: 'Флешка с програмным обеспечением для майнинга.',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 35000
}, {
  item_id: 3201,
  name: "Флешка с ПО (Алгоритм Бета)",
  desc: 'Флешка с програмным обеспечением для майнинга.',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 55000
}, {
  item_id: 3202,
  name: "Флешка с ПО (Алгоритм Гамма)",
  desc: 'Флешка с програмным обеспечением для майнинга.',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 85000
}, {
  item_id: 3203,
  name: "Флешка с ПО (Алгоритм Дельта)",
  desc: 'Флешка с програмным обеспечением для майнинга.',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 125000
}, {
  item_id: 3204,
  name: "Флешка с ПО (Алгоритм Эпсилон)",
  desc: 'Флешка с програмным обеспечением для майнинга.',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 200000
}, {
  item_id: 3300,
  name: "Ryzen 5 1600",
  desc: 'Процессор для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 3301,
  name: "Ryzen 5 3600",
  desc: 'Процессор для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 75000
}, {
  item_id: 3302,
  name: "Ryzen 7 3700",
  desc: 'Процессор для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 3303,
  name: "Ryzen 9 5900X",
  desc: 'Процессор для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 150000
}, {
  item_id: 3400,
  name: "Ram 4GB",
  desc: 'Планка оперативной памяти для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 35000
}, {
  item_id: 3401,
  name: "Ram 8GB",
  desc: 'Планка оперативной памяти для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 55000
}, {
  item_id: 3402,
  name: "Ram 16GB",
  desc: 'Планка оперативной памяти для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 95000
}, {
  item_id: 3403,
  name: "Ram 32GB",
  desc: 'Планка оперативной памяти для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "hei_prop_hst_usb_drive",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 125000
}, {
  item_id: 3500,
  name: "Блок питания PowerPC Light",
  desc: 'Блок питания для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_powersupply",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 50000
}, {
  item_id: 3501,
  name: "Блок питания PowerPC Medium",
  desc: 'Блок питания для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_powersupply",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 100000
}, {
  item_id: 3502,
  name: "Блок питания PowerPC Hard",
  desc: 'Блок питания для майнинг фермы',
  type: ITEM_TYPE.MINING,
  weight: 0,
  base_weight: 400,
  prop: "pp_powersupply",
  default_count: 1,
  use: true,
  protect: true,
  defaultCost: 150000
}, {
  item_id: 4000,
  name: "Ткань для бронежилета",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 500,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 4001,
  name: "Передняя пластина бронежилета",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 1000,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 4002,
  name: "Задняя пластина бронежилета",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 1000,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5000,
  name: "Золотые серьги",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5001,
  name: "Золотая цепь",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5002,
  name: "Золотое кольцо",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5003,
  name: "Дорогостоящие часы",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5004,
  name: "Серебрянная статуэтка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5005,
  name: "Старинная ваза",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5006,
  name: "Редкая картина",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5007,
  name: "Серебрянное колье",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5008,
  name: "Ценные бумаги",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5009,
  name: "Колекционный кубок",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5010,
  name: "Редкая монета",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5011,
  name: "Антикварная почтовая марка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5012,
  name: "Колекционная музыкальная пластинка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5013,
  name: "Драгоценный камень",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5014,
  name: "Вино Romanee Conti Grand Cru 1945",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 5015,
  name: "Виски Macallan 1926",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1
}, {
  item_id: 6000,
  name: "Артефакт",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true,
  blockMove: true
}, {
  item_id: 6001,
  name: "Записка Майкла",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true,
  blockMove: true
}, {
  item_id: 6002,
  name: "Олень Санты",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true,
  blockMove: true
}, {
  item_id: 6003,
  name: "Морская ракушка",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true,
  blockMove: true
}, {
  item_id: 6500,
  name: "Акваланг",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 1000,
  prop: "prop_cs_heist_bag_01",
  default_count: 1,
  defaultCost: 40000,
  use: true
}, {
  item_id: 6501,
  name: "Кусок пиратской карты 1",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6502,
  name: "Кусок пиратской карты 2",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6503,
  name: "Кусок пиратской карты 3",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6504,
  name: "Кусок пиратской карты 4",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6505,
  name: "Кусок пиратской карты 5",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6506,
  name: "Кусок пиратской карты 6",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6507,
  name: "Кусок карты сокровищ 1",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6508,
  name: "Кусок карты сокровищ 2",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6509,
  name: "Кусок карты сокровищ 3",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6510,
  name: "Кусок карты сокровищ 4",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6511,
  name: "Кусок карты сокровищ 5",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6512,
  name: "Кусок карты сокровищ 6",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6513,
  name: "Кусок карты лоцмана 1",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6514,
  name: "Кусок карты лоцмана 2",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6515,
  name: "Кусок карты лоцмана 3",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6516,
  name: "Кусок карты лоцмана 4",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6517,
  name: "Кусок карты лоцмана 5",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6518,
  name: "Кусок карты лоцмана 6",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6519,
  name: "Золотой зуб",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6520,
  name: "Золотой самородок",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6521,
  name: "Серебрянная монета",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6522,
  name: "Золотая монета",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6523,
  name: "Перстень",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6524,
  name: "Изумруд",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6525,
  name: "Янтарный слиток",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 10,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6526,
  name: "Пиратская карта",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6527,
  name: "Карта сокровищ",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 6528,
  name: "Карта лоцмана",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 100,
  prop: "prop_cs_documents_01",
  default_count: 1,
  use: true
}, {
  item_id: 7000,
  name: "Семена картофели",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 150
}, {
  item_id: 7001,
  name: "Семена моркови",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 155
}, {
  item_id: 7002,
  name: "Семена помидоров",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 160
}, {
  item_id: 7003,
  name: "Семена огурцов",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 165
}, {
  item_id: 7004,
  name: "Семена редьки",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 170
}, {
  item_id: 7005,
  name: "Семена лука",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 175
}, {
  item_id: 7006,
  name: "Семена клубники",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 230
}, {
  item_id: 7007,
  name: "Семена арбуза",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 200
}, {
  item_id: 7008,
  name: "Семена малины",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 210
}, {
  item_id: 7010,
  name: "Семена черники",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 250
}, {
  item_id: 7011,
  name: "Семена Ели",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 150
}, {
  item_id: 7020,
  name: "Картофель",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7021,
  name: "Морковь",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7022,
  name: "Помидор",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7023,
  name: "Огурец",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7024,
  name: "Редька",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7025,
  name: "Лук",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7026,
  name: "Клубника",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7027,
  name: "Арбуз",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7028,
  name: "Малина",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7030,
  name: "Черника",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 7031,
  name: "Еловое бревно",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 8001,
  name: "Автопилот",
  type: ITEM_TYPE.SYSTEM,
  weight: 0,
  base_weight: 1000,
  prop: "w_ar_railgun_mag1",
  default_count: 1,
  use: true,
  defaultCost: 2500000,
  protect: true
}, {
  item_id: 9000,
  name: "Коровье молоко",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true
}, {
  item_id: 9100,
  name: "Дорогой корм",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 150
}, {
  item_id: 9101,
  name: "Низкосортный корм",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 50
}, {
  item_id: 9102,
  name: "Сбалансированный корм",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 400,
  prop: "ng_proc_food_ornge1a",
  default_count: 1,
  protect: true,
  need_group: true,
  canSplit: true,
  defaultCost: 80
}, {
  item_id: 9200,
  name: "Хорошая удочка",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 2500,
  prop: "prop_fishing_rod_02",
  default_count: 1,
  defaultCost: 10000,
  use: true
}, {
  item_id: 9201,
  name: "Высококачественная удочка",
  type: ITEM_TYPE.OTHER,
  weight: 0,
  base_weight: 2500,
  prop: "prop_fishing_rod_02",
  default_count: 1,
  defaultCost: 20000,
  use: true
}, {
  item_id: 9210,
  name: "Чебак",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 9211,
  name: "Карп",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 9212,
  name: "Окунь",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 9213,
  name: "Щука",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 9214,
  name: "Судак",
  type: ITEM_TYPE.SYSTEM,
  weight: 2000,
  base_weight: 0,
  prop: "prop_cs_brain_chunk",
  default_count: 1,
  need_group: true,
  canSplit: true
}, {
  item_id: 9500,
  name: "Корзинка для сладостей",
  type: ITEM_TYPE.SYSTEM,
  weight: 1,
  prop: "pumpkin_basket",
  default_count: 1,
  propAttachParam: [0.505, -0.090, -0.110, 161, 256, 0],
  inHand: true,
  use: true
}, {
  item_id: 10000,
  name: "Зелье здоровье для карликов",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10001,
  name: "Зелье здоровье для гигантов",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10002,
  name: "Зелье здоровья",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10003,
  name: "Зелье жука броненосца",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10004,
  name: "Зелье богомола",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10005,
  name: "Зелье диванного критика",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10006,
  name: "Зелье неизвестность",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10007,
  name: "Зелье альфа",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10008,
  name: "Зелье маленького таракана",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10009,
  name: "Зелье танцпола",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 10010,
  name: "Зелье Логана",
  type: ITEM_TYPE.POTION,
  weight: 1,
  base_weight: 100,
  prop: "prop_wine_rose",
  default_count: 1,
  use: true,
  protect: true
}, {
  item_id: 15000,
  name: "Ротвеллер",
  type: ITEM_TYPE.ANIMAL,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  blockMove: true,
  protect: true,
  use: true
}, {
  item_id: 15001,
  name: "Хаски",
  type: ITEM_TYPE.ANIMAL,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  blockMove: true,
  protect: true,
  use: true
}, {
  item_id: 15002,
  name: "Пудель",
  type: ITEM_TYPE.ANIMAL,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  blockMove: true,
  protect: true,
  use: true
}, {
  item_id: 15003,
  name: "Мопс",
  type: ITEM_TYPE.ANIMAL,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  blockMove: true,
  protect: true,
  use: true
}, {
  item_id: 15004,
  name: "Шеперд",
  type: ITEM_TYPE.ANIMAL,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  blockMove: true,
  protect: true,
  use: true
}, {
  item_id: 15005,
  name: "Болоньез",
  type: ITEM_TYPE.ANIMAL,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  blockMove: true,
  protect: true,
  use: true
}, {
  item_id: 15006,
  name: "Золотистый ретривер",
  type: ITEM_TYPE.ANIMAL,
  weight: 0,
  base_weight: 5,
  prop: "xm_prop_x17_bag_01d",
  default_count: 1,
  blockMove: true,
  protect: true,
  use: true
}, {
  item_id: 20000,
  name: "Кальян",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 5,
  prop: "kalian",
  default_count: 1,
  use: true
}, {
  item_id: 20001,
  name: "Вейп",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 5,
  prop: "vape",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20002,
  name: "Бонг",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "prop_bong_01",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20010,
  name: "Жижа для вейпа вкус малины",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20011,
  name: "Жижа для вейпа вкус черники",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20012,
  name: "Жижа для вейпа вкус вишни",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20013,
  name: "Жижа для вейпа вкус дыни",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20014,
  name: "Жижа для вейпа вкус клубника арбуз",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20015,
  name: "Жижа для вейпа вкус Mexican",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20016,
  name: "Жижа для вейпа вкус маракуя",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20017,
  name: "Жижа для вейпа вкус манго",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20018,
  name: "Жижа для вейпа вкус грейпфрут",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20019,
  name: "Жижа для вейпа вкус яблоко",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20020,
  name: "Табак для кальяна Darkside Cosmo Flower",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20021,
  name: "Уголь для кальяна",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20030,
  name: "Травка для бонга",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 150,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true,
  need_group: true
}, {
  item_id: 20050,
  name: "Табак для кальяна Darkside Coca Cola",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20051,
  name: "Табак для кальяна Darkside Grapfruit",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20052,
  name: "Табак для кальяна Darkside Mango Lassi",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20053,
  name: "Табак для кальяна Darkside Blueberry Blast",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20054,
  name: "Табак для кальяна Darkside Tropic Ray",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20055,
  name: "Табак для кальяна BlackBurn Green tea",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20056,
  name: "Табак для кальяна BlackBurn Shock Pineapple",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}, {
  item_id: 20057,
  name: "Табак для кальяна BlackBurn Cane Mint",
  type: ITEM_TYPE.SMOKING,
  weight: 0,
  base_weight: 100,
  prop: "ng_proc_paintcan01a_sh",
  default_count: 1,
  protect: true,
  use: true
}];
const AUTO_SOUND_ITEM_ID = exports.AUTO_SOUND_ITEM_ID = 8000;
const HALLOWEEN_BASKET_ITEM_ID = exports.HALLOWEEN_BASKET_ITEM_ID = 9500;
const KEYS_ITEM_ID = exports.KEYS_ITEM_ID = 805;
const weapon_list = exports.weapon_list = [{
  weapon: 500,
  caliber: 5.45,
  ammo_max: 30,
  hash: "weapon_assaultrifle",
  ammo_box: 150,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 2
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO',
      group: 4
    }
  }
}, {
  weapon: 501,
  caliber: 9,
  ammo_max: 12,
  hash: "weapon_pistol",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP_02',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH',
      group: 2
    }
  }
}, {
  weapon: 502,
  caliber: 9,
  ammo_max: 12,
  hash: "weapon_pistol_mk2",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP_02',
      group: 1
    },
    compensator: {
      item_id: 1403,
      hash: 'COMPONENT_AT_PI_COMP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH_02',
      group: 2
    },
    mounted: {
      item_id: 1404,
      hash: 'COMPONENT_AT_PI_RAIL',
      group: 3
    }
  }
}, {
  weapon: 503,
  caliber: 9,
  ammo_max: 12,
  hash: "weapon_combatpistol",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH',
      group: 2
    }
  }
}, {
  weapon: 504,
  caliber: 9,
  ammo_max: 18,
  hash: "weapon_appistol",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH',
      group: 2
    }
  }
}, {
  weapon: 505,
  caliber: 9,
  ammo_max: 9,
  hash: "weapon_pistol50",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH',
      group: 2
    }
  }
}, {
  weapon: 506,
  caliber: 9,
  ammo_max: 6,
  hash: "weapon_snspistol",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 507,
  caliber: 9,
  ammo_max: 6,
  hash: "weapon_snspistol_mk2",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP_02',
      group: 1
    },
    compensator: {
      item_id: 1403,
      hash: 'COMPONENT_AT_PI_COMP_02',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH_03',
      group: 2
    },
    mounted: {
      item_id: 1404,
      hash: 'COMPONENT_AT_PI_RAIL_02',
      group: 3
    }
  }
}, {
  weapon: 508,
  caliber: 9,
  ammo_max: 18,
  hash: "weapon_heavypistol",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH',
      group: 2
    }
  }
}, {
  weapon: 509,
  caliber: 9,
  ammo_max: 7,
  hash: "weapon_vintagepistol",
  ammo_box: 153,
  need_license: true,
  addons: {
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP',
      group: 1
    }
  }
}, {
  weapon: 510,
  caliber: 9,
  ammo_max: 1,
  hash: "weapon_marksmanpistol",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 511,
  caliber: 9,
  ammo_max: 6,
  hash: "weapon_revolver",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 512,
  caliber: 9,
  ammo_max: 6,
  hash: "weapon_revolver_mk2",
  ammo_box: 153,
  need_license: true,
  addons: {
    camo: {
      item_id: 1611,
      hash: 'COMPONENT_REVOLVER_MK2_CAMO_ONYX_01',
      group: 7
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    holographic: {
      item_id: 1008,
      hash: 'COMPONENT_AT_SIGHTS',
      group: 1
    },
    small: {
      item_id: 1004,
      hash: 'COMPONENT_AT_SCOPE_MACRO_MK2',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH',
      group: 2
    },
    compensator: {
      item_id: 1403,
      hash: 'COMPONENT_AT_PI_COMP_03',
      group: 3
    }
  }
}, {
  weapon: 513,
  caliber: 9,
  ammo_max: 6,
  hash: "weapon_doubleaction",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 514,
  caliber: 9,
  ammo_max: 12,
  hash: "weapon_ceramicpistol",
  ammo_box: 153,
  need_license: true,
  addons: {
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_CERAMICPISTOL_SUPP',
      group: 1
    }
  }
}, {
  weapon: 515,
  caliber: 9,
  ammo_max: 6,
  hash: "weapon_navyrevolver",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 516,
  caliber: 9,
  ammo_max: 16,
  hash: "weapon_microsmg",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_PI_FLSH',
      group: 2
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO',
      group: 3
    }
  }
}, {
  weapon: 517,
  caliber: 9,
  ammo_max: 30,
  hash: "weapon_smg",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 518,
  caliber: 9,
  ammo_max: 30,
  hash: "weapon_smg_mk2",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP',
      group: 1
    },
    flashlight: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    holographic: {
      item_id: 1008,
      hash: 'COMPONENT_AT_SIGHTS_SMG',
      group: 3
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO_02_SMG_MK2',
      group: 3
    },
    small: {
      item_id: 1004,
      hash: 'COMPONENT_AT_SCOPE_SMALL_SMG_MK2',
      group: 3
    },
    muzzle_1: {
      item_id: 1501,
      hash: 'COMPONENT_AT_MUZZLE_01',
      group: 1
    },
    muzzle_2: {
      item_id: 1502,
      hash: 'COMPONENT_AT_MUZZLE_02',
      group: 1
    },
    muzzle_3: {
      item_id: 1503,
      hash: 'COMPONENT_AT_MUZZLE_03',
      group: 1
    },
    muzzle_4: {
      item_id: 1504,
      hash: 'COMPONENT_AT_MUZZLE_04',
      group: 1
    },
    muzzle_5: {
      item_id: 1505,
      hash: 'COMPONENT_AT_MUZZLE_05',
      group: 1
    },
    muzzle_6: {
      item_id: 1506,
      hash: 'COMPONENT_AT_MUZZLE_06',
      group: 1
    },
    muzzle_7: {
      item_id: 1507,
      hash: 'COMPONENT_AT_MUZZLE_07',
      group: 1
    },
    barrel_heavy: {
      item_id: 1601,
      hash: 'COMPONENT_AT_SB_BARREL_02',
      group: 1
    }
  }
}, {
  weapon: 519,
  caliber: 9,
  ammo_max: 30,
  hash: "weapon_assaultsmg",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO_02',
      group: 3
    }
  }
}, {
  weapon: 520,
  caliber: 9,
  ammo_max: 30,
  hash: "weapon_combatpdw",
  ammo_box: 153,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    small: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_SMALL',
      group: 3
    }
  }
}, {
  weapon: 521,
  caliber: 9,
  ammo_max: 12,
  hash: "weapon_machinepistol",
  ammo_box: 153,
  need_license: true,
  addons: {
    suppressor: {
      item_id: 1401,
      hash: 'COMPONENT_AT_PI_SUPP',
      group: 1
    }
  }
}, {
  weapon: 522,
  caliber: 9,
  ammo_max: 20,
  hash: "weapon_minismg",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 523,
  caliber: 18.5,
  ammo_max: 8,
  hash: "weapon_pumpshotgun",
  ammo_box: 154,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1301,
      hash: 'COMPONENT_AT_SR_SUPP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    }
  }
}, {
  weapon: 524,
  caliber: 18.5,
  ammo_max: 8,
  hash: "weapon_pumpshotgun_mk2",
  ammo_box: 154,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    holographic: {
      item_id: 1008,
      hash: 'COMPONENT_AT_SIGHTS',
      group: 1
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO_MK2',
      group: 1
    },
    small: {
      item_id: 1004,
      hash: 'COMPONENT_AT_SCOPE_SMALL_MK2',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    suppressor: {
      item_id: 1301,
      hash: 'COMPONENT_AT_SR_SUPP_03',
      group: 3
    },
    muzzle_8: {
      item_id: 1508,
      hash: 'COMPONENT_AT_MUZZLE_08',
      group: 3
    }
  }
}, {
  weapon: 525,
  caliber: 18.5,
  ammo_max: 8,
  hash: "weapon_sawnoffshotgun",
  ammo_box: 154,
  need_license: true
}, {
  weapon: 526,
  caliber: 18.5,
  ammo_max: 8,
  hash: "weapon_assaultshotgun",
  ammo_box: 154,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 3
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 1
    }
  }
}, {
  weapon: 527,
  caliber: 18.5,
  ammo_max: 14,
  hash: "weapon_bullpupshotgun",
  ammo_box: 154,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 3
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 1
    }
  }
}, {
  weapon: 528,
  caliber: 18.5,
  ammo_max: 1,
  hash: "weapon_musket",
  ammo_box: 154,
  need_license: true
}, {
  weapon: 529,
  caliber: 18.5,
  ammo_max: 6,
  hash: "weapon_heavyshotgun",
  ammo_box: 154,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 3
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 1
    }
  }
}, {
  weapon: 530,
  caliber: 18.5,
  ammo_max: 2,
  hash: "weapon_dbshotgun",
  ammo_box: 154,
  need_license: true
}, {
  weapon: 531,
  caliber: 18.5,
  ammo_max: 10,
  hash: "weapon_autoshotgun",
  ammo_box: 154,
  need_license: true
}, {
  weapon: 532,
  caliber: 7.62,
  ammo_max: 30,
  hash: "weapon_assaultrifle_mk2",
  ammo_box: 155,
  need_license: true,
  addons: {
    barrel_heavy: {
      item_id: 1601,
      hash: 'COMPONENT_AT_AR_BARREL_02',
      group: 5
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP_02',
      group: 2
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    holographic: {
      item_id: 1008,
      hash: 'COMPONENT_AT_SIGHTS',
      group: 4
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO_MK2',
      group: 4
    },
    small: {
      item_id: 1005,
      hash: 'COMPONENT_AT_SCOPE_MEDIUM_MK2',
      group: 4
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    },
    muzzle_1: {
      item_id: 1501,
      hash: 'COMPONENT_AT_MUZZLE_01',
      group: 1
    },
    muzzle_2: {
      item_id: 1502,
      hash: 'COMPONENT_AT_MUZZLE_02',
      group: 1
    },
    muzzle_3: {
      item_id: 1503,
      hash: 'COMPONENT_AT_MUZZLE_03',
      group: 1
    },
    muzzle_4: {
      item_id: 1504,
      hash: 'COMPONENT_AT_MUZZLE_04',
      group: 1
    },
    muzzle_5: {
      item_id: 1505,
      hash: 'COMPONENT_AT_MUZZLE_05',
      group: 1
    },
    muzzle_6: {
      item_id: 1506,
      hash: 'COMPONENT_AT_MUZZLE_06',
      group: 1
    },
    muzzle_7: {
      item_id: 1507,
      hash: 'COMPONENT_AT_MUZZLE_07',
      group: 1
    }
  }
}, {
  weapon: 533,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_carbinerifle",
  ammo_box: 151,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 4
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    small: {
      item_id: 1005,
      hash: 'COMPONENT_AT_SCOPE_MEDIUM',
      group: 2
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 1
    }
  }
}, {
  weapon: 534,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_carbinerifle_mk2",
  ammo_box: 151,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    barrel_heavy: {
      item_id: 1601,
      hash: 'COMPONENT_AT_CR_BARREL_02',
      group: 5
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP_02',
      group: 2
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    holographic: {
      item_id: 1008,
      hash: 'COMPONENT_AT_SIGHTS',
      group: 4
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO_MK2',
      group: 4
    },
    small: {
      item_id: 1005,
      hash: 'COMPONENT_AT_SCOPE_MEDIUM_MK2',
      group: 4
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 1
    },
    muzzle_1: {
      item_id: 1501,
      hash: 'COMPONENT_AT_MUZZLE_01',
      group: 1
    },
    muzzle_2: {
      item_id: 1502,
      hash: 'COMPONENT_AT_MUZZLE_02',
      group: 1
    },
    muzzle_3: {
      item_id: 1503,
      hash: 'COMPONENT_AT_MUZZLE_03',
      group: 1
    },
    muzzle_4: {
      item_id: 1504,
      hash: 'COMPONENT_AT_MUZZLE_04',
      group: 1
    },
    muzzle_5: {
      item_id: 1505,
      hash: 'COMPONENT_AT_MUZZLE_05',
      group: 1
    },
    muzzle_6: {
      item_id: 1506,
      hash: 'COMPONENT_AT_MUZZLE_06',
      group: 1
    },
    muzzle_7: {
      item_id: 1507,
      hash: 'COMPONENT_AT_MUZZLE_07',
      group: 1
    }
  }
}, {
  weapon: 535,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_advancedrifle",
  ammo_box: 151,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    small: {
      item_id: 1004,
      hash: 'COMPONENT_AT_SCOPE_SMALL',
      group: 4
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 1
    }
  }
}, {
  weapon: 536,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_specialcarbine",
  ammo_box: 151,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    small: {
      item_id: 1005,
      hash: 'COMPONENT_AT_SCOPE_MEDIUM',
      group: 4
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 5
    }
  }
}, {
  weapon: 537,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_specialcarbine_mk2",
  ammo_box: 151,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    barrel_heavy: {
      item_id: 1601,
      hash: 'COMPONENT_AT_SC_BARREL_02',
      group: 5
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP_02',
      group: 2
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    holographic: {
      item_id: 1008,
      hash: 'COMPONENT_AT_SIGHTS',
      group: 4
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO_MK2',
      group: 4
    },
    small: {
      item_id: 1005,
      hash: 'COMPONENT_AT_SCOPE_MEDIUM_MK2',
      group: 4
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    },
    muzzle_1: {
      item_id: 1501,
      hash: 'COMPONENT_AT_MUZZLE_01',
      group: 1
    },
    muzzle_2: {
      item_id: 1502,
      hash: 'COMPONENT_AT_MUZZLE_02',
      group: 1
    },
    muzzle_3: {
      item_id: 1503,
      hash: 'COMPONENT_AT_MUZZLE_03',
      group: 1
    },
    muzzle_4: {
      item_id: 1504,
      hash: 'COMPONENT_AT_MUZZLE_04',
      group: 1
    },
    muzzle_5: {
      item_id: 1505,
      hash: 'COMPONENT_AT_MUZZLE_05',
      group: 1
    },
    muzzle_6: {
      item_id: 1506,
      hash: 'COMPONENT_AT_MUZZLE_06',
      group: 1
    },
    muzzle_7: {
      item_id: 1507,
      hash: 'COMPONENT_AT_MUZZLE_07',
      group: 1
    }
  }
}, {
  weapon: 538,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_bullpuprifle",
  ammo_box: 151,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    small: {
      item_id: 1004,
      hash: 'COMPONENT_AT_SCOPE_SMALL',
      group: 4
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 1
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 5
    }
  }
}, {
  weapon: 539,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_bullpuprifle_mk2",
  ammo_box: 151,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    barrel_heavy: {
      item_id: 1601,
      hash: 'COMPONENT_AT_BP_BARREL_02',
      group: 5
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP_02',
      group: 2
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 3
    },
    holographic: {
      item_id: 1008,
      hash: 'COMPONENT_AT_SIGHTS',
      group: 4
    },
    makro: {
      item_id: 1003,
      hash: 'COMPONENT_AT_SCOPE_MACRO_02_MK2',
      group: 4
    },
    small: {
      item_id: 1004,
      hash: 'COMPONENT_AT_SCOPE_SMALL_MK2',
      group: 4
    },
    suppressor: {
      item_id: 1100,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 1
    },
    muzzle_1: {
      item_id: 1501,
      hash: 'COMPONENT_AT_MUZZLE_01',
      group: 1
    },
    muzzle_2: {
      item_id: 1502,
      hash: 'COMPONENT_AT_MUZZLE_02',
      group: 1
    },
    muzzle_3: {
      item_id: 1503,
      hash: 'COMPONENT_AT_MUZZLE_03',
      group: 1
    },
    muzzle_4: {
      item_id: 1504,
      hash: 'COMPONENT_AT_MUZZLE_04',
      group: 1
    },
    muzzle_5: {
      item_id: 1505,
      hash: 'COMPONENT_AT_MUZZLE_05',
      group: 1
    },
    muzzle_6: {
      item_id: 1506,
      hash: 'COMPONENT_AT_MUZZLE_06',
      group: 1
    },
    muzzle_7: {
      item_id: 1507,
      hash: 'COMPONENT_AT_MUZZLE_07',
      group: 1
    }
  }
}, {
  weapon: 540,
  caliber: 5.45,
  ammo_max: 30,
  hash: "weapon_compactrifle",
  ammo_box: 150,
  need_license: true
}, {
  weapon: 541,
  caliber: 7.62,
  ammo_max: 70,
  hash: "weapon_mg",
  ammo_box: 155,
  need_license: true
}, {
  weapon: 542,
  caliber: 7.62,
  ammo_max: 100,
  hash: "weapon_combatmg",
  ammo_box: 155,
  need_license: true
}, {
  weapon: 543,
  caliber: 7.62,
  ammo_max: 70,
  hash: "weapon_combatmg_mk2",
  ammo_box: 155,
  need_license: true
}, {
  weapon: 544,
  caliber: 7.62,
  ammo_max: 55,
  hash: "weapon_gusenberg",
  ammo_box: 155,
  need_license: true
}, {
  weapon: 545,
  caliber: 12.7,
  ammo_max: 10,
  hash: "weapon_sniperrifle",
  ammo_box: 152,
  need_license: true,
  addons: {
    suppressor: {
      item_id: 1301,
      hash: 'COMPONENT_AT_AR_SUPP_02',
      group: 1
    }
  }
}, {
  weapon: 546,
  caliber: 12.7,
  ammo_max: 6,
  hash: "weapon_heavysniper",
  ammo_box: 152,
  need_license: true
}, {
  weapon: 547,
  caliber: 12.7,
  ammo_max: 6,
  hash: "weapon_heavysniper_mk2",
  ammo_box: 152,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    suppressor: {
      item_id: 1301,
      hash: 'COMPONENT_AT_SR_SUPP_03',
      group: 1
    },
    makro: {
      item_id: 1006,
      hash: 'COMPONENT_AT_SCOPE_LARGE_MK2',
      group: 2
    },
    small: {
      item_id: 1007,
      hash: 'COMPONENT_AT_SCOPE_MAX',
      group: 2
    },
    nv: {
      item_id: 1009,
      hash: 'COMPONENT_AT_SCOPE_NV',
      group: 2
    },
    thermal: {
      item_id: 1010,
      hash: 'COMPONENT_AT_SCOPE_THERMAL',
      group: 2
    },
    muzzle_8: {
      item_id: 1508,
      hash: 'COMPONENT_AT_MUZZLE_08',
      group: 1
    },
    muzzle_9: {
      item_id: 1509,
      hash: 'COMPONENT_AT_MUZZLE_09',
      group: 1
    },
    barrel_heavy: {
      item_id: 1601,
      hash: 'COMPONENT_AT_SR_BARREL_02',
      group: 3
    }
  }
}, {
  weapon: 548,
  caliber: 12.7,
  ammo_max: 8,
  hash: "weapon_marksmanrifle",
  ammo_box: 152,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1603,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1604,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1605,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1606,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1607,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1608,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1609,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    suppressor: {
      item_id: 1301,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP',
      group: 3
    }
  }
}, {
  weapon: 549,
  caliber: 12.7,
  ammo_max: 8,
  hash: "weapon_marksmanrifle_mk2",
  ammo_box: 152,
  need_license: true,
  addons: {
    tint_1: {
      item_id: 1611,
      hash: 'WEAPON_TINT1',
      group: 6
    },
    tint_2: {
      item_id: 1612,
      hash: 'WEAPON_TINT2',
      group: 6
    },
    tint_3: {
      item_id: 1613,
      hash: 'WEAPON_TINT3',
      group: 6
    },
    tint_4: {
      item_id: 1614,
      hash: 'WEAPON_TINT4',
      group: 6
    },
    tint_5: {
      item_id: 1615,
      hash: 'WEAPON_TINT5',
      group: 6
    },
    tint_6: {
      item_id: 1616,
      hash: 'WEAPON_TINT6',
      group: 6
    },
    tint_7: {
      item_id: 1617,
      hash: 'WEAPON_TINT7',
      group: 6
    },
    tint_8: {
      item_id: 1618,
      hash: 'WEAPON_TINT8',
      group: 6
    },
    tint_9: {
      item_id: 1619,
      hash: 'WEAPON_TINT9',
      group: 6
    },
    tint_10: {
      item_id: 1620,
      hash: 'WEAPON_TINT10',
      group: 6
    },
    tint_11: {
      item_id: 1621,
      hash: 'WEAPON_TINT11',
      group: 6
    },
    tint_12: {
      item_id: 1622,
      hash: 'WEAPON_TINT12',
      group: 6
    },
    tint_13: {
      item_id: 1623,
      hash: 'WEAPON_TINT13',
      group: 6
    },
    tint_14: {
      item_id: 1624,
      hash: 'WEAPON_TINT14',
      group: 6
    },
    tint_15: {
      item_id: 1625,
      hash: 'WEAPON_TINT15',
      group: 6
    },
    tint_16: {
      item_id: 1626,
      hash: 'WEAPON_TINT16',
      group: 6
    },
    tint_17: {
      item_id: 1627,
      hash: 'WEAPON_TINT17',
      group: 6
    },
    tint_18: {
      item_id: 1628,
      hash: 'WEAPON_TINT18',
      group: 6
    },
    tint_19: {
      item_id: 1629,
      hash: 'WEAPON_TINT19',
      group: 6
    },
    tint_20: {
      item_id: 1630,
      hash: 'WEAPON_TINT20',
      group: 6
    },
    tint_21: {
      item_id: 1631,
      hash: 'WEAPON_TINT21',
      group: 6
    },
    tint_22: {
      item_id: 1632,
      hash: 'WEAPON_TINT22',
      group: 6
    },
    tint_23: {
      item_id: 1633,
      hash: 'WEAPON_TINT23',
      group: 6
    },
    tint_24: {
      item_id: 1634,
      hash: 'WEAPON_TINT24',
      group: 6
    },
    tint_25: {
      item_id: 1635,
      hash: 'WEAPON_TINT25',
      group: 6
    },
    tint_26: {
      item_id: 1636,
      hash: 'WEAPON_TINT26',
      group: 6
    },
    tint_27: {
      item_id: 1637,
      hash: 'WEAPON_TINT27',
      group: 6
    },
    tint_28: {
      item_id: 1638,
      hash: 'WEAPON_TINT28',
      group: 6
    },
    tint_29: {
      item_id: 1639,
      hash: 'WEAPON_TINT29',
      group: 6
    },
    tint_30: {
      item_id: 1640,
      hash: 'WEAPON_TINT30',
      group: 6
    },
    tint_31: {
      item_id: 1641,
      hash: 'WEAPON_TINT31',
      group: 6
    },
    suppressor: {
      item_id: 1301,
      hash: 'COMPONENT_AT_AR_SUPP',
      group: 1
    },
    flashlight: {
      item_id: 1102,
      hash: 'COMPONENT_AT_AR_FLSH',
      group: 2
    },
    muzzle_1: {
      item_id: 1501,
      hash: 'COMPONENT_AT_MUZZLE_01',
      group: 1
    },
    muzzle_2: {
      item_id: 1502,
      hash: 'COMPONENT_AT_MUZZLE_02',
      group: 1
    },
    muzzle_3: {
      item_id: 1503,
      hash: 'COMPONENT_AT_MUZZLE_03',
      group: 1
    },
    muzzle_4: {
      item_id: 1504,
      hash: 'COMPONENT_AT_MUZZLE_04',
      group: 1
    },
    muzzle_5: {
      item_id: 1505,
      hash: 'COMPONENT_AT_MUZZLE_05',
      group: 1
    },
    muzzle_6: {
      item_id: 1506,
      hash: 'COMPONENT_AT_MUZZLE_06',
      group: 1
    },
    muzzle_7: {
      item_id: 1507,
      hash: 'COMPONENT_AT_MUZZLE_07',
      group: 1
    },
    barrel_heavy: {
      item_id: 1601,
      hash: 'COMPONENT_AT_MRFL_BARREL_02',
      group: 3
    },
    grip: {
      item_id: 1101,
      hash: 'COMPONENT_AT_AR_AFGRIP_02',
      group: 3
    }
  }
}, {
  weapon: 550,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_stungun",
  ammo_box: null,
  need_license: true
}, {
  weapon: 551,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_bat",
  ammo_box: null,
  need_license: true
}, {
  weapon: 552,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_knife",
  ammo_box: null,
  need_license: true
}, {
  weapon: 553,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_nightstick",
  ammo_box: null,
  need_license: true
}, {
  weapon: 554,
  caliber: 12.7,
  ammo_max: 1,
  hash: "weapon_firework",
  ammo_box: 152,
  need_license: true
}, {
  weapon: 555,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_flashlight",
  ammo_box: null
}, {
  weapon: 556,
  caliber: 12.7,
  ammo_max: 0,
  hash: "weapon_raypistol",
  ammo_box: null
}, {
  weapon: 557,
  caliber: 12.7,
  ammo_max: 0,
  hash: "weapon_rayminigun",
  ammo_box: null
}, {
  weapon: 558,
  caliber: 12.7,
  ammo_max: 0,
  hash: "weapon_railgun",
  ammo_box: null
}, {
  weapon: 559,
  caliber: 12.7,
  ammo_max: 0,
  hash: "weapon_compactlauncher",
  ammo_box: null
}, {
  weapon: 560,
  caliber: null,
  ammo_max: 999,
  hash: "weapon_fireextinguisher",
  ammo_box: 156
}, {
  weapon: 561,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_bottle",
  ammo_box: null,
  need_license: true
}, {
  weapon: 562,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_crowbar",
  ammo_box: null,
  need_license: true
}, {
  weapon: 563,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_hammer",
  ammo_box: null,
  need_license: true
}, {
  weapon: 564,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_hatchet",
  ammo_box: null,
  need_license: true
}, {
  weapon: 565,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_knuckle",
  ammo_box: null,
  need_license: true
}, {
  weapon: 566,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_machete",
  ammo_box: null,
  need_license: true
}, {
  weapon: 567,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_wrench",
  ammo_box: null,
  need_license: true
}, {
  weapon: 568,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_battleaxe",
  ammo_box: null,
  need_license: true
}, {
  weapon: 569,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_poolcue",
  ammo_box: null,
  need_license: true
}, {
  weapon: 570,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_stone_hatchet",
  ammo_box: null,
  need_license: true
}, {
  weapon: 571,
  caliber: 5.56,
  ammo_max: 30,
  hash: "weapon_militaryrifle",
  ammo_box: 151,
  need_license: true
}, {
  weapon: 572,
  caliber: 9,
  ammo_max: 6,
  hash: "weapon_gadgetpistol",
  ammo_box: 153,
  need_license: true
}, {
  weapon: 573,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_golfclub",
  ammo_box: null,
  need_license: true
}, {
  weapon: 574,
  caliber: null,
  ammo_max: 0,
  hash: "weapon_switchblade",
  ammo_box: null,
  need_license: true
}];
const getWeaponAddonKeyByItemId = (weapon, addon_id) => {
  const q = inventoryShared.getWeaponConfigByItemId(weapon);
  if (!q) return null;
  for (let type in q.addons) {
    var _q$addons$t;
    const t = type;
    if (((_q$addons$t = q.addons[t]) === null || _q$addons$t === void 0 ? void 0 : _q$addons$t.item_id) === addon_id) return t;
  }
  return null;
};
exports.getWeaponAddonKeyByItemId = getWeaponAddonKeyByItemId;
const CONTAINERS_DATA = exports.CONTAINERS_DATA = [{
  item_id: 861,
  owner_type: OWNER_TYPES.WALLET,
  max_size: 1500,
  access: [824, 800, 801, 802, 803, 805, 851]
}, {
  item_id: 2000,
  owner_type: OWNER_TYPES.BAG1,
  max_size: 10000,
  bag_sync: {
    d: 35,
    t: 0,
    p: 2
  }
}, {
  item_id: 2001,
  owner_type: OWNER_TYPES.BAG2,
  max_size: 10000,
  bag_sync: {
    d: 35,
    t: 1,
    p: 2
  }
}, {
  item_id: 2002,
  owner_type: OWNER_TYPES.BAG3,
  max_size: 10000,
  bag_sync: {
    d: 35,
    t: 3,
    p: 2
  }
}, {
  item_id: 2003,
  owner_type: OWNER_TYPES.BAG4,
  max_size: 10000,
  bag_sync: {
    d: 35,
    t: 4,
    p: 2
  }
}, {
  item_id: 2004,
  owner_type: OWNER_TYPES.BAG5,
  max_size: 10000,
  bag_sync: {
    d: 56,
    t: 0,
    p: 2
  }
}, {
  item_id: 2005,
  owner_type: OWNER_TYPES.BAG6,
  max_size: 10000,
  bag_sync: {
    d: 56,
    t: 1,
    p: 2
  }
}, {
  item_id: 2006,
  owner_type: OWNER_TYPES.BAG7,
  max_size: 10000,
  bag_sync: {
    d: 56,
    t: 2,
    p: 2
  }
}, {
  item_id: 2007,
  owner_type: OWNER_TYPES.BAG8,
  max_size: 10000,
  bag_sync: {
    d: 56,
    t: 3,
    p: 2
  }
}, {
  item_id: 2008,
  owner_type: OWNER_TYPES.BAG9,
  max_size: 10000,
  bag_sync: {
    d: 56,
    t: 4,
    p: 2
  }
}, {
  item_id: 2009,
  owner_type: OWNER_TYPES.BAG10,
  max_size: 10000,
  bag_sync: {
    d: 56,
    t: 5,
    p: 2
  }
}, {
  item_id: 2010,
  owner_type: OWNER_TYPES.BAG11,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 0,
    p: 2
  }
}, {
  item_id: 2011,
  owner_type: OWNER_TYPES.BAG12,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 1,
    p: 2
  }
}, {
  item_id: 2012,
  owner_type: OWNER_TYPES.BAG13,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 2,
    p: 2
  }
}, {
  item_id: 2013,
  owner_type: OWNER_TYPES.BAG14,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 3,
    p: 2
  }
}, {
  item_id: 2014,
  owner_type: OWNER_TYPES.BAG15,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 4,
    p: 2
  }
}, {
  item_id: 2015,
  owner_type: OWNER_TYPES.BAG16,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 5,
    p: 2
  }
}, {
  item_id: 2016,
  owner_type: OWNER_TYPES.BAG17,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 6,
    p: 2
  }
}, {
  item_id: 2017,
  owner_type: OWNER_TYPES.BAG18,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 7,
    p: 2
  }
}, {
  item_id: 2018,
  owner_type: OWNER_TYPES.BAG19,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 8,
    p: 2
  }
}, {
  item_id: 2019,
  owner_type: OWNER_TYPES.BAG20,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 9,
    p: 2
  }
}, {
  item_id: 2020,
  owner_type: OWNER_TYPES.BAG21,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 10,
    p: 2
  }
}, {
  item_id: 2021,
  owner_type: OWNER_TYPES.BAG22,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 11,
    p: 2
  }
}, {
  item_id: 2022,
  owner_type: OWNER_TYPES.BAG23,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 12,
    p: 2
  }
}, {
  item_id: 2023,
  owner_type: OWNER_TYPES.BAG24,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 14,
    p: 2
  }
}, {
  item_id: 2024,
  owner_type: OWNER_TYPES.BAG26,
  max_size: 30000,
  bag_sync: {
    d: 82,
    t: 15,
    p: 2
  }
}, {
  item_id: 2025,
  owner_type: OWNER_TYPES.BAG27,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 0,
    p: 2
  }
}, {
  item_id: 2026,
  owner_type: OWNER_TYPES.BAG28,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 1,
    p: 2
  }
}, {
  item_id: 2027,
  owner_type: OWNER_TYPES.BAG29,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 2,
    p: 2
  }
}, {
  item_id: 2028,
  owner_type: OWNER_TYPES.BAG30,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 3,
    p: 2
  }
}, {
  item_id: 2029,
  owner_type: OWNER_TYPES.BAG31,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 4,
    p: 2
  }
}, {
  item_id: 2030,
  owner_type: OWNER_TYPES.BAG32,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 5,
    p: 2
  }
}, {
  item_id: 2031,
  owner_type: OWNER_TYPES.BAG33,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 6,
    p: 2
  }
}, {
  item_id: 2032,
  owner_type: OWNER_TYPES.BAG34,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 7,
    p: 2
  }
}, {
  item_id: 2033,
  owner_type: OWNER_TYPES.BAG35,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 8,
    p: 2
  }
}, {
  item_id: 2034,
  owner_type: OWNER_TYPES.BAG36,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 9,
    p: 2
  }
}, {
  item_id: 2035,
  owner_type: OWNER_TYPES.BAG37,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 10,
    p: 2
  }
}, {
  item_id: 2036,
  owner_type: OWNER_TYPES.BAG38,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 11,
    p: 2
  }
}, {
  item_id: 2037,
  owner_type: OWNER_TYPES.BAG39,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 12,
    p: 2
  }
}, {
  item_id: 2038,
  owner_type: OWNER_TYPES.BAG40,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 13,
    p: 2
  }
}, {
  item_id: 2039,
  owner_type: OWNER_TYPES.BAG41,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 14,
    p: 2
  }
}, {
  item_id: 2040,
  owner_type: OWNER_TYPES.BAG42,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 15,
    p: 2
  }
}, {
  item_id: 2041,
  owner_type: OWNER_TYPES.BAG43,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 16,
    p: 2
  }
}, {
  item_id: 2042,
  owner_type: OWNER_TYPES.BAG44,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 17,
    p: 2
  }
}, {
  item_id: 2043,
  owner_type: OWNER_TYPES.BAG45,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 18,
    p: 2
  }
}, {
  item_id: 2044,
  owner_type: OWNER_TYPES.BAG46,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 19,
    p: 2
  }
}, {
  item_id: 2045,
  owner_type: OWNER_TYPES.BAG47,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 20,
    p: 2
  }
}, {
  item_id: 2046,
  owner_type: OWNER_TYPES.BAG48,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 21,
    p: 2
  }
}, {
  item_id: 2047,
  owner_type: OWNER_TYPES.BAG49,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 22,
    p: 2
  }
}, {
  item_id: 2048,
  owner_type: OWNER_TYPES.BAG50,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 23,
    p: 2
  }
}, {
  item_id: 2049,
  owner_type: OWNER_TYPES.BAG51,
  max_size: 30000,
  bag_sync: {
    d: 86,
    t: 24,
    p: 2
  }
}, {
  item_id: 2050,
  owner_type: OWNER_TYPES.BAG53,
  max_size: 18000,
  bag_sync: {
    d: 91,
    t: 0,
    p: 2
  }
}, {
  item_id: 2051,
  owner_type: OWNER_TYPES.BAG54,
  max_size: 18000,
  bag_sync: {
    d: 91,
    t: 1,
    p: 2
  }
}, {
  item_id: 2052,
  owner_type: OWNER_TYPES.BAG55,
  max_size: 18000,
  bag_sync: {
    d: 91,
    t: 2,
    p: 2
  }
}, {
  item_id: 2053,
  owner_type: OWNER_TYPES.BAG56,
  max_size: 18000,
  bag_sync: {
    d: 91,
    t: 3,
    p: 2
  }
}, {
  item_id: 2054,
  owner_type: OWNER_TYPES.BAG57,
  max_size: 23000,
  bag_sync: {
    d: 91,
    t: 4,
    p: 2
  }
}, {
  item_id: 2055,
  owner_type: OWNER_TYPES.BAG58,
  max_size: 23000,
  bag_sync: {
    d: 91,
    t: 6,
    p: 2
  }
}, {
  item_id: 2056,
  owner_type: OWNER_TYPES.BAG59,
  max_size: 23000,
  bag_sync: {
    d: 91,
    t: 7,
    p: 2
  }
}, {
  item_id: 2057,
  owner_type: OWNER_TYPES.BAG60,
  max_size: 23000,
  bag_sync: {
    d: 91,
    t: 8,
    p: 2
  }
}, {
  item_id: 2058,
  owner_type: OWNER_TYPES.BAG61,
  max_size: 7000,
  bag_sync: {
    d: 97,
    t: 0,
    p: 2
  }
}, {
  item_id: 2059,
  owner_type: OWNER_TYPES.BAG62,
  max_size: 7000,
  bag_sync: {
    d: 97,
    t: 1,
    p: 2
  }
}, {
  item_id: 2060,
  owner_type: OWNER_TYPES.BAG63,
  max_size: 7000,
  bag_sync: {
    d: 97,
    t: 2,
    p: 2
  }
}, {
  item_id: 2061,
  owner_type: OWNER_TYPES.BAG64,
  max_size: 7000,
  bag_sync: {
    d: 97,
    t: 3,
    p: 2
  }
}, {
  item_id: 2062,
  owner_type: OWNER_TYPES.BAG65,
  max_size: 7000,
  bag_sync: {
    d: 97,
    t: 4,
    p: 2
  }
}, {
  item_id: 2063,
  owner_type: OWNER_TYPES.BAG66,
  max_size: 5000,
  bag_sync: {
    d: 93,
    t: 0,
    p: 2
  }
}, {
  item_id: 2064,
  owner_type: OWNER_TYPES.BAG67,
  max_size: 5000,
  bag_sync: {
    d: 93,
    t: 1,
    p: 2
  }
}, {
  item_id: 2065,
  owner_type: OWNER_TYPES.BAG68,
  max_size: 5000,
  bag_sync: {
    d: 93,
    t: 2,
    p: 2
  }
}, {
  item_id: 2066,
  owner_type: OWNER_TYPES.BAG69,
  max_size: 5000,
  bag_sync: {
    d: 93,
    t: 3,
    p: 2
  }
}, {
  item_id: 2067,
  owner_type: OWNER_TYPES.BAG70,
  max_size: 5000,
  bag_sync: {
    d: 93,
    t: 4,
    p: 2
  }
}, {
  item_id: 2068,
  owner_type: OWNER_TYPES.BAG71,
  max_size: 18000,
  bag_sync: {
    d: 94,
    t: 0,
    p: 2
  }
}, {
  item_id: 2069,
  owner_type: OWNER_TYPES.BAG72,
  max_size: 18000,
  bag_sync: {
    d: 94,
    t: 1,
    p: 2
  }
}, {
  item_id: 2070,
  owner_type: OWNER_TYPES.BAG73,
  max_size: 18000,
  bag_sync: {
    d: 94,
    t: 2,
    p: 2
  }
}, {
  item_id: 2071,
  owner_type: OWNER_TYPES.BAG74,
  max_size: 18000,
  bag_sync: {
    d: 95,
    t: 0,
    p: 2
  }
}, {
  item_id: 2072,
  owner_type: OWNER_TYPES.BAG75,
  max_size: 18000,
  bag_sync: {
    d: 95,
    t: 1,
    p: 2
  }
}, {
  item_id: 2073,
  owner_type: OWNER_TYPES.BAG76,
  max_size: 18000,
  bag_sync: {
    d: 95,
    t: 2,
    p: 2
  }
}, {
  item_id: 2074,
  owner_type: OWNER_TYPES.BAG77,
  max_size: 23000,
  bag_sync: {
    d: 96,
    t: 0,
    p: 2
  }
}, {
  item_id: 2075,
  owner_type: OWNER_TYPES.BAG78,
  max_size: 23000,
  bag_sync: {
    d: 96,
    t: 1,
    p: 2
  }
}, {
  item_id: 2076,
  owner_type: OWNER_TYPES.BAG79,
  max_size: 23000,
  bag_sync: {
    d: 96,
    t: 2,
    p: 2
  }
}, {
  item_id: 2077,
  owner_type: OWNER_TYPES.BAG80,
  max_size: 23000,
  bag_sync: {
    d: 96,
    t: 3,
    p: 2
  }
}, {
  item_id: 2078,
  owner_type: OWNER_TYPES.BAG81,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 0,
    p: 2
  }
}, {
  item_id: 2079,
  owner_type: OWNER_TYPES.BAG82,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 1,
    p: 2
  }
}, {
  item_id: 2080,
  owner_type: OWNER_TYPES.BAG83,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 2,
    p: 2
  }
}, {
  item_id: 2081,
  owner_type: OWNER_TYPES.BAG84,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 4,
    p: 2
  }
}, {
  item_id: 2082,
  owner_type: OWNER_TYPES.BAG85,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 6,
    p: 2
  }
}, {
  item_id: 2083,
  owner_type: OWNER_TYPES.BAG86,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 7,
    p: 2
  }
}, {
  item_id: 2084,
  owner_type: OWNER_TYPES.BAG87,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 8,
    p: 2
  }
}, {
  item_id: 2085,
  owner_type: OWNER_TYPES.BAG88,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 9,
    p: 2
  }
}, {
  item_id: 2086,
  owner_type: OWNER_TYPES.BAG89,
  max_size: 23000,
  bag_sync: {
    d: 98,
    t: 10,
    p: 2
  }
}, {
  item_id: 2087,
  owner_type: OWNER_TYPES.BAG90,
  max_size: 30000,
  bag_sync: {
    d: 100,
    t: 0,
    p: 2
  }
}, {
  item_id: 2088,
  owner_type: OWNER_TYPES.BAG91,
  max_size: 30000,
  bag_sync: {
    d: 100,
    t: 1,
    p: 2
  }
}, {
  item_id: 2089,
  owner_type: OWNER_TYPES.BAG92,
  max_size: 30000,
  bag_sync: {
    d: 101,
    t: 0,
    p: 2
  }
}, {
  item_id: 2090,
  owner_type: OWNER_TYPES.BAG93,
  max_size: 30000,
  bag_sync: {
    d: 102,
    t: 0,
    p: 2
  }
}, {
  item_id: 2091,
  owner_type: OWNER_TYPES.BAG94,
  max_size: 30000,
  bag_sync: {
    d: 103,
    t: 0,
    p: 2
  }
}, {
  item_id: 2092,
  owner_type: OWNER_TYPES.BAG95,
  max_size: 30000,
  bag_sync: {
    d: 103,
    t: 1,
    p: 2
  }
}, {
  item_id: 2093,
  owner_type: OWNER_TYPES.BAG96,
  max_size: 33000,
  bag_sync: {
    d: 104,
    t: 0,
    p: 2
  }
}, {
  item_id: 2094,
  owner_type: OWNER_TYPES.BAG97,
  max_size: 33000,
  bag_sync: {
    d: 104,
    t: 1,
    p: 2
  }
}, {
  item_id: 2095,
  owner_type: OWNER_TYPES.BAG98,
  max_size: 33000,
  bag_sync: {
    d: 104,
    t: 2,
    p: 2
  }
}, {
  item_id: 2096,
  owner_type: OWNER_TYPES.BAG99,
  max_size: 33000,
  bag_sync: {
    d: 104,
    t: 3,
    p: 2
  }
}, {
  item_id: 2097,
  owner_type: OWNER_TYPES.BAG100,
  max_size: 33000,
  bag_sync: {
    d: 104,
    t: 4,
    p: 2
  }
}, {
  item_id: 2098,
  owner_type: OWNER_TYPES.BAG_102,
  max_size: 35000,
  bag_sync: {
    d: 105,
    t: 0,
    p: 2
  }
}, {
  item_id: 2099,
  owner_type: OWNER_TYPES.BAG_103,
  max_size: 35000,
  bag_sync: {
    d: 106,
    t: 0,
    p: 2
  }
}, {
  item_id: 2100,
  owner_type: OWNER_TYPES.BAG_104,
  max_size: 33000,
  bag_sync: {
    d: 107,
    t: 0,
    p: 2
  }
}, {
  item_id: 2101,
  owner_type: OWNER_TYPES.BAG_105,
  max_size: 33000,
  bag_sync: {
    d: 107,
    t: 1,
    p: 2
  }
}, {
  item_id: 2102,
  owner_type: OWNER_TYPES.BAG_106,
  max_size: 33000,
  bag_sync: {
    d: 107,
    t: 2,
    p: 2
  }
}, {
  item_id: 2103,
  owner_type: OWNER_TYPES.BAG_107,
  max_size: 33000,
  bag_sync: {
    d: 107,
    t: 3,
    p: 2
  }
}, {
  item_id: 2104,
  owner_type: OWNER_TYPES.BAG_108,
  max_size: 33000,
  bag_sync: {
    d: 107,
    t: 4,
    p: 2
  }
}, {
  item_id: 2105,
  owner_type: OWNER_TYPES.BAG_109,
  max_size: 33000,
  bag_sync: {
    d: 107,
    t: 5,
    p: 2
  }
}, {
  item_id: 2106,
  owner_type: OWNER_TYPES.BAG_110,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 0,
    p: 2
  }
}, {
  item_id: 2107,
  owner_type: OWNER_TYPES.BAG_111,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 1,
    p: 2
  }
}, {
  item_id: 2108,
  owner_type: OWNER_TYPES.BAG_112,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 2,
    p: 2
  }
}, {
  item_id: 2109,
  owner_type: OWNER_TYPES.BAG_113,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 3,
    p: 2
  }
}, {
  item_id: 2110,
  owner_type: OWNER_TYPES.BAG_114,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 4,
    p: 2
  }
}, {
  item_id: 2111,
  owner_type: OWNER_TYPES.BAG_115,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 5,
    p: 2
  }
}, {
  item_id: 2112,
  owner_type: OWNER_TYPES.BAG_116,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 6,
    p: 2
  }
}, {
  item_id: 2113,
  owner_type: OWNER_TYPES.BAG_117,
  max_size: 33000,
  bag_sync: {
    d: 108,
    t: 7,
    p: 2
  }
}, {
  item_id: 2114,
  owner_type: OWNER_TYPES.BAG_118,
  max_size: 33000,
  bag_sync: {
    d: 109,
    t: 0,
    p: 2
  }
}, {
  item_id: 2115,
  owner_type: OWNER_TYPES.BAG_119,
  max_size: 33000,
  bag_sync: {
    d: 109,
    t: 1,
    p: 2
  }
}, {
  item_id: 2116,
  owner_type: OWNER_TYPES.BAG_120,
  max_size: 33000,
  bag_sync: {
    d: 109,
    t: 2,
    p: 2
  }
}, {
  item_id: 2117,
  owner_type: OWNER_TYPES.BAG_121,
  max_size: 33000,
  bag_sync: {
    d: 109,
    t: 3,
    p: 2
  }
}, {
  item_id: 2118,
  owner_type: OWNER_TYPES.BAG_122,
  max_size: 33000,
  bag_sync: {
    d: 109,
    t: 4,
    p: 2
  }
}, {
  item_id: 2119,
  owner_type: OWNER_TYPES.BAG_123,
  max_size: 33000,
  bag_sync: {
    d: 109,
    t: 5,
    p: 2
  }
}, {
  item_id: 2120,
  owner_type: OWNER_TYPES.BAG_124,
  max_size: 15000,
  bag_sync: {
    d: 110,
    t: 0,
    p: 2
  }
}, {
  item_id: 2121,
  owner_type: OWNER_TYPES.BAG_125,
  max_size: 15000,
  bag_sync: {
    d: 110,
    t: 1,
    p: 2
  }
}, {
  item_id: 2122,
  owner_type: OWNER_TYPES.BAG_126,
  max_size: 15000,
  bag_sync: {
    d: 110,
    t: 2,
    p: 2
  }
}, {
  item_id: 2123,
  owner_type: OWNER_TYPES.BAG_127,
  max_size: 15000,
  bag_sync: {
    d: 110,
    t: 3,
    p: 2
  }
}, {
  item_id: 2124,
  owner_type: OWNER_TYPES.BAG_128,
  max_size: 15000,
  bag_sync: {
    d: 110,
    t: 4,
    p: 2
  }
}, {
  item_id: 2125,
  owner_type: OWNER_TYPES.BAG_129,
  max_size: 15000,
  bag_sync: {
    d: 110,
    t: 5,
    p: 2
  }
}, {
  item_id: 2126,
  owner_type: OWNER_TYPES.BAG_130,
  max_size: 15000,
  bag_sync: {
    d: 110,
    t: 6,
    p: 2
  }
}, {
  item_id: 2127,
  owner_type: OWNER_TYPES.BAG_135,
  max_size: 25000,
  bag_sync: {
    d: 111,
    t: 0,
    p: 2
  }
}, {
  item_id: 2128,
  owner_type: OWNER_TYPES.BAG_136,
  max_size: 25000,
  bag_sync: {
    d: 112,
    t: 0,
    p: 2
  }
}, {
  item_id: 2129,
  owner_type: OWNER_TYPES.BAG_137,
  max_size: 20000,
  bag_sync: {
    d: 114,
    t: 0,
    p: 2
  }
}, {
  item_id: 2130,
  owner_type: OWNER_TYPES.BAG_138,
  max_size: 30000,
  bag_sync: {
    d: 115,
    t: 0,
    p: 2
  }
}, {
  item_id: 2131,
  owner_type: OWNER_TYPES.BAG_139,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 0,
    p: 2
  }
}, {
  item_id: 2132,
  owner_type: OWNER_TYPES.BAG_140,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 1,
    p: 2
  }
}, {
  item_id: 2133,
  owner_type: OWNER_TYPES.BAG_141,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 2,
    p: 2
  }
}, {
  item_id: 2134,
  owner_type: OWNER_TYPES.BAG_142,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 3,
    p: 2
  }
}, {
  item_id: 2135,
  owner_type: OWNER_TYPES.BAG_143,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 5,
    p: 2
  }
}, {
  item_id: 2136,
  owner_type: OWNER_TYPES.BAG_144,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 6,
    p: 2
  }
}, {
  item_id: 2137,
  owner_type: OWNER_TYPES.BAG_145,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 7,
    p: 2
  }
}, {
  item_id: 2138,
  owner_type: OWNER_TYPES.BAG_146,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 8,
    p: 2
  }
}, {
  item_id: 2139,
  owner_type: OWNER_TYPES.BAG_147,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 9,
    p: 2
  }
}, {
  item_id: 2140,
  owner_type: OWNER_TYPES.BAG_148,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 10,
    p: 2
  }
}, {
  item_id: 2141,
  owner_type: OWNER_TYPES.BAG_149,
  max_size: 30000,
  bag_sync: {
    d: 117,
    t: 11,
    p: 2
  }
}, {
  item_id: 2142,
  owner_type: OWNER_TYPES.BAG_150,
  max_size: 30000,
  bag_sync: {
    d: 118,
    t: 0,
    p: 2
  }
}, {
  item_id: 2143,
  owner_type: OWNER_TYPES.BAG_151,
  max_size: 30000,
  bag_sync: {
    d: 119,
    t: 0,
    p: 2
  }
}, {
  item_id: 2144,
  owner_type: OWNER_TYPES.BAG_152,
  max_size: 35000,
  bag_sync: {
    d: 120,
    t: 0,
    p: 2
  }
}, {
  item_id: 2145,
  owner_type: OWNER_TYPES.BAG_153,
  max_size: 35000,
  bag_sync: {
    d: 121,
    t: 0,
    p: 2
  }
}, {
  item_id: 2146,
  owner_type: OWNER_TYPES.BAG_154,
  max_size: 25000,
  bag_sync: {
    d: 122,
    t: 0,
    p: 2
  }
}, {
  item_id: 2147,
  owner_type: OWNER_TYPES.BAG_155,
  max_size: 25000,
  bag_sync: {
    d: 122,
    t: 1,
    p: 2
  }
}, ...weapon_list.filter(q => q.addons).map(q => {
  let access = [];
  for (let type in q.addons) {
    var _q$addons$t2, _q$addons$t3;
    const t = type;
    if ((_q$addons$t2 = q.addons[t]) !== null && _q$addons$t2 !== void 0 && _q$addons$t2.item_id) access.push((_q$addons$t3 = q.addons[t]) === null || _q$addons$t3 === void 0 ? void 0 : _q$addons$t3.item_id);
  }
  return {
    item_id: q.weapon,
    owner_type: OWNER_TYPES.WEAPON_MODS,
    max_size: 10000,
    access
  };
})];
let itemsAttachBody = itemsList.filter(q => q.attachBody);
const inventoryShared = exports.inventoryShared = {
  get items() {
    return itemsList;
  },
  get itemsHand() {
    return itemsList.filter(q => q.inHand);
  },
  get itemsAttachBody() {
    return itemsAttachBody;
  },
  get: item_id => inventoryShared.items.find(item => item.item_id == item_id),
  getWeaponConfigByItemId: id => {
    return weapon_list.find(q => q.weapon == id);
  },
  getWeaponNameByHash: hash => {
    hash = hash.replace('weapon_', '');
    let cfg = weapon_list.find(q => q.hash.includes(hash));
    if (!cfg) return null;
    const item = inventoryShared.get(cfg.weapon);
    if (!item) return null;
    return item.name;
  },
  getWeaponConfigByHash: hash => {
    if (!hash) return null;
    hash = hash.toLowerCase().replace('weapon_', '');
    let cfg = weapon_list.find(q => q.hash.includes(hash));
    if (!cfg) return null;
    const item = inventoryShared.get(cfg.weapon);
    if (!item) return null;
    return inventoryShared.getWeaponConfigByItemId(item.item_id);
  },
  get weapons() {
    return weapon_list;
  }
};
},{"./licence":"c0dc","./system":"SNxO","./documents":"EDxI","./economy":"nzl1","./fractions":"bCq5"}],"e4XL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weapon_hashes = void 0;
var _inventory = require("./inventory");
const weapon_hashes = exports.weapon_hashes = [["WEAPON_UNARMED", -1569615261], ["WEAPON_ANIMAL", -100946242], ["WEAPON_COUGAR", 148160082], ["WEAPON_KNIFE", -1716189206], ["WEAPON_NIGHTSTICK", 1737195953], ["WEAPON_HAMMER", 1317494643], ["WEAPON_BAT", -1786099057], ["WEAPON_GOLFCLUB", 1141786504], ["WEAPON_CROWBAR", -2067956739], ["WEAPON_PISTOL", 453432689], ["WEAPON_COMBATPISTOL", 1593441988], ["WEAPON_APPISTOL", 584646201], ["WEAPON_PISTOL50", -1716589765], ["WEAPON_MICROSMG", 324215364], ["WEAPON_SMG", 736523883], ["WEAPON_ASSAULTSMG", -270015777], ["WEAPON_ASSAULTRIFLE", -1074790547], ["WEAPON_CARBINERIFLE", -2084633992], ["WEAPON_ADVANCEDRIFLE", -1357824103], ["WEAPON_MG", -1660422300], ["WEAPON_COMBATMG", 2144741730], ["WEAPON_PUMPSHOTGUN", 487013001], ["WEAPON_SAWNOFFSHOTGUN", 2017895192], ["WEAPON_ASSAULTSHOTGUN", -494615257], ["WEAPON_BULLPUPSHOTGUN", -1654528753], ["WEAPON_STUNGUN", 911657153], ["WEAPON_SNIPERRIFLE", 100416529], ["WEAPON_HEAVYSNIPER", 205991906], ["WEAPON_REMOTESNIPER", 856002082], ["WEAPON_GRENADELAUNCHER", -1568386805], ["WEAPON_GRENADELAUNCHER_SMOKE", 1305664598], ["WEAPON_RPG", -1312131151], ["WEAPON_PASSENGER_ROCKET", 375527679], ["WEAPON_AIRSTRIKE_ROCKET", 324506233], ["WEAPON_STINGER", 1752584910], ["WEAPON_MINIGUN", 1119849093], ["WEAPON_GRENADE", -1813897027], ["WEAPON_STICKYBOMB", 741814745], ["WEAPON_SMOKEGRENADE", -37975472], ["WEAPON_BZGAS", -1600701090], ["WEAPON_MOLOTOV", 615608432], ["WEAPON_FIREEXTINGUISHER", 101631238], ["WEAPON_PETROLCAN", 883325847], ["WEAPON_DIGISCANNER", -38085395], ["WEAPON_BRIEFCASE", -2000187721], ["WEAPON_BRIEFCASE_02", 28811031], ["WEAPON_BALL", 600439132], ["WEAPON_FLARE", 1233104067], ["WEAPON_VEHICLE_ROCKET", -1090665087], ["WEAPON_BARBED_WIRE", 1223143800], ["WEAPON_DROWNING", -10959621], ["WEAPON_DROWNING_IN_VEHICLE", 1936677264], ["WEAPON_BLEEDING", -1955384325], ["WEAPON_ELECTRIC_FENCE", -1833087301], ["WEAPON_EXPLOSION", 539292904], ["WEAPON_FALL", -842959696], ["WEAPON_EXHAUSTION", 910830060], ["WEAPON_HIT_BY_WATER_CANNON", -868994466], ["WEAPON_RAMMED_BY_CAR", 133987706], ["WEAPON_RUN_OVER_BY_CAR", -1553120962], ["WEAPON_HELI_CRASH", 341774354], ["WEAPON_FIRE", -544306709], ["WEAPON_UNARMED", -1569615261], ["GADGET_PARACHUTE", -72657034], ["WEAPON_KNIFE", -1716189206], ["WEAPON_NIGHTSTICK", 1737195953], ["WEAPON_HAMMER", 1317494643], ["WEAPON_BAT", -1786099057], ["WEAPON_CROWBAR", -2067956739], ["WEAPON_GOLFCLUB", 1141786504], ["WEAPON_BOTTLE", -102323637], ["WEAPON_DAGGER", -1834847097], ["WEAPON_HATCHET", -102973651], ["WEAPON_KNUCKLE", -656458692], ["WEAPON_MACHETE", -581044007], ["WEAPON_FLASHLIGHT", -1951375401], ["WEAPON_SWITCHBLADE", -538741184], ["WEAPON_BATTLEAXE", -853065399], ["WEAPON_POOLCUE", -1810795771], ["WEAPON_PIPEWRENCH", 419712736], ["WEAPON_STONE_HATCHET", 940833800], ["WEAPON_PISTOL", 453432689], ["WEAPON_PISTOL_MK2", -1075685676], ["WEAPON_COMBATPISTOL", 1593441988], ["WEAPON_PISTOL50", -1716589765], ["WEAPON_SNSPISTOL", -1076751822], ["WEAPON_SNSPISTOL_MK2", -2009644972], ["WEAPON_HEAVYPISTOL", -771403250], ["WEAPON_VINTAGEPISTOL", 137902532], ["WEAPON_MARKSMANPISTOL", -598887786], ["WEAPON_REVOLVER", -1045183535], ["WEAPON_REVOLVER_MK2", -879347409], ["WEAPON_DOUBLEACTION", -1746263880], ["WEAPON_APPISTOL", 584646201], ["WEAPON_STUNGUN", 911657153], ["WEAPON_FLAREGUN", 1198879012], ["WEAPON_RAYPISTOL", -1355376991], ["WEAPON_MICROSMG", 324215364], ["WEAPON_MACHINEPISTOL", -619010992], ["WEAPON_MINISMG", -1121678507], ["WEAPON_SMG", 736523883], ["WEAPON_SMG_MK2", 2024373456], ["WEAPON_ASSAULTSMG", -270015777], ["WEAPON_COMBATPDW", 171789620], ["WEAPON_MG", -1660422300], ["WEAPON_COMBATMG", 2144741730], ["WEAPON_COMBATMG_MK2", -608341376], ["WEAPON_GUSENBERG", 1627465347], ["WEAPON_RAYCARBINE", 1198256469], ["WEAPON_ASSAULTRIFLE", -1074790547], ["WEAPON_ASSAULTRIFLE_MK2", 961495388], ["WEAPON_CARBINERIFLE", -208463392], ["WEAPON_CARBINERIFLE_MK2", -86904375], ["WEAPON_ADVANCEDRIFLE", -1357824103], ["WEAPON_SPECIALCARBINE", -1063057011], ["WEAPON_SPECIALCARBINE_MK2", -1768145561], ["WEAPON_BULLPUPRIFLE", 2132975508], ["WEAPON_BULLPUPRIFLE_MK2", -2066285827], ["WEAPON_COMPACTRIFLE", 1649403952], ["WEAPON_SNIPERRIFLE", 100416529], ["WEAPON_HEAVYSNIPER", 205991906], ["WEAPON_HEAVYSNIPER_MK2", 177293209], ["WEAPON_MARKSMANRIFLE", -952879014], ["WEAPON_MARKSMANRIFLE_MK2", 1785463520], ["WEAPON_GRENADE", -1813897027], ["WEAPON_STICKYBOMB", 741814745], ["WEAPON_PROXMINE", -1420407914], ["WAPAON_PIPEBOMB", -1168923560], ["WEAPON_SMOKEGRENADE", -37975472], ["WEAPON_BZGAS", -1600701090], ["WEAPON_MOLOTOV", 615608432], ["WEAPON_FIREEXTINGUISHER", 101631238], ["WEAPON_PETROLCAN", 883325847], ["WEAPON_BALL", 600439132], ["WEAPON_SNOWBALL", 126349499], ["WEAPON_FLARE", 1233104067], ["WEAPON_GRENADELAUNCHER", -1568386805], ["WEAPON_RPG", -1312131151], ["WEAPON_MINIGUN", 1119849093], ["WEAPON_FIREWORK", 2138347493], ["WEAPON_RAILGUN", 1834241177], ["WEAPON_HOMINGLAUNCHER", 1672152130], ["WEAPON_COMPACTLAUNCHER", 125959754], ["WEAPON_RAYMINIGUN", -1238556825], ["WEAPON_PUMPSHOTGUN", 487013001], ["WEAPON_PUMPSHOTGUN_MK2", 1432025498], ["WEAPON_SAWNOFFSHOTGUN", 2014895192], ["WEAPON_BULLPUPSHOTGUN", -1654528753], ["WEAPON_ASSAULTSHOTGUN", -494615257], ["WEAPON_MUSKET", -1466123874], ["WEAPON_HEAVYSHOTGUN", 984333226], ["WEAPON_DBSHOTGUN", -275439685], ["WEAPON_SWEEPERSHOTGUN", 317205821]];
_inventory.weapon_list.map(weap => {
  if (!weapon_hashes.find(w => w[0] == weap.hash.toUpperCase())) {
    if (mp.players.local) weapon_hashes.push([weap.hash.toUpperCase(), Number(mp.game.joaat(weap.hash))]);else weapon_hashes.push([weap.hash.toUpperCase(), Number(mp.joaat(weap.hash))]);
  }
});
},{"./inventory":"vpPR"}],"dSZZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONSTRUCTION_REGISTER_POS = exports.CONSTRUCTION_MIN_FOR_START = exports.CONSTRUCTION_MAX = exports.CONSTRUCTION_HOUSES = exports.CONSTRUCTION_DRESS_MALE = exports.CONSTRUCTION_DRESS_FEMALE = exports.ALLOW_JOIN_AFTER_START = void 0;
const ALLOW_JOIN_AFTER_START = exports.ALLOW_JOIN_AFTER_START = true;
const CONSTRUCTION_REGISTER_POS = exports.CONSTRUCTION_REGISTER_POS = new mp.Vector3(-668.25, 214.85, 80.96);
const CONSTRUCTION_MIN_FOR_START = exports.CONSTRUCTION_MIN_FOR_START = 2;
const CONSTRUCTION_MAX = exports.CONSTRUCTION_MAX = 4;
const CONSTRUCTION_DRESS_MALE = exports.CONSTRUCTION_DRESS_MALE = [[3, 0, 0], [8, 1, 0], [11, 1, 11], [1, 0, 0], [4, 89, 19], [6, 24, 0]];
const CONSTRUCTION_DRESS_FEMALE = exports.CONSTRUCTION_DRESS_FEMALE = [[3, 0, 0], [8, 1, 1], [11, 14, 6], [1, 0, 0], [4, 92, 19], [6, 66, 0], [100, 120, 0], [101, 5, 0], [106, 1, 0]];
const CONSTRUCTION_HOUSES = exports.CONSTRUCTION_HOUSES = [{
  setSecond: 300,
  name: 'Топ хата',
  pos: {
    x: -792.80,
    y: 320.53,
    z: 127.04,
    h: 182
  },
  reward: 86000,
  sets: [["pp_floor1", -787.48, 321.0757, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor2", -783.9006, 318.7404, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor3", -780.076, 318.7404, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor4", -778.1946, 318.7404, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor5", -775.2689, 318.7404, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor6", -775.7347, 318.7404, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor7", -775.7347, 327.3982, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor8", -778.6219, 327.3982, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor9", -776.2374, 330.5549, 127.14, 0, 'Песчаный паркет', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor10", -787.4617, 328.8468, 127.14, 0, 'Плитка Адама', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor11", -783.7022, 328.3, 127.14, 0, 'Плитка Адама', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor12", -780.0383, 328.3, 127.14, 0, 'Плитка Адама', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor13", -778.1489, 328.3, 127.14, 0, 'Плитка Адама', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor14", -773.9064, 333.7294, 127.14, 0, 'Кавролин дьявола', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor15", -769.773, 334.8942, 127.14, 0, 'Кавролин дьявола', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor16", -767.7822, 337.6885, 127.14, 0, 'Кавролин дьявола', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_floor17", -770.8292, 337.1935, 127.14, 0, 'Кавролин дьявола', 'WORLD_HUMAN_GARDENER_PLANT', 10, 1], ["pp_wall1", -790.6187, 319.5262, 127.14, 88, 'Светлый вход', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall2", -789.3102, 323.6355, 127.14, 353, 'Кардамон любви', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall3", -787.4655, 324.6894, 127.14, 96, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall4", -789.3287, 325.7908, 127.14, 182, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall5", -790.0692, 328.319, 127.14, 93, 'Кардамон любви', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall6", -785.418, 331.7086, 127.14, 359, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall7", -779.5437, 330.6489, 127.14, 356, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall8", -774.2369, 331.459, 127.14, 358, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall9", -773.8049, 326.1978, 127.14, 270, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall10", -773.8049, 317.7644, 127.14, 270, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall11", -776.147, 314.5254, 127.14, 184, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall12", -780.5873, 314.2187, 127.14, 231, 'Кардамон любви', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall13", -787.3307, 316.3463, 127.14, 88, 'Грёзы медузы', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall14", -789.3861, 318.601, 127.14, 181, 'Кардамон любви', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall15", -777.7453, 324.7846, 127.14, 99, 'Полка в стенке', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall16", -777.9772, 332.547, 127.14, 181, 'Проход в светлый мир', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall17", -779.3784, 333.5221, 127.14, 86, 'Темный кардамон', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall18", -776.8394, 334.6281, 127.14, 359, 'Темный кардамон', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall19", -773.7628, 337.7965, 127.14, 91, 'Итальянская пыль', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall20", -769.863, 339.9488, 127.14, 357, 'Итальянская пыль', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall21", -766.056, 336.4696, 127.14, 271, 'Белая глина', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_wall22", -769.4066, 332.6429, 127.14, 171, 'Белая глина', 'WORLD_HUMAN_HAMMERING', 10, 2], ["pp_door1", -790.5096, 321.0173, 127.14, 0, 'Дверь из дуба', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 3], ["pp_door2", -776.1579, 331.6445, 127.14, 0, 'Дверь из дуба', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 3], ["pp_kitchen1", -784.2786, 330.5264, 127.14, 0, 'Карбоновое напыление', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 4], ["pp_kitchen2", -788.6039, 328.5783, 127.14, 0, 'Снежный полёт', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 4], ["pp_stroykabed", -771.0731, 336.9496, 127.14, 0, 'IKEA Family', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 4], ["pp_stroykabedraz", -773.6128, 335.3019, 127.14, 0, 'Розетки из Франции', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 4], ["pp_stroykabeddec", -771.7029, 332.9954, 127.14, 0, 'Сальвадор Дали', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 4], ["pp_kitchendec", -783.7343, 326.3725, 127.14, 0, 'Молоко матери', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 5], ["pp_mainlounge", -778.3633, 317.5556, 127.14, 0, 'Лаундж зона', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 5], ["pp_maindec", -774.7797, 324.3287, 127.14, 0, 'Абстракция', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 5], ["pp_decorderevo", -789.1453, 322.7384, 127.14, 0, 'Зонирование XXL', 'CODE_HUMAN_MEDIC_TEND_TO_DEAD', 10, 5]]
}];
},{}],"WVCz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeZones = exports.REDZONE_POSITIONS = void 0;
var _construction = require("./construction");
const safeZones = exports.safeZones = [{
  x: _construction.CONSTRUCTION_REGISTER_POS.x,
  y: _construction.CONSTRUCTION_REGISTER_POS.y,
  z: _construction.CONSTRUCTION_REGISTER_POS.z,
  r: 20
}, {
  x: -261.15,
  y: -2025.24,
  z: 30.15,
  r: 50
}, {
  x: -116.84,
  y: -605.05,
  z: 36.28,
  r: 50,
  disableLockSpeed: true
}, {
  x: -66.51,
  y: -802.07,
  z: 44.23,
  r: 50,
  disableLockSpeed: true
}, {
  x: 359.9,
  y: -590.07,
  z: 28.23,
  r: 100
}, {
  x: 1692.77,
  y: 2603.04,
  z: 45.56,
  r: 180
}, {
  x: 978.22,
  y: -3114.71,
  z: 5.90,
  r: 320,
  disableLockSpeed: true
}, {
  x: -40.70,
  y: -1097.67,
  z: 26.42,
  r: 20,
  disableLockSpeed: true
}, {
  x: -94.41,
  y: 84.65,
  z: 71.67,
  r: 40,
  disableLockSpeed: true
}, {
  x: 478.74,
  y: -107.67,
  z: 62.16,
  r: 50,
  disableLockSpeed: true
}, {
  x: -422.88,
  y: 1135.57,
  z: 325.85,
  r: 100,
  disableLockSpeed: true
}, {
  x: -430.16,
  y: 258.72,
  z: 83.01,
  r: 40,
  disableLockSpeed: true
}, {
  x: -552.77,
  y: 272.35,
  z: 83.02,
  r: 30,
  disableLockSpeed: true
}, {
  x: -26.29,
  y: 215.28,
  z: 106.52,
  r: 40,
  disableLockSpeed: true
}, {
  x: 128.42,
  y: -1301.55,
  z: 28.98,
  r: 50,
  disableLockSpeed: true
}, {
  x: 470.07,
  y: -1093.59,
  z: 29.20,
  r: 30,
  disableLockSpeed: true
}, {
  x: 454.48,
  y: -990.5,
  z: 30.69,
  r: 50
}, {
  x: 1849.89,
  y: 3688.99,
  z: 34.27,
  r: 40
}, {
  x: -446.30,
  y: 6010.08,
  z: 31.72,
  r: 55
}, {
  x: -2343.30,
  y: 3264.50,
  z: 32.83,
  r: 40
}, {
  x: -527.33,
  y: -234.79,
  z: 37.92,
  r: 90,
  disableLockSpeed: true
}, {
  x: -461.84,
  y: -934.61,
  z: 29.39,
  r: 110
}, {
  x: -1535.37,
  y: -446.94,
  z: 35.59,
  r: 55
}, {
  x: 2362.42,
  y: 5005.26,
  z: 43.45,
  r: 200
}, {
  x: -1076.30,
  y: -249.02,
  z: 44.02,
  r: 70,
  disableLockSpeed: true
}, {
  x: -251.44,
  y: 6320.88,
  z: 32.43,
  r: 100
}, {
  x: 1955.67,
  y: 5181.91,
  z: 48.00,
  r: 80
}, {
  x: -1061.80,
  y: -864.20,
  z: 4.91,
  r: 80,
  disableLockSpeed: true
}, {
  x: 19.46,
  y: -1302.21,
  z: 29.07,
  r: 120
}, {
  x: -710.38,
  y: -1301.52,
  z: 5.11,
  r: 30
}, {
  x: -1644.87,
  y: -901.33,
  z: 8.71,
  r: 100
}, {
  x: -1090.62,
  y: -308.06,
  z: 37.65,
  r: 30,
  disableLockSpeed: true
}, {
  x: 2951.63,
  y: 2788.09,
  z: 41.32,
  r: 50
}, {
  x: -1388.05,
  y: -618.52,
  z: 30.82,
  r: 70,
  disableLockSpeed: true
}, {
  x: 226.99,
  y: -569.75,
  z: 43.87,
  r: 50
}, {
  x: -317.26,
  y: 2809.21,
  z: 59.45,
  r: 50
}, {
  x: -1674.16,
  y: -286.04,
  z: 51.89,
  r: 50,
  disableLockSpeed: true
}, {
  x: -599.89,
  y: -930.32,
  z: 23.86,
  r: 50,
  disableLockSpeed: true
}, {
  x: -714.23,
  y: -366.43,
  z: 34.48,
  r: 30,
  disableLockSpeed: true
}, {
  x: 1999.79,
  y: 3717.12,
  z: 32.17,
  r: 40
}, {
  x: 145.06,
  y: 6415.19,
  z: 31.25,
  r: 40
}, {
  x: 699.39,
  y: 129.79,
  z: 80.75,
  r: 40
}, {
  x: 422.42,
  y: -631.60,
  z: 28.50,
  r: 40
}, {
  x: 1661.92,
  y: 3660.42,
  z: 36.84,
  r: 40
}, {
  x: 263.59,
  y: -1353.16,
  z: 24.54,
  r: 40,
  disableLockSpeed: true
}, {
  x: 1791.33,
  y: 4985.50,
  z: 53.04,
  r: 65,
  disableLockSpeed: true
}, {
  x: 1879.36,
  y: 5065.63,
  z: 53.88,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2133.09,
  y: 5172.37,
  z: 56.58,
  r: 65,
  disableLockSpeed: true
}, {
  x: 1897.51,
  y: 4852.31,
  z: 50.30,
  r: 65,
  disableLockSpeed: true
}, {
  x: 1976.37,
  y: 4827.43,
  z: 49.97,
  r: 65,
  disableLockSpeed: true
}, {
  x: 1928.89,
  y: 4777.54,
  z: 45.98,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2021.08,
  y: 4892.17,
  z: 44.31,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2055.19,
  y: 4926.50,
  z: 42.32,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2153.11,
  y: 5000.13,
  z: 43.89,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2170.77,
  y: 4966.70,
  z: 47.17,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2226.93,
  y: 4912.58,
  z: 43.41,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2249.19,
  y: 4777.68,
  z: 46.31,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2436.82,
  y: 4766.08,
  z: 36.09,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2504.63,
  y: 4837.58,
  z: 38.47,
  r: 65,
  disableLockSpeed: true
}, {
  x: 2851.70,
  y: 4630.57,
  z: 51.69,
  r: 65,
  disableLockSpeed: true
}, {
  x: -1608.25,
  y: -1066.29,
  z: 13.0,
  r: 40
}, {
  x: -1011.18,
  y: -731.96,
  z: 21.53,
  r: 40
}, {
  x: 1931.86,
  y: 3720.24,
  z: 32.870,
  r: 40
}, {
  x: -45.64,
  y: 6473.98,
  z: 31.46,
  r: 40
}, {
  x: 2751.41,
  y: 3460.18,
  z: 55.91,
  r: 40
}, {
  x: 602.50,
  y: -436.08,
  z: 24.76,
  r: 40
}, {
  x: -1840.60,
  y: -1248.45,
  z: 8.62,
  r: 40
}];
const REDZONE_POSITIONS = exports.REDZONE_POSITIONS = [{
  x: 0,
  y: 0,
  z: 0,
  r: 0
}];
},{"./construction":"dSZZ"}],"rRJw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SendUpdate = exports.GameVisualElement = void 0;
const userUpdatedKeys = ['fraction', 'houseKey', 'admin', 'job'];
class GameVisualElement {
  constructor(...updatedKeys) {
    this.registeredUpdatedKeys = updatedKeys;
    pushElement(this);
  }
  destroy() {
    this.handleBeforeDestroy();
  }
  handleBeforeDestroy() {
    for (let updatedKey of this.registeredUpdatedKeys) {
      const array = elements.get(updatedKey).get(this.constructor.name);
      const idx = array.findIndex(e => e === this);
      if (idx !== -1) {
        array.splice(idx);
      }
    }
  }
}
exports.GameVisualElement = GameVisualElement;
const elements = new Map();
for (let updatedKey of userUpdatedKeys) {
  elements.set(updatedKey, new Map());
  const key = updatedKey;
  mp.events.add('_userUpdated_' + key, p => handleUserUpdated(p, key));
}
function pushElement(element) {
  const updatesKeys = element.registeredUpdatedKeys;
  for (let updateKey of updatesKeys) {
    const updateHandlersMap = elements.get(updateKey);
    if (!updateHandlersMap.has(element.constructor.name)) {
      updateHandlersMap.set(element.constructor.name, []);
    }
    updateHandlersMap.get(element.constructor.name).push(element);
  }
}
function handleUserUpdated(player, key) {
  const mapOfClassesHandler = elements.get(key);
  for (let className of [...mapOfClassesHandler.keys()]) {
    const enableIds = [];
    const disableIds = [];
    const gameElements = mapOfClassesHandler.get(className);
    for (let element of gameElements) {
      const result = element.handleUpdate(player);
      if (result.action === 'enable') {
        enableIds.push(result.id);
      } else if (result.action === 'disable') {
        disableIds.push(result.id);
      }
    }
    const firstElement = gameElements[0];
    if (firstElement) {
      firstElement.handleEnable(player, enableIds);
      firstElement.handleDisable(player, disableIds);
    }
  }
}
const SendUpdate = (player, type) => {
  mp.events.call('_userUpdated_' + type, player);
};
exports.SendUpdate = SendUpdate;
},{}],"mP1f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colshapeHandleBase = void 0;
var _GameVisualElement = require("./GameVisualElement");
let ids = 0;
class colshapeHandleBase extends _GameVisualElement.GameVisualElement {
  constructor(position, message, handle, options, onDestroyHandler, ...updatedKeys) {
    super(...updatedKeys);
    this.radius = 1;
    this.color = [33, 150, 243, 100];
    this.rotation = 0;
    this.colshapes = [];
    this.markers = [];
    this.type = 1;
    this.onenter = false;
    this.created = true;
    this.dimensionData = 0;
    ids += 1000;
    this.id = ids;
    let positions = position instanceof Array ? position : [position];
    this.positionData = positions;
    this.messageData = message;
    this.handle = handle;
    this.onDestroyHandler = onDestroyHandler;
    if (options) {
      if (options.dimension) this.dimensionData = options.dimension;
      if (options.radius) this.radius = options.radius;
      if (options.color) this.color = options.color;
      if (options.rotation) this.rotation = options.rotation;
      if (options.type) this.type = options.type;
      if (options.onenter) this.onenter = options.onenter;
      if (options.drawStaticName) this.drawStaticName = options.drawStaticName;
      if (options.onEnterHandler) this.onEnterHandler = options.onEnterHandler;
      if (options.onExitHandler) this.onExitHandler = options.onExitHandler;
      if (options.predicate) this.predicate = options.predicate;
    }
    positions.map((position, id) => {
      const colshape = mp.colshapes.newSphere(position.x, position.y, position.z + 1, this.radius, this.dimension);
      colshape.handleClass = this;
      if (this.type !== -1) {
        this.createMarker(position);
      }
      this.colshapes.push(colshape);
    });
  }
  get position() {
    return this.positionData;
  }
  set position(value) {
    this.positionData = value;
    if (this.recreate) this.recreate();
  }
  get message() {
    return this.messageData;
  }
  set message(value) {
    this.message = value;
    if (this.recreate) this.recreate();
  }
  get dimension() {
    return this.dimensionData;
  }
  set dimension(value) {
    this.dimensionData = value;
    if (this.recreate) this.recreate();
  }
  createMarker(position) {
    throw new Error(`shared/checkpoints.ts called abstract methods (${this.createMarker.name})`);
  }
  deleteMarker() {
    throw new Error(`shared/checkpoints.ts called abstract methods (${this.deleteMarker.name})`);
  }
  recreate() {
    if (!this.created) return;
    this.positionData.forEach(p => {
      if (this.type !== -1) {
        this.createMarker(p);
      }
    });
    this.colshapes.map((colshape, index) => {
      if (mp.colshapes.exists(colshape)) {
        if (!mp.players.local) {
          mp.players.toArray().filter(target => target.colshape == colshape).map(target => {
            mp.events.call('playerExitColshape', target, colshape);
          });
        } else {
          mp.events.call('playerExitColshape', colshape);
        }
        colshape.position = new mp.Vector3(this.position[index].x, this.position[index].y, this.position[index].z + 1);
        colshape.dimension = this.dimension;
      }
    });
  }
  get exists() {
    return this.created;
  }
  destroy() {
    if (!this.created) return;
    this.deleteMarker();
    this.colshapes.map((colshape, index) => {
      if (mp.colshapes.exists(colshape)) {
        if (!mp.players.local) {
          mp.players.toArray().filter(target => target.colshape == colshape).map(target => {
            mp.events.call('playerExitColshape', target, colshape);
          });
        } else {
          mp.events.call('playerExitColshape', colshape);
        }
        colshape.destroy();
      }
    });
    this.created = false;
    if (this.onDestroyHandler) this.onDestroyHandler();
    super.destroy();
  }
  handleEnable(player, ids) {
    throw new Error('Called an abstract method');
  }
  handleDisable(player, ids) {
    throw new Error('Called an abstract method');
  }
  handleUpdate(player) {
    throw new Error('Called an abstract method');
  }
  getDto() {
    return {
      s: this.drawStaticName,
      n: typeof this.message === "string" ? this.message : null,
      t: this.type,
      p: this.position,
      r: this.radius,
      c: this.color,
      d: this.dimension,
      id: this.id
    };
  }
}
exports.colshapeHandleBase = colshapeHandleBase;
},{"./GameVisualElement":"rRJw"}],"Q8Qb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_SCALE = void 0;
const DEFAULT_SCALE = exports.DEFAULT_SCALE = {
  x: 2,
  y: 1,
  z: 1
};
},{}],"p2OF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleformTextMp = void 0;
var _system = require("./system");
var _scaleform = require("../../shared/scaleform.mp");
var _custom = require("./custom.event");
var _user = require("./user");
const player = mp.players.local;
let ids = 0;
const freeScaleformTextMps = ['player_name_01', 'player_name_02', 'player_name_03', 'player_name_04', 'player_name_05', 'player_name_06', 'player_name_07', 'player_name_08', 'player_name_09', 'player_name_10', 'player_name_11', 'player_name_12', 'player_name_13', 'player_name_14', 'player_name_15'];
let freeScaleformHandles = [];
freeScaleformTextMps.map(q => {
  freeScaleformHandles.push(mp.game.graphics.requestScaleformMovie(q));
});
const enableScaleforms = ids => {
  for (let id of ids) {
    const scaleform = ScaleformTextMp.atRemoteId(id);
    if (scaleform) {
      scaleform.enabled = true;
    }
  }
};
_custom.CustomEvent.registerServer('scaleforms:enable', ids => {
  enableScaleforms(ids);
});
_custom.CustomEvent.registerServer('scaleforms:disable', ids => {
  for (let id of ids) {
    const scaleform = ScaleformTextMp.atRemoteId(id);
    if (scaleform) {
      scaleform.enabled = false;
    }
  }
});
_custom.CustomEvent.registerServer('scaleforms:load', (scaleforms, idsToEnable) => {
  ;
  for (let scaleform of scaleforms) {
    const {
      id,
      text,
      position,
      rotation,
      scale,
      range,
      dimension,
      type
    } = scaleform;
    loadScaleform(id, text, position, rotation, scale, range, dimension, type);
  }
  if (idsToEnable) {
    enableScaleforms(idsToEnable);
  }
});
_custom.CustomEvent.registerServer('scaleform:remote:remove', id => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (scale) scale.destroy();
});
_custom.CustomEvent.registerServer('scaleform:remote:update:text', (id, text) => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (scale) scale.text = text;
});
_custom.CustomEvent.registerServer('scaleform:remote:update:dimension', (id, val) => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (scale) scale.dimension = val;
});
_custom.CustomEvent.registerServer('scaleform:remote:update:position', (id, val) => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (scale) {
    scale.position = val;
    scale.unload();
  }
});
_custom.CustomEvent.registerServer('scaleform:remote:update:rotation', (id, val) => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (scale) {
    scale.rotation = val;
    scale.unload();
  }
});
_custom.CustomEvent.registerServer('scaleform:remote:update:scale', (id, val) => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (scale) scale.scale = val;
});
_custom.CustomEvent.registerServer('scaleform:remote:update:range', (id, val) => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (scale) scale.range = val;
});
_custom.CustomEvent.registerServer('scaleform:remote:update:type', (id, type) => {
  const scale = ScaleformTextMp.atRemoteId(id);
  if (!scale) return;
  scale.type = type;
  scale.unload();
});
_custom.CustomEvent.registerServer('scaleform:remote:data', (id, text, pos, rotation, scale, range, dimension, type) => {
  loadScaleform(id, text, pos, rotation, scale, range, dimension, type);
});
function loadScaleform(id, text, pos, rotation, scale, range, dimension, type) {
  const scaleform = ScaleformTextMp.atRemoteId(id);
  if (scaleform) {
    scaleform.position = pos;
    scaleform.rotation = rotation;
    scaleform.scale = scale;
    scaleform.range = range;
    scaleform.dimension = dimension;
    scaleform.type = type;
    scaleform.text = text;
  } else {
    let item = new ScaleformTextMp(pos, text, {
      rotation,
      scale,
      range,
      dimension,
      type
    });
    item.remoteId = id;
  }
}
class ScaleformTextMp {
  constructor(pos, text, options) {
    this.dimension = 0;
    this.rotation = {
      x: 0,
      y: 0,
      z: 0
    };
    this.scale = _scaleform.DEFAULT_SCALE;
    this.range = 10;
    this.type = "front";
    this.enabled = false;
    this.position = pos;
    this.textData = text;
    this.id = ids++;
    if (options) {
      if (options.range) this.range = options.range;
      if (options.rotation) this.rotation = options.rotation;
      if (options.scale) this.scale = options.scale;
      if (options.type) this.type = options.type;
      if (typeof options.dimension === "number") this.dimension = options.dimension;
    }
    ScaleformTextMp.pool.set(this.id, this);
  }
  static at(id) {
    return this.pool.get(id);
  }
  static exists(item) {
    const id = typeof item === "number" ? item : item.id;
    return !!this.pool.get(id);
  }
  static toArray() {
    return [...this.pool].map(q => q[1]);
  }
  static atRemoteId(id) {
    return this.toArray().find(q => q.remoteId === id);
  }
  get text() {
    return this.textData;
  }
  set text(val) {
    this.textData = val;
    if (this.isLoaded) this.callFunction('SET_PLAYER_NAME', this.textData);
  }
  async load() {
    if (this.isLoaded) return;
    if (freeScaleformTextMps.length === 0) return;
    this.textWhenBoardPos = null;
    if (this.type === "board") {
      this.board = mp.objects.new(-1713129017, this.position, {
        dimension: this.dimension,
        rotation: new mp.Vector3(this.rotation.x, this.rotation.y, this.rotation.z)
      });
    }
    this.scaleformStr = freeScaleformTextMps[0];
    freeScaleformTextMps.splice(0, 1);
    this._handle = freeScaleformHandles[0];
    freeScaleformHandles.splice(0, 1);
    this.queueCallFunction = new Map();
    while (!this.isLoaded) await _system.system.sleep(10);
    this.callFunction('SET_PLAYER_NAME', this.textData);
  }
  unload() {
    if (mp.objects.exists(this.board)) this.board.destroy();
    this.board = null;
    if (this.scaleformStr) freeScaleformTextMps.push(this.scaleformStr), freeScaleformHandles.push(this._handle);
    this.scaleformStr = null;
    this._handle = null;
  }
  get isLoaded() {
    return typeof this._handle === "number" && !!this.scaleformStr && !!mp.game.graphics.hasScaleformMovieLoaded(this._handle);
  }
  get isValid() {
    return this._handle !== 0;
  }
  render() {
    if (this.type === "front") this.renderFront();else this.render3D();
  }
  render3D() {
    if (this.isLoaded && this.isValid) {
      this.onUpdate();
      const pos = this.type === "board" ? this.textWhenBoardPos : this.position;
      if (!pos && this.type === "board") {
        if (!mp.objects.exists(this.board)) return;
        if (!this.board.handle) return;
        this.textWhenBoardPos = this.board.getOffsetFromInWorldCoords(0, -0.02, 0);
        return;
      }
      mp.game.graphics.drawScaleformMovie3dNonAdditive(this._handle, pos.x, pos.y, pos.z, this.rotation.x, this.rotation.y, -this.rotation.z, 2, 2, 1, this.scale.x, this.scale.y, this.scale.z, 2);
    }
  }
  renderFront() {
    if (this.isLoaded && this.isValid) {
      this.onUpdate();
      const rot = mp.game.cam.getGameplayCamRot(0);
      mp.game.graphics.drawScaleformMovie3dNonAdditive(this._handle, this.position.x, this.position.y, this.position.z, rot.x, rot.y, rot.z, 2, 2, 1, this.scale.x, this.scale.y, this.scale.z, 2);
    }
  }
  callFunction(strFunction, ...args) {
    if (this.isLoaded && this.isValid) {
      const graphics = mp.game.graphics;
      graphics.pushScaleformMovieFunction(this._handle, strFunction);
      args.forEach(arg => {
        switch (typeof arg) {
          case 'string':
            {
              graphics.pushScaleformMovieFunctionParameterString(arg);
              break;
            }
          case 'boolean':
            {
              graphics.pushScaleformMovieFunctionParameterBool(arg);
              break;
            }
          case 'number':
            {
              if (Number(arg) === arg && arg % 1 !== 0) {
                graphics.pushScaleformMovieFunctionParameterFloat(arg);
              } else {
                graphics.pushScaleformMovieFunctionParameterInt(arg);
              }
            }
        }
      });
      graphics.popScaleformMovieFunctionVoid();
    } else {
      this.queueCallFunction.set(strFunction, args);
    }
  }
  onUpdate() {
    if (this.isLoaded && this.isValid) {
      this.queueCallFunction.forEach((args, strFunction) => {
        this.callFunction(strFunction, ...args);
        this.queueCallFunction.delete(strFunction);
      });
    }
  }
  destroy() {
    this.range = 0;
    this.unload();
    ScaleformTextMp.pool.delete(this.id);
  }
}
exports.ScaleformTextMp = ScaleformTextMp;
ScaleformTextMp.pool = new Map();
let scaleformsToRender = [];
setInterval(() => {
  ScaleformTextMp.pool.forEach(item => {
    if (item.enabled && !_user.user.dead && _system.system.distanceToPos(item.position, player.position) <= item.range && (item.dimension === -1 || item.dimension === player.dimension)) {
      if (!scaleformsToRender.includes(item)) {
        item.load();
        scaleformsToRender.push(item);
      }
    } else {
      if (scaleformsToRender.includes(item)) {
        scaleformsToRender.splice(scaleformsToRender.findIndex(s => s.id === item.id), 1);
        item.unload();
      }
    }
  });
}, 500);
mp.events.add('render', () => {
  scaleformsToRender.forEach(item => {
    item.render();
  });
});
},{"./system":"pi2J","../../shared/scaleform.mp":"Q8Qb","./custom.event":"py8h","./user":"ggMw"}],"FJpA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChipIndexBySum = exports.EXIT_ANIM = exports.ENTER_ANIM = exports.CHIP_TYPE_MODELS = exports.CHIP_SELL_COST = exports.CHIP_MIN_SELL = exports.CHIP_MIN_BUY = exports.CHIP_COST = exports.CHIPS_TYPE = exports.CASINO_MAIN_DIMENSION = exports.CASINO_INTERIORS_IDS_IN = exports.CASINO_INTERIORS_IDS = exports.CASINO_ENTER = exports.CASINO_DEALERS = exports.CASINO_CASHIER = exports.CASINO_BUY_CHIPS_INTERFACE = void 0;
const CASINO_INTERIORS_IDS_IN = exports.CASINO_INTERIORS_IDS_IN = [275201];
const CASINO_INTERIORS_IDS = exports.CASINO_INTERIORS_IDS = [274689, ...CASINO_INTERIORS_IDS_IN];
const CHIP_TYPE_MODELS = exports.CHIP_TYPE_MODELS = ['vw_prop_chip_10dollar_x1', 'vw_prop_chip_50dollar_x1', 'vw_prop_chip_100dollar_x1', 'vw_prop_chip_500dollar_x1', 'vw_prop_chip_1kdollar_x1', 'vw_prop_chip_5kdollar_x1', 'vw_prop_chip_10kdollar_x1'];
const CHIPS_TYPE = exports.CHIPS_TYPE = [10, 50, 100, 500, 1000, 5000, 10000];
const CHIP_COST = exports.CHIP_COST = 100;
const CHIP_SELL_COST = exports.CHIP_SELL_COST = CHIP_COST * 0.9;
const CHIP_MIN_BUY = exports.CHIP_MIN_BUY = 10;
const CHIP_MIN_SELL = exports.CHIP_MIN_SELL = 10;
const CASINO_MAIN_DIMENSION = exports.CASINO_MAIN_DIMENSION = 1;
const EXIT_ANIM = exports.EXIT_ANIM = ["anim_casino_b@amb@casino@games@shared@player@", "sit_exit_left"];
const ENTER_ANIM = exports.ENTER_ANIM = ["anim_casino_b@amb@casino@games@shared@player@", "sit_enter_right"];
const CASINO_ENTER = exports.CASINO_ENTER = {
  x: 935.05,
  y: 46.23,
  z: 80.20,
  h: 112
};
const CASINO_DEALERS = exports.CASINO_DEALERS = [{
  model: 'u_f_m_casinocash_01',
  speech: 's_f_y_casino_01_asian_01',
  male: false
}, {
  model: 's_f_y_casino_01',
  speech: 's_f_y_casino_01_latina_01',
  male: false
}, {
  model: 's_m_y_casino_01',
  speech: 's_m_y_casino_01_white_01',
  male: true
}];
const CASINO_CASHIER = exports.CASINO_CASHIER = {
  name: 'Anna',
  model: 'u_f_m_casinoshop_01',
  speech: 's_f_y_casino_01_asian_02',
  dimension: CASINO_MAIN_DIMENSION,
  pedPos: {
    x: 1117.57,
    y: 221.15,
    z: -49.44,
    h: 70
  }
};
const CASINO_BUY_CHIPS_INTERFACE = exports.CASINO_BUY_CHIPS_INTERFACE = [{
  count: 10,
  class: ''
}, {
  count: 100,
  class: ''
}, {
  count: 1000,
  class: 'blue'
}, {
  count: 10000,
  class: 'purple'
}];
const getChipIndexBySum = sum => CHIPS_TYPE.findIndex(q => q === sum);
exports.getChipIndexBySum = getChipIndexBySum;
},{}],"qT91":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.redNumbers = exports.mapWinName = exports.mapWinMultiplier = exports.mapWinIcon = exports.mapWinDesc = exports.ROULETTE_VIP_TABLE_COLOR = exports.ROULETTE_TABLE_SEATS_POSITIONS = exports.ROULETTE_TABLE_POSITIONS = exports.ROULETTE_TABLE_MODEL = exports.ROULETTE_TABLE_ENTER_DISTANCE_SEAT = exports.ROULETTE_TABLE_ENTER_DISTANCE = exports.ROULETTE_TABLE_COLOR = exports.ROULETTE_SUM_AS_BIG_WIN = exports.ROULETTE_STATENAMES_ID = exports.ROULETTE_STATENAMES = exports.ROULETTE_RULES = exports.ROULETTE_MAX_BETS_TABLE = exports.ROULETTE_MAX_BETS = exports.ROULETTE_MAP_ANIMS = exports.ROULETTE_BET_TIME = exports.GRID_START_Z = void 0;
var _main = require("./main");
const GRID_START_Z = exports.GRID_START_Z = 0.9448;
const ROULETTE_STATENAMES = exports.ROULETTE_STATENAMES = ['Ожидание', 'Ставки сделаны', 'Запуск...'];
var ROULETTE_STATENAMES_ID;
(function (ROULETTE_STATENAMES_ID) {
  ROULETTE_STATENAMES_ID[ROULETTE_STATENAMES_ID["WAIT"] = 0] = "WAIT";
  ROULETTE_STATENAMES_ID[ROULETTE_STATENAMES_ID["BET_END"] = 1] = "BET_END";
  ROULETTE_STATENAMES_ID[ROULETTE_STATENAMES_ID["START"] = 2] = "START";
})(ROULETTE_STATENAMES_ID || (exports.ROULETTE_STATENAMES_ID = ROULETTE_STATENAMES_ID = {}));
const ROULETTE_MAX_BETS = exports.ROULETTE_MAX_BETS = 3;
const ROULETTE_MAX_BETS_TABLE = exports.ROULETTE_MAX_BETS_TABLE = 30;
const ROULETTE_TABLE_MODEL = exports.ROULETTE_TABLE_MODEL = 'vw_prop_casino_roulette_01';
const ROULETTE_TABLE_ENTER_DISTANCE = exports.ROULETTE_TABLE_ENTER_DISTANCE = 3;
const ROULETTE_TABLE_ENTER_DISTANCE_SEAT = exports.ROULETTE_TABLE_ENTER_DISTANCE_SEAT = 1;
const ROULETTE_TABLE_COLOR = exports.ROULETTE_TABLE_COLOR = 0;
const ROULETTE_VIP_TABLE_COLOR = exports.ROULETTE_VIP_TABLE_COLOR = 1;
const ROULETTE_BET_TIME = exports.ROULETTE_BET_TIME = 30;
const ROULETTE_TABLE_SEATS_POSITIONS = exports.ROULETTE_TABLE_SEATS_POSITIONS = [[-0.20, -1.0, 0.70, 0, -0.20, -0.84, 0], [0.77, -1.05, 0.70, 0, 0.78, -0.825, 0], [1.50, -0.14, 0.70, 90, 1.35, -0.10, 100], [0.76, 0.72, 0.70, 180, 0.78, 0.63, 180]];
const ROULETTE_SUM_AS_BIG_WIN = exports.ROULETTE_SUM_AS_BIG_WIN = 1000;
const ROULETTE_TABLE_POSITIONS = exports.ROULETTE_TABLE_POSITIONS = [{
  position: new mp.Vector3(1133.791, 262.3499, -52.04345),
  heading: 208,
  chipTypePrices: [100, 500, 1000],
  isVip: true,
  dimension: _main.CASINO_MAIN_DIMENSION,
  dealer: 1
}, {
  position: new mp.Vector3(1129.629, 266.5121, -52.04345),
  heading: 40,
  chipTypePrices: [100, 500, 1000],
  isVip: true,
  dimension: _main.CASINO_MAIN_DIMENSION,
  dealer: 1
}, {
  position: new mp.Vector3(1148.843, 251.3866, -52.04153),
  heading: 273,
  chipTypePrices: [100, 500, 1000],
  isVip: true,
  dimension: _main.CASINO_MAIN_DIMENSION,
  dealer: 1
}, {
  position: new mp.Vector3(1144.333, 247.603, -52.04153),
  heading: 115,
  chipTypePrices: [100, 500, 1000],
  isVip: true,
  dimension: _main.CASINO_MAIN_DIMENSION,
  dealer: 1
}, {
  position: new mp.Vector3(1148.714, 269.6028, -52.83587),
  heading: 45,
  chipTypePrices: [10, 50, 100],
  isVip: false,
  dimension: _main.CASINO_MAIN_DIMENSION,
  dealer: 2
}, {
  position: new mp.Vector3(1149.343, 262.3951, -52.83587),
  heading: 222,
  chipTypePrices: [10, 50, 100],
  isVip: false,
  dimension: _main.CASINO_MAIN_DIMENSION,
  dealer: 2
}];
const mapWinMultiplier = exports.mapWinMultiplier = {
  'number': 35,
  'trio': 11,
  'dozen': 2,
  'small': 1,
  'even': 1,
  'red': 1,
  'black': 1,
  'odd': 1,
  'big': 1,
  'column': 2,
  'split': 17,
  'five-numbers': 6,
  'six-numbers': 5,
  'square': 8,
  'straight': 11
};
const mapWinName = exports.mapWinName = {
  'number': 'Число',
  'trio': 'Трио',
  'dozen': 'Дюжина',
  'small': 'Малые',
  'even': 'Четные',
  'red': 'Красные',
  'black': 'Чёрные',
  'odd': 'Нечетные',
  'big': 'Большие',
  'column': 'Колонна',
  'split': 'Сплит',
  'five-numbers': '5 Номеров',
  'six-numbers': '6 Номеров',
  'square': 'Каре',
  'straight': 'Стрит'
};
const mapWinDesc = exports.mapWinDesc = {
  'number': 'Число',
  'trio': 'Трио',
  'dozen': 'Дюжина',
  'small': 'Малые',
  'even': 'Четные',
  'red': 'Красные',
  'black': 'Чёрные',
  'odd': 'Нечетные',
  'big': 'Большие',
  'column': 'Колонна',
  'split': 'Сплит',
  'five-numbers': '5 Номеров',
  'six-numbers': '6 Номеров',
  'square': 'Каре',
  'straight': 'Стрит'
};
const mapWinIcon = exports.mapWinIcon = {
  'number': 'info-r-09',
  'trio': 'info-r-07',
  'dozen': 'info-r-03',
  'small': 'info-r-01',
  'even': 'info-r-02',
  'red': 'info-r-02',
  'black': 'info-r-02',
  'odd': 'info-r-02',
  'big': 'info-r-01',
  'column': 'info-r-03',
  'split': 'info-r-08',
  'five-numbers': 'info-r-04',
  'six-numbers': 'info-r-04',
  'square': 'info-r-06',
  'straight': 'info-r-05'
};
const createRulesObject = (title, type, winNumbers) => ({
  multiplier: mapWinMultiplier[type],
  title,
  type,
  winNumbers
});
const ROULETTE_RULES = exports.ROULETTE_RULES = {
  '0-1-37': createRulesObject('Трио', 'trio', [0, 1, 37]),
  '1-36-37': createRulesObject('Трио', 'trio', [1, 36, 37]),
  '1-2-36': createRulesObject('Трио', 'trio', [1, 2, 36]),
  '0-37': createRulesObject('Сплит', 'split', [0, 37]),
  '1-37': createRulesObject('Сплит', 'split', [1, 37]),
  '1-36': createRulesObject('Сплит', 'split', [1, 36]),
  '2-36': createRulesObject('Сплит', 'split', [2, 36]),
  '50': createRulesObject('Сплит', 'split', [36, 37]),
  '36-37': createRulesObject('Сплит', 'split', [36, 37]),
  '36': createRulesObject('Double zero', 'number', [36]),
  '37': createRulesObject('Zero', 'number', [37]),
  '38': createRulesObject('Дюжина 1', 'dozen', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  '39': createRulesObject('Дюжина 2', 'dozen', [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]),
  '40': createRulesObject('Дюжина 3', 'dozen', [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]),
  '41': createRulesObject('Малые', 'small', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]),
  '42': createRulesObject('Четные', 'even', [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]),
  '43': createRulesObject('Красные', 'red', [0, 2, 4, 6, 8, 11, 13, 15, 17, 18, 20, 22, 24, 26, 29, 31, 33, 35]),
  '44': createRulesObject('Черные', 'black', [1, 3, 5, 7, 9, 10, 12, 14, 16, 19, 21, 23, 25, 27, 28, 30, 32, 34]),
  '45': createRulesObject('Нечетные', 'odd', [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]),
  '46': createRulesObject('Большие', 'big', [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]),
  '47': createRulesObject('Колонна 1', 'column', [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]),
  '48': createRulesObject('Колонна 2', 'column', [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34]),
  '49': createRulesObject('Колонна 3', 'column', [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]),
  '50-51': createRulesObject('5 номеров', 'five-numbers', [37, 38, 0, 1, 2])
};
const redNumbers = exports.redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
for (let i = 0; i < 36; i++) {
  ROULETTE_RULES[i] = createRulesObject(`${i + 1} ${redNumbers.includes(i + 1) ? 'красное' : 'черное'}`, 'number', [i]);
}
for (let i = 0; i < 11; i++) {
  const ix3 = i * 3;
  const rulesSquareFirst = [ix3, ix3 + 1, ix3 + 3, ix3 + 4];
  const rulesSquareSecond = [ix3 + 1, ix3 + 2, ix3 + 4, ix3 + 5];
  ROULETTE_RULES[rulesSquareFirst.join('-')] = createRulesObject('Каре', 'square', rulesSquareFirst);
  ROULETTE_RULES[rulesSquareSecond.join('-')] = createRulesObject('Каре', 'square', rulesSquareSecond);
  const splitFirst = [ix3, ix3 + 3];
  const splitSecond = [ix3 + 1, ix3 + 4];
  const splitThree = [ix3 + 2, ix3 + 5];
  ROULETTE_RULES[splitFirst.join('-')] = createRulesObject('Сплит', 'split', splitFirst);
  ROULETTE_RULES[splitSecond.join('-')] = createRulesObject('Сплит', 'split', splitSecond);
  ROULETTE_RULES[splitThree.join('-')] = createRulesObject('Сплит', 'split', splitThree);
}
for (let i = 0; i < 12; i++) {
  const ix3 = i * 3;
  const splitFirst = [ix3, ix3 + 1];
  const splitSecond = [ix3 + 1, ix3 + 2];
  ROULETTE_RULES[splitFirst.join('-')] = createRulesObject('Сплит', 'split', splitFirst);
  ROULETTE_RULES[splitSecond.join('-')] = createRulesObject('Сплит', 'split', splitSecond);
}
for (let i = 51; i < 63; i++) {
  const j = i - 51;
  const jx3 = j * 3;
  ROULETTE_RULES[i] = createRulesObject('Стрит', 'straight', [jx3, jx3 + 1, jx3 + 2]);
  if (i !== 62) {
    const nextJ = (i - 50) * 3;
    ROULETTE_RULES[`${i}-${i + 1}`] = createRulesObject('6 номеров', 'six-numbers', [jx3, jx3 + 1, jx3 + 2, nextJ, nextJ + 1, nextJ + 2]);
  }
}
const getChipTypeByBalance = (table, balance) => {
  for (let i = table.chipTypePrices.length - 1; i >= 0; i--) {
    const chipPrice = table.chipTypePrices[i];
    if (balance >= chipPrice) {
      return i;
    }
  }
};
const ROULETTE_MAP_ANIMS = exports.ROULETTE_MAP_ANIMS = {
  [36]: 1,
  [26]: 2,
  [9]: 3,
  [24]: 4,
  [28]: 5,
  [11]: 6,
  [7]: 7,
  [18]: 8,
  [12]: 37,
  [17]: 10,
  [5]: 11,
  [20]: 12,
  [32]: 13,
  [15]: 14,
  [3]: 15,
  [22]: 16,
  [34]: 17,
  [13]: 18,
  [1]: 19,
  [37]: 20,
  [27]: 21,
  [8]: 22,
  [25]: 23,
  [29]: 24,
  [10]: 25,
  [6]: 26,
  [19]: 27,
  [31]: 28,
  [16]: 29,
  [4]: 30,
  [21]: 31,
  [33]: 32,
  [14]: 33,
  [2]: 34,
  [23]: 35,
  [35]: 36,
  [30]: 9,
  [0]: 38
};
},{"./main":"FJpA"}],"n8Tl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CAMERA_WAYPOINTS = void 0;
const CAMERA_WAYPOINTS = exports.CAMERA_WAYPOINTS = [{
  id: "startcamera1",
  fov: 35,
  coords: [{
    x: -2385.51,
    y: -1115.05,
    z: 5.94,
    rx: -22.391366958618164,
    ry: 1.1542429234623341e-7,
    rz: -86.6463394165039,
    time: 35000
  }, {
    x: -2155.40,
    y: -1081.47,
    z: 9.77,
    rx: 2.9186275005340576,
    ry: 0,
    rz: -83.64603424072266,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera2",
  fov: 35,
  coords: [{
    x: -516.98,
    y: -292.70,
    z: 38.75,
    rx: 2.1751081943511963,
    ry: 1.334983057432737e-8,
    rz: -5.627867698669434,
    time: 35000
  }, {
    x: -508.20,
    y: -250.83,
    z: 39.58,
    rx: 0.25984033942222595,
    ry: 0,
    rz: 38.14142608642578,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera3",
  fov: 35,
  coords: [{
    x: -287.23,
    y: -198.14,
    z: 124.66,
    rx: -6.200956344604492,
    ry: 2.1469951150265842e-7,
    rz: -159.35011291503906,
    time: 35000
  }, {
    x: -384.18,
    y: -491.42,
    z: 127.88,
    rx: 14.45740795135498,
    ry: 0,
    rz: -137.13641357421875,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera4",
  fov: 15,
  coords: [{
    x: 540.50,
    y: -79.94,
    z: 391.86,
    rx: -15.538573265075684,
    ry: 0,
    rz: 137.52024841308594,
    time: 35000
  }, {
    x: 36.69,
    y: -264.24,
    z: 235.09,
    rx: -10.157404899597168,
    ry: 4.3368387991904456e-7,
    rz: 163.99737548828125,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera5",
  fov: 25,
  coords: [{
    x: 327.73,
    y: 989.86,
    z: 253.85,
    rx: 11.139458656311035,
    ry: 0,
    rz: -62.17083740234375,
    time: 35000
  }, {
    x: 958.73,
    y: 995.20,
    z: 297.34,
    rx: -5.59882926940918,
    ry: 0,
    rz: 151.57443237304688,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera6",
  fov: 35,
  coords: [{
    x: 796.63,
    y: 50.97,
    z: 99.52,
    rx: -6.146016597747803,
    ry: 1.3417328581510901e-8,
    rz: -88.46786499023438,
    time: 35000
  }, {
    x: 889.00,
    y: -9.23,
    z: 119.43,
    rx: -6.738712787628174,
    ry: -2.1492820678759017e-7,
    rz: -42.83810043334961,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera7",
  fov: 35,
  coords: [{
    x: 658.17,
    y: -613.90,
    z: 18.78,
    rx: -12.886061668395996,
    ry: 0,
    rz: -76.17179107666016,
    time: 35000
  }, {
    x: 697.78,
    y: -615.05,
    z: 21.86,
    rx: -18.176006317138672,
    ry: -4.4930598619430384e-7,
    rz: -112.25457000732422,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera8",
  fov: 35,
  coords: [{
    x: 79.17,
    y: -1338.28,
    z: 36.50,
    rx: 14.298660278320312,
    ry: 0,
    rz: 16.176340103149414,
    time: 35000
  }, {
    x: 44.45,
    y: -1306.65,
    z: 35.87,
    rx: -7.545614242553711,
    ry: 0,
    rz: 88.94438934326172,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera9",
  fov: 35,
  coords: [{
    x: -1438.16,
    y: 949.80,
    z: 212.79,
    rx: -5.268324851989746,
    ry: 2.1434885866256081e-7,
    rz: -136.2998809814453,
    time: 35000
  }, {
    x: -1396.11,
    y: 817.84,
    z: 215.70,
    rx: -2.4864981174468994,
    ry: -1.0682227014058299e-7,
    rz: -138.16122436523438,
    time: 0
  }],
  cameraForLoadScreen: true
}, {
  id: "startcamera10",
  fov: 35,
  coords: [{
    x: -1110.90,
    y: -876.24,
    z: 15.76,
    rx: -17.5274715423584,
    ry: 4.4767094209419156e-7,
    rz: -77.09341430664062,
    time: 35000
  }, {
    x: -1073.90,
    y: -859.63,
    z: 15.78,
    rx: 14.139208793640137,
    ry: -4.4022328893333906e-7,
    rz: -71.2710952758789,
    time: 0
  }],
  cameraForLoadScreen: true
}];
},{}],"mcyQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drawCameraConf = exports.drawCamera = exports.CamerasManager = void 0;
var _cameraWaypoints = require("../../shared/cameraWaypoints");
var _camera = require("./camera");
var _system = require("./system");
const player = mp.players.local;
const CamerasManagerInfo = {
  gameplayCamera: null,
  activeCamera: null,
  interpCamera: null,
  interpActive: false,
  _events: new Map(),
  cameras: new Map([['testCamera', mp.cameras.new('default', new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0), 50.0)]]),
  requestCol: false
};
let qaz = 0;
mp.events.add('render', () => {
  qaz++;
  if (qaz == 11) qaz = 0;
  if (CamerasManagerInfo.activeCamera && mp.cameras.exists(CamerasManagerInfo.activeCamera) && qaz === 10) {
    mp.game.streaming.setFocusArea(CamerasManagerInfo.activeCamera.getCoord().x, CamerasManagerInfo.activeCamera.getCoord().y, CamerasManagerInfo.activeCamera.getCoord().z, 0.0, 0.0, 0.0);
    CamerasManagerInfo.requestCol = true;
  } else if ((!CamerasManagerInfo.activeCamera || !mp.cameras.exists(CamerasManagerInfo.activeCamera)) && CamerasManagerInfo.requestCol) {
    mp.game.invoke('0x31B73D1EA9F01DA2');
    CamerasManagerInfo.requestCol = false;
  }
  if (CamerasManagerInfo.activeCamera && mp.cameras.exists(CamerasManagerInfo.activeCamera) && CamerasManagerInfo.interpCamera && CamerasManager.doesExist(CamerasManagerInfo.interpCamera) && !CamerasManagerInfo.activeCamera.isInterpolating()) {
    CamerasManager.fireEvent('stopInterp', CamerasManagerInfo.activeCamera);
    CamerasManagerInfo.interpCamera.setActive(false);
    CamerasManagerInfo.interpCamera.destroy();
    CamerasManagerInfo.interpCamera = null;
  }
});
const cameraSerialize = camera => {
  camera.setActiveCamera = toggle => {
    CamerasManager.setActiveCamera(camera, toggle);
  };
  camera.setActiveCameraWithInterp = (position, rotation, duration, easeLocation, easeRotation) => {
    CamerasManager.setActiveCameraWithInterp(camera, position, rotation, duration, easeLocation, easeRotation);
  };
};
class CamerasManager {
  static on(eventName, eventFunction) {
    if (CamerasManagerInfo._events.has(eventName)) {
      const event = CamerasManagerInfo._events.get(eventName);
      if (!event.has(eventFunction)) {
        event.add(eventFunction);
      }
    } else {
      CamerasManagerInfo._events.set(eventName, new Set([eventFunction]));
    }
  }
  static fireEvent(eventName, ...args) {
    if (CamerasManagerInfo._events.has(eventName)) {
      const event = CamerasManagerInfo._events.get(eventName);
      event.forEach(eventFunction => {
        eventFunction(...args);
      });
    }
  }
  static getCamera(name) {
    const camera = CamerasManagerInfo.cameras.get(name);
    if (typeof camera.setActiveCamera !== 'function') {
      cameraSerialize(camera);
    }
    return camera;
  }
  static setCamera(name, camera) {
    CamerasManagerInfo.cameras.set(name, camera);
  }
  static hasCamera(name) {
    return CamerasManagerInfo.cameras.has(name);
  }
  static destroyCamera(camera) {
    if (this.doesExist(camera)) {
      if (camera === this.activeCamera) {
        this.activeCamera.setActive(false);
      }
      camera.destroy();
    }
  }
  static createCamera(name, type, position, rotation, fov, target, mode, time) {
    const cam = mp.cameras.new(type, position, target ? new mp.Vector3(0, 0, 0) : rotation, fov);
    if (target) {
      let int = setInterval(() => {
        let targetEnt;
        if (mode == "Смотреть на ТС") targetEnt = mp.vehicles.atRemoteId(target);
        if (mode == "Смотреть на игрока") targetEnt = mp.players.atRemoteId(target);
        if (targetEnt) cam.pointAt(targetEnt.handle, 0, 0, 0, true);
      }, 10);
      setTimeout(() => {
        clearInterval(int);
      }, time);
    }
    cameraSerialize(cam);
    CamerasManagerInfo.cameras.set(name, cam);
    return cam;
  }
  static setActiveCamera(activeCamera, toggle) {
    if (!toggle) {
      if (this.doesExist(CamerasManagerInfo.activeCamera)) {
        CamerasManagerInfo.activeCamera = null;
        activeCamera.setActive(false);
        mp.game.cam.renderScriptCams(false, false, 0, false, false);
      }
      if (this.doesExist(CamerasManagerInfo.interpCamera)) {
        CamerasManagerInfo.interpCamera.setActive(false);
        CamerasManagerInfo.interpCamera.destroy();
        CamerasManagerInfo.interpCamera = null;
      }
    } else {
      if (this.doesExist(CamerasManagerInfo.activeCamera)) {
        CamerasManagerInfo.activeCamera.setActive(false);
      }
      CamerasManagerInfo.activeCamera = activeCamera;
      activeCamera.setActive(true);
      mp.game.cam.renderScriptCams(true, false, 0, false, false);
    }
  }
  static setActiveCameraWithInterp(activeCamera, position, rotationOrTarget, duration, easeLocation, easeRotation, target, mode, time) {
    if (this.doesExist(CamerasManagerInfo.activeCamera)) {
      CamerasManagerInfo.activeCamera.setActive(false);
    }
    if (this.doesExist(CamerasManagerInfo.interpCamera)) {
      CamerasManager.fireEvent('stopInterp', CamerasManagerInfo.interpCamera);
      CamerasManagerInfo.interpCamera.setActive(false);
      CamerasManagerInfo.interpCamera.destroy();
      CamerasManagerInfo.interpCamera = null;
    }
    const interpCamera = mp.cameras.new('default', activeCamera.getCoord(), activeCamera.getRot(2), activeCamera.getFov());
    activeCamera.setCoord(position.x, position.y, position.z);
    if (target) {
      let int = setInterval(() => {
        let targetEnt;
        if (mode == "Смотреть на ТС") targetEnt = mp.vehicles.atRemoteId(target);
        if (mode == "Смотреть на игрока") targetEnt = mp.players.atRemoteId(target);
        if (targetEnt) activeCamera.pointAt(targetEnt.handle, 0, 0, 0, true);
      }, 10);
      setTimeout(() => {
        clearInterval(int);
      }, time);
    } else activeCamera.setRot(rotationOrTarget.x, rotationOrTarget.y, rotationOrTarget.z, 2);
    activeCamera.stopPointing();
    CamerasManagerInfo.activeCamera = activeCamera;
    CamerasManagerInfo.interpCamera = interpCamera;
    activeCamera.setActiveWithInterp(interpCamera.handle, duration, easeLocation, easeRotation);
    mp.game.cam.renderScriptCams(true, false, 0, false, false);
    CamerasManager.fireEvent('startInterp', CamerasManagerInfo.interpCamera);
  }
  static doesExist(camera) {
    return mp.cameras.exists(camera) && camera.doesExist();
  }
  static get activeCamera() {
    return CamerasManagerInfo.activeCamera;
  }
  static get gameplayCam() {
    if (!CamerasManagerInfo.gameplayCamera) {
      CamerasManagerInfo.gameplayCamera = mp.cameras.new("gameplay");
    }
    return CamerasManagerInfo.gameplayCamera;
  }
}
exports.CamerasManager = CamerasManager;
const drawCamera = (posStart, rotStart, posEnd, rotEnd, fov, duration, fadeEnd = false) => {
  return new Promise((resolve, reject) => {
    let camera = CamerasManager.createCamera('recordCamera', 'default', posStart, rotStart, fov, null, null, duration);
    CamerasManager.setActiveCameraWithInterp(camera, posEnd, rotEnd, duration, 0, 0, null, null, duration);
    setTimeout(async () => {
      if (fadeEnd) {
        if (typeof fadeEnd === "boolean" && fadeEnd || typeof fadeEnd === "function" && fadeEnd()) mp.game.cam.doScreenFadeOut(500), await _system.system.sleep(500);
      }
      if (CamerasManagerInfo.activeCamera) {
        mp.game.cam.renderScriptCams(false, false, 0, false, false);
        CamerasManager.destroyCamera(camera);
      }
      resolve(true);
    }, duration);
  });
};
exports.drawCamera = drawCamera;
const drawCameraConf = (conf, fadeEnd = false) => {
  return new Promise(async (resolve, reject) => {
    for (let id = 0; id < conf.coords.length; id++) {
      if (conf.coords[id + 1]) {
        if (id == 0 || CamerasManagerInfo.activeCamera) {
          const cfg1 = conf.coords[id];
          const cfg2 = conf.coords[id + 1];
          await drawCamera(new mp.Vector3(cfg1.x, cfg1.y, cfg1.z), new mp.Vector3(cfg1.rx, cfg1.ry, cfg1.rz), new mp.Vector3(cfg2.x, cfg2.y, cfg2.z), new mp.Vector3(cfg2.rx, cfg2.ry, cfg2.rz), conf.fov, cfg1.time, () => {
            if (!fadeEnd) return false;
            if (typeof fadeEnd === "boolean" && fadeEnd && !conf.coords[id + 2]) return true;
            if (typeof fadeEnd === "function" && fadeEnd() && !conf.coords[id + 2]) return true;
            return false;
          });
        }
      } else {
        const cfg1 = conf.coords[id];
        setTimeout(() => {
          resolve(null);
        }, cfg1.time);
      }
    }
  });
};
exports.drawCameraConf = drawCameraConf;
let loadScreenEnd = false;
setTimeout(async () => {
  mp.game.cam.doScreenFadeOut(500);
  await _system.system.sleep(1000);
  mp.game.cam.doScreenFadeIn(500);
  while (!loadScreenEnd) {
    let el = _system.system.randomArrayElement(_cameraWaypoints.CAMERA_WAYPOINTS.filter(q => q.cameraForLoadScreen));
    await drawCameraConf(el, () => {
      return !loadScreenEnd;
    });
    if (!loadScreenEnd) {
      await _system.system.sleep(1000);
      mp.game.cam.doScreenFadeIn(500);
    }
  }
  mp.game.cam.doScreenFadeIn(500);
  await _system.system.sleep(1000);
  mp.game.cam.doScreenFadeIn(500);
}, 1);
mp.events.add('loadingscreen:load', () => {
  loadScreenEnd = true;
  if (CamerasManagerInfo.activeCamera) {
    mp.game.cam.renderScriptCams(false, false, 0, false, false);
    CamerasManager.destroyCamera(CamerasManagerInfo.activeCamera);
    CamerasManagerInfo.activeCamera = null;
  }
  setTimeout(() => {
    _camera.cameraManager.createOrbitCam(-143.31, -730.63, 31.27, 2150);
  }, 1000);
});
},{"../../shared/cameraWaypoints":"n8Tl","./camera":"h8FB","./system":"pi2J"}],"lLPJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.needCasinoExit = void 0;
let block = false;
const needCasinoExit = () => {
  if (block) return false;
  const status = mp.game.controls.isDisabledControlJustReleased(2, 200) || mp.players.local.isDead() || mp.players.local.getHealth() <= 0;
  if (status) {
    block = true;
    setTimeout(() => {
      block = false;
    }, 5000);
  }
  return status;
};
exports.needCasinoExit = needCasinoExit;
},{}],"ngv5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVipConfig = exports.VIP_TARIFS = exports.VIP_START_DAYS = exports.VIP_PROMO_USE_DAYS = exports.PROMO_VIP_ID = exports.PACKETS = void 0;
const VIP_START_DAYS = exports.VIP_START_DAYS = 14;
const VIP_PROMO_USE_DAYS = exports.VIP_PROMO_USE_DAYS = 14;
const PROMO_VIP_ID = exports.PROMO_VIP_ID = "Sapfire";
const VIP_TARIFS = exports.VIP_TARIFS = [{
  id: "Sapfire",
  name: "Saphire",
  cost: 500,
  payday_exp: 1,
  healmultipler: true,
  afkminutes: 15,
  color: "#FFFFFF",
  jobPaymentMultiplier: 1.2,
  deathScreenTime: 120000
}, {
  id: "MediaLight",
  name: "Media Light",
  media: true,
  vipuninvite: true,
  payday_money: 1000,
  job_skill_multipler: 20,
  healmultipler: true,
  afkminutes: 25,
  color: "#FFFFFF",
  casino: true,
  deathScreenTime: 60000
}, {
  id: "MediaHard",
  name: "Media Hard",
  media: true,
  vipuninvite: true,
  payday_money: 1500,
  job_skill_multipler: 30,
  payday_exp: 1,
  healmultipler: true,
  afkminutes: 35,
  color: "#FFFFFF",
  casino: true,
  deathScreenTime: 60000
}, {
  id: "Ruby",
  name: "Ruby",
  cost: 1000,
  payday_money: 800,
  healmultipler: true,
  afkminutes: 30,
  payday_exp: 1,
  color: "#A48A57",
  jobPaymentMultiplier: 1.5,
  deathScreenTime: 90000,
  casino: true
}, {
  id: "Diamond",
  name: "Diamond",
  cost: 1500,
  payday_money: 1200,
  healmultipler: true,
  afkminutes: 45,
  payday_exp: 2,
  popular: true,
  color: "#748DC3",
  jobPaymentMultiplier: 1.8,
  deathScreenTime: 60000,
  casino: true,
  taxPropertyMaxDays: 21
}];
const getVipConfig = id => {
  return VIP_TARIFS.find(q => q.id === id);
};
exports.getVipConfig = getVipConfig;
const PACKETS = exports.PACKETS = [{
  id: 1,
  name: "Новичок",
  class: "beginner",
  price: 599,
  full_price: 800,
  items: {
    vip: {
      type: "Sapfire",
      time: 1
    },
    licenses: [{
      id: "car",
      days: 30
    }],
    money: 20000
  }
}, {
  id: 2,
  name: "Бывалый",
  class: "veteran",
  price: 899,
  full_price: 1250,
  items: {
    vip: {
      type: "Sapfire",
      time: 1
    },
    licenses: [{
      id: "car",
      days: 30
    }, {
      id: "truck",
      days: 30
    }, {
      id: "med",
      days: 30
    }],
    money: 50000
  }
}, {
  id: 3,
  name: "Богач",
  class: "rich",
  popular: true,
  price: 2499,
  full_price: 3770,
  items: {
    vip: {
      type: "Ruby",
      time: 1
    },
    licenses: [{
      id: "car",
      days: 30
    }, {
      id: "weapon",
      days: 30
    }, {
      id: "med",
      days: 30
    }],
    money: 200000,
    items: [850, 851]
  }
}, {
  id: 4,
  name: "Бизнесмен",
  class: "millionaire",
  price: 4999,
  full_price: 5500,
  items: {
    vip: {
      type: "Diamond",
      time: 1
    },
    licenses: [{
      id: "car",
      days: 30
    }, {
      id: "weapon",
      days: 30
    }, {
      id: "med",
      days: 30
    }],
    items: [850, 851],
    money: 400000
  }
}, {
  id: 5,
  name: "Набор лицензий",
  class: "veteran",
  price: 1499,
  full_price: 2000,
  items: {
    licenses: [{
      id: "reanimation",
      days: 30
    }, {
      id: "car",
      days: 30
    }, {
      id: "moto",
      days: 30
    }, {
      id: "truck",
      days: 30
    }, {
      id: "weapon",
      days: 30
    }, {
      id: "med",
      days: 30
    }]
  }
}];
},{}],"YFCp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inCasinoRoulette = exports.getRouletteObject = exports.getNearestRouletteTable = exports.enterTableHandle = void 0;
var _roulette = require("../../../shared/casino/roulette");
var _cameraManager = require("../cameraManager");
var _system = require("../system");
var _custom = require("../custom.event");
var _user = require("../user");
var _main = require("../../../shared/casino/main");
var _gui = require("../gui");
var _controls = require("../controls");
var _advanced = require("./advanced");
var _vip = require("../../../shared/vip");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const inCasinoInt = () => {
  const {
    x,
    y,
    z
  } = mp.players.local.position;
  return _main.CASINO_INTERIORS_IDS_IN.includes(mp.game.interior.getInteriorAtCoords(x, y, z));
};
const player = mp.players.local;
const inCasinoRoulette = () => {
  return currentTableData.inGame;
};
exports.inCasinoRoulette = inCasinoRoulette;
let currentTableData = {
  seatPosition: {
    x: 0,
    y: 0,
    z: 0,
    h: 0
  },
  get playerIdleAnims() {
    return [[`anim_casino_b@amb@casino@games@roulette@ped_${_user.user.isMale() ? '' : 'fe'}male@seat_${currentTableData.seat + 1}@regular@0${currentTableData.seat + 1}a@base`, 'base'], [`anim_casino_b@amb@casino@games@roulette@ped_${_user.user.isMale() ? '' : 'fe'}male@seat_${currentTableData.seat + 1}@regular@0${currentTableData.seat + 1}a@idles`, 'idle_a'], [`anim_casino_b@amb@casino@games@roulette@ped_${_user.user.isMale() ? '' : 'fe'}male@seat_${currentTableData.seat + 1}@regular@0${currentTableData.seat + 1}a@idles`, 'idle_b'], [`anim_casino_b@amb@casino@games@roulette@ped_${_user.user.isMale() ? '' : 'fe'}male@seat_${currentTableData.seat + 1}@regular@0${currentTableData.seat + 1}a@idles`, 'idle_c'], [`anim_casino_b@amb@casino@games@roulette@ped_${_user.user.isMale() ? '' : 'fe'}male@seat_${currentTableData.seat + 1}@regular@0${currentTableData.seat + 1}a@idles`, 'idle_d']];
  },
  playIdleAnim: () => {
    const anim = _system.system.randomArrayElement(currentTableData.playerIdleAnims);
    _user.user.playAnim([[anim[0], anim[1]]], false, false);
    disableExit = false;
  },
  waitBet: false,
  get wheelCamera() {
    return this.currentState !== _roulette.ROULETTE_STATENAMES_ID.WAIT;
  },
  get myBetsCount() {
    return this.myBets.length;
  },
  myBets: [],
  get currentTable() {
    return tables[this.id];
  },
  get inGame() {
    return !!this.currentTable;
  },
  id: -1,
  chipObject: null,
  seat: 0,
  currentChipSum: 10,
  get lastWinSums() {
    return lastWin.get(currentTableData.id) || [];
  },
  get currentChipType() {
    return (0, _main.getChipIndexBySum)(currentTableData.currentChipSum);
  },
  chipPosition: {
    x: 0,
    y: 0
  },
  get currentState() {
    var _this$currentTable;
    return (_this$currentTable = this.currentTable) === null || _this$currentTable === void 0 ? void 0 : _this$currentTable.state;
  },
  screenGridFirstPoint: {
    x: 0,
    y: 0
  },
  screenGridSecondPoint: {
    x: 0,
    y: 0
  },
  screenGridThreePoint: {
    x: 0,
    y: 0
  },
  screenGridFourPoint: {
    x: 0,
    y: 0
  },
  endActionTime: 0,
  lastActionTimeSeconds: 0,
  selectedIds: [],
  lastSelectedBetKey: '',
  lastCurrentBet: 0
};
const tables = [];
const getRouletteObject = id => {
  var _tables$id;
  return (_tables$id = tables[id]) === null || _tables$id === void 0 ? void 0 : _tables$id.object;
};
exports.getRouletteObject = getRouletteObject;
let lastWin = new Map();
const createTable = (position, heading, dimension, chipTypePrices, index) => {
  lastWin.set(index, []);
  const object = mp.objects.toArray().find(q => q.handle && q.getVariable('casinoId') === index);
  const pos = object ? object.getOffsetFromInWorldCoords(-0.11, 0.77, 1) : null;
  const dealer = _main.CASINO_DEALERS[_roulette.ROULETTE_TABLE_POSITIONS[index].dealer];
  tables.push({
    ped: pos ? mp.peds.new(mp.game.joaat(dealer.model), pos, _roulette.ROULETTE_TABLE_POSITIONS[index].heading + 180, _roulette.ROULETTE_TABLE_POSITIONS[index].dimension) : null,
    speech: dealer.speech,
    male: dealer.male,
    index,
    get object() {
      return mp.objects.toArray().find(q => q.handle && q.getVariable('casinoId') === this.index);
    },
    position,
    heading,
    dimension,
    chipTypePrices,
    get state() {
      var _this$object;
      return (_this$object = this.object) === null || _this$object === void 0 ? void 0 : _this$object.getVariable('casinoStatus');
    }
  });
};
setInterval(() => tables.map((table, index) => generateTableData(index, false)), 5000);
mp.events.add('entityStreamIn', async target => {
  if (target.type !== "object") return;
  if (!target.getVariable('casinoRouletteTable')) return;
  const id = target.getVariable('casinoId');
  if (typeof id !== "number") return;
  generateTableData(id, false);
});
mp.events.addDataHandler("casinoStatus", (entity, value, oldValue) => {
  if (!_user.user.login) return;
  if (entity.type !== "object") return;
  if (!entity.handle) return;
  const winNumber = entity.getVariable('winNumber');
  if (winNumber === 9999) return;
  const id = entity.getVariable('casinoId');
  if (typeof id !== "number") return;
  generateTableData(id, false);
  if (value === _roulette.ROULETTE_STATENAMES_ID.BET_END && oldValue === _roulette.ROULETTE_STATENAMES_ID.WAIT) {
    playAnimForCurrentTable(id, winNumber);
  } else if (value === _roulette.ROULETTE_STATENAMES_ID.WAIT && oldValue === _roulette.ROULETTE_STATENAMES_ID.BET_END) {
    if (currentTableData.id === id) {
      currentTableData.myBets = [];
      sendCEFTimer(_roulette.ROULETTE_BET_TIME);
    }
  }
});
const timerLoadAnimDict = setInterval(() => {
  if (!mp.game.streaming.hasAnimDictLoaded('anim_casino_b@amb@casino@games@roulette@table')) {
    mp.game.streaming.requestAnimDict('anim_casino_b@amb@casino@games@roulette@table');
    return;
  }
  if (!mp.game.streaming.hasAnimDictLoaded('anim_casino_b@amb@casino@games@roulette@dealer_female')) {
    mp.game.streaming.requestAnimDict('anim_casino_b@amb@casino@games@roulette@dealer_female');
    return;
  }
  if (!mp.game.streaming.hasAnimDictLoaded('anim_casino_b@amb@casino@games@roulette@dealer')) {
    mp.game.streaming.requestAnimDict('anim_casino_b@amb@casino@games@roulette@dealer');
    return;
  }
  clearInterval(timerLoadAnimDict);
}, 500);
const generateTableData = (tableid, current) => {
  const data = tables[tableid];
  if (!data) return;
  const object = data.object;
  if (!mp.objects.exists(data.object) || !data.object.handle) return;
  const cfg = _roulette.ROULETTE_TABLE_POSITIONS[tableid];
  if (!cfg) return;
  mp.game.invoke('0x971DA0055324D033', object.handle, cfg.isVip ? _roulette.ROULETTE_VIP_TABLE_COLOR : _roulette.ROULETTE_TABLE_COLOR);
  if (!data.ped || !mp.peds.exists(data.ped)) {
    const dealer = _main.CASINO_DEALERS[_roulette.ROULETTE_TABLE_POSITIONS[tableid].dealer];
    const pos = object.getOffsetFromInWorldCoords(-0.11, 0.77, 1);
    data.ped = mp.peds.new(mp.game.joaat(dealer.model), pos, _roulette.ROULETTE_TABLE_POSITIONS[tableid].heading + 180, _roulette.ROULETTE_TABLE_POSITIONS[tableid].dimension);
  }
  if (!data.cellsData) data.cellsData = generateTableCells(object);
  if (!data.centerGridPosition) data.centerGridPosition = object.getOffsetFromInWorldCoords(GRID_CENTER_X, GRID_CENTER_Y, _roulette.GRID_START_Z);
  if (!data.wheelCenterPosition) data.wheelCenterPosition = object.getOffsetFromInWorldCoords(-0.73, GRID_CENTER_Y - 0.15, _roulette.GRID_START_Z + 0.1);
  if (!data.cameraPosition) data.cameraPosition = object.getOffsetFromInWorldCoords(GRID_CENTER_X, -0.2, 2.5);
  if (!data.gridFirstPoint) data.gridFirstPoint = object.getOffsetFromInWorldCoords(-0.14, -0.39, _roulette.GRID_START_Z);
  if (!data.gridSecondPoint) data.gridSecondPoint = object.getOffsetFromInWorldCoords(-0.14, 0.21, _roulette.GRID_START_Z);
  if (!data.gridThreePoint) data.gridThreePoint = object.getOffsetFromInWorldCoords(0.91, 0.21, _roulette.GRID_START_Z);
  if (!data.gridFourPoint) data.gridFourPoint = object.getOffsetFromInWorldCoords(0.91, -0.39, _roulette.GRID_START_Z);
  if (!data.ballObject || !mp.objects.exists(data.ballObject)) {
    data.ballObject = mp.objects.new(mp.game.joaat('vw_prop_roulette_ball'), object.getWorldPositionOfBone(object.getBoneIndexByName('Roulette_Wheel')), {
      dimension: data.dimension
    });
    mp.game.invoke('0xEA1C610A04DB6BBB', data.ballObject.handle, false);
  }
  if (current) {
    const tableRotation = data.object.getRotation(2);
    for (let i = 0; i < 38; i++) {
      const cellData = data.cellsData[i];
      const markerPos = cellData.markerPos;
      if (typeof cellData.markerObject === 'undefined' || !mp.objects.exists(cellData.markerObject)) {
        cellData.markerObject = mp.objects.new(mp.game.joaat(i >= 36 ? 'vw_prop_vw_marker_01a' : 'vw_prop_vw_marker_02a'), markerPos, {
          dimension: -1,
          rotation: tableRotation
        });
      }
      mp.game.invoke('0xEA1C610A04DB6BBB', cellData.markerObject.handle, false);
      mp.game.invoke('0x971DA0055324D033', cellData.markerObject.handle, 3);
    }
  }
};
_roulette.ROULETTE_TABLE_POSITIONS.map((table, index) => createTable(table.position, table.heading, table.dimension, table.chipTypePrices, index));
const camera = _cameraManager.CamerasManager.hasCamera('casino_roulette') ? _cameraManager.CamerasManager.getCamera('casino_roulette') : _cameraManager.CamerasManager.createCamera('casino_roulette', 'default', new mp.Vector3(0, 0, 0), new mp.Vector3(-90, 0, 0), 50);
const getNearestRouletteTable = (target = mp.players.local) => {
  let res = -1;
  let q = tables.map(q => {
    return _objectSpread(_objectSpread({}, q), {}, {
      dist: _system.system.distanceToPos(target.position, q.position)
    });
  }).filter(q => (q.dimension == -1 || q.dimension == target.dimension) && q.dist <= _roulette.ROULETTE_TABLE_ENTER_DISTANCE);
  let z = _system.system.sortArrayObjects(q, [{
    id: 'dist',
    type: 'ASC'
  }]);
  return z.length > 0 ? z[0].index : -1;
};
exports.getNearestRouletteTable = getNearestRouletteTable;
let disableExit = false;
let seatPos = [..._roulette.ROULETTE_TABLE_SEATS_POSITIONS];
const enterTableHandle = () => {
  if (!_user.user.login) return false;
  if (currentTableData.inGame) return false;
  const nearestIndex = getNearestRouletteTable();
  if (nearestIndex > -1) {
    const nearest = tables[nearestIndex];
    const cfg = _roulette.ROULETTE_TABLE_POSITIONS[nearestIndex];
    if (cfg.isVip && (!_user.user.vipData || !_user.user.vipData.casino)) return _user.user.notify(`Данный стол предназначен для VIP членов казино. Вип членство можно получить купив ${_vip.VIP_TARIFS.filter(q => !q.media && q.casino).map(q => q.name).join(', ')}`, 'error');
    let seatsDist = [];
    seatPos.map((seat, seatid) => {
      const sitPosition = nearest.object.getOffsetFromInWorldCoords(seat[0], seat[1], seat[2]);
      const sitresPosition = nearest.object.getOffsetFromInWorldCoords(seat[4], seat[5], seat[2]);
      const heading = nearest.heading + seat[3];
      const startPos = _system.system.offsetPosition(sitPosition, heading, new mp.Vector3(0, -0.6, 0));
      if (_system.system.distanceToPos2D(startPos, player.position) <= _roulette.ROULETTE_TABLE_ENTER_DISTANCE_SEAT) seatsDist.push({
        id: seatid,
        dist: _system.system.distanceToPos(sitPosition, player.position),
        position: sitresPosition,
        startPos,
        heading,
        seatH: nearest.heading + seat[6]
      });
    });
    if (seatsDist.length === 0) return _user.user.notify('Станьте позади места которое хотите занять', 'error');
    seatsDist = _system.system.sortArrayObjects(seatsDist, [{
      id: 'dist',
      type: 'ASC'
    }]);
    _custom.CustomEvent.callServer('casino:roulette:entertable', nearestIndex, seatsDist[0].id).then(dataRes => {
      if (typeof dataRes === 'string') return _user.user.notify(dataRes, 'error');
      if (!dataRes) return _user.user.notify('Место занято', 'error');
      let [seat, countdown] = dataRes;
      if (typeof seat !== "number") return _user.user.notify('Место занято', 'error');
      const res = seatsDist.find(q => q.id === seat);
      generateTableData(nearestIndex, true);
      const table = tables[nearestIndex];
      currentTableData.id = nearestIndex;
      currentTableData.seat = seat;
      currentTableData.chipObject = mp.objects.new(mp.game.joaat(_main.CHIP_TYPE_MODELS[currentTableData.currentChipType]), table.centerGridPosition, {
        dimension: -1
      });
      camera.setCoord(table.cameraPosition.x, table.cameraPosition.y, table.cameraPosition.z);
      camera.pointAtCoord(table.centerGridPosition.x, table.centerGridPosition.y, table.centerGridPosition.z);
      _cameraManager.CamerasManager.setActiveCamera(camera, true);
      currentTableData.chipPosition = {
        x: GRID_CENTER_X,
        y: GRID_CENTER_Y
      };
      const startPos = res.startPos;
      disableExit = true;
      changeChipType(0);
      _user.user.goToCoord(startPos, res.heading).then(q => {
        if (!q) {
          player.setCoordsNoOffset(startPos.x, startPos.y, startPos.z, true, true, true);
          player.setHeading(res.heading);
        }
        mp.game.audio.playAmbientSpeechWithVoice(table.ped.handle, currentRes !== 0 ? 'MINIGAME_DEALER_REJOIN_TABLE' : 'MINIGAME_DEALER_GREET', table.speech, 'SPEECH_PARAMS_FORCE', false);
        currentRes = 0;
        let qint = setInterval(() => {
          countdown--;
          if (countdown <= 0) clearInterval(qint);
        });
        mp.game.invoke("0x1A9205C1B9EE827F", table.object.handle, false, false);
        _user.user.playEnterCasinoAnim(res.position).then(() => {
          _gui.gui.setGui('casinoroulette');
          changeChipType(0);
          if (countdown > 0) {
            sendCEFTimer(countdown);
            clearInterval(qint);
          }
          currentTableData.seatPosition = {
            x: res.position.x,
            y: res.position.y,
            z: res.position.z,
            h: res.seatH
          };
          player.setHeading(res.seatH);
          currentTableData.playIdleAnim();
          sendCEFData();
        });
      });
    });
    return true;
  }
  return false;
};
exports.enterTableHandle = enterTableHandle;
const changeChipState = state => {
  if (!currentTableData.chipObject || !mp.objects.exists(currentTableData.chipObject)) {
    return false;
  }
  currentTableData.chipObject.setVisible(state, false);
};
const changeChipType = direction => {
  if (!currentTableData.inGame || currentTableData.currentTable.state && direction) return false;
  let nextId = 0;
  if (direction != 0) {
    const currentIndex = currentTableData.currentTable.chipTypePrices.findIndex(q => q === currentTableData.currentChipSum);
    nextId = currentIndex + direction;
    if (!currentTableData.currentTable.chipTypePrices[nextId]) {
      if (direction > 0) nextId = 0;else nextId = currentTableData.currentTable.chipTypePrices.length - 1;
    }
  }
  const nextChipModel = mp.game.joaat(_main.CHIP_TYPE_MODELS[(0, _main.getChipIndexBySum)(currentTableData.currentTable.chipTypePrices[nextId])]);
  const chipExists = currentTableData.chipObject && mp.objects.exists(currentTableData.chipObject);
  if (chipExists) currentTableData.chipObject.destroy();
  const chipPosition = currentTableData.currentTable.object.getOffsetFromInWorldCoords(currentTableData.chipPosition.x, currentTableData.chipPosition.y, _roulette.GRID_START_Z);
  currentTableData.chipObject = mp.objects.new(nextChipModel, chipPosition, {
    dimension: -1
  });
  changeChipState(currentTableData.currentState === 0);
  currentTableData.currentChipSum = currentTableData.currentTable.chipTypePrices[nextId];
  if (direction != 0) sendCEFData();
};
mp.keys.bind(38, true, () => {
  changeChipType(1);
});
mp.keys.bind(40, true, () => {
  changeChipType(-1);
});
const GRID_START_X = -0.057;
const GRID_START_Y = -0.192;
const CELL_SIZE_X = 0.081;
const CELL_SIZE_X_05 = 0.081 / 2;
const CELL_SIZE_Y = 0.167;
const CELL_SIZE_Y_05 = 0.167 / 2;
const CELL_SIZE_Y_07 = CELL_SIZE_Y * 0.7;
const CELL_OFFSET_X = 0.015;
const CELL_OFFSET_Y = 0.02;
const GRID_CENTER_X = 0.39;
const GRID_CENTER_Y = -0.02;
const RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
const generateTableCells = entity => {
  const cells = [];
  for (let i = 0; i < 12; i++) {
    for (let j = 0; j < 3; j++) {
      const id = cells.length;
      const bottomOffset = i === 11 ? -CELL_OFFSET_X : 0;
      const leftOffset = j === 0 ? CELL_OFFSET_Y * 2 : 0;
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X - CELL_SIZE_X_05) - CELL_OFFSET_X, GRID_START_Y + (j * CELL_SIZE_Y - CELL_SIZE_Y_05) - CELL_OFFSET_Y + leftOffset, _roulette.GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X - CELL_SIZE_X_05) - CELL_OFFSET_X, GRID_START_Y + (j * CELL_SIZE_Y + CELL_SIZE_Y_05) + CELL_OFFSET_Y, _roulette.GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X + bottomOffset, GRID_START_Y + (j * CELL_SIZE_Y - CELL_SIZE_Y_05) - CELL_OFFSET_Y + leftOffset, _roulette.GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X + bottomOffset, GRID_START_Y + (j * CELL_SIZE_Y + CELL_SIZE_Y_05) + CELL_OFFSET_Y, _roulette.GRID_START_Z);
      const markerPos = entity.getOffsetFromInWorldCoords(GRID_START_X + i * CELL_SIZE_X, GRID_START_Y + j * CELL_SIZE_Y, _roulette.GRID_START_Z);
      cells.push({
        id,
        coloredId: RED_NUMBERS.includes(id + 1) ? `~r~${id + 1}` : `~c~${id + 1}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        markerPos,
        isActive: false,
        hoverItems: []
      });
    }
  }
  (() => {
    const firstPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, 0.107 - CELL_SIZE_Y_07 - CELL_OFFSET_Y, _roulette.GRID_START_Z);
    const secondPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, 0.107 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
    const threePoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, 0.107 - CELL_SIZE_Y_07 - CELL_OFFSET_Y, _roulette.GRID_START_Z);
    const fourPoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, 0.107 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
    const markerPos = entity.getOffsetFromInWorldCoords(-0.137, 0.107, _roulette.GRID_START_Z);
    cells.push({
      id: cells.length,
      coloredId: `~g~Double zero`,
      firstPoint,
      secondPoint,
      threePoint,
      fourPoint,
      markerPos,
      isActive: false,
      hoverItems: []
    });
  })();
  (() => {
    const firstPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, -0.148 - CELL_SIZE_Y_07 + CELL_OFFSET_Y * 0.5, _roulette.GRID_START_Z);
    const secondPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, -0.148 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
    const threePoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, -0.148 - CELL_SIZE_Y_07 + CELL_OFFSET_Y * 0.5, _roulette.GRID_START_Z);
    const fourPoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, -0.148 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
    const markerPos = entity.getOffsetFromInWorldCoords(-0.137, -0.148, _roulette.GRID_START_Z);
    cells.push({
      id: cells.length,
      coloredId: `~g~zero`,
      firstPoint,
      secondPoint,
      threePoint,
      fourPoint,
      markerPos,
      isActive: false,
      hoverItems: []
    });
  })();
  (() => {
    for (let i = 0; i < 3; i++) {
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y * 0.8 - CELL_OFFSET_Y * 0.2, _roulette.GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y_05, _roulette.GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 4, GRID_START_Y - CELL_SIZE_Y * 0.8 - CELL_OFFSET_Y * 0.2, _roulette.GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 4, GRID_START_Y - CELL_SIZE_Y_05, _roulette.GRID_START_Z);
      const hoverItems = [];
      for (let j = i * 12; j < (i + 1) * 12; j++) {
        hoverItems.push(j);
      }
      cells.push({
        id: cells.length,
        coloredId: `~c~${i * 12}-${(i + 1) * 12}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();
  (() => {
    for (let i = 0; i < 6; i++) {
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y - CELL_SIZE_Y * 0.4, _roulette.GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y * 0.6 - CELL_SIZE_Y * 0.4, _roulette.GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 2, GRID_START_Y - CELL_SIZE_Y - CELL_SIZE_Y * 0.4, _roulette.GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 2, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y * 0.6 - CELL_SIZE_Y * 0.4, _roulette.GRID_START_Z);
      const hoverItems = [];
      if (i === 0) {
        for (let j = 0; j < 18; j++) {
          hoverItems.push(j);
        }
      } else if (i === 1) {
        for (let j = 0; j < 36; j++) {
          if ((cells[j].id + 1) % 2 === 0) {
            hoverItems.push(j);
          }
        }
      } else if (i === 2) {
        for (let j = 0; j < 36; j++) {
          if (RED_NUMBERS.includes(cells[j].id + 1)) {
            hoverItems.push(j);
          }
        }
      } else if (i === 3) {
        for (let j = 0; j < 36; j++) {
          if (!RED_NUMBERS.includes(cells[j].id + 1)) {
            hoverItems.push(j);
          }
        }
      } else if (i === 4) {
        for (let j = 0; j < 36; j++) {
          if ((cells[j].id + 1) % 2 !== 0) {
            hoverItems.push(j);
          }
        }
      } else if (i === 5) {
        for (let j = 18; j < 36; j++) {
          hoverItems.push(j);
        }
      }
      cells.push({
        id: cells.length,
        coloredId: `~c~down_${i}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();
  (() => {
    for (let i = 0; i < 3; i++) {
      const rightOffset = i === 2 ? CELL_OFFSET_Y : 0;
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X - CELL_SIZE_X_05), GRID_START_Y + (i * CELL_SIZE_Y - CELL_SIZE_Y_05) + 0.0005, _roulette.GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X - CELL_SIZE_X_05), GRID_START_Y + (i * CELL_SIZE_Y + CELL_SIZE_Y_05) + rightOffset - 0.0005, _roulette.GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X * 0.4, GRID_START_Y + (i * CELL_SIZE_Y - CELL_SIZE_Y_05) + 0.0005, _roulette.GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X * 0.4, GRID_START_Y + (i * CELL_SIZE_Y + CELL_SIZE_Y_05) + rightOffset - 0.0005, _roulette.GRID_START_Z);
      const hoverItems = [];
      for (let j = 0; j < 12; j++) {
        hoverItems.push(j * 3 + i);
      }
      cells.push({
        id: cells.length,
        coloredId: `~c~Колонка: ${i + 1}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();
  (() => {
    const firstPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05, _roulette.GRID_START_Z);
    const secondPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
    const threePoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05, _roulette.GRID_START_Z);
    const fourPoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
    cells.push({
      id: cells.length,
      coloredId: `~c~Ряд: 1`,
      firstPoint,
      secondPoint,
      threePoint,
      fourPoint,
      isActive: false,
      hoverItems: [36, 37]
    });
  })();
  (() => {
    for (let i = 0; i < 12; i++) {
      const bottomOffset = i === 11 ? -CELL_OFFSET_X : 0;
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05, _roulette.GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 + CELL_SIZE_X + CELL_OFFSET_X + bottomOffset, GRID_START_Y - CELL_SIZE_Y_05, _roulette.GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 + CELL_SIZE_X + CELL_OFFSET_X + bottomOffset, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, _roulette.GRID_START_Z);
      const hoverItems = [];
      for (let j = i * 3; j < (i + 1) * 3; j++) {
        hoverItems.push(j);
      }
      cells.push({
        id: cells.length,
        coloredId: `~c~Ряд: ${i + 2}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();
  return cells;
};
const area = (x1, y1, x2, y2, x3, y3) => Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);
const check = (x1, y1, x2, y2, x3, y3, x4, y4, x, y) => area(x1, y1, x2, y2, x3, y3) + area(x1, y1, x4, y4, x3, y3) === area(x, y, x1, y1, x2, y2) + area(x, y, x2, y2, x3, y3) + area(x, y, x3, y3, x4, y4) + area(x, y, x1, y1, x4, y4);
const onActiveAction = ({
  id,
  hoverItems
}) => {
  if (!Array.isArray(hoverItems)) {
    return;
  }
  for (let i = 0; i < hoverItems.length; i++) {
    currentTableData.currentTable.cellsData[hoverItems[i]].isHovered = true;
  }
};
const onDeActiveAction = ({
  id,
  hoverItems
}) => {
  if (!Array.isArray(hoverItems)) {
    return;
  }
  for (let i = 0; i < hoverItems.length; i++) {
    currentTableData.currentTable.cellsData[hoverItems[i]].isHovered = false;
  }
};
const playAnimForCurrentTable = async (tableId, winNumber) => {
  const table = tables[tableId];
  if (!table) return;
  const check = () => {
    if (!table) return false;
    if (table.dimension !== -1 && player.dimension !== table.dimension) return false;
    if (_system.system.distanceToPos(player.position, table.position) > 80) return false;
    const tableObject = table.object;
    if (!tableObject || !tableObject.handle) return false;
    if (!table.ped || !table.ped.handle) return false;
    return true;
  };
  if (!check()) return;
  generateTableData(tableId, false);
  mp.game.audio.requestAmbientAudioBank(table.speech, true);
  const tableObject = table.object;
  if (!check()) return;
  const animId = _roulette.ROULETTE_MAP_ANIMS[winNumber];
  mp.game.invoke('0xEA1C610A04DB6BBB', table.ballObject.handle, false);
  let lib = 'anim_casino_b@amb@casino@games@roulette@table';
  let dealerDict = 'anim_casino_b@amb@casino@games@roulette@dealer' + (!table.male ? '_female' : '');
  table.ped.setNoCollision(tableObject.handle, false);
  mp.game.audio.playAmbientSpeechWithVoice(table.ped.handle, 'MINIGAME_DEALER_CLOSED_BETS', table.speech, 'SPEECH_PARAMS_FORCE', false);
  table.ped.taskPlayAnim(dealerDict, 'spin_wheel', 4.0, -1, -1, 0, 0, false, false, true);
  mp.game.invoke('0xE1E65CA8AC9C00ED', table.ped.handle, 'spin_wheel_facial', dealerDict);
  await _system.system.sleep(1500);
  if (!check()) return;
  tableObject.playAnim('loop_wheel', lib, 1000.0, false, true, false, 0, 136704);
  tableObject.forceAiAndAnimationUpdate();
  await _system.system.sleep(1500);
  if (!check()) return;
  mp.game.invoke('0xEA1C610A04DB6BBB', table.ballObject.handle, true);
  const ballPosition = tableObject.getWorldPositionOfBone(tableObject.getBoneIndexByName('Roulette_Wheel'));
  table.ballObject.setCoordsNoOffset(ballPosition.x, ballPosition.y, ballPosition.z, false, false, false);
  const tableRotation = tableObject.getRotation(2);
  table.ballObject.setRotation(tableRotation.x, tableRotation.y, tableRotation.z + 90, 2, false);
  mp.game.invoke('0xEA1C610A04DB6BBB', table.ballObject.handle, true);
  tableObject.playAnim(`exit_${animId}_wheel`, 'anim_casino_b@amb@casino@games@roulette@table', 1000, false, true, false, 0, 131072);
  table.ballObject.playAnim(`exit_${animId}_ball`, 'anim_casino_b@amb@casino@games@roulette@table', 1000, false, true, false, 0, 136704);
  await _system.system.sleep(8000);
  let last = lastWin.get(tableId);
  last.push(winNumber + 1);
  if (last.length > 7) last.splice(0, 1);
  lastWin.set(tableId, last);
  if (currentTableData.id === tableId) sendCEFData();
  if (!check()) return;
  let name = `MINIGAME_ROULETTE_BALL_`;
  if (winNumber == 36) name += '00';else if (winNumber == 37) name += '0';else name += winNumber + 1;
  mp.game.audio.playAmbientSpeechWithVoice(table.ped.handle, name, table.speech, 'SPEECH_PARAMS_FORCE', false);
  table.ped.taskPlayAnim(dealerDict, 'idle', 4.0, -1, -1, 0, 0, false, false, true);
};
mp.events.add('render', () => {
  if (!currentTableData.inGame) return;
  if (currentTableData.myBetsCount > 0) {
    disableExit = true;
  }
  _controls.disableControlGroup.allControls();
  if ((0, _advanced.needCasinoExit)() && !disableExit) {
    _custom.CustomEvent.triggerServer('casino:roulette:exittable', currentTableData.id);
    for (let cellId = 0; cellId < currentTableData.currentTable.cellsData.length; cellId++) {
      const {
        id,
        markerObject
      } = currentTableData.currentTable.cellsData[cellId];
      if (markerObject && mp.objects.exists(markerObject)) mp.game.invoke('0xEA1C610A04DB6BBB', markerObject.handle, false);
    }
    mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, currentRes !== 0 ? currentRes > 0 ? 'MINIGAME_DEALER_LEAVE_GOOD_GAME' : 'MINIGAME_DEALER_LEAVE_BAD_GAME' : 'MINIGAME_DEALER_LEAVE_NEUTRAL_GAME', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
    const handle = currentTableData.currentTable.object.handle;
    currentTableData.id = -1;
    currentTableData.seat = -1;
    if (currentTableData.chipObject && mp.objects.exists(currentTableData.chipObject)) currentTableData.chipObject.destroy();
    currentTableData.chipObject = null;
    _cameraManager.CamerasManager.setActiveCamera(camera, false);
    currentTableData.chipPosition = {
      x: 0,
      y: 0
    };
    _user.user.playExitCasinoAnim();
    _gui.gui.setGui(null);
    setTimeout(() => {
      mp.game.invoke("0x1A9205C1B9EE827F", handle, true, true);
    }, 4000);
    return;
  }
  const pointPosition = currentTableData.wheelCamera ? currentTableData.currentTable.wheelCenterPosition : currentTableData.currentTable.centerGridPosition;
  camera.setCoord(currentTableData.currentTable.cameraPosition.x, currentTableData.currentTable.cameraPosition.y, currentTableData.currentTable.cameraPosition.z);
  camera.pointAtCoord(pointPosition.x, pointPosition.y, pointPosition.z);
  _cameraManager.CamerasManager.setActiveCamera(camera, true);
  if (!disableExit) {
    let okAnim = false;
    if (!player.isPlayingAnim(_main.EXIT_ANIM[0], _main.EXIT_ANIM[1], 3) && !player.isPlayingAnim(_main.ENTER_ANIM[0], _main.ENTER_ANIM[1], 3)) {
      currentTableData.playerIdleAnims.map(anim => {
        if (okAnim || player.isPlayingAnim(anim[0], anim[1], 3) && player.getAnimCurrentTime(anim[0], anim[1]) < 0.90) okAnim = true;
      });
      if (!okAnim) currentTableData.playIdleAnim();
    }
  }
  const tableInfo = currentTableData.currentTable;
  let endActionSeconds = 0;
  if (currentTableData.endActionTime) {
    endActionSeconds = Math.floor((currentTableData.endActionTime - Date.now()) / 1000);
  } else {
    currentTableData.lastActionTimeSeconds = 0;
  }
  if (currentTableData.lastActionTimeSeconds !== endActionSeconds) {
    if (endActionSeconds >= 0) {}
    currentTableData.lastActionTimeSeconds = endActionSeconds;
  }
  if (currentTableData.currentState === 0) {
    currentTableData.screenGridFirstPoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridFirstPoint.x, tableInfo.gridFirstPoint.y, tableInfo.gridFirstPoint.z);
    currentTableData.screenGridSecondPoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridSecondPoint.x, tableInfo.gridSecondPoint.y, tableInfo.gridSecondPoint.z);
    currentTableData.screenGridThreePoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridThreePoint.x, tableInfo.gridThreePoint.y, tableInfo.gridThreePoint.z);
    currentTableData.screenGridFourPoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridFourPoint.x, tableInfo.gridFourPoint.y, tableInfo.gridFourPoint.z);
    const resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
    const mousePosition = [mp.gui.cursor.position[0] / resolution.x, mp.gui.cursor.position[1] / resolution.y];
    const gridStartY = mousePosition[1] - currentTableData.screenGridSecondPoint.y;
    const gridEndY = currentTableData.screenGridFourPoint.y - currentTableData.screenGridSecondPoint.y;
    const yRelativePos = gridStartY / gridEndY;
    const screenGridX = _system.system.lerp(currentTableData.screenGridSecondPoint.x, currentTableData.screenGridFirstPoint.x, yRelativePos);
    const gridStartX = mousePosition[0] - screenGridX;
    const gridEndX = currentTableData.screenGridThreePoint.x - screenGridX;
    const xRelativePos = gridStartX / gridEndX;
    currentTableData.chipPosition.x = Math.min(Math.max(_system.system.lerp(-0.191, 0.96, xRelativePos), -0.191), 0.96);
    currentTableData.chipPosition.y = Math.min(Math.max(_system.system.lerp(0.23, -0.426, yRelativePos), -0.426), 0.23);
    const chipPosition = currentTableData.currentTable.object.getOffsetFromInWorldCoords(currentTableData.chipPosition.x, currentTableData.chipPosition.y, _roulette.GRID_START_Z);
    currentTableData.chipObject.setCoordsNoOffset(chipPosition.x, chipPosition.y, chipPosition.z, false, false, false);
    const selectedIds = [];
    const selectedColoredIds = [];
    for (let i = 0; i < currentTableData.currentTable.cellsData.length; i++) {
      const {
        id,
        coloredId,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint
      } = currentTableData.currentTable.cellsData[i];
      if (check(firstPoint.x, firstPoint.y, threePoint.x, threePoint.y, fourPoint.x, fourPoint.y, secondPoint.x, secondPoint.y, chipPosition.x, chipPosition.y)) {
        selectedIds.push(id);
        selectedColoredIds.push(coloredId);
      } else {
        if (currentTableData.currentTable.cellsData[i].isActive) {
          onDeActiveAction(currentTableData.currentTable.cellsData[i]);
          currentTableData.currentTable.cellsData[i].isActive = false;
        }
      }
    }
    currentTableData.selectedIds = selectedIds;
    const betKey = selectedIds.join('-');
    if (currentTableData.lastSelectedBetKey !== betKey) {
      currentTableData.lastSelectedBetKey = betKey;
      const selected = _roulette.ROULETTE_RULES[betKey] ? _roulette.ROULETTE_RULES[betKey].title || betKey : '';
    }
    for (let cellId = 0; cellId < currentTableData.currentTable.cellsData.length; cellId++) {
      const {
        id,
        markerObject
      } = currentTableData.currentTable.cellsData[cellId];
      if (selectedIds.includes(id)) {
        if (!currentTableData.currentTable.cellsData[cellId].isActive) {
          onActiveAction(currentTableData.currentTable.cellsData[cellId]);
          currentTableData.currentTable.cellsData[cellId].isActive = true;
        }
      }
      if (markerObject && mp.objects.exists(markerObject)) {
        mp.game.invoke('0xEA1C610A04DB6BBB', markerObject.handle, currentTableData.currentTable.cellsData[cellId].isHovered || currentTableData.currentTable.cellsData[cellId].isActive);
      }
    }
    changeChipState(true);
  } else {
    for (let cellId = 0; cellId < currentTableData.currentTable.cellsData.length; cellId++) {
      const {
        id,
        markerObject
      } = currentTableData.currentTable.cellsData[cellId];
      if (markerObject && mp.objects.exists(markerObject)) mp.game.invoke('0xEA1C610A04DB6BBB', markerObject.handle, false);
    }
    changeChipState(false);
  }
});
let currentRes = 0;
_custom.CustomEvent.registerServer('casino:roulette:statusWinLoose', (status, sum) => {
  currentTableData.myBets = [];
  disableExit = false;
  sendCEFData();
  if (disableExit) return;
  const dict = `anim_casino_b@amb@casino@games@roulette@ped_${_user.user.isMale() ? '' : 'fe'}male@seat_${currentTableData.seat + 1}@regular@0${currentTableData.seat + 1}a@reacts@v01`;
  let anim = '';
  if (sum === 0 || status === 'draw') anim = _system.system.randomArrayElement(['reaction_impartial_var01', 'reaction_impartial_var02', 'reaction_impartial_var03']);else if (status === 'win') {
    if (sum >= _roulette.ROULETTE_SUM_AS_BIG_WIN) anim = 'reaction_great';else anim = _system.system.randomArrayElement(['reaction_good_var02', 'reaction_good_var01']);
    currentRes += sum;
    _custom.CustomEvent.triggerCef('casino:roulette:win', sum);
  } else {
    if (sum >= _roulette.ROULETTE_SUM_AS_BIG_WIN) anim = 'reaction_terrible';else anim = _system.system.randomArrayElement(['reaction_bad_var01', 'reaction_bad_var02']);
    currentRes -= sum;
    _custom.CustomEvent.triggerCef('casino:roulette:win', -sum);
  }
  disableExit = true;
  _user.user.playAnim([[dict, anim]], false, false).then(() => {
    currentTableData.playIdleAnim();
  });
});
const sendCEFData = () => {
  if (!currentTableData.inGame) return;
  let allmybets = 0;
  currentTableData.myBets.map(item => {
    allmybets += item.balance;
  });
  _custom.CustomEvent.triggerCef('casino:roulette:data', currentTableData.currentChipSum, currentTableData.lastWinSums, currentTableData.id, allmybets, currentTableData.myBets.length);
};
const sendCEFTimer = time => {
  _custom.CustomEvent.triggerCef('casino:roulette:timer', time);
};
let spamBets = false;
mp.events.add('click', (x, y, upOrDown, leftOrRight) => {
  if (upOrDown === 'down') return;
  if (!currentTableData.inGame) return;
  if (currentTableData.waitBet) return;
  if (currentTableData.currentState !== _roulette.ROULETTE_STATENAMES_ID.WAIT) return;
  if (!currentTableData.currentTable) return;
  const resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
  if (!_system.system.insidePolygon([mp.gui.cursor.position[0] / resolution.x, mp.gui.cursor.position[1] / resolution.y], [[currentTableData.screenGridFirstPoint.x, currentTableData.screenGridFirstPoint.y], [currentTableData.screenGridSecondPoint.x, currentTableData.screenGridSecondPoint.y], [currentTableData.screenGridThreePoint.x, currentTableData.screenGridThreePoint.y], [currentTableData.screenGridFourPoint.x, currentTableData.screenGridFourPoint.y]])) return;
  const betKey = currentTableData.selectedIds.join('-');
  const chipPosition = currentTableData.currentTable.object.getOffsetFromInWorldCoords(currentTableData.chipPosition.x, currentTableData.chipPosition.y, _roulette.GRID_START_Z);
  if (leftOrRight === 'left') {
    if (_user.user.chips < _main.CHIPS_TYPE[currentTableData.currentChipType]) return _user.user.notify(`Недостаточно фишек для данной ставки`, 'error');
    if (currentTableData.myBetsCount >= _roulette.ROULETTE_MAX_BETS) {
      _user.user.notify(`Сделано максимальное количество ставок`, 'error');
      mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, 'MINIGAME_DEALER_REFUSE_BETS', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
      return;
    }
    if (spamBets) {
      _user.user.notify(`Делайте ставки помедленнее`, 'error');
      mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, 'MINIGAME_DEALER_REFUSE_BETS', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
      return;
    }
    spamBets = true;
    setTimeout(() => {
      spamBets = false;
    }, 1000);
    currentTableData.waitBet = true;
    _custom.CustomEvent.callServer('casino:roulette:setBet', currentTableData.id, betKey, chipPosition.x, chipPosition.y, chipPosition.z, currentTableData.currentChipType).then(id => {
      if (id) {
        currentTableData.myBets.push({
          sid: id,
          betKey,
          balance: _main.CHIPS_TYPE[currentTableData.currentChipType]
        });
        mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, 'MINIGAME_DEALER_PLACE_BET', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
        sendCEFData();
      } else {
        mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, 'MINIGAME_DEALER_REFUSE_BETS', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
      }
      currentTableData.waitBet = false;
    });
  } else if (leftOrRight === 'right') {
    if (currentTableData.myBets.find(q => q.betKey === betKey)) {
      if (spamBets) {
        _user.user.notify(`Снимайте ставки помедленнее`, 'error');
        mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, 'MINIGAME_DEALER_REFUSE_BETS', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
        return;
      }
      spamBets = true;
      setTimeout(() => {
        spamBets = false;
      }, 1000);
      currentTableData.waitBet = true;
      _custom.CustomEvent.callServer('casino:roulette:removeBet', currentTableData.id, betKey, chipPosition.x, chipPosition.y, chipPosition.z, currentTableData.currentChipType).then(id => {
        if (id) {
          currentTableData.myBets.splice(currentTableData.myBets.findIndex(q => q.sid === id), 1);
          sendCEFData();
          mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, 'MINIGAME_DEALER_PLACE_BET', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
        } else {
          mp.game.audio.playAmbientSpeechWithVoice(currentTableData.currentTable.ped.handle, 'MINIGAME_DEALER_CLOSED_BETS', currentTableData.currentTable.speech, 'SPEECH_PARAMS_FORCE', false);
        }
        currentTableData.waitBet = false;
        if (currentTableData.myBetsCount === 0) {
          disableExit = false;
        }
      });
    }
  }
});
},{"../../../shared/casino/roulette":"qT91","../cameraManager":"mcyQ","../system":"pi2J","../custom.event":"py8h","../user":"ggMw","../../../shared/casino/main":"FJpA","../gui":"bk91","../controls":"yuOK","./advanced":"lLPJ","../../../shared/vip":"ngv5"}],"L17Q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slotMachineData = exports.rulesMap = exports.rules = exports.CASINO_SLOT_STEP = exports.CASINO_SLOT_SEAT_OFFSET = exports.CASINO_SLOT_ENTER_DISTANCE = exports.CASINO_SLOT_BETS_LIST = exports.CASINO_SLOTS_DATA = void 0;
const CASINO_SLOTS_DATA = exports.CASINO_SLOTS_DATA = [{
  hash: -1932041857,
  model: 'vw_prop_casino_slot_01a'
}, {
  hash: -1519644200,
  model: 'vw_prop_casino_slot_02a'
}, {
  hash: -430989390,
  model: 'vw_prop_casino_slot_03a'
}, {
  hash: 654385216,
  model: 'vw_prop_casino_slot_04a'
}, {
  hash: 161343630,
  model: 'vw_prop_casino_slot_05a'
}, {
  hash: 1096374064,
  model: 'vw_prop_casino_slot_06a'
}, {
  hash: 207578973,
  model: 'vw_prop_casino_slot_07a'
}, {
  hash: -487222358,
  model: 'vw_prop_casino_slot_08a'
}];
const CASINO_SLOT_SEAT_OFFSET = exports.CASINO_SLOT_SEAT_OFFSET = {
  x: -0.00,
  y: -1.0,
  z: 0.68,
  h: 0,
  sy: -1.50
};
const CASINO_SLOT_ENTER_DISTANCE = exports.CASINO_SLOT_ENTER_DISTANCE = 1.25;
const CASINO_SLOT_BETS_LIST = exports.CASINO_SLOT_BETS_LIST = [10, 50, 100, 500];
const CASINO_SLOT_STEP = exports.CASINO_SLOT_STEP = 22.5;
const rulesMap = exports.rulesMap = {
  [0]: [],
  [2]: [],
  [5]: [],
  [25]: ['6-6-6', '2-2-2'],
  [50]: ['1-1-1'],
  [75]: ['3-3-3'],
  [100]: ['7-7-7'],
  [250]: ['0-0-0'],
  [500]: ['4-4-4'],
  [1000]: ['5-5-5']
};
const rules = exports.rules = {
  '6-6-6': 25,
  '2-2-2': 25,
  '1-1-1': 25,
  '3-3-3': 25,
  '7-7-7': 25,
  '0-0-0': 25,
  '4-4-4': 25,
  '5-5-5': 25
};
const notWinNumbers = new Set();
for (let i = 0; i < 8; i++) {
  for (let j = 0; j < 8; j++) {
    for (let k = 0; k < 8; k++) {
      if (i === 4 || j === 4 || k === 4) {
        continue;
      }
      const numbers = [i, j, k];
      for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] === 6) {
          numbers[i] = 2;
        }
      }
      if (numbers.every(number => numbers[0] === number)) {
        continue;
      }
      notWinNumbers.add(numbers.join('-'));
    }
  }
}
rulesMap[0] = [...notWinNumbers];
for (let i = 0; i < 8; i++) {
  for (let j = 0; j < 8; j++) {
    if (i !== 4 && j !== 4) {
      const keys = [`4-${i}-${j}`, `4-${j}-${i}`, `${i}-4-${j}`, `${j}-4-${i}`, `${i}-${j}-4`, `${j}-${i}-4`];
      rules[keys[0]] = 2;
      rules[keys[1]] = 2;
      rules[keys[2]] = 2;
      rules[keys[3]] = 2;
      rules[keys[4]] = 2;
      rules[keys[5]] = 2;
      rulesMap[2].push(keys[0]);
      rulesMap[2].push(keys[1]);
      rulesMap[2].push(keys[2]);
      rulesMap[2].push(keys[3]);
      rulesMap[2].push(keys[4]);
      rulesMap[2].push(keys[5]);
    } else if (i !== 4) {
      const keys = [`${i}-4-4`, `4-${i}-4`, `4-4-${i}`];
      rules[keys[0]] = 5;
      rules[keys[1]] = 5;
      rules[keys[2]] = 5;
      rulesMap[5].push(keys[0]);
      rulesMap[5].push(keys[1]);
      rulesMap[5].push(keys[2]);
    }
  }
}
const rulesPercentage = [{
  value: 0,
  pct: 1685
}, {
  value: 2,
  pct: 200
}, {
  value: 5,
  pct: 100
}, {
  value: 25,
  pct: 10
}, {
  value: 50,
  pct: 0
}, {
  value: 75,
  pct: 0
}, {
  value: 100,
  pct: 0
}, {
  value: 250,
  pct: 0
}, {
  value: 500,
  pct: 0
}, {
  value: 1000,
  pct: 0
}];
const slotMachineData = exports.slotMachineData = {
  rules,
  rulesMap,
  rulesPercentage
};
},{}],"scHn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.standOffset = exports.inSlotGame = exports.getSlotPosition = exports.getNearestSlotsMachine = exports.enterSlots = exports.destroySpin = exports.currentSlotData = void 0;
var _slots = require("../../../shared/casino/slots");
var _system = require("../system");
var _custom = require("../custom.event");
var _user = require("../user");
var _main = require("../../../shared/casino/main");
var _gui = require("../gui");
var _advanced = require("./advanced");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
const getNearestSlotsMachines = (target = mp.players.local) => {
  if (player.dimension !== _main.CASINO_MAIN_DIMENSION) return null;
  let handles = [];
  const {
    x,
    y,
    z
  } = target.position;
  _slots.CASINO_SLOTS_DATA.map(({
    hash,
    model
  }) => {
    let handle = mp.game.object.getClosestObjectOfType(x, y, z, _slots.CASINO_SLOT_ENTER_DISTANCE, hash, true, true, true);
    if (handle) handles.push(handle);
  });
  if (handles.length === 0) return null;
  return _system.system.sortArrayObjects(handles.map(handle => {
    const q = getSlotPosition(handle);
    return _objectSpread(_objectSpread({
      handle
    }, q), {}, {
      dist: _system.system.distanceToPos({
        x,
        y,
        z
      }, q)
    });
  }), [{
    id: 'dist',
    type: 'ASC'
  }]);
};
const getNearestSlotsMachine = (target = mp.players.local) => {
  const q = getNearestSlotsMachines(target);
  return q ? q[0] : null;
};
exports.getNearestSlotsMachine = getNearestSlotsMachine;
const inSlotGame = () => {
  return currentSlotData.inGame;
};
exports.inSlotGame = inSlotGame;
const getSlotPosition = handle => {
  const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
  const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
  const model = mp.game.invoke('0x9F47B058362C84B5', handle);
  return {
    x: pos.x,
    y: pos.y,
    z: pos.z,
    h: heading.x,
    model
  };
};
exports.getSlotPosition = getSlotPosition;
const standOffset = handle => {
  return mp.game.invokeVector3('0x1899F328B0E12848', handle, _slots.CASINO_SLOT_SEAT_OFFSET.x, _slots.CASINO_SLOT_SEAT_OFFSET.sy, _slots.CASINO_SLOT_SEAT_OFFSET.z);
};
exports.standOffset = standOffset;
const inCasinoInt = () => {
  const {
    x,
    y,
    z
  } = mp.players.local.position;
  return _main.CASINO_INTERIORS_IDS_IN.includes(mp.game.interior.getInteriorAtCoords(x, y, z));
};
const createReels = (handle, offset) => {
  const data = getSlotPosition(handle);
  const cfg = _slots.CASINO_SLOTS_DATA.find(q => q.hash === data.model);
  const reels = mp.objects.new(mp.game.joaat(`${cfg.model}_reels`), mp.game.object.getObjectOffsetFromCoords(data.x, data.y, data.z, data.h, offset.x, offset.y, offset.z), {
    dimension: -1
  });
  reels.setCollision(false, false);
  reels.setRotation(0, 0, data.h, 2, true);
  reels.heading = data.h;
  reels.active = false;
  reels.activeWin = false;
  reels.winNumber = -1;
  return reels;
};
mp.events.add('casino:slotmachine:changeBet', isIncrease => {
  if (isIncrease) {
    changeChipType(1);
  } else {
    changeChipType(-1);
  }
});
let currentSlotData = exports.currentSlotData = {
  goToCoord: false,
  id: 0,
  handle: 0,
  waitSpinResponse: false,
  currentChipSum: _slots.CASINO_SLOT_BETS_LIST[0],
  get inGame() {
    return currentSlotData.id != 0;
  },
  get playerIdleAnims() {
    return [[`anim_casino_a@amb@casino@games@slots@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@base`, 'base'], [`anim_casino_a@amb@casino@games@slots@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_a'], [`anim_casino_a@amb@casino@games@slots@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_b'], [`anim_casino_a@amb@casino@games@slots@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_c'], [`anim_casino_a@amb@casino@games@slots@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_d']];
  },
  get playerSpinAnim() {
    return _system.system.randomArrayElement([[`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'spinning_a'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'spinning_b'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'spinning_c']]);
  },
  get playerLoseAnim() {
    return _system.system.randomArrayElement([[`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'lose_a'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'lose_b'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'lose_c'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'lose_d'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'lose_e'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'lose_f']]);
  },
  get playerWinAnim() {
    return _system.system.randomArrayElement([[`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'win_a'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'win_b'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'win_c'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'win_d'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'win_e'], [`anim_casino_a@amb@casino@games@slots@${_user.user.isMale() ? '' : 'fe'}male`, 'win_f']]);
  },
  get idleAnim() {
    let anim = _system.system.randomArrayElement(currentSlotData.playerIdleAnims);
    return [`${anim[0]}`, anim[1]];
  },
  playIdleAnim() {
    _user.user.playAnim([currentSlotData.idleAnim], false, false);
  },
  betButtonAnim: () => {
    if (!currentSlotData.betVerify) return;
    currentSlotData.waitSpinResponse = true;
    _user.user.playAnim([[`anim_casino_a@amb@casino@games@slots@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@play@v02`, "bet_one_press_spin"]], true, false);
    setTimeout(() => currentSlotData.betPlay(), 3000);
  },
  betStickAnim: () => {
    if (!currentSlotData.betVerify) return;
    currentSlotData.waitSpinResponse = true;
    _user.user.playAnim([[`anim_casino_a@amb@casino@games@slots@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@play@v02`, "bet_one_pull_spin"]], true, false);
    setTimeout(() => currentSlotData.betPlay(), 3000);
  },
  get betVerify() {
    if (!currentSlotData.inGame) return false;
    if (currentSlotData.waitSpinResponse) return false;
    if (currentSlotData.goToCoord) return false;
    if (!currentSlotData.isPlayingIldeAnim) return false;
    return true;
  },
  get isPlayingIldeAnim() {
    return !!currentSlotData.playerIdleAnims.find(anim => player.isPlayingAnim(anim[0], anim[1], 3));
  },
  betPlay: () => {
    currentSlotData.waitSpinResponse = false;
    if (_user.user.chips < currentSlotData.currentChipSum) return _user.user.notify('У вас недостаточно фишек для такой ставки', 'error');
    currentSlotData.waitSpinResponse = true;
    const animSpin = currentSlotData.playerSpinAnim;
    _user.user.playAnim([[animSpin[0], animSpin[1]]], true);
    _custom.CustomEvent.callServer('casino:slots:roll', currentSlotData.id, currentSlotData.currentChipSum).then(([winNumbers, isWin]) => {
      if (!winNumbers) return currentSlotData.waitSpinResponse = false;
      spinWin(player.remoteId, currentSlotData.id, winNumbers);
      setTimeout(() => {
        setTimeout(() => {
          currentSlotData.waitSpinResponse = false;
        }, 500);
        const anim = isWin ? currentSlotData.playerWinAnim : currentSlotData.playerLoseAnim;
        _user.user.playAnim([[anim[0], anim[1]]], true);
      }, 5500);
    });
  }
};
const changeChipType = direction => {
  if (!currentSlotData.inGame) return false;
  let nextId = 0;
  const currentIndex = _slots.CASINO_SLOT_BETS_LIST.findIndex(q => q === currentSlotData.currentChipSum);
  nextId = currentIndex + direction;
  if (!_slots.CASINO_SLOT_BETS_LIST[nextId]) {
    if (direction > 0) nextId = 0;else nextId = _slots.CASINO_SLOT_BETS_LIST.length - 1;
  }
  currentSlotData.currentChipSum = _slots.CASINO_SLOT_BETS_LIST[nextId];
  sendCEFData();
};
const sendCEFData = (exit = false) => {
  _custom.CustomEvent.triggerCef('casino:slots:data', exit ? 0 : currentSlotData.currentChipSum);
  (0, _gui.hideHud)(!exit);
};
mp.keys.bind(32, true, () => {
  currentSlotData.betButtonAnim();
});
mp.keys.bind(13, true, () => {
  currentSlotData.betStickAnim();
});
mp.keys.bind(38, true, () => {
  changeChipType(1);
});
mp.keys.bind(40, true, () => {
  changeChipType(-1);
});
const enterSlots = () => {
  if (!inCasinoInt()) return false;
  const q = getNearestSlotsMachine();
  if (!q) return false;
  const id = q.model + Math.floor(q.x) + Math.floor(q.y) + Math.floor(q.z);
  _custom.CustomEvent.callServer('casino:slots:enter', id).then(status => {
    if (typeof status === 'string') return _user.user.notify(status, 'error');
    if (!status) return _user.user.notify('Место занято', 'error');
    currentSlotData.id = id;
    currentSlotData.goToCoord = true;
    currentSlotData.handle = q.handle;
    const pos = standOffset(q.handle);
    const heading = q.h + _slots.CASINO_SLOT_SEAT_OFFSET.h;
    _user.user.goToCoord(pos, heading).then(z => {
      mp.game.invoke("0x1A9205C1B9EE827F", q.handle, false, false);
      if (!z) {
        mp.players.local.setCoordsNoOffset(pos.x, pos.y, pos.z, true, true, true);
        mp.players.local.setHeading(heading);
      }
      _user.user.playEnterCasinoAnim().then(() => {
        currentSlotData.goToCoord = false;
        currentSlotData.playIdleAnim();
        sendCEFData();
      });
    });
  });
  return true;
};
exports.enterSlots = enterSlots;
let tempIdsReels = {};
setInterval(() => {
  for (let keyq in tempIdsReels) {
    let key = keyq;
    const data = tempIdsReels[key];
    if (data) {
      const dist = _system.system.distanceToPos(data[3], player.position);
      if (dist > 20) {
        destroySpin(key);
      }
    }
  }
}, 1000);
const destroySpin = key => {
  const data = tempIdsReels[key];
  if (data) {
    if (data[0] && mp.objects.exists(data[0])) data[0].destroy();
    if (data[1] && mp.objects.exists(data[1])) data[1].destroy();
    if (data[2] && mp.objects.exists(data[2])) data[2].destroy();
    tempIdsReels[key] = null;
    delete tempIdsReels[key];
  }
};
exports.destroySpin = destroySpin;
const spinWin = (targetId, id, winNumbers) => {
  const target = mp.players.atRemoteId(targetId);
  if (!target || !target.handle) return;
  const q = getNearestSlotsMachine(target);
  if (!q || !q.handle) return;
  if (!tempIdsReels[id] || !tempIdsReels[id][0] || !tempIdsReels[id][0].handle) destroySpin(id);
  if (!tempIdsReels[id]) {
    tempIdsReels[id] = [createReels(q.handle, new mp.Vector3(-0.115, 0.047, 1.1)), createReels(q.handle, new mp.Vector3(0.005, 0.047, 1.1)), createReels(q.handle, new mp.Vector3(0.125, 0.047, 1.1)), new mp.Vector3(q.x, q.y, q.z), 0];
  }
  tempIdsReels[id][4] = 0;
  for (let i = 0; i < 3; i++) {
    tempIdsReels[id][i].winNumber = -1;
    tempIdsReels[id][i].active = true;
  }
  const [first, second, three] = winNumbers.split('-').map(winNumber => parseInt(winNumber));
  setTimeout(() => {
    if (!tempIdsReels[id] || !tempIdsReels[id][0] || !tempIdsReels[id][0].handle) return;
    tempIdsReels[id][0].winNumber = first;
    tempIdsReels[id][0].activeWin = true;
    setTimeout(() => {
      if (!tempIdsReels[id] || !tempIdsReels[id][0] || !tempIdsReels[id][0].handle) return;
      tempIdsReels[id][1].winNumber = second;
      tempIdsReels[id][1].activeWin = true;
    }, 1000);
    setTimeout(() => {
      if (!tempIdsReels[id] || !tempIdsReels[id][0] || !tempIdsReels[id][0].handle) return;
      tempIdsReels[id][2].winNumber = three;
      tempIdsReels[id][2].activeWin = true;
    }, 2000);
  }, 3000);
};
_custom.CustomEvent.registerServer('casino:slots:rollVisual', (targetId, id, winNumbers) => {
  spinWin(targetId, id, winNumbers);
});
mp.events.add('render', () => {
  for (let keyq in tempIdsReels) {
    let key = keyq;
    let data = tempIdsReels[key];
    if (data) {
      if (data[0] && data[0].handle) {
        data[4] += 10;
        for (let i = 0; i < 3; i++) {
          const reels = data[i];
          if (reels && mp.objects.exists(reels) && reels.active) {
            reels.setRotation(data[4], 0, reels.heading, 2, true);
            if (typeof reels.winNumber === 'number' && reels.winNumber !== -1 && reels.activeWin) {
              const winRotation = reels.winNumber * _slots.CASINO_SLOT_STEP;
              const reelsRotation = reels.getRotation(1);
              if (reelsRotation.x >= winRotation) {
                reels.active = false;
                reels.setRotation(winRotation, 0, reels.heading, 2, true);
              }
            }
          }
        }
      }
    }
  }
  if (!currentSlotData.inGame) return;
  mp.game.controls.disableControlAction(2, 200, true);
  if (!currentSlotData.goToCoord && !currentSlotData.waitSpinResponse && (0, _advanced.needCasinoExit)()) {
    sendCEFData(true);
    _user.user.playExitCasinoAnim().then(() => {
      mp.game.invoke("0x1A9205C1B9EE827F", currentSlotData.handle, true, true);
      _custom.CustomEvent.triggerServer('casino:slots:exit', currentSlotData.id);
      currentSlotData.id = 0;
    });
  } else {
    let okAnim = false;
    if (!currentSlotData.goToCoord && !player.isPlayingAnim(_main.EXIT_ANIM[0], _main.EXIT_ANIM[1], 3) && !player.isPlayingAnim(_main.ENTER_ANIM[0], _main.ENTER_ANIM[1], 3)) {
      currentSlotData.playerIdleAnims.map(anim => {
        if (okAnim || player.isPlayingAnim(anim[0], anim[1], 3) && player.getAnimCurrentTime(anim[0], anim[1]) < 0.90) okAnim = true;
      });
      if (!okAnim) currentSlotData.playIdleAnim();
    }
  }
});
},{"../../../shared/casino/slots":"L17Q","../system":"pi2J","../custom.event":"py8h","../user":"ggMw","../../../shared/casino/main":"FJpA","../gui":"bk91","./advanced":"lLPJ"}],"EbPE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDiceBetClassName = exports.getCasinoDiceTable = exports.DICE_TABLE_SETTINGS = exports.DICE_TABLE_MODEL = exports.DICE_TABLES_LIST = exports.DICE_PLAY_WAIT_TIME = exports.DICE_PLAY_TIME = exports.DICE_PLAY_START_TIME = exports.DICE_PLAY_COUNT = exports.DICE_BET_LIST = void 0;
var _main = require("./main");
const DICE_TABLE_MODEL = exports.DICE_TABLE_MODEL = 'vw_prop_casino_3cardpoker_01b';
const DICE_TABLES_LIST = exports.DICE_TABLES_LIST = [{
  position: new mp.Vector3(1152.331, 265.3826, -52.83587),
  heading: 222,
  dimension: _main.CASINO_MAIN_DIMENSION,
  isVip: false,
  npc: 0,
  betsSum: [10, 50, 100]
}, {
  position: new mp.Vector3(1145.331, 266.219, -52.83587),
  heading: 40,
  dimension: _main.CASINO_MAIN_DIMENSION,
  isVip: false,
  npc: 0,
  betsSum: [10, 50, 100]
}, {
  position: new mp.Vector3(1133.582, 266.858, -52.04345),
  heading: 346,
  dimension: _main.CASINO_MAIN_DIMENSION,
  isVip: false,
  betsSum: [100, 500, 1000]
}, {
  position: new mp.Vector3(1129.515, 261.9758, -52.04345),
  heading: 142,
  dimension: _main.CASINO_MAIN_DIMENSION,
  isVip: false,
  betsSum: [100, 500, 1000]
}, {
  position: new mp.Vector3(1144.333, 251.5709, -52.04153),
  heading: 98,
  dimension: _main.CASINO_MAIN_DIMENSION,
  isVip: true,
  betsSum: [1500, 2000, 2500]
}, {
  position: new mp.Vector3(1148.843, 247.0942, -52.04153),
  heading: 241,
  dimension: _main.CASINO_MAIN_DIMENSION,
  isVip: true,
  betsSum: [1500, 2000, 2500]
}];
const DICE_TABLE_SETTINGS = exports.DICE_TABLE_SETTINGS = {
  name: 'Стол с костями',
  TABLE_COLOR: {
    DEFAULT: 0,
    VIP: 1
  },
  DEALER_PERCENT: {
    NPC: 10,
    PLAYER: 5,
    TOPLAYER: 10
  },
  DRESS_POS: {
    x: 1088.35,
    y: 219.32,
    z: -50.10,
    h: 184
  },
  DRESS_MALE: [[0, 0, 0], [1, 0, 0], [3, 11, 0], [4, 10, 0], [5, 0, 0], [6, 15, 0], [7, 36, 0], [8, 7, 0], [9, 0, 0], [10, 0, 0], [11, 40, 0], [100, 8, 0], [101, 0, 0], [102, 2, 0]],
  DRESS_FEMALE: [[0, 0, 0], [1, 0, 0], [3, 0, 0], [4, 6, 0], [5, 0, 0], [6, 19, 3], [7, 0, 0], [8, 24, 0], [9, 0, 0], [10, 0, 0], [11, 28, 9], [100, -1, -1], [101, -1, -1], [102, -1, -1]],
  DEALER_OFFSET: {
    x: 0.00,
    y: 0.88,
    z: 1.0,
    h: 180
  },
  CAMERA_OFFSET: {
    PLAYER: {
      x: 0,
      y: -1.3,
      z: 3,
      rx: 0,
      ry: 0.7,
      rz: 0
    },
    CROUPIER: {
      x: 0,
      y: 1.0,
      z: 3,
      rx: 0,
      ry: -0.7,
      rz: 0
    }
  },
  SEATS: [{
    x: -1.18,
    y: 0.02,
    z: 0.68,
    h: 293,
    sx: -1.18,
    sy: 0.02,
    sz: 0.68
  }, {
    x: -0.48,
    y: -0.68,
    z: 0.68,
    h: 342,
    sx: -0.48,
    sy: -0.68,
    sz: 0.68
  }, {
    x: 0.46,
    y: -0.70,
    z: 0.68,
    h: 24,
    sx: 0.46,
    sy: -0.70,
    sz: 0.68
  }, {
    x: 1.20,
    y: -0.00,
    z: 0.68,
    h: 71,
    sx: 1.20,
    sy: -0.00,
    sz: 0.68
  }]
};
const DICE_PLAY_START_TIME = exports.DICE_PLAY_START_TIME = 15;
const DICE_PLAY_WAIT_TIME = exports.DICE_PLAY_WAIT_TIME = 20;
const DICE_PLAY_TIME = exports.DICE_PLAY_TIME = 10;
const DICE_PLAY_COUNT = exports.DICE_PLAY_COUNT = 2;
const DICE_BET_LIST = exports.DICE_BET_LIST = [{
  sum: 100,
  class: 'chip-green'
}, {
  sum: 300,
  class: 'chip-pink'
}, {
  sum: 500,
  class: 'chip-red'
}, {
  sum: 1000,
  class: 'chip-white'
}, {
  sum: 2000,
  class: 'chip-yellow'
}, {
  sum: 3000,
  class: 'chip'
}];
const getDiceBetClassName = bet => {
  var _DICE_BET_LIST$find;
  return ((_DICE_BET_LIST$find = DICE_BET_LIST.find(q => q.sum === bet)) === null || _DICE_BET_LIST$find === void 0 ? void 0 : _DICE_BET_LIST$find.class) || 'chip';
};
exports.getDiceBetClassName = getDiceBetClassName;
const getCasinoDiceTable = id => {
  return DICE_TABLES_LIST[id];
};
exports.getCasinoDiceTable = getCasinoDiceTable;
},{"./main":"FJpA"}],"UScX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nearestDiceTableObject = exports.nearestDiceTable = exports.inDiceGame = exports.enterDice = void 0;
var _dice = require("../../../shared/casino/dice");
var _user = require("../user");
var _roulette = require("../../../shared/casino/roulette");
var _checkpoints = require("../checkpoints");
var _custom = require("../custom.event");
var _system = require("../system");
var _main = require("../../../shared/casino/main");
var _cameraManager = require("../cameraManager");
var _gui = require("../gui");
var _advanced = require("./advanced");
const player = mp.players.local;
let tables = new Map();
const camera = _cameraManager.CamerasManager.hasCamera('casino_dice') ? _cameraManager.CamerasManager.getCamera('casino_dice') : _cameraManager.CamerasManager.createCamera('casino_dice', 'default', new mp.Vector3(0, 0, 0), new mp.Vector3(-90, 0, 0), 50);
const currentData = {
  block: false,
  get playerIdleAnims() {
    return [[`anim_casino_b@amb@casino@games@threecardpoker@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@base`, 'base'], [`anim_casino_b@amb@casino@games@threecardpoker@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_a'], [`anim_casino_b@amb@casino@games@threecardpoker@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_b'], [`anim_casino_b@amb@casino@games@threecardpoker@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_c'], [`anim_casino_b@amb@casino@games@threecardpoker@ped_${_user.user.isMale() ? '' : 'fe'}male@regular@01a@idles`, 'idle_d']];
  },
  get idleAnim() {
    let anim = _system.system.randomArrayElement(currentData.playerIdleAnims);
    return [`${anim[0]}`, anim[1]];
  },
  playIdleAnim: () => {
    if (currentData.block) return;
    _user.user.playAnim([currentData.idleAnim], false, false);
  },
  get inGame() {
    return !!currentData.table;
  },
  id: -1,
  seat: -1,
  get table() {
    return tables.get(currentData.id);
  },
  get object() {
    var _currentData$table;
    return (_currentData$table = currentData.table) === null || _currentData$table === void 0 ? void 0 : _currentData$table.object;
  }
};
const inDiceGame = () => {
  return currentData.inGame;
};
exports.inDiceGame = inDiceGame;
const enterDice = () => {
  let nearest = nearestDiceTable();
  if (nearest === -1) return false;
  enterTable(nearest);
  return true;
};
exports.enterDice = enterDice;
const nearestDiceTable = (target = mp.players.local) => {
  let index = -1;
  let res = [];
  _dice.DICE_TABLES_LIST.map((q, id) => {
    if (q.dimension !== -1 && q.dimension !== target.dimension) return;
    const dist = _system.system.distanceToPos(q.position, target.position);
    if (dist <= 3) {
      res.push({
        dist,
        id
      });
    }
  });
  if (res.length > 0) {
    res = _system.system.sortArrayObjects(res, [{
      id: 'dist',
      type: 'ASC'
    }]);
    index = res[0].id;
  }
  return index;
};
exports.nearestDiceTable = nearestDiceTable;
const nearestDiceTableObject = (target = mp.players.local) => {
  var _tables$get;
  let index = nearestDiceTable(target);
  if (index == -1) return null;
  return (_tables$get = tables.get(index)) === null || _tables$get === void 0 ? void 0 : _tables$get.object;
};
exports.nearestDiceTableObject = nearestDiceTableObject;
const enterTable = id => {
  const tableItem = tables.get(id);
  if (!tableItem) return;
  const object = tableItem.object;
  const table = _dice.DICE_TABLES_LIST[id];
  if (!table) return;
  let seatsDist = [];
  _dice.DICE_TABLE_SETTINGS.SEATS.map((seat, seatid) => {
    const sitPosition = object.getOffsetFromInWorldCoords(seat.x, seat.y, seat.z);
    const sitresPosition = object.getOffsetFromInWorldCoords(seat.sx, seat.sy, seat.sz);
    const heading = table.heading + seat.h;
    const startPos = _system.system.offsetPosition(sitPosition, heading, new mp.Vector3(0, -0.6, 0));
    if (_system.system.distanceToPos2D(startPos, player.position) <= _roulette.ROULETTE_TABLE_ENTER_DISTANCE_SEAT) seatsDist.push({
      id: seatid,
      dist: _system.system.distanceToPos(sitPosition, player.position),
      position: sitresPosition,
      startPos,
      heading,
      seatH: heading
    });
  });
  if (typeof table.npc !== "number") {
    const npcPos = _system.system.offsetPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(_dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.x, _dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.y, _dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.z));
    if (_system.system.distanceToPos2D(npcPos, player.position) <= _roulette.ROULETTE_TABLE_ENTER_DISTANCE_SEAT) seatsDist.push({
      id: 9999,
      dist: _system.system.distanceToPos(npcPos, player.position),
      position: npcPos,
      startPos: npcPos,
      heading: _dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.h + table.heading,
      seatH: _dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.h + table.heading
    });
  }
  if (seatsDist.length === 0) return _user.user.notify('Станьте позади места которое хотите занять', 'error');
  seatsDist = _system.system.sortArrayObjects(seatsDist, [{
    id: 'dist',
    type: 'ASC'
  }]);
  const seat = seatsDist[0].id;
  if (typeof seat !== "number") return _user.user.notify('Возле вас нет места', 'error');
  _custom.CustomEvent.callServer('casino:dice:enter', id, seat).then(status => {
    if (typeof status !== 'object') return _user.user.notify(status, 'error');
    (0, _checkpoints.playerExitColshape)();
    _gui.gui.setGuiWithEvent('casinodice', 'casino:dice:data', status, seat !== 9999);
    if (seat === 9999) {
      _user.user.goToCoord(seatsDist[0].position, seatsDist[0].heading).then(q => {
        if (!q) {
          player.setCoordsNoOffset(seatsDist[0].position.x, seatsDist[0].position.y, seatsDist[0].position.z, true, true, true);
          player.setHeading(seatsDist[0].heading);
        }
        setTimeout(() => {
          currentData.id = id;
          currentData.seat = seat;
        }, 100);
        setTimeout(() => {
          _custom.CustomEvent.triggerCef('casino:dice:ready');
        }, 1000);
      });
    } else {
      const cfgSeat = _dice.DICE_TABLE_SETTINGS.SEATS[seat];
      if (!cfgSeat) return;
      const sitPosition = object.getOffsetFromInWorldCoords(cfgSeat.x, cfgSeat.y, cfgSeat.z);
      const sitresPosition = object.getOffsetFromInWorldCoords(cfgSeat.sx, cfgSeat.sy, cfgSeat.sz);
      const heading = table.heading + cfgSeat.h;
      const startPos = _system.system.offsetPosition(sitPosition, heading, new mp.Vector3(0, -0.6, 0));
      currentData.block = true;
      _user.user.goToCoord(startPos, heading).then(q => {
        mp.game.invoke("0x1A9205C1B9EE827F", object.handle, false, false);
        if (!q) {
          player.setCoordsNoOffset(startPos.x, startPos.y, startPos.z, true, true, true);
          player.setHeading(heading);
        }
        setTimeout(() => {
          currentData.id = id;
          currentData.seat = seat;
        }, 100);
        _user.user.playEnterCasinoAnim().then(() => {
          currentData.block = false;
          currentData.playIdleAnim();
          _custom.CustomEvent.triggerCef('casino:dice:ready');
        });
      });
    }
  });
};
_dice.DICE_TABLES_LIST.map((table, id) => {
  const object = mp.objects.new(mp.game.joaat(_dice.DICE_TABLE_MODEL), table.position, {
    dimension: table.dimension,
    rotation: new mp.Vector3(0, 0, table.heading)
  });
  const npcPos = _system.system.offsetPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(_dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.x, _dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.y, _dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.z));
  const playerCamera = _system.system.offsetPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(_dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.PLAYER.x, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.PLAYER.y, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.PLAYER.z));
  const rplayerCamera = _system.system.offsetPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(_dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.PLAYER.rx, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.PLAYER.ry, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.PLAYER.rz));
  const crCamera = _system.system.offsetPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(_dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.CROUPIER.x, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.CROUPIER.y, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.CROUPIER.z));
  const rcrCamera = _system.system.offsetPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(_dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.CROUPIER.rx, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.CROUPIER.ry, _dice.DICE_TABLE_SETTINGS.CAMERA_OFFSET.CROUPIER.rz));
  tables.set(id, {
    object,
    id,
    ped: typeof table.npc === "number" ? mp.peds.new(mp.game.joaat(_main.CASINO_DEALERS[table.npc].model), npcPos, table.heading + _dice.DICE_TABLE_SETTINGS.DEALER_OFFSET.h, table.dimension) : null,
    speech: typeof table.npc === "number" ? _main.CASINO_DEALERS[table.npc].speech : null,
    male: typeof table.npc === "number" ? _main.CASINO_DEALERS[table.npc].male : true,
    playerCamera: {
      x: playerCamera.x,
      y: playerCamera.y,
      z: playerCamera.z,
      rx: rplayerCamera.x,
      ry: rplayerCamera.y,
      rz: rplayerCamera.z
    },
    crCamera: {
      x: crCamera.x,
      y: crCamera.y,
      z: crCamera.z,
      rx: rcrCamera.x,
      ry: rcrCamera.y,
      rz: rcrCamera.z
    }
  });
});
mp.events.add('render', () => {
  nearestTables.map(id => {
    const table = tables.get(id);
    const object = table.object;
    if (!object || !mp.objects.exists(object) || !object.handle) return;
    const me = currentData.seat === 9999 && currentData.id === id;
    if (table.ped && table.ped.handle || me) {
      const target = me ? player : table.ped;
      let dealerDict = 'anim_casino_b@amb@casino@games@roulette@dealer' + (!table.male ? '_female' : '');
      let ok = false;
      idleAnims.map(anim => {
        if (ok || target.isPlayingAnim(dealerDict, anim, 3) && target.getAnimCurrentTime(dealerDict, anim) < 0.90) ok = true;
      });
      if (!ok) {
        if (me) {
          _user.user.playAnim([[dealerDict, _system.system.randomArrayElement(idleAnims)]], false, false);
        } else {
          table.ped.taskPlayAnim(dealerDict, _system.system.randomArrayElement(idleAnims), 2.0, -1, -1, 0, 0, false, false, true);
        }
      }
    }
  });
  if (!currentData.inGame) return;
  if (currentData.seat !== 9999 && !player.isPlayingAnim(_main.EXIT_ANIM[0], _main.EXIT_ANIM[1], 3) && !player.isPlayingAnim(_main.ENTER_ANIM[0], _main.ENTER_ANIM[1], 3)) {
    let okAnim = false;
    currentData.playerIdleAnims.map(anim => {
      if (okAnim || player.isPlayingAnim(anim[0], anim[1], 3) && player.getAnimCurrentTime(anim[0], anim[1]) < 0.90) okAnim = true;
    });
    if (!okAnim) currentData.playIdleAnim();
  }
  mp.game.controls.disableControlAction(2, 200, true);
  if ((0, _advanced.needCasinoExit)() && !currentData.block) {
    _gui.gui.setGui(null);
    _custom.CustomEvent.triggerServer('casino:dice:exittable', currentData.id);
    const handle = currentData.table.object.handle;
    if (currentData.table.ped) mp.game.audio.playAmbientSpeechWithVoice(currentData.table.ped.handle, 'MINIGAME_DEALER_LEAVE_NEUTRAL_GAME', currentData.table.speech, 'SPEECH_PARAMS_FORCE', false);
    const oldseat = currentData.seat;
    currentData.id = -1;
    currentData.seat = -1;
    if (oldseat !== 9999) _user.user.playExitCasinoAnim();else _user.user.stopAnim();
    setTimeout(() => {
      mp.game.invoke("0x1A9205C1B9EE827F", handle, true, true);
    }, 4000);
    _cameraManager.CamerasManager.setActiveCamera(camera, false);
    return;
  } else {
    const table = tables.get(currentData.id);
    if (table) {
      const pos = currentData.seat === 9999 ? table.crCamera : table.playerCamera;
      camera.setCoord(pos.x, pos.y, pos.z);
      camera.pointAtCoord(pos.rx, pos.ry, pos.rz);
      _cameraManager.CamerasManager.setActiveCamera(camera, true);
    }
  }
});
const idleAnims = ['idle', 'idle_var01', 'idle_var02', 'idle_var03', 'idle_var04', 'idle_var05'];
const idleAnimsPlayer = ['idle', 'idle_var01', 'idle_var02', 'idle_var03', 'idle_var04', 'idle_var05'];
let nearestTables = [];
setInterval(() => {
  nearestTables = [];
  if (!_user.user.login) return;
  if (!_user.user.inInterrior) return;
  tables.forEach((table, id) => {
    const object = table.object;
    if (!object || !mp.objects.exists(object) || !object.handle) return;
    nearestTables.push(id);
    mp.game.invoke('0x971DA0055324D033', object.handle, (0, _dice.getCasinoDiceTable)(table.id).isVip ? _dice.DICE_TABLE_SETTINGS.TABLE_COLOR.VIP : _dice.DICE_TABLE_SETTINGS.TABLE_COLOR.DEFAULT);
  });
}, 2000);
},{"../../../shared/casino/dice":"EbPE","../user":"ggMw","../../../shared/casino/roulette":"qT91","../checkpoints":"XCJl","../custom.event":"py8h","../system":"pi2J","../../../shared/casino/main":"FJpA","../cameraManager":"mcyQ","../gui":"bk91","./advanced":"lLPJ"}],"XCJl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.playerExitColshape = exports.currentColshape = exports.colshapes = exports.colshapeHandle = void 0;
var _menu = require("./menu");
var _custom = require("./custom.event");
var _checkpoints = require("../../shared/checkpoints");
var _controls = require("./controls");
var _gui = require("./gui");
var _user = require("./user");
var _system = require("./system");
var _scaleform = require("./scaleform.mp");
var _roulette = require("./casino/roulette");
var _slots = require("./casino/slots");
var _dice = require("./casino/dice");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
class colshapeHandle extends _checkpoints.colshapeHandleBase {
  createMarker(position) {
    this.markers.forEach(m => {
      if (mp.markers.exists(m)) {
        m.destroy();
      }
    });
    let types = typeof this.type === "number" ? [this.type] : this.type;
    types.map(type => {
      const marker = mp.markers.new(type, position, this.radius, {
        color: this.color,
        rotation: new mp.Vector3(this.rotation, 0, 0),
        dimension: this.dimension
      });
      this.markers.push(marker);
    });
  }
  deleteMarker() {
    this.markers.forEach(m => {
      if (mp.markers.exists(m)) {
        m.destroy();
      }
    });
    this.markers = [];
  }
}
exports.colshapeHandle = colshapeHandle;
const loadedMarkers = new Map();
let colshapeMarkers = new Map();
let colshapeText = new Map();
let colshapeData = new Map();
function pushMarkerToLoaded(marker) {
  if (loadedMarkers.has(marker.id)) {
    const data = loadedMarkers.get(marker.id);
    deleteMarkerForColshape(marker.id);
    loadedMarkers.set(marker.id, {
      marker: marker,
      enabled: data.enabled
    });
  } else {
    loadedMarkers.set(marker.id, {
      marker: marker,
      enabled: false
    });
  }
}
const enableColshapes = ids => {
  for (let id of ids) {
    if (typeof id === 'string') {
      id = parseInt(id);
    }
    if (loadedMarkers.has(id)) {
      loadedMarkers.get(id).enabled = true;
    }
  }
};
_custom.CustomEvent.registerServer('colshapes:enableMarker', enableColshapes);
_custom.CustomEvent.registerServer('colshapes:disableMarker', ids => {
  for (let id of ids) {
    if (typeof id === 'string') {
      id = parseInt(id);
    }
    if (loadedMarkers.has(id)) {
      loadedMarkers.get(id).enabled = false;
    }
  }
});
_custom.CustomEvent.registerServer('colshapes:deleteMarker', id => {
  if (loadedMarkers.has(id)) {
    deleteMarkerForColshape(id);
    loadedMarkers.delete(id);
  }
});
_custom.CustomEvent.registerServer('colshapes:createMarker', data => {
  const marker = JSON.parse(data);
  pushMarkerToLoaded(marker);
});
_custom.CustomEvent.registerServer('colshapes:createMarkers', (markers, idsToEnable) => {
  markers.forEach(m => pushMarkerToLoaded(m));
  if (idsToEnable) {
    enableColshapes(idsToEnable);
  }
});
setInterval(() => {
  const toKeepIds = [];
  [...loadedMarkers.values()].filter(data => data.enabled && data.marker.t && data.marker.t !== -1).forEach(data => {
    const marker = data.marker;
    marker.p.forEach((position, index) => {
      if (_system.system.distanceToPos(position, player.position) > 100) {
        return;
      }
      const id = marker.id + index;
      const positionalMarker = _objectSpread(_objectSpread({}, marker), {}, {
        id: id,
        p: [position]
      });
      createMarkerForColshape(positionalMarker);
      toKeepIds.push(positionalMarker.id);
    });
  });
  colshapeMarkers.forEach((marker, id) => {
    if (!toKeepIds.includes(id)) {
      deleteMarkerForColshape(id);
    }
  });
}, 400);
const deleteMarkerForColshape = id => {
  if (colshapeMarkers.has(id)) {
    let m = colshapeMarkers.get(id);
    m.map(marker => {
      if (mp.markers.exists(marker)) marker.destroy();
    });
  }
  if (colshapeText.has(id)) {
    let m = colshapeText.get(id);
    if (m instanceof _scaleform.ScaleformTextMp) {
      if (_scaleform.ScaleformTextMp.exists(m)) m.destroy();
    } else {
      if (mp.labels.exists(m)) m.destroy();
    }
  }
  colshapeMarkers.delete(id);
  colshapeText.delete(id);
  colshapeData.delete(id);
};
const createMarkerForColshape = data => {
  const datastring = JSON.stringify(data);
  if (!colshapeData.has(data.id) || colshapeData.get(data.id) != datastring) {
    deleteMarkerForColshape(data.id);
    let markers = [];
    let types = typeof data.t === "number" ? [data.t] : data.t;
    types.map(type => {
      let r = data.r;
      if (type === 27 && types.includes(1)) r += 0.25;
      markers.push(mp.markers.new(type, new mp.Vector3(data.p[0].x, data.p[0].y, data.p[0].z), r, {
        color: data.c,
        dimension: data.d || 0
      }));
    });
    colshapeMarkers.set(data.id, markers);
    colshapeData.set(data.id, datastring);
    if (data.s && data.n) {
      if (data.s === "scaleform") {
        colshapeText.set(data.id, new _scaleform.ScaleformTextMp(new mp.Vector3(data.p[0].x, data.p[0].y, data.p[0].z + 1), data.n, {
          dimension: data.d || 0,
          range: 10,
          type: 'front'
        }));
      } else {
        colshapeText.set(data.id, mp.labels.new(data.n, new mp.Vector3(data.p[0].x, data.p[0].y, data.p[0].z + 1), {
          dimension: data.d || 0,
          drawDistance: 10
        }));
      }
    }
  }
};
const colshapes = exports.colshapes = {
  new: (position, message, handle, options) => new colshapeHandle(position, message, handle, options)
};
let sendEevent = false;
(0, _controls.registerHotkey)(69, () => {
  if (sendEevent) return;
  if (_gui.gui.cursor) return;
  if (_gui.gui.is_block_keys) return;
  if (player.getVariable('cuffed')) return;
  if (!inColshape && (0, _roulette.enterTableHandle)()) return;
  if (!inColshape && (0, _slots.enterSlots)()) return;
  if (!inColshape && (0, _dice.enterDice)()) return;
  if (!inColshape) return;
  if (currentColshape && currentColshape.handleClass) {
    currentColshape.handleClass.handle(player);
    return;
  }
  sendEevent = true;
  setTimeout(() => {
    sendEevent = false;
  }, 1000);
  _custom.CustomEvent.triggerServer('sendkey:69');
});
let inColshape;
let currentColshape = exports.currentColshape = void 0;
mp.events.add('playerEnterColshape', shape => {
  inColshape = true;
  exports.currentColshape = currentColshape = shape;
  if (!currentColshape) return;
  if (!currentColshape.handleClass) return;
  if (currentColshape.handleClass.predicate && !currentColshape.handleClass.predicate(player)) {
    return;
  }
  if (currentColshape.handleClass.onEnterHandler) {
    currentColshape.handleClass.onEnterHandler(player);
  }
  if (!currentColshape.handleClass.onenter) {
    let text = currentColshape.handleClass.message;
    let mes = "";
    if (text) {
      if (typeof currentColshape.handleClass.message === "string") {
        mes = currentColshape.handleClass.message;
      } else {
        const index = currentColshape.handleClass.colshapes.findIndex(col => col && mp.colshapes.exists(col) && col.id === currentColshape.id);
        mes = currentColshape.handleClass.message(player, index);
      }
      if (mes) _user.user.setHelpKey('E', mes);
    }
    return;
  }
  currentColshape.handleClass.handle(player);
});
mp.events.add('playerExitColshape', colshape => {
  inColshape = false;
  exports.currentColshape = currentColshape = null;
  _user.user.removeHelpKey();
  if (_menu.currentMenu) {
    if (!_menu.currentMenu.exitProtect) {
      _menu.currentMenu.close();
    }
  }
  if (colshape && colshape.handleClass && colshape.handleClass.onExitHandler) {
    colshape.handleClass.onExitHandler(player);
  }
});
setInterval(() => {
  if (player.getVariable('inColshape')) return;
  if (!currentColshape) return _user.user.removeHelpKey();
  if (!currentColshape.handleClass) return _user.user.removeHelpKey();
  if (!_system.system.isPointInPoints(player.position, currentColshape.handleClass.position, currentColshape.handleClass.radius * 1.5)) return playerExitColshape();
}, 3000);
mp.events.add('playerExitColshapeRecreate', shape => {
  if (currentColshape === shape) return mp.events.call('playerExitColshape', shape);
});
const playerExitColshape = () => {
  mp.events.call('playerExitColshape');
};
exports.playerExitColshape = playerExitColshape;
},{"./menu":"Aiz7","./custom.event":"py8h","../../shared/checkpoints":"mP1f","./controls":"yuOK","./gui":"bk91","./user":"ggMw","./system":"pi2J","./scaleform.mp":"p2OF","./casino/roulette":"YFCp","./casino/slots":"scHn","./casino/dice":"UScX"}],"NnaS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPurchaseableModelForAnim = exports.WALKING_STYLES = exports.SYNC_ANIM_LIST = exports.PURCHASEABLE_ANIMS = exports.ANIM_LIST = void 0;
const SYNC_ANIM_LIST = exports.SYNC_ANIM_LIST = [{
  name: "Поцелуй",
  dict1: 'mp_ped_interaction',
  anim1: 'kisses_guy_a',
  dict2: 'mp_ped_interaction',
  anim2: 'kisses_guy_b',
  dist: -1.00
}];
const getPurchaseableModelForAnim = name => {
  return PURCHASEABLE_ANIMS.find(anim => anim.name == name);
};
exports.getPurchaseableModelForAnim = getPurchaseableModelForAnim;
const PURCHASEABLE_ANIMS = exports.PURCHASEABLE_ANIMS = [{
  id: 1,
  category: "Развлечение",
  name: "Хай-кик",
  forBattlePass: true
}, {
  id: 2,
  category: "Развлечение",
  name: "На коне",
  forBattlePass: true
}, {
  id: 3,
  category: "Развлечение",
  name: "Лузер 2",
  forBattlePass: true
}, {
  id: 4,
  category: "Развлечение",
  name: "Киса",
  forBattlePass: true
}, {
  id: 5,
  category: "Танцы",
  name: "Брейк 3",
  forBattlePass: true
}, {
  id: 6,
  category: "Развлечение",
  name: "Лузер 1",
  forBattlePass: true
}, {
  id: 7,
  category: "Развлечение",
  name: "Победа!",
  forBattlePass: true
}, {
  id: 8,
  category: "Танцы",
  name: "Брейк 10",
  forBattlePass: true
}, {
  id: 9,
  category: "Танцы",
  name: "Танец утят",
  forBattlePass: true
}, {
  id: 10,
  category: "Танцы",
  name: "Twerk",
  forBattlePass: true
}, {
  id: 11,
  category: "Танцы",
  name: "Робот 2",
  forBattlePass: true
}, {
  id: 12,
  category: "Танцы",
  name: "Диско",
  forBattlePass: true
}, {
  id: 13,
  category: "Танцы",
  name: "Крутиться на одной руке",
  forBattlePass: true
}];
const ANIM_LIST = exports.ANIM_LIST = {
  "Развлечение": {
    "Бонг 1": [false, [["amb@world_human_musician@bongos@male@idle_a", "idle_a", 1]], true],
    "Бонг 2": [false, [["amb@world_human_musician@bongos@male@idle_a", "idle_b", 1]], true],
    "Играть в гольф": [false, [["rcmnigel1d", "swing_a_mark", 1]], false],
    "Гитара 1": [false, [["amb@world_human_musician@guitar@male@base", "base", 1]], true],
    "Гитара 2": [false, [["amb@world_human_musician@guitar@male@idle_a", "idle_c", 1]], true],
    "Гитара 3": [false, [["switch@trevor@guitar_beatdown", "001370_02_trvs_8_guitar_beatdown_idle_busker", 1]], true],
    "Гитара 4": [false, [["amb@world_human_musician@guitar@male@idle_a", "idle_c", 1]], true],
    "Курить (М)": [false, "WORLD_HUMAN_AA_SMOKE", false],
    "Курить 2": [false, [["timetable@gardener@smoking_joint", "smoke_idle", 1]], true],
    "Выпивать": [true, "WORLD_HUMAN_DRINKING", true],
    "Выпивать 2 (+)": [true, [["amb@world_human_drinking@beer@male@idle_a", "idle_a", 1]], true],
    "Выпивать 3 (+)": [true, [["amb@world_human_drinking@coffee@female@idle_a", "idle_a", 1]], true],
    "Выпивать 4": [false, "WORLD_HUMAN_PARTYING", true],
    "Статуя": [false, "WORLD_HUMAN_HUMAN_STATUE", true],
    "Сделать селфи": [false, [["cellphone@self@franklin@", "chest_bump", 1]], false],
    "Опорожниться": [false, [["missbigscore1switch_trevor_piss", "piss_loop", 1]], true],
    "Опорожниться 2": [false, [["rcm_epsilonism4", "peeing", 1]], true],
    "Бег на месте": [false, [["amb@world_human_jog_standing@male@base", "base", 1]], true],
    "Бег на месте 2": [false, [["move_f@runner", "idle", 1]], true],
    "Прыжки на месте": [false, [["timetable@tracy@ig_5@base", "base", 1]], true],
    "Отжиматься (М)": [false, "WORLD_HUMAN_PUSH_UPS", false],
    "Отжиматься 2": [false, [["switch@franklin@press_ups", "pressups_into", 1], ["switch@franklin@press_ups", "pressups_loop", 1]], true],
    "Качать пресс (М)": [false, "WORLD_HUMAN_SIT_UPS", false],
    "Ковыряться в саду": [false, "WORLD_HUMAN_GARDENER_PLANT", false],
    "Рок (+)": [true, [["anim@mp_player_intincarrockbodhi@rds@", "idle_a_fp", 1]], true],
    "Лайк  (+)": [true, [["anim@mp_player_intincarthumbs_upbodhi@ds@", "idle_a_fp", 1]], true],
    "Okay (+)": [true, [["anim@mp_player_intselfiedock", "idle_a", 1]], true],
    "Два пальца": [true, [["amb@code_human_in_car_mp_actions@v_sign@bodhi@rps@base", "idle_a", 1]], true],
    "Медитация": [false, [["rcmcollect_paperleadinout@", "meditiate_idle", 1]], true],
    "Заниматься йогой": [false, "WORLD_HUMAN_YOGA", true],
    "Заниматься йогой 1": [false, [["timetable@amanda@ig_4", "ig_4_idle", 1]], true],
    "Заниматься йогой 2": [false, [["amb@world_human_yoga@female@base", "base_a", 1], ["amb@world_human_yoga@female@base", "base_c", 1]], true],
    "Заниматься йогой 3": [false, [["amb@world_human_jog_standing@male@base", "base", 1]], true],
    "Притвориться мертвым": [false, [["anim@melee@machete@streamed_core@", "victim_front_takedown", 1]], false],
    "Покачиваться  (+)": [true, [["anim@mp_player_intcelebrationmale@peace", "peace", 1]], false],
    "Насмешка. Воздушный трах": [false, [["anim@mp_player_intcelebrationfemale@air_shagging", "air_shagging", 1]], false],
    "Насмешка. Воздушный поцелуй": [false, [["anim@mp_player_intcelebrationmale@blow_kiss", "blow_kiss", 1]], false],
    "Насмешка. Chicken": [false, [["anim@mp_player_intcelebrationfemale@chicken_taunt", "chicken_taunt", 1]], false],
    "Насмешка. Чпок": [false, [["anim@mp_player_intcelebrationfemale@dock", "dock", 1]], false],
    "Насмешка. Лось": [false, [["anim@mp_player_intcelebrationfemale@thumb_on_ears", "thumb_on_ears", 1]], false],
    "Насмешка Fuck you": [false, [["anim@mp_player_intcelebrationfemale@finger", "finger", 1]], false],
    "Насмешка. Клоун": [false, [["rcm_barry2", "clown_idle_0", 1], ["rcm_barry2", "clown_idle_1", 1], ["rcm_barry2", "clown_idle_2", 1], ["rcm_barry2", "clown_idle_3", 1], ["rcm_barry2", "clown_idle_4", 1], ["rcm_barry2", "clown_idle_5", 1], ["rcm_barry2", "clown_idle_6", 1]], false],
    "Сальто": [false, [["backflip@animation", "backflip_clip", 1]], true],
    "Киса": [false, [["catbackflip@animation", "catbackflip_clip", 1]], true],
    "Робот 1": [false, [["emotebandofthefort@animation", "emotebandofthefort_clip", 1]], true],
    "Лузер 1": [false, [["emotedancelosercmf@animation", "emotedancelosercmf_clip", 1]], true],
    "На коне": [false, [["emotedanceridethepony@animation", "emotedanceridethepony_clip", 1]], true],
    "Победа!": [false, [["emoteheelclick@animation", "emoteheelclick_clip", 1]], true],
    "Rich": [false, [["emotemakeitrain@animation", "emotemakeitrain_clip", 1]], true],
    "Лузер 2": [false, [["emotethumbsdown@animation", "emotethumbsdown_clip", 1]], true],
    "Лузер 3": [false, [["loosers@animation", "loosers_clip", 1]], true],
    "Хай-кик": [false, [["mmakick@animation", "mmakick_clip", 1]], true],
    "Стрелять": [false, [["timetable@ron@ig_4", "ig_4_idle_b", 1], ["timetable@ron@ig_4", "ig_4_idle_a", 1], ["timetable@ron@ig_4", "ig_4_idle_c", 1]], false],
    "Кинуть гранату": [false, [["timetable@trevor@grenade_throwing", "grenade_throwing_trev", 1]], false],
    "Прыжок": [false, [["veh@bike@chopper@front@ps", "jump_out", 1]], false]
  },
  "Социальные": {
    "Отдышаться": [false, [["timetable@reunited@ig_2", "jimmy_base", 1]], true],
    "Смотреть в бинокль": [false, "WORLD_HUMAN_BINOCULARS", false],
    "Чинить ТС": [false, [["mini@repair", "fixing_a_ped", 1]], true],
    "Поклон": [false, [["anim@mp_player_intcelebrationpaired@f_f_sarcastic", "sarcastic_right", 1]], false],
    "Хлопать в ладоши": [true, "WORLD_HUMAN_CHEERING", true],
    "Хлопать в ладоши (+)": [true, [["amb@world_human_cheering@female_d", "base", 1]], true],
    "Хлопать в ладоши 2": [false, [["amb@world_human_cheering@male_a", "base", 1]], true],
    "Хлопать в ладоши 3": [false, [["amb@world_human_cheering@male_d", "base", 1]], true],
    "Махать руками (+)": [true, [["random@car_thief@victimpoints_ig_3", "arms_waving", 1]], true],
    "Снимать на телефон": [false, "WORLD_HUMAN_MOBILE_FILM_SHOCKING", true],
    "Записывать на телефон": [false, "WORLD_HUMAN_TOURIST_MOBILE", true],
    "Сидеть в телефоне": [false, "WORLD_HUMAN_STAND_MOBILE", true],
    "Участие в разговоре": [false, "WORLD_HUMAN_HANG_OUT_STREET", true],
    "Участие в разговоре 2": [false, "WORLD_HUMAN_HANG_OUT_STREET_CLUBHOUSE", true],
    "Светить фонариком (М)": [false, "WORLD_HUMAN_SECURITY_SHINE_TORCH", true],
    "Facepalm": [false, [["anim@mp_player_intcelebrationmale@face_palm", "face_palm", 1]], false],
    "Ожидать": [false, "WORLD_HUMAN_STAND_IMPATIENT_UPRIGHT", true],
    "Ожидать 2": [false, "CODE_HUMAN_CROSS_ROAD_WAIT", true],
    "Ожидать 3": [false, [["friends@", "pickupwait", 1]], true],
    "Смотреть карту": [false, "WORLD_HUMAN_TOURIST_MAP", true],
    "Йоу! Васап!": [false, [["special_ped@clinton@convo_1@convo_1a", "im_in_hell_0", 1], ["special_ped@clinton@convo_1@convo_1b", "im_in_hell_1", 1]], false],
    "Точняк!": [false, [["special_ped@clinton@convo_2@convo_2b", "living_in_this_plastic_1", 1]], false],
    "Ты абсолютно прав!": [false, [["special_ped@clinton@convo_5@convo_5a", "you_dont_give_a_0", 1], ["special_ped@clinton@convo_5@convo_5b", "you_dont_give_a_1", 1]], false],
    "Возмущение": [false, [["special_ped@impotent_rage@convo_2@convo_2a", "i_wanna_do_hamlet_0", 1]], false],
    "Возмущение 2": [false, [["special_ped@impotent_rage@convo_3@convo_3a", "having_about_as_much_0", 1]], false],
    "Паралич": [false, [["stungun@standing", "damage", 1]], true],
    "Паралич 2": [false, [["ragdoll@human", "electrocute", 1]], false],
    "Страх": [false, [["anim@heists@fleeca_bank@hostages@ped_d@", "flinch_under_fire_outro", 1]], true],
    "Потянуться (+)": [true, [["switch@franklin@bed", "stretch_long", 1]], false],
    "Свистнуть (+)": [true, [["taxi_hail", "hail_taxi", 1]], false],
    "Свистнуть 2 (+)": [true, [["rcmnigel1c", "hailing_whistle_waive_a", 1]], false],
    "Дрочка (+)": [true, [["amb@code_human_in_car_mp_actions@wank@bodhi@rps@", "idle_a", 1]], true],
    "Радоваться": [false, [["amb@world_human_cheering@female_b", "base", 1]], true],
    "Радоваться 2": [false, [["amb@world_human_cheering@female_c", "base", 1]], true],
    "Радоваться 3": [false, [["amb@world_human_cheering@male_b", "base", 1]], true],
    "Показать мышцы": [false, [["amb@world_human_muscle_flex@arms_at_side@idle_a", "idle_c"]], true],
    "Показать мышцы 2": [false, [["amb@world_human_muscle_flex@arms_in_front@idle_a", "idle_a"]], true],
    "Показать мышцы 3": [false, "WORLD_HUMAN_MUSCLE_FLEX", true],
    "Греть руки (М)": [false, "WORLD_HUMAN_STAND_FIRE", false],
    "Подстрелен": [false, [["anim@heists@prison_heistig_5_p1_rashkovsky_idle", "idle_180", 1]], true],
    "Секс (М)": [false, [["timetable@trevor@skull_loving_bear", "skull_loving_bear", 1]], true],
    "Самоубийство": [false, [["mp_suicide", "pistol", 1]], false],
    "Тебе туда": [false, [["emoteclapperboard@animation", "emoteclapperboard_clip", 1]], true],
    "Пыль": [false, [["emotedustoffshoulders@animation", "emotedustoffshoulders_clip", 1]], true]
  },
  "Служебные": {
    "Фотограф (+)": [true, [["amb@world_human_paparazzi@male@enter", "enter", 1], ["amb@world_human_paparazzi@male@base", "base", 1]], true],
    "Фотограф 1": [false, [["amb@world_human_paparazzi@male@idle_a", "idle_a", 1], ["amb@world_human_paparazzi@male@idle_a", "idle_b", 1], ["amb@world_human_paparazzi@male@idle_a", "idle_c", 1]], true],
    "Видео-запись (+)": [true, [["rcmpaparazzo_4", "gesture_to_cam_camman", 1]], true],
    "Отдать честь (+)": [true, [["mp_player_int_uppersalute", "mp_player_int_salute", 1]], true],
    "Запись в блокнот": [true, "WORLD_HUMAN_CLIPBOARD_FACILITY", true],
    "Запись в блокнот 2": [true, "CODE_HUMAN_MEDIC_TIME_OF_DEATH", true],
    "Запись в блокнот (+)": [true, [["amb@medic@standing@timeofdeath@base", "base", 1]], true],
    "Руки на пояс. Шериф (+)": [true, [["amb@code_human_wander_idles_cop@male@static", "static", 1]], true],
    "Руки на пояс. Коп (+)": [true, [["amb@code_human_wander_idles_cop@female@static", "static", 1]], true],
    "Осмотреть землю": [false, "CODE_HUMAN_MEDIC_KNEEL", true],
    "Взаимодействие с телом": [false, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", true],
    "Операция (+)": [true, [["amb@medic@standing@tendtodead@enter", "enter ", 1], ["amb@medic@standing@tendtodead@idle_a", "idle_a", 1]], true],
    "Сбор в сумку": [false, [["anim@heists@money_grab@duffel", "loop", 1]], true],
    "Копать яму": [false, [["missmic1leadinoutmic_1_mcs_2", "_leadin_trevor", 1]], true]
  },
  "Танцы": {
    "Чечетка": [false, [["special_ped@mountain_dancer@monologue_1@monologue_1a", "mtn_dnc_if_you_want_to_get_to_heaven", 1]], true],
    "Чечетка 2": [false, [["special_ped@mountain_dancer@monologue_2@monologue_2a", "mnt_dnc_angel", 1]], true],
    "Чечетка 3": [false, [["special_ped@mountain_dancer@monologue_3@monologue_3a", "mnt_dnc_buttwag", 1]], true],
    "Пританцовывать": [false, [["amb@world_human_partying@female@partying_beer@base", "base", 1]], true],
    "Пританцовывать 2": [false, [["amb@world_human_strip_watch_stand@male_a@idle_a", "idle_c"]], true],
    "Танец тигра": [false, [["rcmnigel1bnmt_1b", "dance_intro_tyler", 1], ["rcmnigel1bnmt_1b", "dance_loop_tyler", 1]], true],
    "Танец пингвина": [false, [["move_clown@p_m_two_idles@", "fidget_short_dance", 1]], true],
    "Тектоник": [false, [["misschinese2_crystalmazemcs1_cs", "dance_loop_tao", 1]], true],
    "Подвижный танец": [false, [["timetable@tracy@ig_5@idle_a", "idle_a", 1]], true],
    "Подвижный танец 2": [false, [["timetable@tracy@ig_5@idle_a", "idle_b", 1]], true],
    "Подвижный танец 3": [false, [["timetable@tracy@ig_5@idle_a", "idle_c", 1]], true],
    "Подвижный танец 4": [false, [["timetable@tracy@ig_5@idle_b", "idle_e", 1]], true],
    "Подвижный танец 5": [false, [["timetable@tracy@ig_5@idle_b", "idle_d", 1]], true],
    "Подвижный танец 6": [false, [["timetable@tracy@ig_8@idle_a", "idle_a", 1]], true],
    "Мини Стриптиз": [false, [["amb@world_human_prostitute@cokehead@idle_a", "idle_b", 1], ["amb@world_human_prostitute@cokehead@idle_a", "idle_c", 1], ["amb@world_human_prostitute@cokehead@idle_a", "idle_a", 1]], true],
    "Приватный танец": [false, [["mini@strip_club@private_dance@part1", "priv_dance_p1", 1]], true],
    "Приватный танец 2": [false, [["mini@strip_club@private_dance@part2", "priv_dance_p2", 1]], true],
    "Приватный танец 3": [false, [["mini@strip_club@private_dance@part3", "priv_dance_p3", 1]], true],
    "Приватный танец 4": [false, [["mini@strip_club@lap_dance@ld_girl_a_song_a_p1", "ld_girl_a_song_a_p1_f", 1]], true],
    "Тверк": [false, [["switch@trevor@mocks_lapdance", "001443_01_trvs_28_exit_stripper", 1], ["switch@trevor@mocks_lapdance", "001443_01_trvs_28_idle_stripper", 1]], true],
    "Стриптиз": [false, [["mp_am_stripper", "lap_dance_girl", 1]], true],
    "Брейк 1": [false, [["breakdanceending1@animation", "breakdanceending1_clip", 1]], true],
    "Брейк 2": [false, [["breakdanceending3@animation", "breakdanceending3_clip", 1]], true],
    "Брейк 3": [false, [["breakdancefreezes@animation", "breakdancefreezes_clip", 1]], true],
    "Брейк 4": [false, [["breakdancefreezevar2@animation", "breakdancefreezevar2_clip", 1]], true],
    "Брейк 5": [false, [["breakdancefreezevar4@animation", "breakdancefreezevar4_clip", 1]], true],
    "Брейк 6": [false, [["breakdanceuprockvar2@animation", "breakdanceuprockvar2_clip", 1]], true],
    "Брейк 7": [false, [["brooklynuprock@animation", "brooklynuprock_clip", 1]], true],
    "Брейк 8": [false, [["dancemoves@animation", "dancemoves_clip", 1]], true],
    "Брейк 9": [false, [["dancingrunningman@animation", "dancingrunningman_clip", 1]], true],
    "Брейк 10": [false, [["northernsoulspincombo@animation", "northernsoulspincombo_clip", 1]], true],
    "Танец утят": [false, [["chickendance@animation", "chickendance_clip", 1]], true],
    "Макарена": [false, [["dancemakarena@animation", "dancemakarena_clip", 1]], true],
    "Twerk": [false, [["dancetwerk@animation", "dancetwerk_clip", 1]], true],
    "Шафл": [false, [["electroshuffle@animation", "electroshuffle_clip", 1]], true],
    "Диско": [false, [["emotedancedisco@animation", "emotedancedisco_clip", 1]], true],
    "Робот 2": [false, [["emoterobotdance@animation", "emoterobotdance_clip", 1]], true],
    "На хайпе": [false, [["emotedanceshootcmf@animation", "emotedanceshootcmf_clip", 1]], true],
    "Волна": [false, [["hiphophand@animation", "hiphophand_clip", 1]], true],
    "Крутиться на одной руке": [false, [["breackdnace1990@animation", "breackdnace1990_clip", 1]], true]
  },
  "Позы": {
    "Охранник": [false, "WORLD_HUMAN_GUARD_STAND", false],
    "Охранник (+)": [true, [["switch@michael@rejected_entry", "001396_01_mics3_6_rejected_entry_idle_bouncer"]], true],
    "Охранник 2": [false, "WORLD_HUMAN_GUARD_STAND", false],
    "Руки на пояс": [false, [["special_ped@impotent_rage@base", "base", 1]], true],
    "Руки на пояс 2": [false, [["timetable@amanda@ig_3", "ig_3_base_tracy", 1]], true],
    "Руки на пояс 3 (+)": [true, [["special_ped@impotent_rage@base", "base", 1]], true],
    "Руки вверх (+)": [true, [["switch@trevor@bear_in_floyds_face", "bear_in_floyds_face_loop_floyd", 1]], true],
    "Руки вверх 2 (+)": [true, [["mp_am_hold_up", "handsup_base", 1]], true],
    "Руки за спину (+)": [true, [["anim@miss@low@fin@vagos@", "idle_ped06", 1]], true],
    "Руки за голову (+)": [true, [["busted", "idle_a", 1]], true],
    "Скромняга": [false, [["special_ped@jane@base", "base", 1]], true],
    "Опереться на левый локоть": [false, [["special_ped@mime@intro", "idle_intro", 1], ["special_ped@mime@base", "base", 1]], true],
    "Скрестить руки (+)": [true, [["switch@franklin@lamar_tagging_wall", "lamar_tagging_wall_loop_franklin", 1]], true],
    "Скрестить руки 2 (+)": [true, [["amb@world_human_cop_idles@female@idle_b", "idle_e", 1]], true],
    "Скрестить руки 3 (+)": [true, [["anim@heists@heist_corona@single_team", "single_team_intro_boss", 1]], true],
    "Скрестить руки 4 (+)": [true, [["amb@world_human_hang_out_street@female_arms_crossed@base", "base", 1]], true],
    "Скрестить руки 5 (+)": [true, [["rcmme_amanda1", "stand_loop_cop", 1]], true],
    "Облокотиться на авто": [false, [["switch@michael@sitting_on_car_bonnet", "sitting_on_car_bonnet_loop", 1]], true],
    "Облокотиться на стену 1": [false, [["amb@lo_res_idles@", "world_human_lean_male_legs_crossed_lo_res_base", 1]], true],
    "Облокотиться на стену 2": [false, [["amb@lo_res_idles@", "world_human_lean_male_foot_up_lo_res_base", 1]], true],
    "Облокотиться на стену 3": [false, "WORLD_HUMAN_LEANING", false],
    "Облокотиться вперед": [false, "PROP_HUMAN_BUM_SHOPPING_CART", false],
    "Лежать в страхе": [false, [["anim@heists@ornate_bank@hostages@hit", "hit_loop_ped_a", 1]], true],
    "Лежать на правом боку": [false, [["amb@world_human_bum_slumped@male@laying_on_right_side@idle_a", "idle_a", 1]], true],
    "Лечь на живот": [false, "WORLD_HUMAN_SUNBATHE", false],
    "Лечь на живот. Отдых": [false, [["amb@world_human_sunbathe@female@front@idle_a", "idle_c", 1]], true],
    "Лечь на спину. Отдых": [false, "WORLD_HUMAN_SUNBATHE_BACK", false],
    "Лечь на спину. Загар": [false, [["amb@world_human_sunbathe@female@back@idle_a", "idle_a", 1]], true],
    "Лечь на спину. Ранен": [false, [["combat@damage@rb_writhe", "rb_writhe_loop", 1]], true],
    "Проститутка High Class": [false, "WORLD_HUMAN_PROSTITUTE_HIGH_CLASS", false],
    "Проститутка Low Class": [false, "WORLD_HUMAN_PROSTITUTE_LOW_CLASS", false],
    "Ползти на спине": [false, [["move_crawl", "onback_fwd", 1]], true],
    "Ползти на животе": [false, [["move_crawl", "onfront_fwd", 1]], true]
  },
  "Сидеть": {
    "Обычный": [false, "PROP_HUMAN_SEAT_BENCH", false],
    "Обычный 2": [false, [["rcmtmom_1leadinout", "tmom_1_rcm_p3_leadout_loop", 1]], true],
    "Расслабленно": [false, [["timetable@ron@ig_5_p3", "ig_5_p3_base", 1]], true],
    "Облокотившись вперед": [false, [["switch@michael@tv_w_kids", "001520_02_mics3_14_tv_w_kids_idle_mic", 1]], true],
    "Облокотившись вперед 2": [false, [["timetable@ron@ig_3_couch", "base", 1]], true],
    "Задумавшись": [false, [["anim@amb@business@cfid@cfid_desk_no_work_bgen_chair_no_work@", "sleep_cycle_lazyworker", 1]], true],
    "Делая маникюр": [false, [["timetable@tracy@famr_ig_5", "famr_ig_5_iamabouttocrackthis", 1], ["timetable@tracy@famr_ig_5", "famr_ig_5_iamtotallyontop", 1], ["timetable@tracy@famr_ig_5", "famr_ig_5_iamtryingtoconcentrate", 1], ["timetable@tracy@famr_ig_5", "famr_ig_5_thiscollegestuff", 1]], true],
    "Сидеть. Руки за голову": [false, [["busted", "idle_a", 1]], true],
    "Сидеть. Руки вверх": [false, [["rcmminute2", "kneeling_arrest_idle", 1]], true],
    "Сидеть в страхе": [false, [["amb@code_human_cower@male@react_cowering", "base_left", 1]], true],
    "Сесть на колено": [false, [["amb@medic@standing@kneel@enter", "enter", 1], ["amb@medic@standing@kneel@base", "base", 1]], true],
    "Сесть на колено 2": [false, [["amb@medic@standing@tendtodead@base", "base", 1]], true],
    "Сесть на колено 3": [false, [["amb@world_human_bum_wash@male@low@idle_a", "idle_a", 1]], true],
    "Аккуратно сесть на колено": [false, [["special_ped@mani@trevor_1@trevor_1h", "convo_trevor_whahellholaamigo_7", 1], ["special_ped@mani@trevor_1@trevor_1i", "convo_trevor_whahellholaamigo_8", 1]], true],
    "Сесть на левое бедро": [false, [["amb@world_human_picnic@female@base", "base", 1], ["amb@world_human_picnic@female@idle_a", "idle_a", 1], ["amb@world_human_picnic@female@idle_a", "idle_c", 1], ["amb@world_human_picnic@female@idle_a", "idle_b", 1]], true],
    "Сесть, поджав колени": [false, [["anim@amb@business@bgen@bgen_no_work@", "sit_phone_phoneputdown_fallasleep_nowork", 1]], true]
  },
  "Монологи": {
    "Спасение близко...": [false, [["special_ped@baygor@monologue_6@monologue_6a", "salvation_comes_at_a_price_0", 1], ["special_ped@baygor@monologue_6@monologue_6b", "salvation_comes_at_a_price_1", 1], ["special_ped@baygor@monologue_6@monologue_6c", "salvation_comes_at_a_price_2", 1], ["special_ped@baygor@monologue_6@monologue_6d", "salvation_comes_at_a_price_3", 1], ["special_ped@baygor@monologue_6@monologue_6e", "salvation_comes_at_a_price_4", 1], ["special_ped@baygor@monologue_6@monologue_6f", "salvation_comes_at_a_price_5", 1], ["special_ped@baygor@monologue_6@monologue_6g", "salvation_comes_at_a_price_6", 1], ["special_ped@baygor@monologue_6@monologue_6h", "salvation_comes_at_a_price_7", 1], ["special_ped@baygor@monologue_6@monologue_6i", "salvation_comes_at_a_price_8", 1], ["special_ped@baygor@monologue_6@monologue_6j", "salvation_comes_at_a_price_9", 1], ["special_ped@baygor@monologue_6@monologue_6k", "salvation_comes_at_a_price_10", 1], ["special_ped@baygor@monologue_6@monologue_6l", "salvation_comes_at_a_price_11", 1]], false],
    "Хотите быть счастливым": [false, [["special_ped@baygor@monologue_7@monologue_7a", "do_you_want_happiness_0", 1], ["special_ped@baygor@monologue_7@monologue_7b", "do_you_want_happiness_1", 1], ["special_ped@baygor@monologue_7@monologue_7c", "do_you_want_happiness_2", 1], ["special_ped@baygor@monologue_7@monologue_7d", "do_you_want_happiness_3", 1], ["special_ped@baygor@monologue_7@monologue_7e", "do_you_want_happiness_4", 1], ["special_ped@baygor@monologue_7@monologue_7f", "do_you_want_happiness_5", 1], ["special_ped@baygor@monologue_7@monologue_7g", "do_you_want_happiness_6", 1], ["special_ped@baygor@monologue_7@monologue_7h", "do_you_want_happiness_7", 1], ["special_ped@baygor@monologue_7@monologue_7i", "do_you_want_happiness_8", 1]], false],
    "Я эпсилонист": [false, [["special_ped@baygor@monologue_8@monologue_8a", "im_an_epsilonist_0", 1], ["special_ped@baygor@monologue_8@monologue_8b", "im_an_epsilonist_1", 1], ["special_ped@baygor@monologue_8@monologue_8c", "im_an_epsilonist_2", 1], ["special_ped@baygor@monologue_8@monologue_8d", "im_an_epsilonist_3", 1], ["special_ped@baygor@monologue_8@monologue_8e", "im_an_epsilonist_4", 1], ["special_ped@baygor@monologue_8@monologue_8f", "im_an_epsilonist_5", 1], ["special_ped@baygor@monologue_8@monologue_8g", "im_an_epsilonist_6", 1], ["special_ped@baygor@monologue_8@monologue_8h", "im_an_epsilonist_7", 1], ["special_ped@baygor@monologue_8@monologue_8i", "im_an_epsilonist_8", 1], ["special_ped@baygor@monologue_8@monologue_8j", "im_an_epsilonist_9", 1]], false],
    "Такова жизнь...": [false, [["special_ped@bill@monologue_4@monologue_4a", "bill_ig_1_b_01_imofferingironclad_0", 1], ["special_ped@bill@monologue_4@monologue_4b", "bill_ig_1_b_01_imofferingironclad_1", 1], ["special_ped@bill@monologue_4@monologue_4c", "bill_ig_1_b_01_imofferingironclad_2", 1], ["special_ped@bill@monologue_4@monologue_4d", "bill_ig_1_b_01_imofferingironclad_3", 1], ["special_ped@bill@monologue_4@monologue_4e", "bill_ig_1_b_01_imofferingironclad_4", 1], ["special_ped@bill@monologue_4@monologue_4f", "bill_ig_1_b_01_imofferingironclad_5", 1], ["special_ped@bill@monologue_4@monologue_4g", "bill_ig_1_b_01_imofferingironclad_6", 1]], false],
    "Марионетка": [false, [["special_ped@clinton@monologue_10@monologue_10a", "this_country_used_to_0", 1], ["special_ped@clinton@monologue_10@monologue_10b", "this_country_used_to_1", 1], ["special_ped@clinton@monologue_10@monologue_10c", "this_country_used_to_2", 1], ["special_ped@clinton@monologue_10@monologue_10d", "this_country_used_to_3", 1]], false],
    "Когда ты глубоко": [false, [["special_ped@clinton@monologue_11@monologue_11a", "when_your_deep_in_0", 1], ["special_ped@clinton@monologue_11@monologue_11b", "when_your_deep_in_1", 1], ["special_ped@clinton@monologue_11@monologue_11c", "when_your_deep_in_2", 1]], false],
    "Этот монстр возвращается": [false, [["special_ped@clinton@monologue_13@monologue_13a", "charlies_coming_back_0", 1], ["special_ped@clinton@monologue_13@monologue_13b", "charlies_coming_back_1", 1], ["special_ped@clinton@monologue_13@monologue_13c", "charlies_coming_back_2", 1]], false],
    "Знаешь что...": [false, [["special_ped@clinton@monologue_14@monologue_14a", "you_know_what_they_0", 1], ["special_ped@clinton@monologue_14@monologue_14b", "you_know_what_they_1", 1], ["special_ped@clinton@monologue_14@monologue_14c", "you_know_what_they_2", 1], ["special_ped@clinton@monologue_14@monologue_14d", "you_know_what_they_3", 1], ["special_ped@clinton@monologue_14@monologue_14e", "you_know_what_they_4", 1], ["special_ped@clinton@monologue_14@monologue_14f", "you_know_what_they_5", 1]], false],
    "Они убьют вас...": [false, [["special_ped@clinton@monologue_2@monologue_2a", "theyll_kill_ya_0", 1], ["special_ped@clinton@monologue_2@monologue_2b", "theyll_kill_ya_1", 1], ["special_ped@clinton@monologue_2@monologue_2c", "theyll_kill_ya_2", 1], ["special_ped@clinton@monologue_2@monologue_2d", "theyll_kill_ya_3", 1], ["special_ped@clinton@monologue_2@monologue_2e", "theyll_kill_ya_4", 1]], false],
    "Мы здесь власть!": [false, [["special_ped@griff@monologue_1@monologue_1a", "iamnotaracist_0", 1], ["special_ped@griff@monologue_1@monologue_1b", "iamnotaracist_1", 1], ["special_ped@griff@monologue_1@monologue_1c", "iamnotaracist_2", 1], ["special_ped@griff@monologue_1@monologue_1d", "iamnotaracist_3", 1], ["special_ped@griff@monologue_1@monologue_1e", "iamnotaracist_4", 1], ["special_ped@griff@monologue_1@monologue_1f", "iamnotaracist_5", 1], ["special_ped@griff@monologue_1@monologue_1g", "iamnotaracist_6", 1], ["special_ped@griff@monologue_1@monologue_1h", "iamnotaracist_7", 1]], false],
    "Ты думаешь я хуже него": [false, [["special_ped@jerome@monologue_2@monologue_2a", "iamyourtruesalvation_0", 1], ["special_ped@jerome@monologue_2@monologue_2b", "iamyourtruesalvation_1", 1], ["special_ped@jerome@monologue_2@monologue_2c", "iamyourtruesalvation_2", 1], ["special_ped@jerome@monologue_2@monologue_2d", "iamyourtruesalvation_3", 1], ["special_ped@jerome@monologue_2@monologue_2e", "iamyourtruesalvation_4", 1], ["special_ped@jerome@monologue_2@monologue_2f", "iamyourtruesalvation_5", 1], ["special_ped@jerome@monologue_2@monologue_2g", "iamyourtruesalvation_6", 1], ["special_ped@jerome@monologue_2@monologue_2h", "iamyourtruesalvation_7", 1], ["special_ped@jerome@monologue_2@monologue_2i", "iamyourtruesalvation_8", 1]], false]
  }
};
const WALKING_STYLES = exports.WALKING_STYLES = [{
  name: 'Стандартная',
  animSet: null
}, {
  name: 'Инопланетная',
  animSet: 'move_m@alien'
}, {
  name: 'Деревянная',
  animSet: 'anim_group_move_ballistic'
}, {
  name: 'Расслабленная',
  animSet: 'move_f@arrogant@a'
}, {
  name: 'Рама',
  animSet: 'move_m@brave'
}, {
  name: 'Уверенная 2',
  animSet: 'move_m@casual@a'
}, {
  name: 'Странная',
  animSet: 'move_m@casual@b'
}, {
  name: 'Торопыга',
  animSet: 'move_m@casual@c'
}, {
  name: 'Спокойная',
  animSet: 'move_m@casual@d'
}, {
  name: 'Вольяжная',
  animSet: 'move_m@casual@e'
}, {
  name: 'Стриптизёрша',
  animSet: 'move_f@chichi'
}, {
  name: 'Официальная',
  animSet: 'move_m@confident'
}, {
  name: 'Официальная 2',
  animSet: 'move_m@business@a'
}, {
  name: 'Женственная',
  animSet: 'move_f@multiplayer'
}, {
  name: 'Мужественная',
  animSet: 'move_m@multiplayer'
}, {
  name: 'Пьяная',
  animSet: 'move_m@drunk@a'
}, {
  name: 'Пошатываюшееся',
  animSet: 'move_m@drunk@slightlydrunk'
}, {
  name: 'Сильно пьяный',
  animSet: 'move_m@drunk@verydrunk'
}, {
  name: 'Женственная 2',
  animSet: 'move_f@femme@'
}, {
  name: 'Бык',
  animSet: 'move_characters@franklin@fire'
}, {
  name: 'Женственная 3',
  animSet: 'move_f@flee@a'
}, {
  name: 'Уверенная 3',
  animSet: 'move_p_m_one'
}, {
  name: 'Гангстер 1',
  animSet: 'move_m@gangster@generic'
}, {
  name: 'Пожилая',
  animSet: 'move_m@gangster@var_e'
}, {
  name: 'Грустная',
  animSet: 'move_m@gangster@var_f'
}, {
  name: 'Торопыга 2',
  animSet: 'move_m@gangster@var_i'
}, {
  name: 'Дёрганная',
  animSet: 'anim@move_m@grooving@'
}, {
  name: 'Стриптизёрша 2',
  animSet: 'move_f@heels@c'
}, {
  name: 'Гангстер 2',
  animSet: 'move_m@hipster@a'
}, {
  name: 'Аккуратный',
  animSet: 'move_f@hurry@a'
}, {
  name: 'Рама 2',
  animSet: 'move_p_m_zero_janitor'
}, {
  name: 'Гангстер 3',
  animSet: 'move_p_m_zero_slow'
}, {
  name: 'Стриптизёрша 3',
  animSet: 'move_f@maneater'
}, {
  name: 'Гангстер 4',
  animSet: 'move_m@money'
}, {
  name: 'На чилле',
  animSet: 'move_m@muscle@a'
}, {
  name: 'Женственная 4',
  animSet: 'move_f@posh@'
}, {
  name: 'Беговая',
  animSet: 'move_m@quick'
}, {
  name: 'Тильт',
  animSet: 'move_m@sad@a'
}, {
  name: 'Испуганная',
  animSet: 'move_f@scared'
}, {
  name: 'Сэкси',
  animSet: 'move_f@sexy@a'
}, {
  name: 'Гангстер 5',
  animSet: 'move_m@shadyped@a'
}, {
  name: 'Свэг',
  animSet: 'move_m@swagger'
}, {
  name: 'Бык 2',
  animSet: 'move_p_m_two'
}, {
  name: 'Толстая',
  animSet: 'move_m@bag'
}];
},{}],"TxUd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WEAPON_ATTACH_LIST = exports.ATTACH_BONES_LIST = void 0;
const WEAPON_ATTACH_LIST = exports.WEAPON_ATTACH_LIST = {
  SHORT: [[24816, -0.115, -0.030, 0.200, 105, 181, 358], [24816, -0.050, 0.160, 0.060, 0, 182, 2], [24816, -0.095, 0.155, -0.090, 148, 180, 0], [24816, -0.140, 0.025, -0.205, 80, 180, 0], [51826, 0.130, 0.060, 0.090, 250, 0, 343]],
  LONG: [[24818, 0.010, -0.135, 0.135, 184, 0, 185], [24818, 0.010, -0.155, -0.155, 180, 180, 0]],
  BATON: [[57597, 0.180, 0.130, 0.140, 282, 354, 103]],
  BAT: [[24818, 0.205, -0.130, 0.025, 354, 270, 7]]
};
const ATTACH_BONES_LIST = exports.ATTACH_BONES_LIST = [["SKEL_ROOT", 0], ["FB_R_Brow_Out_000", 1356], ["SKEL_L_Toe0", 2108], ["MH_R_Elbow", 2992], ["SKEL_L_Finger01", 4089], ["SKEL_L_Finger02", 4090], ["SKEL_L_Finger31", 4137], ["SKEL_L_Finger32", 4138], ["SKEL_L_Finger41", 4153], ["SKEL_L_Finger42", 4154], ["SKEL_L_Finger11", 4169], ["SKEL_L_Finger12", 4170], ["SKEL_L_Finger21", 4185], ["SKEL_L_Finger22", 4186], ["RB_L_ArmRoll", 5232], ["IK_R_Hand", 6286], ["RB_R_ThighRoll", 6442], ["SKEL_R_Clavicle", 10706], ["FB_R_Lip_Corner_000", 11174], ["SKEL_Pelvis", 11816], ["IK_Head", 12844], ["SKEL_L_Foot", 14201], ["MH_R_Knee", 16335], ["FB_LowerLipRoot_000", 17188], ["FB_R_Lip_Top_000", 17719], ["SKEL_L_Hand", 18905], ["FB_R_CheekBone_000", 19336], ["FB_UpperLipRoot_000", 20178], ["FB_L_Lip_Top_000", 20279], ["FB_LowerLip_000", 20623], ["SKEL_R_Toe0", 20781], ["FB_L_CheekBone_000", 21550], ["MH_L_Elbow", 22711], ["SKEL_Spine0", 23553], ["RB_L_ThighRoll", 23639], ["PH_R_Foot", 24806], ["SKEL_Spine1", 24816], ["SKEL_Spine2", 24817], ["SKEL_Spine3", 24818], ["FB_L_Eye_000", 25260], ["SKEL_L_Finger00", 26610], ["SKEL_L_Finger10", 26611], ["SKEL_L_Finger20", 26612], ["SKEL_L_Finger30", 26613], ["SKEL_L_Finger40", 26614], ["FB_R_Eye_000", 27474], ["SKEL_R_Forearm", 28252], ["PH_R_Hand", 28422], ["FB_L_Lip_Corner_000", 29868], ["SKEL_Head", 31086], ["IK_R_Foot", 35502], ["RB_Neck_1", 35731], ["IK_L_Hand", 36029], ["SKEL_R_Calf", 36864], ["RB_R_ArmRoll", 37119], ["FB_Brow_Centre_000", 37193], ["SKEL_Neck_1", 39317], ["SKEL_R_UpperArm", 40269], ["FB_R_Lid_Upper_000", 43536], ["RB_R_ForeArmRoll", 43810], ["SKEL_L_UpperArm", 45509], ["FB_L_Lid_Upper_000", 45750], ["MH_L_Knee", 46078], ["FB_Jaw_000", 46240], ["FB_L_Lip_Bot_000", 47419], ["FB_Tongue_000", 47495], ["FB_R_Lip_Bot_000", 49979], ["SKEL_R_Thigh", 51826], ["SKEL_R_Foot", 52301], ["IK_Root", 56604], ["SKEL_R_Hand", 57005], ["SKEL_Spine_Root", 57597], ["PH_L_Foot", 57717], ["SKEL_L_Thigh", 58271], ["FB_L_Brow_Out_000", 58331], ["SKEL_R_Finger00", 58866], ["SKEL_R_Finger10", 58867], ["SKEL_R_Finger20", 58868], ["SKEL_R_Finger30", 58869], ["SKEL_R_Finger40", 58870], ["PH_L_Hand", 60309], ["RB_L_ForeArmRoll", 61007], ["SKEL_L_Forearm", 61163], ["FB_UpperLip_000", 61839], ["SKEL_L_Calf", 63931], ["SKEL_R_Finger01", 64016], ["SKEL_R_Finger02", 64017], ["SKEL_R_Finger31", 64064], ["SKEL_R_Finger32", 64065], ["SKEL_R_Finger41", 64080], ["SKEL_R_Finger42", 64081], ["SKEL_R_Finger11", 64096], ["SKEL_R_Finger12", 64097], ["SKEL_R_Finger21", 64112], ["SKEL_R_Finger22", 64113], ["SKEL_L_Clavicle", 64729], ["FACIAL_facialRoot", 65068], ["IK_L_Foot", 65245]];
},{}],"sXtZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AttachSystem = void 0;
var _inventory = require("../../shared/inventory");
var _user = require("./user");
var _gui = require("./gui");
var _custom = require("./custom.event");
var _attach = require("../../shared/attach.system");
var _system = require("./system");
class AttachSystem {
  static getConfig(id) {
    return this.registerPositions.get(id);
  }
  static registerPosition(id, model, boneId, position, rotation) {
    this.registerPositions.set(id, {
      model,
      boneId,
      position,
      rotation
    });
  }
  static tick(target) {
    if (!this.playerDataCurrent.has(target) || !this.playerDataCurrent.get(target).length) return this.clearFor(target);
    const player = mp.players.atRemoteId(target);
    if (!player || !mp.players.exists(player) || !player.handle) return this.clearFor(target);
    if (player.handle !== mp.players.local.handle && _system.system.distanceToPos(player.position, mp.players.local.position) > 100) return this.clearFor(target);
    const current = this.playerDataCurrent.get(target);
    const visible = player.getAlpha() > 10 && !player.vehicle;
    this.playerData.get(target).forEach((data, key) => {
      if (!visible || !current || !current.find(q => typeof q === "string" && key === q || typeof q !== "string" && key === q[0])) this.removeFor(target, key);
    });
    if (visible) current.map(key => this.addFor(target, key));
  }
  static clearFor(target) {
    const cfg = this.playerData.get(target);
    if (!cfg || [...cfg].length == 0) return;
    cfg.forEach((object, key) => this.removeFor(target, key));
    this.playerData.set(target, new Map());
  }
  static removeFor(target, id) {
    const cfg = this.playerData.get(target);
    if (!cfg || [...cfg].length == 0) return;
    if (!cfg.has(id)) return;
    let handle = cfg.get(id);
    if (!handle) return;
    if (handle) {
      mp.game.object.deleteObject(handle);
    }
    cfg.delete(id);
    this.playerData.set(target, cfg);
  }
  static async addFor(target, data) {
    let cfg = this.playerData.get(target);
    if (!cfg || [...cfg].length == 0) cfg = new Map();
    const id = typeof data === "string" ? data : data[0];
    if (cfg.has(id)) return;
    let handle = cfg.get(id);
    const player = mp.players.atRemoteId(target);
    if (!player || !player.handle) return;
    const attInfo = this.getConfig(id);
    if (!attInfo) return mp.console.logError(`attach non exists config ${id}`);
    if (handle) {
      if (!handle) return;
      if (!mp.game.invoke(_system.system.natives.IS_ENTITY_ATTACHED, handle)) {
        mp.game.invoke(_system.system.natives.ATTACH_ENTITY_TO_ENTITY, handle, player.handle, player.getBoneIndex(attInfo.boneId), attInfo.position.x, attInfo.position.y, attInfo.position.z, attInfo.rotation.x, attInfo.rotation.y, attInfo.rotation.z, false, false, false, false, 2, true);
      }
      return;
    }
    const inv = _inventory.inventoryShared.items.find(q => q.prop === attInfo.model);
    const weaponCfg = inv ? _inventory.inventoryShared.getWeaponConfigByItemId(inv.item_id) : null;
    const isWeapon = !!weaponCfg && !!weaponCfg.ammo_max;
    const modelname = !isWeapon ? attInfo.model : weaponCfg.hash;
    const model = mp.game.joaat(modelname);
    let c = 0;
    if (isWeapon) {
      mp.game.weapon.requestWeaponAsset(model, 31, 0);
      while (!mp.game.weapon.hasWeaponAssetLoaded(model)) {
        await mp.game.waitAsync(0);
        c++;
        if (c >= 200) return;
      }
    } else {
      if (!mp.game.streaming.hasModelLoaded(model)) {
        mp.game.streaming.requestModel(model);
        while (!mp.game.streaming.hasModelLoaded(model)) {
          await mp.game.waitAsync(0);
          c++;
          if (c >= 200) return;
        }
      }
    }
    if (!player || !mp.players.exists(player) || !player.handle) return;
    let object = !isWeapon ? mp.game.object.createObject(model, player.position.x, player.position.y, player.position.z - 10, true, true, true) : mp.game.weapon.createWeaponObject(model, 120, player.position.x, player.position.y, player.position.z - 10, true, 0, 0);
    let count = 0;
    const set = () => {
      count++;
      if (count > 200) {
        if (object && mp.objects.exists(object)) {
          mp.game.object.deleteObject(object);
        }
        return clearInterval(int);
      }
      if (!player || !mp.players.exists(player) || !player.handle) return clearInterval(int);
      if (!object) return;
      mp.game.invoke(_system.system.natives.ATTACH_ENTITY_TO_ENTITY, object, player.handle, player.getBoneIndex(attInfo.boneId), attInfo.position.x + 0.00001, attInfo.position.y + 0.00001, attInfo.position.z + 0.00001, attInfo.rotation.x + 0.00001, attInfo.rotation.y + 0.00001, attInfo.rotation.z + 0.00001, true, false, false, false, 2, true);
      mp.game.invoke(_system.system.natives.PROCESS_ENTITY_ATTACHMENTS, object);
      mp.game.invoke(_system.system.natives.SET_ENTITY_NO_COLLISION_ENTITY, object, mp.players.local.handle, false);
      mp.game.invoke(_system.system.natives.SET_ENTITY_NO_COLLISION_ENTITY, mp.players.local.handle, object, false);
      mp.game.invoke(_system.system.natives.SET_ENTITY_NO_COLLISION_ENTITY, object, player.handle, false);
      mp.game.invoke(_system.system.natives.SET_ENTITY_NO_COLLISION_ENTITY, player.handle, object, false);
      if (typeof data !== "string") {
        data.map(async q => {
          if (typeof q === "string") return;
          if (q <= 32) {
            mp.game.invoke(_system.system.natives.SET_WEAPON_OBJECT_TINT_INDEX, object, q);
          } else {
            const model = mp.game.weapon.getWeaponComponentTypeModel(q);
            if (!model) return mp.console.logError('model incorrect');
            if (!mp.game.streaming.hasModelLoaded(model)) {
              mp.game.streaming.requestModel(model);
              while (!mp.game.streaming.hasModelLoaded(model)) await _system.system.sleep(10);
            }
            mp.game.weapon.giveWeaponComponentToWeaponObject(object, q);
          }
        });
      }
      clearInterval(int);
    };
    let int = setInterval(() => {
      set();
    }, 100);
    cfg.set(id, object);
    this.playerData.set(target, cfg);
  }
  static addLocal(id) {
    const attInfo = this.getConfig(id);
    if (!attInfo) return;
    if (!AttachSystem.playerData.has(mp.players.local.remoteId)) AttachSystem.playerData.set(mp.players.local.remoteId, new Map());
    let data = AttachSystem.playerDataCurrent.get(mp.players.local.remoteId) || [];
    if (data.includes(id)) return;
    AttachSystem.playerDataCurrent.set(mp.players.local.remoteId, [...data, id]);
    this.tick(mp.players.local.remoteId);
    _custom.CustomEvent.triggerServer('attach:system:addLocal', id);
  }
  static removeLocal(id) {
    const attInfo = this.getConfig(id);
    if (!attInfo) return;
    let data = AttachSystem.playerDataCurrent.get(mp.players.local.remoteId) || [];
    if (!data.includes(id)) return;
    data.splice(data.findIndex(q => q === id), 1);
    AttachSystem.playerDataCurrent.set(mp.players.local.remoteId, [...data]);
    this.tick(mp.players.local.remoteId);
    _custom.CustomEvent.triggerServer('attach:system:removeLocal', id);
  }
  static tickLocal() {
    this.clearFor(mp.players.local.remoteId);
    this.tick(mp.players.local.remoteId);
  }
}
exports.AttachSystem = AttachSystem;
AttachSystem.playerDataCurrent = new Map();
AttachSystem.playerData = new Map();
AttachSystem.registerPositions = new Map();
let lastD = 0;
setInterval(() => {
  if (!_user.user.login) return;
  if (lastD !== mp.players.local.dimension) {
    lastD = mp.players.local.dimension;
    AttachSystem.tickLocal();
  }
  if (_gui.phoneOpened || mp.players.local.getVariable('call')) {
    AttachSystem.addLocal('phone');
    mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 0, 1, 1, 1);
  } else AttachSystem.removeLocal('phone');
}, 100);
setInterval(() => {
  if (!_user.user.login) return;
  AttachSystem.tick(mp.players.local.remoteId);
  mp.players.forEachInStreamRange(target => {
    AttachSystem.tick(target.remoteId);
  });
}, 500);
setInterval(() => {
  if (!_user.user.login) return;
  mp.objects.toArray().filter(q => typeof q.attachBody === "number").map(object => {
    const id = object.attachBody;
    const data = AttachSystem.playerData.get(id);
    if (!data) return object.destroy();
    const arr = [...data].map(q => q[1]).filter(q => mp.objects.exists(q));
    if (!arr.find(q => q === object.handle)) object.destroy();
  });
}, 5000);
mp.events.addDataHandler("attachObjects", async (target, current) => {
  if (target.type !== "player") return;
  const id = target.remoteId;
  if (!AttachSystem.playerData.has(id)) AttachSystem.playerData.set(id, new Map());
  const old = AttachSystem.playerDataCurrent.get(id);
  if (current) current.map(q => {
    if (old && typeof q !== "string" && !old.find(s => typeof s !== "string" && JSON.stringify(s) == JSON.stringify(q))) AttachSystem.removeFor(id, q[0]);
  });
  if (old) old.map(q => {
    if (current && typeof q !== "string" && !current.find(s => typeof s !== "string" && JSON.stringify(s) == JSON.stringify(q))) AttachSystem.removeFor(id, q[0]);
  });
  AttachSystem.playerDataCurrent.set(id, current || []);
  AttachSystem.tick(id);
});
mp.events.add('entityStreamIn', async target => {
  if (target.type !== "player") return;
  const id = target.remoteId;
  if (!AttachSystem.playerData.has(id)) AttachSystem.playerData.set(id, new Map());
  AttachSystem.playerDataCurrent.set(id, target.getVariable('attachObjects') || []);
  AttachSystem.tick(id);
});
mp.events.add('entityStreamOut', async target => {
  if (target.type !== "player") return;
  const id = target.remoteId;
  if (!AttachSystem.playerData.has(id)) AttachSystem.playerData.set(id, new Map());
  AttachSystem.playerDataCurrent.set(id, []);
  AttachSystem.tick(id);
});
_inventory.inventoryShared.items.map(item => {
  const pos = item.type === _inventory.ITEM_TYPE.WATER ? new mp.Vector3(0.05, 0.01, 0.051301) : new mp.Vector3(0.15, 0.038, 0.051);
  const rot = item.type === _inventory.ITEM_TYPE.WATER ? new mp.Vector3(120.0, 20.0, 120.0) : new mp.Vector3(20.0, 120.0, 0.0);
  AttachSystem.registerPosition("item_" + item.item_id, item.prop, 18905, item.propAttachParam ? new mp.Vector3(item.propAttachParam[0], item.propAttachParam[1], item.propAttachParam[2]) : pos, item.propAttachParam ? new mp.Vector3(item.propAttachParam[3], item.propAttachParam[4], item.propAttachParam[5]) : rot);
});
AttachSystem.registerPosition("mining", "prop_tool_jackham", 60309, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
AttachSystem.registerPosition("drinking_1", "prop_ld_can_01", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
AttachSystem.registerPosition("drinking_2", "prop_ecola_can", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
AttachSystem.registerPosition("drinking_3", "prop_ld_flow_bottle", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
AttachSystem.registerPosition("char_creator_1", "prop_beggers_sign_04", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
AttachSystem.registerPosition("handcuff", "p_cs_cuffs_02_s", 28422, new mp.Vector3(-0.01, 0.06, -0.02), new mp.Vector3(62.0, -6.0, 66.0));
AttachSystem.registerPosition("phone", "prop_npc_phone_02", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
AttachSystem.registerPosition("tablet", "hei_prop_dlc_tablet", 28422, new mp.Vector3(-0.09, -0.025, 0), new mp.Vector3(0, 90, 15));
AttachSystem.registerPosition("bong", "prop_bong_01", 26611, new mp.Vector3(0.020, -0.105, -0.285), new mp.Vector3(347, 360, 345));
AttachSystem.registerPosition("vape", "vape", 26612, new mp.Vector3(0.060, -0.025, -0.030), new mp.Vector3(360, 350, 360));
AttachSystem.registerPosition("trash_bag", "p_rub_binbag_test", 26612, new mp.Vector3(0.245, 0.255, -0.045), new mp.Vector3(229, 237, 11));
AttachSystem.registerPosition("heal_902", "prop_ld_health_pack", 57005, new mp.Vector3(0.175, -0.010, -0.130), new mp.Vector3(319, 46, 58));
AttachSystem.registerPosition("heal_908", "prop_ld_health_pack2", 57005, new mp.Vector3(0.175, -0.010, -0.130), new mp.Vector3(319, 46, 58));
_inventory.inventoryShared.itemsAttachBody.map(item => _attach.WEAPON_ATTACH_LIST[item.attachBody].map((q, i) => AttachSystem.registerPosition(`${item.attachBody}_${item.item_id}_${i}`, item.prop, q[0], new mp.Vector3(q[1], q[2], q[3]), new mp.Vector3(q[4], q[5], q[6]))));
_custom.CustomEvent.registerServer('attach:removeLocal', id => {
  AttachSystem.removeLocal(id);
});
},{"../../shared/inventory":"vpPR","./user":"ggMw","./gui":"bk91","./custom.event":"py8h","../../shared/attach.system":"TxUd","./system":"pi2J"}],"KnNo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MinigamePlay = void 0;
var _custom = require("./custom.event");
var _gui = require("./gui");
let ids = 0;
let handlers = new Map();
const MinigamePlay = game => {
  return new Promise(resolve => {
    ids++;
    handlers.set(ids, resolve);
    _gui.gui.setGui("minigame");
    _custom.CustomEvent.triggerCef('minigame:play', game, ids);
  });
};
exports.MinigamePlay = MinigamePlay;
_custom.CustomEvent.registerServer('minigame:play', game => {
  return MinigamePlay(game);
});
mp.events.add('minigame:status', (id, status) => {
  let handle = handlers.get(id);
  if (!handle) return;
  _gui.gui.setGui(null);
  handle(status);
  handlers.delete(id);
});
},{"./custom.event":"py8h","./gui":"bk91"}],"elL5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CARRY_LIST = void 0;
const CARRY_LIST = exports.CARRY_LIST = [{
  name: 'Положить на плечо',
  carriedAnimation: {
    dictionary: 'nm',
    name: 'firemans_carry',
    flag: 33,
    isUpper: false
  },
  carryAnimation: {
    dictionary: 'missfinale_c2mcs_1',
    name: 'fin_c2_mcs_1_camman',
    flag: 49,
    isUpper: true
  },
  carriedAttach: {
    boneIndex: 0,
    posOffset: new mp.Vector3(0.15, 0.22, 0.63),
    rotation: new mp.Vector3(0.5, 0.5, 0.0)
  }
}, {
  name: 'Нести на руках',
  carriedAnimation: {
    dictionary: 'amb@code_human_in_car_idles@generic@ps@base',
    name: 'base',
    flag: 33,
    isUpper: false
  },
  carryAnimation: {
    dictionary: 'anim@heists@box_carry@',
    name: 'idle',
    flag: 50,
    isUpper: true
  },
  carriedAttach: {
    boneIndex: 0,
    posOffset: new mp.Vector3(0.08, 0.38, 0.25),
    rotation: new mp.Vector3(0.9, 0.30, 90.0)
  }
}, {
  name: 'Нести за спиной',
  carriedAnimation: {
    dictionary: 'anim@arena@celeb@flat@paired@no_props@',
    name: 'piggyback_c_player_b',
    flag: 33,
    isUpper: false
  },
  carryAnimation: {
    dictionary: 'anim@arena@celeb@flat@paired@no_props@',
    name: 'piggyback_c_player_a',
    flag: 49,
    isUpper: true
  },
  carriedAttach: {
    boneIndex: 0,
    posOffset: new mp.Vector3(0, -0.15, 0.45),
    rotation: new mp.Vector3(0, 0, 0.0)
  }
}];
},{}],"QJy9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPlayerCarryOrCarried = isPlayerCarryOrCarried;
var _carry = require("../../shared/carry");
var _controls = require("./controls");
var _user = require("./user");
var _gui = require("./gui");
var _custom = require("./custom.event");
var _anim = require("./anim");
const carryMap = new Map();
function isPlayerCarryOrCarried() {
  return carryMap.has(mp.players.local) || [...carryMap.values()].some(carryData => carryData.targetId === mp.players.local.remoteId);
}
mp.events.addDataHandler('carry:target', (entity, value) => {
  if (!(entity !== null && entity !== void 0 && entity.handle)) {
    return;
  }
  handleEntityCarry(entity);
});
mp.events.add('entityStreamIn', entity => {
  setTimeout(() => {
    if (!(entity !== null && entity !== void 0 && entity.handle)) {
      return;
    }
    handleEntityCarry(entity);
    handleCarriedPlayer(entity);
  }, 1000);
});
mp.events.add('entityStreamOut', entity => {
  if (entity.type != 'player') return;
  let isCarriedPlayerQuit = false;
  if (carryMap.has(mp.players.local) && [...carryMap.values()].some(carryData => carryData.targetId === entity.remoteId)) {
    isCarriedPlayerQuit = true;
    carryMap.delete(mp.players.local);
  }
  if (carryMap.has(entity) && [...carryMap.values()].some(carryData => carryData.targetId === mp.players.local.remoteId)) {
    carryMap.delete(entity);
    isCarriedPlayerQuit = true;
  }
  if (!isCarriedPlayerQuit) return;
  enableControls();
  mp.players.local.clearTasksImmediately();
  mp.players.local.detach(true, false);
  entity.clearTasksImmediately();
  entity.detach(true, false);
});
mp.events.add('teleportEnd', () => {
  setTimeout(() => {
    handleEntityCarry(mp.players.local);
    handleCarriedPlayer(mp.players.local);
  }, 1000);
});
function handleCarriedPlayer(player) {
  const carriedInfo = [...carryMap.entries()].find(entry => entry[1].targetId === player.remoteId);
  if (!carriedInfo) {
    return;
  }
  handleEntityCarry(carriedInfo[0]);
}
function handleEntityCarry(entity) {
  if (!(entity !== null && entity !== void 0 && entity.handle)) return;
  const carryDataJson = entity.getVariable('carry:target');
  if (carryDataJson) {
    const carryData = JSON.parse(carryDataJson);
    addCarry(entity, carryData);
  } else {
    removeCarry(entity);
  }
}
async function addCarry(player, carryData) {
  carryMap.set(player, carryData);
  const carryCfg = _carry.CARRY_LIST[carryData.carryCfgIdx];
  await (0, _anim.asyncLoadDictPlayAnim)(player, carryCfg.carryAnimation.dictionary, carryCfg.carryAnimation.name, 8.0, 1.0, -1, 49, 0.0, true, true, true);
  if (mp.players.local.remoteId === player.remoteId) {
    _user.user.showHelp('Перестать тащить [F10]');
    disableControls(true);
  }
  if (mp.players.local.remoteId === carryData.targetId) {
    disableControls(false);
  }
  const targetPlayer = mp.players.atRemoteId(carryData.targetId);
  if (!(targetPlayer !== null && targetPlayer !== void 0 && targetPlayer.handle)) {
    return;
  }
  await (0, _anim.asyncLoadDictPlayAnim)(targetPlayer, carryCfg.carriedAnimation.dictionary, carryCfg.carriedAnimation.name, 8.0, 1.0, -1, 33, 0.0, true, true, true);
  targetPlayer.attachTo(player.handle, carryCfg.carriedAttach.boneIndex, carryCfg.carriedAttach.posOffset.x, carryCfg.carriedAttach.posOffset.y, carryCfg.carriedAttach.posOffset.z, carryCfg.carriedAttach.rotation.x, carryCfg.carriedAttach.rotation.y, carryCfg.carriedAttach.rotation.z, false, false, false, false, 2, false);
}
function removeCarry(player) {
  const carryData = carryMap.get(player);
  if (!carryData) {
    return;
  }
  carryMap.delete(player);
  player.clearTasks();
  if (mp.players.local.remoteId === player.remoteId) {
    _user.user.showHelp(null);
  }
  if (mp.players.local.remoteId === player.remoteId || mp.players.local.remoteId === carryData.targetId) {
    enableControls();
  }
  const targetPlayer = mp.players.atRemoteId(carryData.targetId);
  if (!(targetPlayer !== null && targetPlayer !== void 0 && targetPlayer.handle)) {
    return;
  }
  targetPlayer.clearTasks();
  targetPlayer.detach(true, false);
}
let isControlsDisabled = false;
let isCarry = false;
function disableControls(carry) {
  isControlsDisabled = true;
  isCarry = carry;
}
function enableControls() {
  isControlsDisabled = false;
}
mp.keys.bind(121, false, () => {
  if (_gui.gui.currentGui) {
    return;
  }
  if (!carryMap.has(mp.players.local)) {
    return;
  }
  _custom.CustomEvent.triggerServer('carry:endCarry');
});
mp.events.add('render', () => {
  if (isControlsDisabled) {
    _controls.disableControlGroup.baseKeyDisable();
    if (isCarry) {
      _controls.enableControlGroup.move();
    }
  }
});
mp.events.add('playerStartedEnterVehicle', handle => {
  if (!handle) return;
  if (!isPlayerCarryOrCarried()) return;
  removeCarry(mp.players.local);
});
},{"../../shared/carry":"elL5","./controls":"yuOK","./user":"ggMw","./gui":"bk91","./custom.event":"py8h","./anim":"stJJ"}],"stJJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncLoadDictPlayAnim = asyncLoadDictPlayAnim;
exports.loadDictPlayAnim = loadDictPlayAnim;
exports.waitTimer = exports.playAnimsEntity = exports.playAnims = exports.playAnimationWithResult = exports.myLastAnimUpperClear = exports.myLastAnimUpper = void 0;
var _system = require("./system");
var _custom = require("./custom.event");
var _user = require("./user");
var _gui = require("./gui");
var _anim = require("../../shared/anim");
var _hudBar = require("./hudBar");
var _attach = require("./attach");
var _minigame = require("./minigame");
var _carry = require("./carry");
const player = mp.players.local;
if (!mp.storage.data.favouriteAnims) {
  mp.storage.data.favouriteAnims = [];
}
function loadDictPlayAnim(player, dict, name, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ) {
  while (!mp.game.streaming.hasAnimDictLoaded(dict)) {
    mp.game.streaming.requestAnimDict(dict);
    mp.game.wait(10);
  }
  player.taskPlayAnim(dict, name, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ);
}
async function asyncLoadDictPlayAnim(player, dict, name, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ) {
  while (!mp.game.streaming.hasAnimDictLoaded(dict)) {
    mp.game.streaming.requestAnimDict(dict);
    await mp.game.waitAsync(10);
  }
  player.taskPlayAnim(dict, name, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ);
}
_custom.CustomEvent.registerServer('playAnimationWithResult', (task, seconds, text, heading, minigame) => {
  return playAnimationWithResult(task, seconds, text, heading, minigame);
});
_custom.CustomEvent.registerServer('waitTimer', (distance, seconds, text, anim, trackEntity) => {
  return waitTimer(distance, seconds, text, anim, trackEntity);
});
const playAnimationWithResult = (task, seconds, text, heading, minigame) => {
  return new Promise(resolve => {
    const startD = player.dimension;
    if (typeof heading === "number") player.setHeading(heading);
    if (typeof task === "string") _user.user.playScenario(task);else _user.user.playAnim([[task[0], task[1]]], !!task[2], true);
    let timer = seconds;
    let block = _hudBar.hudBar.timer(text, seconds);
    setTimeout(() => {
      let int = setInterval(async () => {
        timer--;
        if (timer <= 0 || player.dimension !== startD || mp.players.local.getHealth() <= 0 || (typeof task === "string" ? !player.isUsingScenario(task) : !player.isPlayingAnim(task[0], task[1], 3))) {
          clearInterval(int);
          if (timer > 0) {
            _user.user.notify("Вы прервали действие", "error");
            resolve(false);
          } else {
            if (minigame && !(await (0, _minigame.MinigamePlay)(minigame))) resolve(false);else resolve(true);
          }
          _user.user.stopAnim();
          block.destroy();
        }
      }, 1000);
    }, 1000);
  });
};
exports.playAnimationWithResult = playAnimationWithResult;
const waitTimer = (distance, seconds, text, anim, trackEntity) => {
  return new Promise(resolve => {
    let oldpos = player.position;
    const pos = () => {
      if (!trackEntity) return oldpos;else {
        let ent;
        if (trackEntity[0] === 'vehicle') ent = mp.vehicles.atRemoteId(trackEntity[1]);else if (trackEntity[0] === 'player') ent = mp.players.atRemoteId(trackEntity[1]);else if (trackEntity[0] === 'ped') ent = mp.peds.atRemoteId(trackEntity[1]);else if (trackEntity[0] === 'object') ent = mp.objects.atRemoteId(trackEntity[1]);
        if (!ent || !ent.handle) return new mp.Vector3(999999, 999999, 999999);
        return ent.position;
      }
    };
    const nearest = () => _system.system.distanceToPos(player.position, pos()) <= distance;
    const anims = () => {
      if (!anim) return true;else return player.isPlayingAnim(anim[0], anim[1], 3);
    };
    if (anim) _user.user.playAnim([[anim[0], anim[1]]], !anim[2], true);
    let timer = seconds;
    let block = _hudBar.hudBar.timer(text, seconds);
    setTimeout(() => {
      let int = setInterval(async () => {
        timer--;
        if (timer <= 0 || !nearest() || !anims()) {
          clearInterval(int);
          if (timer > 0) {
            if (!anims()) _user.user.notify("Вы прервали анимацию", "error");
            if (!nearest()) _user.user.notify("Вы отошли слишком далеко", "error");
            resolve(false);
          } else {
            resolve(true);
          }
          _user.user.stopAnim();
          block.destroy();
        }
      }, 1000);
    }, 1000);
  });
};
exports.waitTimer = waitTimer;
mp.events.add('anim:switchFavourite', (categoryName, animName) => {
  if (!mp.storage.data.favouriteAnims) mp.storage.data.favouriteAnims = [];
  const index = mp.storage.data.favouriteAnims.findIndex(a => a.name == animName);
  if (index === -1) mp.storage.data.favouriteAnims.push({
    name: animName,
    category: categoryName
  });else mp.storage.data.favouriteAnims.splice(index, 1);
  _custom.CustomEvent.triggerCef('anim:setFavourite', mp.storage.data.favouriteAnims);
});
_custom.CustomEvent.register('anim', () => {
  _gui.gui.setGui('animations');
  _custom.CustomEvent.triggerCef('anim:setFavourite', mp.storage.data.favouriteAnims);
});
mp.events.add('anim:stopPlaying', () => {
  _user.user === null || _user.user === void 0 || _user.user.stopAnim();
});
mp.events.add('anim:play', (categoryName, animName) => {
  if (mp.players.local.isInAnyVehicle(false) || _user.user.cuffed || (0, _carry.isPlayerCarryOrCarried)()) return;
  let data = _anim.ANIM_LIST[categoryName][animName];
  if (!data) {
    for (let category in _anim.ANIM_LIST) {
      for (let name in _anim.ANIM_LIST[category]) {
        if (name == animName) {
          data = _anim.ANIM_LIST[category][name];
          break;
        }
      }
    }
  }
  if (!data) return;
  if (typeof data[1] === "string") {
    _user.user.playScenario(data[1]);
  } else {
    _user.user.playAnim(data[1], data[0], data[2]);
  }
});
mp.events.addDataHandler('walkingStyle', async player => {
  if (!player.handle) {
    return;
  }
  await applyWalkingStyle(player);
});
mp.events.add('entityStreamIn', async player => {
  if (!mp.players.exists(player)) {
    return;
  }
  await applyWalkingStyle(player);
});
let duckWalk = false;
setInterval(() => {
  mp.players.forEachInStreamRange(player => {
    const style = player.getVariable('walkingStyle');
    if (!style || style !== 100) return;
    player.setMovementClipset("move_ped_crouched", 0.25);
    player.setStrafeClipset("move_ped_crouched_strafing");
  });
}, 150);
async function applyWalkingStyle(player) {
  const styleIndex = player.getVariable('walkingStyle');
  if (styleIndex == null) {
    return;
  }
  if (duckWalk) {
    player.resetMovementClipset(0.0);
    player.resetStrafeClipset();
    duckWalk = false;
  }
  if (styleIndex !== 100) {
    var _WALKING_STYLES$style;
    const style = (_WALKING_STYLES$style = _anim.WALKING_STYLES[styleIndex]) === null || _WALKING_STYLES$style === void 0 ? void 0 : _WALKING_STYLES$style.animSet;
    if (!style) {
      player.resetMovementClipset(0.0);
      return;
    }
    if (!mp.game.streaming.hasClipSetLoaded(style)) {
      mp.game.invoke("0x6EA47DAE7FAD0EED", style);
      let i = 0;
      while (i < 500) {
        if (!mp.game.streaming.hasClipSetLoaded(style)) {
          i++;
          await mp.game.waitAsync(10);
        } else {
          break;
        }
      }
    }
    player.setMovementClipset(style, 1.0);
  } else {
    if (!mp.game.streaming.hasClipSetLoaded("move_ped_crouched")) {
      mp.game.invoke("0x6EA47DAE7FAD0EED", "move_ped_crouched");
      let i = 0;
      while (i < 500) {
        if (!mp.game.streaming.hasClipSetLoaded("move_ped_crouched")) {
          i++;
          await mp.game.waitAsync(10);
        } else {
          break;
        }
      }
    }
    if (!mp.game.streaming.hasClipSetLoaded("move_ped_crouched_strafing")) {
      mp.game.invoke("0x6EA47DAE7FAD0EED", "move_ped_crouched_strafing");
      let i = 0;
      while (i < 500) {
        if (!mp.game.streaming.hasClipSetLoaded("move_ped_crouched_strafing")) {
          i++;
          await mp.game.waitAsync(10);
        } else {
          break;
        }
      }
    }
    player.setMovementClipset("move_ped_crouched", 0.25);
    player.setStrafeClipset("move_ped_crouched_strafing");
    duckWalk = true;
  }
}
const inspeed = 5.0001;
const inspeedNotFirst = 2.0001;
const outspeed = -5.0001;
const outspeed2 = 2.0001;
_custom.CustomEvent.registerServer('anim:stop', id => {
  const target = mp.players.atRemoteId(id);
  if (!target || !target.handle) return;
  target.clearTasks();
});
let myLastAnimUpper = exports.myLastAnimUpper = false;
const myLastAnimUpperClear = () => {
  exports.myLastAnimUpper = myLastAnimUpper = false;
};
exports.myLastAnimUpperClear = myLastAnimUpperClear;
const playAnimsEntity = (entity, seq, upper = false, lopping = false) => {
  const exists = () => {
    if (!entity) return false;
    if (entity.type === 'player' && !mp.players.exists(entity)) return false;
    if (entity.type === 'ped' && !mp.peds.exists(entity)) return false;
    if (!entity.handle) return false;
    return true;
  };
  return new Promise(async resolve => {
    if (!entity) return resolve(false);
    if (!exists()) return resolve(false);
    if (!entity.handle) return resolve(false);
    if (entity.type === 'player' && entity.vehicle && !upper) return resolve(false);
    let first = true;
    let flags = 0;
    if (upper) flags += 48;
    if (entity.type === 'player' && entity.remoteId === mp.players.local.remoteId) exports.myLastAnimUpper = myLastAnimUpper = upper;
    if (lopping) flags++;
    for (let index = 0; index < seq.length; index++) {
      if (!exists()) return resolve(false);
      const data = seq[index];
      const dict = data[0];
      const anim = data[1];
      const times = data[2] || 1;
      let countloadDict = 0;
      while (!mp.game.streaming.hasAnimDictLoaded(dict) && countloadDict < 100) {
        mp.game.streaming.requestAnimDict(dict);
        countloadDict++;
        await _system.system.sleep(10);
      }
      if (!exists()) return resolve(false);
      if (mp.game.streaming.hasAnimDictLoaded(dict)) {
        if (!exists()) return resolve(false);
        for (let id = 1; id < times + 1; id++) {
          if (!exists()) return resolve(false);
          if (entity.remoteId === mp.players.local.remoteId) exports.myLastAnimUpper = myLastAnimUpper = upper;
          entity.taskPlayAnim(dict, anim, first ? inspeed : inspeedNotFirst, index == seq.length - 1 && id == times ? outspeed2 : outspeed, -1, flags, 0, false, false, false);
          first = false;
          await _system.system.sleep(10);
          while (exists() && entity.isPlayingAnim(dict, anim, 3) && entity.getAnimCurrentTime(dict, anim) <= 0.90) {
            await _system.system.sleep(10);
          }
        }
        mp.game.streaming.removeAnimDict(dict);
      }
    }
    resolve(true);
  });
};
exports.playAnimsEntity = playAnimsEntity;
const playAnims = (targetID, seq, upper = false, lopping = false) => {
  const entity = player.remoteId === targetID ? player : mp.players.atRemoteId(targetID);
  return playAnimsEntity(entity, seq, upper, lopping);
};
exports.playAnims = playAnims;
_custom.CustomEvent.registerServer('playAnim', (targetID, seq, upper, lopping) => {
  playAnims(targetID, seq, upper, lopping);
});
let spamBlock = false;
function spbl() {
  spamBlock = true;
  setTimeout(() => {
    spamBlock = false;
  }, 3000);
}
setInterval(() => {
  if (spamBlock) return;
  if (_user.user.dead) return;
  const player = mp.players.local;
  let dictphone = "cellphone@";
  if (player.vehicle) dictphone += "in_car@ds";
  const cuffedAnim = player.isPlayingAnim('mp_arresting', 'idle', 3);
  if (player.getVariable('cuffed') && !cuffedAnim) {
    _user.user.playAnim([['mp_arresting', 'idle']], true, true);
    _attach.AttachSystem.addLocal('handcuff');
  } else if (!player.getVariable('cuffed') && cuffedAnim) {
    _user.user.playAnim([['mp_arresting', 'b_uncuff']], true, false);
    _attach.AttachSystem.removeLocal('handcuff');
  }
  if (player.getVariable('call')) return;
  const playphoneanim = _gui.inputOnFocus ? player.isPlayingAnim('amb@code_human_wander_texting@male@base', 'static', 3) : player.isPlayingAnim(dictphone, 'cellphone_text_read_base', 3);
  if (_gui.phoneOpened) {
    if (!playphoneanim) {
      if (_gui.inputOnFocus) {
        if (player.isPlayingAnim(dictphone, 'cellphone_text_read_base', 3)) {
          _user.user.playAnim([['amb@code_human_wander_texting@male@base', 'static', 1]], true, true);
        } else {
          _user.user.playAnim([[dictphone, 'cellphone_text_in', 1], ['amb@code_human_wander_texting@male@base', 'static', 1]], true, true);
        }
      } else {
        if (player.isPlayingAnim('amb@code_human_wander_texting@male@base', 'static', 3)) {
          _user.user.playAnim([[dictphone, 'cellphone_text_read_base', 1]], true, true);
        } else {
          _user.user.playAnim([[dictphone, 'cellphone_text_in', 1], [dictphone, 'cellphone_text_read_base', 1]], true, true);
        }
      }
      spbl();
    }
  } else if (playphoneanim) {
    _user.user.playAnim([[dictphone, 'cellphone_text_out']], true, false);
    spbl();
  }
}, 500);
mp.game.streaming.requestAnimDict("cellphone@");
mp.game.streaming.requestAnimDict("cellphone@in_car@ds");
mp.events.addDataHandler('call', (entity, status) => {
  if (status) {
    let dict = "cellphone@";
    if (entity.vehicle) dict += "in_car@ds";
    entity.taskPlayAnim(dict, 'cellphone_call_listen_base', 4.0, -1, -1, 50, 0, false, false, false);
  } else {
    let dict = "cellphone@";
    if (entity.vehicle) dict += "in_car@ds";
    entity.taskPlayAnim(dict, 'cellphone_call_out', 4.0, -1, -1, 50, 0, false, false, false);
  }
});
setInterval(() => {
  if (!mp.players.local.getVariable('call')) return;
  let dict = "cellphone@";
  if (mp.players.local.vehicle) dict += "in_car@ds";
  if (!mp.players.local.isPlayingAnim(dict, 'cellphone_call_listen_base', 3)) {
    mp.players.local.taskPlayAnim(dict, 'cellphone_call_listen_base', 4.0, -1, -1, 50, 0, false, false, false);
  }
}, 5000);
mp.events.add('entityStreamIn', entity => {
  if (entity.type != 'player') return;
  if (!entity.getVariable('call')) return;
  let dict = "cellphone@";
  if (entity.vehicle) dict += "in_car@ds";
  entity.taskPlayAnim(dict, 'cellphone_call_listen_base', 4.0, -1, -1, 50, 0, false, false, false);
});
_custom.CustomEvent.register('stopanim', () => {
  if ((0, _carry.isPlayerCarryOrCarried)()) {
    return;
  }
  _user.user.stopAnim();
});
},{"./system":"pi2J","./custom.event":"py8h","./user":"ggMw","./gui":"bk91","../../shared/anim":"NnaS","./hudBar":"WSqW","./attach":"sXtZ","./minigame":"KnNo","./carry":"QJy9"}],"Q1Tk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inConstruction = void 0;
var _custom = require("./custom.event");
var _construction = require("../../shared/construction");
var _checkpoints = require("./checkpoints");
var _anim = require("./anim");
var _user = require("./user");
var _hudBar = require("./hudBar");
var _gui = require("./gui");
let current;
let inConstruction = exports.inConstruction = false;
_custom.CustomEvent.registerServer('construction:set:success', (configId, id) => {
  const cfg = _construction.CONSTRUCTION_HOUSES[configId];
  if (!cfg) return;
  const item = cfg.sets[id];
  if (!item) return;
  const interior = mp.game.interior.getInteriorAtCoords(cfg.pos.x, cfg.pos.y, cfg.pos.z);
  if (interior) {
    mp.game.interior.enableInteriorProp(interior, item[0]);
    mp.game.interior.refreshInterior(interior);
  }
});
_custom.CustomEvent.registerServer('construction:leave', () => {
  exports.inConstruction = inConstruction = false;
});
_custom.CustomEvent.registerServer('construction:set:enter', (configId, enables) => {
  const cfg = _construction.CONSTRUCTION_HOUSES[configId];
  if (!cfg) return;
  exports.inConstruction = inConstruction = true;
  _gui.gui.setGui(null);
  const interior = mp.game.interior.getInteriorAtCoords(cfg.pos.x, cfg.pos.y, cfg.pos.z);
  if (interior) {
    cfg.sets.map((item, id) => {
      if (enables.includes(id)) mp.game.interior.enableInteriorProp(interior, item[0]);else mp.game.interior.disableInteriorProp(interior, item[0]);
    });
    mp.game.interior.refreshInterior(interior);
  }
});
setTimeout(() => {
  _construction.CONSTRUCTION_HOUSES.map(item => {
    item.sets.map(set => {
      _checkpoints.colshapes.new(new mp.Vector3(set[1], set[2], set[3]), set[5], () => {
        mp.players.local.setHeading(set[4]);
        const interior = mp.game.interior.getInteriorAtCoords(item.pos.x, item.pos.y, item.pos.z);
        if (interior) {
          mp.game.interior.enableInteriorProp(interior, set[0]);
          mp.game.interior.refreshInterior(interior);
          _user.user.notify('Проп показан');
          _hudBar.hudBar.timer('Проп отображён', 5);
          setTimeout(() => {
            mp.game.interior.disableInteriorProp(interior, set[0]);
            mp.game.interior.refreshInterior(interior);
            _user.user.notify('Проп скрыт');
          }, 5000);
        }
      }, {
        dimension: 0,
        drawStaticName: "label"
      });
    });
  });
}, 5000);
_custom.CustomEvent.registerServer('construction:set:start', (configId, id) => {
  const cfg = _construction.CONSTRUCTION_HOUSES[configId];
  if (!cfg) return;
  const item = cfg.sets[id];
  if (!item) return;
  if (current && current.exists) current.destroy();
  let ok = true;
  let block = _hudBar.hudBar.timer('Время на выполнение задания', cfg.setSecond + item[7]);
  _user.user.notify('Вы взяли материалы. Отправляйтесь к метке');
  let time = setTimeout(() => {
    if (current && current.exists) current.destroy();
    current = null;
    ok = false;
    _user.user.notify('Вы не успели выполнить задание', 'error');
    if (block && block.exists) block.destroy();
  }, cfg.setSecond * 1000);
  let donow = false;
  current = _checkpoints.colshapes.new(new mp.Vector3(item[1], item[2], item[3]), item[5], async () => {
    if (!current || !current.exists) return;
    if (donow) return;
    donow = true;
    ok = true;
    const scenarios = item[6].split('|');
    for (let i in scenarios) {
      if (ok) {
        const scenario = scenarios[i];
        _custom.CustomEvent.triggerCef('hud:flatStart', 10);
        const status = await (0, _anim.playAnimationWithResult)(scenario, 10, 'Выполнение задания', item[4]);
        if (!status) {
          _custom.CustomEvent.triggerCef('hud:flatStop');
          ok = false;
        }
        if (!current || !current.exists) ok = false;
      }
    }
    if (ok) {
      if (block && block.exists) block.destroy();
      if (current && current.exists) {
        current.destroy();
        current = null;
      }
      _custom.CustomEvent.triggerServer('construction:set:ok', id);
      clearTimeout(time);
    }
    donow = false;
  }, {
    type: 27,
    dimension: -1,
    drawStaticName: 'scaleform'
  });
});
},{"./custom.event":"py8h","../../shared/construction":"dSZZ","./checkpoints":"XCJl","./anim":"stJJ","./user":"ggMw","./hudBar":"WSqW","./gui":"bk91"}],"nff8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FIREPLACE_TYPE_CONFIGS = void 0;
const FIREPLACE_TYPE_CONFIGS = exports.FIREPLACE_TYPE_CONFIGS = new Map([['small', {
  asset: 'core',
  effect: 'fire_object',
  scale: 2,
  hp: 300
}], ['big', {
  asset: 'core',
  effect: 'fire_object',
  scale: 5,
  hp: 700
}]]);
},{}],"eKKM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fireSpots = exports.FirePlace = void 0;
var _custom = require("../../custom.event");
var _system = require("../../../../shared/system");
var _config = require("./config");
const fireSpots = exports.fireSpots = new Map();
_custom.CustomEvent.registerServer('fireSpots:load', loadFireSpots);
_custom.CustomEvent.registerServer('fireSpots:unload', unloadFireSpot);
_custom.CustomEvent.registerServer('fireSpots:extinguish', extinguishFireplace);
function extinguishFireplace(spotId, fireplaceIdx) {
  if (!fireSpots.has(spotId)) {
    return;
  }
  const spot = fireSpots.get(spotId);
  const place = spot.firePlaces[fireplaceIdx];
  place.destroy();
}
function loadFireSpots(id, json) {
  if (fireSpots.has(id)) {
    return;
  }
  const fireSpotData = JSON.parse(json);
  const fireSpot = new FireSpot(id, fireSpotData);
  fireSpots.set(id, fireSpot);
}
function unloadFireSpot(id) {
  if (!fireSpots.has(id)) {
    return;
  }
  const fireSpot = fireSpots.get(id);
  fireSpot.destroy();
  fireSpots.delete(id);
}
class FireSpot {
  constructor(id, data) {
    this.id = id;
    this.position = _system.systemUtil.getVector3Mp(data.position);
    this.firePlaces = [];
    data.firePlaces.forEach((firePlaceData, index) => {
      const idx = index;
      const finishHandler = () => {
        _custom.CustomEvent.triggerServer('fireSpots:extinguish', this.id, idx);
      };
      this.firePlaces.push(new FirePlace({
        pos: this.position,
        heading: data.heading
      }, firePlaceData, finishHandler));
    });
  }
  destroy() {
    for (let firePlace of this.firePlaces) {
      firePlace.destroy();
    }
  }
}
class FirePlace {
  constructor(center, data, finishHandler) {
    this.finishHandler = finishHandler;
    this._isBurning = data.isBurning;
    this.type = data.type;
    const {
      asset,
      effect,
      scale,
      hp
    } = _config.FIREPLACE_TYPE_CONFIGS.get(this.type);
    this.radius = scale;
    this.hp = hp;
    this.absolutePosition = _system.systemUtil.offsetPosition(center.pos, center.heading, _system.systemUtil.getVector3Mp(data.position));
    this.absolutePosition.z = mp.game.gameplay.getGroundZFor3dCoord(this.absolutePosition.x, this.absolutePosition.y, this.absolutePosition.z + 10, 0.0, false);
    this.fxHandle = createParticleFx(asset, effect, this.absolutePosition, scale);
  }
  get isBurning() {
    return this._isBurning;
  }
  destroy() {
    if (!this.fxHandle) {
      return;
    }
    mp.game.graphics.removeParticleFx(this.fxHandle, true);
    this.fxHandle = 0;
    this._isBurning = false;
  }
  extinguish() {
    if (this.hp === 0) {
      this.finishHandler();
      return;
    }
    this.hp--;
  }
}
exports.FirePlace = FirePlace;
function createParticleFx(assetName, effectName, position, scale) {
  if (!mp.game.streaming.hasNamedPtfxAssetLoaded(assetName)) {
    mp.game.streaming.requestNamedPtfxAsset(assetName);
  }
  mp.game.graphics.setPtfxAssetNextCall(assetName);
  return mp.game.graphics.startParticleFxLoopedAtCoord(effectName, position.x, position.y, position.z, 0, 0, 0, scale, false, false, false, true);
}
},{"../../custom.event":"py8h","../../../../shared/system":"SNxO","./config":"nff8"}],"ae5U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fireExtinguisherHash = void 0;
var _firespots = require("./firespots");
var _system = require("../../../../shared/system");
var _custom = require("../../custom.event");
var _user = require("../../user");
const ExtinguishingSphereRadius = 2;
const player = mp.players.local;
const fireExtinguisherHash = exports.fireExtinguisherHash = mp.game.joaat('weapon_fireextinguisher');
const fireTruckHash = mp.game.joaat('firetruk');
mp.events.add('render', () => {
  if (!player.isInAnyVehicle(false) || player.vehicle.getModel() !== fireTruckHash) {
    return;
  }
  mp.game.controls.disableControlAction(0, 68, true);
});
mp.events.add('playerWeaponShot', (position, targetEntity) => {
  const current = mp.game.invoke('0x0A6DB4965674D243', player.handle);
  if (current !== fireExtinguisherHash) {
    return;
  }
  for (let spot of _firespots.fireSpots.values()) {
    const nearestPlace = spot.firePlaces.filter(place => place.isBurning && _system.systemUtil.distanceToPos(position, place.absolutePosition) < place.radius + ExtinguishingSphereRadius).sort((a, b) => {
      return fireplacesComparerByDistance(a, b, position);
    })[0];
    if (!nearestPlace) {
      continue;
    }
    nearestPlace.extinguish();
    return;
  }
});
function fireplacesComparerByDistance(a, b, position) {
  return _system.systemUtil.distanceToPos(position, a.absolutePosition) <= _system.systemUtil.distanceToPos(position, b.absolutePosition) ? -1 : 1;
}
_custom.CustomEvent.registerServer('firefighter:getMixtureInWeapon', () => {
  return _user.user.currentAmmo;
});
},{"./firespots":"eKKM","../../../../shared/system":"SNxO","../../custom.event":"py8h","../../user":"ggMw"}],"ehdN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inSaveZone = exports.blockShootSaveZoneStatus = void 0;
var _savezone = require("../../shared/savezone");
var _system = require("./system");
var _custom = require("./custom.event");
var _user = require("./user");
var _controls = require("./controls");
var _construction = require("./construction");
var _main = require("../../shared/casino/main");
var _extinguishing = require("./jobs/firefighter/extinguishing");
let inSaveZone = exports.inSaveZone = false;
let inRedZone = false;
const blockShootSaveZoneStatus = () => {
  let {
    x,
    y,
    z
  } = mp.players.local.position;
  const inCasino = _main.CASINO_INTERIORS_IDS_IN.includes(mp.game.interior.getInteriorAtCoords(x, y, z));
  if (inCasino) mp.game.controls.disableControlAction(0, 22, true);
  const currentWeapon = mp.game.invoke('0x0A6DB4965674D243', mp.players.local.handle);
  return inSaveZone && (!_user.user.is_police && _user.user.fraction != 1 || inCasino) && currentWeapon !== _extinguishing.fireExtinguisherHash;
};
exports.blockShootSaveZoneStatus = blockShootSaveZoneStatus;
setInterval(() => {
  if (!_user.user.login) return;
  let {
    x,
    y,
    z
  } = mp.players.local.position;
  const zone = _savezone.safeZones.find(zone => _system.system.distanceToPos(mp.players.local.position, {
    x: zone.x,
    y: zone.y,
    z: zone.z
  }) <= zone.r);
  const inZone = _construction.inConstruction || _user.user.inDriftMap || _main.CASINO_INTERIORS_IDS_IN.includes(mp.game.interior.getInteriorAtCoords(x, y, z)) || zone && !zone.disabled && !mp.players.local.dimension;
  if (inSaveZone !== inZone) _custom.CustomEvent.triggerCef('savezone:set', inZone);
  exports.inSaveZone = inSaveZone = inZone;
  const inZone2 = !!_savezone.REDZONE_POSITIONS.find(zone => _system.system.distanceToPos(mp.players.local.position, zone) <= zone.r) && !mp.players.local.dimension;
  if (inRedZone !== inZone2) _custom.CustomEvent.triggerCef('redzone:set', inZone);
  inRedZone = inZone2;
}, 1000);
mp.events.add('render', () => {
  if (blockShootSaveZoneStatus()) _controls.disableControlGroup.saveZone();
  if (_user.user.cuffed || _user.user.walkingWithObject) _controls.disableControlGroup.handcuff();
});
_custom.CustomEvent.registerServer('safezone:set', (index, toggle) => {
  const safeZone = _savezone.safeZones[index];
  safeZone.disabled = toggle;
});
_custom.CustomEvent.registerServer('safezone:init', disabledZones => {
  disabledZones.forEach(zone => {
    _savezone.safeZones[zone].disabled = true;
  });
});
},{"../../shared/savezone":"WVCz","./system":"pi2J","./custom.event":"py8h","./user":"ggMw","./controls":"yuOK","./construction":"Q1Tk","../../shared/casino/main":"FJpA","./jobs/firefighter/extinguishing":"ae5U"}],"Qh13":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.teleportAnticheat = exports.anticheatProtect = void 0;
var _anticheat = require("../../shared/anticheat");
var _user = require("./user");
var _custom = require("./custom.event");
var _system = require("./system");
var _savezone = require("./savezone");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
let vehicles;
let players;
setInterval(() => {
  vehicles = mp.vehicles.toArray().filter(veh => veh.handle && veh.getSpeed() > 3);
  players = mp.players.toArray().filter(q => q.handle && q != player && !q.vehicle);
  players.map(player => player.setSuffersCriticalHits(false));
  player.setSuffersCriticalHits(false);
}, 300);
mp.events.add('render', () => {
  var _vehicles, _players;
  if (player.dimension) return;
  (_vehicles = vehicles) === null || _vehicles === void 0 || _vehicles.map(veh => {
    if (!mp.vehicles.exists(veh) || !veh.handle) return;
    mp.game.invoke('0xA53ED5520C07654A', player.handle, veh.handle, true);
    mp.game.invoke('0xA53ED5520C07654A', veh.handle, player.handle, true);
  });
  (_players = players) === null || _players === void 0 || _players.map(player => {
    if (!mp.players.exists(player) || !player.handle) return;
    vehicles.map(veh => {
      if (!mp.vehicles.exists(veh) || !veh.handle) return;
      mp.game.invoke('0xA53ED5520C07654A', player.handle, veh.handle, true);
      mp.game.invoke('0xA53ED5520C07654A', veh.handle, player.handle, true);
    });
  });
});
let anticheatProtectList = {};
let lastTeleportPos;
let lastPosition;
let lastTeleportTime = 0;
mp.events.add('teleport', (x, y, z) => {
  teleportAnticheat(x, y, z);
});
mp.events.add('teleportVisible', (h, pos) => {
  if (!pos) return;
  teleportAnticheat(...pos);
});
const teleportAnticheat = (x, y, z) => {
  lastTeleportTime = _system.system.timestamp;
  lastTeleportPos = new mp.Vector3(x, y, z);
  const q = _objectSpread({}, lastTeleportPos);
  setTimeout(() => {
    if (!lastTeleportPos) return;
    if (lastTeleportPos.x !== q.x || lastTeleportPos.y !== q.y) return;
    lastTeleportPos = null;
  }, _system.system.TELEPORT_TIME + 1000);
};
exports.teleportAnticheat = teleportAnticheat;
let lastVehicle;
setInterval(() => {
  const veh = player.vehicle;
  if (veh == lastVehicle) return;
  if (!veh && lastVehicle) return lastVehicle = null;
  if (!lastVehicle && veh) {
    lastVehicle = veh;
    const locked = veh.getVariable('locked');
    if (locked) {
      if (!_user.nowPutIntoVehicle) {
        if (veh.lastLockedTime && _system.system.timestamp - veh.lastLockedTime < 2) return;
        _user.user.cheatDetect('entervehicle', `Попал в закрытый ТС`);
      }
    }
  }
}, 100);
const anticheatProtect = (key, time = 5000) => {
  if (!anticheatProtectList[key]) anticheatProtectList[key] = 0;
  anticheatProtectList[key]++;
  setTimeout(() => {
    anticheatProtectList[key]--;
  }, time);
};
exports.anticheatProtect = anticheatProtect;
_custom.CustomEvent.registerServer('anticheatProtect', (key, time) => {
  anticheatProtect(key, time);
});
_custom.CustomEvent.registerServer('anticheatProtects', (keys, time) => {
  keys.map(key => {
    if (!anticheatProtectList[key]) anticheatProtectList[key] = 0;
    anticheatProtectList[key]++;
    setTimeout(() => {
      anticheatProtectList[key]--;
    }, time);
  });
  setTimeout(() => {
    keys.map(key => {
      anticheatProtectList[key]--;
    });
  }, time);
});
setInterval(() => {
  if (!_user.user.login) return;
  let tm = _system.system.timestamp;
  setTimeout(() => {
    let tm2 = _system.system.timestamp;
    if (tm2 - tm < 4.3) _user.user.cheatDetect('memory', `Увеличение скорости всех ресурсов игры через CheatEngine или подобное`);
  }, 5000);
}, 10000);
let lastHp = 100;
let lastArmour = 100;
setInterval(() => {
  if (!_user.user.login) return;
  const newposition = player.position;
  if (anticheatProtectList.teleport || _user.user.isAdminNow() || !lastPosition || player.vehicle && player.vehicle.getPedInSeat(-1) && player.vehicle.getPedInSeat(-1) != player.handle || player.vehicle && player.vehicle.autosalon) {
    lastPosition = newposition;
  } else {
    const dist = lastPosition.z < -100 ? _system.system.distanceToPos2D(lastPosition, newposition) : _system.system.distanceToPos(lastPosition, newposition);
    if (dist > 100) {
      if (!lastTeleportPos || _system.system.distanceToPos(newposition, lastTeleportPos) > 50) {
        _user.user.cheatDetect('teleport', `С ${lastPosition.x.toFixed(0)} ${lastPosition.y.toFixed(0)} ${lastPosition.z.toFixed(0)} на ${newposition.x.toFixed(0)} ${newposition.y.toFixed(0)} ${newposition.z.toFixed(0)}. Расстояние ${dist.toFixed(0)}м. Последняя телепортация была ${lastTeleportTime ? `${_system.system.timestamp - lastTeleportTime} сек. назад` : 'не было'}`);
      }
    }
    lastPosition = newposition;
  }
  let current = player.getHealth();
  if (current < 0) current = 0;
  const superLastHp = lastHp;
  if (current > lastHp) {
    setTimeout(() => {
      if (anticheatProtectList.heal) return;
      _user.user.cheatDetect('heal', `Было ${superLastHp}HP стало ${current}HP`);
    }, 1000);
  }
  lastHp = current;
  const currentArmour = player.getArmour();
  const superLastArmour = lastArmour;
  if (currentArmour > lastArmour && !anticheatProtectList.armour) {
    setTimeout(() => {
      if (anticheatProtectList.armour) return;
      _user.user.cheatDetect('armour', `Было ${superLastArmour}AP стало ${currentArmour}AP`);
    }, 3000);
  }
  lastArmour = currentArmour;
}, 200);
mp.events.add('render', () => {
  if (!_user.user.login) return;
  const current = mp.game.invoke('0x0A6DB4965674D243', player.handle);
  if (!_anticheat.weapon_hashes.find(q => q[1] == current)) {
    if (player.isUsingAnyScenario()) return;
    if (_user.myWeapons) return;
    player.removeAllWeapons();
    player.giveWeapon(-1569615261, 1, true);
  } else {
    if (current !== -1569615261 && !player.isUsingAnyScenario() && _user.myWeapons != current) {
      _user.user.cheatDetect('weapon', current);
      (0, _user.clearAllWeapons)();
    } else if (current === -1569615261 && _user.myWeapons) {
      player.giveWeapon(_user.myWeapons, 0, true);
    } else if (_user.myWeaponsHash && _user.myWeaponsHash != _system.system.encryptCodes(_user.myWeapons.toString(), _user.myWeaponsHashStr)) {
      _user.user.cheatDetect('memory', "Подмена данных оружия");
      (0, _user.clearAllWeapons)();
    } else {
      if ((0, _savezone.blockShootSaveZoneStatus)() && player.isShooting()) {
        _user.user.cheatDetect('weapon', 'Стрельба в ЗЗ без доступа');
        (0, _user.clearAllWeapons)();
      }
    }
  }
});
mp.events.add('render', () => {
  const veh = player.vehicle;
  if (veh) {
    const engine = veh.getVariable('engine');
    if (!engine && !veh.autosalon) {
      if (veh.getIsEngineRunning()) {
        veh.setEngineOn(false, true, false);
        veh.setUndriveable(true);
        setTimeout(() => {
          if (mp.vehicles.exists(veh) && veh.handle && !veh.getVariable('engine') && veh.getIsEngineRunning()) {
            _user.user.cheatDetect('vehicleengine', 'Взлом двигателя ТС');
          }
        }, 800);
      }
    }
  }
});
},{"../../shared/anticheat":"e4XL","./user":"ggMw","./custom.event":"py8h","./system":"pi2J","./savezone":"ehdN"}],"eXav":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testDriveMode = exports.stopBuyCar = exports.openSalonMenu = void 0;
var _custom = require("../custom.event");
var _user = require("../user");
var _gui = require("../gui");
var _controls = require("../controls");
var _protection = require("../protection");
var _camera = require("../camera");
const player = mp.players.local;
let showOffset = [1.23276901245117, -7.93903710937500, 2.460024642944336];
let testDriveMode = exports.testDriveMode = false;
let currentPosition;
let currentTestPosition;
let currentExitPosition;
let currentCamera;
let currentVeh;
let currentDonate;
let currentFamilyBuy;
let currentCars;
let currentSelectedCar;
let currentAutosalonId;
let currentAutosalonName;
let currentPrimaryColor = {
  r: 0,
  g: 0,
  b: 0
};
let currentSecondaryColor = {
  r: 0,
  g: 0,
  b: 0
};
const stopBuyCar = () => {
  (0, _protection.anticheatProtect)('teleport');
  player.position = new mp.Vector3(currentExitPosition.x, currentExitPosition.y, currentExitPosition.z);
  player.freezePosition(false);
  unFocusCamera();
  _gui.gui.setGui(null);
  _custom.CustomEvent.triggerServer('server:autosalon:stopBuyCar');
};
exports.stopBuyCar = stopBuyCar;
mp.events.add('server:autosalon:stopBuyCar', () => {
  stopBuyCar();
});
let isCameraZoomEnabled = true;
mp.events.add('autosalon:toggleZoom', enableZoom => {
  isCameraZoomEnabled = enableZoom;
});
mp.events.add('render', () => {
  if (!isCameraZoomEnabled) {
    return;
  }
  (0, _camera.handleCamZoom)(currentCamera);
});
mp.events.add('autosalon:setPrimaryColor', (r, g, b) => {
  currentPrimaryColor = {
    r,
    g,
    b
  };
  vehColor();
});
mp.events.add('autosalon:setSecondaryColor', (r, g, b) => {
  currentSecondaryColor = {
    r,
    g,
    b
  };
  vehColor();
});
mp.events.add('autosalon:buyCar', (isFamilyMoney = false) => {
  _custom.CustomEvent.triggerServer('autosalon:buyCar', currentSelectedCar, currentAutosalonId, currentPrimaryColor, currentSecondaryColor, isFamilyMoney);
});
mp.events.add('client:autosalon:changeCar', id => {
  currentSelectedCar = id;
  respawnVehicle();
});
let maxSpeed = 999;
mp.events.add('client:autosalon:testDrive', () => {
  respawnVehicle(true);
  player.freezePosition(false);
  player.setAlpha(0);
  player.setInvincible(true);
  setTimeout(async () => {
    player.setIntoVehicle(currentVeh.handle, -1);
    player.setAlpha(255);
    const cfg = getCurrentCar();
    maxSpeed = await _custom.CustomEvent.callServer('vehicle:getMaxSpeed', cfg.model);
    currentVeh.setMaxSpeed(maxSpeed / 3.6);
  }, 100);
  setTimeout(() => {
    unFocusCamera();
    _user.user.notify("У вас 60 секунд на тест драйв", "success");
    exports.testDriveMode = testDriveMode = true;
    let timer = 600;
    let int = setInterval(() => {
      timer--;
      if (mp.players.local.vehicle) mp.players.local.vehicle.setMaxSpeed(maxSpeed / 3.6);
      if (timer <= 0 || !player.isInAnyVehicle(false)) {
        player.setInvincible(false);
        _user.user.notify("Тест драйв завершён", "error");
        clearInterval(int);
        exports.testDriveMode = testDriveMode = false;
        openSalonMenu();
      }
    }, 100);
  }, 1000);
});
(0, _controls.mouseMove)((right, down, leftKey, rightKey, posX) => {
  if (!leftKey) return;
  if (!currentVeh) return;
  if (!mp.vehicles.exists(currentVeh)) return;
  if (!currentVeh.handle) return;
  if (testDriveMode) return;
  if (posX > 0.21 && posX < 0.81) {
    currentVeh.setHeading(currentVeh.getHeading() + right / 1.5);
    currentVeh.setCoords(currentPosition.x, currentPosition.y, currentPosition.z, true, true, true, true);
  }
}, 10);
const vehColor = () => {
  if (!mp.vehicles.exists(currentVeh)) return;
  currentVeh.setCustomPrimaryColour(currentPrimaryColor.r, currentPrimaryColor.g, currentPrimaryColor.b);
  currentVeh.setCustomSecondaryColour(currentSecondaryColor.r, currentSecondaryColor.g, currentSecondaryColor.b);
};
_custom.CustomEvent.registerServer('autosalon:start', (name, id, cars, exit, position, test, donate, familyBuy) => {
  currentDonate = donate;
  currentFamilyBuy = familyBuy;
  currentExitPosition = exit;
  currentPosition = position;
  currentTestPosition = test;
  currentAutosalonId = id;
  currentAutosalonName = name;
  currentCars = cars;
  currentSelectedCar = currentCars[0].item;
  openSalonMenu();
});
const openSalonMenu = () => {
  (0, _protection.teleportAnticheat)(currentPosition.x, currentPosition.y, currentPosition.z + 15);
  player.position = new mp.Vector3(currentPosition.x, currentPosition.y, currentPosition.z + 15);
  player.freezePosition(true);
  _gui.gui.setGui('autosalon');
  respawnVehicle();
  focusCamera();
  _custom.CustomEvent.triggerCef('autosalon:startAutosalon', currentAutosalonName, currentCars, currentSelectedCar, currentDonate, currentFamilyBuy);
};
exports.openSalonMenu = openSalonMenu;
const unFocusCamera = () => {
  _gui.gui.setGui(null);
  mp.game.cam.renderScriptCams(false, false, 0, false, false);
  mp.game.invoke('0x198F77705FA0931D', player.handle);
  mp.game.cam.setGameplayCamRelativeHeading(0);
  _user.user.hideLoadDisplay(500, false);
};
const focusCamera = () => {
  mp.game.streaming.requestCollisionAtCoord(currentPosition.x, currentPosition.y, currentPosition.z);
  mp.game.streaming.setFocusArea(currentPosition.x, currentPosition.y, currentPosition.z, 0.0, 0.0, 0.0);
  if (!currentCamera || !mp.cameras.exists(currentCamera)) currentCamera = mp.cameras.new('car_dealing');
  currentCamera.setFov(30);
  currentCamera.setActive(true);
  currentCamera.setCoord(currentPosition.x + showOffset[0], currentPosition.y + showOffset[1], currentPosition.z + showOffset[2]);
  currentCamera.pointAtCoord(currentPosition.x, currentPosition.y, currentPosition.z);
  mp.game.cam.renderScriptCams(true, false, 0, true, false);
  mp.game.cam.renderScriptCams(true, true, 1500, true, false);
};
const getCurrentCar = () => {
  return currentCars.find(q => q.item == currentSelectedCar);
};
const respawnVehicle = (test = false) => {
  if (currentVeh && mp.vehicles.exists(currentVeh)) {
    currentVeh.destroy();
  }
  const cfg = getCurrentCar();
  currentVeh = mp.vehicles.new(mp.game.joaat(cfg.model), test ? new mp.Vector3(currentTestPosition.x, currentTestPosition.y, currentTestPosition.z) : new mp.Vector3(currentPosition.x, currentPosition.y, currentPosition.z), {
    heading: test ? currentTestPosition.h : currentPosition.h,
    dimension: player.dimension
  });
  currentVeh.autosalon = true;
  setTimeout(() => {
    vehColor();
  }, 10);
};
},{"../custom.event":"py8h","../user":"ggMw","../gui":"bk91","../controls":"yuOK","../protection":"Qh13","../camera":"h8FB"}],"Sp7p":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.undress = exports.setComponent = exports.resetClothData = exports.resetCloth = exports.oldClothData = exports.getComponent = exports.generateClothData = exports.exitCloth = exports.dressData = exports.dressCfg = exports.createDress = void 0;
var _menu2 = require("./menu");
var _system = require("./system");
var _cloth = require("../../shared/cloth");
var _user = require("./user");
var _custom = require("./custom.event");
var _gui = require("./gui");
var _controls = require("./controls");
var _camera = require("./camera");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
global.require('./dress.json.js');
let dressData = exports.dressData = void 0;
let dressCfg = exports.dressCfg = global.dressstatic ? global.dressstatic : [];
const chunk = (arr, chunkSize) => {
  if (chunkSize <= 0) throw "Invalid chunk size";
  var R = [];
  for (var i = 0, len = arr.length; i < len; i += chunkSize) R.push(arr.slice(i, i + chunkSize));
  return R;
};
_custom.CustomEvent.registerServer('dressData:remove', id => {
  _custom.CustomEvent.triggerCef('dressData:remove', id);
  dressCfg.map((item, index) => {
    if (item.id === id) dressCfg.splice(index, 1);
  });
});
_custom.CustomEvent.registerServer('dressData:new', data => {
  _custom.CustomEvent.triggerCef('dressData:new', JSON.stringify(data));
  data.map(item => {
    let ind = dressCfg.findIndex(q => q.id === item.id);
    if (ind > -1) {
      dressCfg[ind] = _objectSpread(_objectSpread({}, dressCfg[ind]), item);
    } else {
      dressCfg.push(item);
    }
  });
});
_custom.CustomEvent.registerServer('dress:data', data => {
  exports.dressData = dressData = data;
  _custom.CustomEvent.triggerCef('dress:data', dressData);
});
const createDress = (test = false) => {
  let m = new _menu2.MenuClass("Добавление одежды", "Категория");
  const list = test ? _cloth.partsListAdmin : _cloth.partsList;
  const id = test ? -1 : 0;
  list.map(item => {
    if (item[0] == 333) {
      m.newItem({
        name: item[1],
        onpress: (itm, i) => {
          m.close();
          editCloth(id, 0, "", [[{
            component: 3,
            drawable: 0,
            texture: 0
          }, {
            component: 8,
            drawable: 0,
            texture: 0
          }, {
            component: 11,
            drawable: 0,
            texture: 0
          }, ...list.filter(q => q[0] != 333 && q[0] != 3).map(q => {
            return {
              component: q[0],
              drawable: 0,
              texture: 0
            };
          })]]);
        }
      });
    } else if (item[0] == 3) {
      m.newItem({
        name: item[1],
        onpress: (itm, i) => {
          m.close();
          editCloth(id, 0, "", [[{
            component: 3,
            drawable: 0,
            texture: 0
          }, {
            component: 8,
            drawable: 0,
            texture: 0
          }, {
            component: 11,
            drawable: 0,
            texture: 0
          }]]);
        }
      });
    } else if (item[0] === 1000) {
      m.newItem({
        name: item[1],
        onpress: () => {
          m.close();
          editGlove(id, 0, "", [generateStandardGloveData()]);
        }
      });
    } else {
      m.newItem({
        name: item[1],
        onpress: (itm, i) => {
          m.close();
          editCloth(id, 0, "", [[{
            component: item[0],
            drawable: 0,
            texture: 0
          }]]);
        }
      });
    }
  });
  m.open();
};
exports.createDress = createDress;
let oldClothData = exports.oldClothData = [];
let currentCamera;
const generateClothData = () => {
  exports.oldClothData = oldClothData = [];
  oldClothData.push({
    component: 1,
    drawable: player.getDrawableVariation(1),
    texture: player.getTextureVariation(1)
  });
  for (let i = 3; i < 12; i++) oldClothData.push({
    component: i,
    drawable: player.getDrawableVariation(i),
    texture: player.getTextureVariation(i)
  });
  oldClothData.push({
    component: 100,
    drawable: player.getPropIndex(0),
    texture: player.getPropTextureIndex(0)
  });
  oldClothData.push({
    component: 101,
    drawable: player.getPropIndex(1),
    texture: player.getPropTextureIndex(1)
  });
  oldClothData.push({
    component: 102,
    drawable: player.getPropIndex(2),
    texture: player.getPropTextureIndex(2)
  });
  oldClothData.push({
    component: 106,
    drawable: player.getPropIndex(6),
    texture: player.getPropTextureIndex(6)
  });
  oldClothData.push({
    component: 107,
    drawable: player.getPropIndex(7),
    texture: player.getPropTextureIndex(7)
  });
};
exports.generateClothData = generateClothData;
const resetCloth = () => {
  oldClothData.map(item => {
    setComponent(item.component, item.drawable, item.texture);
  });
};
exports.resetCloth = resetCloth;
const resetClothData = () => {
  exports.oldClothData = oldClothData = [];
};
exports.resetClothData = resetClothData;
let mouseMoveBlock;
const undress = () => {
  setComponent(107, -1, -1);
  setComponent(106, -1, -1);
  setComponent(102, -1, -1);
  setComponent(101, -1, -1);
  setComponent(100, -1, -1);
  setComponent(7, 0, 0);
  setComponent(1, 0, 0);
  setComponent(6, !_user.user.isMale() ? 35 : 34, 0);
  setComponent(4, !_user.user.isMale() ? 15 : 14, 0);
  setComponent(3, 15, 0);
  setComponent(8, !_user.user.isMale() ? 2 : 57, 0);
  setComponent(11, 15, 0);
};
exports.undress = undress;
let isZoomEnabled = true;
mp.events.add('cloth:toggleCameraZoom', enableZoom => {
  isZoomEnabled = enableZoom;
});
_custom.CustomEvent.registerServer('clothshop:open', async (id, name, type, dataIds, donate, pos) => {
  generateClothData();
  player.setCoords(pos.x, pos.y, pos.z, true, true, true, true);
  player.setHeading(pos.h);
  if (_gui.gui.currentGui === "clothshop") return _custom.CustomEvent.triggerCef('cef:cloth_shop:init', id, name, type, JSON.stringify(dataIds), donate);
  _gui.gui.setGui("clothshop");
  if (!mouseMoveBlock) {
    mouseMoveBlock = (0, _controls.mouseMove)((right, down, leftKey, rightKey, posX, posY) => {
      if (posX > 0.21 && posX < 0.61) {
        if (right > 0.04 || right < -0.04) {
          player.setHeading(player.getHeading() + right * 2.5);
        }
      }
    }, 10);
  }
  setTimeout(() => {
    if (!_gui.gui.currentGui) return;
    _custom.CustomEvent.triggerCef('cef:cloth_shop:init', id, name, type, JSON.stringify(dataIds), donate);
    if (!currentCamera) {
      const pos = player.getOffsetFromInWorldCoords(0, 2.5, 0);
      currentCamera = mp.cameras.new('clothshop', pos, new mp.Vector3(0, 0, 0), 20);
      currentCamera.pointAtPedBone(player.handle, 31086, 0, 0, 0, false);
      currentCamera.setActive(true);
      mp.game.cam.renderScriptCams(true, false, 2000, false, false);
      cameraCategory(0);
    }
  }, 1000);
});
mp.events.add('render', () => {
  if (!isZoomEnabled) {
    return;
  }
  (0, _camera.handleCamZoom)(currentCamera);
});
const cameraCategory = id => {
  if (!currentCamera || !mp.cameras.exists(currentCamera)) return;
  if (!id) id = 3;
  const cfg = (0, _cloth.getBoneData)(id);
  if (!cfg) return;
  const pos = player.getOffsetFromInWorldCoords(cfg.x, cfg.y, cfg.z);
  currentCamera.setCoord(pos.x, pos.y, pos.z);
  currentCamera.pointAtPedBone(player.handle, cfg.bone, 0, 0, 0, false);
};
mp.events.add('cloth:category', id => {
  cameraCategory(id);
});
let lastDressDataRequest = _system.system.timestampMS;
mp.events.add('cloth:preview', async (datas, id) => {
  resetCloth();
  const data = JSON.parse(datas);
  if (!data) return;
  if (id == null) {
    data.map(item => {
      setComponent(item.component, item.drawable, item.texture);
    });
  } else {
    if (data.hasOwnProperty('texture')) {
      const currentTorso = player.getDrawableVariation(3);
      const currentGloveId = dressData.gloves;
      if (currentTorso <= 15) {
        setComponent(1000, new Map(data.torsoMap).get(currentTorso), data.texture);
      } else {
        if (_system.system.timestampMS - lastDressDataRequest < 150) {
          return;
        }
        const response = await _custom.CustomEvent.callServer('dress:getDressDataById', currentGloveId);
        if (!response) {
          return _user.user.notify('Ошибка');
        }
        lastDressDataRequest = _system.system.timestampMS;
        const defaultTorsoForCurrentGloves = response[0].torsoMap.find(t => t[1] == currentTorso)[0];
        const glovesTorsoForTargetGloves = new Map(data.torsoMap).get(defaultTorsoForCurrentGloves);
        setComponent(1000, glovesTorsoForTargetGloves, data.texture);
      }
    } else {
      data.map(item => {
        setComponent(item.component, item.drawable, item.texture);
      });
    }
  }
});
mp.events.add('cloth:exit', () => {
  exitCloth();
});
const exitCloth = () => {
  _gui.gui.setGui(null);
  resetCloth();
  _custom.CustomEvent.triggerServer('cloth:exit');
  if (currentCamera) {
    currentCamera.destroy();
    currentCamera = null;
  }
  mp.game.cam.renderScriptCams(false, true, 500, true, true);
  exports.oldClothData = oldClothData = [];
  if (mouseMoveBlock) mouseMoveBlock.destroy();
  mouseMoveBlock = null;
};
exports.exitCloth = exitCloth;
_custom.CustomEvent.registerServer('admin:cloth:edit', (data, page) => {
  _menu2.MenuClass.closeMenu();
  let [category, id, price, name, cloth] = JSON.parse(data);
  if (category === 1000) {
    editGlove(id, price, name, cloth.map(glove => mapGloveDataFromServer(glove)));
  } else {
    editCloth(id, price, name, cloth, 0, page);
  }
});
_custom.CustomEvent.registerServer('admin:cloth:new', () => {
  createDress();
});
const setComponent = (component, drawable, texture) => {
  if (drawable === undefined || texture === undefined) return;
  if (component === 1000) {
    player.setComponentVariation(3, drawable, texture, 2);
  }
  if (component >= 100) {
    component -= 100;
    player.setPropIndex(component, drawable, texture, true);
  } else {
    player.setComponentVariation(component, drawable, texture, 2);
  }
};
exports.setComponent = setComponent;
const getComponent = component => {
  if (component >= 100) {
    component -= 100;
    return {
      drawable: player.getPropIndex(component),
      texture: player.getPropTextureIndex(component)
    };
  } else {
    return {
      drawable: player.getDrawableVariation(component),
      texture: player.getTextureVariation(component)
    };
  }
};
exports.getComponent = getComponent;
let editVaration = 0;
const editCloth = (id, price, name, datas, cursor = 0, page) => {
  try {
    if (oldClothData.length == 0) generateClothData();
    resetCloth();
    let submenu = new _menu2.MenuClass("", "Добавление одежды");
    submenu.onclose = () => {
      resetCloth();
    };
    submenu.newItem({
      name: "СПИСОК ВАРИАЦИЙ"
    });
    datas.map((_, vars) => {
      submenu.newItem({
        name: `Вариация №${vars + 1}`,
        desc: `Номер вариации: ${vars + 1}`
      });
      if (editVaration === vars) {
        submenu.newItem({
          name: "Выбран для предпросмотра",
          desc: `Номер вариации: ${vars + 1} | ` + "Именно данный элемент будет отображатся на вас при изминениях. При редактировании остальных вариаций - на себе вы не увидите изменений"
        });
      } else {
        submenu.newItem({
          name: "Предпросмотр",
          desc: `Номер вариации: ${vars + 1} | ` + "Именно данный элемент будет отображатся на вас при изминениях. При редактировании остальных вариаций - на себе вы не увидите изменений",
          onpress: (itm, i) => {
            editVaration = vars;
            editCloth(id, price, name, datas, i);
          }
        });
      }
      submenu.newItem({
        name: "Название",
        more: datas[vars][0].name ? `${datas[vars][0].name}` : "~r~Необходимо указать",
        desc: `Номер вариации: ${vars + 1}`,
        onpress: (itm, i) => {
          (0, _menu2.DialogInput)("Введите значение", datas[vars][0].name, 35).then(val => {
            if (!val) return editCloth(id, price, name, datas, i);
            datas[vars][0].name = val;
            editCloth(id, price, name, datas, i);
          });
        }
      });
      submenu.newItem({
        name: `Удалить данную вариацию`,
        desc: `Номер вариации: ${vars + 1}`,
        onpress: (itm, i) => {
          if (!vars) return _user.user.notify("Данную вариацию удалить нельзя", "error");
          datas.splice(vars, 1);
          editVaration = 0;
          editCloth(id, price, name, datas, i);
          _user.user.notify("Вариация удалена", "success");
        }
      });
      datas[vars].map((_, index) => {
        submenu.newItem({
          name: `${(0, _cloth.getPartName)(datas[vars][index].component)} (${datas[vars][index].component})`,
          desc: `Номер вариации: ${vars + 1}`
        });
        submenu.newItem({
          name: `Тип компонента (${datas[vars][index].component})`,
          type: "range",
          rangeselect: [0, _system.system.biggestNumber(datas[vars][index].drawable, 999)],
          listSelected: datas[vars][index].drawable,
          desc: `Номер вариации: ${vars + 1}`,
          onpress: (itm, i) => {
            (0, _menu2.DialogInput)("Введите значение", itm.listSelected, 5, "int").then(val => {
              if (val === null || isNaN(val) || val < 0 || val > 999999999) return editCloth(id, price, name, datas, i);
              datas[vars][index].drawable = val;
              editCloth(id, price, name, datas, i);
            });
          },
          onchange: val => {
            datas[vars][index].drawable = val;
            if (editVaration === vars) setComponent(datas[vars][index].component, datas[vars][index].drawable, datas[vars][index].texture);
          }
        });
        submenu.newItem({
          name: `Текстура компонента (${datas[vars][index].component})`,
          type: "range",
          rangeselect: [0, _system.system.biggestNumber(datas[vars][index].drawable, 999)],
          listSelected: datas[vars][index].texture,
          desc: `Номер вариации: ${vars + 1}`,
          onpress: (itm, i) => {
            (0, _menu2.DialogInput)("Введите значение", itm.listSelected, 5, "int").then(val => {
              if (val === null || isNaN(val) || val < 0 || val > 999999999) return editCloth(id, price, name, datas, i);
              datas[vars][index].texture = val;
              editCloth(id, price, name, datas, i);
            });
          },
          onchange: val => {
            datas[vars][index].texture = val;
            if (editVaration === vars) setComponent(datas[vars][index].component, datas[vars][index].drawable, datas[vars][index].texture);
          }
        });
      });
      submenu.newItem({
        name: `----------------`,
        desc: `Номер вариации: ${vars + 1}`
      });
    });
    submenu.newItem({
      name: `~r~=== Общие параметры ===`
    });
    submenu.newItem({
      name: `Добавить вариацию`,
      onpress: (itm, i) => {
        if (datas.length >= 12) return _user.user.notify("Не более 12 вариаций в одной шмотке", "error");
        const newitem = JSON.stringify(datas[datas.length - 1]);
        datas.push(JSON.parse(newitem));
        editCloth(id, price, name, datas, i);
      }
    });
    submenu.newItem({
      name: "Название",
      more: name ? `${name}` : "~r~Необходимо указать",
      onpress: (itm, i) => {
        (0, _menu2.DialogInput)("Введите значение", name, 35).then(val => {
          if (!val) return editCloth(id, price, name, datas, i);
          name = val;
          editCloth(id, price, name, datas, i);
        });
      }
    });
    submenu.newItem({
      name: "Закупочная стоимость",
      more: price ? `${_system.system.numberFormat(price)}` : "Нельзя будет закупать",
      onpress: (itm, i) => {
        (0, _menu2.DialogInput)("Введите значение", price, 5, "int").then(val => {
          if (val === null || isNaN(val) || val < 0 || val > 9999999) return editCloth(id, price, name, datas, i);
          price = val;
          editCloth(id, price, name, datas, i);
        });
      }
    });
    if (id !== -1) {
      submenu.newItem({
        name: id ? "Обновить запись" : "Сохранить",
        onpress: (itm, i) => {
          if (!name) return _user.user.notify("Необходимо указать название одежды");
          submenu.close();
          resetCloth();
          exports.oldClothData = oldClothData = [];
          _custom.CustomEvent.triggerServer('admin:cloth:save', id, price, name, datas);
        }
      });
      if (id) {
        submenu.newItem({
          name: "Сохранить элемент как новый",
          onpress: (itm, i) => {
            if (!name) return _user.user.notify("Необходимо указать название одежды");
            _custom.CustomEvent.triggerServer('admin:cloth:save', 0, price, name, datas, page);
          }
        });
      }
    } else {
      submenu.newItem({
        name: "Сохранить нельзя, ибо это просто тестовый конструктор",
        desc: ''
      });
    }
    submenu.open(cursor);
    datas[editVaration].map(({
      component,
      drawable,
      texture
    }) => {
      setComponent(component, drawable, texture);
    });
  } catch (error) {
    mp.console.logError(error);
  }
};
function mapGloveDataFromServer(data) {
  return {
    name: data.name,
    texture: data.texture,
    torsoMap: new Map(data.torsoMap)
  };
}
function mapGloveDataToServer(data) {
  return {
    name: data.name,
    texture: data.texture,
    torsoMap: Array.from(data.torsoMap.entries())
  };
}
function generateStandardGloveData() {
  return {
    name: '',
    texture: 0,
    torsoMap: new Map(new Array(16).fill(0).map((value, index) => [index, null]))
  };
}
const editGlove = (id, price, name, gloveDates, cursor = 0, editingVariation = 0) => {
  const _menu = new _menu2.MenuClass("", "Добавление перчаток");
  _menu.onclose = () => {
    resetCloth();
  };
  _menu.newItem({
    type: 'list',
    onchange: (value, item, index) => {
      editingVariation = index;
      editGlove(id, price, name, gloveDates, 1, editingVariation);
    },
    listSelected: editingVariation,
    list: gloveDates.map((data, index) => `${index} - ${data.name}`),
    name: 'Вариации'
  });
  _menu.newItem({
    name: '~g~Создать вариацию',
    onpress: () => {
      gloveDates.push(generateStandardGloveData());
      editingVariation = gloveDates.length - 1;
      editGlove(id, price, name, gloveDates, 0, editingVariation);
    }
  });
  _menu.newItem({
    name: 'Соотнесите торсы с перчатками'
  });
  editGloveVariationMenuBlock(_menu, gloveDates[editingVariation], cursorIndex => {
    editGlove(id, price, name, gloveDates, 3 + cursorIndex, editingVariation);
  });
  _menu.newItem({
    name: "Название",
    more: name ? `${name}` : "~r~Необходимо указать",
    onpress: (itm, i) => {
      (0, _menu2.DialogInput)("Введите значение", name, 35).then(val => {
        if (!val) return editGlove(id, price, name, gloveDates, i, editingVariation);
        name = val;
        editGlove(id, price, name, gloveDates, i, editingVariation);
      });
    }
  });
  _menu.newItem({
    name: "Закупочная стоимость",
    more: price ? `${_system.system.numberFormat(price)}` : "Нельзя будет закупать",
    onpress: (itm, i) => {
      (0, _menu2.DialogInput)("Введите значение", price, 5, "int").then(val => {
        if (val === null || isNaN(val) || val < 0 || val > 9999999) return editGlove(id, price, name, gloveDates, i, editingVariation);
        price = val;
        editGlove(id, price, name, gloveDates, i, editingVariation);
      });
    }
  });
  if (id !== -1) {
    _menu.newItem({
      name: id ? "Обновить запись" : "Сохранить",
      onpress: () => {
        if (!name) return _user.user.notify("Необходимо указать название одежды");
        _menu.close();
        resetCloth();
        exports.oldClothData = oldClothData = [];
        _custom.CustomEvent.triggerServer('admin:cloth:saveGlove', id, price, name, gloveDates.map(data => mapGloveDataToServer(data)));
      }
    });
  } else {
    _menu.newItem({
      name: "Сохранить нельзя, ибо это просто тестовый конструктор"
    });
  }
  _menu.open(cursor);
};
const editGloveVariationMenuBlock = (menu, gloveData, updateMenu) => {
  menu.newItem({
    name: 'Название вариации',
    more: gloveData.name ? gloveData.name : '~r~Укажите',
    onpress: async () => {
      const nameValue = await (0, _menu2.DialogInput)("Введите значение", gloveData.name, 35);
      if (nameValue) {
        gloveData.name = nameValue;
      }
      updateMenu(0);
    }
  });
  menu.newItem({
    name: 'Текстура',
    type: 'range',
    rangeselect: [0, 999],
    listSelected: gloveData.texture,
    onpress: async () => {
      const texture = await (0, _menu2.DialogInput)("Введите значение", gloveData.texture, 3, 'int');
      if (!isNaN(texture)) {
        gloveData.texture = texture;
      }
      updateMenu(1);
    },
    onchange: texture => {
      gloveData.texture = texture;
    }
  });
  gloveData.torsoMap.forEach((value, key, map) => {
    menu.newItem({
      type: 'range',
      name: `Торс ${key}`,
      rangeselect: [0, 999],
      listSelected: value == null ? 0 : value,
      onpress: async () => {
        const drawable = await (0, _menu2.DialogInput)("Введите значение", value, 3, 'int');
        if (!isNaN(drawable)) {
          map.set(key, drawable);
        }
        updateMenu(2 + key);
      },
      onchange: drawable => {
        map.set(key, drawable);
        player.setComponentVariation(3, drawable, gloveData.texture, 2);
      }
    });
  });
};
const damageCheckData = {
  health: 100,
  armor: 100
};
mp.events.add('render', () => {
  const currentHealth = mp.players.local.getHealth();
  const currentArmor = mp.players.local.getArmour();
  const healthLoss = damageCheckData.health - currentHealth;
  const armorLoss = damageCheckData.armor - currentArmor;
  if (healthLoss !== 0 || armorLoss !== 0) {
    damageCheckData.health = currentHealth;
    damageCheckData.armor = currentArmor;
  }
  if (healthLoss <= 0 && armorLoss <= 0) {
    return;
  }
  _custom.CustomEvent.triggerServer('playerDamage', healthLoss, armorLoss, currentHealth, currentArmor);
});
},{"./menu":"Aiz7","./system":"pi2J","../../shared/cloth":"Vt6D","./user":"ggMw","./custom.event":"py8h","./gui":"bk91","./controls":"yuOK","./camera":"h8FB"}],"l6KF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tattoosShared = void 0;
const tattoosShared = exports.tattoosShared = {
  getTattoos: (male = 1) => {
    return (!male ? tattoosShared.data.filter(item => item[3]) : tattoosShared.data.filter(item => item[2])).map(item => {
      return {
        name: item[0],
        collection: item[1],
        overlay_male: item[2],
        overlay_female: item[3],
        zone: item[4],
        price: item[5]
      };
    });
  },
  getAllTattoos: () => {
    return tattoosShared.data.map(item => {
      return {
        name: item[0],
        collection: item[1],
        overlay_male: item[2],
        overlay_female: item[3],
        zone: item[4],
        price: item[5]
      };
    });
  },
  getTattoo: id => {
    let item = tattoosShared.data.find(q => q[6] === id);
    if (!item) return;
    return {
      name: item[0],
      collection: item[1],
      overlay_male: item[2],
      overlay_female: item[3],
      zone: item[4],
      price: item[5],
      id: item[6]
    };
  },
  getZoneName: zone => {
    return tattoosShared.getZoneData(zone).name;
  },
  getZoneData: zone => {
    const itm = tattoosShared.categorys.find(q => q[1] === zone);
    if (!itm) return null;
    return {
      name: itm[0],
      zone: itm[1],
      bone: itm[2],
      x: itm[3],
      y: itm[4],
      z: itm[5]
    };
  },
  convertArrayToObject: item => {
    return {
      name: item[0],
      collection: item[1],
      overlay_male: item[2],
      overlay_female: item[3],
      zone: item[4],
      price: item[5]
    };
  },
  findTattoo: (collection, overlay) => {
    let cfg = tattoosShared.data.find(q => q[1] === collection && (q[2] === overlay || q[3] === overlay));
    if (!cfg) return null;
    return tattoosShared.convertArrayToObject(cfg);
  },
  categorys: [["Голова", "ZONE_HEAD", 31086, 0.5, 2.5, 1], ["Торс", "ZONE_TORSO", 24818, 0, 3.5, 0.3], ["Левая рука", "ZONE_LEFT_ARM", 61163, -1.0, 3.0, 0], ["Правая рука", "ZONE_RIGHT_ARM", 28252, 1.0, 3.0, 0], ["Левая нога", "ZONE_LEFT_LEG", 63931, -1.0, 3.0, 0], ["Правая нога", "ZONE_RIGHT_LEG", 36864, 1.0, 3.0, 0]],
  data: [["Скала", "mpbeach_overlays", "", "MP_Bea_F_Back_000", "ZONE_TORSO", 10240, 567], ["Цветок гибискуса 2", "mpbeach_overlays", "", "MP_Bea_F_Stom_001", "ZONE_TORSO", 10500, 1], ["Креветка", "mpbeach_overlays", "", "MP_Bea_F_Back_002", "ZONE_TORSO", 12700, 2], ["Якорь", "mpbeach_overlays", "", "MP_Bea_F_Chest_001", "ZONE_TORSO", 11800, 3], ["Венок Лос-Сантос", "mpbeach_overlays", "", "MP_Bea_F_Chest_002", "ZONE_TORSO", 12900, 4], ["Любовный кинжал", "mpbeach_overlays", "", "MP_Bea_F_RSide_000", "ZONE_TORSO", 12400, 5], ["Морские коньки", "mpbeach_overlays", "", "MP_Bea_F_Should_000", "ZONE_TORSO", 12400, 6], ["Зубатка", "mpbeach_overlays", "", "MP_Bea_F_Should_001", "ZONE_TORSO", 12700, 7], ["Ласточка", "mpbeach_overlays", "", "MP_Bea_F_Stom_000", "ZONE_TORSO", 12600, 8], ["Дельфин", "mpbeach_overlays", "", "MP_Bea_F_Stom_002", "ZONE_TORSO", 12900, 9], ["Корабли", "mpbeach_overlays", "MP_Bea_M_Back_000", "", "ZONE_TORSO", 12300, 10], ["Трайбл - рыба-молот", "mpbeach_overlays", "MP_Bea_M_Chest_000", "", "ZONE_TORSO", 13500, 11], ["Трайбл - акула", "mpbeach_overlays", "MP_Bea_M_Chest_001", "", "ZONE_TORSO", 13300, 12], ["Рыба-меч", "mpbeach_overlays", "MP_Bea_M_Stom_000", "", "ZONE_TORSO", 13600, 13], ["Колесо", "mpbeach_overlays", "MP_Bea_M_Stom_001", "", "ZONE_TORSO", 18000, 14], ["Ушлый", "mpbusiness_overlays", "MP_Buis_M_Stomach_000", "", "ZONE_TORSO", 16200, 15], ["Богач", "mpbusiness_overlays", "MP_Buis_M_Chest_000", "", "ZONE_TORSO", 13300, 16], ["$$$", "mpbusiness_overlays", "MP_Buis_M_Chest_001", "", "ZONE_TORSO", 14600, 17], ["Стригу бабло", "mpbusiness_overlays", "MP_Buis_M_Back_000", "", "ZONE_TORSO", 12700, 18], ["Крупный игрок", "mpbusiness_overlays", "", "MP_Buis_F_Chest_000", "ZONE_TORSO", 13700, 19], ["Делаю деньги", "mpbusiness_overlays", "", "MP_Buis_F_Chest_001", "ZONE_TORSO", 12600, 20], ["Люблю деньги", "mpbusiness_overlays", "", "MP_Buis_F_Chest_002", "ZONE_TORSO", 12500, 21], ["Бриллиант", "mpbusiness_overlays", "", "MP_Buis_F_Stom_000", "ZONE_TORSO", 12100, 22], ["Логотип Santo Capra", "mpbusiness_overlays", "", "MP_Buis_F_Stom_001", "ZONE_TORSO", 16900, 23], ["Толстосум", "mpbusiness_overlays", "", "MP_Buis_F_Stom_002", "ZONE_TORSO", 13900, 24], ["Уважуха", "mpbusiness_overlays", "", "MP_Buis_F_Back_000", "ZONE_TORSO", 15900, 25], ["Охотник за деньгами", "mpbusiness_overlays", "", "MP_Buis_F_Back_001", "ZONE_TORSO", 11700, 26], ["Эмблема банды", "mpbusiness_overlays", "MP_Male_Crew_Tat_001", "MP_Female_Crew_Tat_001", "ZONE_TORSO", 15700, 27], ["Скрещенные стрелы", "mphipster_overlays", "FM_Hip_M_Tat_000", "FM_Hip_F_Tat_000", "ZONE_TORSO", 13600, 28], ["Химия", "mphipster_overlays", "FM_Hip_M_Tat_002", "FM_Hip_F_Tat_002", "ZONE_TORSO", 11800, 29], ["Птицы", "mphipster_overlays", "FM_Hip_M_Tat_006", "FM_Hip_F_Tat_006", "ZONE_TORSO", 14800, 30], ["Бесконечность", "mphipster_overlays", "FM_Hip_M_Tat_011", "FM_Hip_F_Tat_011", "ZONE_TORSO", 10400, 31], ["Оленьи рога", "mphipster_overlays", "FM_Hip_M_Tat_012", "FM_Hip_F_Tat_012", "ZONE_TORSO", 12400, 32], ["Бумбокс", "mphipster_overlays", "FM_Hip_M_Tat_013", "FM_Hip_F_Tat_013", "ZONE_TORSO", 15600, 33], ["Пирамида", "mphipster_overlays", "FM_Hip_M_Tat_024", "FM_Hip_F_Tat_024", "ZONE_TORSO", 14900, 34], ["Watch Your Step", "mphipster_overlays", "FM_Hip_M_Tat_025", "FM_Hip_F_Tat_025", "ZONE_TORSO", 16500, 35], ["Печаль", "mphipster_overlays", "FM_Hip_M_Tat_029", "FM_Hip_F_Tat_029", "ZONE_TORSO", 12100, 36], ["Плавник акулы", "mphipster_overlays", "FM_Hip_M_Tat_030", "FM_Hip_F_Tat_030", "ZONE_TORSO", 14900, 37], ["Скейтборд", "mphipster_overlays", "FM_Hip_M_Tat_031", "FM_Hip_F_Tat_031", "ZONE_TORSO", 14200, 38], ["Бумажный самолет", "mphipster_overlays", "FM_Hip_M_Tat_032", "FM_Hip_F_Tat_032", "ZONE_TORSO", 12000, 39], ["Олень", "mphipster_overlays", "FM_Hip_M_Tat_033", "FM_Hip_F_Tat_033", "ZONE_TORSO", 12400, 40], ["Зашитое сердце", "mphipster_overlays", "FM_Hip_M_Tat_035", "FM_Hip_F_Tat_035", "ZONE_TORSO", 12900, 41], ["Зуб", "mphipster_overlays", "FM_Hip_M_Tat_041", "FM_Hip_F_Tat_041", "ZONE_TORSO", 12000, 42], ["Треугольники", "mphipster_overlays", "FM_Hip_M_Tat_046", "FM_Hip_F_Tat_046", "ZONE_TORSO", 13200, 43], ["Кассета", "mphipster_overlays", "FM_Hip_M_Tat_047", "FM_Hip_F_Tat_047", "ZONE_TORSO", 14700, 44], ["Eagle Eyes", "mpairraces_overlays", "MP_Airraces_Tattoo_007_M", "MP_Airraces_Tattoo_007_F", "ZONE_TORSO", 14700, 45], ["Байкер-демон", "mpbiker_overlays", "MP_MP_Biker_Tat_000_M", "MP_MP_Biker_Tat_000_F", "ZONE_TORSO", 13800, 46], ["Два ствола", "mpbiker_overlays", "MP_MP_Biker_Tat_001_M", "MP_MP_Biker_Tat_001_F", "ZONE_TORSO", 16500, 47], ["Байкер в паутине", "mpbiker_overlays", "MP_MP_Biker_Tat_003_M", "MP_MP_Biker_Tat_003_F", "ZONE_TORSO", 14100, 48], ["Сделано в Америке", "mpbiker_overlays", "MP_MP_Biker_Tat_005_M", "MP_MP_Biker_Tat_005_F", "ZONE_TORSO", 15500, 49], ["Мотоцикл и свобода", "mpbiker_overlays", "MP_MP_Biker_Tat_006_M", "MP_MP_Biker_Tat_006_F", "ZONE_TORSO", 16700, 50], ["Колеса свободы", "mpbiker_overlays", "MP_MP_Biker_Tat_008_M", "MP_MP_Biker_Tat_008_F", "ZONE_TORSO", 14300, 51], ["Череп быка", "mpbiker_overlays", "MP_MP_Biker_Tat_010_M", "MP_MP_Biker_Tat_010_F", "ZONE_TORSO", 13900, 52], ["Покойтесь с миром, братья", "mpbiker_overlays", "MP_MP_Biker_Tat_011_M", "MP_MP_Biker_Tat_011_F", 10800, 53], ["Череп демона", "mpbiker_overlays", "MP_MP_Biker_Tat_013_M", "MP_MP_Biker_Tat_013_F", "ZONE_TORSO", 18900, 54], ["Монстр с когтями", "mpbiker_overlays", "MP_MP_Biker_Tat_017_M", "MP_MP_Biker_Tat_017_F", "ZONE_TORSO", 13300, 55], ["Мотоцикл скелета", "mpbiker_overlays", "MP_MP_Biker_Tat_018_M", "MP_MP_Biker_Tat_018_F", "ZONE_TORSO", 14900, 56], ["Жуткие когти", "mpbiker_overlays", "MP_MP_Biker_Tat_019_M", "MP_MP_Biker_Tat_019_F", "ZONE_TORSO", 19300, 57], ["Огненная смерть", "mpbiker_overlays", "MP_MP_Biker_Tat_021_M", "MP_MP_Biker_Tat_021_F", "ZONE_TORSO", 19800, 58], ["Клуб Western", "mpbiker_overlays", "MP_MP_Biker_Tat_023_M", "MP_MP_Biker_Tat_023_F", "ZONE_TORSO", 15800, 59], ["Американская мечта", "mpbiker_overlays", "MP_MP_Biker_Tat_026_M", "MP_MP_Biker_Tat_026_F", "ZONE_TORSO", 13400, 60], ["Костолом", "mpbiker_overlays", "MP_MP_Biker_Tat_029_M", "MP_MP_Biker_Tat_029_F", "ZONE_TORSO", 14700, 61], ["Brothers For Life", "mpbiker_overlays", "MP_MP_Biker_Tat_030_M", "MP_MP_Biker_Tat_030_F", "ZONE_TORSO", 14600, 62], ["Механик", "mpbiker_overlays", "MP_MP_Biker_Tat_031_M", "MP_MP_Biker_Tat_031_F", "ZONE_TORSO", 14500, 63], ["Орел Western", "mpbiker_overlays", "MP_MP_Biker_Tat_032_M", "MP_MP_Biker_Tat_032_F", "ZONE_TORSO", 13700, 64], ["Байкерское братство", "mpbiker_overlays", "MP_MP_Biker_Tat_034_M", "MP_MP_Biker_Tat_034_F", "ZONE_TORSO", 13700, 65], ["Пожиратель бензина", "mpbiker_overlays", "MP_MP_Biker_Tat_039_M", "MP_MP_Biker_Tat_039_F", "ZONE_TORSO", 15700, 66], ["No Regrets", "mpbiker_overlays", "MP_MP_Biker_Tat_041_M", "MP_MP_Biker_Tat_041_F", "ZONE_TORSO", 12800, 67], ["Ride Forever", "mpbiker_overlays", "MP_MP_Biker_Tat_043_M", "MP_MP_Biker_Tat_043_F", "ZONE_TORSO", 15600, 68], ["Unforgiven", "mpbiker_overlays", "MP_MP_Biker_Tat_050_M", "MP_MP_Biker_Tat_050_F", "ZONE_TORSO", 13000, 69], ["Верный конь", "mpbiker_overlays", "MP_MP_Biker_Tat_052_M", "MP_MP_Biker_Tat_052_F", "ZONE_TORSO", 16200, 70], ["Стервятник-жнец", "mpbiker_overlays", "MP_MP_Biker_Tat_058_M", "MP_MP_Biker_Tat_058_F", "ZONE_TORSO", 16600, 71], ["Faggio", "mpbiker_overlays", "MP_MP_Biker_Tat_059_M", "MP_MP_Biker_Tat_059_F", "ZONE_TORSO", 13200, 72], ["Мы - стиляги!", "mpbiker_overlays", "MP_MP_Biker_Tat_060_M", "MP_MP_Biker_Tat_060_F", "ZONE_TORSO", 14700, 73], ["Карп (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_005", "MP_Xmas2_F_Tat_005", "ZONE_TORSO", 17200, 74], ["Карп (тень)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_006", "MP_Xmas2_F_Tat_006", "ZONE_TORSO", 22400, 75], ["Смерть пришла", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_009", "MP_Xmas2_F_Tat_009", "ZONE_TORSO", 14900, 76], ["Рычащий тигр", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_011", "MP_Xmas2_F_Tat_011", "ZONE_TORSO", 15800, 77], ["Ящерица", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_013", "MP_Xmas2_F_Tat_013", "ZONE_TORSO", 14700, 78], ["Японский воин", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_015", "MP_Xmas2_F_Tat_015", "ZONE_TORSO", 13500, 79], ["Раскрытые губы (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_016", "MP_Xmas2_F_Tat_016", "ZONE_TORSO", 12400, 80], ["Раскрытые губы (цвет)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_017", "MP_Xmas2_F_Tat_017", "ZONE_TORSO", 14500, 81], ["Королевский кинжал (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_018", "MP_Xmas2_F_Tat_018", "ZONE_TORSO", 14500, 82], ["Королевский кинжал (цвет)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_019", "MP_Xmas2_F_Tat_019", "ZONE_TORSO", 16900, 83], ["Палач", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_028", "MP_Xmas2_F_Tat_028", "ZONE_TORSO", 16900, 84], ["Тор и гоблин", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_000_M", "MP_Christmas2017_Tattoo_000_F", "ZONE_TORSO", 10000, 85], ["Кабуто", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_002_M", "MP_Christmas2017_Tattoo_002_F", "ZONE_TORSO", 12800, 86], ["Воин-туземец", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_003_M", "MP_Christmas2017_Tattoo_003_F", "ZONE_TORSO", 11200, 87], ["Призрачный дракон", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_005_M", "MP_Christmas2017_Tattoo_005_F", "ZONE_TORSO", 17100, 88], ["Спартанец-воин", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_008_M", "MP_Christmas2017_Tattoo_008_F", "ZONE_TORSO", 19700, 89], ["Скандинавская руна", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_009_M", "MP_Christmas2017_Tattoo_009_F", "ZONE_TORSO", 14600, 90], ["Щит спартанца", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_010_M", "MP_Christmas2017_Tattoo_010_F", "ZONE_TORSO", 18300, 91], ["Выветрившийся череп", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_011_M", "MP_Christmas2017_Tattoo_011_F", "ZONE_TORSO", 19800, 92], ["Самурай", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_015_M", "MP_Christmas2017_Tattoo_015_F", "ZONE_TORSO", 18300, 93], ["Один и ворон", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_016_M", "MP_Christmas2017_Tattoo_016_F", "ZONE_TORSO", 13500, 94], ["Ударный отряд", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_019_M", "MP_Christmas2017_Tattoo_019_F", "ZONE_TORSO", 14700, 95], ["Взгляд Медузы", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_020_M", "MP_Christmas2017_Tattoo_020_F", "ZONE_TORSO", 15200, 96], ["Спартанец и лев", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_021_M", "MP_Christmas2017_Tattoo_021_F", "ZONE_TORSO", 15900, 97], ["Спартанец и конь", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_022_M", "MP_Christmas2017_Tattoo_022_F", "ZONE_TORSO", 17700, 98], ["Истребитель драконов", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_024_M", "MP_Christmas2017_Tattoo_024_F", "ZONE_TORSO", 16700, 99], ["Череп спартанца", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_026_M", "MP_Christmas2017_Tattoo_026_F", "ZONE_TORSO", 12400, 100], ["Приди и возьми", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_027_M", "MP_Christmas2017_Tattoo_027_F", "ZONE_TORSO", 15800, 101], ["???", "mpchristmas2018_overlays", "MP_Christmas2018_Tat_000_M", "MP_Christmas2018_Tat_000_F", "ZONE_TORSO", 14500, 102], ["Пуленепробиваемый", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_000_M", "MP_Gunrunning_Tattoo_000_F", "ZONE_TORSO", 13200, 103], ["Перекрещенные стволы", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_001_M", "MP_Gunrunning_Tattoo_001_F", "ZONE_TORSO", 14320, 104], ["Нож-бабочка", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_009_M", "MP_Gunrunning_Tattoo_009_F", "ZONE_TORSO", 15900, 105], ["Наличные", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_010_M", "MP_Gunrunning_Tattoo_010_F", "ZONE_TORSO", 13800, 106], ["Кинжалы с долларами", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_012_M", "MP_Gunrunning_Tattoo_012_F", "ZONE_TORSO", 15300, 107], ["Эмблема волка", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_013_M", "MP_Gunrunning_Tattoo_013_F", "ZONE_TORSO", 15900, 108], ["Удар в спину", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_014_M", "MP_Gunrunning_Tattoo_014_F", "ZONE_TORSO", 14500, 109], ["Опознавательные жетоны", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_017_M", "MP_Gunrunning_Tattoo_017_F", "ZONE_TORSO", 16100, 110], ["Череп и пистолеты", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_018_M", "MP_Gunrunning_Tattoo_018_F", "ZONE_TORSO", 16900, 111], ["Пистолеты и крылья", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_019_M", "MP_Gunrunning_Tattoo_019_F", "ZONE_TORSO", 19300, 112], ["Корона и винтовки", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_020_M", "MP_Gunrunning_Tattoo_020_F", "ZONE_TORSO", 13400, 113], ["Граната-сердце", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_022_M", "MP_Gunrunning_Tattoo_022_F", "ZONE_TORSO", 15400, 114], ["Цепочка с микро-ПП", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_028_M", "MP_Gunrunning_Tattoo_028_F", "ZONE_TORSO", 14300, 115], ["Выиграть и проиграть", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_029_M", "MP_Gunrunning_Tattoo_029_F", "ZONE_TORSO", 13900, 116], ["Снежный человек", "mpheist3_overlays", "mpHeist3_Tat_023_M", "mpHeist3_Tat_023_F", "ZONE_TORSO", 14700, 117], ["Гора Чилиад", "mpheist3_overlays", "mpHeist3_Tat_024_M", "mpHeist3_Tat_024_F", "ZONE_TORSO", 14100, 118], ["Davis", "mpheist3_overlays", "mpHeist3_Tat_025_M", "mpHeist3_Tat_025_F", "ZONE_TORSO", 14600, 119], ["Dignity", "mpheist3_overlays", "mpHeist3_Tat_026_M", "mpHeist3_Tat_026_F", "ZONE_TORSO", 16900, 120], ["Epsilon", "mpheist3_overlays", "mpHeist3_Tat_027_M", "mpHeist3_Tat_027_F", "ZONE_TORSO", 13800, 121], ["Испорченные бананы", "mpheist3_overlays", "mpHeist3_Tat_028_M", "mpHeist3_Tat_028_F", "ZONE_TORSO", 14100, 122], ["Fatal Incursion", "mpheist3_overlays", "mpHeist3_Tat_029_M", "mpHeist3_Tat_029_F", "ZONE_TORSO", 13500, 123], ["Ховитцер", "mpheist3_overlays", "mpHeist3_Tat_030_M", "mpHeist3_Tat_030_F", "ZONE_TORSO", 14000, 124], ["LS City", "mpheist3_overlays", "mpHeist3_Tat_033_M", "mpHeist3_Tat_033_F", "ZONE_TORSO", 15100, 125], ["LS Panic", "mpheist3_overlays", "mpHeist3_Tat_035_M", "mpHeist3_Tat_035_F", "ZONE_TORSO", 13700, 126], ["Щит LS", "mpheist3_overlays", "mpHeist3_Tat_036_M", "mpHeist3_Tat_036_F", "ZONE_TORSO", 13300, 127], ["Божья коровка", "mpheist3_overlays", "mpHeist3_Tat_037_M", "mpHeist3_Tat_037_F", "ZONE_TORSO", 15100, 128], ["Robot Bubblegum", "mpheist3_overlays", "mpHeist3_Tat_038_M", "mpHeist3_Tat_038_F", "ZONE_TORSO", 18200, 129], ["Космические рейнджеры", "mpheist3_overlays", "mpHeist3_Tat_039_M", "mpHeist3_Tat_039_F", "ZONE_TORSO", 13004, 130], ["Шестеренки", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_000_M", "MP_MP_ImportExport_Tat_000_F", "ZONE_TORSO", 14500, 131], ["Электростанция", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_001_M", "MP_MP_ImportExport_Tat_001_F", "ZONE_TORSO", 13800, 132], ["На волне смерти", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_002_M", "MP_MP_ImportExport_Tat_002_F", "ZONE_TORSO", 16000, 133], ["Адские змеи", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_009_M", "MP_MP_ImportExport_Tat_009_F", "ZONE_TORSO", 15400, 134], ["Садись за руль", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_010_M", "MP_MP_ImportExport_Tat_010_F", "ZONE_TORSO", 14900, 135], ["Не вякай", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_011_M", "MP_MP_ImportExport_Tat_011_F", "ZONE_TORSO", 13700, 136], ["Король воинов", "mplowrider_overlays", "MP_LR_Tat_001_M", "MP_LR_Tat_001_F", "ZONE_TORSO", 14800, 137], ["Дева Мария", "mplowrider_overlays", "MP_LR_Tat_002_M", "MP_LR_Tat_002_F", "ZONE_TORSO", 14600, 138], ["Пушка", "mplowrider_overlays", "MP_LR_Tat_004_M", "MP_LR_Tat_004_F", "ZONE_TORSO", 15900, 139], ["Амазонка", "mplowrider_overlays", "MP_LR_Tat_009_M", "MP_LR_Tat_009_F", "ZONE_TORSO", 16000, 140], ["Злой ангел", "mplowrider_overlays", "MP_LR_Tat_010_M", "MP_LR_Tat_010_F", "ZONE_TORSO", 15600, 141], ["Люблю азарт", "mplowrider_overlays", "MP_LR_Tat_013_M", "MP_LR_Tat_013_F", "ZONE_TORSO", 14800, 142], ["Любовь слепа", "mplowrider_overlays", "MP_LR_Tat_014_M", "MP_LR_Tat_014_F", "ZONE_TORSO", 14200, 143], ["Грустный ангел", "mplowrider_overlays", "MP_LR_Tat_021_M", "MP_LR_Tat_021_F", "ZONE_TORSO", 14100, 144], ["Королевский захват", "mplowrider_overlays", "MP_LR_Tat_026_M", "MP_LR_Tat_026_F", "ZONE_TORSO", 15100, 145], ["Атака SA", "mplowrider2_overlays", "MP_LR_Tat_000_M", "MP_LR_Tat_000_F", "ZONE_TORSO", 11300, 146], ["Любовь к игре", "mplowrider2_overlays", "MP_LR_Tat_008_M", "MP_LR_Tat_008_F", "ZONE_TORSO", 14000, 147], ["Леди свобода", "mplowrider2_overlays", "MP_LR_Tat_011_M", "MP_LR_Tat_011_F", "ZONE_TORSO", 17100, 148], ["Королевский поцелуй", "mplowrider2_overlays", "MP_LR_Tat_012_M", "MP_LR_Tat_012_F", "ZONE_TORSO", 19100, 149], ["С двумя лицами", "mplowrider2_overlays", "MP_LR_Tat_016_M", "MP_LR_Tat_016_F", "ZONE_TORSO", 17900, 150], ["Смерть за спиной", "mplowrider2_overlays", "MP_LR_Tat_019_M", "MP_LR_Tat_019_F", "ZONE_TORSO", 16200, 151], ["Красотка смерть", "mplowrider2_overlays", "MP_LR_Tat_031_M", "MP_LR_Tat_031_F", "ZONE_TORSO", 22200, 152], ["Конец правления", "mplowrider2_overlays", "MP_LR_Tat_032_M", "MP_LR_Tat_032_F", "ZONE_TORSO", 18400, 153], ["Feather Mural", "mpluxe_overlays", "MP_LUXE_TAT_024_M", "MP_LUXE_TAT_024_F", "ZONE_TORSO", 16100, 154], ["Классическая Enema", "mpluxe_overlays", "MP_LUXE_ENEMA_000_M", "", "ZONE_TORSO", 17900, 155], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_031_M", "MP_LUXE_TAT_031_F", "ZONE_TORSO", 45800, 156], ["Благословенны мертвецы", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_000_M", "MP_Smuggler_Tattoo_000_F", "ZONE_TORSO", 16200, 157], ["Мертвецы не лгут", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_002_M", "MP_Smuggler_Tattoo_002_F", "ZONE_TORSO", 18500, 158], ["Не отдавай ничего", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_003_M", "MP_Smuggler_Tattoo_003_F", "ZONE_TORSO", 12500, 159], ["Никогда не сдавайся", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_006_M", "MP_Smuggler_Tattoo_006_F", "ZONE_TORSO", 12500, 160], ["Бесчестный", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_007_M", "MP_Smuggler_Tattoo_007_F", "ZONE_TORSO", 16500, 161], ["Парусный конфликт", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_009_M", "MP_Smuggler_Tattoo_009_F", "ZONE_TORSO", 16900, 162], ["До встречи в аду", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_010_M", "MP_Smuggler_Tattoo_010_F", "ZONE_TORSO", 19000, 163], ["Оторванные крылья", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_013_M", "MP_Smuggler_Tattoo_013_F", "ZONE_TORSO", 12900, 164], ["Веселый Роджер", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_015_M", "MP_Smuggler_Tattoo_015_F", "ZONE_TORSO", 13200, 165], ["Череп-компас", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_016_M", "MP_Smuggler_Tattoo_016_F", "ZONE_TORSO", 14600, 166], ["Парусник в рамке", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_017_M", "MP_Smuggler_Tattoo_017_F", "ZONE_TORSO", 15500, 167], ["Кто нашел, тот и владелец", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_018_M", "MP_Smuggler_Tattoo_018_F", 15000, 168], ["Потерявшийся в море", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_019_M", "MP_Smuggler_Tattoo_019_F", "ZONE_TORSO", 13000, 169], ["Сказки мертвеца", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_021_M", "MP_Smuggler_Tattoo_021_F", "ZONE_TORSO", 14000, 170], ["Клад помечен крестом", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_022_M", "MP_Smuggler_Tattoo_022_F", "ZONE_TORSO", 16000, 171], ["Капитан пиратов", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_024_M", "MP_Smuggler_Tattoo_024_F", "ZONE_TORSO", 28000, 172], ["В щупальцах чудовища", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_025_M", "MP_Smuggler_Tattoo_025_F", "ZONE_TORSO", 32200, 173], ["Два туза в кармане", "mpvinewood_overlays", "MP_Vinewood_Tat_000_M", "MP_Vinewood_Tat_000_F", "ZONE_TORSO", 14600, 174], ["Джекпот", "mpvinewood_overlays", "MP_Vinewood_Tat_001_M", "MP_Vinewood_Tat_001_F", "ZONE_TORSO", 15700, 175], ["Роял-флеш", "mpvinewood_overlays", "MP_Vinewood_Tat_003_M", "MP_Vinewood_Tat_003_F", "ZONE_TORSO", 17900, 176], ["Колесо мастей", "mpvinewood_overlays", "MP_Vinewood_Tat_006_M", "MP_Vinewood_Tat_006_F", "ZONE_TORSO", 14500, 177], ["777", "mpvinewood_overlays", "MP_Vinewood_Tat_007_M", "MP_Vinewood_Tat_007_F", "ZONE_TORSO", 13800, 178], ["Глаза змеи", "mpvinewood_overlays", "MP_Vinewood_Tat_008_M", "MP_Vinewood_Tat_008_F", "ZONE_TORSO", 15000, 179], ["Любовь до гроба", "mpvinewood_overlays", "MP_Vinewood_Tat_009_M", "MP_Vinewood_Tat_009_F", "ZONE_TORSO", 18000, 180], ["Фотофиниш", "mpvinewood_overlays", "MP_Vinewood_Tat_010_M", "MP_Vinewood_Tat_010_F", "ZONE_TORSO", 15700, 181], ["Вся жизнь - игра", "mpvinewood_overlays", "MP_Vinewood_Tat_011_M", "MP_Vinewood_Tat_011_F", "ZONE_TORSO", 13700, 182], ["Разномастный череп", "mpvinewood_overlays", "MP_Vinewood_Tat_012_M", "MP_Vinewood_Tat_012_F", "ZONE_TORSO", 12400, 183], ["Веселый Джокер", "mpvinewood_overlays", "MP_Vinewood_Tat_015_M", "MP_Vinewood_Tat_015_F", "ZONE_TORSO", 25800, 184], ["Роза и тузы", "mpvinewood_overlays", "MP_Vinewood_Tat_016_M", "MP_Vinewood_Tat_016_F", "ZONE_TORSO", 14500, 185], ["Бросай кости", "mpvinewood_overlays", "MP_Vinewood_Tat_017_M", "MP_Vinewood_Tat_017_F", "ZONE_TORSO", 16400, 186], ["Покажи свои карты", "mpvinewood_overlays", "MP_Vinewood_Tat_021_M", "MP_Vinewood_Tat_021_F", "ZONE_TORSO", 12500, 187], ["Кровавые деньги", "mpvinewood_overlays", "MP_Vinewood_Tat_022_M", "MP_Vinewood_Tat_022_F", "ZONE_TORSO", 13900, 188], ["Счастливые семерки", "mpvinewood_overlays", "MP_Vinewood_Tat_023_M", "MP_Vinewood_Tat_023_F", "ZONE_TORSO", 18900, 189], ["Вкус денег", "mpvinewood_overlays", "MP_Vinewood_Tat_024_M", "MP_Vinewood_Tat_024_F", "ZONE_TORSO", 13200, 190], ["Игровой стол", "mpvinewood_overlays", "MP_Vinewood_Tat_029_M", "MP_Vinewood_Tat_029_F", "ZONE_TORSO", 27000, 191], ["Королевская масть", "mpvinewood_overlays", "MP_Vinewood_Tat_030_M", "MP_Vinewood_Tat_030_F", "ZONE_TORSO", 17300, 192], ["Король азарта", "mpvinewood_overlays", "MP_Vinewood_Tat_031_M", "MP_Vinewood_Tat_031_F", "ZONE_TORSO", 14500, 193], ["Ходи с туза", "mpvinewood_overlays", "MP_Vinewood_Tat_032_M", "MP_Vinewood_Tat_032_F", "ZONE_TORSO", 27500, 194], ["I Heart LC", "mpxmas_604490_overlays", "MP_IHeartLC_000_M", "MP_IHeartLC_001_F", "ZONE_TORSO", 16000, 195], ["Turbulence", "mpairraces_overlays", "MP_Airraces_Tattoo_000_M", "MP_Airraces_Tattoo_000_F", "ZONE_TORSO", 13500, 196], ["Pilot Skull", "mpairraces_overlays", "MP_Airraces_Tattoo_001_M", "MP_Airraces_Tattoo_001_F", "ZONE_TORSO", 10300, 197], ["Winged Bombshell", "mpairraces_overlays", "MP_Airraces_Tattoo_002_M", "MP_Airraces_Tattoo_002_F", "ZONE_TORSO", 12000, 198], ["Balloon Pioneer", "mpairraces_overlays", "MP_Airraces_Tattoo_004_M", "MP_Airraces_Tattoo_004_F", "ZONE_TORSO", 17500, 199], ["Parachute Belle", "mpairraces_overlays", "MP_Airraces_Tattoo_005_M", "MP_Airraces_Tattoo_005_F", "ZONE_TORSO", 15200, 200], ["Bombs Away", "mpairraces_overlays", "MP_Airraces_Tattoo_006_M", "MP_Airraces_Tattoo_006_F", "ZONE_TORSO", 16600, 201], ["Hibiscus Flower Duo", "mpbeach_overlays", "", "MP_Bea_F_Back_001", "ZONE_TORSO", 16600, 202], ["Anchor", "mpbeach_overlays", "", "MP_Bea_F_Chest_000", "ZONE_TORSO", 13800, 203], ["Abstract Skull", "mpluxe_overlays", "MP_LUXE_TAT_003_M", "MP_LUXE_TAT_003_F", "ZONE_TORSO", 15500, 204], ["Adorned Wolf", "mpluxe_overlays", "MP_LUXE_TAT_006_M", "MP_LUXE_TAT_006_F", "ZONE_TORSO", 16800, 205], ["Eye of the Griffin", "mpluxe_overlays", "MP_LUXE_TAT_007_M", "MP_LUXE_TAT_007_F", "ZONE_TORSO", 25500, 206], ["Flying Eye", "mpluxe_overlays", "MP_LUXE_TAT_008_M", "MP_LUXE_TAT_008_F", "ZONE_TORSO", 13600, 207], ["Ancient Queen", "mpluxe_overlays", "MP_LUXE_TAT_014_M", "MP_LUXE_TAT_014_F", "ZONE_TORSO", 12200, 208], ["Smoking Sisters", "mpluxe_overlays", "MP_LUXE_TAT_015_M", "MP_LUXE_TAT_015_F", "ZONE_TORSO", 12600, 209], ["The Howler", "mpluxe2_overlays", "MP_LUXE_TAT_002_M", "MP_LUXE_TAT_002_F", "ZONE_TORSO", 13500, 210], ["Geometric Galaxy", "mpluxe2_overlays", "MP_LUXE_TAT_012_M", "MP_LUXE_TAT_012_F", "ZONE_TORSO", 17300, 211], ["Cloaked Angel", "mpluxe2_overlays", "MP_LUXE_TAT_022_M", "MP_LUXE_TAT_022_F", "ZONE_TORSO", 15200, 212], ["Reaper Sway", "mpluxe2_overlays", "MP_LUXE_TAT_025_M", "MP_LUXE_TAT_025_F", "ZONE_TORSO", 13700, 213], ["Cobra Dawn", "mpluxe2_overlays", "MP_LUXE_TAT_027_M", "MP_LUXE_TAT_027_F", "ZONE_TORSO", 15000, 214], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_029_M", "MP_LUXE_TAT_029_F", "ZONE_TORSO", 20000, 215], ["Wheels of Death", "mpstunt_overlays", "MP_MP_Stunt_tat_011_M", "MP_MP_Stunt_tat_011_F", "ZONE_TORSO", 17500, 216], ["Punk Biker", "mpstunt_overlays", "MP_MP_Stunt_tat_012_M", "MP_MP_Stunt_tat_012_F", "ZONE_TORSO", 13400, 217], ["Bat Cat of Spades", "mpstunt_overlays", "MP_MP_Stunt_tat_014_M", "MP_MP_Stunt_tat_014_F", "ZONE_TORSO", 12500, 218], ["Vintage Bully", "mpstunt_overlays", "MP_MP_Stunt_tat_018_M", "MP_MP_Stunt_tat_018_F", "ZONE_TORSO", 18700, 219], ["Engine Heart", "mpstunt_overlays", "MP_MP_Stunt_tat_019_M", "MP_MP_Stunt_tat_019_F", "ZONE_TORSO", 12000, 220], ["Road Kill", "mpstunt_overlays", "MP_MP_Stunt_tat_024_M", "MP_MP_Stunt_tat_024_F", "ZONE_TORSO", 17000, 221], ["Winged Wheel", "mpstunt_overlays", "MP_MP_Stunt_tat_026_M", "MP_MP_Stunt_tat_026_F", "ZONE_TORSO", 15600, 222], ["Punk Road Hog", "mpstunt_overlays", "MP_MP_Stunt_tat_027_M", "MP_MP_Stunt_tat_027_F", "ZONE_TORSO", 15307, 223], ["Majestic Finish", "mpstunt_overlays", "MP_MP_Stunt_tat_029_M", "MP_MP_Stunt_tat_029_F", "ZONE_TORSO", 11000, 224], ["Man's Ruin", "mpstunt_overlays", "MP_MP_Stunt_tat_030_M", "MP_MP_Stunt_tat_030_F", "ZONE_TORSO", 10000, 225], ["Sugar Skull Trucker", "mpstunt_overlays", "MP_MP_Stunt_tat_033_M", "MP_MP_Stunt_tat_033_F", "ZONE_TORSO", 16600, 226], ["Feather Road Kill", "mpstunt_overlays", "MP_MP_Stunt_tat_034_M", "MP_MP_Stunt_tat_034_F", "ZONE_TORSO", 18100, 227], ["Big Grills", "mpstunt_overlays", "MP_MP_Stunt_tat_037_M", "MP_MP_Stunt_tat_037_F", "ZONE_TORSO", 13400, 228], ["Monkey Chopper", "mpstunt_overlays", "MP_MP_Stunt_tat_040_M", "MP_MP_Stunt_tat_040_F", "ZONE_TORSO", 13100, 229], ["Brapp", "mpstunt_overlays", "MP_MP_Stunt_tat_041_M", "MP_MP_Stunt_tat_041_F", "ZONE_TORSO", 15600, 230], ["Ram Skull", "mpstunt_overlays", "MP_MP_Stunt_tat_044_M", "MP_MP_Stunt_tat_044_F", "ZONE_TORSO", 19400, 231], ["Full Throttle", "mpstunt_overlays", "MP_MP_Stunt_tat_046_M", "MP_MP_Stunt_tat_046_F", "ZONE_TORSO", 14500, 232], ["Racing Doll", "mpstunt_overlays", "MP_MP_Stunt_tat_048_M", "MP_MP_Stunt_tat_048_F", "ZONE_TORSO", 14200, 233], ["Blackjack", "multiplayer_overlays", "FM_Tat_Award_M_003", "FM_Tat_Award_F_003", "ZONE_TORSO", 13500, 234], ["Hustler", "multiplayer_overlays", "FM_Tat_Award_M_004", "FM_Tat_Award_F_004", "ZONE_TORSO", 15500, 235], ["Angel", "multiplayer_overlays", "FM_Tat_Award_M_005", "FM_Tat_Award_F_005", "ZONE_TORSO", 14600, 236], ["Los Santos Customs", "multiplayer_overlays", "FM_Tat_Award_M_008", "FM_Tat_Award_F_008", "ZONE_TORSO", 14100, 237], ["Blank Scroll", "multiplayer_overlays", "FM_Tat_Award_M_011", "FM_Tat_Award_F_011", "ZONE_TORSO", 14500, 238], ["Embellished Scroll", "multiplayer_overlays", "FM_Tat_Award_M_012", "FM_Tat_Award_F_012", "ZONE_TORSO", 14000, 239], ["Seven Deadly Sins", "multiplayer_overlays", "FM_Tat_Award_M_013", "FM_Tat_Award_F_013", "ZONE_TORSO", 13200, 240], ["Trust No One", "multiplayer_overlays", "FM_Tat_Award_M_014", "FM_Tat_Award_F_014", "ZONE_TORSO", 14000, 241], ["Clown", "multiplayer_overlays", "FM_Tat_Award_M_016", "FM_Tat_Award_F_016", "ZONE_TORSO", 13500, 242], ["Clown and Gun", "multiplayer_overlays", "FM_Tat_Award_M_017", "FM_Tat_Award_F_017", "ZONE_TORSO", 17900, 243], ["Clown Dual Wield", "multiplayer_overlays", "FM_Tat_Award_M_018", "FM_Tat_Award_F_018", "ZONE_TORSO", 16500, 244], ["Clown Dual Wield Dollars", "multiplayer_overlays", "FM_Tat_Award_M_019", "FM_Tat_Award_F_019", "ZONE_TORSO", 19000, 245], ["Faith", "multiplayer_overlays", "FM_Tat_M_004", "FM_Tat_F_004", "ZONE_TORSO", 15700, 246], ["Skull on the Cross", "multiplayer_overlays", "FM_Tat_M_009", "FM_Tat_F_009", "ZONE_TORSO", 17400, 247], ["LS Flames", "multiplayer_overlays", "FM_Tat_M_010", "FM_Tat_F_010", "ZONE_TORSO", 13900, 248], ["LS Script", "multiplayer_overlays", "FM_Tat_M_011", "FM_Tat_F_011", "ZONE_TORSO", 15200, 249], ["Los Santos Bills", "multiplayer_overlays", "FM_Tat_M_012", "FM_Tat_F_012", "ZONE_TORSO", 20000, 250], ["Eagle and Serpent", "multiplayer_overlays", "FM_Tat_M_013", "FM_Tat_F_013", "ZONE_TORSO", 14800, 251], ["Evil Clown", "multiplayer_overlays", "FM_Tat_M_016", "FM_Tat_F_016", "ZONE_TORSO", 17400, 252], ["The Wages of Sin", "multiplayer_overlays", "FM_Tat_M_019", "FM_Tat_F_019", "ZONE_TORSO", 19000, 253], ["Dragon", "multiplayer_overlays", "FM_Tat_M_020", "FM_Tat_F_020", "ZONE_TORSO", 15100, 254], ["Flaming Cross", "multiplayer_overlays", "FM_Tat_M_024", "FM_Tat_F_024", "ZONE_TORSO", 15000, 255], ["LS Bold", "multiplayer_overlays", "FM_Tat_M_025", "FM_Tat_F_025", "ZONE_TORSO", 14900, 256], ["Trinity Knot", "multiplayer_overlays", "FM_Tat_M_029", "FM_Tat_F_029", "ZONE_TORSO", 15000, 257], ["Lucky Celtic Dogs", "multiplayer_overlays", "FM_Tat_M_030", "FM_Tat_F_030", "ZONE_TORSO", 14600, 258], ["Flaming Shamrock", "multiplayer_overlays", "FM_Tat_M_034", "FM_Tat_F_034", "ZONE_TORSO", 14400, 259], ["Dragon", "multiplayer_overlays", "FM_Tat_M_035", "FM_Tat_F_035", "ZONE_TORSO", 17500, 260], ["Way of the Gun", "multiplayer_overlays", "FM_Tat_M_036", "FM_Tat_F_036", "ZONE_TORSO", 15600, 261], ["Stone Cross", "multiplayer_overlays", "FM_Tat_M_044", "FM_Tat_F_044", "ZONE_TORSO", 14200, 262], ["Skulls and Rose", "multiplayer_overlays", "FM_Tat_M_045", "FM_Tat_F_045", "ZONE_TORSO", 17300, 263], ["568", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_003_M", "mp_gta5rptattoo_tat_003_F", "ZONE_TORSO", 500, 568], ["569", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_004_M", "mp_gta5rptattoo_tat_004_F", "ZONE_TORSO", 500, 569], ["570", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_005_M", "mp_gta5rptattoo_tat_005_F", "ZONE_TORSO", 500, 570], ["571", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_006_M", "mp_gta5rptattoo_tat_006_F", "ZONE_TORSO", 500, 571], ["572", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_007_M", "mp_gta5rptattoo_tat_007_F", "ZONE_TORSO", 500, 572], ["573", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_008_M", "mp_gta5rptattoo_tat_008_F", "ZONE_TORSO", 500, 573], ["574", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_009_M", "mp_gta5rptattoo_tat_009_F", "ZONE_TORSO", 500, 574], ["576", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_011_M", "mp_gta5rptattoo_tat_011_F", "ZONE_TORSO", 500, 576], ["577", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_012_M", "mp_gta5rptattoo_tat_012_F", "ZONE_TORSO", 500, 577], ["578", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_013_M", "mp_gta5rptattoo_tat_013_F", "ZONE_TORSO", 500, 578], ["579", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_014_M", "mp_gta5rptattoo_tat_014_F", "ZONE_TORSO", 500, 579], ["580", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_017_M", "mp_gta5rptattoo_tat_017_F", "ZONE_TORSO", 500, 580], ["581", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_030_M", "mp_gta5rptattoo_tat_030_F", "ZONE_TORSO", 500, 581], ["582", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_031_M", "mp_gta5rptattoo_tat_031_F", "ZONE_TORSO", 500, 582], ["583", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_032_M", "mp_gta5rptattoo_tat_032_F", "ZONE_TORSO", 500, 583], ["584", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_034_M", "mp_gta5rptattoo_tat_034_F", "ZONE_TORSO", 500, 584], ["601", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_087_M", "mp_gta5rptattoo_tat_087_F", "ZONE_TORSO", 500, 601], ["602", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_088_M", "mp_gta5rptattoo_tat_088_F", "ZONE_TORSO", 500, 602], ["603", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_089_M", "mp_gta5rptattoo_tat_089_F", "ZONE_TORSO", 500, 603], ["604", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_090_M", "mp_gta5rptattoo_tat_090_F", "ZONE_TORSO", 500, 604], ["605", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_091_M", "mp_gta5rptattoo_tat_091_F", "ZONE_TORSO", 500, 605], ["606", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_092_M", "mp_gta5rptattoo_tat_092_F", "ZONE_TORSO", 500, 606], ["607", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_093_M", "mp_gta5rptattoo_tat_093_F", "ZONE_TORSO", 500, 607], ["608", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_094_M", "mp_gta5rptattoo_tat_094_F", "ZONE_TORSO", 500, 608], ["609", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_095_M", "mp_gta5rptattoo_tat_095_F", "ZONE_TORSO", 500, 609], ["610", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_096_M", "mp_gta5rptattoo_tat_096_F", "ZONE_TORSO", 500, 610], ["611", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_097_M", "mp_gta5rptattoo_tat_097_F", "ZONE_TORSO", 500, 611], ["612", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_098_M", "mp_gta5rptattoo_tat_098_F", "ZONE_TORSO", 500, 612], ["613", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_099_M", "mp_gta5rptattoo_tat_099_F", "ZONE_TORSO", 500, 613], ["614", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_100_M", "mp_gta5rptattoo_tat_100_F", "ZONE_TORSO", 500, 614], ["615", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_101_M", "mp_gta5rptattoo_tat_101_F", "ZONE_TORSO", 500, 615], ["616", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_102_M", "mp_gta5rptattoo_tat_102_F", "ZONE_TORSO", 500, 616], ["617", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_103_M", "mp_gta5rptattoo_tat_103_F", "ZONE_TORSO", 500, 617], ["618", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_104_M", "mp_gta5rptattoo_tat_104_F", "ZONE_TORSO", 500, 618], ["619", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_105_M", "mp_gta5rptattoo_tat_105_F", "ZONE_TORSO", 500, 619], ["620", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_107_M", "mp_gta5rptattoo_tat_107_F", "ZONE_TORSO", 500, 620], ["621", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_143_M", "mp_gta5rptattoo_tat_143_F", "ZONE_TORSO", 500, 621], ["622", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_144_M", "mp_gta5rptattoo_tat_144_F", "ZONE_TORSO", 500, 622], ["623", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_145_M", "mp_gta5rptattoo_tat_145_F", "ZONE_TORSO", 500, 623], ["624", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_146_M", "mp_gta5rptattoo_tat_146_F", "ZONE_TORSO", 500, 624], ["625", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_147_M", "mp_gta5rptattoo_tat_147_F", "ZONE_TORSO", 500, 625], ["626", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_148_M", "mp_gta5rptattoo_tat_148_F", "ZONE_TORSO", 500, 626], ["627", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_149_M", "mp_gta5rptattoo_tat_149_F", "ZONE_TORSO", 500, 627], ["628", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_150_M", "mp_gta5rptattoo_tat_150_F", "ZONE_TORSO", 500, 628], ["629", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_151_M", "mp_gta5rptattoo_tat_151_F", "ZONE_TORSO", 500, 629], ["630", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_152_M", "mp_gta5rptattoo_tat_152_F", "ZONE_TORSO", 500, 630], ["631", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_153_M", "mp_gta5rptattoo_tat_153_F", "ZONE_TORSO", 500, 631], ["632", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_154_M", "mp_gta5rptattoo_tat_154_F", "ZONE_TORSO", 500, 632], ["633", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_155_M", "mp_gta5rptattoo_tat_155_F", "ZONE_TORSO", 500, 633], ["634", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_156_M", "mp_gta5rptattoo_tat_156_F", "ZONE_TORSO", 500, 634], ["635", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_157_M", "mp_gta5rptattoo_tat_157_F", "ZONE_TORSO", 500, 635], ["636", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_158_M", "mp_gta5rptattoo_tat_158_F", "ZONE_TORSO", 500, 636], ["637", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_159_M", "mp_gta5rptattoo_tat_159_F", "ZONE_TORSO", 500, 637], ["638", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_160_M", "mp_gta5rptattoo_tat_160_F", "ZONE_TORSO", 500, 638], ["639", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_161_M", "mp_gta5rptattoo_tat_161_F", "ZONE_TORSO", 500, 639], ["585", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_047_M", "", "ZONE_TORSO", 500, 585], ["586", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_048_M", "", "ZONE_TORSO", 500, 586], ["587", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_049_M", "", "ZONE_TORSO", 500, 587], ["588", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_050_M", "", "ZONE_TORSO", 500, 588], ["589", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_051_M", "", "ZONE_TORSO", 500, 589], ["590", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_052_M", "", "ZONE_TORSO", 500, 590], ["591", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_053_M", "", "ZONE_TORSO", 500, 591], ["592", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_054_M", "", "ZONE_TORSO", 500, 592], ["593", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_071_F", "ZONE_TORSO", 500, 593], ["594", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_072_F", "ZONE_TORSO", 500, 594], ["595", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_073_F", "ZONE_TORSO", 500, 595], ["596", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_074_F", "ZONE_TORSO", 500, 596], ["597", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_075_F", "ZONE_TORSO", 500, 597], ["598", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_076_F", "ZONE_TORSO", 500, 598], ["599", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_077_F", "ZONE_TORSO", 500, 599], ["600", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_078_F", "ZONE_TORSO", 500, 600], ["Impotent RAGE", "singleplayer_overlays", "tp_033", "", "ZONE_LEFT_ARM", 13500, 264], ["Трайбл - цветы", "mpbeach_overlays", "", "MP_Bea_F_LArm_000", "ZONE_LEFT_ARM", 14200, 265], ["Рукав Коричневой краской", "overlays_onyx", "onyx_tattoo_07_m", "onyx_tattoo_07_f", "ZONE_LEFT_ARM", 200000, 3001], ["Попугай", "mpbeach_overlays", "", "MP_Bea_F_LArm_001", "ZONE_LEFT_ARM", 13500, 266], ["Башня тики", "mpbeach_overlays", "MP_Bea_M_LArm_000", "", "ZONE_LEFT_ARM", 11500, 267], ["Русалка - Лос-Сантос", "mpbeach_overlays", "MP_Bea_M_LArm_001", "", "ZONE_LEFT_ARM", 10900, 268], ["100-долларовая купюра", "mpbusiness_overlays", "MP_Buis_M_LeftArm_000", "", "ZONE_LEFT_ARM", 14000, 269], ["Всевидящее око", "mpbusiness_overlays", "MP_Buis_M_LeftArm_001", "", "ZONE_LEFT_ARM", 12500, 270], ["Зелень - это хорошо", "mpbusiness_overlays", "", "MP_Buis_F_LArm_000", "ZONE_LEFT_ARM", 13500, 271], ["Блеск алмазов", "mphipster_overlays", "FM_Hip_M_Tat_003", "FM_Hip_F_Tat_003", "ZONE_LEFT_ARM", 12900, 272], ["Кирпичи", "mphipster_overlays", "FM_Hip_M_Tat_007", "FM_Hip_F_Tat_007", "ZONE_LEFT_ARM", 13200, 273], ["Усы", "mphipster_overlays", "FM_Hip_M_Tat_015", "FM_Hip_F_Tat_015", "ZONE_LEFT_ARM", 12700, 274], ["Молния", "mphipster_overlays", "FM_Hip_M_Tat_016", "FM_Hip_F_Tat_016", "ZONE_LEFT_ARM", 15500, 275], ["Пицца", "mphipster_overlays", "FM_Hip_M_Tat_026", "FM_Hip_F_Tat_026", "ZONE_LEFT_ARM", 13900, 276], ["Замок", "mphipster_overlays", "FM_Hip_M_Tat_027", "FM_Hip_F_Tat_027", "ZONE_LEFT_ARM", 12900, 277], ["Роза с шипами", "mphipster_overlays", "FM_Hip_M_Tat_028", "FM_Hip_F_Tat_028", "ZONE_LEFT_ARM", 13700, 278], ["Stop", "mphipster_overlays", "FM_Hip_M_Tat_034", "FM_Hip_F_Tat_034", "ZONE_LEFT_ARM", 12800, 279], ["Восход", "mphipster_overlays", "FM_Hip_M_Tat_037", "FM_Hip_F_Tat_037", "ZONE_LEFT_ARM", 16800, 280], ["Рукав", "mphipster_overlays", "FM_Hip_M_Tat_039", "FM_Hip_F_Tat_039", "ZONE_LEFT_ARM", 15800, 281], ["Белый треугольник", "mphipster_overlays", "FM_Hip_M_Tat_043", "FM_Hip_F_Tat_043", "ZONE_LEFT_ARM", 12600, 282], ["Peace", "mphipster_overlays", "FM_Hip_M_Tat_048", "FM_Hip_F_Tat_048", "ZONE_LEFT_ARM", 13900, 283], ["Городской трюкач", "mpbiker_overlays", "MP_MP_Biker_Tat_012_M", "MP_MP_Biker_Tat_012_F", "ZONE_LEFT_ARM", 12400, 284], ["Жуткое дерево", "mpbiker_overlays", "MP_MP_Biker_Tat_016_M", "MP_MP_Biker_Tat_016_F", "ZONE_LEFT_ARM", 13100, 285], ["Роза из черепов", "mpbiker_overlays", "MP_MP_Biker_Tat_020_M", "MP_MP_Biker_Tat_020_F", "ZONE_LEFT_ARM", 12900, 286], ["Жить ради дороги", "mpbiker_overlays", "MP_MP_Biker_Tat_024_M", "MP_MP_Biker_Tat_024_F", "ZONE_LEFT_ARM", 15200, 287], ["Good Luck", "mpbiker_overlays", "MP_MP_Biker_Tat_025_M", "MP_MP_Biker_Tat_025_F", "ZONE_LEFT_ARM", 15400, 288], ["Цепь в кулаке", "mpbiker_overlays", "MP_MP_Biker_Tat_035_M", "MP_MP_Biker_Tat_035_F", "ZONE_LEFT_ARM", 11100, 289], ["Ride Hard Die Fast", "mpbiker_overlays", "MP_MP_Biker_Tat_045_M", "MP_MP_Biker_Tat_045_F", "ZONE_LEFT_ARM", 11800, 290], ["Шлем с глушителем", "mpbiker_overlays", "MP_MP_Biker_Tat_053_M", "MP_MP_Biker_Tat_053_F", "ZONE_LEFT_ARM", 12300, 291], ["Ядовитый скорпион", "mpbiker_overlays", "MP_MP_Biker_Tat_055_M", "MP_MP_Biker_Tat_055_F", "ZONE_LEFT_ARM", 16700, 292], ["Всадник-череп", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_000", "MP_Xmas2_F_Tat_000", "ZONE_LEFT_ARM", 15200, 293], ["Электрическая змея", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_010", "MP_Xmas2_F_Tat_010", "ZONE_LEFT_ARM", 13800, 294], ["Череп - бильярдный шар", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_012", "MP_Xmas2_F_Tat_012", "ZONE_LEFT_ARM", 13800, 295], ["Время вышло (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_020", "MP_Xmas2_F_Tat_020", "ZONE_LEFT_ARM", 12400, 296], ["Время вышло (цвет)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_021", "MP_Xmas2_F_Tat_021", "ZONE_LEFT_ARM", 12500, 297], ["Викинг", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_001_M", "MP_Christmas2017_Tattoo_001_F", "ZONE_LEFT_ARM", 12900, 298], ["Тигр и маска", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_004_M", "MP_Christmas2017_Tattoo_004_F", "ZONE_LEFT_ARM", 13300, 299], ["Спартанцы в бою", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_007_M", "MP_Christmas2017_Tattoo_007_F", "ZONE_LEFT_ARM", 14100, 300], ["Катана", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_013_M", "MP_Christmas2017_Tattoo_013_F", "ZONE_LEFT_ARM", 19300, 301], ["Крылатый змей", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_025_M", "MP_Christmas2017_Tattoo_025_F", "ZONE_LEFT_ARM", 15100, 302], ["Цербер", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_029_M", "MP_Christmas2017_Tattoo_029_F", "ZONE_LEFT_ARM", 13600, 303], ["Пистолет", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_004_M", "MP_Gunrunning_Tattoo_004_F", "ZONE_LEFT_ARM", 14400, 304], ["Патронташ", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_008_M", "MP_Gunrunning_Tattoo_008_F", "ZONE_LEFT_ARM", 17900, 305], ["Череп на шипе", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_015_M", "MP_Gunrunning_Tattoo_015_F", "ZONE_LEFT_ARM", 14100, 306], ["Кровавые деньги", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_016_M", "MP_Gunrunning_Tattoo_016_F", "ZONE_LEFT_ARM", 15100, 307], ["Молящийся череп", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_025_M", "MP_Gunrunning_Tattoo_025_F", "ZONE_LEFT_ARM", 14400, 308], ["Револьвер и змея", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_027_M", "MP_Gunrunning_Tattoo_027_F", "ZONE_LEFT_ARM", 19700, 309], ["Сердце Tiger", "mpheist3_overlays", "mpHeist3_Tat_040_M", "mpHeist3_Tat_040_F", "ZONE_LEFT_ARM", 14900, 310], ["Могучий Тог", "mpheist3_overlays", "mpHeist3_Tat_041_M", "mpHeist3_Tat_041_F", "ZONE_LEFT_ARM", 13500, 311], ["Рукав на поршнях", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_004_M", "MP_MP_ImportExport_Tat_004_F", "ZONE_LEFT_ARM", 14500, 312], ["Скарлетт", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_008_M", "MP_MP_ImportExport_Tat_008_F", "ZONE_LEFT_ARM", 25600, 313], ["Нет зла", "mplowrider_overlays", "MP_LR_Tat_005_M", "MP_LR_Tat_005_F", "ZONE_LEFT_ARM", 14600, 314], ["Жизнь в Лос-Сантосе", "mplowrider_overlays", "MP_LR_Tat_027_M", "MP_LR_Tat_027_F", "ZONE_LEFT_ARM", 15600, 315], ["Городская печаль", "mplowrider_overlays", "MP_LR_Tat_033_M", "MP_LR_Tat_033_F", "ZONE_LEFT_ARM", 16900, 316], ["Любовные заботы", "mplowrider2_overlays", "MP_LR_Tat_006_M", "MP_LR_Tat_006_F", "ZONE_LEFT_ARM", 17800, 317], ["Вечеринка скелетов", "mplowrider2_overlays", "MP_LR_Tat_018_M", "MP_LR_Tat_018_F", "ZONE_LEFT_ARM", 12000, 318], ["Моя безумная жизнь", "mplowrider2_overlays", "MP_LR_Tat_022_M", "MP_LR_Tat_022_F", "ZONE_LEFT_ARM", 12300, 319], ["Честь", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_004_M", "MP_Smuggler_Tattoo_004_F", "ZONE_LEFT_ARM", 13900, 320], ["Чудовище из глубин", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_008_M", "MP_Smuggler_Tattoo_008_F", "ZONE_LEFT_ARM", 12500, 321], ["Проклятие русалки", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_014_M", "MP_Smuggler_Tattoo_014_F", "ZONE_LEFT_ARM", 12400, 322], ["Seductive Mechanic", "mpstunt_overlays", "MP_MP_Stunt_tat_049_M", "MP_MP_Stunt_tat_049_F", "ZONE_LEFT_ARM", 12500, 323], ["Масти", "mpvinewood_overlays", "MP_Vinewood_Tat_002_M", "MP_Vinewood_Tat_002_F", "ZONE_LEFT_ARM", 16400, 324], ["На удачу", "mpvinewood_overlays", "MP_Vinewood_Tat_005_M", "MP_Vinewood_Tat_005_F", "ZONE_LEFT_ARM", 13400, 325], ["Порок", "mpvinewood_overlays", "MP_Vinewood_Tat_014_M", "MP_Vinewood_Tat_014_F", "ZONE_LEFT_ARM", 13700, 326], ["Не всегда же побеждать", "mpvinewood_overlays", "MP_Vinewood_Tat_019_M", "MP_Vinewood_Tat_019_F", "ZONE_LEFT_ARM", 13200, 327], ["Роза из банкноты", "mpvinewood_overlays", "MP_Vinewood_Tat_026_M", "MP_Vinewood_Tat_026_F", "ZONE_LEFT_ARM", 14400, 328], ["Toxic Trails", "mpairraces_overlays", "MP_Airraces_Tattoo_003_M", "MP_Airraces_Tattoo_003_F", "ZONE_LEFT_ARM", 13500, 329], ["Floral Symmetry", "mpluxe_overlays", "MP_LUXE_TAT_009_M", "MP_LUXE_TAT_009_F", "ZONE_LEFT_ARM", 13300, 330], ["Archangel &amp; Mary", "mpluxe_overlays", "MP_LUXE_TAT_020_M", "MP_LUXE_TAT_020_F", "ZONE_LEFT_ARM", 14300, 331], ["Gabriel", "mpluxe_overlays", "MP_LUXE_TAT_021_M", "MP_LUXE_TAT_021_F", "ZONE_LEFT_ARM", 13300, 332], ["Fatal Dagger", "mpluxe2_overlays", "MP_LUXE_TAT_005_M", "MP_LUXE_TAT_005_F", "ZONE_LEFT_ARM", 16500, 333], ["Egyptian Mural", "mpluxe2_overlays", "MP_LUXE_TAT_016_M", "MP_LUXE_TAT_016_F", "ZONE_LEFT_ARM", 12400, 334], ["Divine Goddess", "mpluxe2_overlays", "MP_LUXE_TAT_018_M", "MP_LUXE_TAT_018_F", "ZONE_LEFT_ARM", 13900, 335], ["Python Skull", "mpluxe2_overlays", "MP_LUXE_TAT_028_M", "MP_LUXE_TAT_028_F", "ZONE_LEFT_ARM", 16000, 336], ["8 Eyed Skull", "mpstunt_overlays", "MP_MP_Stunt_tat_001_M", "MP_MP_Stunt_tat_001_F", "ZONE_LEFT_ARM", 12500, 337], ["Big Cat", "mpstunt_overlays", "MP_MP_Stunt_tat_002_M", "MP_MP_Stunt_tat_002_F", "ZONE_LEFT_ARM", 11700, 338], ["Moonlight Ride", "mpstunt_overlays", "MP_MP_Stunt_tat_008_M", "MP_MP_Stunt_tat_008_F", "ZONE_LEFT_ARM", 16700, 339], ["Piston Head", "mpstunt_overlays", "MP_MP_Stunt_tat_022_M", "MP_MP_Stunt_tat_022_F", "ZONE_LEFT_ARM", 12500, 340], ["Tanked", "mpstunt_overlays", "MP_MP_Stunt_tat_023_M", "MP_MP_Stunt_tat_023_F", "ZONE_LEFT_ARM", 13800, 341], ["Stuntman's End", "mpstunt_overlays", "MP_MP_Stunt_tat_035_M", "MP_MP_Stunt_tat_035_F", "ZONE_LEFT_ARM", 13500, 342], ["Kaboom", "mpstunt_overlays", "MP_MP_Stunt_tat_039_M", "MP_MP_Stunt_tat_039_F", "ZONE_LEFT_ARM", 14900, 343], ["Engine Arm", "mpstunt_overlays", "MP_MP_Stunt_tat_043_M", "MP_MP_Stunt_tat_043_F", "ZONE_LEFT_ARM", 11200, 344], ["Burning Heart", "multiplayer_overlays", "FM_Tat_Award_M_001", "FM_Tat_Award_F_001", "ZONE_LEFT_ARM", 14800, 345], ["Racing Blonde", "multiplayer_overlays", "FM_Tat_Award_M_007", "FM_Tat_Award_F_007", "ZONE_LEFT_ARM", 14900, 346], ["Racing Brunette", "multiplayer_overlays", "FM_Tat_Award_M_015", "FM_Tat_Award_F_015", "ZONE_LEFT_ARM", 13400, 347], ["Serpents", "multiplayer_overlays", "FM_Tat_M_005", "FM_Tat_F_005", "ZONE_LEFT_ARM", 12500, 348], ["Oriental Mural", "multiplayer_overlays", "FM_Tat_M_006", "FM_Tat_F_006", "ZONE_LEFT_ARM", 12600, 349], ["Zodiac Skull", "multiplayer_overlays", "FM_Tat_M_015", "FM_Tat_F_015", "ZONE_LEFT_ARM", 13100, 350], ["Lady M", "multiplayer_overlays", "FM_Tat_M_031", "FM_Tat_F_031", "ZONE_LEFT_ARM", 16900, 351], ["Dope Skull", "multiplayer_overlays", "FM_Tat_M_041", "FM_Tat_F_041", "ZONE_LEFT_ARM", 15700, 352], ["640", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_000_M", "mp_gta5rptattoo_tat_000_F", "ZONE_LEFT_ARM", 500, 640], ["641", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_001_M", "mp_gta5rptattoo_tat_001_F", "ZONE_LEFT_ARM", 500, 641], ["642", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_019_M", "mp_gta5rptattoo_tat_019_F", "ZONE_LEFT_ARM", 500, 642], ["643", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_026_M", "mp_gta5rptattoo_tat_026_F", "ZONE_LEFT_ARM", 500, 643], ["644", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_027_M", "mp_gta5rptattoo_tat_027_F", "ZONE_LEFT_ARM", 500, 644], ["645", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_028_M", "mp_gta5rptattoo_tat_028_F", "ZONE_LEFT_ARM", 500, 645], ["646", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_033_M", "mp_gta5rptattoo_tat_033_F", "ZONE_LEFT_ARM", 500, 646], ["647", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_039_M", "mp_gta5rptattoo_tat_039_F", "ZONE_LEFT_ARM", 500, 647], ["654", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_121_M", "mp_gta5rptattoo_tat_121_F", "ZONE_LEFT_ARM", 500, 654], ["655", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_122_M", "mp_gta5rptattoo_tat_122_F", "ZONE_LEFT_ARM", 500, 655], ["656", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_123_M", "mp_gta5rptattoo_tat_123_F", "ZONE_LEFT_ARM", 500, 656], ["657", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_124_M", "mp_gta5rptattoo_tat_124_F", "ZONE_LEFT_ARM", 500, 657], ["658", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_125_M", "mp_gta5rptattoo_tat_125_F", "ZONE_LEFT_ARM", 500, 658], ["659", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_126_M", "mp_gta5rptattoo_tat_126_F", "ZONE_LEFT_ARM", 500, 659], ["660", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_127_M", "mp_gta5rptattoo_tat_127_F", "ZONE_LEFT_ARM", 500, 660], ["647", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_039_M", "", "ZONE_LEFT_ARM", 500, 647], ["648", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_040_M", "", "ZONE_LEFT_ARM", 500, 648], ["649", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_041_M", "", "ZONE_LEFT_ARM", 500, 649], ["650", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_042_M", "", "ZONE_LEFT_ARM", 500, 650], ["651", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_064_F", "ZONE_LEFT_ARM", 500, 651], ["652", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_065_F", "ZONE_LEFT_ARM", 500, 652], ["653", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_066_F", "ZONE_LEFT_ARM", 500, 653], ["Косяк рыбы", "mpbeach_overlays", "", "MP_Bea_F_RLeg_000", "ZONE_RIGHT_LEG", 12800, 353], ["Узор Башня тики", "mpbeach_overlays", "MP_Bea_M_Rleg_000", "", "ZONE_RIGHT_LEG", 12600, 354], ["Алмазная корона", "mpbusiness_overlays", "", "MP_Buis_F_RLeg_000", "ZONE_RIGHT_LEG", 12500, 355], ["Еда", "mphipster_overlays", "FM_Hip_M_Tat_038", "FM_Hip_F_Tat_038", "ZONE_RIGHT_LEG", 14000, 356], ["Свеча зажигания", "mphipster_overlays", "FM_Hip_M_Tat_042", "FM_Hip_F_Tat_042", "ZONE_RIGHT_LEG", 14500, 357], ["Ярость дракона", "mpbiker_overlays", "MP_MP_Biker_Tat_004_M", "MP_MP_Biker_Tat_004_F", "ZONE_RIGHT_LEG", 12800, 358], ["Символ Western", "mpbiker_overlays", "MP_MP_Biker_Tat_022_M", "MP_MP_Biker_Tat_022_F", "ZONE_RIGHT_LEG", 13900, 359], ["Навстречу закату", "mpbiker_overlays", "MP_MP_Biker_Tat_028_M", "MP_MP_Biker_Tat_028_F", "ZONE_RIGHT_LEG", 14500, 360], ["American Made", "mpbiker_overlays", "MP_MP_Biker_Tat_040_M", "MP_MP_Biker_Tat_040_F", "ZONE_RIGHT_LEG", 14100, 361], ["STFU", "mpbiker_overlays", "MP_MP_Biker_Tat_048_M", "MP_MP_Biker_Tat_048_F", "ZONE_RIGHT_LEG", 13900, 362], ["Кинжал с орнаментом", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_014", "MP_Xmas2_F_Tat_014", "ZONE_RIGHT_LEG", 13400, 363], ["Боевой череп", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_006_M", "MP_Gunrunning_Tattoo_006_F", "ZONE_RIGHT_LEG", 14600, 364], ["Неприкаянный череп", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_026_M", "MP_Gunrunning_Tattoo_026_F", "ZONE_RIGHT_LEG", 13800, 365], ["Тузы и пистолет", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_030_M", "MP_Gunrunning_Tattoo_030_F", "ZONE_RIGHT_LEG", 14400, 366], ["Kifflom", "mpheist3_overlays", "mpHeist3_Tat_031_M", "mpHeist3_Tat_031_F", "ZONE_RIGHT_LEG", 13500, 367], ["Сделай мне тату", "mplowrider_overlays", "MP_LR_Tat_017_M", "MP_LR_Tat_017_F", "ZONE_RIGHT_LEG", 13400, 368], ["Танец сердец", "mplowrider_overlays", "MP_LR_Tat_023_M", "MP_LR_Tat_023_F", "ZONE_RIGHT_LEG", 13600, 369], ["Молитва San Andreas", "mplowrider2_overlays", "MP_LR_Tat_030_M", "MP_LR_Tat_030_F", "ZONE_RIGHT_LEG", 12800, 370], ["Курс – домой", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_020_M", "MP_Smuggler_Tattoo_020_F", "ZONE_RIGHT_LEG", 13600, 371], ["Деньги правят миром", "mpvinewood_overlays", "MP_Vinewood_Tat_020_M", "MP_Vinewood_Tat_020_F", "ZONE_RIGHT_LEG", 13200, 372], ["Elaborate Los Muertos", "mpluxe_overlays", "MP_LUXE_TAT_001_M", "MP_LUXE_TAT_001_F", "ZONE_RIGHT_LEG", 12600, 373], ["Starmetric", "mpluxe2_overlays", "MP_LUXE_TAT_023_M", "MP_LUXE_TAT_023_F", "ZONE_RIGHT_LEG", 14300, 374], ["Demon Spark Plug", "mpstunt_overlays", "MP_MP_Stunt_tat_005_M", "MP_MP_Stunt_tat_005_F", "ZONE_RIGHT_LEG", 13400, 375], ["Praying Gloves", "mpstunt_overlays", "MP_MP_Stunt_tat_015_M", "MP_MP_Stunt_tat_015_F", "ZONE_RIGHT_LEG", 15700, 376], ["Piston Angel", "mpstunt_overlays", "MP_MP_Stunt_tat_020_M", "MP_MP_Stunt_tat_020_F", "ZONE_RIGHT_LEG", 13900, 377], ["Speed Freak", "mpstunt_overlays", "MP_MP_Stunt_tat_025_M", "MP_MP_Stunt_tat_025_F", "ZONE_RIGHT_LEG", 13700, 378], ["Wheelie Mouse", "mpstunt_overlays", "MP_MP_Stunt_tat_032_M", "MP_MP_Stunt_tat_032_F", "ZONE_RIGHT_LEG", 12400, 379], ["Severed Hand", "mpstunt_overlays", "MP_MP_Stunt_tat_045_M", "MP_MP_Stunt_tat_045_F", "ZONE_RIGHT_LEG", 13800, 380], ["Brake Knife", "mpstunt_overlays", "MP_MP_Stunt_tat_047_M", "MP_MP_Stunt_tat_047_F", "ZONE_RIGHT_LEG", 12600, 381], ["Skull and Sword", "multiplayer_overlays", "FM_Tat_Award_M_006", "FM_Tat_Award_F_006", "ZONE_RIGHT_LEG", 14000, 382], ["The Warrior", "multiplayer_overlays", "FM_Tat_M_007", "FM_Tat_F_007", "ZONE_RIGHT_LEG", 13600, 383], ["Tribal", "multiplayer_overlays", "FM_Tat_M_017", "FM_Tat_F_017", "ZONE_RIGHT_LEG", 17200, 384], ["Fiery Dragon", "multiplayer_overlays", "FM_Tat_M_022", "FM_Tat_F_022", "ZONE_RIGHT_LEG", 16600, 385], ["Broken Skull", "multiplayer_overlays", "FM_Tat_M_039", "FM_Tat_F_039", "ZONE_RIGHT_LEG", 15900, 386], ["Flaming Skull", "multiplayer_overlays", "FM_Tat_M_040", "FM_Tat_F_040", "ZONE_RIGHT_LEG", 13470, 387], ["Flaming Scorpion", "multiplayer_overlays", "FM_Tat_M_042", "FM_Tat_F_042", "ZONE_RIGHT_LEG", 12900, 388], ["Indian Ram", "multiplayer_overlays", "FM_Tat_M_043", "FM_Tat_F_043", "ZONE_RIGHT_LEG", 13800, 389], ["730", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_141_M", "mp_gta5rptattoo_tat_141_M", "ZONE_RIGHT_LEG", 500, 730], ["732", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_162_M", "mp_gta5rptattoo_tat_162_F", "ZONE_RIGHT_LEG", 500, 732], ["733", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_163_M", "mp_gta5rptattoo_tat_163_F", "ZONE_RIGHT_LEG", 500, 733], ["734", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_164_M", "mp_gta5rptattoo_tat_164_F", "ZONE_RIGHT_LEG", 500, 734], ["735", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_165_M", "mp_gta5rptattoo_tat_165_F", "ZONE_RIGHT_LEG", 500, 735], ["736", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_166_M", "mp_gta5rptattoo_tat_166_F", "ZONE_RIGHT_LEG", 500, 736], ["737", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_167_M", "mp_gta5rptattoo_tat_167_F", "ZONE_RIGHT_LEG", 500, 737], ["738", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_168_M", "mp_gta5rptattoo_tat_168_F", "ZONE_RIGHT_LEG", 500, 738], ["739", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_169_M", "mp_gta5rptattoo_tat_169_F", "ZONE_RIGHT_LEG", 500, 739], ["721", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_059_M", "", "ZONE_RIGHT_LEG", 500, 721], ["722", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_060_M", "", "ZONE_RIGHT_LEG", 500, 722], ["723", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_061_M", "", "ZONE_RIGHT_LEG", 500, 723], ["724", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_062_M", "", "ZONE_RIGHT_LEG", 500, 724], ["725", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_083_F", "ZONE_RIGHT_LEG", 500, 725], ["726", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_084_F", "ZONE_RIGHT_LEG", 500, 726], ["727", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_085_F", "ZONE_RIGHT_LEG", 500, 727], ["728", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_086_F", "ZONE_RIGHT_LEG", 500, 728], ["Рукав коричневые краски", "overlays_onyx", "onyx_tattoo_06_m", "onyx_tattoo_06_f", "ZONE_RIGHT_ARM", 200000, 3002], ["Трайбл - рыба", "mpbeach_overlays", "", "MP_Bea_F_RArm_001", "ZONE_RIGHT_ARM", 12100, 390], ["Узор Солнце", "mpbeach_overlays", "MP_Bea_M_RArm_000", "", "ZONE_RIGHT_ARM", 13400, 391], ["Красотка из Веспуччи", "mpbeach_overlays", "MP_Bea_M_RArm_001", "", "ZONE_RIGHT_ARM", 12900, 392], ["Череп с долларом", "mpbusiness_overlays", "MP_Buis_M_RightArm_000", "", "ZONE_RIGHT_ARM", 13800, 393], ["Зелень", "mpbusiness_overlays", "MP_Buis_M_RightArm_001", "", "ZONE_RIGHT_ARM", 12500, 394], ["Знак доллара", "mpbusiness_overlays", "", "MP_Buis_F_RArm_000", "ZONE_RIGHT_ARM", 13400, 395], ["Стрела", "mphipster_overlays", "FM_Hip_M_Tat_001", "FM_Hip_F_Tat_001", "ZONE_RIGHT_ARM", 12800, 396], ["Кость", "mphipster_overlays", "FM_Hip_M_Tat_004", "FM_Hip_F_Tat_004", "ZONE_RIGHT_ARM", 13800, 397], ["Куб", "mphipster_overlays", "FM_Hip_M_Tat_008", "FM_Hip_F_Tat_008", "ZONE_RIGHT_ARM", 13400, 398], ["Подкова", "mphipster_overlays", "FM_Hip_M_Tat_010", "FM_Hip_F_Tat_010", "ZONE_RIGHT_ARM", 14900, 399], ["Баллончик", "mphipster_overlays", "FM_Hip_M_Tat_014", "FM_Hip_F_Tat_014", "ZONE_RIGHT_ARM", 15600, 400], ["Глаз в треугольнике", "mphipster_overlays", "FM_Hip_M_Tat_017", "FM_Hip_F_Tat_017", "ZONE_RIGHT_ARM", 16800, 401], ["Оригами", "mphipster_overlays", "FM_Hip_M_Tat_018", "FM_Hip_F_Tat_018", "ZONE_RIGHT_ARM", 12400, 402], ["Узор Geo", "mphipster_overlays", "FM_Hip_M_Tat_020", "FM_Hip_F_Tat_020", "ZONE_RIGHT_ARM", 13800, 403], ["Карандаш", "mphipster_overlays", "FM_Hip_M_Tat_022", "FM_Hip_F_Tat_022", "ZONE_RIGHT_ARM", 15000, 404], ["Смайлик", "mphipster_overlays", "FM_Hip_M_Tat_023", "FM_Hip_F_Tat_023", "ZONE_RIGHT_ARM", 14700, 405], ["Фигуры", "mphipster_overlays", "FM_Hip_M_Tat_036", "FM_Hip_F_Tat_036", "ZONE_RIGHT_ARM", 14900, 406], ["Черный треугольник", "mphipster_overlays", "FM_Hip_M_Tat_044", "FM_Hip_F_Tat_044", "ZONE_RIGHT_ARM", 14300, 407], ["Сетка", "mphipster_overlays", "FM_Hip_M_Tat_045", "FM_Hip_F_Tat_045", "ZONE_RIGHT_ARM", 13800, 408], ["Парящий орел", "mpbiker_overlays", "MP_MP_Biker_Tat_007_M", "MP_MP_Biker_Tat_007_F", "ZONE_RIGHT_ARM", 13900, 409], ["Госпожа Смерть", "mpbiker_overlays", "MP_MP_Biker_Tat_014_M", "MP_MP_Biker_Tat_014_F", "ZONE_RIGHT_ARM", 12300, 410], ["Орел", "mpbiker_overlays", "MP_MP_Biker_Tat_033_M", "MP_MP_Biker_Tat_033_F", "ZONE_RIGHT_ARM", 12500, 411], ["Мрачный ездок", "mpbiker_overlays", "MP_MP_Biker_Tat_042_M", "MP_MP_Biker_Tat_042_F", "ZONE_RIGHT_ARM", 13900, 412], ["Череп на цепи", "mpbiker_overlays", "MP_MP_Biker_Tat_046_M", "MP_MP_Biker_Tat_046_F", "ZONE_RIGHT_ARM", 14600, 413], ["Змеиный укус", "mpbiker_overlays", "MP_MP_Biker_Tat_047_M", "MP_MP_Biker_Tat_047_F", "ZONE_RIGHT_ARM", 13600, 414], ["These Colors Don't Run", "mpbiker_overlays", "MP_MP_Biker_Tat_049_M", "MP_MP_Biker_Tat_049_F", "ZONE_RIGHT_ARM", 16100, 415], ["Mum", "mpbiker_overlays", "MP_MP_Biker_Tat_054_M", "MP_MP_Biker_Tat_054_F", "ZONE_RIGHT_ARM", 13300, 416], ["Змея (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_003", "MP_Xmas2_F_Tat_003", "ZONE_RIGHT_ARM", 14000, 417], ["Змея (тень)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_004", "MP_Xmas2_F_Tat_004", "ZONE_RIGHT_ARM", 13500, 418], ["Лучше смерть, чем позор", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_008", "MP_Xmas2_F_Tat_008", 16200, 419], ["Ты следующий (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_022", "MP_Xmas2_F_Tat_022", "ZONE_RIGHT_ARM", 11100, 420], ["Ты следующий (цвет)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_023", "MP_Xmas2_F_Tat_023", "ZONE_RIGHT_ARM", 13500, 421], ["Fuck Luck (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_026", "MP_Xmas2_F_Tat_026", "ZONE_RIGHT_ARM", 12200, 422], ["Fuck Luck (цвет)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_027", "MP_Xmas2_F_Tat_027", "ZONE_RIGHT_ARM", 14900, 423], ["Медуза", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_006_M", "MP_Christmas2017_Tattoo_006_F", "ZONE_RIGHT_ARM", 12000, 424], ["Шапка из тигра", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_012_M", "MP_Christmas2017_Tattoo_012_F", "ZONE_RIGHT_ARM", 13200, 425], ["Кельтский узор", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_014_M", "MP_Christmas2017_Tattoo_014_F", "ZONE_RIGHT_ARM", 12900, 426], ["Пернатый рукав", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_017_M", "MP_Christmas2017_Tattoo_017_F", "ZONE_RIGHT_ARM", 14600, 427], ["Разрыв мышцы", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_018_M", "MP_Christmas2017_Tattoo_018_F", "ZONE_RIGHT_ARM", 13400, 428], ["Самурайский парусник", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_023_M", "MP_Christmas2017_Tattoo_023_F", "ZONE_RIGHT_ARM", 15100, 429], ["Фреска со спартанцами", "mpchristmas2017_overlays", "MP_Christmas2017_Tattoo_028_M", "MP_Christmas2017_Tattoo_028_F", "ZONE_RIGHT_ARM", 13600, 430], ["Граната", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_002_M", "MP_Gunrunning_Tattoo_002_F", "ZONE_RIGHT_ARM", 13100, 431], ["Всего доброго!", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_021_M", "MP_Gunrunning_Tattoo_021_F", "ZONE_RIGHT_ARM", 13600, 432], ["Смерть с косой в шлеме", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_024_M", "MP_Gunrunning_Tattoo_024_F", "ZONE_RIGHT_ARM", 13100, 433], ["Монограмма LS", "mpheist3_overlays", "mpHeist3_Tat_034_M", "mpHeist3_Tat_034_F", "ZONE_RIGHT_ARM", 13400, 434], ["Механический рукав", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_003_M", "MP_MP_ImportExport_Tat_003_F", "ZONE_RIGHT_ARM", 14200, 435], ["Отточенный", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_005_M", "MP_MP_ImportExport_Tat_005_F", "ZONE_RIGHT_ARM", 13800, 436], ["В огне", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_006_M", "MP_MP_ImportExport_Tat_006_F", "ZONE_RIGHT_ARM", 15300, 437], ["Вечный путь", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_007_M", "MP_MP_ImportExport_Tat_007_F", "ZONE_RIGHT_ARM", 13200, 438], ["Соблазнительница", "mplowrider_overlays", "MP_LR_Tat_015_M", "MP_LR_Tat_015_F", "ZONE_RIGHT_ARM", 13700, 439], ["Леди-вампир", "mplowrider2_overlays", "MP_LR_Tat_003_M", "MP_LR_Tat_003_F", "ZONE_RIGHT_ARM", 17800, 440], ["Люблю Los Muertos", "mplowrider2_overlays", "MP_LR_Tat_028_M", "MP_LR_Tat_028_F", "ZONE_RIGHT_ARM", 13400, 441], ["Черные слезы", "mplowrider2_overlays", "MP_LR_Tat_035_M", "MP_LR_Tat_035_F", "ZONE_RIGHT_ARM", 17200, 442], ["Снайпер", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_001_M", "MP_Smuggler_Tattoo_001_F", "ZONE_RIGHT_ARM", 14100, 443], ["Бунт", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_005_M", "MP_Smuggler_Tattoo_005_F", "ZONE_RIGHT_ARM", 12600, 444], ["Стилизованный кракен", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_023_M", "MP_Smuggler_Tattoo_023_F", "ZONE_RIGHT_ARM", 13800, 445], ["Госпожа Удача", "mpvinewood_overlays", "MP_Vinewood_Tat_004_M", "MP_Vinewood_Tat_004_F", "ZONE_RIGHT_ARM", 14002, 446], ["Жизнь игрока", "mpvinewood_overlays", "MP_Vinewood_Tat_018_M", "MP_Vinewood_Tat_018_F", "ZONE_RIGHT_ARM", 13500, 447], ["Дама роз", "mpvinewood_overlays", "MP_Vinewood_Tat_025_M", "MP_Vinewood_Tat_025_F", "ZONE_RIGHT_ARM", 13400, 448], ["Череп и тузы", "mpvinewood_overlays", "MP_Vinewood_Tat_028_M", "MP_Vinewood_Tat_028_F", "ZONE_RIGHT_ARM", 14600, 449], ["Floral Raven", "mpluxe_overlays", "MP_LUXE_TAT_004_M", "MP_LUXE_TAT_004_F", "ZONE_RIGHT_ARM", 15300, 450], ["Mermaid Harpist", "mpluxe_overlays", "MP_LUXE_TAT_013_M", "MP_LUXE_TAT_013_F", "ZONE_RIGHT_ARM", 14200, 451], ["Geisha Bloom", "mpluxe_overlays", "MP_LUXE_TAT_019_M", "MP_LUXE_TAT_019_F", "ZONE_RIGHT_ARM", 13600, 452], ["Intrometric", "mpluxe2_overlays", "MP_LUXE_TAT_010_M", "MP_LUXE_TAT_010_F", "ZONE_RIGHT_ARM", 13400, 453], ["Heavenly Deity", "mpluxe2_overlays", "MP_LUXE_TAT_017_M", "MP_LUXE_TAT_017_F", "ZONE_RIGHT_ARM", 13800, 454], ["Floral Print", "mpluxe2_overlays", "MP_LUXE_TAT_026_M", "MP_LUXE_TAT_026_F", "ZONE_RIGHT_ARM", 14900, 455], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_030_M", "MP_LUXE_TAT_030_F", "ZONE_RIGHT_ARM", 16800, 456], ["Poison Wrench", "mpstunt_overlays", "MP_MP_Stunt_tat_003_M", "MP_MP_Stunt_tat_003_F", "ZONE_RIGHT_ARM", 16400, 457], ["Arachnid of Death", "mpstunt_overlays", "MP_MP_Stunt_tat_009_M", "MP_MP_Stunt_tat_009_F", "ZONE_RIGHT_ARM", 13500, 458], ["Grave Vulture", "mpstunt_overlays", "MP_MP_Stunt_tat_010_M", "MP_MP_Stunt_tat_010_F", "ZONE_RIGHT_ARM", 13500, 459], ["Coffin Racer", "mpstunt_overlays", "MP_MP_Stunt_tat_016_M", "MP_MP_Stunt_tat_016_F", "ZONE_RIGHT_ARM", 14500, 460], ["Biker Stallion", "mpstunt_overlays", "MP_MP_Stunt_tat_036_M", "MP_MP_Stunt_tat_036_F", "ZONE_RIGHT_ARM", 13500, 461], ["One Down Five Up", "mpstunt_overlays", "MP_MP_Stunt_tat_038_M", "MP_MP_Stunt_tat_038_F", "ZONE_RIGHT_ARM", 16100, 462], ["Grim Reaper Smoking Gun", "multiplayer_overlays", "FM_Tat_Award_M_002", "FM_Tat_Award_F_002", "ZONE_RIGHT_ARM", 14900, 463], ["Ride or Die", "multiplayer_overlays", "FM_Tat_Award_M_010", "FM_Tat_Award_F_010", "ZONE_RIGHT_ARM", 15600, 464], ["Brotherhood", "multiplayer_overlays", "FM_Tat_M_000", "FM_Tat_F_000", "ZONE_RIGHT_ARM", 14500, 465], ["Dragons", "multiplayer_overlays", "FM_Tat_M_001", "FM_Tat_F_001", "ZONE_RIGHT_ARM", 13560, 466], ["Dragons and Skull", "multiplayer_overlays", "FM_Tat_M_003", "FM_Tat_F_003", "ZONE_RIGHT_ARM", 13400, 467], ["Flower Mural", "multiplayer_overlays", "FM_Tat_M_014", "FM_Tat_F_014", "ZONE_RIGHT_ARM", 15800, 468], ["Serpent Skull", "multiplayer_overlays", "FM_Tat_M_018", "FM_Tat_F_018", "ZONE_RIGHT_ARM", 14200, 469], ["Virgin Mary", "multiplayer_overlays", "FM_Tat_M_027", "FM_Tat_F_027", "ZONE_RIGHT_ARM", 13500, 470], ["Mermaid", "multiplayer_overlays", "FM_Tat_M_028", "FM_Tat_F_028", "ZONE_RIGHT_ARM", 13200, 471], ["Dagger", "multiplayer_overlays", "FM_Tat_M_038", "FM_Tat_F_038", "ZONE_RIGHT_ARM", 17800, 472], ["Lion", "multiplayer_overlays", "FM_Tat_M_047", "FM_Tat_F_047", "ZONE_RIGHT_ARM", 18600, 473], ["661", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_018_M", "mp_gta5rptattoo_tat_018_F", "ZONE_RIGHT_ARM", 500, 661], ["662", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_010_M", "mp_gta5rptattoo_tat_010_F", "ZONE_RIGHT_ARM", 500, 662], ["663", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_002_M", "mp_gta5rptattoo_tat_002_F", "ZONE_RIGHT_ARM", 500, 663], ["665", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_015_M", "mp_gta5rptattoo_tat_015_F", "ZONE_RIGHT_ARM", 500, 665], ["666", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_016_M", "mp_gta5rptattoo_tat_016_F", "ZONE_RIGHT_ARM", 500, 666], ["667", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_021_M", "mp_gta5rptattoo_tat_021_F", "ZONE_RIGHT_ARM", 500, 667], ["668", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_022_M", "mp_gta5rptattoo_tat_022_F", "ZONE_RIGHT_ARM", 500, 668], ["669", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_024_M", "mp_gta5rptattoo_tat_024_F", "ZONE_RIGHT_ARM", 500, 669], ["670", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_025_M", "mp_gta5rptattoo_tat_025_F", "ZONE_RIGHT_ARM", 500, 670], ["671", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_029_M", "mp_gta5rptattoo_tat_029_F", "ZONE_RIGHT_ARM", 500, 671], ["681", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_129_M", "mp_gta5rptattoo_tat_129_F", "ZONE_RIGHT_ARM", 500, 681], ["682", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_130_M", "mp_gta5rptattoo_tat_130_F", "ZONE_RIGHT_ARM", 500, 682], ["683", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_131_M", "mp_gta5rptattoo_tat_131_F", "ZONE_RIGHT_ARM", 500, 683], ["684", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_132_M", "mp_gta5rptattoo_tat_132_F", "ZONE_RIGHT_ARM", 500, 684], ["685", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_133_M", "mp_gta5rptattoo_tat_133_F", "ZONE_RIGHT_ARM", 500, 685], ["686", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_134_M", "mp_gta5rptattoo_tat_134_F", "ZONE_RIGHT_ARM", 500, 686], ["687", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_135_M", "mp_gta5rptattoo_tat_135_F", "ZONE_RIGHT_ARM", 500, 687], ["672", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_043_M", "", "ZONE_RIGHT_ARM", 500, 672], ["673", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_044_M", "", "ZONE_RIGHT_ARM", 500, 673], ["674", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_045_M", "", "ZONE_RIGHT_ARM", 500, 674], ["675", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_046_M", "", "ZONE_RIGHT_ARM", 500, 675], ["676", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_063_F", "ZONE_RIGHT_ARM", 500, 676], ["677", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_067_F", "ZONE_RIGHT_ARM", 500, 677], ["678", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_068_F", "ZONE_RIGHT_ARM", 500, 678], ["679", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_069_F", "ZONE_RIGHT_ARM", 500, 679], ["680", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_070_F", "ZONE_RIGHT_ARM", 500, 680], ["Трайбл - бабочка", "mpbeach_overlays", "", "MP_Bea_F_Neck_000", "ZONE_HEAD", 13400, 474], ["Пиратский череп", "mpbeach_overlays", "MP_Bea_M_Head_000", "", "ZONE_HEAD", 12500, 475], ["Серфинг - Лос-Сантос", "mpbeach_overlays", "MP_Bea_M_Head_001", "", "ZONE_HEAD", 12400, 476], ["Акула", "mpbeach_overlays", "MP_Bea_M_Head_002", "", "ZONE_HEAD", 12400, 477], ["Рыбка", "mpbeach_overlays", "MP_Bea_M_Neck_000", "", "ZONE_HEAD", 12400, 478], ["Время серфинга", "mpbeach_overlays", "MP_Bea_M_Neck_001", "", "ZONE_HEAD", 13400, 479], ["Богатей", "mpbusiness_overlays", "MP_Buis_M_Neck_000", "", "ZONE_HEAD", 11200, 480], ["Жирный знак доллара", "mpbusiness_overlays", "MP_Buis_M_Neck_001", "", "ZONE_HEAD", 12600, 481], ["Знак доллара (курсив)", "mpbusiness_overlays", "MP_Buis_M_Neck_002", "", "ZONE_HEAD", 11400, 482], ["100 $", "mpbusiness_overlays", "MP_Buis_M_Neck_003", "", "ZONE_HEAD", 12500, 483], ["Логотип Val-de-Grace", "mpbusiness_overlays", "", "MP_Buis_F_Neck_000", "ZONE_HEAD", 12800, 484], ["Розочка из денег", "mpbusiness_overlays", "", "MP_Buis_F_Neck_001", "ZONE_HEAD", 14600, 485], ["Красивый глаз", "mphipster_overlays", "FM_Hip_M_Tat_005", "FM_Hip_F_Tat_005", "ZONE_HEAD", 14700, 486], ["Узор Fox", "mphipster_overlays", "FM_Hip_M_Tat_021", "FM_Hip_F_Tat_021", "ZONE_HEAD", 12400, 487], ["Жуткий паук", "mpbiker_overlays", "MP_MP_Biker_Tat_009_M", "MP_MP_Biker_Tat_009_F", "ZONE_HEAD", 13300, 488], ["FTW", "mpbiker_overlays", "MP_MP_Biker_Tat_038_M", "MP_MP_Biker_Tat_038_F", "ZONE_HEAD", 13300, 489], ["Western (стилизованная)", "mpbiker_overlays", "MP_MP_Biker_Tat_051_M", "MP_MP_Biker_Tat_051_F", "ZONE_HEAD", 12600, 490], ["Los Muertos", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_007", "MP_Xmas2_F_Tat_007", "ZONE_HEAD", 13600, 491], ["Голова змеи (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_024", "MP_Xmas2_F_Tat_024", "ZONE_HEAD", 13500, 492], ["Голова змеи (цвет)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_025", "MP_Xmas2_F_Tat_025", "ZONE_HEAD", 13400, 493], ["Красивая смерть", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_029", "MP_Xmas2_F_Tat_029", "ZONE_HEAD", 13900, 494], ["Оружие к бою", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_003_M", "MP_Gunrunning_Tattoo_003_F", "ZONE_HEAD", 14700, 495], ["Пять звезд", "mpheist3_overlays", "mpHeist3_Tat_000_M", "mpHeist3_Tat_000_F", "ZONE_HEAD", 12900, 496], ["Пиковый туз", "mpheist3_overlays", "mpHeist3_Tat_001_M", "mpHeist3_Tat_001_F", "ZONE_HEAD", 14500, 497], ["Animal", "mpheist3_overlays", "mpHeist3_Tat_002_M", "mpHeist3_Tat_002_F", "ZONE_HEAD", 13300, 498], ["Штурмовая винтовка", "mpheist3_overlays", "mpHeist3_Tat_003_M", "mpHeist3_Tat_003_F", "ZONE_HEAD", 12400, 499], ["Пластырь", "mpheist3_overlays", "mpHeist3_Tat_004_M", "mpHeist3_Tat_004_F", "ZONE_HEAD", 12400, 500], ["Пики", "mpheist3_overlays", "mpHeist3_Tat_005_M", "mpHeist3_Tat_005_F", "ZONE_HEAD", 13400, 501], ["Корона", "mpheist3_overlays", "mpHeist3_Tat_006_M", "mpHeist3_Tat_006_F", "ZONE_HEAD", 15900, 502], ["Два рога", "mpheist3_overlays", "mpHeist3_Tat_007_M", "mpHeist3_Tat_007_F", "ZONE_HEAD", 16100, 503], ["Мороженное", "mpheist3_overlays", "mpHeist3_Tat_008_M", "mpHeist3_Tat_008_F", "ZONE_HEAD", 13300, 504], ["Ножевое ранение", "mpheist3_overlays", "mpHeist3_Tat_009_M", "mpHeist3_Tat_009_F", "ZONE_HEAD", 13300, 505], ["Травка", "mpheist3_overlays", "mpHeist3_Tat_010_M", "mpHeist3_Tat_010_F", "ZONE_HEAD", 13100, 506], ["Поцелуй", "mpheist3_overlays", "mpHeist3_Tat_011_M", "mpHeist3_Tat_011_F", "ZONE_HEAD", 12500, 507], ["Лезвие на палочке", "mpheist3_overlays", "mpHeist3_Tat_012_M", "mpHeist3_Tat_012_F", "ZONE_HEAD", 13200, 508], ["Звезда LS", "mpheist3_overlays", "mpHeist3_Tat_013_M", "mpHeist3_Tat_013_F", "ZONE_HEAD", 13400, 509], ["Крылья LS", "mpheist3_overlays", "mpHeist3_Tat_014_M", "mpHeist3_Tat_014_F", "ZONE_HEAD", 13200, 510], ["Вкл/выкл", "mpheist3_overlays", "mpHeist3_Tat_015_M", "mpHeist3_Tat_015_F", "ZONE_HEAD", 14600, 511], ["Sleepy", "mpheist3_overlays", "mpHeist3_Tat_016_M", "mpHeist3_Tat_016_F", "ZONE_HEAD", 16200, 512], ["Космо-обезьяна", "mpheist3_overlays", "mpHeist3_Tat_017_M", "mpHeist3_Tat_017_F", "ZONE_HEAD", 15900, 513], ["Швы", "mpheist3_overlays", "mpHeist3_Tat_018_M", "mpHeist3_Tat_018_F", "ZONE_HEAD", 12900, 514], ["Мишка", "mpheist3_overlays", "mpHeist3_Tat_019_M", "mpHeist3_Tat_019_F", "ZONE_HEAD", 14600, 515], ["НЛО", "mpheist3_overlays", "mpHeist3_Tat_020_M", "mpHeist3_Tat_020_F", "ZONE_HEAD", 13300, 516], ["Wanted", "mpheist3_overlays", "mpHeist3_Tat_021_M", "mpHeist3_Tat_021_F", "ZONE_HEAD", 14300, 517], ["Меч Тога", "mpheist3_overlays", "mpHeist3_Tat_022_M", "mpHeist3_Tat_022_F", "ZONE_HEAD", 12500, 518], ["Грешник", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_011_M", "MP_Smuggler_Tattoo_011_F", "ZONE_HEAD", 13500, 519], ["Вор", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_012_M", "MP_Smuggler_Tattoo_012_F", "ZONE_HEAD", 14000, 520], ["Каскадерский череп", "mpstunt_overlays", "MP_MP_Stunt_Tat_000_M", "MP_MP_Stunt_Tat_000_F", "ZONE_HEAD", 12900, 521], ["Scorpion", "mpstunt_overlays", "MP_MP_Stunt_tat_004_M", "MP_MP_Stunt_tat_004_F", "ZONE_HEAD", 15900, 522], ["Toxic Spider", "mpstunt_overlays", "MP_MP_Stunt_tat_006_M", "MP_MP_Stunt_tat_006_F", "ZONE_HEAD", 13800, 523], ["Bat Wheel", "mpstunt_overlays", "MP_MP_Stunt_tat_017_M", "MP_MP_Stunt_tat_017_F", "ZONE_HEAD", 13500, 524], ["Flaming Quad", "mpstunt_overlays", "MP_MP_Stunt_tat_042_M", "MP_MP_Stunt_tat_042_F", "ZONE_HEAD", 14100, 525], ["Skull", "multiplayer_overlays", "FM_Tat_Award_M_000", "FM_Tat_Award_F_000", "ZONE_HEAD", 13900, 526], ["688", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_108_M", "mp_gta5rptattoo_tat_108_F", "ZONE_HEAD", 500, 688], ["689", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_109_M", "mp_gta5rptattoo_tat_109_F", "ZONE_HEAD", 500, 689], ["690", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_110_M", "mp_gta5rptattoo_tat_110_F", "ZONE_HEAD", 500, 690], ["691", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_111_M", "mp_gta5rptattoo_tat_111_F", "ZONE_HEAD", 500, 691], ["692", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_112_M", "mp_gta5rptattoo_tat_112_F", "ZONE_HEAD", 500, 692], ["693", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_113_M", "mp_gta5rptattoo_tat_113_F", "ZONE_HEAD", 500, 693], ["694", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_114_M", "mp_gta5rptattoo_tat_114_F", "ZONE_HEAD", 500, 694], ["695", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_115_M", "mp_gta5rptattoo_tat_115_F", "ZONE_HEAD", 500, 695], ["696", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_116_M", "mp_gta5rptattoo_tat_116_F", "ZONE_HEAD", 500, 696], ["697", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_117_M", "mp_gta5rptattoo_tat_117_F", "ZONE_HEAD", 500, 697], ["698", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_118_M", "mp_gta5rptattoo_tat_118_F", "ZONE_HEAD", 500, 698], ["699", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_119_M", "mp_gta5rptattoo_tat_119_F", "ZONE_HEAD", 500, 699], ["Узор Звезда", "mpbeach_overlays", "MP_Bea_M_Lleg_000", "", "ZONE_LEFT_LEG", 13900, 527], ["Единица", "mpbusiness_overlays", "", "MP_Buis_F_LLeg_000", "ZONE_LEFT_LEG", 14200, 528], ["Квадраты", "mphipster_overlays", "FM_Hip_M_Tat_009", "FM_Hip_F_Tat_009", "ZONE_LEFT_LEG", 13300, 529], ["Талисман", "mphipster_overlays", "FM_Hip_M_Tat_019", "FM_Hip_F_Tat_019", "ZONE_LEFT_LEG", 15800, 530], ["Черный якорь", "mphipster_overlays", "FM_Hip_M_Tat_040", "FM_Hip_F_Tat_040", "ZONE_LEFT_LEG", 16700, 531], ["Роза", "mpbiker_overlays", "MP_MP_Biker_Tat_002_M", "MP_MP_Biker_Tat_002_F", "ZONE_LEFT_LEG", 14200, 532], ["Байкер навсегда", "mpbiker_overlays", "MP_MP_Biker_Tat_015_M", "MP_MP_Biker_Tat_015_F", "ZONE_LEFT_LEG", 13300, 533], ["Bad Luck", "mpbiker_overlays", "MP_MP_Biker_Tat_027_M", "MP_MP_Biker_Tat_027_F", "ZONE_LEFT_LEG", 14600, 534], ["Пламенный череп", "mpbiker_overlays", "MP_MP_Biker_Tat_036_M", "MP_MP_Biker_Tat_036_F", "ZONE_LEFT_LEG", 13100, 535], ["Выжженная душа", "mpbiker_overlays", "MP_MP_Biker_Tat_037_M", "MP_MP_Biker_Tat_037_F", "ZONE_LEFT_LEG", 15500, 536], ["Ride Free", "mpbiker_overlays", "MP_MP_Biker_Tat_044_M", "MP_MP_Biker_Tat_044_F", "ZONE_LEFT_LEG", 16600, 537], ["Костяной байк", "mpbiker_overlays", "MP_MP_Biker_Tat_056_M", "MP_MP_Biker_Tat_056_F", "ZONE_LEFT_LEG", 17900, 538], ["Смеющийся череп", "mpbiker_overlays", "MP_MP_Biker_Tat_057_M", "MP_MP_Biker_Tat_057_F", "ZONE_LEFT_LEG", 13900, 539], ["Паук (контур)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_001", "MP_Xmas2_F_Tat_001", "ZONE_LEFT_LEG", 14500, 540], ["Паук (цвет)", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_002", "MP_Xmas2_F_Tat_002", "ZONE_LEFT_LEG", 14600, 541], ["Патриотический череп", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_005_M", "MP_Gunrunning_Tattoo_005_F", "ZONE_LEFT_LEG", 15400, 542], ["Стилизованный тигр", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_007_M", "MP_Gunrunning_Tattoo_007_F", "ZONE_LEFT_LEG", 16900, 543], ["Череп в огне", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_011_M", "MP_Gunrunning_Tattoo_011_F", "ZONE_LEFT_LEG", 15400, 544], ["Револьвер и розы", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_023_M", "MP_Gunrunning_Tattoo_023_F", "ZONE_LEFT_LEG", 16300, 545], ["Love Fist", "mpheist3_overlays", "mpHeist3_Tat_032_M", "mpHeist3_Tat_032_F", "ZONE_LEFT_LEG", 16600, 546], ["Змей из ЛС", "mplowrider_overlays", "MP_LR_Tat_007_M", "MP_LR_Tat_007_F", "ZONE_LEFT_LEG", 16800, 547], ["Президенты", "mplowrider_overlays", "MP_LR_Tat_020_M", "MP_LR_Tat_020_F", "ZONE_LEFT_LEG", 16600, 548], ["Любовь до гроба", "mplowrider2_overlays", "MP_LR_Tat_029_M", "MP_LR_Tat_029_F", "ZONE_LEFT_LEG", 20000, 549], ["Однорукий бандит", "mpvinewood_overlays", "MP_Vinewood_Tat_013_M", "MP_Vinewood_Tat_013_F", "ZONE_LEFT_LEG", 13200, 550], ["Бильярдная роза", "mpvinewood_overlays", "MP_Vinewood_Tat_027_M", "MP_Vinewood_Tat_027_F", "ZONE_LEFT_LEG", 16800, 551], ["Serpent of Death", "mpluxe_overlays", "MP_LUXE_TAT_000_M", "MP_LUXE_TAT_000_F", "ZONE_LEFT_LEG", 13600, 552], ["Cross of Roses", "mpluxe2_overlays", "MP_LUXE_TAT_011_M", "MP_LUXE_TAT_011_F", "ZONE_LEFT_LEG", 15500, 553], ["Dagger Devil", "mpstunt_overlays", "MP_MP_Stunt_tat_007_M", "MP_MP_Stunt_tat_007_F", "ZONE_LEFT_LEG", 13500, 554], ["Dirt Track Hero", "mpstunt_overlays", "MP_MP_Stunt_tat_013_M", "MP_MP_Stunt_tat_013_F", "ZONE_LEFT_LEG", 14300, 555], ["Golden Cobra", "mpstunt_overlays", "MP_MP_Stunt_tat_021_M", "MP_MP_Stunt_tat_021_F", "ZONE_LEFT_LEG", 14300, 556], ["Quad Goblin", "mpstunt_overlays", "MP_MP_Stunt_tat_028_M", "MP_MP_Stunt_tat_028_F", "ZONE_LEFT_LEG", 12400, 557], ["Stunt Jesus", "mpstunt_overlays", "MP_MP_Stunt_tat_031_M", "MP_MP_Stunt_tat_031_F", "ZONE_LEFT_LEG", 13500, 558], ["Dragon and Dagger", "multiplayer_overlays", "FM_Tat_Award_M_009", "FM_Tat_Award_F_009", "ZONE_LEFT_LEG", 13400, 559], ["Melting Skull", "multiplayer_overlays", "FM_Tat_M_002", "FM_Tat_F_002", "ZONE_LEFT_LEG", 13600, 560], ["Dragon Mural", "multiplayer_overlays", "FM_Tat_M_008", "FM_Tat_F_008", "ZONE_LEFT_LEG", 13000, 561], ["Hottie", "multiplayer_overlays", "FM_Tat_M_023", "FM_Tat_F_023", "ZONE_LEFT_LEG", 13500, 562], ["Smoking Dagger", "multiplayer_overlays", "FM_Tat_M_026", "FM_Tat_F_026", "ZONE_LEFT_LEG", 14500, 563], ["Faith", "multiplayer_overlays", "FM_Tat_M_032", "FM_Tat_F_032", "ZONE_LEFT_LEG", 16100, 564], ["Chinese Dragon", "multiplayer_overlays", "FM_Tat_M_033", "FM_Tat_F_033", "ZONE_LEFT_LEG", 13600, 565], ["Grim Reaper", "multiplayer_overlays", "FM_Tat_M_037", "FM_Tat_F_037", "ZONE_LEFT_LEG", 13160, 566], ["700", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_023_M", "mp_gta5rptattoo_tat_023_F", "ZONE_LEFT_LEG", 500, 700], ["710", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_137_M", "mp_gta5rptattoo_tat_137_F", "ZONE_LEFT_LEG", 500, 710], ["713", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_170_M", "mp_gta5rptattoo_tat_170_F", "ZONE_LEFT_LEG", 500, 713], ["714", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_171_M", "mp_gta5rptattoo_tat_171_F", "ZONE_LEFT_LEG", 500, 714], ["715", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_172_M", "mp_gta5rptattoo_tat_172_F", "ZONE_LEFT_LEG", 500, 715], ["716", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_173_M", "mp_gta5rptattoo_tat_173_F", "ZONE_LEFT_LEG", 500, 716], ["717", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_174_M", "mp_gta5rptattoo_tat_174_F", "ZONE_LEFT_LEG", 500, 717], ["718", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_175_M", "mp_gta5rptattoo_tat_175_F", "ZONE_LEFT_LEG", 500, 718], ["719", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_176_M", "mp_gta5rptattoo_tat_176_F", "ZONE_LEFT_LEG", 500, 719], ["720", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_177_M", "mp_gta5rptattoo_tat_177_F", "ZONE_LEFT_LEG", 500, 720], ["701", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_055_M", "", "ZONE_LEFT_LEG", 500, 701], ["702", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_056_M", "", "ZONE_LEFT_LEG", 500, 702], ["703", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_057_M", "", "ZONE_LEFT_LEG", 500, 703], ["704", "gta5rptattoo_overlays", "mp_gta5rptattoo_tat_058_M", "", "ZONE_LEFT_LEG", 500, 704], ["705", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_079_F", "ZONE_LEFT_LEG", 500, 705], ["706", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_080_F", "ZONE_LEFT_LEG", 500, 706], ["707", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_081_F", "ZONE_LEFT_LEG", 500, 707], ["708", "gta5rptattoo_overlays", "", "mp_gta5rptattoo_tat_082_F", "ZONE_LEFT_LEG", 500, 708]]
};
},{}],"EG54":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exitTattoo = void 0;
var _user = require("./user");
var _custom = require("./custom.event");
var _gui = require("./gui");
var _controls = require("./controls");
var _tattoos = require("../../shared/tattoos");
const player = mp.players.local;
let currentCamera;
let currentHeading;
let currentZone;
let myTattoos = [];
let mousePersControl;
_custom.CustomEvent.registerServer('tattooshop:open', (id, name, type, data, tattoos, h) => {
  currentHeading = h;
  myTattoos = tattoos;
  restoreTattoos();
  if (!mousePersControl) mousePersControl = (0, _controls.mouseMove)((right, down, leftKey, rightKey, posX) => {
    if (!leftKey) return;
    if (posX > 0.21 && posX < 0.81) {
      player.setHeading(player.getHeading() + right / 1.5);
    }
  }, 10);
  if (_gui.gui.currentGui === "tattooshop") return _custom.CustomEvent.triggerCef('cef:tattoo_shop:init', id, name, type, data, tattoos);
  _gui.gui.setGui("tattooshop");
  setTimeout(() => {
    if (!_gui.gui.currentGui) return;
    _custom.CustomEvent.triggerCef('cef:tattoo_shop:init', id, name, type, data, tattoos);
    if (!currentCamera) {
      const pos = player.getOffsetFromInWorldCoords(0, 2.5, 0);
      currentCamera = mp.cameras.new('tattooshop', pos, new mp.Vector3(0, 0, 0), 20);
      currentCamera.pointAtPedBone(player.handle, 31086, 0, 0, 0, false);
      currentCamera.setActive(true);
      mp.game.cam.renderScriptCams(true, false, 2000, false, false);
      cameraCategory(null);
    }
  }, 1000);
});
const cameraCategory = id => {
  if (!currentCamera || !mp.cameras.exists(currentCamera)) return;
  if (!id) id = "ZONE_TORSO";
  restoreTattoos();
  if (currentZone === id) return;
  const cfg = _tattoos.tattoosShared.getZoneData(id);
  if (!cfg) return;
  player.setHeading(currentHeading);
  const pos = player.getOffsetFromInWorldCoords(cfg.x, cfg.y, cfg.z);
  currentCamera.setCoord(pos.x, pos.y, pos.z);
  currentCamera.pointAtPedBone(player.handle, cfg.bone, 0, 0, 0, false);
};
mp.events.add('tattoo:category', id => {
  cameraCategory(id);
});
mp.events.add('tattoo:preview', datas => {
  let data = JSON.parse(datas);
  if (!data) return;
  restoreTattoos();
  player.setDecoration(mp.game.joaat(data.collection), mp.game.joaat(_user.user.isMale() ? data.overlay_male : data.overlay_female));
});
mp.events.add('tattoo:exit', () => {
  exitTattoo();
});
const clearTattoos = () => {
  player.clearDecorations();
};
const restoreTattoos = () => {
  clearTattoos();
  myTattoos.map(item => {
    player.setDecoration(mp.game.joaat(item[0]), mp.game.joaat(item[1]));
  });
};
const exitTattoo = () => {
  restoreTattoos();
  currentZone = null;
  _gui.gui.setGui(null);
  if (mousePersControl) {
    mousePersControl.destroy();
    mousePersControl = null;
  }
  _custom.CustomEvent.triggerServer('tattoo:exit');
  if (currentCamera) {
    currentCamera.destroy();
    currentCamera = null;
  }
  mp.game.cam.renderScriptCams(false, true, 500, true, true);
};
exports.exitTattoo = exitTattoo;
},{"./user":"ggMw","./custom.event":"py8h","./gui":"bk91","./controls":"yuOK","../../shared/tattoos":"l6KF"}],"FstL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeBarber = void 0;
var _custom = require("../custom.event");
var _gui = require("../gui");
var _system = require("../system");
var _controls = require("../controls");
var _user = require("../user");
let mouseMoveBlock;
const player = mp.players.local;
let camera;
mp.events.add('barbershop::subPageChanged', categoryId => {
  if (camera) {
    const camSettings = cameraSettingsByCategory[categoryId];
    const offset = camSettings.offset;
    const cameraPosition = player.getOffsetFromInWorldCoords(offset.x, offset.y, offset.z);
    camera.setCoord(cameraPosition.x, cameraPosition.y, cameraPosition.z);
    camera.pointAtPedBone(player.handle, camSettings.focusBone, 0, 0, 0, false);
    camera.setActive(true);
    mp.game.cam.renderScriptCams(true, false, 0, false, false);
  }
});
const cameraSettingsByCategory = [{
  offset: {
    x: 0.0,
    y: 1.9,
    z: 0.9
  },
  focusBone: 31086
}, {
  offset: {
    x: 0.0,
    y: 1.9,
    z: 0.9
  },
  focusBone: 31086
}, {
  offset: {
    x: 0.0,
    y: 1.9,
    z: 0.9
  },
  focusBone: 31086
}, {
  offset: {
    x: 0.0,
    y: 1.9,
    z: 0.9
  },
  focusBone: 31086
}, {
  offset: {
    x: 1.3,
    y: 0,
    z: -0.3
  },
  focusBone: 6286
}];
_custom.CustomEvent.registerServer('barber:load', async (data, pos, catalog, id, skinData) => {
  const {
    x,
    y,
    z,
    h
  } = pos;
  _gui.gui.setGui('barber');
  (0, _user.setAllLocalSkinData)(skinData);
  _custom.CustomEvent.triggerCef('barbershop:load', data, catalog, id);
  player.setCoords(x, y, z, true, true, true, true);
  player.setHeading(h);
  await _system.system.sleep(100);
  const offset = player.getOffsetFromInWorldCoords(0.0, 1.9, 0.9);
  if (!camera || !mp.cameras.exists(camera)) camera = mp.cameras.new('barber', offset, new mp.Vector3(0, 0, 0), 20), await _system.system.sleep(100);
  camera.setCoord(offset.x, offset.y, offset.z);
  camera.pointAtPedBone(player.handle, 31086, 0, 0, 0, false);
  camera.setActive(true);
  mp.game.cam.renderScriptCams(true, false, 0, false, false);
  if (!mouseMoveBlock) {
    mouseMoveBlock = (0, _controls.mouseMove)((right, down, leftKey, rightKey, posX, posY) => {
      if (posX > 0.21 && posX < 0.61) {
        if (right > 0.04 || right < -0.04) {
          player.setHeading(player.getHeading() + right * 2.5);
        }
      }
    }, 10);
  }
});
const closeBarber = () => {
  if (camera && mp.cameras.exists(camera)) camera.destroy();
  camera = null;
  mp.game.cam.renderScriptCams(false, true, 300, true, false);
  _custom.CustomEvent.triggerServer('barber:close');
  if (mouseMoveBlock) {
    mouseMoveBlock.destroy();
    mouseMoveBlock = null;
  }
};
exports.closeBarber = closeBarber;
},{"../custom.event":"py8h","../gui":"bk91","../system":"pi2J","../controls":"yuOK","../user":"ggMw"}],"p5oy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicleModsList = exports.lscXenonColorUpgrades = exports.lscTransmissionUpgrades = exports.lscTintUpgrades = exports.lscSuspensionUpgrades = exports.lscNumberUpgrades = exports.lscEngineUpgrades = exports.lscBrakeUpgrades = exports.handlingConfigs = exports.getProfitFromTuningCost = exports.convertModCostFromCarCost = exports.VEHICLE_LIVERY_COST = exports.VEHICLE_COLOR_COST = exports.MOD_SECTOR = exports.LSC_WHEEL_COLOR_MODS = exports.LSC_WHEELS = exports.LSC_VEHICLE_POS = exports.LSC_SECTION_TYPES = exports.LSC_PROFIT_PERCENT = exports.LSC_COLOR_MODS = exports.CHIP_TUNING_COST = void 0;
const LSC_VEHICLE_POS = exports.LSC_VEHICLE_POS = {
  x: -846.66,
  y: -279.26,
  z: -9.16,
  h: 0
};
const LSC_PROFIT_PERCENT = exports.LSC_PROFIT_PERCENT = 15;
const LSC_COLOR_MODS = exports.LSC_COLOR_MODS = [{
  name: "Нет доп. цвета",
  index: 0
}, {
  "name": "Металлик",
  "index": 2
}, {
  "name": "Матовый",
  "index": 12
}, {
  "name": "Блестящий матовый",
  "index": 85
}, {
  "name": "Асфальт",
  "index": 120
}, {
  "name": "Глянцевый",
  "index": 157
}, {
  "name": "Светло-глянцевый",
  "index": 158
}, {
  "name": "Ярко-глянцевый",
  "index": 159
}, {
  "name": "Светящий-глянцевый",
  "index": 160
}];
const LSC_WHEEL_COLOR_MODS = exports.LSC_WHEEL_COLOR_MODS = [{
  name: "Черный металлик",
  index: 0
}, {
  "name": "Чёрный графит",
  "index": 1
}, {
  "name": "Чёрная сталь",
  "index": 2
}, {
  "name": "Тёмное серебро",
  "index": 3
}, {
  "name": "Серебро",
  "index": 4
}, {
  "name": "Синие серебро",
  "index": 5
}, {
  "name": "Серая сталь",
  "index": 6
}, {
  "name": "Серебрянная тень",
  "index": 7
}, {
  "name": "Камменое серебро",
  "index": 8
}, {
  "name": "Полуночное серебро",
  "index": 9
}, {
  "name": "Оружейный Металл",
  "index": 10
}, {
  "name": "Серый Антрацит",
  "index": 11
}, {
  "name": "Матовый чёрный",
  "index": 12
}, {
  "name": "Матовый сервый",
  "index": 13
}, {
  "name": "Светло-серый",
  "index": 14
}, {
  "name": "Потёртый чёрный",
  "index": 21
}, {
  "name": "Потёртый графит",
  "index": 22
}, {
  "name": "Изношенный серебристо-серый",
  "index": 23
}, {
  "name": "Потрёпанное серебро",
  "index": 24
}, {
  "name": "Потрёпанное синее серебро",
  "index": 25
}, {
  "name": "Потрёпанное тёмное серебро",
  "index": 26
}, {
  "name": "Красный металлик",
  "index": 27
}, {
  "name": "Ярко-красный металлик",
  "index": 28
}, {
  "name": "Тёмно-красный металлик",
  "index": 29
}, {
  "name": "Красная пустыня",
  "index": 33
}, {
  "name": "Красный каберне",
  "index": 34
}, {
  "name": "Малиновый металлик",
  "index": 35
}, {
  "name": "Ораньжевый санрайз",
  "index": 36
}, {
  "name": "Классическое золото",
  "index": 37
}, {
  "name": "Ораньжевый",
  "index": 38
}, {
  "name": "Матовый красный",
  "index": 39
}, {
  "name": "Матовый тёмно-красный",
  "index": 40
}, {
  "name": "Матовый ораньжевый",
  "index": 41
}, {
  "name": "Матовый жёлтый",
  "index": 42
}, {
  "name": "Тёмно-зелёный металлик",
  "index": 49
}, {
  "name": "Гоночный зелёный",
  "index": 50
}, {
  "name": "Морской зелёный",
  "index": 51
}, {
  "name": "Оливково-зелёный",
  "index": 52
}, {
  "name": "Зелёный",
  "index": 53
}, {
  "name": "Сине-зелёный металлик",
  "index": 54
}, {
  "name": "Лаймовый",
  "index": 55
}, {
  "name": "Тёмно синий",
  "index": 64
}, {
  "name": "Синий",
  "index": 70
}, {
  "name": "Фиолетово-синий метлаик",
  "index": 71
}, {
  "name": "Фиолетовый",
  "index": 81
}, {
  "name": "Матовый тёмно-синий",
  "index": 82
}, {
  "name": "Матовый синий",
  "index": 83
}, {
  "name": "Полуночно-синий",
  "index": 84
}, {
  "name": "Жёлтое такси",
  "index": 88
}, {
  "name": "Гоночный жёлтый",
  "index": 89
}, {
  "name": "Металическая бронза",
  "index": 90
}, {
  "name": "Жёлтая птица",
  "index": 91
}, {
  "name": "Бежёвый Пуэбло",
  "index": 94
}, {
  "name": "Тёмная слоновая кость",
  "index": 95
}, {
  "name": "Металлический бук",
  "index": 102
}, {
  "name": "Тёмный бук",
  "index": 103
}, {
  "name": "Коричневый",
  "index": 104
}, {
  "name": "Пляжный песок",
  "index": 105
}, {
  "name": "Бежевый",
  "index": 107
}, {
  "name": "Белый металлик",
  "index": 111
}, {
  "name": "Холодный белый",
  "index": 112
}, {
  "name": "Медово бежевый",
  "index": 113
}, {
  "name": "Светло-оранжевый",
  "index": 124
}, {
  "name": "Бирюзовый",
  "index": 127
}, {
  "name": "Зелёный матовый",
  "index": 128
}, {
  "name": "Коричневый матовый",
  "index": 129
}, {
  "name": "Розовый",
  "index": 135
}, {
  "name": "Фиолетовый металлик",
  "index": 145
}, {
  "name": "Чистое золото",
  "index": 160
}];
const LSC_SECTION_TYPES = exports.LSC_SECTION_TYPES = [{
  id: 1,
  name: 'Внешний тюнинг',
  imgName: 'tuning-tab-1'
}, {
  id: 2,
  name: 'Внутренний тюнинг',
  imgName: 'tuning-tab-2'
}, {
  id: 3,
  name: 'Освещение',
  imgName: 'tuning-tab-3'
}];
const LSC_WHEELS = exports.LSC_WHEELS = [{
  name: 'Sport Wheels',
  type: 0,
  percent: 0.06,
  elements: [['Stock', -1], ['Inferno', 0], ['Deepfive', 1], ['Lozspeed', 2], ['Diamondcut', 3], ['Chrono', 4], ['Feroccirr', 5], ['Fiftynine', 6], ['Mercie', 7], ['Syntheticz', 8], ['Organictyped', 9], ['Endov1', 10], ['Duper7', 11], ['Uzer', 12], ['Groundride', 13], ['Spacer', 14], ['Venum', 15], ['Cosmo', 16], ['Dashvip', 17], ['Icekid', 18], ['Ruffeld', 19], ['Wangenmaster', 20], ['Superfive', 21], ['Endov2', 22], ['Slitsix', 23]]
}, {
  name: 'Muscle Wheels',
  type: 1,
  percent: 0.06,
  elements: [['Stock', -1], ['Classicfive', 0], ['Dukes', 1], ['Musclefreak', 2], ['Kracka', 3], ['Azrea', 4], ['Mecha', 5], ['Blacktop', 6], ['Dragspl', 7], ['Revolver', 8], ['Classicrod', 9], ['Spooner', 10], ['Fivestar', 11], ['Oldschool', 12], ['Eljefe', 13], ['Dodman', 14], ['Sixgun', 15], ['Mercenary', 16]]
}, {
  name: 'Lowrider Wheels',
  type: 2,
  percent: 0.06,
  elements: [['Stock', -1], ['Flare', 0], ['Wired', 1], ['Triplegolds', 2], ['Bigworm', 3], ['Sevenfives', 4], ['Splitsix', 5], ['Freshmesh', 6], ['Leadsled', 7], ['Turbine', 8], ['Superfin', 9], ['Classicrod', 10], ['Dollar', 11], ['Dukes', 12], ['Lowfive', 13], ['Gooch', 14]]
}, {
  name: 'SUV Wheels',
  type: 3,
  percent: 0.06,
  elements: [['Stock', -1], ['Vip', 0], ['Benefactor', 1], ['Cosmo', 2], ['Bippu', 3], ['Royalsix', 4], ['Fagorme', 5], ['Deluxe', 6], ['Icedout', 7], ['Cognscenti', 8], ['Lozspeedten', 9], ['Supernova', 10], ['Obeyrs', 11], ['Lozspeedballer', 12], ['Extra vaganzo', 13], ['Splitsix', 14], ['Empowered', 15], ['Sunrise', 16], ['Dashvip', 17], ['Cutter', 18]]
}, {
  name: 'Offroad Wheels',
  type: 4,
  percent: 0.06,
  elements: [['Stock', -1], ['Raider', 0], ['Nevis', 2], ['Cairngorm', 3], ['Amazon', 4], ['Challenger', 5], ['Dunebasher', 6], ['Fivestar', 7], ['Rockcrawler', 8], ['Milspecsteelie', 9]]
}, {
  name: 'Tuner Wheels',
  type: 5,
  percent: 0.06,
  elements: [['Stock', -1], ['Cosmo', 0], ['Supermesh', 1], ['Outsider', 2], ['Rollas', 3], ['Driffmeister', 4], ['Slicer', 5], ['Elquatro', 6], ['Dubbed', 7], ['Fivestar', 8], ['Slideways', 9], ['Apex', 10], ['Stancedeg', 11], ['Countersteer', 12], ['Endov1', 13], ['Endov2dish', 14], ['Guppez', 15], ['Chokadori', 16], ['Chicane', 17], ['Saisoku', 18], ['Dishedeight', 19], ['Fujiwara', 20], ['Zokusha', 21], ['Battlevill', 22], ['Rallymaster', 23]]
}, {
  name: 'Highend Wheels',
  type: 7,
  percent: 0.06,
  elements: [['Stock', -1], ['Shadow', 0], ['Hyper', 1], ['Blade', 2], ['Diamond', 3], ['Supagee', 4], ['Chromaticz', 5], ['Merciechlip', 6], ['Obeyrs', 7], ['Gtchrome', 8], ['Cheetahr', 9], ['Solar', 10], ['Splitten', 11], ['Dashvip', 12], ['Lozspeedten', 13], ['Carboninferno', 14], ['Carbonshadow', 15], ['Carbonz', 16], ['Carbonsolar', 17], ['Carboncheetahr', 18], ['Carbonsracer', 19]]
}];
var MOD_SECTOR;
(function (MOD_SECTOR) {
  MOD_SECTOR[MOD_SECTOR["VISUAL"] = 1] = "VISUAL";
  MOD_SECTOR[MOD_SECTOR["PERMORMANCE"] = 2] = "PERMORMANCE";
  MOD_SECTOR[MOD_SECTOR["LIGHT"] = 3] = "LIGHT";
})(MOD_SECTOR || (exports.MOD_SECTOR = MOD_SECTOR = {}));
const VEHICLE_COLOR_COST = exports.VEHICLE_COLOR_COST = 2000;
const VEHICLE_LIVERY_COST = exports.VEHICLE_LIVERY_COST = 15000;
const vehicleModsList = exports.vehicleModsList = [{
  level: 0,
  percent: 0.07,
  id: 1000,
  name: "Основной цвет",
  sector: MOD_SECTOR.VISUAL,
  isColor: true,
  isColorMod: true,
  cost: 15000
}, {
  level: 0,
  percent: 0.05,
  id: 1001,
  name: "Дополнительный цвет",
  sector: MOD_SECTOR.VISUAL,
  isColor: true,
  isColorMod: true,
  cost: 13000
}, {
  level: 0,
  percent: 0.05,
  id: 0,
  name: "Спойлер",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 18000
}, {
  level: 0,
  percent: 0.05,
  id: 1,
  name: "Передний бампер",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 22000
}, {
  level: 0,
  percent: 0.05,
  id: 2,
  name: "Задний бампер",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 22000
}, {
  level: 0,
  percent: 0.05,
  id: 3,
  name: "Юбки",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 22000
}, {
  level: 0,
  percent: 0.05,
  id: 4,
  name: "Глушитель",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 15000
}, {
  level: 0,
  percent: 0.05,
  id: 5,
  name: "Рама каркаса",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 30000
}, {
  level: 0,
  percent: 0.05,
  id: 6,
  name: "Решетка",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 12000
}, {
  level: 0,
  percent: 0.06,
  id: 7,
  name: "Капот",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 30000
}, {
  level: 0,
  percent: 0.05,
  id: 8,
  name: "Крыло",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 30000
}, {
  level: 0,
  percent: 0.05,
  id: 9,
  name: "Правое крыло",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 30000
}, {
  level: 0,
  percent: 0.05,
  id: 10,
  name: "Крыша",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 40000
}, {
  level: 0,
  percent: 0.02,
  id: 11,
  name: "Двигатель",
  sector: MOD_SECTOR.PERMORMANCE,
  default: -1,
  cost: 70000
}, {
  level: 0,
  percent: 0.02,
  id: 12,
  name: "Тормоза",
  sector: MOD_SECTOR.PERMORMANCE,
  default: -1,
  cost: 50000
}, {
  level: 0,
  percent: 0.02,
  id: 13,
  name: "Трансмиссия",
  sector: MOD_SECTOR.PERMORMANCE,
  default: -1,
  cost: 60000
}, {
  level: 0,
  percent: 0.01,
  id: 14,
  name: "Гудок",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 15000
}, {
  level: 0,
  percent: 0.02,
  id: 15,
  name: "Подвеска",
  sector: MOD_SECTOR.PERMORMANCE,
  default: -1,
  cost: 55000
}, {
  level: 0,
  percent: 0.11,
  id: 18,
  name: "Турбо",
  sector: MOD_SECTOR.PERMORMANCE,
  default: -1,
  cost: 100000
}, {
  level: 0,
  percent: 0.04,
  id: 27,
  name: "Отделка салона",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 10000
}, {
  level: 0,
  percent: 0.04,
  id: 28,
  name: "Украшения",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 5000
}, {
  level: 0,
  percent: 0.04,
  id: 29,
  name: "Интерьер салона",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 10000
}, {
  level: 0,
  percent: 0.03,
  id: 30,
  name: "Дизайн циферблата",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 5000
}, {
  level: 0,
  percent: 0.03,
  id: 31,
  name: "Внутренняя обшивка двери",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 2000
}, {
  level: 0,
  percent: 0.03,
  id: 32,
  name: "Сиденья",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 5000
}, {
  level: 0,
  percent: 0.03,
  id: 33,
  name: "Руль",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 1000
}, {
  level: 0,
  percent: 0.03,
  id: 34,
  name: "Рычаг КП",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 1000
}, {
  level: 0,
  percent: 0.03,
  id: 35,
  name: "Бляшки",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 1000
}, {
  level: 0,
  percent: 0.2,
  id: 38,
  name: "Гидравлика",
  sector: MOD_SECTOR.PERMORMANCE,
  default: -1,
  cost: 80000
}, {
  level: 0,
  percent: 0.1,
  id: 39,
  name: "Вид двигателя",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 70000
}, {
  level: 0,
  percent: 0.07,
  id: 40,
  name: "Воздушный фильтр",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 12000
}, {
  level: 0,
  percent: 0.07,
  id: 41,
  name: "Стойки",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 5000
}, {
  level: 0,
  percent: 0.05,
  id: 42,
  name: "Передние фары",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 5000
}, {
  level: 0,
  percent: 0.02,
  id: 43,
  name: "Замок капота",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 1000
}, {
  level: 0,
  percent: 0.15,
  id: 55,
  name: "Тонировка",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 30000
}, {
  level: 0,
  percent: 0.17,
  id: 48,
  name: "Винил",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 20000
}, {
  level: 0,
  percent: 0.03,
  id: 46,
  name: "Отделка окна",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 1000
}, {
  level: 0,
  percent: 0.03,
  id: 4000,
  name: "Неон слева",
  sector: MOD_SECTOR.LIGHT,
  target: "car",
  default: -1,
  cost: 15000
}, {
  level: 0,
  percent: 0.03,
  id: 4001,
  name: "Неон справа",
  sector: MOD_SECTOR.LIGHT,
  target: "car",
  default: -1,
  cost: 15000
}, {
  level: 0,
  percent: 0.03,
  id: 4002,
  name: "Неон спереди",
  sector: MOD_SECTOR.LIGHT,
  target: "car",
  default: -1,
  cost: 15000
}, {
  level: 0,
  percent: 0.03,
  id: 4003,
  name: "Неон сзади",
  sector: MOD_SECTOR.LIGHT,
  target: "car",
  default: -1,
  cost: 15000
}, {
  level: 0,
  percent: 0.03,
  id: 4004,
  name: "Цвет неона",
  sector: MOD_SECTOR.LIGHT,
  isColor: true,
  target: "car",
  cost: 25000
}, {
  level: 0,
  percent: 0.04,
  id: 1005,
  name: "Материал основного цвета",
  sector: MOD_SECTOR.VISUAL,
  default: 0,
  cost: 5000
}, {
  level: 0,
  percent: 0.03,
  id: 1006,
  name: "Материал дополнительного цвета",
  sector: MOD_SECTOR.VISUAL,
  default: 0,
  cost: 5000
}, {
  level: 0,
  percent: 0.05,
  id: 25,
  name: "Номерная рамка",
  sector: MOD_SECTOR.VISUAL,
  default: 0,
  cost: 12000
}, {
  level: 0,
  percent: 0.05,
  id: 1007,
  name: "Стиль номерной рамки",
  sector: MOD_SECTOR.VISUAL,
  target: "car",
  default: 0,
  cost: 12000
}, {
  level: 0,
  percent: 0.02,
  id: 22,
  name: "Ксенон",
  sector: MOD_SECTOR.LIGHT,
  target: "car",
  default: -1,
  cost: 25000
}, {
  level: 0,
  percent: 0.01,
  id: 1008,
  name: "Цвет ксенона",
  sector: MOD_SECTOR.LIGHT,
  target: "car",
  cost: 30000
}, {
  level: 0,
  percent: 0.05,
  id: 2999,
  name: "Тип колёс",
  sector: MOD_SECTOR.VISUAL,
  target: "car",
  cost: 20000
}, {
  level: 0,
  percent: 0.03,
  id: 62,
  name: "Колёса",
  sector: MOD_SECTOR.VISUAL,
  target: "car",
  cost: 20000
}, {
  level: 0,
  percent: 0.01,
  id: 3000,
  name: "Цвет колёс",
  sector: MOD_SECTOR.VISUAL,
  target: "car",
  cost: 12000
}, {
  level: 0,
  percent: 0.02,
  id: 3001,
  name: "Дым от колёс",
  sector: MOD_SECTOR.VISUAL,
  default: -1,
  cost: 35000
}, {
  level: 0,
  percent: 0.02,
  id: 3002,
  name: "Цвет дыма от колёс",
  sector: MOD_SECTOR.VISUAL,
  isColor: true,
  cost: 40000
}, {
  level: 0,
  percent: 0.25,
  id: 3004,
  name: "Дрифт мод",
  sector: MOD_SECTOR.PERMORMANCE,
  target: "car",
  default: -1,
  cost: 150000
}];
const lscTintUpgrades = exports.lscTintUpgrades = [{
  name: 'Pure Black',
  value: 0,
  percent: 0.02
}, {
  name: 'Darksmoke',
  value: 1,
  percent: 0.08
}, {
  name: 'Lightsmoke',
  value: 2,
  percent: 0.03
}, {
  name: 'Limo',
  value: 3,
  percent: 0.025
}, {
  name: 'Green',
  value: 4,
  percent: 0.025
}];
const lscSuspensionUpgrades = exports.lscSuspensionUpgrades = [{
  name: 'Standard Suspension',
  value: -1,
  percent: 0.02
}, {
  name: 'Lowered Suspension',
  value: 0,
  percent: 0.03
}, {
  name: 'Street Suspension',
  value: 1,
  percent: 0.04
}, {
  name: 'Sport Suspension',
  value: 2,
  percent: 0.05
}, {
  name: 'Race Suspension',
  value: 3,
  percent: 0.06
}];
const lscTransmissionUpgrades = exports.lscTransmissionUpgrades = [{
  name: 'Standard Transmission',
  value: -1,
  percent: 0.02
}, {
  name: 'Street Transmission',
  value: 0,
  percent: 0.03
}, {
  name: 'Sport Transmission',
  value: 1,
  percent: 0.04
}, {
  name: 'Race Transmission',
  value: 2,
  percent: 0.05
}];
const lscBrakeUpgrades = exports.lscBrakeUpgrades = [{
  name: 'Standard Brakes',
  value: -1,
  percent: 0.02
}, {
  name: 'Street Brakes',
  value: 0,
  percent: 0.03
}, {
  name: 'Sport Brakes',
  value: 1,
  percent: 0.04
}, {
  name: 'Race Brakes',
  value: 2,
  percent: 0.05
}];
const lscNumberUpgrades = exports.lscNumberUpgrades = [{
  name: 'Рамка 1',
  value: 0,
  percent: 0.02
}, {
  name: 'Рамка 2',
  value: 1,
  percent: 0.02
}, {
  name: 'Рамка 3',
  value: 2,
  percent: 0.02
}, {
  name: 'Рамка 4',
  value: 3,
  percent: 0.02
}, {
  name: 'Рамка 5',
  value: 4,
  percent: 0.02
}, {
  name: 'Рамка 6',
  value: 5,
  percent: 0.02
}];
const lscEngineUpgrades = exports.lscEngineUpgrades = [{
  name: 'Standard Engine',
  value: -1,
  percent: 0.02
}, {
  name: 'EMS-Improvement 1',
  value: 0,
  percent: 0.04
}, {
  name: 'EMS-Improvement 2',
  value: 1,
  percent: 0.06
}, {
  name: 'EMS-Improvement 3',
  value: 2,
  percent: 0.08
}, {
  name: 'EMS-Improvement 4',
  value: 3,
  percent: 0.1
}];
const lscXenonColorUpgrades = exports.lscXenonColorUpgrades = [{
  name: 'Stock',
  value: 255,
  percent: 0.02
}, {
  name: 'White',
  value: 0,
  percent: 0.02
}, {
  name: 'Blue',
  value: 1,
  percent: 0.02
}, {
  name: 'Electric Blue',
  value: 2,
  percent: 0.02
}, {
  name: 'Mint Green',
  value: 3,
  percent: 0.02
}, {
  name: 'Lime Green',
  value: 4,
  percent: 0.02
}, {
  name: 'Yellow',
  value: 5,
  percent: 0.02
}, {
  name: 'Golden Shower',
  value: 6,
  percent: 0.02
}, {
  name: 'Orange',
  value: 7,
  percent: 0.02
}, {
  name: 'Red',
  value: 8,
  percent: 0.02
}, {
  name: 'Pony Pink',
  value: 9,
  percent: 0.02
}, {
  name: 'Hot Pink',
  value: 10,
  percent: 0.02
}, {
  name: 'Purple',
  value: 11,
  percent: 0.02
}, {
  name: 'Blacklight',
  value: 12,
  percent: 0.02
}];
const getProfitFromTuningCost = totalTuningCost => totalTuningCost * LSC_PROFIT_PERCENT / 100;
exports.getProfitFromTuningCost = getProfitFromTuningCost;
const convertModCostFromCarCost = (percent, carCost) => Math.floor(percent * carCost);
exports.convertModCostFromCarCost = convertModCostFromCarCost;
const vehicleBones = ['chassis', 'chassis_lowlod', 'chassis_dummy', 'seat_dside_f', 'seat_dside_r', 'seat_dside_r1', 'seat_dside_r2', 'seat_dside_r3', 'seat_dside_r4', 'seat_dside_r5', 'seat_dside_r6', 'seat_dside_r7', 'seat_pside_f', 'seat_pside_r', 'seat_pside_r1', 'seat_pside_r2', 'seat_pside_r3', 'seat_pside_r4', 'seat_pside_r5', 'seat_pside_r6', 'seat_pside_r7', 'window_lf1', 'window_lf2', 'window_lf3', 'window_rf1', 'window_rf2', 'window_rf3', 'window_lr1', 'window_lr2', 'window_lr3', 'window_rr1', 'window_rr2', 'window_rr3', 'door_dside_f', 'door_dside_r', 'door_pside_f', 'door_pside_r', 'handle_dside_f', 'handle_dside_r', 'handle_pside_f', 'handle_pside_r', 'wheel_lf', 'wheel_rf', 'wheel_lm1', 'wheel_rm1', 'wheel_lm2', 'wheel_rm2', 'wheel_lm3', 'wheel_rm3', 'wheel_lr', 'wheel_rr', 'suspension_lf', 'suspension_rf', 'suspension_lm', 'suspension_rm', 'suspension_lr', 'suspension_rr', 'spring_rf', 'spring_lf', 'spring_rr', 'spring_lr', 'transmission_f', 'transmission_m', 'transmission_r', 'hub_lf', 'hub_rf', 'hub_lm1', 'hub_rm1', 'hub_lm2', 'hub_rm2', 'hub_lm3', 'hub_rm3', 'hub_lr', 'hub_rr', 'windscreen', 'windscreen_r', 'window_lf', 'window_rf', 'window_lr', 'window_rr', 'window_lm', 'window_rm', 'bodyshell', 'bumper_f', 'bumper_r', 'wing_rf', 'wing_lf', 'bonnet', 'boot', 'exhaust', 'exhaust_2', 'exhaust_3', 'exhaust_4', 'exhaust_5', 'exhaust_6', 'exhaust_7', 'exhaust_8', 'exhaust_9', 'exhaust_10', 'exhaust_11', 'exhaust_12', 'exhaust_13', 'exhaust_14', 'exhaust_15', 'exhaust_16', 'engine', 'overheat', 'overheat_2', 'petrolcap', 'petroltank', 'petroltank_l', 'petroltank_r', 'steering', 'hbgrip_l', 'hbgrip_r', 'headlight_l', 'headlight_r', 'taillight_l', 'taillight_r', 'indicator_lf', 'indicator_rf', 'indicator_lr', 'indicator_rr', 'brakelight_l', 'brakelight_r', 'brakelight_m', 'reversinglight_l', 'reversinglight_r', 'extralight_1', 'extralight_2', 'extralight_3', 'extralight_4', 'numberplate', 'interiorlight', 'siren1', 'siren2', 'siren3', 'siren4', 'siren5', 'siren6', 'siren7', 'siren8', 'siren9', 'siren10', 'siren11', 'siren12', 'siren13', 'siren14', 'siren15', 'siren16', 'siren17', 'siren18', 'siren19', 'siren20', 'siren_glass1', 'siren_glass2', 'siren_glass3', 'siren_glass4', 'siren_glass5', 'siren_glass6', 'siren_glass7', 'siren_glass8', 'siren_glass9', 'siren_glass10', 'siren_glass11', 'siren_glass12', 'siren_glass13', 'siren_glass14', 'siren_glass15', 'siren_glass16', 'siren_glass17', 'siren_glass18', 'siren_glass19', 'siren_glass20', 'spoiler', 'struts', 'misc_a', 'misc_b', 'misc_c', 'misc_d', 'misc_e', 'misc_f', 'misc_g', 'misc_h', 'misc_i', 'misc_j', 'misc_k', 'misc_l', 'misc_m', 'misc_n', 'misc_o', 'misc_p', 'misc_q', 'misc_r', 'misc_s', 'misc_t', 'misc_u', 'misc_v', 'misc_w', 'misc_x', 'misc_y', 'misc_z', 'misc_1', 'misc_2', 'weapon_1a', 'weapon_1b', 'weapon_1c', 'weapon_1d', 'weapon_1a_rot', 'weapon_1b_rot', 'weapon_1c_rot', 'weapon_1d_rot', 'weapon_2a', 'weapon_2b', 'weapon_2c', 'weapon_2d', 'weapon_2a_rot', 'weapon_2b_rot', 'weapon_2c_rot', 'weapon_2d_rot', 'weapon_3a', 'weapon_3b', 'weapon_3c', 'weapon_3d', 'weapon_3a_rot', 'weapon_3b_rot', 'weapon_3c_rot', 'weapon_3d_rot', 'weapon_4a', 'weapon_4b', 'weapon_4c', 'weapon_4d', 'weapon_4a_rot', 'weapon_4b_rot', 'weapon_4c_rot', 'weapon_4d_rot', 'turret_1base', 'turret_1barrel', 'turret_2base', 'turret_2barrel', 'turret_3base', 'turret_3barrel', 'ammobelt', 'searchlight_base', 'searchlight_light', 'attach_female', 'roof', 'roof2', 'soft_1', 'soft_2', 'soft_3', 'soft_4', 'soft_5', 'soft_6', 'soft_7', 'soft_8', 'soft_9', 'soft_10', 'soft_11', 'soft_12', 'soft_13', 'forks', 'mast', 'carriage', 'fork_l', 'fork_r', 'forks_attach', 'frame_1', 'frame_2', 'frame_3', 'frame_pickup_1', 'frame_pickup_2', 'frame_pickup_3', 'frame_pickup_4', 'freight_cont', 'freight_bogey', 'freightgrain_slidedoor', 'door_hatch_r', 'door_hatch_l', 'tow_arm', 'tow_mount_a', 'tow_mount_b', 'tipper', 'combine_reel', 'combine_auger', 'slipstream_l', 'slipstream_r', 'arm_1', 'arm_2', 'arm_3', 'arm_4', 'scoop', 'boom', 'stick', 'bucket', 'shovel_2', 'shovel_3', 'Lookat_UpprPiston_head', 'Lookat_LowrPiston_boom', 'Boom_Driver', 'cutter_driver', 'vehicle_blocker', 'extra_1', 'extra_2', 'extra_3', 'extra_4', 'extra_5', 'extra_6', 'extra_7', 'extra_8', 'extra_9', 'extra_ten', 'extra_11', 'extra_12', 'break_extra_1', 'break_extra_2', 'break_extra_3', 'break_extra_4', 'break_extra_5', 'break_extra_6', 'break_extra_7', 'break_extra_8', 'break_extra_9', 'break_extra_10', 'mod_col_1', 'mod_col_2', 'mod_col_3', 'mod_col_4', 'mod_col_5', 'handlebars', 'forks_u', 'forks_l', 'wheel_f', 'swingarm', 'wheel_r', 'crank', 'pedal_r', 'pedal_l', 'static_prop', 'moving_prop', 'static_prop2', 'moving_prop2', 'rudder', 'rudder2', 'wheel_rf1_dummy', 'wheel_rf2_dummy', 'wheel_rf3_dummy', 'wheel_rb1_dummy', 'wheel_rb2_dummy', 'wheel_rb3_dummy', 'wheel_lf1_dummy', 'wheel_lf2_dummy', 'wheel_lf3_dummy', 'wheel_lb1_dummy', 'wheel_lb2_dummy', 'wheel_lb3_dummy', 'bogie_front', 'bogie_rear', 'rotor_main', 'rotor_rear', 'rotor_main_2', 'rotor_rear_2', 'elevators', 'tail', 'outriggers_l', 'outriggers_r', 'rope_attach_a', 'rope_attach_b', 'prop_1', 'prop_2', 'elevator_l', 'elevator_r', 'rudder_l', 'rudder_r', 'prop_3', 'prop_4', 'prop_5', 'prop_6', 'prop_7', 'prop_8', 'rudder_2', 'aileron_l', 'aileron_r', 'airbrake_l', 'airbrake_r', 'wing_l', 'wing_r', 'wing_lr', 'wing_rr', 'engine_l', 'engine_r', 'nozzles_f', 'nozzles_r', 'afterburner', 'wingtip_1', 'wingtip_2', 'gear_door_fl', 'gear_door_fr', 'gear_door_rl1', 'gear_door_rr1', 'gear_door_rl2', 'gear_door_rr2', 'gear_door_rml', 'gear_door_rmr', 'gear_f', 'gear_rl', 'gear_lm1', 'gear_rr', 'gear_rm1', 'gear_rm', 'prop_left', 'prop_right', 'legs', 'attach_male', 'draft_animal_attach_lr', 'draft_animal_attach_rr', 'draft_animal_attach_lm', 'draft_animal_attach_rm', 'draft_animal_attach_lf', 'draft_animal_attach_rf', 'wheelcover_l', 'wheelcover_r', 'barracks', 'pontoon_l', 'pontoon_r', 'no_ped_col_step_l', 'no_ped_col_strut_1_l', 'no_ped_col_strut_2_l', 'no_ped_col_step_r', 'no_ped_col_strut_1_r', 'no_ped_col_strut_2_r', 'light_cover', 'emissives', 'neon_l', 'neon_r', 'neon_f', 'neon_b', 'dashglow', 'doorlight_lf', 'doorlight_rf', 'doorlight_lr', 'doorlight_rr', 'unknown_id', 'dials', 'engineblock', 'bobble_head', 'bobble_base', 'bobble_hand', 'chassis_Control'];
const handlingConfigs = exports.handlingConfigs = [{
  id: 0,
  name: 'Привод',
  handlingName: 'fDriveBiasFront',
  minValue: 0,
  maxValue: 1,
  step: 0.5
}, {
  id: 1,
  name: 'Кол-во передач',
  handlingName: 'nInitialDriveGears',
  minValue: 3,
  maxValue: 7,
  step: 1
}, {
  id: 2,
  name: 'Тяги двигателя',
  handlingName: 'fInitialDriveForce',
  minValue: 0.1,
  maxValue: 2,
  step: 0.05
}, {
  id: 3,
  name: 'Инерция двигателя',
  handlingName: 'fDriveInertia',
  minValue: 0.1,
  maxValue: 1.5,
  step: 0.05
}, {
  id: 4,
  name: 'Множитель смещения (вверх)',
  handlingName: 'fClutchChangeRateScaleUpShift',
  minValue: 1,
  maxValue: 2,
  step: 0.1
}, {
  id: 5,
  name: 'Множитель смещения (вниз)',
  handlingName: 'fClutchChangeRateScaleDownShift',
  minValue: 1,
  maxValue: 2,
  step: 0.1
}, {
  id: 6,
  name: 'Сила торможения',
  handlingName: 'fBrakeForce',
  minValue: 0.2,
  maxValue: 2,
  step: 0.05
}, {
  id: 7,
  name: 'Распределение торможения',
  handlingName: 'fBrakeBiasFront',
  minValue: 0.4,
  maxValue: 0.7,
  step: 0.05
}, {
  id: 8,
  name: 'Мощность ручного тормоза',
  handlingName: 'fHandBrakeForce',
  minValue: 0,
  maxValue: 2,
  step: 0.1
}, {
  id: 9,
  name: 'Выворот колес',
  handlingName: 'fSteeringLock',
  minValue: 0,
  maxValue: 1.5,
  step: 0.05
}, {
  id: 10,
  name: 'Сцепление колес',
  handlingName: 'fTractionCurveMax',
  minValue: 0,
  maxValue: 4,
  step: 0.5
}, {
  id: 11,
  name: 'Пробуксовка колес',
  handlingName: 'fTractionCurveMin',
  minValue: 1,
  maxValue: 3,
  step: 0.1
}, {
  id: 12,
  name: 'Боковая сила сцепления',
  handlingName: 'fTractionCurveLateral',
  minValue: 20,
  maxValue: 35,
  step: 0.5
}, {
  id: 13,
  name: 'Сила сцепления при низкой скорости',
  handlingName: 'fLowSpeedTractionLossMult',
  minValue: 0.1,
  maxValue: 1.5,
  step: 0.1
}, {
  id: 14,
  name: 'Распределение сцепления между осями',
  handlingName: 'fTractionBiasFront',
  minValue: 0.4,
  maxValue: 0.6,
  step: 0.05
}, {
  id: 15,
  name: 'Сила подвески',
  handlingName: 'fSuspensionForce',
  minValue: 1,
  maxValue: 4,
  step: 0.5
}, {
  id: 16,
  name: 'Сила вибрации подвески',
  handlingName: 'fSuspensionCompDamp',
  minValue: 0.6,
  maxValue: 2,
  step: 0.05
}, {
  id: 17,
  name: 'Интенсивность вибрации подвески на высоких скоростях',
  handlingName: 'fSuspensionReboundDamp',
  minValue: 0.4,
  maxValue: 3.5,
  step: 0.1
}, {
  id: 20,
  name: 'Высота подвески',
  handlingName: 'fSuspensionRaise',
  minValue: -0.015,
  maxValue: 0.04,
  step: 0.005
}, {
  id: 21,
  name: 'Высота центра крена (перед)',
  handlingName: 'fRollCentreHeightFront',
  minValue: 0,
  maxValue: 0.7,
  step: 0.1
}, {
  id: 22,
  name: 'Высота центра крена (зад)',
  handlingName: 'fRollCentreHeightRear',
  minValue: 0,
  maxValue: 0.6,
  step: 0.1
}];
const CHIP_TUNING_COST = exports.CHIP_TUNING_COST = 200000;
},{}],"ogyk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.is_drift_model = exports.DRIFT_PARAMS = exports.DRIFT_MAP_EXIT = exports.DRIFT_MAP_ENTER = exports.DRIFT_DEFAULT_PARAMS = void 0;
const DRIFT_MAP_ENTER = exports.DRIFT_MAP_ENTER = {
  x: 4938.75,
  y: 1058.25,
  z: 457.07,
  h: 256
};
const DRIFT_MAP_EXIT = exports.DRIFT_MAP_EXIT = {
  x: -250.76,
  y: -2102.61,
  z: 26.72,
  h: 327
};
const DRIFT_DEFAULT_PARAMS = exports.DRIFT_DEFAULT_PARAMS = {
  speed: 5.0,
  angle: 5.0
};
const DRIFT_PARAMS = exports.DRIFT_PARAMS = ["elegy", "coquette3", "brioso", "gtr34", "sultanrs", "sentinel", "gauntlet", "gauntlet2", "gauntlet4", "sabregt", "sabregt2", "stalion", "stalion2", "tampa", "tampa2", "vaz2121", "cheburek", "m4f82", "w140", "nisgtr", "drafter", "comet2", "comet3", "comet5", "flashgt", "feltzer2", "futo", "jester3", "omnis", "priora", "a80", "2170", "chaser", "m5e39", "gls21", "cayen20", "audir8", "m4gts", "a80", "skyline"];
const is_drift_model = model => {
  return DRIFT_PARAMS.includes(model);
};
exports.is_drift_model = is_drift_model;
},{}],"vjs0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stopLsc = exports.getVehicleMod = void 0;
var _system = require("../system");
var _custom = require("../custom.event");
var _lsc = require("../../../shared/lsc");
var _gui = require("../gui");
var _drift = require("../../../shared/drift");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
let lscConfig = [];
const getVehicleMod = id => {
  return lscConfig.find(q => q.id === id);
};
exports.getVehicleMod = getVehicleMod;
_custom.CustomEvent.registerServer('lsc:load', configFromServer => {
  lscConfig = configFromServer;
});
_custom.CustomEvent.registerServer('lsc:updateCost', (slotId, newValue) => {
  if (newValue < 0 || newValue > 9999999) return;
  lscConfig.find(c => c.id == slotId).cost = newValue;
});
let isLocal = false;
mp.events.add('setLogin', (a, b, ip) => {
  if (ip == '127.0.0.1') isLocal = true;
});
let lscOpened = false;
let addVehicle = null;
let lscShopID;
let lscVehicleID;
let lscPosition;
let healthed = false;
let phi = 25,
  theta = -15,
  phim = 0,
  thetam = 0,
  lastX = 0,
  lastY = 0;
const degToRad = Math.PI / 180;
let camera;
if (!camera || !mp.cameras.exists(camera)) {
  camera = mp.cameras.new('lsc', new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0), 40);
}
const switchTuningColor = (vehicle, elementID, r, g, b) => {
  let element = lscConfig.find(e => e.id == elementID);
  if (!element || !vehicle || !mp.vehicles.exists(vehicle) || !vehicle.handle) return;
  if (elementID == 1000) vehicle.setCustomPrimaryColour(r, g, b);
  if (elementID == 1001) vehicle.setCustomSecondaryColour(r, g, b);
  if (elementID == 4004) vehicle.setNeonLightsColour(r, g, b);
  if (elementID == 3002) vehicle.setTyreSmokeColor(r, g, b);
};
const switchTuning = (vehicle, elementID, value) => {
  let element = lscConfig.find(e => e.id == elementID);
  if (!element || !vehicle || !mp.vehicles.exists(vehicle) || !vehicle.handle) return;
  if (elementID >= 0 && elementID <= 62) {
    vehicle.setMod(elementID, value);
    if (elementID == 14 && vehicle) setTimeout(async () => {
      if (addVehicle && addVehicle.handle) {
        addVehicle.setMod(elementID, value);
        addVehicle.startHorn(3000, mp.game.joaat("HELDDOWN"), false);
      }
    }, 100);
  }
  if (elementID == 4000) vehicle.setNeonLightEnabled(0, value != -1);
  if (elementID == 4001) vehicle.setNeonLightEnabled(1, value != -1);
  if (elementID == 4002) vehicle.setNeonLightEnabled(2, value != -1);
  if (elementID == 4003) vehicle.setNeonLightEnabled(3, value != -1);
  if (elementID == 1007) vehicle.setNumberPlateTextIndex(value);
  if (elementID == 55) vehicle.setWindowTint(value);
  if (elementID == 1008) mp.game.invoke("0xE41033B25D003A07", vehicle.handle, value);
  let colours = vehicle.getColours(0, 0);
  if (elementID == 1000 || elementID == 1005) vehicle.setColours(value, colours.colorSecondary);
  if (elementID == 1001 || elementID == 1006) vehicle.setColours(colours.colorPrimary, value);
  if (elementID == 3000) vehicle.setExtraColours(0, value);
  if (elementID == 2999) vehicle.setWheelType(value);
  if (elementID == 3001) vehicle.toggleMod(20, value != -1);
};
mp.events.add('lsc:switchTuningColor', (elementID, r, g, b) => {
  switchTuningColor(player.vehicle, elementID, r, g, b);
});
mp.events.add('lsc:switchTuningColorMod', (elementID, value) => {
  switchTuning(player.vehicle, elementID, value);
});
mp.events.add('lsc:switchTuning', (elementID, value) => {
  switchTuning(player.vehicle, elementID, value);
});
mp.events.add('lsc:switchWheel', (type, wheel) => {
  switchTuning(player.vehicle, 2999, type);
  switchTuning(player.vehicle, 62, wheel);
});
mp.events.add('lsc:stop', sendServer => {
  stopLsc(sendServer);
});
mp.events.add('lsc:switchTuningContainWheel', (elementID, lastWheelType, lastWheel) => {
  switchTuning(player.vehicle, 2999, lastWheelType);
  newContain(elementID, 62, lastWheel);
});
const newContain = (elementID, lastElementID, lastElementValue, colorR, colorG, colorB, colorMod) => {
  const vehicle = player.vehicle;
  if (!vehicle) return;
  const lastVehMod = lscConfig.find(q => q.id == lastElementID);
  if (lastVehMod) {
    if (lastVehMod.isColor) {
      switchTuningColor(player.vehicle, lastElementID, colorR, colorG, colorB);
      if (lastVehMod.isColorMod) switchTuning(player.vehicle, lastElementID, colorMod);
    } else switchTuning(player.vehicle, lastElementID, lastElementValue);
  }
  if (lastElementID == 5 || lastElementID >= 27 && lastElementID <= 35) {
    vehicle.setDoorShut(0, false);
    vehicle.setDoorShut(1, false);
  }
  if (lastElementID >= 39 && lastElementID <= 41) {
    vehicle.setDoorShut(4, false);
  }
  if (lastElementID == 42 || lastElementID == 22 || lastElementID == 1008) {
    vehicle.setLights(0);
  }
  if (elementID == 5 || elementID >= 27 && elementID <= 35) {
    vehicle.setDoorOpen(0, false, false);
    vehicle.setDoorOpen(1, false, false);
  }
  if (elementID >= 39 && elementID <= 41) {
    vehicle.setDoorOpen(4, false, false);
  }
  if (elementID == 42 || elementID == 22 || elementID == 1008) {
    vehicle.setLights(2);
  }
};
mp.events.add('lsc:switchTuningContain', (elementID, lastElementID, lastElementValue, colorR, colorG, colorB, colorMod) => {
  newContain(elementID, lastElementID, lastElementValue, colorR, colorG, colorB, colorMod);
});
mp.events.add('lsc:healthed', () => {
  healthed = true;
});
const stopLsc = sendServer => {
  if (lscOpened) {
    var _mp$players$local$veh;
    (_mp$players$local$veh = mp.players.local.vehicle) === null || _mp$players$local$veh === void 0 || _mp$players$local$veh.freezePosition(false);
    mp.game.cam.renderScriptCams(false, false, 0, false, false);
    lscOpened = false;
    if (addVehicle && addVehicle.handle && addVehicle.dimension == player.dimension) addVehicle.destroy();
    if (sendServer) _custom.CustomEvent.triggerServer('lsc:exit', lscShopID, lscVehicleID, healthed);else _custom.CustomEvent.triggerServer('lsc:release', lscShopID);
  }
};
exports.stopLsc = stopLsc;
const lscOpen = async (vehicleCost, currentTuning, businessItems) => {
  var _camera;
  if (!player.vehicle) return;
  if (lscOpened) return;
  const veh = player.vehicle;
  veh.freezePosition(true);
  if (!mp.vehicles.exists(addVehicle) || !addVehicle || !addVehicle.handle) {
    const createVehicle = async () => {
      addVehicle = mp.vehicles.new(veh.model, new mp.Vector3(veh.position.x, veh.position.y + 4, veh.position.z), {
        dimension: player.dimension
      });
      while (!addVehicle.handle) {
        await _system.system.sleep(50);
      }
      addVehicle.setAlpha(0);
      addVehicle.setNoCollision(player.vehicle.handle, false);
    };
    createVehicle();
  }
  let lscUpgrade = [];
  let WHEELS = -1;
  let WHEELS_TYPE = null;
  let wheelMultiplier = 1000;
  lscConfig.map(vm => {
    if (vm.target == 'bike' && !mp.game.vehicle.isThisModelABike(player.vehicle.model)) return;
    if (vm.target == 'car' && !mp.game.vehicle.isThisModelACar(player.vehicle.model)) return;
    if (vm.id == 3004 && !(0, _drift.is_drift_model)(veh.getVariable('modelname'))) return;
    let elements = [];
    const bizItem = businessItems.find(i => i.item == vm.id);
    const currentTuningItem = currentTuning.find(ct => ct[0] == vm.id);
    const pushDefault = (elms, def) => {
      elms.map(t => {
        elements.push({
          id: t.value,
          name: t.name,
          percent: t.percent,
          isUsed: currentTuningItem ? currentTuningItem[1] == t.value : t.value == def
        });
      });
    };
    if (vm.id == 55) pushDefault([..._lsc.lscTintUpgrades].map(el => {
      return _objectSpread(_objectSpread({}, el), {}, {
        percent: el.percent + bizItem.price
      });
    }), -1);else if (vm.id == 15) pushDefault([..._lsc.lscSuspensionUpgrades].map(el => {
      return _objectSpread(_objectSpread({}, el), {}, {
        percent: el.percent + bizItem.price
      });
    }), -1);else if (vm.id == 13) pushDefault([..._lsc.lscTransmissionUpgrades].map(el => {
      return _objectSpread(_objectSpread({}, el), {}, {
        percent: el.percent + bizItem.price
      });
    }), -1);else if (vm.id == 12) pushDefault([..._lsc.lscBrakeUpgrades].map(el => {
      return _objectSpread(_objectSpread({}, el), {}, {
        percent: el.percent + bizItem.price
      });
    }), -1);else if (vm.id == 11) {
      pushDefault([..._lsc.lscEngineUpgrades].map(el => {
        return _objectSpread(_objectSpread({}, el), {}, {
          percent: el.percent + bizItem.price
        });
      }), -1);
    } else if (vm.id == 1007) pushDefault([..._lsc.lscNumberUpgrades].map(el => {
      return _objectSpread(_objectSpread({}, el), {}, {
        percent: el.percent + bizItem.price
      });
    }), 0);else if (vm.id == 1008) pushDefault([..._lsc.lscXenonColorUpgrades].map(el => {
      return _objectSpread(_objectSpread({}, el), {}, {
        percent: el.percent + bizItem.price
      });
    }), -1);else if (vm.id == 14 && veh.getNumMods(14)) {
      elements.push({
        id: -1,
        name: 'Стандартный',
        percent: Math.round(bizItem.price / 2),
        isUsed: currentTuningItem ? currentTuningItem[1] == -1 : true
      });
      for (let i = 0, l = veh.getNumMods(14); i < l; i++) {
        elements.push({
          id: i,
          name: `Клаксон ${i + 1}`,
          percent: bizItem.price,
          isUsed: currentTuningItem ? currentTuningItem[1] == i : false
        });
      }
    } else if (vm.id == 2999) {
      WHEELS_TYPE = currentTuningItem && _lsc.LSC_WHEELS.find(w => w.type == currentTuningItem[1]) ? currentTuningItem[1] : 0;
      return;
    } else if (vm.id == 62) {
      WHEELS = currentTuningItem && _lsc.LSC_WHEELS.find(w => w.type == (currentTuning.find(ct => ct[0] == 2999) ? currentTuning.find(ct => ct[0] == 2999)[1] : 0)) && _lsc.LSC_WHEELS.find(w => w.type == (currentTuning.find(ct => ct[0] == 2999) ? currentTuning.find(ct => ct[0] == 2999)[1] : 0)).elements.find(wh => wh[1] == currentTuningItem[1]) ? currentTuningItem[1] : -1;
      wheelMultiplier = bizItem.price;
      return;
    } else if (vm.id == 3000) {
      _lsc.LSC_WHEEL_COLOR_MODS.map(t => {
        elements.push({
          id: t.index,
          name: t.name,
          percent: bizItem.price,
          isUsed: currentTuningItem ? currentTuningItem[1] == t.index : t.index == 0
        });
      });
    } else if (veh.getNumMods(vm.id) == 1 || vm.id == 22 || vm.id == 18 || vm.id == 4000 || vm.id == 4001 || vm.id == 4002 || vm.id == 4003 || vm.id == 3001 || vm.id == 3004) {
      let isUsed = currentTuningItem ? currentTuningItem[1] != -1 : false;
      elements.push({
        id: -1,
        name: 'Отключено',
        isUsed: isUsed == false,
        percent: Math.round(bizItem.price / 2)
      });
      elements.push({
        id: 0,
        isUsed: isUsed == true,
        name: 'Включено',
        percent: bizItem.price
      });
    } else {
      for (let q = 0, l = veh.getNumMods(vm.id); q < l; q++) {
        const label = veh.getModTextLabel(vm.id, q);
        if (!label || label.toUpperCase() == "NULL") continue;
        let rulabel = mp.game.ui.getLabelText(label);
        if (!rulabel || rulabel.toUpperCase() == "NULL") rulabel = `Вариант ${q + 1}`;
        elements.push({
          id: q,
          name: rulabel.replace(/"/g, '').replace(/'/g, ''),
          percent: bizItem.price,
          isUsed: currentTuningItem ? currentTuningItem[1] == q : q == -1
        });
      }
      if (elements.length) {
        elements.unshift({
          id: -1,
          name: 'Стандарт',
          percent: Math.round(bizItem.price / 2),
          isUsed: currentTuningItem ? currentTuningItem[1] == -1 : true
        });
      }
    }
    if (vm.isColor) elements = [{
      id: 0,
      name: 'Цвет',
      percent: bizItem.price
    }];
    if (!elements.length) return;
    let arrayToPush = {
      id: vm.id,
      name: vm.name,
      section_type: vm.sector,
      elements: elements,
      isColor: vm.isColor,
      isWheelType: vm.isWheelType,
      isWheelTypeValue: vm.isWheelTypeValue,
      isColorMod: vm.isColorMod,
      bizItemPrice: bizItem.price,
      available: bizItem.count > 0
    };
    if (vm.isColorMod) {
      if (vm.id == 1000) arrayToPush.colorMod = currentTuning.find(ct => ct[0] == 1005) ? currentTuning.find(ct => ct[0] == 1005)[1] : 0;else if (vm.id == 1001) arrayToPush.colorMod = currentTuning.find(ct => ct[0] == 1006) ? currentTuning.find(ct => ct[0] == 1006)[1] : 0;
    }
    if (vm.isColor) {
      if (vm.id == 1000) arrayToPush.color = veh.getVariable('primaryColor') ? {
        r: veh.getVariable('primaryColor')[0],
        g: veh.getVariable('primaryColor')[1],
        b: veh.getVariable('primaryColor')[2]
      } : veh.getCustomPrimaryColour(0, 0, 0);else if (vm.id == 1001) arrayToPush.color = veh.getVariable('secondaryColor') ? {
        r: veh.getVariable('secondaryColor')[0],
        g: veh.getVariable('secondaryColor')[1],
        b: veh.getVariable('secondaryColor')[2]
      } : veh.getCustomSecondaryColour(0, 0, 0);else if (vm.id == 4004) {
        arrayToPush.color = veh.getVariable('neonColor') ? {
          r: veh.getVariable('neonColor')[0],
          g: veh.getVariable('neonColor')[1],
          b: veh.getVariable('neonColor')[2]
        } : veh.getNeonLightsColour(0, 0, 0);
      } else if (vm.id == 3002) arrayToPush.color = veh.getVariable('tyreSmokeColor') ? {
        r: veh.getVariable('tyreSmokeColor')[0],
        g: veh.getVariable('tyreSmokeColor')[1],
        b: veh.getVariable('tyreSmokeColor')[2]
      } : veh.getTyreSmokeColor(0, 0, 0);else arrayToPush.color = {
        r: 0,
        g: 0,
        b: 0
      };
    }
    lscUpgrade.push(arrayToPush);
  });
  _gui.gui.setGui('lsc');
  const need_repair = veh.isDamaged();
  healthed = !need_repair;
  _custom.CustomEvent.triggerCef('lsc:start', lscUpgrade, veh.getVariable('modelname') || '', lscShopID, lscVehicleID, vehicleCost, WHEELS_TYPE, WHEELS, need_repair, wheelMultiplier);
  lscOpened = true;
  (_camera = camera) === null || _camera === void 0 || _camera.pointAt(player.vehicle.handle, 0, 0, 0, true);
};
mp.events.add('entityStreamIn', entity => {
  if (entity.isAVehicle()) {
    newTuningData(entity, entity.getVariable('tuningData'));
  }
});
mp.events.addDataHandler('tuningData', function (entity, value, oldValue) {
  if (entity.handle && entity.isAVehicle()) {
    newTuningData(entity, value);
  }
});
const newTuningData = (vehicle, elements) => {
  if (!vehicle) return;
  if (mp.game.vehicle.isThisModelABike(vehicle.getModel())) switchTuning(vehicle, 2999, 6);
  if (!elements || !elements.length) return;
  switchTuning(vehicle, 4000, -1);
  switchTuning(vehicle, 4001, -1);
  switchTuning(vehicle, 4002, -1);
  switchTuning(vehicle, 4003, -1);
  for (let i = 0, l = elements.length; i < l; i++) {
    switchTuning(vehicle, elements[i][0], elements[i][1]);
  }
  if (elements.find(e => e[0] == 62)) switchTuning(vehicle, 62, elements.find(e => e[0] == 62)[1]);
  setTimeout(() => {
    if (!vehicle || !mp.vehicles.exists(vehicle) || !vehicle.handle) return;
    let tyreSmokeColor = vehicle.getVariable('tyreSmokeColor');
    if (tyreSmokeColor && tyreSmokeColor.length == 3) {
      switchTuningColor(vehicle, 3002, tyreSmokeColor[0], tyreSmokeColor[1], tyreSmokeColor[2]);
    }
    let neonColor = vehicle.getVariable('neonColor');
    if (neonColor && neonColor.length == 3) {
      switchTuningColor(vehicle, 4004, neonColor[0], neonColor[1], neonColor[2]);
    }
  }, 2000);
};
let leftDown = false;
let rightDown = false;
let downPos = [0, 0];
setInterval(() => {
  if (!lscOpened) return;
  mp.game.cam.renderScriptCams(true, false, 0, false, false);
  camera.setActive(true);
  const cursorPos = mp.gui.cursor.position;
  const resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
  if (!mp.keys.isDown(0x02)) {
    if (rightDown) rightDown = false;
  } else {
    if (!player.vehicle) return;
    if (!rightDown) {
      if (!(mp.gui.cursor.position[0] * 100 / resolution.x >= 27 && mp.gui.cursor.position[0] * 100 / resolution.x < 78) || !(mp.gui.cursor.position[1] * 100 / resolution.y <= 90)) return;
      rightDown = true;
      downPos = mp.gui.cursor.position;
    }
    if (!rightDown) return;
    if (cursorPos[0] != lastX || cursorPos[1] != lastY) {
      let newFov = _system.system.smallestNumber(_system.system.biggestNumber(10, camera.getFov() + (cursorPos[1] - lastY) * 0.3), 80);
      camera.setFov(newFov);
    }
  }
  if (!mp.keys.isDown(0x01)) {
    if (leftDown) leftDown = false;
  } else {
    if (!player.vehicle) return;
    if (!leftDown) {
      if (!(mp.gui.cursor.position[0] * 100 / resolution.x >= 27 && mp.gui.cursor.position[0] * 100 / resolution.x < 78) || !(mp.gui.cursor.position[1] * 100 / resolution.y <= 90)) return;
      leftDown = true;
      downPos = mp.gui.cursor.position;
      thetam = theta;
      phim = phi;
    }
    if (!leftDown) return;
    if (cursorPos[0] != lastX || cursorPos[1] != lastY) {
      thetam = theta;
      phim = phi;
      phi = -(cursorPos[0] - lastX) * 0.1 + phim;
      theta = -(cursorPos[1] - lastY) * 0.1 + thetam;
      if (theta > 90) theta = 90;else if (theta < 65) theta = 65;
      const distance = 10;
      const newCoord = [distance * Math.sin(theta * degToRad) * Math.cos(phi * degToRad), distance * Math.sin(theta * degToRad) * Math.sin(phi * degToRad), distance * Math.cos(theta * degToRad)];
      camera.setCoord(player.vehicle.position.x + newCoord[0], player.vehicle.position.y + newCoord[1], player.vehicle.position.z + newCoord[2]);
      camera.pointAt(player.vehicle.handle, 0, 0, 0, true);
    }
  }
  lastX = cursorPos[0];
  lastY = cursorPos[1];
}, 10);
_custom.CustomEvent.registerServer('business:lsc:open', (shopId, vehicleCost, startTuning, businessItems) => {
  lscShopID = shopId;
  lscVehicleID = player.vehicle.remoteId;
  lscPosition = player.position;
  lscOpen(vehicleCost, startTuning, businessItems);
});
},{"../system":"pi2J","../custom.event":"py8h","../../../shared/lsc":"p5oy","../gui":"bk91","../../../shared/drift":"ogyk"}],"sFZG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.furnitureList = exports.FurnitureCategoryNames = exports.FurnitureAllCategories = void 0;
const FurnitureAllCategories = exports.FurnitureAllCategories = ['wardrobe', 'bed', 'chest', 'chair', 'table', 'armchair', 'sofa', 'lamp', 'decor', 'plumbing'];
const FurnitureCategoryNames = exports.FurnitureCategoryNames = {
  'wardrobe': "Шкафы",
  'bed': "Кровати",
  'chest': "Комоды",
  'chair': "Стулья",
  'table': "Столы",
  'armchair': "Кресла",
  'sofa': "Диваны",
  'lamp': "Светильники",
  'decor': "Декорации",
  'plumbing': "Сантехника"
};
const furnitureList = exports.furnitureList = [{
  id: 0,
  name: 'Угловой диван серый',
  prop: 'apa_mp_h_stn_sofacorn_01',
  cost: 100000,
  cat: 'sofa'
}, {
  id: 1,
  name: 'Угловой диван синий',
  prop: 'apa_mp_h_stn_sofacorn_05',
  cost: 100000,
  cat: 'sofa'
}, {
  id: 2,
  name: 'Угловой диван зеленый',
  prop: 'apa_mp_h_stn_sofacorn_06',
  cost: 100000,
  cat: 'sofa'
}, {
  id: 3,
  name: 'Угловой диван темно синий',
  prop: 'apa_mp_h_stn_sofacorn_07',
  cost: 100000,
  cat: 'sofa'
}, {
  id: 4,
  name: 'Угловой диван кожанный серый',
  prop: 'apa_mp_h_stn_sofacorn_08',
  cost: 100000,
  cat: 'sofa'
}, {
  id: 5,
  name: 'Угловой диван кожанный черный',
  prop: 'apa_mp_h_stn_sofacorn_09',
  cost: 100000,
  cat: 'sofa'
}, {
  id: 6,
  name: 'Угловой диван белый',
  prop: 'apa_mp_h_stn_sofacorn_10',
  cost: 110000,
  cat: 'sofa'
}, {
  id: 7,
  name: 'Коричневый лежак',
  prop: 'apa_mp_h_stn_sofa_daybed_01',
  cost: 35000,
  cat: 'armchair'
}, {
  id: 8,
  name: 'Черный лежак',
  prop: 'apa_mp_h_stn_sofa_daybed_02',
  cost: 30000,
  cat: 'armchair'
}, {
  id: 9,
  name: 'Длинный диван белый',
  prop: 'apa_mp_h_yacht_sofa_01',
  cost: 50000,
  cat: 'sofa'
}, {
  id: 10,
  name: 'Диван коричневый',
  prop: 'apa_mp_h_yacht_sofa_02',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 12,
  name: 'Диван черный офисный',
  prop: 'bkr_prop_clubhouse_sofa_01a',
  cost: 35000,
  cat: 'sofa'
}, {
  id: 13,
  name: 'Диван серый клетчатый офисный',
  prop: 'ex_mp_h_off_sofa_003',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 14,
  name: 'Диван белый клетчатый офисный',
  prop: 'ex_mp_h_off_sofa_01',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 15,
  name: 'Диван черный клетчатый офисный',
  prop: 'ex_mp_h_off_sofa_02',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 16,
  name: 'Лофтовый бежевый диван',
  prop: 'hei_heist_stn_sofa2seat_03',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 17,
  name: 'Лофтовый коричневый диван',
  prop: 'hei_heist_stn_sofa2seat_06',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 18,
  name: 'Простой серый диван',
  prop: 'hei_heist_stn_sofa3seat_01',
  cost: 20000,
  cat: 'sofa'
}, {
  id: 19,
  name: 'Простой шоколадный диван',
  prop: 'hei_heist_stn_sofa3seat_02',
  cost: 25000,
  cat: 'sofa'
}, {
  id: 20,
  name: 'Домашний серый диван',
  prop: 'hei_heist_stn_sofa3seat_06',
  cost: 25000,
  cat: 'sofa'
}, {
  id: 21,
  name: 'Угловой синий диван',
  prop: 'hei_heist_stn_sofacorn_05',
  cost: 70000,
  cat: 'sofa'
}, {
  id: 22,
  name: 'Белая раскладушка',
  prop: 'prop_t_sofa_02',
  cost: 40000,
  cat: 'bed'
}, {
  id: 23,
  name: 'Терасный диван серый',
  prop: 'prop_yaught_sofa_01',
  cost: 20000,
  cat: 'sofa'
}, {
  id: 24,
  name: 'Угловой белый диван',
  prop: 'p_lev_sofa_s',
  cost: 70000,
  cat: 'sofa'
}, {
  id: 25,
  name: 'Турецкий узорный диван',
  prop: 'p_res_sofa_l_s',
  cost: 50000,
  cat: 'sofa'
}, {
  id: 27,
  name: 'Офисный кожанный диван коричневый',
  prop: 'p_v_med_p_sofa_s',
  cost: 40000,
  cat: 'sofa'
}, {
  id: 28,
  name: 'Терасный диван в полоску',
  prop: 'p_yacht_sofa_01_s',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 29,
  name: 'Уютный домашний синий диван',
  prop: 'v_res_tre_sofa_s',
  cost: 30000,
  cat: 'sofa'
}, {
  id: 30,
  name: 'Белая тумба с телевизором',
  prop: 'apa_mp_h_str_avunitl_04',
  cost: 150000,
  cat: 'chest'
}, {
  id: 31,
  name: 'Черная тумба с телевизором и желтыми колонками',
  prop: 'apa_mp_h_str_avunitm_01',
  cost: 120000,
  cat: 'chest'
}, {
  id: 32,
  name: 'Черная тумба с телевизором и белыми колонками',
  prop: 'apa_mp_h_str_avunitm_03',
  cost: 120000,
  cat: 'chest'
}, {
  id: 33,
  name: 'Обычная тумба с телевизором',
  prop: 'apa_mp_h_str_avunits_01',
  cost: 100000,
  cat: 'chest'
}, {
  id: 34,
  name: 'Необычная тумба с телевизором',
  prop: 'apa_mp_h_str_avunits_04',
  cost: 110000,
  cat: 'chest'
}, {
  id: 35,
  name: 'Тумба с телевизором и большой аудиосистемой',
  prop: 'hei_heist_str_avunitl_03',
  cost: 170000,
  cat: 'chest'
}, {
  id: 36,
  name: 'Белая тумба 1',
  prop: 'apa_mp_h_str_sideboardl_06',
  cost: 30000,
  cat: 'chest'
}, {
  id: 37,
  name: 'Коричневая тумба',
  prop: 'apa_mp_h_str_sideboardl_11',
  cost: 10000,
  cat: 'chest'
}, {
  id: 38,
  name: 'Песочная тумба',
  prop: 'apa_mp_h_str_sideboardl_09',
  cost: 40000,
  cat: 'chest'
}, {
  id: 39,
  name: 'Серая тумба 1',
  prop: 'apa_mp_h_str_sideboardl_13',
  cost: 25000,
  cat: 'chest'
}, {
  id: 40,
  name: 'Коричнево белая тумба',
  prop: 'apa_mp_h_str_sideboardl_14',
  cost: 20000,
  cat: 'chest'
}, {
  id: 41,
  name: 'Древесная тумба',
  prop: 'apa_mp_h_str_sideboardm_02',
  cost: 15000,
  cat: 'chest'
}, {
  id: 42,
  name: 'Белая тумба 2',
  prop: 'apa_mp_h_str_sideboardm_03',
  cost: 30000,
  cat: 'chest'
}, {
  id: 43,
  name: 'Бело серая тумба',
  prop: 'apa_mp_h_str_sideboards_01',
  cost: 20000,
  cat: 'chest'
}, {
  id: 44,
  name: 'Стеклянный стол',
  prop: 'apa_mp_h_str_sideboards_02',
  cost: 25000,
  cat: 'table'
}, {
  id: 45,
  name: 'Серая тумба 2',
  prop: 'hei_heist_str_sideboardl_02',
  cost: 20000,
  cat: 'chest'
}, {
  id: 46,
  name: 'Дубовая тумба',
  prop: 'hei_heist_str_sideboardl_03',
  cost: 15000,
  cat: 'chest'
}, {
  id: 47,
  name: 'Синяя тумба',
  prop: 'hei_heist_str_sideboardl_04',
  cost: 30000,
  cat: 'chest'
}, {
  id: 48,
  name: 'Серо белая тумба',
  prop: 'hei_heist_str_sideboardl_05',
  cost: 25000,
  cat: 'chest'
}, {
  id: 49,
  name: 'Стеклянный стол',
  prop: 'hei_heist_str_sideboards_02',
  cost: 25000,
  cat: 'table'
}, {
  id: 50,
  name: 'Фиолетовая тумба',
  prop: 'apa_mp_h_bed_chestdrawer_02',
  cost: 30000,
  cat: 'chest'
}, {
  id: 51,
  name: 'Древесная тумба',
  prop: 'hei_heist_bed_chestdrawer_04',
  cost: 15000,
  cat: 'chest'
}, {
  id: 52,
  name: 'Кухонный белый стул',
  prop: 'apa_mp_h_din_chair_04',
  cost: 10000,
  cat: 'chair'
}, {
  id: 53,
  name: 'Кухонный белый стул 2',
  prop: 'apa_mp_h_din_chair_08',
  cost: 10000,
  cat: 'chair'
}, {
  id: 54,
  name: 'Кухонный темный стул',
  prop: 'apa_mp_h_din_chair_12',
  cost: 10000,
  cat: 'chair'
}, {
  id: 55,
  name: 'Кожанный коричневый стул',
  prop: 'apa_mp_h_din_chair_09',
  cost: 13000,
  cat: 'chair'
}, {
  id: 56,
  name: 'Красный лофт стул',
  prop: 'hei_heist_din_chair_02',
  cost: 20000,
  cat: 'chair'
}, {
  id: 57,
  name: 'Серый офисный стул',
  prop: 'hei_heist_din_chair_05',
  cost: 10000,
  cat: 'chair'
}, {
  id: 58,
  name: 'Бирюзовый кухонный стул',
  prop: 'hei_heist_din_chair_06',
  cost: 13000,
  cat: 'chair'
}, {
  id: 59,
  name: 'Белый металический стул',
  prop: 'prop_table_04_chr',
  cost: 13000,
  cat: 'chair'
}, {
  id: 60,
  name: 'Белый уютный стул',
  prop: 'prop_table_06_chr',
  cost: 20000,
  cat: 'chair'
}, {
  id: 61,
  name: 'Коричневое кожанное кресло',
  prop: 'apa_mp_h_stn_chairarm_01',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 62,
  name: 'Деревянный стул с мягкой накладкой',
  prop: 'apa_mp_h_stn_chairarm_02',
  cost: 15000,
  cat: 'chair'
}, {
  id: 63,
  name: 'Мягкий дубовый стул',
  prop: 'apa_mp_h_stn_chairarm_03',
  cost: 15000,
  cat: 'chair'
}, {
  id: 64,
  name: 'Желтый лофтовый стул',
  prop: 'apa_mp_h_stn_chairarm_09',
  cost: 20000,
  cat: 'chair'
}, {
  id: 65,
  name: 'Дубовый коричневый стул',
  prop: 'apa_mp_h_stn_chairarm_11',
  cost: 10000,
  cat: 'chair'
}, {
  id: 66,
  name: 'Черное мягкое кресло',
  prop: 'apa_mp_h_stn_chairarm_12',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 67,
  name: 'Желтый стул',
  prop: 'apa_mp_h_stn_chairarm_13',
  cost: 15000,
  cat: 'chair'
}, {
  id: 68,
  name: 'Мягкое домашнее красное кресло',
  prop: 'apa_mp_h_stn_chairarm_23',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 69,
  name: 'Серый металический стул',
  prop: 'apa_mp_h_stn_chairarm_24',
  cost: 15000,
  cat: 'chair'
}, {
  id: 70,
  name: 'Мягкое красное кресло',
  prop: 'apa_mp_h_stn_chairarm_25',
  cost: 20000,
  cat: 'armchair'
}, {
  id: 71,
  name: 'Кресло в виде сабвуфера',
  prop: 'apa_mp_h_stn_chairarm_26',
  cost: 30000,
  cat: 'armchair'
}, {
  id: 72,
  name: 'Кресло в виде сферы серое',
  prop: 'apa_mp_h_stn_chairstool_12',
  cost: 15000,
  cat: 'armchair'
}, {
  id: 73,
  name: 'Мягкое оранжевое домашнее кресло',
  prop: 'apa_mp_h_stn_chairstrip_01',
  cost: 20000,
  cat: 'armchair'
}, {
  id: 74,
  name: 'Кожанное оранжевое домашнее кресло',
  prop: 'apa_mp_h_stn_chairstrip_02',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 75,
  name: 'Белое кожанное кресло',
  prop: 'apa_mp_h_stn_chairstrip_05',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 76,
  name: 'Уютное домашнее красное кресло',
  prop: 'apa_mp_h_stn_chairstrip_04',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 77,
  name: 'Черное кожанное домашнее кресло',
  prop: 'apa_mp_h_stn_chairstrip_07',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 78,
  name: 'Голубое домашнее кресло',
  prop: 'apa_mp_h_stn_chairstrip_08',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 79,
  name: 'Белое домашнее кресло',
  prop: 'apa_mp_h_yacht_armchair_01',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 80,
  name: 'Белое терасное кресло',
  prop: 'apa_mp_h_yacht_armchair_03',
  cost: 15000,
  cat: 'armchair'
}, {
  id: 81,
  name: 'Маленькое коричневое кресло',
  prop: 'apa_mp_h_yacht_armchair_04',
  cost: 30000,
  cat: 'armchair'
}, {
  id: 82,
  name: 'Офисное кресло кожанное',
  prop: 'ba_prop_battle_club_chair_01',
  cost: 20000,
  cat: 'armchair'
}, {
  id: 83,
  name: 'Офисное кресло директора',
  prop: 'ba_prop_battle_club_chair_02',
  cost: 100000,
  cat: 'armchair'
}, {
  id: 84,
  name: 'Офисное кресло серое',
  prop: 'ba_prop_battle_club_chair_03',
  cost: 15000,
  cat: 'armchair'
}, {
  id: 85,
  name: 'Офисное кресло серое 2',
  prop: 'bkr_prop_biker_boardchair01',
  cost: 15000,
  cat: 'armchair'
}, {
  id: 86,
  name: 'Потрепанное кресло',
  prop: 'bkr_prop_biker_chairstrip_01',
  cost: 15000,
  cat: 'armchair'
}, {
  id: 87,
  name: 'Черное кресло',
  prop: 'bkr_prop_clubhouse_armchair_01a',
  cost: 30000,
  cat: 'armchair'
}, {
  id: 88,
  name: 'Кухонный коричневый стул',
  prop: 'bkr_prop_weed_chair_01a',
  cost: 13000,
  cat: 'chair'
}, {
  id: 89,
  name: 'Серое кресло лофт',
  prop: 'ex_mp_h_off_easychair_01',
  cost: 15000,
  cat: 'armchair'
}, {
  id: 90,
  name: 'Белое кресло лофт',
  prop: 'ex_mp_h_off_chairstrip_01',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 91,
  name: 'Коричневое кресло лофт',
  prop: 'ex_mp_h_stn_chairstrip_010',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 92,
  name: 'Белое кресло лофт',
  prop: 'ex_mp_h_stn_chairstrip_011',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 93,
  name: 'Черное кресло лофт',
  prop: 'ex_mp_h_stn_chairstrip_07',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 94,
  name: 'Кожанное офисное кресло',
  prop: 'ex_prop_offchair_exec_01',
  cost: 20000,
  cat: 'armchair'
}, {
  id: 95,
  name: 'Офисный рабочий стул',
  prop: 'ex_prop_offchair_exec_03',
  cost: 10000,
  cat: 'chair'
}, {
  id: 96,
  name: 'Кресло полусфера нежно коричневый',
  prop: 'hei_heist_stn_chairarm_04',
  cost: 30000,
  cat: 'armchair'
}, {
  id: 97,
  name: 'Необычное кресло фиолетовое',
  prop: 'hei_heist_stn_chairarm_06',
  cost: 15000,
  cat: 'armchair'
}, {
  id: 98,
  name: 'Красное кожанное кресло',
  prop: 'hei_heist_stn_chairstrip_01',
  cost: 25000,
  cat: 'armchair'
}, {
  id: 99,
  name: 'Коричневый кожанный стул',
  prop: 'imp_prop_impexp_offchair_01a',
  cost: 30000,
  cat: 'chair'
}, {
  id: 100,
  name: 'Садовый стул',
  prop: 'prop_chair_02',
  cost: 10000,
  cat: 'chair'
}, {
  id: 101,
  name: 'Старый стул',
  prop: 'prop_chair_03',
  cost: 13000,
  cat: 'chair'
}, {
  id: 102,
  name: 'Модный дубовый стул',
  prop: 'prop_chair_04a',
  cost: 25000,
  cat: 'chair'
}, {
  id: 103,
  name: 'Модный белый древесный стул',
  prop: 'prop_chair_04b',
  cost: 25000,
  cat: 'chair'
}, {
  id: 104,
  name: 'Садовое кресло',
  prop: 'prop_chair_05',
  cost: 20000,
  cat: 'armchair'
}, {
  id: 105,
  name: 'Обычный стул',
  prop: 'prop_clown_chair',
  cost: 10000,
  cat: 'chair'
}, {
  id: 106,
  name: 'Офисный стул ожидания',
  prop: 'prop_cs_office_chair',
  cost: 10000,
  cat: 'chair'
}, {
  id: 107,
  name: 'Офисный серый стул ожидания',
  prop: 'prop_off_chair_05',
  cost: 15000,
  cat: 'chair'
}, {
  id: 108,
  name: 'Серое кожанное кресло',
  prop: 'p_armchair_01_s',
  cost: 60000,
  cat: 'armchair'
}, {
  id: 109,
  name: 'Старинный кухонный стул',
  prop: 'p_dinechair_01_s',
  cost: 35000,
  cat: 'chair'
}, {
  id: 110,
  name: 'Серая кровать дубовая',
  prop: 'apa_mp_h_bed_double_08',
  cost: 50000,
  cat: 'bed'
}, {
  id: 111,
  name: 'Серая кровать с высоким матрасом',
  prop: 'apa_mp_h_bed_double_09',
  cost: 50000,
  cat: 'bed'
}, {
  id: 112,
  name: 'Красная еловая кровать',
  prop: 'apa_mp_h_bed_wide_05',
  cost: 55000,
  cat: 'bed'
}, {
  id: 113,
  name: 'Коричневая дубовая кровать',
  prop: 'apa_mp_h_yacht_bed_01',
  cost: 60000,
  cat: 'bed'
}, {
  id: 114,
  name: 'Серая большая кровать с тумбами',
  prop: 'apa_mp_h_bed_with_table_02',
  cost: 80000,
  cat: 'bed'
}, {
  id: 115,
  name: 'Темная очень большая кровать',
  prop: 'apa_mp_h_yacht_bed_02',
  cost: 90000,
  cat: 'bed'
}, {
  id: 116,
  name: 'Кованная одноместная кровать',
  prop: 'gr_prop_bunker_bed_01',
  cost: 10000,
  cat: 'bed'
}, {
  id: 117,
  name: 'Кожанная раскладушка',
  prop: 'ex_prop_exec_bed_01',
  cost: 20000,
  cat: 'bed'
}, {
  id: 118,
  name: 'Потрепанная коричневая кровать',
  prop: 'p_lestersbed_s',
  cost: 5000,
  cat: 'bed'
}, {
  id: 119,
  name: 'Старинная дорогая кровать',
  prop: 'p_mbbed_s',
  cost: 100000,
  cat: 'bed'
}, {
  id: 120,
  name: 'Серая лофтовая кровать',
  prop: 'v_res_msonbed_s',
  cost: 50000,
  cat: 'bed'
}, {
  id: 121,
  name: 'Прикроватные тумбы коричневые',
  prop: 'hei_heist_bed_table_dble_04',
  cost: 15000,
  cat: 'chest'
}, {
  id: 122,
  name: 'Прикроватные тумбы красные',
  prop: 'apa_mp_h_bed_table_wide_12',
  cost: 15000,
  cat: 'chest'
}, {
  id: 123,
  name: 'Журнальный столик стеклянный',
  prop: 'apa_mp_h_din_table_01',
  cost: 35000,
  cat: 'table'
}, {
  id: 124,
  name: 'Журнальный столик стеклянный 2',
  prop: 'apa_mp_h_din_table_04',
  cost: 35000,
  cat: 'table'
}, {
  id: 125,
  name: 'Стол дубовый',
  prop: 'apa_mp_h_din_table_05',
  cost: 30000,
  cat: 'table'
}, {
  id: 126,
  name: 'Большой белый стол',
  prop: 'apa_mp_h_din_table_06',
  cost: 30000,
  cat: 'table'
}, {
  id: 127,
  name: 'Журнальный стол в виде яйца',
  prop: 'ba_prop_int_edgy_table_01',
  cost: 15000,
  cat: 'table'
}, {
  id: 128,
  name: 'Журнальный стол в виде яйца 2',
  prop: 'ba_prop_int_edgy_table_02',
  cost: 15000,
  cat: 'table'
}, {
  id: 129,
  name: 'Журнальный стол в виде корзины',
  prop: 'ba_prop_int_glam_table',
  cost: 10000,
  cat: 'table'
}, {
  id: 130,
  name: 'Терасный стол сетчатый',
  prop: 'gr_dlc_gr_yacht_props_table_03',
  cost: 15000,
  cat: 'table'
}, {
  id: 131,
  name: 'Кухонный стол со стульями белый',
  prop: 'hei_heist_din_table_06',
  cost: 100000,
  cat: 'table'
}, {
  id: 132,
  name: 'Стеклянный кухонный стол',
  prop: 'hei_heist_din_table_07',
  cost: 25000,
  cat: 'table'
}, {
  id: 133,
  name: 'Лофтовый коричневый стол',
  prop: 'prop_table_04',
  cost: 20000,
  cat: 'table'
}, {
  id: 134,
  name: 'Кованный домашний стол',
  prop: 'prop_table_06',
  cost: 15000,
  cat: 'table'
}, {
  id: 135,
  name: 'Кофейный столик черный',
  prop: 'apa_mp_h_yacht_coffee_table_01',
  cost: 20000,
  cat: 'table'
}, {
  id: 136,
  name: 'Кофейный столик темно серый',
  prop: 'apa_mp_h_yacht_coffee_table_02',
  cost: 20000,
  cat: 'table'
}, {
  id: 137,
  name: 'Кофейный столик темно серый кубический',
  prop: 'apa_mp_h_yacht_side_table_01',
  cost: 15000,
  cat: 'table'
}, {
  id: 138,
  name: 'Кофейный столик серый',
  prop: 'apa_mp_h_yacht_side_table_02',
  cost: 10000,
  cat: 'table'
}, {
  id: 139,
  name: 'Кофейный столик серый 2',
  prop: 'ch_prop_ch_coffe_table_02',
  cost: 15000,
  cat: 'table'
}, {
  id: 140,
  name: 'Кофейный столик секрый 3',
  prop: 'ch_prop_table_casino_short_02a',
  cost: 10000,
  cat: 'table'
}, {
  id: 141,
  name: 'Маленький терассный столик',
  prop: 'hei_prop_yah_table_01',
  cost: 10000,
  cat: 'table'
}, {
  id: 142,
  name: 'Длинный терасный столик',
  prop: 'hei_prop_yah_table_02',
  cost: 15000,
  cat: 'table'
}, {
  id: 143,
  name: 'Древесный кофейный столик',
  prop: 'prop_fbi3_coffee_table',
  cost: 10000,
  cat: 'table'
}, {
  id: 144,
  name: 'Простой древесный столик',
  prop: 'prop_patio_lounger1_table',
  cost: 5000,
  cat: 'table'
}, {
  id: 145,
  name: 'Маленький древесный столик',
  prop: 'prop_tablesmall_01',
  cost: 10000,
  cat: 'table'
}, {
  id: 146,
  name: 'Черный кофейный столик',
  prop: 'prop_t_coffe_table',
  cost: 15000,
  cat: 'table'
}, {
  id: 147,
  name: 'Лампа',
  prop: 'apa_mp_h_floorlamp_a',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 148,
  name: 'Лампа 2',
  prop: 'apa_mp_h_floorlamp_b',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 149,
  name: 'Лампа 3',
  prop: 'apa_mp_h_floorlamp_c',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 150,
  name: 'Лампа 4',
  prop: 'apa_mp_h_floor_lamp_int_08',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 151,
  name: 'Лампа 5',
  prop: 'apa_mp_h_lit_floorlampnight_05',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 152,
  name: 'Лампа 6',
  prop: 'apa_mp_h_lit_floorlampnight_07',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 153,
  name: 'Лампа 7',
  prop: 'apa_mp_h_lit_floorlampnight_14',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 154,
  name: 'Лампа 8',
  prop: 'apa_mp_h_lit_floorlamp_01',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 156,
  name: 'Лампа 10',
  prop: 'apa_mp_h_lit_floorlamp_03',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 157,
  name: 'Лампа 11',
  prop: 'apa_mp_h_lit_floorlamp_06',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 158,
  name: 'Лампа 12',
  prop: 'apa_mp_h_lit_floorlamp_10',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 159,
  name: 'Лампа 13',
  prop: 'apa_mp_h_lit_floorlamp_13',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 160,
  name: 'Лампа 14',
  prop: 'apa_mp_h_lit_floorlamp_17',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 161,
  name: 'Лампа 15',
  prop: 'hei_heist_lit_floorlamp_04',
  cost: 20000,
  cat: 'lamp'
}, {
  id: 162,
  name: 'Цветок в горшке',
  prop: 'apa_mp_h_acc_plant_palm_01',
  cost: 15000,
  cat: 'decor'
}, {
  id: 163,
  name: 'Цветок в горшке 2',
  prop: 'apa_mp_h_acc_plant_tall_01',
  cost: 15000,
  cat: 'decor'
}, {
  id: 164,
  name: 'Цветок в горшке 3',
  prop: 'ch_prop_ch_planter_01',
  cost: 15000,
  cat: 'decor'
}, {
  id: 165,
  name: 'Цветок в горшке 4',
  prop: 'prop_plant_int_01a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 166,
  name: 'Цветок в горшке 5',
  prop: 'prop_plant_int_03a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 167,
  name: 'Цветок в горшке 6',
  prop: 'prop_plant_int_03b',
  cost: 15000,
  cat: 'decor'
}, {
  id: 168,
  name: 'Цветок в горшке 7',
  prop: 'prop_plant_int_03c',
  cost: 15000,
  cat: 'decor'
}, {
  id: 169,
  name: 'Цветок в горшке 8',
  prop: 'p_int_jewel_plant_02',
  cost: 15000,
  cat: 'decor'
}, {
  id: 170,
  name: 'Сейф',
  prop: 'prop_ld_int_safe_01',
  cost: 70000,
  cat: 'decor'
}, {
  id: 171,
  name: 'Сейф 2',
  prop: 'p_v_43_safe_s',
  cost: 100000,
  cat: 'decor'
}, {
  id: 174,
  name: 'Картина 1',
  prop: 'apa_mp_h_acc_artwalll_01',
  cost: 16000,
  cat: 'decor'
}, {
  id: 175,
  name: 'Картина 2',
  prop: 'apa_mp_h_acc_artwalll_02',
  cost: 16000,
  cat: 'decor'
}, {
  id: 176,
  name: 'Картина 3',
  prop: 'apa_mp_h_acc_artwalll_03',
  cost: 16000,
  cat: 'decor'
}, {
  id: 177,
  name: 'Картина 4',
  prop: 'apa_mp_h_acc_artwallm_02',
  cost: 16000,
  cat: 'decor'
}, {
  id: 178,
  name: 'Картина 5',
  prop: 'apa_mp_h_acc_artwallm_03',
  cost: 16000,
  cat: 'decor'
}, {
  id: 179,
  name: 'Картина 6',
  prop: 'apa_mp_h_acc_artwallm_04',
  cost: 16000,
  cat: 'decor'
}, {
  id: 180,
  name: 'Картина 7',
  prop: 'apa_p_h_acc_artwalll_01',
  cost: 16000,
  cat: 'decor'
}, {
  id: 181,
  name: 'Картина 8',
  prop: 'apa_p_h_acc_artwalll_02',
  cost: 16000,
  cat: 'decor'
}, {
  id: 182,
  name: 'Картина 9',
  prop: 'apa_p_h_acc_artwalll_03',
  cost: 15000,
  cat: 'decor'
}, {
  id: 183,
  name: 'Картина 10',
  prop: 'apa_p_h_acc_artwallm_04',
  cost: 16000,
  cat: 'decor'
}, {
  id: 184,
  name: 'Картина 11',
  prop: 'apa_p_h_acc_artwalls_03',
  cost: 10000,
  cat: 'decor'
}, {
  id: 185,
  name: 'Картина 12',
  prop: 'apa_p_h_acc_artwalls_04',
  cost: 10000,
  cat: 'decor'
}, {
  id: 187,
  name: 'Пластинка позолоченная 1',
  prop: 'hei_heist_acc_artgolddisc_01',
  cost: 20000,
  cat: 'decor'
}, {
  id: 188,
  name: 'Пластинка позолоченная 2',
  prop: 'hei_heist_acc_artgolddisc_02',
  cost: 20000,
  cat: 'decor'
}, {
  id: 189,
  name: 'Пластинка позолоченная 3',
  prop: 'hei_heist_acc_artgolddisc_03',
  cost: 20000,
  cat: 'decor'
}, {
  id: 190,
  name: 'Пластинка позолоченная 4',
  prop: 'hei_heist_acc_artgolddisc_04',
  cost: 20000,
  cat: 'decor'
}, {
  id: 191,
  name: 'Консоль декорная',
  prop: 'vw_prop_casino_art_console_01a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 192,
  name: 'Консоль декорная 2',
  prop: 'vw_prop_casino_art_console_02a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 193,
  name: 'Статуя свободы миниатюра 1',
  prop: 'vw_prop_casino_art_miniature_05a',
  cost: 25000,
  cat: 'decor'
}, {
  id: 194,
  name: 'Статуя свободы миниатюра 2',
  prop: 'vw_prop_casino_art_miniature_05b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 195,
  name: 'Статуя свободы миниатюра 3',
  prop: 'vw_prop_casino_art_miniature_05c',
  cost: 50000,
  cat: 'decor'
}, {
  id: 196,
  name: 'Миниатюра казино 1',
  prop: 'vw_prop_casino_art_miniature_09a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 197,
  name: 'Миниатюра казино 2',
  prop: 'vw_prop_casino_art_miniature_09b',
  cost: 35000,
  cat: 'decor'
}, {
  id: 198,
  name: 'Миниатюра казино 3',
  prop: 'vw_prop_casino_art_miniature_09c',
  cost: 50000,
  cat: 'decor'
}, {
  id: 199,
  name: 'Статуя собаки',
  prop: 'vw_prop_casino_art_sculpture_01a',
  cost: 100000,
  cat: 'decor'
}, {
  id: 200,
  name: 'Статуя бананы 1',
  prop: 'vw_prop_casino_art_sculpture_02a',
  cost: 150000,
  cat: 'decor'
}, {
  id: 201,
  name: 'Статуя бананы 2',
  prop: 'vw_prop_casino_art_sculpture_02b',
  cost: 100000,
  cat: 'decor'
}, {
  id: 202,
  name: 'Арт маска 1',
  prop: 'vw_prop_casino_art_skull_01a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 203,
  name: 'Арт маска 2',
  prop: 'vw_prop_casino_art_skull_01b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 204,
  name: 'Арт маска 3',
  prop: 'vw_prop_casino_art_skull_02a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 205,
  name: 'Арт маска 4',
  prop: 'vw_prop_casino_art_skull_02b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 206,
  name: 'Арт маска 5',
  prop: 'vw_prop_casino_art_skull_03a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 207,
  name: 'Арт маска 6',
  prop: 'vw_prop_casino_art_skull_03b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 208,
  name: 'Статуя 1',
  prop: 'vw_prop_casino_art_statue_01a',
  cost: 200000,
  cat: 'decor'
}, {
  id: 209,
  name: 'Статуя 2',
  prop: 'vw_prop_casino_art_statue_02a',
  cost: 200000,
  cat: 'decor'
}, {
  id: 210,
  name: 'Арт птицы',
  prop: 'vw_prop_casino_art_bird_01a',
  cost: 70000,
  cat: 'decor'
}, {
  id: 211,
  name: 'Моделька машинки 1',
  prop: 'vw_prop_casino_art_car_01a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 212,
  name: 'Моделька машинки 2',
  prop: 'vw_prop_casino_art_car_02a',
  cost: 20000,
  cat: 'decor'
}, {
  id: 213,
  name: 'Моделька машинки 3',
  prop: 'vw_prop_casino_art_car_03a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 214,
  name: 'Моделька машинки 4',
  prop: 'vw_prop_casino_art_car_04a',
  cost: 50900,
  cat: 'decor'
}, {
  id: 215,
  name: 'Моделька машинки 5',
  prop: 'vw_prop_casino_art_car_05a',
  cost: 33000,
  cat: 'decor'
}, {
  id: 216,
  name: 'Моделька машинки 6',
  prop: 'vw_prop_casino_art_car_06a',
  cost: 20000,
  cat: 'decor'
}, {
  id: 217,
  name: 'Моделька машинки 7',
  prop: 'vw_prop_casino_art_car_07a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 218,
  name: 'Моделька машинки 8',
  prop: 'vw_prop_casino_art_car_08a',
  cost: 20000,
  cat: 'decor'
}, {
  id: 219,
  name: 'Моделька машинки 9',
  prop: 'vw_prop_casino_art_car_09a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 220,
  name: 'Моделька машинки 10',
  prop: 'vw_prop_casino_art_car_10a',
  cost: 25000,
  cat: 'decor'
}, {
  id: 221,
  name: 'Моделька машинки 11',
  prop: 'vw_prop_casino_art_car_11a',
  cost: 40000,
  cat: 'decor'
}, {
  id: 222,
  name: 'Моделька машинки 12',
  prop: 'vw_prop_casino_art_car_12a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 223,
  name: 'Арт вишни',
  prop: 'vw_prop_casino_art_cherries_01a',
  cost: 100000,
  cat: 'decor'
}, {
  id: 224,
  name: 'Настенный олень',
  prop: 'vw_prop_casino_art_deer_01a',
  cost: 50000,
  cat: 'decor'
}, {
  id: 225,
  name: 'Арт пёс',
  prop: 'vw_prop_casino_art_dog_01a',
  cost: 50000,
  cat: 'decor'
}, {
  id: 226,
  name: 'Статуя инопланетянин',
  prop: 'vw_prop_casino_art_egg_01a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 227,
  name: 'Арт фигурки людей 1',
  prop: 'vw_prop_casino_art_figurines_01a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 228,
  name: 'Арт фигурки людей 2',
  prop: 'vw_prop_casino_art_figurines_02a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 229,
  name: 'Декор граната 1',
  prop: 'vw_prop_casino_art_grenade_01a',
  cost: 50000,
  cat: 'decor'
}, {
  id: 230,
  name: 'Декор граната 2',
  prop: 'vw_prop_casino_art_grenade_01b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 231,
  name: 'Декор граната 3',
  prop: 'vw_prop_casino_art_grenade_01c',
  cost: 20000,
  cat: 'decor'
}, {
  id: 232,
  name: 'Декор граната 4',
  prop: 'vw_prop_casino_art_grenade_01d',
  cost: 25000,
  cat: 'decor'
}, {
  id: 233,
  name: 'Декор гитара',
  prop: 'vw_prop_casino_art_guitar_01a',
  cost: 25000,
  cat: 'decor'
}, {
  id: 234,
  name: 'Декор револьвер',
  prop: 'vw_prop_casino_art_gun_01a',
  cost: 50000,
  cat: 'decor'
}, {
  id: 235,
  name: 'Декор оружия',
  prop: 'vw_prop_casino_art_gun_02a',
  cost: 100000,
  cat: 'decor'
}, {
  id: 236,
  name: 'Декор маска 1',
  prop: 'vw_prop_casino_art_head_01a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 237,
  name: 'Декор маска 2',
  prop: 'vw_prop_casino_art_head_01b',
  cost: 40000,
  cat: 'decor'
}, {
  id: 238,
  name: 'Декор маска 3',
  prop: 'vw_prop_casino_art_head_01c',
  cost: 20000,
  cat: 'decor'
}, {
  id: 239,
  name: 'Декор маска 4',
  prop: 'vw_prop_casino_art_head_01d',
  cost: 20000,
  cat: 'decor'
}, {
  id: 240,
  name: 'Лампа стриптиз 1',
  prop: 'vw_prop_casino_art_lampf_01a',
  cost: 25000,
  cat: 'lamp'
}, {
  id: 241,
  name: 'Лампа стриптиз 2',
  prop: 'vw_prop_casino_art_lampm_01a',
  cost: 25000,
  cat: 'lamp'
}, {
  id: 242,
  name: 'Арт леденец',
  prop: 'vw_prop_casino_art_lollipop_01a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 243,
  name: 'Арт обьект 1',
  prop: 'vw_prop_casino_art_mod_01a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 244,
  name: 'Арт обьект 2',
  prop: 'vw_prop_casino_art_mod_02a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 245,
  name: 'Арт пиксельный человек 1',
  prop: 'vw_prop_casino_art_mod_03a',
  cost: 35000,
  cat: 'decor'
}, {
  id: 246,
  name: 'Арт пиксельный человек 2',
  prop: 'vw_prop_casino_art_mod_03a_a',
  cost: 35000,
  cat: 'decor'
}, {
  id: 247,
  name: 'Арт пиксельный человек 3',
  prop: 'vw_prop_casino_art_mod_03a_b',
  cost: 35000,
  cat: 'decor'
}, {
  id: 248,
  name: 'Арт пиксельный человек 4',
  prop: 'vw_prop_casino_art_mod_03a_c',
  cost: 35000,
  cat: 'decor'
}, {
  id: 249,
  name: 'Арт человек из камней 1',
  prop: 'vw_prop_casino_art_mod_03b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 250,
  name: 'Арт человек из камней 2',
  prop: 'vw_prop_casino_art_mod_03b_a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 251,
  name: 'Арт человек из камней 3',
  prop: 'vw_prop_casino_art_mod_03b_b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 252,
  name: 'Арт человек из камней 4',
  prop: 'vw_prop_casino_art_mod_03b_c',
  cost: 30000,
  cat: 'decor'
}, {
  id: 253,
  name: 'Арт каменная утка',
  prop: 'vw_prop_casino_art_mod_04a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 254,
  name: 'Арт каменная курица',
  prop: 'vw_prop_casino_art_mod_05a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 255,
  name: 'Арт веселый молочник',
  prop: 'vw_prop_casino_art_mod_06a',
  cost: 40000,
  cat: 'decor'
}, {
  id: 256,
  name: 'Арт сплетения',
  prop: 'vw_prop_casino_art_sh_01a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 257,
  name: 'Арт ваза 1',
  prop: 'vw_prop_casino_art_vase_01a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 258,
  name: 'Арт ваза 2',
  prop: 'vw_prop_casino_art_vase_02a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 259,
  name: 'Арт ваза 3',
  prop: 'vw_prop_casino_art_vase_03a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 260,
  name: 'Арт ваза 4',
  prop: 'vw_prop_casino_art_vase_04a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 261,
  name: 'Арт ваза 5',
  prop: 'vw_prop_casino_art_vase_05a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 262,
  name: 'Арт ваза 6',
  prop: 'vw_prop_casino_art_vase_06a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 263,
  name: 'Арт ваза 7',
  prop: 'vw_prop_casino_art_vase_07a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 264,
  name: 'Арт ваза 8',
  prop: 'vw_prop_casino_art_vase_08a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 265,
  name: 'Арт ваза 9',
  prop: 'vw_prop_casino_art_vase_09a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 266,
  name: 'Арт ваза 10',
  prop: 'vw_prop_casino_art_vase_10a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 267,
  name: 'Арт ваза 11',
  prop: 'vw_prop_casino_art_vase_11a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 268,
  name: 'Арт ваза 12',
  prop: 'vw_prop_casino_art_vase_12a',
  cost: 10000,
  cat: 'decor'
}, {
  id: 269,
  name: 'Арт мяч',
  prop: 'vw_prop_art_football_01a',
  cost: 25000,
  cat: 'decor'
}, {
  id: 270,
  name: 'Арт обьект',
  prop: 'vw_prop_art_mic_01a',
  cost: 25000,
  cat: 'decor'
}, {
  id: 271,
  name: 'Арт мопс 1',
  prop: 'vw_prop_art_pug_01a',
  cost: 35000,
  cat: 'decor'
}, {
  id: 272,
  name: 'Арт мопс 2',
  prop: 'vw_prop_art_pug_01b',
  cost: 35000,
  cat: 'decor'
}, {
  id: 273,
  name: 'Арт мопс 3',
  prop: 'vw_prop_art_pug_02a',
  cost: 35000,
  cat: 'decor'
}, {
  id: 274,
  name: 'Арт мопс 4',
  prop: 'vw_prop_art_pug_02b',
  cost: 35000,
  cat: 'decor'
}, {
  id: 275,
  name: 'Арт мопс 5',
  prop: 'vw_prop_art_pug_03a',
  cost: 35000,
  cat: 'decor'
}, {
  id: 276,
  name: 'Арт мопс 6',
  prop: 'vw_prop_art_pug_03b',
  cost: 35000,
  cat: 'decor'
}, {
  id: 277,
  name: 'Арт шары',
  prop: 'vw_prop_art_resin_balls_01a',
  cost: 80000,
  cat: 'decor'
}, {
  id: 278,
  name: 'Арт оружие в стенде',
  prop: 'vw_prop_art_resin_guns_01a',
  cost: 80000,
  cat: 'decor'
}, {
  id: 279,
  name: 'Арт старинное полотно',
  prop: 'vw_prop_art_wall_segment_01a',
  cost: 40000,
  cat: 'decor'
}, {
  id: 280,
  name: 'Арт ретро полотно 1',
  prop: 'vw_prop_art_wall_segment_02a',
  cost: 25000,
  cat: 'decor'
}, {
  id: 281,
  name: 'Арт ретро полотно 2',
  prop: 'vw_prop_art_wall_segment_02b',
  cost: 25000,
  cat: 'decor'
}, {
  id: 282,
  name: 'Арт стена',
  prop: 'vw_prop_art_wall_segment_03a',
  cost: 25000,
  cat: 'decor'
}, {
  id: 283,
  name: 'Арт крылья 1',
  prop: 'vw_prop_art_wings_01a',
  cost: 65000,
  cat: 'decor'
}, {
  id: 284,
  name: 'Арт крылья 2',
  prop: 'vw_prop_art_wings_01b',
  cost: 65000,
  cat: 'decor'
}, {
  id: 285,
  name: 'Баскет мяч 1',
  prop: 'vw_prop_casino_art_basketball_01a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 286,
  name: 'Баскет мяч 2',
  prop: 'vw_prop_casino_art_basketball_02a',
  cost: 15000,
  cat: 'decor'
}, {
  id: 287,
  name: 'Бутылка шампанского',
  prop: 'vw_prop_casino_art_bottle_01a',
  cost: 8000,
  cat: 'decor'
}, {
  id: 288,
  name: 'Кегля 1',
  prop: 'vw_prop_casino_art_bowling_01a',
  cost: 8000,
  cat: 'decor'
}, {
  id: 289,
  name: 'Кегля 2',
  prop: 'vw_prop_casino_art_bowling_01b',
  cost: 8000,
  cat: 'decor'
}, {
  id: 290,
  name: 'Кегля 3',
  prop: 'vw_prop_casino_art_bowling_02a',
  cost: 8000,
  cat: 'decor'
}, {
  id: 291,
  name: 'Шарики Eco',
  prop: 'vw_prop_casino_art_ego_01a',
  cost: 20000,
  cat: 'decor'
}, {
  id: 292,
  name: 'Статуя Лошадь 1',
  prop: 'vw_prop_casino_art_horse_01a',
  cost: 20000,
  cat: 'decor'
}, {
  id: 293,
  name: 'Статуя Лошадь 2',
  prop: 'vw_prop_casino_art_horse_01b',
  cost: 20000,
  cat: 'decor'
}, {
  id: 294,
  name: 'Статуя Лошадь 3',
  prop: 'vw_prop_casino_art_horse_01c',
  cost: 20000,
  cat: 'decor'
}, {
  id: 295,
  name: 'Статуя Рысь 1',
  prop: 'vw_prop_casino_art_panther_01a',
  cost: 30000,
  cat: 'decor'
}, {
  id: 296,
  name: 'Статуя Рысь 2',
  prop: 'vw_prop_casino_art_panther_01b',
  cost: 30000,
  cat: 'decor'
}, {
  id: 297,
  name: 'Статуя Рысь 3',
  prop: 'vw_prop_casino_art_panther_01c',
  cost: 30000,
  cat: 'decor'
}, {
  id: 308,
  name: 'Статуя инопланетянина',
  prop: 'h4_prop_h4_art_pant_01a',
  cost: 20000,
  cat: 'decor'
}, {
  id: 337,
  name: 'Одежда на вешалке',
  prop: 'prop_cs_shirt_01',
  cost: 8000,
  cat: 'decor'
}, {
  id: 338,
  name: 'Стопка одежды',
  prop: 'prop_cs_t_shirt_pile',
  cost: 4000,
  cat: 'decor'
}, {
  id: 339,
  name: 'Синяя голова',
  prop: 'prop_phys_wades_head',
  cost: 8000,
  cat: 'decor'
}, {
  id: 340,
  name: 'Алкоголь 1',
  prop: 'beerrow_local',
  cost: 25000,
  cat: 'decor'
}, {
  id: 341,
  name: 'Алкоголь 2',
  prop: 'beerrow_world',
  cost: 25000,
  cat: 'decor'
}, {
  id: 342,
  name: 'Бутылка декоративная',
  prop: 'apa_mp_h_acc_bottle_02',
  cost: 15000,
  cat: 'decor'
}, {
  id: 343,
  name: 'Блюдо керамическое',
  prop: 'apa_mp_h_acc_bowl_ceramic_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 344,
  name: 'Свечи 1',
  prop: 'apa_mp_h_acc_candles_01',
  cost: 8000,
  cat: 'decor'
}, {
  id: 345,
  name: 'Свечи 2',
  prop: 'apa_mp_h_acc_candles_02',
  cost: 8000,
  cat: 'decor'
}, {
  id: 346,
  name: 'Свечи 3',
  prop: 'apa_mp_h_acc_candles_04',
  cost: 8000,
  cat: 'decor'
}, {
  id: 347,
  name: 'Свечи 4',
  prop: 'apa_mp_h_acc_candles_05',
  cost: 8000,
  cat: 'decor'
}, {
  id: 348,
  name: 'Свечи 5',
  prop: 'apa_mp_h_acc_candles_06',
  cost: 8000,
  cat: 'decor'
}, {
  id: 349,
  name: 'Кофемашина',
  prop: 'apa_mp_h_acc_coffeemachine_01',
  cost: 20000,
  cat: 'decor'
}, {
  id: 350,
  name: 'Маска декорная',
  prop: 'apa_mp_h_acc_dec_head_01',
  cost: 15000,
  cat: 'decor'
}, {
  id: 351,
  name: 'Узорное блюдо 1',
  prop: 'apa_mp_h_acc_dec_plate_01',
  cost: 13000,
  cat: 'decor'
}, {
  id: 352,
  name: 'Узорное блюдо 2',
  prop: 'apa_mp_h_acc_dec_plate_02',
  cost: 13000,
  cat: 'decor'
}, {
  id: 353,
  name: 'Футуристичный объект',
  prop: 'apa_mp_h_acc_dec_sculpt_03',
  cost: 8000,
  cat: 'decor'
}, {
  id: 354,
  name: 'Чайный набор на подносе',
  prop: 'apa_mp_h_acc_drink_tray_02',
  cost: 5000,
  cat: 'decor'
}, {
  id: 355,
  name: 'Набор фруктов 1',
  prop: 'apa_mp_h_acc_fruitbowl_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 356,
  name: 'Набор фруктов 2',
  prop: 'apa_mp_h_acc_fruitbowl_02',
  cost: 5000,
  cat: 'decor'
}, {
  id: 357,
  name: 'Арт кубы 1',
  prop: 'apa_mp_h_acc_jar_02',
  cost: 6000,
  cat: 'decor'
}, {
  id: 358,
  name: 'Арт кубы 2',
  prop: 'apa_mp_h_acc_jar_03',
  cost: 6000,
  cat: 'decor'
}, {
  id: 359,
  name: 'Арт кубы 3',
  prop: 'apa_mp_h_acc_jar_04',
  cost: 6000,
  cat: 'decor'
}, {
  id: 360,
  name: 'Старинный телефон',
  prop: 'apa_mp_h_acc_phone_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 361,
  name: 'Арт блюдо с камушками',
  prop: 'apa_mp_h_acc_pot_pouri_01',
  cost: 8000,
  cat: 'decor'
}, {
  id: 362,
  name: 'Свечи',
  prop: 'apa_mp_h_acc_tray_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 363,
  name: 'Доллары 1',
  prop: 'bkr_cash_scatter_02',
  cost: 16000,
  cat: 'decor'
}, {
  id: 364,
  name: 'Доллары 2',
  prop: 'bkr_prop_bkr_cash_roll_01',
  cost: 25000,
  cat: 'decor'
}, {
  id: 365,
  name: 'Доллары 3',
  prop: 'bkr_prop_bkr_cashpile_01',
  cost: 100000,
  cat: 'decor'
}, {
  id: 366,
  name: 'Порошок',
  prop: 'bkr_prop_coke_bakingsoda',
  cost: 5000,
  cat: 'decor'
}, {
  id: 367,
  name: 'Модель в коробке boxeddoll',
  prop: 'bkr_prop_coke_boxeddoll',
  cost: 10000,
  cat: 'decor'
}, {
  id: 368,
  name: 'Модель boxeddoll',
  prop: 'bkr_prop_coke_doll',
  cost: 15000,
  cat: 'decor'
}, {
  id: 369,
  name: 'Металическое блюдо',
  prop: 'bkr_prop_coke_metalbowl_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 370,
  name: 'Миксер',
  prop: 'bkr_prop_coke_mixer_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 371,
  name: 'Ступка',
  prop: 'bkr_prop_coke_mortalpestle',
  cost: 5000,
  cat: 'decor'
}, {
  id: 372,
  name: 'Таблетки',
  prop: 'bkr_prop_coke_painkiller_01a',
  cost: 5000,
  cat: 'decor'
}, {
  id: 373,
  name: 'Банка',
  prop: 'bkr_prop_coke_powderbottle_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 374,
  name: 'Кейс 1',
  prop: 'bkr_prop_biker_case_shut',
  cost: 15000,
  cat: 'decor'
}, {
  id: 375,
  name: 'Кейс 2',
  prop: 'bkr_prop_biker_gcase_s',
  cost: 30000,
  cat: 'decor'
}, {
  id: 376,
  name: 'Коробка шампанского',
  prop: 'ex_office_swag_booze_cigs',
  cost: 20000,
  cat: 'decor'
}, {
  id: 377,
  name: 'Коробка виски',
  prop: 'ex_office_swag_booze_cigs3',
  cost: 25000,
  cat: 'decor'
}, {
  id: 378,
  name: 'Коробки електроники',
  prop: 'ex_office_swag_electronic',
  cost: 20000,
  cat: 'decor'
}, {
  id: 379,
  name: 'Упаковки таблеток',
  prop: 'ex_office_swag_pills2',
  cost: 5000,
  cat: 'decor'
}, {
  id: 380,
  name: 'Ноутбук',
  prop: 'ex_prop_ex_laptop_01a',
  cost: 20000,
  cat: 'decor'
}, {
  id: 381,
  name: 'Сигара',
  prop: 'ex_prop_exec_cigar_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 382,
  name: 'Зажигалка',
  prop: 'ex_prop_exec_lighter_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 383,
  name: 'Приставка',
  prop: 'ex_prop_tv_settop_box',
  cost: 5000,
  cat: 'decor'
}, {
  id: 385,
  name: 'Сахарница',
  prop: 'prop_food_sugarjar',
  cost: 5000,
  cat: 'decor'
}, {
  id: 386,
  name: 'Факс',
  prop: 'prop_fax_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 387,
  name: 'Пепельница',
  prop: 'prop_fib_ashtray_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 388,
  name: 'Телефон',
  prop: 'prop_amb_phone',
  cost: 12000,
  cat: 'decor'
}, {
  id: 389,
  name: 'Корзина для фруктов',
  prop: 'prop_fruit_basket',
  cost: 10000,
  cat: 'decor'
}, {
  id: 390,
  name: 'Статуетка',
  prop: 'prop_idol_01_error',
  cost: 15000,
  cat: 'decor'
}, {
  id: 391,
  name: 'Камера',
  prop: 'prop_pap_camera_01',
  cost: 25000,
  cat: 'decor'
}, {
  id: 392,
  name: 'Катана',
  prop: 'prop_cs_katana_01',
  cost: 50000,
  cat: 'decor'
}, {
  id: 393,
  name: 'Наручники',
  prop: 'prop_cs_cuffs_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 394,
  name: 'Помада',
  prop: 'prop_cs_lipstick',
  cost: 5000,
  cat: 'decor'
}, {
  id: 395,
  name: 'Газировка',
  prop: 'prop_ld_can_01b',
  cost: 5000,
  cat: 'decor'
}, {
  id: 396,
  name: 'Сигареты',
  prop: 'prop_ld_fags_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 397,
  name: 'Зеленая свеча',
  prop: 'prop_mem_candle_04',
  cost: 5000,
  cat: 'decor'
}, {
  id: 398,
  name: 'Красная свеча',
  prop: 'prop_mem_candle_05',
  cost: 5000,
  cat: 'decor'
}, {
  id: 399,
  name: 'Синяя свеча',
  prop: 'prop_mem_candle_06',
  cost: 5000,
  cat: 'decor'
}, {
  id: 401,
  name: 'Арахис на блюдце',
  prop: 'prop_peanut_bowl_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 402,
  name: 'Ром',
  prop: 'prop_rum_bottle',
  cost: 8000,
  cat: 'decor'
}, {
  id: 403,
  name: 'Листовка',
  prop: 'v_ilev_csr_lod_boarded',
  cost: 5000,
  cat: 'decor'
}, {
  id: 404,
  name: 'Декорный шар',
  prop: 'v_ilev_exball_blue',
  cost: 15000,
  cat: 'decor'
}, {
  id: 405,
  name: 'Декорный шар 2',
  prop: 'v_ilev_exball_grey',
  cost: 15000,
  cat: 'decor'
}, {
  id: 406,
  name: 'Лампа кубическая',
  prop: 'v_ilev_fh_lampa_on',
  cost: 15000,
  cat: 'lamp'
}, {
  id: 407,
  name: 'Полотно для проектора',
  prop: 'v_ilev_lest_bigscreen',
  cost: 20000,
  cat: 'decor'
}, {
  id: 408,
  name: 'Кувшин',
  prop: 'v_ilev_m_pitcher',
  cost: 5000,
  cat: 'decor'
}, {
  id: 409,
  name: 'Подушка на диван',
  prop: 'v_ilev_m_sofacushion',
  cost: 5000,
  cat: 'decor'
}, {
  id: 410,
  name: 'Мотивирующий плакат 1',
  prop: 'v_ilev_mchalkbrd_1',
  cost: 10000,
  cat: 'decor'
}, {
  id: 411,
  name: 'Мотивирующий плакат 2',
  prop: 'v_ilev_mchalkbrd_2',
  cost: 10000,
  cat: 'decor'
}, {
  id: 412,
  name: 'Мотивирующий плакат 3',
  prop: 'v_ilev_mchalkbrd_3',
  cost: 10000,
  cat: 'decor'
}, {
  id: 413,
  name: 'Мотивирующий плакат 4',
  prop: 'v_ilev_mchalkbrd_4',
  cost: 10000,
  cat: 'decor'
}, {
  id: 414,
  name: 'Мотивирующий плакат 5',
  prop: 'v_ilev_mchalkbrd_5',
  cost: 10000,
  cat: 'decor'
}, {
  id: 415,
  name: 'Кухонный кран',
  prop: 'v_ilev_mm_faucet',
  cost: 7000,
  cat: 'plumbing'
}, {
  id: 416,
  name: 'Холодильник',
  prop: 'v_ilev_mm_fridgeint',
  cost: 50000,
  cat: 'plumbing'
}, {
  id: 417,
  name: 'Книга',
  prop: 'v_ilev_mp_bedsidebook',
  cost: 5000,
  cat: 'decor'
}, {
  id: 418,
  name: 'Мишка',
  prop: 'v_ilev_mr_rasberryclean',
  cost: 7000,
  cat: 'decor'
}, {
  id: 419,
  name: 'Старинная ваза 2',
  prop: 'v_res_cherubvase',
  cost: 5000,
  cat: 'decor'
}, {
  id: 420,
  name: 'Старинная ваза 3',
  prop: 'v_res_mbronzvase',
  cost: 5000,
  cat: 'decor'
}, {
  id: 421,
  name: 'Ваза с цветами 1',
  prop: 'v_res_mvasechinese',
  cost: 15000,
  cat: 'decor'
}, {
  id: 422,
  name: 'Ваза с цветами 2',
  prop: 'v_res_rosevase',
  cost: 15000,
  cat: 'decor'
}, {
  id: 423,
  name: 'Ваза с цветами 3',
  prop: 'v_res_rosevasedead',
  cost: 15000,
  cat: 'decor'
}, {
  id: 424,
  name: 'Тумба для обуви',
  prop: 'v_res_tre_sideboard',
  cost: 15000,
  cat: 'chest'
}, {
  id: 425,
  name: 'Томаты',
  prop: 'v_ret_247_choptom',
  cost: 5000,
  cat: 'decor'
}, {
  id: 426,
  name: 'Кола',
  prop: 'v_ret_247_popcan2',
  cost: 5000,
  cat: 'decor'
}, {
  id: 427,
  name: 'Кукуруза',
  prop: 'v_ret_247_swtcorn2',
  cost: 5000,
  cat: 'decor'
}, {
  id: 428,
  name: 'Пицца',
  prop: 'v_ret_fh_pizza01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 429,
  name: 'Ящик пива 1',
  prop: 'v_ret_ml_beerben1',
  cost: 7000,
  cat: 'decor'
}, {
  id: 430,
  name: 'Ящик пива 2',
  prop: 'v_ret_ml_beerbla1',
  cost: 7000,
  cat: 'decor'
}, {
  id: 431,
  name: 'Ящик пива 3',
  prop: 'v_ret_ml_beerlog1',
  cost: 7000,
  cat: 'decor'
}, {
  id: 432,
  name: 'Принтер',
  prop: 'prop_printer_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 433,
  name: 'CD disk',
  prop: 'v_res_cd',
  cost: 3000,
  cat: 'decor'
}, {
  id: 434,
  name: 'Канцелярия',
  prop: 'v_res_desktidy',
  cost: 5000,
  cat: 'decor'
}, {
  id: 435,
  name: 'Расческа',
  prop: 'p_cs_comb_01',
  cost: 3000,
  cat: 'decor'
}, {
  id: 436,
  name: 'Старинная ваза с цветами 1',
  prop: 'p_int_jewel_plant_01',
  cost: 20000,
  cat: 'decor'
}, {
  id: 437,
  name: 'Старинная ваза с цветами 2',
  prop: 'p_int_jewel_plant_02',
  cost: 20000,
  cat: 'decor'
}, {
  id: 438,
  name: 'Гитара 1',
  prop: 'prop_acc_guitar_01',
  cost: 15000,
  cat: 'decor'
}, {
  id: 439,
  name: 'Гитара 2',
  prop: 'prop_el_guitar_01',
  cost: 15000,
  cat: 'decor'
}, {
  id: 440,
  name: 'Гитара 3',
  prop: 'prop_el_guitar_02',
  cost: 15000,
  cat: 'decor'
}, {
  id: 441,
  name: 'Гитара 4',
  prop: 'prop_el_guitar_03',
  cost: 15000,
  cat: 'decor'
}, {
  id: 442,
  name: 'Настенные часы 1',
  prop: 'prop_egg_clock_01',
  cost: 10000,
  cat: 'decor'
}, {
  id: 443,
  name: 'Настенные часы 2',
  prop: 'prop_hotel_clock_01',
  cost: 30000,
  cat: 'decor'
}, {
  id: 444,
  name: 'Коврик для йоги 1',
  prop: 'prop_rolled_yoga_mat',
  cost: 5000,
  cat: 'decor'
}, {
  id: 445,
  name: 'Телескоп',
  prop: 'prop_t_telescope_01b',
  cost: 35000,
  cat: 'decor'
}, {
  id: 446,
  name: 'Коврик для йоги 2',
  prop: 'p_yoga_mat_01_s',
  cost: 5000,
  cat: 'decor'
}, {
  id: 447,
  name: 'Коврик для йоги 3',
  prop: 'p_yoga_mat_02_s',
  cost: 5000,
  cat: 'decor'
}, {
  id: 448,
  name: 'Бутылка пива',
  prop: 'prop_amb_beer_bottle',
  cost: 5000,
  cat: 'decor'
}, {
  id: 449,
  name: 'Пончик',
  prop: 'prop_amb_donut',
  cost: 5000,
  cat: 'decor'
}, {
  id: 450,
  name: 'Бонг',
  prop: 'prop_bong_01',
  cost: 7000,
  cat: 'decor'
}, {
  id: 451,
  name: 'Джойстик',
  prop: 'prop_controller_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 452,
  name: 'Камера',
  prop: 'prop_cs_cctv',
  cost: 10000,
  cat: 'decor'
}, {
  id: 453,
  name: 'Бокал',
  prop: 'prop_cs_champ_flute',
  cost: 5000,
  cat: 'decor'
}, {
  id: 454,
  name: 'Дилдо',
  prop: 'prop_cs_dildo_01',
  cost: 50000,
  cat: 'decor'
}, {
  id: 455,
  name: 'Фото',
  prop: 'prop_cs_frank_photo',
  cost: 5000,
  cat: 'decor'
}, {
  id: 456,
  name: 'Сушилка',
  prop: 'prop_cs_ironing_board',
  cost: 5000,
  cat: 'decor'
}, {
  id: 457,
  name: 'Чайник',
  prop: 'prop_cs_kettle_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 458,
  name: 'Фоторамка',
  prop: 'prop_cs_photoframe_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 459,
  name: 'Блюдо с едой',
  prop: 'prop_cs_plate_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 461,
  name: 'Наушники',
  prop: 'prop_ear_defenders_01',
  cost: 5000,
  cat: 'decor'
}, {
  id: 462,
  name: 'Настенные часы лофт',
  prop: 'prop_id2_20_clock',
  cost: 25000,
  cat: 'decor'
}, {
  id: 463,
  name: 'Колонка',
  prop: 'prop_mp3_dock',
  cost: 7000,
  cat: 'decor'
}, {
  id: 464,
  name: 'Бумбокс',
  prop: 'prop_tapeplayer_01',
  cost: 7000,
  cat: 'decor'
}, {
  id: 465,
  name: 'Штаны',
  prop: 'p_laz_j02_s',
  cost: 7000,
  cat: 'decor'
}, {
  id: 466,
  name: 'Ковер',
  prop: 'p_loose_rag_01_s',
  cost: 5000,
  cat: 'decor'
}, {
  id: 467,
  name: 'Стопка одежды 2',
  prop: 'p_t_shirt_pile_s',
  cost: 5000,
  cat: 'decor'
}, {
  id: 468,
  name: 'Лампа на подвесах',
  prop: 'prop_fragtest_cnst_06',
  cost: 40000,
  cat: 'lamp'
}, {
  id: 469,
  name: 'Таблетки',
  prop: 'ng_proc_drug01a002',
  cost: 5000,
  cat: 'decor'
}, {
  id: 470,
  name: 'Обогреватель',
  prop: 'prop_elec_heater_01',
  cost: 10000,
  cat: 'decor'
}, {
  id: 471,
  name: 'Колонка большая 1',
  prop: 'prop_speaker_07',
  cost: 20000,
  cat: 'decor'
}, {
  id: 472,
  name: 'Колонка большая 2',
  prop: 'prop_speaker_06',
  cost: 20000,
  cat: 'decor'
}, {
  id: 473,
  name: 'Колонка большая 3',
  prop: 'prop_speaker_03',
  cost: 20000,
  cat: 'decor'
}, {
  id: 474,
  name: 'Микроволновка 1',
  prop: 'prop_micro_02',
  cost: 10000,
  cat: 'decor'
}, {
  id: 475,
  name: 'Микроволновка 2',
  prop: 'prop_micro_04',
  cost: 15000,
  cat: 'decor'
}, {
  id: 476,
  name: 'Чашка 1',
  prop: 'prop_mug_02',
  cost: 5000,
  cat: 'decor'
}, {
  id: 477,
  name: 'Чашка 2',
  prop: 'prop_mug_03',
  cost: 5000,
  cat: 'decor'
}, {
  id: 478,
  name: 'Чашка 3',
  prop: 'prop_mug_04',
  cost: 5000,
  cat: 'decor'
}, {
  id: 479,
  name: 'Сахарница',
  prop: 'v_res_fa_potsug',
  cost: 5000,
  cat: 'decor'
}, {
  id: 480,
  name: 'Чай',
  prop: 'v_res_fa_pottea',
  cost: 5000,
  cat: 'decor'
}, {
  id: 481,
  name: 'Специи 1',
  prop: 'v_res_foodjara',
  cost: 5000,
  cat: 'decor'
}, {
  id: 482,
  name: 'Специи 2',
  prop: 'v_res_foodjarb',
  cost: 5000,
  cat: 'decor'
}, {
  id: 483,
  name: 'Специи 3',
  prop: 'v_res_foodjarc',
  cost: 5000,
  cat: 'decor'
}, {
  id: 484,
  name: 'Чашка',
  prop: 'v_res_mcofcupdirt',
  cost: 5000,
  cat: 'decor'
}, {
  id: 485,
  name: 'Тарелка 1',
  prop: 'v_res_mbowl',
  cost: 5000,
  cat: 'decor'
}, {
  id: 486,
  name: 'Тарелка 2',
  prop: 'v_res_mplatelrg',
  cost: 5000,
  cat: 'decor'
}, {
  id: 487,
  name: 'Стопка тарелок',
  prop: 'v_res_tt_bowlpile02',
  cost: 5000,
  cat: 'decor'
}, {
  id: 488,
  name: 'Холодильник пива',
  prop: 'prop_bar_beerfridge_01',
  cost: 70000,
  cat: 'decor'
}, {
  id: 489,
  name: 'Шейкер',
  prop: 'prop_bar_cockshaker',
  cost: 5000,
  cat: 'decor'
}, {
  id: 490,
  name: 'Набор трубочек',
  prop: 'prop_bar_drinkstraws',
  cost: 5000,
  cat: 'decor'
}, {
  id: 491,
  name: 'Закуска лимон',
  prop: 'prop_bar_lemons',
  cost: 5000,
  cat: 'decor'
}, {
  id: 492,
  name: 'Закуска лайм',
  prop: 'prop_bar_limes',
  cost: 5000,
  cat: 'decor'
}, {
  id: 493,
  name: 'Закуска орешки',
  prop: 'prop_bar_nuts',
  cost: 5000,
  cat: 'decor'
}, {
  id: 494,
  name: 'Виски Richards',
  prop: 'prop_bottle_richard',
  cost: 10000,
  cat: 'decor'
}, {
  id: 495,
  name: 'Коньяк',
  prop: 'prop_bottle_cognac',
  cost: 15000,
  cat: 'decor'
}, {
  id: 496,
  name: 'Шампанское',
  prop: 'prop_champ_01b',
  cost: 10000,
  cat: 'decor'
}, {
  id: 497,
  name: 'Текила',
  prop: 'prop_tequila_bottle',
  cost: 10000,
  cat: 'decor'
}, {
  id: 498,
  name: 'Бильярдный стол 1',
  prop: 'prop_pooltable_02',
  cost: 120000,
  cat: 'decor'
}, {
  id: 499,
  name: 'Бильярдный стол 2',
  prop: 'prop_pooltable_3b',
  cost: 120000,
  cat: 'decor'
}, {
  id: 500,
  name: 'Дартс',
  prop: 'prop_dart_bd_01',
  cost: 15000,
  cat: 'decor'
}, {
  id: 501,
  name: 'Ковер 1',
  prop: 'apa_mp_h_acc_rugwooll_03',
  cost: 10000,
  cat: 'decor'
}, {
  id: 502,
  name: 'Ковер 2',
  prop: 'apa_mp_h_acc_rugwoolm_01',
  cost: 10000,
  cat: 'decor'
}, {
  id: 503,
  name: 'Ковер 3',
  prop: 'apa_mp_h_acc_rugwoolm_02',
  cost: 10000,
  cat: 'decor'
}, {
  id: 504,
  name: 'Ковер 4',
  prop: 'apa_mp_h_acc_rugwoolm_03',
  cost: 10000,
  cat: 'decor'
}, {
  id: 505,
  name: 'Ковер 5',
  prop: 'apa_mp_h_acc_rugwoolm_04',
  cost: 10000,
  cat: 'decor'
}, {
  id: 506,
  name: 'Ковер 6',
  prop: 'apa_mp_h_acc_rugwools_01',
  cost: 10000,
  cat: 'decor'
}, {
  id: 507,
  name: 'Ковер 7',
  prop: 'apa_mp_h_acc_rugwools_03',
  cost: 10000,
  cat: 'decor'
}, {
  id: 508,
  name: 'Шкаф 1',
  prop: 'apa_mp_h_str_shelffloorm_02',
  cost: 30000,
  cat: 'wardrobe'
}, {
  id: 509,
  name: 'Шкаф 2',
  prop: 'apa_mp_h_str_shelffreel_01',
  cost: 30000,
  cat: 'wardrobe'
}, {
  id: 510,
  name: 'Шкаф 3',
  prop: 'apa_mp_h_str_shelfwallm_01',
  cost: 15000,
  cat: 'wardrobe'
}, {
  id: 511,
  name: 'Беговая дорожка',
  prop: 'apa_p_apdlc_treadmill_s',
  cost: 60000,
  cat: 'decor'
}, {
  id: 512,
  name: 'Шкаф с одеждой',
  prop: 'bkr_prop_biker_garage_locker_01',
  cost: 15000,
  cat: 'wardrobe'
}, {
  id: 521,
  name: 'Подвесная лампа 2',
  prop: 'xm_base_cia_lamp_ceiling_02a',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 522,
  name: 'Подвесная лампа 3',
  prop: 'ch_prop_ch_lamp_ceiling_01a',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 523,
  name: 'Подвесная лампа 4',
  prop: 'apa_mp_h_lampbulb_multiple_a',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 524,
  name: 'Подвесная лампа 5',
  prop: 'apa_mp_h_lit_lightpendant_01',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 525,
  name: 'Подвесная лампа 6',
  prop: 'apa_mp_h_lit_lightpendant_05',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 526,
  name: 'Подвесная лампа 7',
  prop: 'apa_mp_h_lit_lightpendant_05b',
  cost: 40000,
  cat: 'lamp'
}, {
  id: 527,
  name: 'Подвесная лампа 8',
  prop: 'bkr_prop_biker_pendant_light',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 528,
  name: 'Подвесная лампа 9',
  prop: 'xs_prop_arena_lights_ceiling_l_c',
  cost: 25000,
  cat: 'lamp'
}, {
  id: 529,
  name: 'Подвесная лампа 10',
  prop: 'ex_mp_h_lit_lightpendant_01',
  cost: 30000,
  cat: 'lamp'
}, {
  id: 531,
  name: 'Подвесная лампа 11',
  prop: 'v_9_glasslamps',
  cost: 50000,
  cat: 'lamp'
}, {
  id: 533,
  name: 'Раковина 1',
  prop: 'prop_sink_02',
  cost: 7000,
  cat: 'plumbing'
}, {
  id: 534,
  name: 'Раковина 2',
  prop: 'prop_sink_04',
  cost: 7000,
  cat: 'plumbing'
}, {
  id: 5340,
  name: 'Раковина 3',
  prop: 'prop_sink_05',
  cost: 7000,
  cat: 'plumbing'
}, {
  id: 535,
  name: 'Раковина 4',
  prop: 'prop_sink_06',
  cost: 7000,
  cat: 'plumbing'
}, {
  id: 536,
  name: 'Унитаз',
  prop: 'prop_toilet_01',
  cost: 7000,
  cat: 'plumbing'
}, {
  id: 537,
  name: 'Унитаз',
  prop: 'prop_toilet_02',
  cost: 7000,
  cat: 'plumbing'
}, {
  id: 538,
  name: 'Ершик',
  prop: 'prop_toilet_brush_01',
  cost: 5000,
  cat: 'plumbing'
}, {
  id: 539,
  name: 'Туалетная бумага',
  prop: 'prop_toilet_roll_02',
  cost: 5000,
  cat: 'plumbing'
}, {
  id: 540,
  name: 'Ванный декор 1',
  prop: 'prop_toilet_shamp_01',
  cost: 7000,
  cat: 'decor'
}, {
  id: 541,
  name: 'Ванный декор 2',
  prop: 'prop_toilet_shamp_02',
  cost: 7000,
  cat: 'decor'
}, {
  id: 542,
  name: 'Ванный декор 3',
  prop: 'prop_toilet_soap_01',
  cost: 7000,
  cat: 'decor'
}, {
  id: 543,
  name: 'Ванный декор 4',
  prop: 'prop_toilet_soap_03',
  cost: 7000,
  cat: 'decor'
}, {
  id: 544,
  name: 'Ванный декор 5',
  prop: 'prop_toilet_soap_04',
  cost: 7000,
  cat: 'decor'
}, {
  id: 545,
  name: 'Ванная',
  prop: 'apa_mp_h_bathtub_01',
  cost: 50000,
  cat: 'plumbing'
}, {
  id: 546,
  name: 'Старинный шкаф',
  prop: 'v_res_mcupboard',
  cost: 10000,
  cat: 'wardrobe'
}, {
  id: 552,
  name: 'Шкаф белый',
  prop: 'v_res_tre_wardrobe',
  cost: 20000,
  cat: 'wardrobe'
}, {
  id: 553,
  name: 'Набор ножей 1',
  prop: 'v_res_mknifeblock',
  cost: 7000,
  cat: 'decor'
}, {
  id: 554,
  name: 'Набор ножей 2',
  prop: 'v_res_mkniferack',
  cost: 7000,
  cat: 'decor'
}, {
  id: 555,
  name: 'Холодильник 1',
  prop: 'v_res_fridgemodsml',
  cost: 40000,
  cat: 'plumbing'
}, {
  id: 556,
  name: 'Набор лопаток',
  prop: 'v_res_mutensils',
  cost: 7000,
  cat: 'decor'
}, {
  id: 557,
  name: 'Газовая духовка',
  prop: 'prop_cooker_03',
  cost: 25000,
  cat: 'plumbing'
}];
},{}],"tEee":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectManager = void 0;
var _furniture = require("../../../../shared/houses/furniture/furniture.config");
class ObjectManager {
  constructor(id, cfgId, dimension) {
    this.moveType = true;
    this.vector = 0;
    this.vectors = ['x', 'y', 'z'];
    this.speed = 2;
    this.speeds = [0.01, 0.05, 0.1, 0.5, 1];
    this.id = id;
    this.cfgId = cfgId;
    if (!this.cfg) return;
    const forward = mp.players.local.getForwardVector(),
      pos = mp.players.local.position;
    this.position = new mp.Vector3(pos.x + forward.x, pos.y + forward.y, pos.z + forward.z);
    this.rotation = new mp.Vector3(0, 0, 0);
    this.entity = mp.objects.new(mp.game.joaat(this.cfg.prop), this.position, {
      dimension,
      rotation: new mp.Vector3(0, 0, 0)
    });
  }
  changeVector(toggle) {
    if (toggle) {
      if (this.vector === this.vectors.length - 1) {
        this.vector = 0;
      } else {
        this.vector++;
      }
    } else {
      if (this.vector === 0) {
        this.vector = this.vectors.length - 1;
      } else {
        this.vector--;
      }
    }
    return this.vectors[this.vector];
  }
  changeSpeed(toggle) {
    if (toggle) {
      if (this.speed === this.speeds.length - 1) return;
      this.speed++;
    } else {
      if (this.speed === 0) return;
      this.speed--;
    }
  }
  changeMoveType() {
    this.moveType = !this.moveType;
    return this.moveType;
  }
  move(toggle) {
    if (toggle) {
      if (this.moveType) {
        this.position[this.vectors[this.vector]] = this.position[this.vectors[this.vector]] + this.speeds[this.speed];
      } else {
        this.rotation[this.vectors[this.vector]] = this.rotation[this.vectors[this.vector]] + this.speeds[this.speed];
      }
    } else {
      if (this.moveType) {
        this.position[this.vectors[this.vector]] = this.position[this.vectors[this.vector]] - this.speeds[this.speed];
      } else {
        this.rotation[this.vectors[this.vector]] = this.rotation[this.vectors[this.vector]] - this.speeds[this.speed];
      }
    }
    this.onEntityMove();
  }
  onEntityMove() {
    var _this$entity;
    if (!((_this$entity = this.entity) !== null && _this$entity !== void 0 && _this$entity.doesExist())) return;
    if (this.moveType) {
      this.entity.setCoords(this.position.x, this.position.y, this.position.z, false, false, false, false);
    } else {
      this.entity.setRotation(this.rotation.x, this.rotation.y, this.rotation.z, 2, true);
    }
  }
  save() {
    return [this.position, this.rotation];
  }
  destroy() {
    this.entity.destroy();
  }
  get cfg() {
    return _furniture.furnitureList.find(el => el.id === this.cfgId);
  }
}
exports.ObjectManager = ObjectManager;
},{"../../../../shared/houses/furniture/furniture.config":"sFZG"}],"okT1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOAD_INTERIORS = exports.INTERIORS_FOR_FURNITURE = void 0;
const INTERIORS_FOR_FURNITURE = exports.INTERIORS_FOR_FURNITURE = [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44];
const LOAD_INTERIORS = exports.LOAD_INTERIORS = [{
  interiorId: 24,
  position: new mp.Vector3(37, -1915, -0),
  prop: 'appartv1'
}, {
  interiorId: 25,
  position: new mp.Vector3(37, -1915, -0),
  prop: 'appartv2'
}, {
  interiorId: 26,
  position: new mp.Vector3(37, -1915, -0),
  prop: 'appartv3'
}, {
  interiorId: 27,
  position: new mp.Vector3(-141.72, -1040.4, -8.51915),
  prop: 'appartmedv1'
}, {
  interiorId: 28,
  position: new mp.Vector3(-141.72, -1040.4, -8.51915),
  prop: 'appartmedv2'
}, {
  interiorId: 29,
  position: new mp.Vector3(-141.72, -1040.4, -8.51915),
  prop: 'appartmedv3'
}, {
  interiorId: 30,
  position: new mp.Vector3(-827.6473, -723.2551, 103.7422),
  prop: 'apparthighv1'
}, {
  interiorId: 31,
  position: new mp.Vector3(-827.6473, -723.2551, 103.7422),
  prop: 'apparthighv2'
}, {
  interiorId: 32,
  position: new mp.Vector3(-827.6473, -723.2551, 103.7422),
  prop: 'apparthighv3'
}, {
  interiorId: 33,
  position: new mp.Vector3(-827.6473, -722.9208, 90.67331),
  prop: 'custappart2v1'
}, {
  interiorId: 34,
  position: new mp.Vector3(-827.6473, -722.9208, 90.67331),
  prop: 'custappart2v2'
}, {
  interiorId: 35,
  position: new mp.Vector3(-827.6473, -722.9208, 90.67331),
  prop: 'custappart2v3'
}, {
  interiorId: 36,
  position: new mp.Vector3(-822.8305, -721.5496, 83.67345),
  prop: 'custappart1v1'
}, {
  interiorId: 37,
  position: new mp.Vector3(-822.8305, -721.5496, 83.67345),
  prop: 'custappart1v2'
}, {
  interiorId: 38,
  position: new mp.Vector3(-822.8305, -721.5496, 83.67345),
  prop: 'custappart1v3'
}, {
  interiorId: 39,
  position: new mp.Vector3(-27.34650000, -589.85050000, 51.22781000),
  prop: 'inthighvar1'
}, {
  interiorId: 40,
  position: new mp.Vector3(-27.34650000, -589.85050000, 51.22781000),
  prop: 'inthighvar2'
}, {
  interiorId: 41,
  position: new mp.Vector3(-27.34650000, -589.85050000, 51.22781000),
  prop: 'inthighvar3'
}, {
  interiorId: 42,
  position: new mp.Vector3(-691.3727, 325.8996, 129.6608),
  prop: 'appartmedictowerv1'
}, {
  interiorId: 43,
  position: new mp.Vector3(-691.3727, 325.8996, 129.6608),
  prop: 'appartmedictowerv2'
}, {
  interiorId: 44,
  position: new mp.Vector3(-691.3727, 325.8996, 129.6608),
  prop: 'appartmedictowerv3'
}];
},{}],"O0M1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layoutsData = exports.interiorsData = void 0;
const layoutsData = exports.layoutsData = [{
  id: 0,
  name: 'Дешевый',
  img: 'layout0'
}, {
  id: 1,
  name: 'Средний',
  img: 'layout1'
}, {
  id: 2,
  name: 'Дорогой',
  img: ['layout2-1', 'layout2-2']
}, {
  id: 3,
  name: "Двухэтажный",
  img: ['layout3-1', 'layout3-2']
}, {
  id: 4,
  name: "Элитная",
  img: 'layout4'
}, {
  id: 5,
  name: "Элитная 3х этажная",
  img: ['layout5-1', 'layout5-2', 'layout5-3']
}, {
  id: 6,
  name: "Престижная с бассейном",
  img: ['layout6-1', 'layout6-2']
}];
const interiorsData = exports.interiorsData = [{
  id: 0,
  interiorId: 24,
  name: 'Пользовательская №1',
  cost: 200000,
  isDonate: false,
  img: 'interior24',
  layoutId: 0
}, {
  id: 1,
  interiorId: 25,
  name: 'Пользовательская №2',
  cost: 250000,
  isDonate: false,
  img: 'interior25',
  layoutId: 0
}, {
  id: 2,
  interiorId: 26,
  name: 'Пользовательская №3',
  cost: 300000,
  isDonate: false,
  img: 'interior26',
  layoutId: 0
}, {
  id: 3,
  interiorId: 27,
  name: 'Пользовательская №4',
  cost: 500000,
  isDonate: false,
  img: 'interior27',
  layoutId: 1
}, {
  id: 4,
  interiorId: 28,
  name: 'Пользовательская №5',
  cost: 600000,
  isDonate: false,
  img: 'interior28',
  layoutId: 1
}, {
  id: 5,
  interiorId: 29,
  name: 'Пользовательская №6',
  cost: 10000,
  isDonate: true,
  img: 'interior29',
  layoutId: 1
}, {
  id: 6,
  interiorId: 30,
  name: 'Пользовательская №7',
  cost: 2000000,
  isDonate: false,
  img: 'interior30',
  layoutId: 2
}, {
  id: 7,
  interiorId: 31,
  name: 'Пользовательская №8',
  cost: 2500000,
  isDonate: false,
  img: 'interior31',
  layoutId: 2
}, {
  id: 8,
  interiorId: 32,
  name: 'Пользовательская №9',
  cost: 25000,
  isDonate: true,
  img: 'interior32',
  layoutId: 2
}, {
  id: 9,
  interiorId: 33,
  name: 'Пользовательская №10',
  cost: 30000,
  isDonate: true,
  img: 'interior34',
  layoutId: 3
}, {
  id: 10,
  interiorId: 34,
  name: 'Пользовательская №11',
  cost: 30000,
  isDonate: true,
  img: 'interior33',
  layoutId: 3
}, {
  id: 11,
  interiorId: 35,
  name: 'Пользовательская №12',
  cost: 30000,
  isDonate: true,
  img: 'interior35',
  layoutId: 3
}, {
  id: 12,
  interiorId: 36,
  name: 'Пользовательская №13',
  cost: 12000,
  isDonate: true,
  img: 'interior36',
  layoutId: 4
}, {
  id: 13,
  interiorId: 37,
  name: 'Пользовательская №14',
  cost: 12000,
  isDonate: true,
  img: 'interior37',
  layoutId: 4
}, {
  id: 14,
  interiorId: 38,
  name: 'Пользовательская №15',
  cost: 12000,
  isDonate: true,
  img: 'interior38',
  layoutId: 4
}, {
  id: 15,
  interiorId: 39,
  name: 'Пользовательская №16',
  cost: 25000,
  isDonate: true,
  img: 'interior39',
  layoutId: 5
}, {
  id: 16,
  interiorId: 40,
  name: 'Пользовательская №17',
  cost: 25000,
  isDonate: true,
  img: 'interior40',
  layoutId: 5
}, {
  id: 17,
  interiorId: 41,
  name: 'Пользовательская №18',
  cost: 15000000,
  isDonate: false,
  img: 'interior41',
  layoutId: 5
}, {
  id: 18,
  interiorId: 42,
  name: 'Пользовательская 19',
  cost: 10000000,
  isDonate: false,
  img: 'interior42',
  layoutId: 6
}, {
  id: 19,
  interiorId: 43,
  name: 'Пользовательская 20',
  cost: 20000,
  isDonate: true,
  img: 'interior43',
  layoutId: 6
}, {
  id: 20,
  interiorId: 44,
  name: 'Пользовательская 21',
  cost: 20000,
  isDonate: true,
  img: 'interior44',
  layoutId: 6
}];
},{}],"lp8x":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.furniture = void 0;
var _config = require("../../../../shared/houses/furniture/config");
var _custom = require("../../custom.event");
var _furniture = require("../../../../shared/houses/furniture/furniture.config");
var _interiors = require("../../../../shared/houses/menu/interiors.config");
class Furniture {
  constructor() {
    this.houseId = null;
    this.items = [];
    this.interior = null;
    this.enterHouseHandler = (houseId, furnitureJSON, houseInterior) => {
      this.loadInterior(houseInterior);
      if (this.houseId !== null) {
        this.destroyItems();
      }
      this.houseId = houseId;
      const furnitureItems = JSON.parse(furnitureJSON);
      furnitureItems.forEach(item => {
        const cfg = _furniture.furnitureList.find(el => el.id === item.cfgId),
          rot = !item.rot ? new mp.Vector3(0, 0, 0) : item.rot;
        if (!cfg) return;
        this.items.push({
          id: item.id,
          object: mp.objects.new(mp.game.joaat(cfg.prop), item.pos, {
            rotation: rot,
            dimension: houseId
          })
        });
      });
    };
    this.leaveHouseHandler = () => {
      this.houseId = null;
      this.unloadInterior();
      this.destroyItems();
    };
    this.removeHandler = (houseId, itemId) => {
      if (!this.canBeUpdated(houseId)) return;
      const item = this.items.find(el => el.id === itemId);
      if (!item) return;
      const index = this.items.indexOf(item);
      item.object.destroy();
      if (index === -1) return;
      this.items.splice(index, 1);
    };
    this.placeHandler = (houseId, item) => {
      if (!this.canBeUpdated(houseId)) return;
      const cfg = _furniture.furnitureList.find(el => el.id === item.cfgId),
        rot = !item.rot ? new mp.Vector3(0, 0, 0) : item.rot;
      if (!cfg) return;
      const object = mp.objects.new(mp.game.joaat(cfg.prop), item.pos, {
        rotation: rot,
        dimension: houseId
      });
      this.items.push({
        id: item.id,
        object
      });
    };
    _custom.CustomEvent.registerServer('furniture:enterHouse', this.enterHouseHandler);
    _custom.CustomEvent.registerServer('furniture:leaveHouse', this.leaveHouseHandler);
    _custom.CustomEvent.registerServer('furniture:remove', this.removeHandler);
    _custom.CustomEvent.registerServer('furniture:place', this.placeHandler);
  }
  loadInterior(interiorId) {
    const item = _config.LOAD_INTERIORS.find(el => el.interiorId === interiorId);
    if (!item) return;
    const interior = mp.game.interior.getInteriorAtCoords(item.position.x, item.position.y, item.position.z);
    if (interior) {
      mp.game.interior.enableInteriorProp(interior, item.prop);
      this.unloadOldInteriors(item.interiorId, item.prop, interior);
      mp.game.interior.refreshInterior(interior);
      this.interior = interiorId;
    }
  }
  unloadOldInteriors(interiorId, prop, hash) {
    const interior = _interiors.interiorsData.find(el => el.interiorId === interiorId);
    if (!interior) return;
    const layoutId = interior.layoutId,
      interiorsList = _interiors.interiorsData.filter(el => el.layoutId === layoutId);
    interiorsList.forEach(el => {
      const cfg = _config.LOAD_INTERIORS.find(item => item.interiorId === el.interiorId);
      if (cfg && cfg.prop !== prop) {
        if (mp.game.interior.isInteriorPropEnabled(hash, cfg.prop)) mp.game.interior.disableInteriorProp(hash, cfg.prop);
      }
    });
  }
  unloadInterior() {
    if (this.interior === null) return;
    const item = _config.LOAD_INTERIORS.find(el => el.interiorId === this.interior);
    if (!item) return;
    const interior = mp.game.interior.getInteriorAtCoords(item.position.x, item.position.y, item.position.z);
    if (interior) {
      mp.game.interior.disableInteriorProp(interior, item.prop);
      mp.game.interior.refreshInterior(interior);
      this.interior = null;
    }
  }
  canBeUpdated(houseId) {
    return houseId === this.houseId;
  }
  destroyItems() {
    this.items.forEach(item => item.object.destroy());
    this.items = [];
  }
  get currentHouseId() {
    return this.houseId;
  }
}
const furniture = exports.furniture = new Furniture();
},{"../../../../shared/houses/furniture/config":"okT1","../../custom.event":"py8h","../../../../shared/houses/furniture/furniture.config":"sFZG","../../../../shared/houses/menu/interiors.config":"O0M1"}],"opsa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.furniturePlace = void 0;
var _custom = require("../../custom.event");
var _objectManager = require("./objectManager");
var _furniture = require("../furniture");
var _gui = require("../../gui");
class FurniturePlace {
  constructor() {
    this.lockControls = true;
    this.startHandler = (houseId, id, cfgId) => {
      if (_furniture.furniture.currentHouseId !== houseId) return;
      _gui.gui.setGui('interiorHud');
      this.manager = new _objectManager.ObjectManager(id, cfgId, houseId);
      this.lockControls = false;
      mp.gui.cursor.visible = false;
    };
    this.onKeyHandler = key => {
      if (!this.manager) return;
      if (key === 39) {
        const direction = this.manager.changeVector(true);
        _custom.CustomEvent.triggerCef('furnitureHud:direction', direction);
      } else if (key === 37) {
        const direction = this.manager.changeVector(false);
        _custom.CustomEvent.triggerCef('furnitureHud:direction', direction);
      } else if (key === 38) {
        this.manager.move(true);
      } else if (key === 40) {
        this.manager.move(false);
      } else if (key === 16) {
        this.manager.changeSpeed(true);
      } else if (key === 17) {
        this.manager.changeSpeed(false);
      } else if (key === 79) {
        const moveType = this.manager.changeMoveType();
        _custom.CustomEvent.triggerCef('furnitureHud:moveType', moveType);
      } else if (key === 89) {
        const data = this.manager.save(),
          id = this.manager.id;
        this.manager.destroy();
        this.lockControls = true;
        _gui.gui.setGui(null);
        if (data[1].x === 0 && data[1].y === 0 && data[1].z === 0) {
          _custom.CustomEvent.triggerServer('furniture:place', id, data[0]);
        } else {
          _custom.CustomEvent.triggerServer('furniture:place', id, data[0], data[1]);
        }
      } else if (key === 78) {
        this.manager.destroy();
        this.lockControls = true;
        _gui.gui.setGui(null);
      }
    };
    _custom.CustomEvent.registerServer('furniturePlace:start', this.startHandler);
    mp.events.add('furniturePlace:onKey', this.onKeyHandler);
  }
}
const furniturePlace = exports.furniturePlace = new FurniturePlace();
},{"../../custom.event":"py8h","./objectManager":"tEee","../furniture":"lp8x","../../gui":"bk91"}],"bk91":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unitpayBrowser = exports.terminalOpened = exports.saveZone = exports.phoneOpened = exports.inputOnFocus = exports.hideHudStatus = exports.hideHud = exports.gui = exports.acceptButton = void 0;
var _custom = require("./custom.event");
var _gui = require("../../shared/gui");
var _user = require("./user");
var _system = require("./system");
var _world = require("./world");
var _autosalon = require("./businesses/autosalon");
var _cloth = require("./cloth");
var _controls = require("./controls");
var _tattoo = require("./tattoo");
var _barber = require("./businesses/barber");
var _lsc = require("./businesses/lsc");
var _menu = require("./menu");
var _furniturePlace = require("./houses/furniturePlace");
const player = mp.players.local;
let _zone = 'Подключение к сети GPS';
let _street = '...';
let pauseMenuColorArray = [];
for (let q = 0; q < 100; q++) pauseMenuColorArray.push(_system.system.rgbToHex(_system.system.getRandomInt(0, 255), _system.system.getRandomInt(0, 255), _system.system.getRandomInt(0, 255)));
mp.events.add('render', () => {
  if (gui.currentGui && mp.game.ui.isPauseMenuActive()) {
    mp.game.ui.setFrontendActive(false);
  }
});
setInterval(() => {
  if (!_user.user.login) return;
  mp.game.gxt.set("PM_PAUSE_HDR", `<font color="${_system.system.randomArrayElement(pauseMenuColorArray)}">Detroit ${_user.user.name} [${_user.user.id}] ~r~|~w~ Online: ${mp.players.length}`);
  _custom.CustomEvent.triggerCef('hud:zone', escape(gui.zone.getCurrentZone()), escape(gui.zone.getCurrentStreet()));
}, 2000);
_custom.CustomEvent.registerServer('stopcef', () => {
  gui.browser.destroy();
});
_custom.CustomEvent.registerServer('currentStreet', () => {
  return gui.zone.getCurrentStreet();
});
_custom.CustomEvent.register('currentStreet', () => {
  return gui.zone.getCurrentStreet();
});
_custom.CustomEvent.register('toggleChat', () => {
  mp.storage.data.alertsEnable.enableChat = !!!mp.storage.data.alertsEnable.enableChat;
  _custom.CustomEvent.triggerCef('alerts:enable', mp.storage.data.alertsEnable);
});
let unitpayBrowser = exports.unitpayBrowser = void 0;
mp.events.add('unitpayexit', () => {
  if (unitpayBrowser && mp.browsers.exists(unitpayBrowser)) unitpayBrowser.destroy();
  exports.unitpayBrowser = unitpayBrowser = null;
});
mp.events.add('donate:add', link => {
  gui.setGui(null);
  if (unitpayBrowser && mp.browsers.exists(unitpayBrowser)) unitpayBrowser.destroy();
  exports.unitpayBrowser = unitpayBrowser = mp.browsers.new(link);
});
let radarStatus = true;
const gui = exports.gui = {
  get radar() {
    let status = radarStatus && !!!gui.currentGui || _gui.guiNotHideList.includes(gui.currentGui);
    mp.game.ui.displayRadar(status);
    return status;
  },
  set radar(val) {
    radarStatus = val;
    mp.game.ui.displayRadar(radarStatus);
    updateSavezone();
  },
  zone: {
    updateZoneAndStreet: () => {
      const local = mp.players.local;
      let getStreet = mp.game.pathfind.getStreetNameAtCoord(local.position.x, local.position.y, local.position.z, 0, 0);
      _street = mp.game.ui.getStreetNameFromHashKey(getStreet.streetName);
      _zone = mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(local.position.x, local.position.y, local.position.z));
    },
    getCurrentZone: () => {
      return _zone;
    },
    getCurrentStreet: () => {
      return _street;
    }
  },
  updateDirectionText: () => {
    let dgr = mp.players.local.getRotation(0).z + 180;
    if (dgr >= 22.5 && dgr < 67.5) return 'SE';
    if (dgr >= 67.5 && dgr < 112.5) return 'E';
    if (dgr >= 112.5 && dgr < 157.5) return 'NE';
    if (dgr >= 157.5 && dgr < 202.5) return 'N';
    if (dgr >= 202.53 && dgr < 247.5) return 'NW';
    if (dgr >= 247.5 && dgr < 292.5) return 'W';
    if (dgr >= 292.5 && dgr < 337.5) return 'SW';
    return 'S';
  },
  hud: {
    oldHudData: "",
    setCustomText: (text, time) => {
      gui.execute(`CEF.hud.setTextText('${JSON.stringify(text)}');CEF.hud.setTextTime(${time})`);
    },
    setCasinoInt: inCasino => gui.execute(`CEF.hud.setCasinoInt(${inCasino})`),
    setCustomZone: (name, color) => gui.execute(`CEF.hud.setCustomZone('${name}', '${color}')`),
    setWeapon: weapon => gui.execute(`CEF.hud.setWeapon(${weapon})`),
    setBullets: (b1, b2) => gui.execute(`CEF.hud.setBullets(${b1}, ${b2})`),
    setMoney: money => gui.execute(`CEF.hud.setMoney(${money})`),
    setChips: money => gui.execute(`CEF.hud.setChips(${money})`),
    setMoneyBank: money => gui.execute(`CEF.hud.setMoneyBank(${money})`),
    setRadio: radio => gui.execute(`CEF.hud.setRadio(${radio})`),
    lockMicrophone: microphoneLock => gui.execute(`CEF.hud.lockMicrophone(${microphoneLock})`),
    setHasWatch: hasWatch => gui.execute(`CEF.hud.setHasWatch(${hasWatch})`),
    setTime: time => gui.execute(`CEF.hud.setTime('${time}')`),
    setDate: date => gui.execute(`CEF.hud.setDate('${date}')`),
    setTemp: temp => gui.execute(`CEF.hud.setTemp(${temp})`),
    setCompass: compass => gui.execute(`CEF.hud.setCompass('${compass}')`),
    setZone: (zone, street) => gui.execute(`CEF.hud.setZone('${zone}', '${street}')`),
    showHud: show => gui.execute(`CEF.hud.showHud(${show})`),
    raceData: (position, lap, lapMax, racers) => gui.execute(`CEF.hud.raceData(${position}, ${lap}, ${lapMax}, ${racers})`),
    disableRace: () => gui.execute(`CEF.hud.disableRace()`),
    setInfoLinePos: (left, bottom) => gui.execute(`CEF.hud.setInfoLinePos(${left}, ${bottom})`),
    updateHelpToggle: toggle => gui.execute(`CEF.hud.updateHelpToggle(${toggle})`)
  },
  chat: {
    active: false,
    message: (message, type = 'None') => {
      _custom.CustomEvent.triggerCef('outputChatBox', message, type);
    }
  },
  browser: mp.browsers.new('http://package/cef/index.html'),
  execute: command => {
    if (mp.browsers.exists(gui.browser) && gui.browser.eventReady) {
      gui.browser.execute(command);
    }
  },
  currentGui: null,
  setGuiWithEvent: (guiName, cefEventName, ...cefEventArgs) => {
    gui.setGui(guiName);
    if (cefEventName) _custom.CustomEvent.triggerCef(cefEventName, ...cefEventArgs);
  },
  setGui: (guiName, fromCef = false) => {
    if (gui.currentGui === guiName) return;
    gui.currentGui = guiName;
    if (hideHudStatus) {
      mp.gui.chat.show(hideHudStatus);
    } else {
      mp.gui.chat.show(!!!guiName);
    }
    if (!guiName) {
      _user.user.setBlur(false);
    } else {
      if (['reg', 'login'].includes(guiName)) _user.user.setBlur(true);else _user.user.setBlur(false);
    }
    gui.cursor = !!guiName;
    _custom.CustomEvent.triggerCef('cef:hud:showHud', !!!guiName || _gui.guiNotHideList.includes(guiName));
    gui.radar;
    if (!fromCef) _custom.CustomEvent.triggerCef('setGui', guiName);
  },
  freezeCursorDatas: false,
  get cursor() {
    if (gui.freezeCursorDatas) mp.gui.cursor.visible = true;
    return gui.freezeCursorDatas;
  },
  set cursor(status) {
    if (!gui.cursor && status) mp.game.invoke("0xFC695459D4D0E219", 0.5, 0.5);
    gui.freezeCursorDatas = status;
    mp.gui.cursor.visible = status;
  },
  get is_block_keys() {
    return gui.cursor || !!gui.currentGui || _user.user.dead;
  },
  drawText: (text, xPos, yPos, scale = 0.2, r = 255, g = 255, b = 255, a = 255, font = 0, justify = 1, shadow = false, outline = false) => {
    if (!mp.game.ui.isHudComponentActive(0)) return false;
    mp.game.ui.setTextFont(font);
    if (typeof scale === "number") mp.game.ui.setTextScale(1, scale);else mp.game.ui.setTextScale(scale[0], scale[1]);
    mp.game.ui.setTextColour(r, g, b, a);
    if (shadow) mp.game.invoke('0x1CA3E9EAC9D93E5E');
    if (outline) mp.game.invoke('0x2513DFB0FB8400FE');
    switch (justify) {
      case 1:
        mp.game.ui.setTextCentre(true);
        break;
      case 2:
        mp.game.ui.setTextRightJustify(true);
        mp.game.ui.setTextWrap(0, xPos);
        break;
    }
    mp.game.ui.setTextEntry('STRING');
    mp.game.ui.addTextComponentSubstringPlayerName(text);
    mp.game.ui.drawText(xPos, yPos);
  },
  drawRect: (xPos, yPos, wSize, hSize, r, g, b, a) => {
    if (!mp.game.ui.isHudComponentActive(0)) return false;
    let x = xPos + wSize * 0.5;
    let y = yPos + hSize * 0.5;
    mp.game.invoke('0x3A618A217E5154F0', x, y, wSize, hSize, r, g, b, a);
  },
  drawText3D: (caption, x, y, z, scale = 0.5, distanceScale = false) => {
    if (!mp.game.ui.isHudComponentActive(0)) return false;
    if (!scale) scale = 0.5;
    z = z + 0.5;
    mp.game.graphics.setDrawOrigin(x, y, z, 0);
    let distScale = distanceScale ? Math.min(1 / (_system.system.distanceToPos({
      x,
      y,
      z
    }, player.position) / 2.6), 1) : 1;
    mp.game.ui.setTextFont(0);
    mp.game.ui.setTextScale(0.1 * scale * distScale, 0.55 * scale * distScale);
    mp.game.ui.setTextColour(255, 255, 255, 255);
    mp.game.ui.setTextProportional(true);
    mp.game.ui.setTextDropshadow(0, 0, 0, 0, 255);
    mp.game.ui.setTextEdge(2, 0, 0, 0, 150);
    mp.game.invoke('0x2513DFB0FB8400FE');
    mp.game.ui.setTextEntry('STRING');
    mp.game.ui.setTextCentre(true);
    mp.game.ui.addTextComponentSubstringPlayerName(caption);
    mp.game.ui.drawText(0, 0);
    mp.game.invoke('0xFF0B610F6BE0D7AF');
  }
};
setInterval(() => {
  if (!_user.user.login) return;
  _custom.CustomEvent.triggerCef('hud:data', `${_system.system.digitFormat(_world.weather.realDay)} ${_world.MonthNames2[_world.weather.realMonth]}`, ``, ``, mp.players.length, _user.user.isAdminNow(), _user.user.id, _world.weather.realHour, _world.weather.realMinute);
}, 1000);
_custom.CustomEvent.registerServer('server:setGui', (guiName, cefEventName, ...cefEventArgs) => {
  gui.setGuiWithEvent(guiName, cefEventName, ...cefEventArgs);
});
mp.events.add('cef:setGui', guiName => {
  gui.setGui(guiName, true);
});
mp.events.add('cef:setCursor', status => {
  gui.cursor = status;
});
mp.events.add('setChatActiveInput', status => {
  gui.chat.active = status;
});
mp.events.add('console:cef', (...message) => {
  mp.console.logInfo(`[BROWSER] ${message.join(' ')}`);
});
mp.events.add('chatMessage', message => _custom.CustomEvent.triggerServer('chatMessage', message));
mp.events.add('chatCommand', (command, ...args) => _custom.CustomEvent.triggerServer('chatCommand', command, ...args));
mp.events.add('auth:saveLogin', login => {
  mp.storage.data.login = login;
});
let inputOnFocus = exports.inputOnFocus = false;
mp.events.add('inputOnFocus', status => {
  exports.inputOnFocus = inputOnFocus = status;
});
let hideHudStatus = exports.hideHudStatus = false;
_custom.CustomEvent.register('hidehud', () => {
  hideHud(!hideHudStatus);
});
const hideHud = status => {
  exports.hideHudStatus = hideHudStatus = status;
  mp.gui.chat.show(!hideHudStatus);
  gui.radar = !hideHudStatus;
  _custom.CustomEvent.triggerCef('cef:hud:showHud', !hideHudStatus);
};
exports.hideHud = hideHud;
let guiReady = false;
mp.events.add('gui:ready', async () => {
  mp.gui.chat.show(false);
  gui.browser.markAsChat();
  gui.browser.eventReady = true;
  await _system.system.sleep(500);
  updateSavezone();
  if (guiReady) return;
  guiReady = true;
  _custom.CustomEvent.triggerCef('menu:loadDefaultPos', mp.storage.data.menuX || 0, mp.storage.data.menuY || 0, mp.storage.data.menuItems || 8);
  _custom.CustomEvent.callServer('accounts:exists', mp.game.invoke('0x198D161F458ECC7F')).then(status => {
    gui.cursor = true;
    if (status) {
      gui.setGui('login');
      if (mp.storage.data.login) _custom.CustomEvent.triggerCef("auth:getLogin", mp.storage.data.login);
    } else {
      gui.setGui('reg');
    }
  });
});
mp.events.add('alerts:load', () => {
  _custom.CustomEvent.triggerCef('alerts:enable', mp.storage.data.alertsEnable);
});
mp.events.add('menu:setDefaultPos', (x, y) => {
  mp.storage.data.menuX = x;
  mp.storage.data.menuY = y;
});
_custom.CustomEvent.registerServer('showWithPicture', (title, sender, message, notifPic, time = 8000) => {
  _user.user.notify(`${sender ? sender + ': ' : ''}${message}`, 'info', notifPic, time, title);
});
let bigmap = {
  status: 0,
  timer: null
};
bigmap.status = 0;
bigmap.timer = null;
const canBeClosed = ['boombox', 'casino', 'editorqweqweqwe', 'unitpay', 'workselect', 'fuel', 'inventory', 'shop', 'idcard', 'mainmenu', 'autosalon', 'clothshop', 'tattooshop', 'tablet', 'barber', 'atm', 'vehiclesell', "adminchat", "admincheat", "greeting", 'minigame', 'family', 'flat', 'flatres', 'lsc', 'buycar', 'mining', 'jobSessions', 'buyers', 'interact', 'numberplate', 'animations', 'rent', 'bank', 'orderofgoods', 'casinoenter', 'finishinitquests', 'marriage', 'gungame', 'market', 'farm', 'potions', 'candyShop', 'lollipopsExchanger', 'newYearsGift', 'battlePass', 'carSharing', 'monopoly'];
mp.events.add("render", () => {
  if (inputOnFocus || gui.currentGui && _furniturePlace.furniturePlace.lockControls) _controls.disableControlGroup.allControls();
  mp.game.ui.hideHudComponentThisFrame(1);
  mp.game.ui.hideHudComponentThisFrame(2);
  mp.game.ui.hideHudComponentThisFrame(3);
  mp.game.ui.hideHudComponentThisFrame(4);
  mp.game.ui.hideHudComponentThisFrame(6);
  mp.game.ui.hideHudComponentThisFrame(7);
  mp.game.ui.hideHudComponentThisFrame(8);
  mp.game.ui.hideHudComponentThisFrame(9);
  mp.game.ui.hideHudComponentThisFrame(13);
  mp.game.ui.hideHudComponentThisFrame(20);
  if (mp.game.ui.isPauseMenuActive()) mp.gui.cursor.visible = false;
  if (mp.gui.cursor.visible) _controls.disableControlGroup.moveGui();
  if (mp.game.controls.isControlJustPressed(0, 48)) {
    bigmap.status++;
    if (bigmap.status == 1) {
      setTimeout(() => {
        if (bigmap.status == 1) bigmap.status = 0;
      }, 2000);
    }
    if (bigmap.status == 3) bigmap.status = 0;
    if (bigmap.status >= 2) {
      toggleBigMap = true;
    } else {
      toggleBigMap = false;
    }
    updateSavezone();
  }
  if (bigmap.status == 2) {
    mp.game.ui.setRadarBigmapEnabled(true, false);
    mp.game.ui.setRadarZoom(0.0);
  } else {
    mp.game.ui.setRadarBigmapEnabled(false, false);
  }
  if ((unitpayBrowser || gui.currentGui || _menu.currentMenu) && !mp.game.ui.isPauseMenuActive()) {
    if (['dialog'].includes(gui.currentGui)) {
      _controls.disableControlGroup.allControls();
    }
    mp.game.controls.disableControlAction(2, 200, true);
    if (mp.game.controls.isDisabledControlJustReleased(2, 200)) {
      if (_menu.currentMenu) {
        _menu.currentMenu.close();
      }
      if (unitpayBrowser) {
        if (mp.browsers.exists(unitpayBrowser)) unitpayBrowser.destroy();
        exports.unitpayBrowser = unitpayBrowser = null;
      } else if (canBeClosed.includes(gui.currentGui)) {
        if (gui.currentGui === 'clothshop') (0, _cloth.exitCloth)();
        if (gui.currentGui === 'tattooshop') (0, _tattoo.exitTattoo)();
        if (gui.currentGui === 'inventory') _custom.CustomEvent.triggerServer('inventory:close');
        if (gui.currentGui === 'autosalon') (0, _autosalon.stopBuyCar)();
        if (gui.currentGui === "barber") (0, _barber.closeBarber)();
        if (gui.currentGui === 'atm') _user.user.stopAnim();
        if (gui.currentGui === 'monopoly') _custom.CustomEvent.triggerServer('monopoly:playerLeft');
        if (gui.currentGui === 'minigame') return _custom.CustomEvent.triggerCef('minigame:stop');
        if (gui.currentGui === 'lsc') (0, _lsc.stopLsc)(true);
        if (gui.currentGui === 'mainmenu') {
          _custom.CustomEvent.triggerCef('crosshair:setSettings', mp.storage.data.crosshair);
          _custom.CustomEvent.triggerCef('crosshair:disable');
        }
        const closedGui = gui.currentGui;
        gui.setGui(null);
        mp.events.call('gui:menuClosed', closedGui);
      }
    }
  }
});
let acceptsIds = 0;
let acceptsIdsProm = new Map();
const acceptButton = (text, img, time = 15000) => {
  return new Promise((resolve, reject) => {
    acceptsIds++;
    const id = parseInt(`${acceptsIds}`);
    acceptsIdsProm.set(id, resolve);
    _custom.CustomEvent.triggerCef('cef:alert:accept', id, text, "error", img, time);
  });
};
exports.acceptButton = acceptButton;
mp.events.add('cef:alert:accept:result', (id, status) => {
  let res = acceptsIdsProm.get(id);
  if (res) res(status);
});
mp.events.add('gui::closeCurrent', () => {
  gui.setGui(null);
});
_custom.CustomEvent.registerServer('cef:accept', (text, img, time = 15000) => {
  return new Promise((resolve, reject) => {
    acceptButton(text, img, time).then(status => {
      resolve(status);
    });
  });
});
let toggleBigMap = false;
const GetMinimapAnchor = () => {
  let safezone = mp.game.graphics.getSafeZoneSize();
  let safezone_x = 1.0 / 20.0;
  let safezone_y = 1.0 / 20.0;
  let aspect_ratio = mp.game.graphics.getScreenAspectRatio(false);
  let objectRes = mp.game.graphics.getScreenActiveResolution(1, 1);
  let res_x = objectRes.x;
  let res_y = objectRes.y;
  let xscale = 1.0 / res_x;
  let yscale = 1.0 / res_y;
  let bigMapMultipler = 1;
  if (toggleBigMap) xscale = xscale * 1.48, bigMapMultipler = 2.3;
  let left_x = xscale * (res_x * (safezone_x * (Math.abs(safezone - 1.0) * 10)));
  let bottom_y = yscale * (res_y * (safezone_y * (Math.abs(safezone - 1.0) * 10)));
  let height = yscale * (res_y / 5.674) * bigMapMultipler;
  let width = xscale * (res_x / (4 * aspect_ratio));
  let height_px = height * res_y;
  let width_px = width * res_x;
  let left_px = left_x * res_x;
  let bottom_px = bottom_y * res_y;
  let Minimap = {
    width: width,
    height: yscale * (res_y / 5.674),
    left_x: left_x,
    bottom_y: bottom_y,
    right_x: left_x + width,
    top_y: bottom_y - height,
    x: left_x,
    y: bottom_y - height,
    xunit: xscale,
    yunit: yscale,
    res_x: res_x,
    res_y: res_y,
    height_px: gui.radar ? height_px : 0,
    width_px,
    left_px,
    bottom_px
  };
  return Minimap;
};
let saveZone = exports.saveZone = GetMinimapAnchor();
const updateSavezone = () => {
  exports.saveZone = saveZone = GetMinimapAnchor();
  if (gui.browser) {
    const {
      width_px,
      height_px,
      left_px,
      bottom_px
    } = saveZone;
    _custom.CustomEvent.triggerCef('cef:alert:setSafezoneInfo', width_px, height_px, left_px, bottom_px);
    gui.execute(`CEF.hud.setInfoLinePos(${left_px + width_px}, ${bottom_px})`);
    gui.zone.updateZoneAndStreet();
  }
};
setInterval(() => {
  mp.game.invoke('0xF4F2C0D4EE209E20');
}, 25000);
setTimeout(() => {
  setInterval(updateSavezone, 5000);
}, 7500);
let phoneOpened = exports.phoneOpened = false;
mp.events.add('phone:opened', status => {
  exports.phoneOpened = phoneOpened = status;
});
let terminalOpened = exports.terminalOpened = false;
mp.events.add('terminal:opened', status => {
  exports.terminalOpened = terminalOpened = status;
});
let lastPhonePos = new mp.Vector3(0, 0, 0);
setInterval(() => {
  _custom.CustomEvent.triggerCef('phone:synctime', `${_system.system.digitFormat(_world.weather.realDay)}.${_system.system.digitFormat(_world.weather.realMonth + 1)}.${_system.system.digitFormat(_world.weather.realYear)}`, `${_system.system.digitFormat(_world.weather.realHour)}:${_system.system.digitFormat(_world.weather.realMinute)}`, _world.weather.getFullRpTime());
  const newPos = mp.players.local.position;
  if (_system.system.distanceToPos(lastPhonePos, newPos) > 1) {
    _custom.CustomEvent.triggerCef('phone:syncpos', player.position.x, player.position.y, player.position.z);
    lastPhonePos = newPos;
  }
}, 1000);
},{"./custom.event":"py8h","../../shared/gui":"AMC0","./user":"ggMw","./system":"pi2J","./world":"j6No","./businesses/autosalon":"eXav","./cloth":"Sp7p","./controls":"yuOK","./tattoo":"EG54","./businesses/barber":"FstL","./businesses/lsc":"vjs0","./menu":"Aiz7","./houses/furniturePlace":"opsa"}],"h8FB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleCamZoom = exports.cameraManager = void 0;
var _system = require("./system");
var _user = require("./user");
var _gui = require("./gui");
var _controls = require("./controls");
var _protection = require("./protection");
let _posX = 0;
let _posY = 0;
let _posZ = 0;
let _posH = 0;
let _posR = 0;
let _posRot = 0;
let _currentCam;
const handleCamZoom = currentCamera => {
  if (!currentCamera) return;
  if (mp.game.controls.isDisabledControlPressed(0, 241)) currentCamera.setFov(currentCamera.getFov() - 2);else if (mp.game.controls.isDisabledControlPressed(0, 242) && currentCamera.getFov() < 80) currentCamera.setFov(currentCamera.getFov() + 2);
};
exports.handleCamZoom = handleCamZoom;
const cameraManager = exports.cameraManager = {
  createOrbitCam: (x, y, z, height, maxRadius = 100, fov = 20) => {
    _posX = x;
    _posY = y;
    _posZ = z;
    _posH = height;
    _posR = maxRadius;
    let newPos = cameraManager.getOrbit(_posX, _posY, _posZ + _posH, 0, _posR);
    _currentCam = mp.cameras.new('orbitCam', newPos, new mp.Vector3(0, 0, 0), fov);
    mp.game.streaming.requestCollisionAtCoord(x, y, z);
    mp.game.streaming.setFocusArea(x, y, z, 0.0, 0.0, 0.0);
    _currentCam.pointAtCoord(x, y, z);
    _currentCam.setActive(true);
    mp.game.cam.renderScriptCams(true, false, 0, false, false);
    return _currentCam;
  },
  changeCamPos: async (x, y, z) => {
    mp.game.streaming.requestCollisionAtCoord(x, y, z);
    _user.user.showLoadDisplay();
    await _system.system.sleep(500);
    _posX = x;
    _posY = y;
    _posZ = z;
    cameraManager.destroyCam();
    cameraManager.createOrbitCam(x, y, z, 100, 100);
    (0, _protection.teleportAnticheat)(x, y, z);
    mp.players.local.position = new mp.Vector3(x, y, z);
    _user.user.hideLoadDisplay();
  },
  getOrbit: (x, y, z, rot, range) => {
    let newPos = new mp.Vector3(range * Math.sin(rot) + x, range * Math.cos(rot) + y, z);
    return newPos;
  },
  destroyCam: () => {
    if (_currentCam) {
      _currentCam.destroy();
      mp.game.cam.renderScriptCams(false, true, 500, true, true);
    }
    mp.game.invoke('0x31B73D1EA9F01DA2');
    _posX = 0;
    _posY = 0;
    _posZ = 0;
    _posH = 0;
    _posR = 0;
    _currentCam = null;
  }
};
mp.events.add('render', () => {
  if (!mp.gui.cursor.visible) return;
  if (_gui.gui.currentGui) return;
  if (_controls.cursorX == 0) {
    mp.game.cam.setGameplayCamRelativeHeading(mp.game.cam.getGameplayCamRelativeHeading() + 1.5);
  } else if (_controls.cursorX >= 0.999) {
    mp.game.cam.setGameplayCamRelativeHeading(mp.game.cam.getGameplayCamRelativeHeading() - 1.5);
  }
});
},{"./system":"pi2J","./user":"ggMw","./gui":"bk91","./controls":"yuOK","./protection":"Qh13"}],"TaDG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultCharacterData = exports.PERSONAGE_POS_HEADING = exports.PERSONAGE_POS = exports.PERSONAGE_CAMERA_POS_POINT = exports.PERSONAGE_CAMERA_POS = void 0;
const PERSONAGE_POS_HEADING = exports.PERSONAGE_POS_HEADING = 303;
const PERSONAGE_POS = exports.PERSONAGE_POS = new mp.Vector3(-156.40, -597.06, 167.00);
const PERSONAGE_CAMERA_POS = exports.PERSONAGE_CAMERA_POS = new mp.Vector3(-154.64, -595.80, 167.62);
const PERSONAGE_CAMERA_POS_POINT = exports.PERSONAGE_CAMERA_POS_POINT = new mp.Vector3(-156.40, -597.06, 167.62);
const defaultCharacterData = exports.defaultCharacterData = {
  SEX: 0,
  SHAPE_THRID_ID: 0,
  SKIN_THRID_ID: 0,
  SHAPE_SECOND_ID: 0,
  SKIN_SECOND_ID: 0,
  SHAPE_MIX: 0,
  SKIN_MIX: 0,
  HAIR: 0,
  HAIR_COLOR: 1,
  HAIR_COLOR2: 1,
  EYE_COLOR: 0,
  EYEBROWS_OPACITY: 1.0,
  EYEBROWS: 0,
  EYEBROWS_COLOR: 1,
  OVERLAY: 0,
  OVERLAY_COLOR: 1,
  OVERLAY_OPACITY: 1.0,
  OVERLAY9: 0,
  OVERLAY9_COLOR: 1,
  OVERLAY9_OPACITY: 1.0,
  OVERLAY8: -1,
  OVERLAY8_COLOR: 1,
  OVERLAY5: -1,
  OVERLAY5_COLOR: 1,
  OVERLAY4: -1,
  OVERLAY4_COLOR: 1,
  OVERLAY4_OPACITY: 1,
  OVERLAY10: -1,
  OVERLAY10_COLOR: 1,
  LIPS: 0,
  LIPS_OPACITY: 0,
  LIPS_COLOR: 0,
  BLUSH: 0,
  BLUSH_OPACITY: 0.0,
  BLUSH_COLOR: 0,
  NAILS: -1,
  FACE_SPECIFICATIONS: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
};
},{}],"p1MO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ALERT_TIME = void 0;
const DEFAULT_ALERT_TIME = exports.DEFAULT_ALERT_TIME = 6000;
},{}],"yoce":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.permissions = void 0;
const permissions = exports.permissions = {
  "gos:arrest": {
    gos: true
  },
  "fraction:chestorder:access": {
    rank: 5
  },
  "fraction:garage:accessEdit": {
    rankLast: 2
  },
  "fraction:chest:access": {
    rank: 2
  },
  "fraction:chest:accessEdit": {
    rankLast: 2
  },
  "admin:1xPromocodes:manage": {
    admin_level: 6
  },
  "admin:events:system": {
    admin_level: 2
  },
  "admin:boxGameStart:system": {
    admin_level: 5
  },
  "admin:chestorder:access": {
    admin_level: 5
  },
  "admin:chest:accessRemote": {
    admin_level: 5
  },
  "admin:garage:accessRemote": {
    admin_level: 5
  },
  "admin:chest:access": {
    admin_level: 4
  },
  "admin:moneychest:access": {
    admin_level: 6
  },
  "admin:chest:accessEdit": {
    admin_level: 5
  },
  "admin:jobdress": {
    admin_level: 4
  },
  "admin:boomboxblock": {
    admin_level: 2
  },
  "admin:chest:accessCreate": {
    admin_level: 5
  },
  "admin:system:reboot": {
    admin_level: 7
  },
  "admin:mainmenu:ads": {
    admin_level: 6
  },
  "admin:global:notify": {
    admin_level: 2
  },
  "admin:gamedata:restoregrab": {
    admin_level: 7
  },
  "admin:gamedata:textworld": {
    admin_level: 6
  },
  "admin:gamedata:dress": {
    admin_level: 7
  },
  "admin:gamedata:lsc": {
    admin_level: 7
  },
  "admin:gamedata:createbiz": {
    admin_level: 6
  },
  "admin:gamedata:newhouse": {
    admin_level: 6
  },
  "admin:gamedata:edithouse": {
    admin_level: 6
  },
  "admin:gamedata:newwarehouse": {
    admin_level: 6
  },
  "admin:useredit:jail": {
    admin_level: 1
  },
  "admin:useredit:wanted": {
    admin_level: 2
  },
  "admin:useredit:givedocument": {
    admin_level: 6
  },
  "admin:useredit:jobskill": {
    admin_level: 5
  },
  "admin:useredit:editor": {
    admin_level: 5
  },
  "admin:useredit:helper": {
    admin_level: 5
  },
  "admin:useredit:mediapromo": {
    admin_level: 6
  },
  "admin:useredit:armour": {
    admin_level: 5
  },
  "admin:useredit:skin": {
    admin_level: 4
  },
  "admin:useredit:fraction": {
    admin_level: 3
  },
  "admin:useredit:banuser": {
    admin_level: 2
  },
  "admin:useredit:vmute": {
    admin_level: 1
  },
  "admin:useredit:cmute": {
    admin_level: 1
  },
  "admin:useredit:givewarn": {
    admin_level: 2
  },
  "admin:useredit:unwarn": {
    admin_level: 4
  },
  "admin:useredit:banaccount": {
    admin_level: 2
  },
  "admin:useredit:coins": {
    admin_level: 6
  },
  "admin:useredit:chips": {
    admin_level: 6
  },
  "admin:useredit:vipcontrol": {
    admin_level: 5
  },
  "admin:allheal": {
    admin_level: 1
  },
  "admin:useredit:money": {
    admin_level: 5
  },
  "admin:useredit:level": {
    admin_level: 5
  },
  "admin:vehicle:givetoplayer": {
    admin_level: 6
  },
  "admin:vehicle:configs": {
    admin_level: 7
  },
  "admin:vehicle:unlock": {
    admin_level: 5
  },
  "admin:inventory:create": {
    admin_level: 5
  },
  "admin:gamedata:menu": {
    admin_level: 6
  },
  "admin:serversetting:menu": {
    admin_level: 7
  },
  "admin:weather:set": {
    admin_level: 5
  },
  "admin:houses:door": {
    admin_level: 5
  },
  "admin:houses:editmarks": {
    admin_level: 7
  },
  "admin:inventory:accessplayer": {
    admin_level: 5
  },
  "admin:promocode": {
    admin_level: 6
  },
  "admin:vote": {
    admin_level: 5
  },
  "admin:x2func": {
    admin_level: 7
  },
  "admin:paydayglobal": {
    admin_level: 6
  },
  "admin:deletepersonage": {
    admin_level: 7
  },
  "admin:celarpersonage": {
    admin_level: 7
  },
  "admin:changeidpersonage": {
    admin_level: 7
  },
  "admin:useredit:payday": {
    admin_level: 6
  },
  "admin:familyControl": {
    admin_level: 4
  },
  "admin:familyBank": {
    admin_level: 5
  },
  "admin:useredit:familyRank": {
    admin_level: 4
  },
  "admin:blacklist": {
    admin_level: 5
  },
  "admin:safezones": {
    admin_level: 4
  },
  "admin:setmedia": {
    admin_level: 6
  },
  "admin:setusername": {
    admin_level: 5
  },
  "admin:resetpassword": {
    admin_level: 5
  },
  "admin:changeCaptZone": {
    admin_level: 4
  },
  "fraction:bizwar:start": {
    rankLast: 1
  },
  "fraction:bizwar:join": {
    rank: 4
  },
  "admin:animation:set": {
    rank: 6
  }
};
},{}],"K6Qz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MINIGAME_TYPE = void 0;
var MINIGAME_TYPE;
(function (MINIGAME_TYPE) {
  MINIGAME_TYPE[MINIGAME_TYPE["MONEY"] = 1] = "MONEY";
  MINIGAME_TYPE[MINIGAME_TYPE["BOX"] = 2] = "BOX";
  MINIGAME_TYPE[MINIGAME_TYPE["DRILL"] = 3] = "DRILL";
  MINIGAME_TYPE[MINIGAME_TYPE["WIRES"] = 4] = "WIRES";
  MINIGAME_TYPE[MINIGAME_TYPE["SVARKA"] = 5] = "SVARKA";
  MINIGAME_TYPE[MINIGAME_TYPE["HAMMER"] = 6] = "HAMMER";
  MINIGAME_TYPE[MINIGAME_TYPE["ORANGE"] = 7] = "ORANGE";
  MINIGAME_TYPE[MINIGAME_TYPE["SCISSORS"] = 8] = "SCISSORS";
  MINIGAME_TYPE[MINIGAME_TYPE["WATERPOT"] = 9] = "WATERPOT";
  MINIGAME_TYPE[MINIGAME_TYPE["WINDOW"] = 10] = "WINDOW";
  MINIGAME_TYPE[MINIGAME_TYPE["BOX_GRASS"] = 11] = "BOX_GRASS";
  MINIGAME_TYPE[MINIGAME_TYPE["SCISSORS_GRASS"] = 12] = "SCISSORS_GRASS";
  MINIGAME_TYPE[MINIGAME_TYPE["GRASS"] = 13] = "GRASS";
  MINIGAME_TYPE[MINIGAME_TYPE["COLLECT_GAME"] = 14] = "COLLECT_GAME";
  MINIGAME_TYPE[MINIGAME_TYPE["JAILHAMMER"] = 15] = "JAILHAMMER";
  MINIGAME_TYPE[MINIGAME_TYPE["JAILSEWING"] = 16] = "JAILSEWING";
  MINIGAME_TYPE[MINIGAME_TYPE["JAILWASHING"] = 17] = "JAILWASHING";
  MINIGAME_TYPE[MINIGAME_TYPE["JAILCOOKING"] = 18] = "JAILCOOKING";
  MINIGAME_TYPE[MINIGAME_TYPE["JAILTOILET"] = 19] = "JAILTOILET";
})(MINIGAME_TYPE || (exports.MINIGAME_TYPE = MINIGAME_TYPE = {}));
},{}],"u758":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TAXI_CONF = exports.BANNED_TAXI_MODELS = void 0;
const TAXI_CONF = exports.TAXI_CONF = {
  blipNpcOrder: {
    blipStart: 280,
    blipEnd: 435,
    color: 46
  },
  ordersNpc: [{
    start: new mp.Vector3(-479.74, -346.3, 33.48),
    end: new mp.Vector3(436.56, -592.17, 27.6),
    price: 360
  }, {
    start: new mp.Vector3(436.56, -592.17, 27.6),
    end: new mp.Vector3(-479.74, -346.3, 33.48),
    price: 360
  }, {
    start: new mp.Vector3(390.77, -1033.57, 28.39),
    end: new mp.Vector3(-474.61, -252.03, 35.01),
    price: 340
  }, {
    start: new mp.Vector3(-474.61, -252.03, 35.01),
    end: new mp.Vector3(390.77, -1033.57, 28.39),
    price: 340
  }, {
    start: new mp.Vector3(-534.17, -294.81, 34.25),
    end: new mp.Vector3(-1661.92, -944.57, 6.84),
    price: 420
  }, {
    start: new mp.Vector3(-1661.92, -944.57, 6.84),
    end: new mp.Vector3(-534.17, -294.81, 34.25),
    price: 420
  }, {
    start: new mp.Vector3(-653.19, -913.95, 23.05),
    end: new mp.Vector3(-1411.13, -569.67, 29.37),
    price: 250
  }, {
    start: new mp.Vector3(-1411.13, -569.67, 29.37),
    end: new mp.Vector3(-653.19, -913.95, 23.05),
    price: 250
  }, {
    start: new mp.Vector3(-500.55, -940.71, 23.06),
    end: new mp.Vector3(-1024.12, -2728.67, 12.77),
    price: 420
  }, {
    start: new mp.Vector3(-1024.12, -2728.67, 12.77),
    end: new mp.Vector3(-500.55, -940.71, 23.06),
    price: 420
  }, {
    start: new mp.Vector3(-203.76, -2072.86, 26.72),
    end: new mp.Vector3(1004.41, -2472.36, 27.6),
    price: 420
  }, {
    start: new mp.Vector3(1004.41, -2472.36, 27.6),
    end: new mp.Vector3(-203.76, -2072.86, 26.72),
    price: 420
  }, {
    start: new mp.Vector3(1310.94, -1657.36, 50.34),
    end: new mp.Vector3(917.4, 49.9, 80),
    price: 482
  }, {
    start: new mp.Vector3(917.4, 49.9, 80),
    end: new mp.Vector3(1310.94, -1657.36, 50.34),
    price: 482
  }, {
    start: new mp.Vector3(-96.67, -612.52, 35.31),
    end: new mp.Vector3(226.62, 1224.74, 224.56),
    price: 460
  }, {
    start: new mp.Vector3(226.62, 1224.74, 224.56),
    end: new mp.Vector3(-96.67, -612.52, 35.31),
    price: 460
  }, {
    start: new mp.Vector3(1860.74, 2583.08, 44.77),
    end: new mp.Vector3(-393.82, 6045.57, 30.6),
    price: 1690
  }, {
    start: new mp.Vector3(-393.82, 6045.57, 30.6),
    end: new mp.Vector3(1860.74, 2583.08, 44.77),
    price: 1690
  }, {
    start: new mp.Vector3(-127.87, 6476.72, 30.57),
    end: new mp.Vector3(1589.08, 6443.36, 24.26),
    price: 452
  }, {
    start: new mp.Vector3(1589.08, 6443.36, 24.26),
    end: new mp.Vector3(-127.87, 6476.72, 30.57),
    price: 452
  }, {
    start: new mp.Vector3(1661.92, 4828.52, 41.18),
    end: new mp.Vector3(1841.93, 3668.49, 32.78),
    price: 580
  }, {
    start: new mp.Vector3(1841.93, 3668.49, 32.78),
    end: new mp.Vector3(1661.92, 4828.52, 41.18),
    price: 580
  }, {
    start: new mp.Vector3(648.54, 603.02, 128.01),
    end: new mp.Vector3(354.82, -701.55, 28.29),
    price: 480
  }, {
    start: new mp.Vector3(354.82, -701.55, 28.29),
    end: new mp.Vector3(648.54, 603.02, 128.01),
    price: 480
  }, {
    start: new mp.Vector3(-98.75, -1095.48, 25.17),
    end: new mp.Vector3(1177.4, -3174.14, 4.76),
    price: 740
  }, {
    start: new mp.Vector3(1177.4, -3174.14, 4.76),
    end: new mp.Vector3(-98.75, -1095.48, 25.17),
    price: 740
  }, {
    start: new mp.Vector3(459.77, -1156.22, 28.39),
    end: new mp.Vector3(-528.9, -327.79, 34.14),
    price: 390
  }, {
    start: new mp.Vector3(459.77, -1156.22, 28.39),
    end: new mp.Vector3(-528.9, -327.79, 34.14),
    price: 390
  }, {
    start: new mp.Vector3(116.15, 240.34, 106.77),
    end: new mp.Vector3(-702.86, -193.42, 35.89),
    price: 300
  }, {
    start: new mp.Vector3(-702.86, -193.42, 35.89),
    end: new mp.Vector3(116.15, 240.34, 106.77),
    price: 300
  }, {
    start: new mp.Vector3(168.29, -315.93, 43.41),
    end: new mp.Vector3(-662.08, -266.32, 35.03),
    price: 220
  }, {
    start: new mp.Vector3(-662.08, -266.32, 35.03),
    end: new mp.Vector3(168.29, -315.93, 43.41),
    price: 220
  }, {
    start: new mp.Vector3(61.74, 97.48, 78.01),
    end: new mp.Vector3(-390.05, -107.05, 37.78),
    price: 176
  }, {
    start: new mp.Vector3(-390.05, -107.05, 37.78),
    end: new mp.Vector3(61.74, 97.48, 78.01),
    price: 176
  }, {
    start: new mp.Vector3(-273.11, 199.35, 84.78),
    end: new mp.Vector3(459.32, -815.82, 26.48),
    price: 400
  }, {
    start: new mp.Vector3(-273.11, 199.35, 84.78),
    end: new mp.Vector3(459.32, -815.82, 26.48),
    price: 400
  }, {
    start: new mp.Vector3(-17.11, -1718.11, 28.39),
    end: new mp.Vector3(272.67, -591.62, 42.26),
    price: 310
  }, {
    start: new mp.Vector3(272.67, -591.62, 42.26),
    end: new mp.Vector3(-17.11, -1718.11, 28.39),
    price: 310
  }, {
    start: new mp.Vector3(41.4, -701.96, 43.19),
    end: new mp.Vector3(-696.78, -980.93, 19.49),
    price: 304
  }, {
    start: new mp.Vector3(-696.78, -980.93, 19.49),
    end: new mp.Vector3(41.4, -701.96, 43.19),
    price: 304
  }, {
    start: new mp.Vector3(-712.03, -859.11, 22.25),
    end: new mp.Vector3(-1379.94, -72.2, 51.31),
    price: 320
  }, {
    start: new mp.Vector3(-1379.94, -72.2, 51.31),
    end: new mp.Vector3(-712.03, -859.11, 22.25),
    price: 320
  }, {
    start: new mp.Vector3(-2296.99, 445.52, 173.57),
    end: new mp.Vector3(-712.03, -859.11, 22.25),
    price: 544
  }, {
    start: new mp.Vector3(-712.03, -859.11, 22.25),
    end: new mp.Vector3(-2296.99, 445.52, 173.57),
    price: 544
  }, {
    start: new mp.Vector3(-653.19, -913.95, 23.05),
    end: new mp.Vector3(-2296.99, 445.52, 173.57),
    price: 620
  }, {
    start: new mp.Vector3(-2296.99, 445.52, 173.57),
    end: new mp.Vector3(-653.19, -913.95, 23.05),
    price: 620
  }, {
    start: new mp.Vector3(1841.93, 3668.49, 32.78),
    end: new mp.Vector3(-500.55, -940.71, 23.06),
    price: 1580
  }, {
    start: new mp.Vector3(-500.55, -940.71, 23.06),
    end: new mp.Vector3(1841.93, 3668.49, 32.78),
    price: 1580
  }, {
    start: new mp.Vector3(1004.41, -2472.36, 27.6),
    end: new mp.Vector3(1841.93, 3668.49, 32.78),
    price: 790
  }, {
    start: new mp.Vector3(1841.93, 3668.49, 32.78),
    end: new mp.Vector3(1004.41, -2472.36, 27.6),
    price: 790
  }, {
    start: new mp.Vector3(-416.17, 1177.92, 324.74),
    end: new mp.Vector3(-545.48, 301.57, 82.12),
    price: 416
  }, {
    start: new mp.Vector3(-545.48, 301.57, 82.12),
    end: new mp.Vector3(-416.17, 1177.92, 324.74),
    price: 416
  }, {
    start: new mp.Vector3(120.02, 212.13, 106.36),
    end: new mp.Vector3(395.05, -752.3, 28.39),
    price: 352
  }, {
    start: new mp.Vector3(395.05, -752.3, 28.39),
    end: new mp.Vector3(120.02, 212.13, 106.36),
    price: 352
  }, {
    start: new mp.Vector3(-47.87, -786.35, 43.26),
    end: new mp.Vector3(-75.05, -225.21, 43.95),
    price: 200
  }, {
    start: new mp.Vector3(-75.05, -225.21, 43.95),
    end: new mp.Vector3(-47.87, -786.35, 43.26),
    price: 200
  }, {
    start: new mp.Vector3(-479.49, -644.38, 31.78),
    end: new mp.Vector3(-1286.32, -1394.42, 3.6),
    price: 292
  }, {
    start: new mp.Vector3(-1286.32, -1394.42, 3.6),
    end: new mp.Vector3(-479.49, -644.38, 31.78),
    price: 292
  }, {
    start: new mp.Vector3(-869.52, -376.83, 38.41),
    end: new mp.Vector3(-369.55, 115.42, 65.04),
    price: 190
  }, {
    start: new mp.Vector3(-369.55, 115.42, 65.04),
    end: new mp.Vector3(-869.52, -376.83, 38.41),
    price: 190
  }, {
    start: new mp.Vector3(-1183.42, -871.64, 13.03),
    end: new mp.Vector3(-1898.28, -276.96, 48.31),
    price: 250
  }, {
    start: new mp.Vector3(-1898.28, -276.96, 48.31),
    end: new mp.Vector3(-1183.42, -871.64, 13.03),
    price: 250
  }, {
    start: new mp.Vector3(272.67, -591.62, 42.26),
    end: new mp.Vector3(-1183.42, -871.64, 13.03),
    price: 408
  }, {
    start: new mp.Vector3(-1183.42, -871.64, 13.03),
    end: new mp.Vector3(272.67, -591.62, 42.26),
    price: 408
  }],
  rewardMultipler: 0.9,
  cost: {
    base: 100,
    km: 150
  },
  npc: {
    model: "ig_jimmyboston",
    name: "Роберт",
    pos: new mp.Vector3(902.27, -171.19, 74.08),
    heading: 237
  },
  carRent: {
    pos: new mp.Vector3(908.69, -176.64, 73.28),
    h: 237,
    cars: [{
      model: 'taxi',
      cost: 500
    }],
    primaryColor: {
      r: 255,
      g: 255,
      b: 0
    },
    secondaryColor: {
      r: 255,
      g: 255,
      b: 0
    }
  }
};
const BANNED_TAXI_MODELS = exports.BANNED_TAXI_MODELS = ['bmx', 'cruiser', 'fixter', 'scorcher', 'tribike', 'tribike2', 'tribike3', 'akuma', 'avarus', 'bagger', 'bati', 'bati2', 'bf400', 'carbonrs', 'chimera', 'cliffhanger', 'daemon', 'daemon2', 'defiler', 'deathbike', 'deathbike2', 'diablous', 'diablous2', 'double', 'enduro', 'esskey', 'faggio', 'faggio2', 'faggio3', 'fcr', 'fcr2', 'gargoyle', 'hakuchou', 'hakuchou2', 'hexer', 'innovation', 'lectro', 'manchez', 'nemesis', 'nightblade', 'pcj', 'ratbike', 'ruffian', 'rrocket', 'sanchez', 'sanchez2', 'sanctus', 'shotaro', 'sovereign', 'stryder', 'thrust', 'vader', 'vindicator', 'vortex', 'wolfsbane', 'zombiea', 'zombieb', 'manchez2', 'buzzard2', 'havok', 'supervolito', 'supervolito2', 'swift', 'swift2', 'volatus', 'seasparrow2', 'seasparrow3'];
},{}],"Bxla":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ORDER_MENU_POS = exports.ORDER_LOAD_COORDS = exports.ORDER_CONFIG = exports.ORDER_CAR_POS = exports.ORDER_CAR_MODELS = exports.ORDER_CAR_HEADING = void 0;
var ORDER_CONFIG;
(function (ORDER_CONFIG) {
  ORDER_CONFIG[ORDER_CONFIG["NPC_DELIVER_COST_MIN"] = 2400] = "NPC_DELIVER_COST_MIN";
  ORDER_CONFIG[ORDER_CONFIG["NPC_DELIVER_COST_MAX"] = 2900] = "NPC_DELIVER_COST_MAX";
  ORDER_CONFIG[ORDER_CONFIG["MAX_LEVEL"] = 2] = "MAX_LEVEL";
  ORDER_CONFIG[ORDER_CONFIG["LEVEL_STEP"] = 300] = "LEVEL_STEP";
  ORDER_CONFIG[ORDER_CONFIG["PERCENT_COST_ADD_PER_LEVEL"] = 20] = "PERCENT_COST_ADD_PER_LEVEL";
  ORDER_CONFIG[ORDER_CONFIG["COMISSION"] = 5] = "COMISSION";
  ORDER_CONFIG[ORDER_CONFIG["VEHICLE_RENT_RETURN"] = 300] = "VEHICLE_RENT_RETURN";
  ORDER_CONFIG[ORDER_CONFIG["LOAD_TIME"] = 10] = "LOAD_TIME";
  ORDER_CONFIG[ORDER_CONFIG["DELIVER_TIME"] = 30] = "DELIVER_TIME";
  ORDER_CONFIG[ORDER_CONFIG["AFK_TIME"] = 90] = "AFK_TIME";
  ORDER_CONFIG[ORDER_CONFIG["ZALOG"] = 30] = "ZALOG";
})(ORDER_CONFIG || (exports.ORDER_CONFIG = ORDER_CONFIG = {}));
const ORDER_CAR_POS = exports.ORDER_CAR_POS = [new mp.Vector3(1183.01, -3247.85, 5.13), new mp.Vector3(-257.66, 6054.48, 31.14)];
const ORDER_CAR_HEADING = exports.ORDER_CAR_HEADING = 180;
const ORDER_MENU_POS = exports.ORDER_MENU_POS = [new mp.Vector3(1195.21, -3253.72, 6.20), new mp.Vector3(-246.06, 6065.54, 31.34)];
const ORDER_LOAD_COORDS = exports.ORDER_LOAD_COORDS = [new mp.Vector3(1217.74, -3225.26, 4.94), new mp.Vector3(1233.74, -3225.46, 4.95), new mp.Vector3(1235.03, -3210.71, 4.95), new mp.Vector3(1220.09, -3210.71, 4.95), new mp.Vector3(1175.54, -3267.07, 4.99), new mp.Vector3(1174.90, -3292.37, 5.00), new mp.Vector3(1190.43, -3336.23, 4.92), new mp.Vector3(1205.11, -3336.10, 4.92), new mp.Vector3(1218.20, -3335.78, 4.93), new mp.Vector3(1233.69, -3335.67, 4.94), new mp.Vector3(1248.56, -3295.31, 4.99), new mp.Vector3(1249.61, -3269.77, 4.96), new mp.Vector3(-261.30, 6062.83, 30.66), new mp.Vector3(-267.05, 6067.65, 30.56), new mp.Vector3(-299.55, 6037.59, 30.56)];
const ORDER_CAR_MODELS = exports.ORDER_CAR_MODELS = [["burrito2", 500, 0], ["paradise", 500, 0], ["pony", 500, 0], ["pony2", 500, 0], ["speedo", 500, 0], ["speedo4", 500, 0], ["youga", 500, 0], ["gburrito", 500, 0], ["burrito", 500, 0], ["mule", 1000, 1], ["mule2", 1000, 1], ["mule3", 1000, 1], ["benson", 1500, 2], ["pounder", 1500, 2], ["pounder2", 1500, 2]];
},{}],"Nsuu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LEVEL_PERMISSIONS = void 0;
var LEVEL_PERMISSIONS;
(function (LEVEL_PERMISSIONS) {
  LEVEL_PERMISSIONS[LEVEL_PERMISSIONS["DELIVER"] = 3] = "DELIVER";
  LEVEL_PERMISSIONS[LEVEL_PERMISSIONS["TAXI"] = 2] = "TAXI";
  LEVEL_PERMISSIONS[LEVEL_PERMISSIONS["GR6"] = 4] = "GR6";
  LEVEL_PERMISSIONS[LEVEL_PERMISSIONS["VOTE"] = 3] = "VOTE";
  LEVEL_PERMISSIONS[LEVEL_PERMISSIONS["WEDDING"] = 2] = "WEDDING";
  LEVEL_PERMISSIONS[LEVEL_PERMISSIONS["ROOM"] = 2] = "ROOM";
  LEVEL_PERMISSIONS[LEVEL_PERMISSIONS["CASINO_DEALER"] = 4] = "CASINO_DEALER";
})(LEVEL_PERMISSIONS || (exports.LEVEL_PERMISSIONS = LEVEL_PERMISSIONS = {}));
},{}],"rOsx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GR6_VEH_MODEL = exports.GR6_VEH_COST_RETURN = exports.GR6_VEH_COST = exports.GR6_VEH_BUY_POSITION = exports.GR6_TASKS_COUNT = exports.GR6_POINTS_GRAB = exports.GR6_MONEY_REWARD_PERCENT = exports.GR6_MONEY_GIVE_RANGE = exports.GR6_LEVEL_ACCESS = exports.GR6_GPS_TASK_NAME = exports.GR6_DRESS_CONFIG_WOMAN = exports.GR6_DRESS_CONFIG_MAN = exports.GR6_BASE_POS = void 0;
var _level = require("./level.permissions");
const GR6_LEVEL_ACCESS = exports.GR6_LEVEL_ACCESS = _level.LEVEL_PERMISSIONS.GR6;
const GR6_VEH_MODEL = exports.GR6_VEH_MODEL = "stockade";
const GR6_VEH_COST = exports.GR6_VEH_COST = 5000;
const GR6_VEH_COST_RETURN = exports.GR6_VEH_COST_RETURN = 90;
const GR6_TASKS_COUNT = exports.GR6_TASKS_COUNT = 10;
const GR6_BASE_POS = exports.GR6_BASE_POS = new mp.Vector3(484.59, -1094.22, 28.50);
const GR6_MONEY_GIVE_RANGE = exports.GR6_MONEY_GIVE_RANGE = [10000, 50000];
const GR6_MONEY_REWARD_PERCENT = exports.GR6_MONEY_REWARD_PERCENT = 7;
const GR6_VEH_BUY_POSITION = exports.GR6_VEH_BUY_POSITION = [new mp.Vector3(479.11, -1100.78, 28.30)];
const GR6_GPS_TASK_NAME = exports.GR6_GPS_TASK_NAME = 'Задание Gruupe Sechs';
const GR6_POINTS_GRAB = exports.GR6_POINTS_GRAB = [new mp.Vector3(326.25, -1078.31, 28.58), new mp.Vector3(296.29, -731.47, 28.45), new mp.Vector3(91.63, -230.97, 53.76), new mp.Vector3(-114.03, 6473.62, 30.73), new mp.Vector3(255.09, 228.25, 105.39), new mp.Vector3(-331.13, 6086.02, 30.55), new mp.Vector3(1692.75, 3762.08, 33.81), new mp.Vector3(-1118.46, 2700.72, 17.65), new mp.Vector3(-3173.42, 1089.53, 19.94), new mp.Vector3(-1303.90, -395.73, 35.80), new mp.Vector3(253.83, -51.80, 69.04), new mp.Vector3(-661.36, -933.29, 20.93), new mp.Vector3(809.35, -2159.44, 28.72), new mp.Vector3(841.13, -1035.74, 27.29), new mp.Vector3(-65.63, 78.01, 70.72), new mp.Vector3(-29.32, -1103.51, 25.52), new mp.Vector3(-33.67, -1676.80, 28.59), new mp.Vector3(1226.14, -481.74, 65.55), new mp.Vector3(135.02, -1708.12, 28.39), new mp.Vector3(-278.04, 6229.89, 30.80), new mp.Vector3(1931.12, 3728.82, 31.94), new mp.Vector3(-631.04, -229.45, 37.16), new mp.Vector3(1160.10, -316.82, 68.31), new mp.Vector3(30.73, -1339.59, 28.60), new mp.Vector3(-45.14, -1750.54, 28.52), new mp.Vector3(-709.57, -907.05, 18.32), new mp.Vector3(1126.86, -980.88, 44.52), new mp.Vector3(378.08, 332.99, 102.67), new mp.Vector3(-1479.31, -374.84, 38.26), new mp.Vector3(-1828.95, 799.04, 137.28), new mp.Vector3(-3047.36, 585.78, 7.01), new mp.Vector3(-2959.49, 387.76, 13.14), new mp.Vector3(1734.76, 6420.41, 34.14), new mp.Vector3(1707.59, 4920.11, 41.16), new mp.Vector3(2673.15, 3286.39, 54.34), new mp.Vector3(1959.54, 3748.49, 31.44), new mp.Vector3(1168.72, 2717.83, 36.26), new mp.Vector3(1395.30, 3613.04, 34.08), new mp.Vector3(546.33, 2663.22, 41.26), new mp.Vector3(2549.65, 384.87, 107.72), new mp.Vector3(-1220.37, -915.71, 10.43), new mp.Vector3(1129.16, -474.23, 65.82), new mp.Vector3(-660.32, -861.38, 23.59), new mp.Vector3(-79.77, 6415.37, 30.74), new mp.Vector3(1203.65, -1382.27, 34.33), new mp.Vector3(167.73, -1708.47, 28.39), new mp.Vector3(294.35, -1250.80, 28.44), new mp.Vector3(-356.39, -1486.54, 29.26), new mp.Vector3(-545.38, -1227.19, 17.55), new mp.Vector3(818.14, -1040.61, 25.85), new mp.Vector3(-2066.11, -311.90, 12.32), new mp.Vector3(-1432.64, -252.47, 45.46), new mp.Vector3(660.55, 263.63, 101.77), new mp.Vector3(1189.58, 2651.03, 36.94), new mp.Vector3(263.46, 2591.71, 44.05), new mp.Vector3(-2554.33, 2300.45, 32.32), new mp.Vector3(175.09, 6643.11, 30.67), new mp.Vector3(59.41, 2795.61, 56.98), new mp.Vector3(1764.02, 3320.12, 40.50), new mp.Vector3(6.20, 6508.42, 30.98), new mp.Vector3(1702.15, 4829.54, 41.08), new mp.Vector3(1194.37, 2722.88, 37.72), new mp.Vector3(614.54, 2785.05, 42.58), new mp.Vector3(-1108.23, 2723.39, 17.90), new mp.Vector3(-3169.42, 1033.55, 19.93), new mp.Vector3(-1444.63, -257.74, 45.31), new mp.Vector3(-1180.60, -752.09, 18.64), new mp.Vector3(-833.50, -1071.28, 10.75), new mp.Vector3(-700.02, -146.60, 36.95), new mp.Vector3(-167.75, -300.96, 38.83), new mp.Vector3(121.46, -241.28, 52.46), new mp.Vector3(429.44, -808.03, 28.59), new mp.Vector3(66.77, -1398.79, 28.46), new mp.Vector3(99.45, 6621.01, 31.54), new mp.Vector3(-1140.49, -2006.37, 12.28), new mp.Vector3(-197.43, -1317.54, 30.19), new mp.Vector3(726.82, -1066.64, 27.41), new mp.Vector3(-344.81, -123.44, 38.11), new mp.Vector3(1187.34, 2637.11, 37.50), new mp.Vector3(-305.55, 6197.32, 30.59), new mp.Vector3(1867.09, 3760.30, 32.11), new mp.Vector3(-3175.01, 1075.18, 19.93), new mp.Vector3(321.71, 185.17, 102.69), new mp.Vector3(1327.47, -1654.10, 51.38), new mp.Vector3(-1149.66, -1427.97, 4.05), new mp.Vector3(68.56, 126.15, 78.29), new mp.Vector3(84.42, 190.20, 104.36), new mp.Vector3(310.11, 202.43, 103.45), new mp.Vector3(-1327.23, -189.77, 46.99), new mp.Vector3(-1585.97, -837.65, 9.05), new mp.Vector3(-1668.30, -995.27, 7.26), new mp.Vector3(-830.69, -1256.17, 5.68), new mp.Vector3(-242.54, -1995.41, 24.88)];
const GR6_DRESS_CONFIG_MAN = exports.GR6_DRESS_CONFIG_MAN = [[3, 48, 0], [8, 152, 0], [11, 95, 0], [4, 47, 0], [6, 25, 0]];
const GR6_DRESS_CONFIG_WOMAN = exports.GR6_DRESS_CONFIG_WOMAN = [[3, 54, 0], [8, 188, 0], [11, 352, 4], [4, 49, 0], [6, 25, 0]];
},{"./level.permissions":"Nsuu"}],"MxUb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getJobData = exports.JOB_MAX_EXP = exports.JOBS_ADVANCED_LIST = void 0;
exports.getJobName = getJobName;
exports.jobsList = exports.getLevelByExp = void 0;
var _minigame = require("./minigame");
var _taxi = require("./taxi");
var _order = require("./order.system");
var _gr = require("./gr6");
var _level = require("./level.permissions");
var _construction = require("./construction");
const JOBS_ADVANCED_LIST = exports.JOBS_ADVANCED_LIST = [{
  name: 'Служба такси',
  desc: 'Катайте пассажиров',
  descFull: 'Доступна со 2 уровня персонажа.\nДля того, чтобы вам устроиться на работу таксистом - требуется :\n1. Получить права категории B в лицензионном центре.\n2. Приехать в таксопарк и устроиться на работу.\n3. Арендовать в таксопарке автомобиль и отправляться работать.\nЧтобы брать заказы откройте меню взаимодействия с авто на клавишу G. Вверху найдите список заказов и выбирайте заказ.\nЗарплата - 50$ за километр при заказе игроком, 90$ за доставку NPC.',
  pos: _taxi.TAXI_CONF.npc.pos
}, {
  name: 'Грузоперевозки',
  desc: 'Доставляйте товары в бизнесы и получайте за это монетку',
  descFull: 'Доступна с 3 уровня персонажа.\nТребования для устройства на работу:\n1. Получить права грузовой категории в лицензионном центре.\n2. Приехать в службу доставки и арендовать грузовик (Работать можно только на этом транспорте).\n3. Выбрать заказ на пункте выдачи.\n4. Отправится на погрузку.\nЗаказы от бизнесов оплачивают их владельцы. Также есть случайные заказы, суммы за которые оцениваются вашим уровнем грузоперевозчика.\nРабота дальнобойщика делиться на три уровня.\nНачальный уровень - малый транспорт аренда 500$, доставки от 1350 до 2250$.\n Средний уровень - транспорт аренда 1000$, доставки от 1350 до 2250$ + надбавка. \nВысокий уровень - крупный транспорт аренда 1500$, доставки от 1350 до 2250$ + надбавка',
  pos: _order.ORDER_MENU_POS[0]
}, {
  name: 'Gruupe Sechs',
  desc: 'Катайтесь по городу и собирайте монетки',
  descFull: `Доступна со ${_level.LEVEL_PERMISSIONS.GR6} уровня персонажа.\nТребования для устройства на работу:\n1. Получить права грузовой категории в лицензионном центре.\n2. Приехать в службу Gruppe 6 и устроиться на работу\n3. Арендовать инкассаторский автомобиль, если вы создаете свою команду.\n3. Можно вступить в команду инкассаторов или сделать свою. Минимум 2 человека.\n4. Получаете задание и отправляетесь на маршрут.\n5. После сбора всех точек, возвращаетесь на базу для разгрузки и берете новый маршрут.`,
  pos: _gr.GR6_BASE_POS
}, {
  name: 'Ремонт квартир',
  desc: 'Занимайтесь ремонтными работами',
  descFull: `Доступна со ${_level.LEVEL_PERMISSIONS.ROOM} уровня персонажа.\nЗовите друзей и стройте квартиру быстрее вместе с ними, зарабатывайте большие деньги, собирайте мебель, кладите плитку, красьте стены и многое другое. Выполнив всю работу, каждый участник получает зарплату в зависимости от количества сделанного.`,
  pos: {
    x: _construction.CONSTRUCTION_REGISTER_POS.x,
    y: _construction.CONSTRUCTION_REGISTER_POS.y
  }
}, {
  name: 'Электрик',
  desc: 'Ремонт электрооборудования',
  descFull: 'Работа доступна с 0 уровня персонажа.\nДля того, чтобы вам устроиться на работу электриком - требуется :\n  Приехать на электростанцию и выбрать доступный уровень работы.\n Зарплата зависит от уровня работы который вам доступен, а именно 50$ на первом (за одну точку), 1000$ на втором и 2000$ на третьем соответственно.',
  pos: {
    x: 726.75,
    y: 138.48
  }
}, {
  name: 'Водитель автобуса',
  desc: 'Управляйте автобусом и развозите людей по городу',
  descFull: 'Работа доступна с 0 уровня персонажа.\nДля того, чтобы вам устроиться на работу водителем автобуса - требуется :\n Получить лицензию на грузовой транспорт в лицензионном центре а далее приехать в автобусное депо и устроится там на работу.\n Зарплата зависит от уровня работы который вам доступен, а именно 195$ на первом уровне (за одну точку), 220$ на втором, 270$ на третьем, 350$ на четвертом и 500$ на пятом уровне.',
  pos: {
    x: 425.91,
    y: -621.62
  }
}];
const jobsList = exports.jobsList = [{
  icon: 566,
  icon_color: 0,
  id: "builder",
  name: "Стройка",
  dressMale: [[3, 0, 0], [8, 1, 0], [11, 1, 1], [1, 0, 0], [4, 90, 2], [6, 24, 0]],
  dressFemale: [[3, 0, 0], [8, 1, 1], [11, 88, 0], [1, 0, 0], [4, 93, 1], [6, 66, 0], [100, 120, 0], [101, 5, 0], [106, 1, 0]],
  pos: {
    x: -510.23,
    y: -1002.15,
    z: 22.55
  },
  desc: "Занимайтесь строительными работами",
  full_desc: "Занимайтесь строительными работами на начальном уровне персонажа. Зарплата варьируется от 60 до 100$ за 1 выполненную точку в зависимости от вашего уровня данной работы.",
  tasks: [{
    name: "Забивать гвозди",
    level: 2,
    desc: "Берите в руки в молоток, поднимайтесь на крышу и забивайте гвозди туда, куда укажут",
    money: 100,
    type: 0,
    points: [{
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -444.91,
      y: -911.71,
      z: 46.98,
      h: 176,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -442.60,
      y: -914.41,
      z: 46.98,
      h: 2,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -443.35,
      y: -947.16,
      z: 46.98,
      h: 271,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -441.94,
      y: -958.93,
      z: 46.98,
      h: 186,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -441.96,
      y: -950.26,
      z: 46.98,
      h: 359,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -441.84,
      y: -943.23,
      z: 46.98,
      h: 181,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -457.85,
      y: -934.86,
      z: 46.98,
      h: 276,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'loop'],
      x: -454.49,
      y: -953.39,
      z: 46.98,
      h: 93,
      minigame: _minigame.MINIGAME_TYPE.HAMMER
    }],
    exp: 1
  }, {
    name: "Упаковка коробок",
    desc: "Упакуйте коробку и заклейте ее скотчем.",
    money: 60,
    type: 0,
    points: [{
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -442.26,
      y: -967.70,
      z: 24.90,
      h: 277,
      minigame: _minigame.MINIGAME_TYPE.BOX
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -469.23,
      y: -957.04,
      z: 28.39,
      h: 87,
      minigame: _minigame.MINIGAME_TYPE.BOX
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -470.11,
      y: -926.19,
      z: 28.39,
      h: 70,
      minigame: _minigame.MINIGAME_TYPE.BOX
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -469.33,
      y: -957.05,
      z: 37.68,
      h: 79,
      minigame: _minigame.MINIGAME_TYPE.BOX
    }],
    exp: 1
  }, {
    name: "Сверление дырок",
    level: 1,
    desc: "Сверлите дырки",
    money: 80,
    type: 0,
    points: [{
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -444.26,
      y: -959.21,
      z: 46.98,
      h: 191,
      minigame: _minigame.MINIGAME_TYPE.DRILL
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -442.56,
      y: -914.43,
      z: 46.98,
      h: 359,
      minigame: _minigame.MINIGAME_TYPE.DRILL
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -442.56,
      y: -914.43,
      z: 46.98,
      h: 359,
      minigame: _minigame.MINIGAME_TYPE.DRILL
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -468.42,
      y: -931.28,
      z: 37.68,
      h: 91,
      minigame: _minigame.MINIGAME_TYPE.DRILL
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -460.90,
      y: -944.20,
      z: 37.69,
      h: 88,
      minigame: _minigame.MINIGAME_TYPE.DRILL
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -442.86,
      y: -952.68,
      z: 37.68,
      h: 270,
      minigame: _minigame.MINIGAME_TYPE.DRILL
    }],
    exp: 1
  }, {
    name: "Сварка",
    desc: "Сварите 2 металлических листа",
    money: 70,
    type: 0,
    points: [{
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -459.80,
      y: -947.70,
      z: 28.39,
      h: 28,
      minigame: _minigame.MINIGAME_TYPE.SVARKA
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -458.70,
      y: -909.92,
      z: 28.39,
      h: 97,
      minigame: _minigame.MINIGAME_TYPE.SVARKA
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -471.68,
      y: -954.96,
      z: 46.83,
      h: 18,
      minigame: _minigame.MINIGAME_TYPE.SVARKA
    }, {
      time: 1,
      task: ["missheistdockssetup1ig_4@end_idle", "floyd_fellpackage_endidle_dockworker1"],
      x: -471.79,
      y: -952.09,
      z: 46.83,
      h: 180,
      minigame: _minigame.MINIGAME_TYPE.SVARKA
    }],
    exp: 1
  }, {
    name: "Чинить проводку",
    level: 3,
    desc: "Чините проводку в разных зданиях",
    money: 100,
    type: 0,
    points: [{
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'floyd_fellpackage_endidle_dockworker1'],
      x: -490.35,
      y: -1020.24,
      z: 28.13,
      h: 95,
      minigame: _minigame.MINIGAME_TYPE.WIRES
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'floyd_fellpackage_endidle_dockworker1'],
      x: -482.00,
      y: -1039.10,
      z: 28.13,
      h: 146,
      minigame: _minigame.MINIGAME_TYPE.WIRES
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'floyd_fellpackage_endidle_dockworker1'],
      x: -456.90,
      y: -954.85,
      z: 28.39,
      h: 357,
      minigame: _minigame.MINIGAME_TYPE.WIRES
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'floyd_fellpackage_endidle_dockworker1'],
      x: -447.36,
      y: -895.61,
      z: 28.39,
      h: 5,
      minigame: _minigame.MINIGAME_TYPE.WIRES
    }, {
      time: 1,
      task: ['missheistdockssetup1ig_4@end_idle', 'floyd_fellpackage_endidle_dockworker1'],
      x: -448.45,
      y: -889.57,
      z: 28.39,
      h: 182,
      minigame: _minigame.MINIGAME_TYPE.WIRES
    }],
    exp: 1
  }]
}, {
  icon: 486,
  icon_color: 81,
  dressMale: [[3, 0, 0], [8, 5, 0], [11, 135, 4], [1, 0, 0], [4, 27, 7], [6, 1, 11]],
  dressFemale: [[3, 0, 0], [8, 2, 0], [11, 17, 0], [4, 74, 4], [6, 1, 8], [100, 120, 0], [101, 5, 0], [106, 1, 0]],
  id: "garden",
  name: "Сад",
  pos: {
    x: 2411.83,
    y: 4997.15,
    z: 45.58
  },
  desc: "Обрезайте листья на кустах, собирайте апельсины на деревьях",
  full_desc: "Обрезайте деревья или собирайте апельсины .Зарплата варьируется от 55 до 65$ за 1 выполненную точку в зависимости от вашего уровня данной работы.",
  tasks: [{
    name: "Сбор апельсинов",
    desc: "Идите куда укажут метки и срывайте апельсины",
    money: 55,
    type: 0,
    points: [{
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2391.99,
      y: 5005.22,
      z: 44.81,
      h: 103,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2389.22,
      y: 4993.22,
      z: 44.14,
      h: 225,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2375.40,
      y: 4989.58,
      z: 43.16,
      h: 120,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2362.66,
      y: 4989.22,
      z: 42.39,
      h: 109,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2350.44,
      y: 4989.71,
      z: 42.05,
      h: 101,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2349.23,
      y: 4977.19,
      z: 41.78,
      h: 179,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2336.99,
      y: 4976.33,
      z: 41.62,
      h: 108,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2319.72,
      y: 4984.13,
      z: 40.75,
      h: 81,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2317.54,
      y: 4993.46,
      z: 41.04,
      h: 24,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2305.19,
      y: 4997.62,
      z: 41.33,
      h: 140,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2315.89,
      y: 5007.79,
      z: 41.52,
      h: 310,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2329.68,
      y: 5021.01,
      z: 41.87,
      h: 323,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2341.64,
      y: 5034.33,
      z: 43.27,
      h: 344,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2330.32,
      y: 5037.36,
      z: 43.46,
      h: 109,
      minigame: _minigame.MINIGAME_TYPE.ORANGE
    }],
    exp: 1
  }, {
    name: "Обрезать листья",
    level: 1,
    desc: "Идите куда укажут метки и обрезайте листья на кустах",
    money: 65,
    type: 0,
    points: [{
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2391.99,
      y: 5005.22,
      z: 44.81,
      h: 103,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2389.22,
      y: 4993.22,
      z: 44.14,
      h: 225,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2375.40,
      y: 4989.58,
      z: 43.16,
      h: 120,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2362.66,
      y: 4989.22,
      z: 42.39,
      h: 109,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2350.44,
      y: 4989.71,
      z: 42.05,
      h: 101,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2349.23,
      y: 4977.19,
      z: 41.78,
      h: 179,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2336.99,
      y: 4976.33,
      z: 41.62,
      h: 108,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2319.72,
      y: 4984.13,
      z: 40.75,
      h: 81,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2317.54,
      y: 4993.46,
      z: 41.04,
      h: 24,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2305.19,
      y: 4997.62,
      z: 41.33,
      h: 140,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2315.89,
      y: 5007.79,
      z: 41.52,
      h: 310,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2329.68,
      y: 5021.01,
      z: 41.87,
      h: 323,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2341.64,
      y: 5034.33,
      z: 43.27,
      h: 344,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2330.32,
      y: 5037.36,
      z: 43.46,
      h: 109,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS
    }],
    exp: 1
  }, {
    name: "Поливать дерево",
    level: 1,
    desc: "Идите куда укажут метки и поливайте деревья",
    money: 60,
    type: 0,
    points: [{
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2391.99,
      y: 5005.22,
      z: 44.81,
      h: 103,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2389.22,
      y: 4993.22,
      z: 44.14,
      h: 225,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2375.40,
      y: 4989.58,
      z: 43.16,
      h: 120,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2362.66,
      y: 4989.22,
      z: 42.39,
      h: 109,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2350.44,
      y: 4989.71,
      z: 42.05,
      h: 101,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2349.23,
      y: 4977.19,
      z: 41.78,
      h: 179,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2336.99,
      y: 4976.33,
      z: 41.62,
      h: 108,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2319.72,
      y: 4984.13,
      z: 40.75,
      h: 81,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2317.54,
      y: 4993.46,
      z: 41.04,
      h: 24,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2305.19,
      y: 4997.62,
      z: 41.33,
      h: 140,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2315.89,
      y: 5007.79,
      z: 41.52,
      h: 310,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2329.68,
      y: 5021.01,
      z: 41.87,
      h: 323,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2341.64,
      y: 5034.33,
      z: 43.27,
      h: 344,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2330.32,
      y: 5037.36,
      z: 43.46,
      h: 109,
      minigame: _minigame.MINIGAME_TYPE.WATERPOT
    }],
    exp: 1
  }]
}, {
  icon: 537,
  icon_color: 38,
  dressMale: [[3, 0, 0], [8, 15, 0], [11, 9, 10], [4, 7, 2], [6, 8, 0]],
  dressFemale: [[3, 14, 0], [8, 2, 0], [11, 14, 14], [4, 11, 7], [6, 4, 2], [100, 120, 0], [101, 5, 0], [106, 1, 0]],
  id: "cleaning",
  name: "Клининговая компания",
  pos: {
    x: -1534.21,
    y: -452.88,
    z: 34.888
  },
  desc: "Мойте окна",
  full_desc: "Мойте окна.Зарплата 50$ за 1 выполненную точку в зависимости от вашего уровня данной работы.",
  tasks: [{
    name: "Мойка окон",
    desc: "Подойдите к окну и начните мыть его.",
    money: 100,
    type: 0,
    points: [{
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1536.07,
      y: -457.72,
      z: 39.52,
      h: 138,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1538.97,
      y: -455.77,
      z: 39.52,
      h: 135,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1541.56,
      y: -453.25,
      z: 39.52,
      h: 129,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1544.90,
      y: -450.59,
      z: 39.52,
      h: 129,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1551.37,
      y: -448.14,
      z: 39.52,
      h: 137,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1555.72,
      y: -444.26,
      z: 39.52,
      h: 138,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1551.55,
      y: -438.94,
      z: 39.52,
      h: 42,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1547.47,
      y: -434.68,
      z: 34.88,
      h: 46,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1548.89,
      y: -436.27,
      z: 34.88,
      h: 64,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1550.50,
      y: -438.00,
      z: 34.88,
      h: 49,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1543.59,
      y: -444.94,
      z: 34.88,
      h: 138,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1538.21,
      y: -449.19,
      z: 34.88,
      h: 136,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1536.21,
      y: -451.25,
      z: 34.88,
      h: 139,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1530.74,
      y: -455.80,
      z: 34.88,
      h: 136,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1533.02,
      y: -461.35,
      z: 34.41,
      h: 25,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1534.67,
      y: -463.12,
      z: 34.41,
      h: 35,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }, {
      time: 1,
      task: ['amb@world_human_maid_clean@', 'base'],
      x: -1538.46,
      y: -465.82,
      z: 34.41,
      h: 32,
      minigame: _minigame.MINIGAME_TYPE.WINDOW
    }],
    exp: 1
  }]
}, {
  icon: 140,
  icon_color: 11,
  dressMale: [[3, 4, 0], [8, 15, 0], [11, 65, 1], [4, 38, 1], [6, 14, 0], [100, 11, 0], [102, 33, 0], [106, 2, 0]],
  dressFemale: [[3, 3, 0], [8, 2, 0], [11, 59, 1], [4, 38, 1], [6, 66, 4], [100, 120, 0], [101, 5, 0]],
  id: "marihuana",
  name: "Гараж Тони",
  pos: {
    x: 1966.38,
    y: 5184.26,
    z: 46.95
  },
  desc: "Помогите местному авторитету",
  full_desc: "Помогите местному авторитету. Зарплата варьируется от 45 до 60$ за 1 выполненную точку в зависимости от вашего уровня данной работы.",
  tasks: [{
    name: "Обработка марихуаны",
    desc: "Обработайте кустарники марихуаны",
    money: 50,
    type: 0,
    points: [{
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1938.76,
      y: 5175.07,
      z: 47.00,
      h: 88,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1938.75,
      y: 5176.46,
      z: 47.00,
      h: 91,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1938.65,
      y: 5177.78,
      z: 47.00,
      h: 91,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1938.60,
      y: 5179.11,
      z: 47.00,
      h: 92,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1938.55,
      y: 5180.86,
      z: 47.00,
      h: 92,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1938.44,
      y: 5182.25,
      z: 47.00,
      h: 76,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1938.21,
      y: 5184.05,
      z: 47.00,
      h: 80,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1940.52,
      y: 5183.99,
      z: 47.00,
      h: 359,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1939.30,
      y: 5184.02,
      z: 47.00,
      h: 9,
      minigame: _minigame.MINIGAME_TYPE.GRASS
    }],
    exp: 1
  }, {
    name: "Сбор марихуаны",
    level: 1,
    desc: "Соберите марихуаны с кустов и отнесите",
    money: 60,
    type: 0,
    points: [{
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1994.96,
      y: 5128.82,
      z: 43.16,
      h: 226,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1996.32,
      y: 5130.33,
      z: 43.42,
      h: 243,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1998.28,
      y: 5132.49,
      z: 43.82,
      h: 235,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1998.28,
      y: 5132.49,
      z: 43.82,
      h: 235,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2001.56,
      y: 5136.09,
      z: 44.42,
      h: 232,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2003.37,
      y: 5137.75,
      z: 44.72,
      h: 229,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2004.78,
      y: 5139.40,
      z: 44.98,
      h: 239,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2006.44,
      y: 5140.96,
      z: 45.21,
      h: 249,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 2009.94,
      y: 5144.05,
      z: 45.65,
      h: 277,
      minigame: _minigame.MINIGAME_TYPE.SCISSORS_GRASS
    }],
    exp: 1
  }, {
    name: "Упаковка марихуаны",
    desc: "Упаковывайте марихуаны",
    money: 45,
    type: 0,
    points: [{
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1944.76,
      y: 5178.13,
      z: 47.00,
      h: 0,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1947.15,
      y: 5177.98,
      z: 47.00,
      h: 359,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1950.39,
      y: 5178.00,
      z: 47.00,
      h: 1,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1952.98,
      y: 5178.04,
      z: 47.00,
      h: 0,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1952.73,
      y: 5183.04,
      z: 47.00,
      h: 179,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1950.33,
      y: 5183.08,
      z: 47.00,
      h: 180,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1947.02,
      y: 5183.03,
      z: 47.00,
      h: 180,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }, {
      time: 1,
      task: ['amb@code_human_wander_texting@male@base', 'static'],
      x: 1944.37,
      y: 5182.98,
      z: 47.00,
      h: 181,
      minigame: _minigame.MINIGAME_TYPE.BOX_GRASS
    }],
    exp: 1
  }]
}];
const getJobData = id => {
  return jobsList.find(q => q.id === id);
};
exports.getJobData = getJobData;
function getJobName(item) {
  const data = typeof item === "string" ? getJobData(item) : item;
  if (!data) return null;
  return data.name;
}
const JOB_MAX_EXP = exports.JOB_MAX_EXP = 1000;
const getLevelByExp = exp => {
  if (typeof exp !== "number") return 0;
  if (exp == 1000) return 4;
  if (exp >= 300) return 3;
  if (exp >= 200) return 2;
  if (exp >= 100) return 1;
  return 0;
};
exports.getLevelByExp = getLevelByExp;
},{"./minigame":"K6Qz","./taxi":"u758","./order.system":"Bxla","./gr6":"rOsx","./level.permissions":"Nsuu","./construction":"dSZZ"}],"un2p":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doJobNow = void 0;
var _custom = require("./custom.event");
var _jobs = require("../../shared/jobs");
var _system = require("./system");
var _checkpoints = require("./checkpoints");
var _user = require("./user");
var _minigame = require("./minigame");
var _gui = require("./gui");
let currentJob;
let currentTask;
let currentPoint;
let currentKey;
let shape;
let blip;
let doJobNow = exports.doJobNow = false;
_custom.CustomEvent.registerServer('job:start', (job, task, key) => {
  clearJob();
  currentJob = (0, _jobs.getJobData)(job);
  currentTask = currentJob.tasks[task];
  currentKey = key;
  generateTask();
});
_custom.CustomEvent.registerServer('job:stop', () => {
  clearJob();
  currentJob = null;
  currentTask = null;
  currentKey = null;
});
_custom.CustomEvent.registerServer('job:data', (job, myjob, task, exp, clotheneed, clothe) => {
  _gui.gui.setGui('workselect');
  _custom.CustomEvent.triggerCef('job:data', job, myjob, task, exp, clotheneed, clothe);
});
const clearJob = () => {
  if (shape) shape.destroy();
  shape = null;
  if (blip && mp.blips.exists(blip)) blip.destroy();
  blip = null;
};
_jobs.jobsList.map(item => {
  if (typeof item.icon === "number" && typeof item.icon_color === "number") {
    const pos = new mp.Vector3(item.pos.x, item.pos.y, item.pos.z);
    _system.system.createBlip(item.icon, item.icon_color, pos, item.name);
  }
});
const generateTask = () => {
  clearJob();
  let randomPoint = _system.system.randomArrayElement(currentTask.points);
  currentPoint = randomPoint;
  let pos = new mp.Vector3(currentPoint.x, currentPoint.y, currentPoint.z);
  blip = _system.system.createBlip(1, 1, pos, "Точка назначения", 0, false);
  shape = _checkpoints.colshapes.new(pos, "", async player => {
    if (!currentJob) return;
    if (player.vehicle && !currentJob.allowVehicle) return _user.user.notify('Покиньте транспорт', 'error');
    clearJob();
    exports.doJobNow = doJobNow = true;
    if (currentPoint.entertext) _user.user.notify(currentPoint.entertext);
    if (typeof currentPoint.task === "string") {
      _user.user.playScenario(currentPoint.task, currentPoint.x, currentPoint.y, currentPoint.z, currentPoint.h, true);
    } else {
      _user.user.playAnim([currentPoint.task], false, false);
    }
    if (currentPoint.time) await _system.system.sleep(currentPoint.time * 1000);
    if (currentPoint.minigame && !(await (0, _minigame.MinigamePlay)(currentPoint.minigame))) {
      setTimeout(() => {
        generateTask();
      }, 2000);
      return _user.user.stopAnim();
    }
    _user.user.stopAnim();
    if (currentPoint.successtext) _user.user.notify(currentPoint.successtext, 'success');
    exports.doJobNow = doJobNow = false;
    if (currentTask.type == 1) {
      let randomPoint = _system.system.randomArrayElement(currentTask.pointsEnd);
      currentPoint = randomPoint;
      let pos = new mp.Vector3(currentPoint.x, currentPoint.y, currentPoint.z);
      blip = _system.system.createBlip(1, 1, pos, "Точка назначения", 0, false);
      shape = _checkpoints.colshapes.new(pos, "", async player => {
        clearJob();
        exports.doJobNow = doJobNow = true;
        if (currentPoint.entertext) _user.user.notify(currentPoint.entertext);
        if (currentPoint.task) {
          if (typeof currentPoint.task === "string") {
            _user.user.playScenario(currentPoint.task, currentPoint.x, currentPoint.y, currentPoint.z, currentPoint.h, true);
          } else {
            _user.user.playAnim([currentPoint.task], false, false);
          }
        }
        if (currentPoint.time) await _system.system.sleep(currentPoint.time * 1000);
        if (currentPoint.minigame && !(await (0, _minigame.MinigamePlay)(currentPoint.minigame))) {
          setTimeout(() => {
            generateTask();
          }, 2000);
          return _user.user.stopAnim();
        }
        _user.user.stopAnim();
        if (currentPoint.successtext) _user.user.notify(currentPoint.successtext, 'success');
        exports.doJobNow = doJobNow = false;
        _custom.CustomEvent.triggerServer('job:success', currentKey);
        setTimeout(() => {
          generateTask();
        }, 2000);
      }, {
        onenter: true
      });
    } else {
      _custom.CustomEvent.triggerServer('job:success', currentKey);
      setTimeout(() => {
        generateTask();
      }, 2000);
    }
  }, {
    onenter: true
  });
};
},{"./custom.event":"py8h","../../shared/jobs":"MxUb","./system":"pi2J","./checkpoints":"XCJl","./user":"ggMw","./minigame":"KnNo","./gui":"bk91"}],"RT6N":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openDeathDialog = exports.destroyDeathDialog = exports.DialogAcceptDestroyBig = exports.DialogAccept = void 0;
var _controls = require("./controls");
var _custom = require("./custom.event");
let ids = 0;
let DialogAcceptHandles = new Map();
let deathCallback;
const DialogAccept = (text, type, time = 5000, accept = "Да", cancel = "Нет") => {
  return new Promise(resolve => {
    ids++;
    const id = parseInt(`${ids}`);
    DialogAcceptHandles.set(id, resolve);
    if (type === "big") (0, _controls.tempCursorStatus)(true);
    _custom.CustomEvent.triggerCef('dialog:accept', id, type, text, time, accept, cancel);
  });
};
exports.DialogAccept = DialogAccept;
const DialogAcceptDestroyBig = () => {
  _custom.CustomEvent.triggerCef('dialog:accept:destroyBig');
};
exports.DialogAcceptDestroyBig = DialogAcceptDestroyBig;
const openDeathDialog = (time, killerId, killerName, disableChoose = false) => {
  return new Promise(resolve => {
    deathCallback = resolve;
    (0, _controls.tempCursorStatus)(true);
    _custom.CustomEvent.triggerCef('deathpopup:show', true);
    _custom.CustomEvent.triggerCef('deathpopup:setTime', time);
    if (killerName) _custom.CustomEvent.triggerCef('deathpopup:setKillerName', killerId, killerName);else _custom.CustomEvent.triggerCef('deathpopup:setSuicide');
    if (disableChoose) {
      resolve(null);
    }
  });
};
exports.openDeathDialog = openDeathDialog;
const destroyDeathDialog = () => {
  deathCallback = null;
  _custom.CustomEvent.triggerCef('deathpopup:show', false);
};
exports.destroyDeathDialog = destroyDeathDialog;
mp.events.add('deathDialog:accept:status', status => {
  if (!deathCallback) return;
  deathCallback(status);
  deathCallback = null;
  (0, _controls.tempCursorStatus)(false);
});
mp.events.add('dialog:accept:status', (id, status) => {
  let prom = DialogAcceptHandles.get(id);
  if (!prom) return;
  prom(status);
  DialogAcceptHandles.delete(id);
  if ([...DialogAcceptHandles].length === 0) (0, _controls.tempCursorStatus)(false);
});
_custom.CustomEvent.registerServer('dialog:accept', (text, type, time = 5000, accept = "Да", cancel = "Нет") => {
  return DialogAccept(text, type, time, accept, cancel);
});
},{"./controls":"yuOK","./custom.event":"py8h"}],"CTZz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatch = void 0;
var _custom = require("./custom.event");
var _user = require("./user");
const dispatch = exports.dispatch = {
  call: (faction, text, pos = true, timeSecond = 120) => {
    _custom.CustomEvent.triggerServer('dispatch:call', faction, text, pos, timeSecond);
  }
};
let deathMarker;
_custom.CustomEvent.registerServer('markDeath', pos => {
  if (!_user.user.login) return;
  if (deathMarker) deathMarker.destroy();
  const z = mp.game.gameplay.getGroundZFor3dCoord(pos[0], pos[1], 99999, 0.0, false);
  deathMarker = mp.markers.new(27, new mp.Vector3(pos[0], pos[1], z), 3, {
    color: [128, 128, 128, 255],
    dimension: 0
  });
});
_custom.CustomEvent.registerServer('markDeath:destroy', () => {
  if (!_user.user.login) return;
  if (deathMarker) deathMarker.destroy();
});
let send = false;
_custom.CustomEvent.register('ten0', () => {
  if (!_user.user.login) return;
  if (!_user.user.is_police) return;
  if (send) return;
  send = true;
  setTimeout(() => {
    send = false;
  }, 5000);
  _custom.CustomEvent.triggerServer('dispatch:tencode', 0, false);
});
},{"./custom.event":"py8h","./user":"ggMw"}],"axP1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.water_max = exports.hospitalPos = exports.food_max = exports.WATER_RATE = exports.SURGEON_POS = exports.SURGEON_COST = exports.HP_WATER_RATE = exports.HP_TOTAL_FOOD_WATER_RATE = exports.HP_MINUS_RATE = exports.HP_FOOD_RATE = exports.HEAL_ZONE_POS = exports.FOOD_RATE = exports.DO_JOB_WATER_MULTIPLER = exports.DO_JOB_FOOD_MULTIPLER = exports.AFTER_DEATH_TIME = exports.AFTER_DEATH_RANGE = void 0;
const AFTER_DEATH_TIME = exports.AFTER_DEATH_TIME = 30;
const AFTER_DEATH_RANGE = exports.AFTER_DEATH_RANGE = 150;
const food_max = exports.food_max = 1000;
const water_max = exports.water_max = 1000;
const SURGEON_POS = exports.SURGEON_POS = [new mp.Vector3(299.56, -598.35, 42.36), new mp.Vector3(-252.94, 6314.85, 31.53)];
const SURGEON_COST = exports.SURGEON_COST = 100000;
var WATER_RATE;
(function (WATER_RATE) {
  WATER_RATE[WATER_RATE["SPRINTING"] = 1] = "SPRINTING";
  WATER_RATE[WATER_RATE["RUNNING"] = 0.05] = "RUNNING";
  WATER_RATE[WATER_RATE["STRAFING"] = 0.05] = "STRAFING";
  WATER_RATE[WATER_RATE["SWIMMING"] = 0.05] = "SWIMMING";
  WATER_RATE[WATER_RATE["DIVING"] = 0.2] = "DIVING";
})(WATER_RATE || (exports.WATER_RATE = WATER_RATE = {}));
var FOOD_RATE;
(function (FOOD_RATE) {
  FOOD_RATE[FOOD_RATE["SPRINTING"] = 1] = "SPRINTING";
  FOOD_RATE[FOOD_RATE["RUNNING"] = 0.05] = "RUNNING";
  FOOD_RATE[FOOD_RATE["STRAFING"] = 0.05] = "STRAFING";
  FOOD_RATE[FOOD_RATE["SWIMMING"] = 0.05] = "SWIMMING";
  FOOD_RATE[FOOD_RATE["DIVING"] = 0.2] = "DIVING";
})(FOOD_RATE || (exports.FOOD_RATE = FOOD_RATE = {}));
const DO_JOB_FOOD_MULTIPLER = exports.DO_JOB_FOOD_MULTIPLER = 0.25;
const DO_JOB_WATER_MULTIPLER = exports.DO_JOB_WATER_MULTIPLER = 0.25;
const HP_MINUS_RATE = exports.HP_MINUS_RATE = 20;
const HP_WATER_RATE = exports.HP_WATER_RATE = 0.1;
const HP_FOOD_RATE = exports.HP_FOOD_RATE = 0.3;
const HP_TOTAL_FOOD_WATER_RATE = exports.HP_TOTAL_FOOD_WATER_RATE = 0.5;
const HEAL_ZONE_POS = exports.HEAL_ZONE_POS = [new mp.Vector3(319.20, -574.70, 85.93), new mp.Vector3(-252.00, 6333.96, 31.43), new mp.Vector3(1830.50, 3681.80, 33.27)];
const hospitalPos = exports.hospitalPos = [[new mp.Vector3(305.40, -576.51, 86.93), new mp.Vector3(306.91, -576.80, 86.93), new mp.Vector3(307.70, -577.85, 86.93), new mp.Vector3(310.27, -566.34, 86.93), new mp.Vector3(310.54, -567.98, 86.93), new mp.Vector3(315.44, -564.11, 86.93), new mp.Vector3(316.07, -565.90, 86.93), new mp.Vector3(325.98, -569.17, 86.93), new mp.Vector3(324.55, -569.65, 86.93), new mp.Vector3(328.22, -574.52, 86.93), new mp.Vector3(326.94, -575.18, 86.93)], [new mp.Vector3(-260.47, 6328.38, 32.43), new mp.Vector3(-260.24, 6326.88, 32.43), new mp.Vector3(-258.29, 6327.75, 32.43), new mp.Vector3(-258.65, 6326.10, 32.43), new mp.Vector3(-257.22, 6325.83, 32.43)], [new mp.Vector3(1836.36, 3688.59, 34.27), new mp.Vector3(1837.63, 3686.82, 34.27), new mp.Vector3(1835.66, 3686.62, 34.27), new mp.Vector3(1833.42, 3692.35, 34.27), new mp.Vector3(1833.83, 3690.65, 34.27)]];
},{}],"o9ld":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.illData = exports.getIllConfig = exports.POISONING_DAYS = exports.POISONING_CHANCE_PER_DAY = exports.PILL_USE_TIMER = exports.ILL_SYSTEM_STEP = exports.HEAL_MEDIC_POSITION = void 0;
const ILL_SYSTEM_STEP = exports.ILL_SYSTEM_STEP = 5;
const POISONING_DAYS = exports.POISONING_DAYS = 7;
const POISONING_CHANCE_PER_DAY = exports.POISONING_CHANCE_PER_DAY = 10;
const illData = exports.illData = [{
  id: "narko",
  name: "Наркозависимость",
  max: 1000,
  critical: 700,
  step: 5,
  healItem: 903,
  step_critical: 30,
  hp: 10,
  healByMedicCostPerOne: 20
}, {
  id: "alco",
  name: "Алкозависимость",
  max: 1000,
  critical: 700,
  step: 10,
  step_critical: 20,
  hp: 5,
  healItem: 900,
  healItemMultiple: 100,
  healByMedicCostPerOne: 10
}, {
  id: "food",
  chance: 5,
  name: "Отравление",
  max: 1000,
  critical: 700,
  step: 10,
  step_critical: 20,
  hp: 5,
  healItem: 909,
  healItemMultiple: 100,
  healByMedicCostPerOne: 10
}];
const HEAL_MEDIC_POSITION = exports.HEAL_MEDIC_POSITION = [new mp.Vector3(309.52, -562.26, 42.28), new mp.Vector3(-248.21, 6315.83, 31.43)];
const PILL_USE_TIMER = exports.PILL_USE_TIMER = 5;
const getIllConfig = ill => {
  return illData.find(q => q.id === ill);
};
exports.getIllConfig = getIllConfig;
},{}],"fusL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MARKERS_SETTINGS = void 0;
const MARKERS_SETTINGS = exports.MARKERS_SETTINGS = {
  HEAL_ZONE: {
    r: 1.7,
    color: [100, 100, 100, 0]
  },
  LICENCE_CENTER: {
    r: 1.7,
    color: [100, 100, 100, 0]
  },
  DOCUMENT_GIVE: {
    r: 1.7,
    color: [100, 100, 100, 0]
  },
  JOBS: {
    r: 1.7,
    color: [100, 100, 100, 0]
  },
  ITEMS: {
    r: 2.5,
    color: [100, 100, 100, 0]
  },
  BAR: {
    r: 2.5,
    color: [100, 100, 100, 0]
  },
  BARBER: {
    r: 1.7,
    color: [100, 100, 100, 0]
  },
  DRESS: {
    r: 2,
    color: [100, 100, 100, 0]
  },
  TATTOO: {
    r: 1.7,
    color: [100, 100, 100, 0]
  }
};
},{}],"tmym":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FamilyCargoTime = exports.FamilyCargoStartMembers = exports.FamilyCargoStartFamilies = exports.FamilyCargoStages = exports.FAMILY_TIMEOUT_AFTER_CARGO_BATTLE = exports.FAMILY_CARGO_VALUE_FOR_WIN = exports.FAMILY_CARGO_TIME_TO_TIMER = exports.FAMILY_CARGO_POINTS_FOR_ONE_TICK = exports.FAMILY_CARGO_DISTANCE = exports.CARGOBATTLE_OBJECTS = void 0;
const FamilyCargoStartMembers = exports.FamilyCargoStartMembers = 1;
const FamilyCargoStartFamilies = exports.FamilyCargoStartFamilies = 1;
const FamilyCargoTime = exports.FamilyCargoTime = 2;
const FamilyCargoStages = exports.FamilyCargoStages = {
  STAGE_NONE: 1,
  STAGE_FREEZE: 2,
  STAGE_ATTACK: 3
};
const FAMILY_TIMEOUT_AFTER_CARGO_BATTLE = exports.FAMILY_TIMEOUT_AFTER_CARGO_BATTLE = 60 * 5;
const FAMILY_CARGO_POINTS_FOR_ONE_TICK = exports.FAMILY_CARGO_POINTS_FOR_ONE_TICK = 3;
const FAMILY_CARGO_VALUE_FOR_WIN = exports.FAMILY_CARGO_VALUE_FOR_WIN = 3000;
const FAMILY_CARGO_DISTANCE = exports.FAMILY_CARGO_DISTANCE = 170;
const FAMILY_CARGO_TIME_TO_TIMER = exports.FAMILY_CARGO_TIME_TO_TIMER = 0;
const CARGOBATTLE_OBJECTS = exports.CARGOBATTLE_OBJECTS = [{
  "model": "pp_containeronyx",
  "x": 1448.9803466796875,
  "y": -1691.6434326171875,
  "z": 66.72200775146484,
  "rx": -3.228348731994629,
  "ry": 1.336141650654099,
  "rz": 2.047194242477417
}, {
  "model": "pp_containeronyx",
  "x": 2665.065185546875,
  "y": 1408.3306884765625,
  "z": 24.87902069091797,
  "rx": 0,
  "ry": 0,
  "rz": -16.500097274780273
}, {
  "model": "pp_containeronyx",
  "x": 2709.677001953125,
  "y": 2854.109619140625,
  "z": 38.88386535644531,
  "rx": -2.169280767440796,
  "ry": 7.519629955291748,
  "rz": 57.63758087158203
}, {
  "model": "pp_containeronyx",
  "x": 2415.127685546875,
  "y": 3057.440673828125,
  "z": 48.49504470825195,
  "rx": 0,
  "ry": 0,
  "rz": 17.362144470214844
}, {
  "model": "pp_containeronyx",
  "x": 1739.00732421875,
  "y": 2837.101806640625,
  "z": 42.8490104675293,
  "rx": 0,
  "ry": 0,
  "rz": -60.43278121948242
}, {
  "model": "pp_containeronyx",
  "x": 1445.5234375,
  "y": 2893.406982421875,
  "z": 47.892417907714844,
  "rx": -4.921261787414551,
  "ry": -2.4015698432922363,
  "rz": 0
}, {
  "model": "pp_containeronyx",
  "x": 774.7483520507812,
  "y": 3581.991455078125,
  "z": 32.5422477722168,
  "rx": 0.1985706090927124,
  "ry": 0,
  "rz": -65.0484390258789
}, {
  "model": "pp_containeronyx",
  "x": 1255.94189453125,
  "y": 4395.193359375,
  "z": 43.90522766113281,
  "rx": -4.293940544128418,
  "ry": -4.043604373931885,
  "rz": -5.134772777557373
}, {
  "model": "pp_containeronyx",
  "x": -397.2535400390625,
  "y": 4328.943359375,
  "z": 56.74571990966797,
  "rx": 3.010317325592041,
  "ry": 9.53088092803955,
  "rz": -15.69547176361084
}, {
  "model": "pp_containeronyx",
  "x": -3.5007011890411377,
  "y": 2925.00830078125,
  "z": 57.27580642700195,
  "rx": -3.716099977493286,
  "ry": -0.9882188439369202,
  "rz": 2.3012309074401855
}, {
  "model": "pp_containeronyx",
  "x": 1068.7000732421875,
  "y": 2300.219970703125,
  "z": 45.88756561279297,
  "rx": 0.37795525789260864,
  "ry": -1.5903119817664742,
  "rz": -90
}, {
  "model": "pp_containeronyx",
  "x": 1269.53369140625,
  "y": 1816.372802734375,
  "z": 83.59292602539062,
  "rx": -1.1506202220916748,
  "ry": -6.501245975494385,
  "rz": -0.18007919192314148
}, {
  "model": "pp_containeronyx",
  "x": 1621.0147705078125,
  "y": 2134.547607421875,
  "z": 80.22152709960938,
  "rx": -1.5015058517456055,
  "ry": 1.9958070516586304,
  "rz": 54.412078857421875
}, {
  "model": "pp_containeronyx",
  "x": 2135.03466796875,
  "y": 1789.5146484375,
  "z": 104.29984283447266,
  "rx": 0.0012640384957194328,
  "ry": -3.999840021133423,
  "rz": 4.465108394622803
}, {
  "model": "pp_containeronyx",
  "x": 1888.642578125,
  "y": 328.7004089355469,
  "z": 163.06044006347656,
  "rx": 1.4999994039535522,
  "ry": 0,
  "rz": 0
}, {
  "model": "pp_containeronyx",
  "x": 964.4987182617188,
  "y": 3567.791748046875,
  "z": 33.86485290527344,
  "rx": -0.9999997019767761,
  "ry": 3.499999523162842,
  "rz": 48.999820709228516
}, {
  "model": "pp_containeronyx",
  "x": 1644.7801513671875,
  "y": 6609.9931640625,
  "z": 22.935958862304688,
  "rx": -17.531944274902344,
  "ry": -7.385069847106934,
  "rz": 2.3638222217559814
}, {
  "model": "pp_containeronyx",
  "x": 601.4368896484375,
  "y": 6651.68408203125,
  "z": 11.120121002197266,
  "rx": -4.998624801635742,
  "ry": 4.504117012023926,
  "rz": 0.5525332689285278
}, {
  "model": "pp_containeronyx",
  "x": -1317.15869140625,
  "y": 4443.68212890625,
  "z": 23.55460548400879,
  "rx": -12.50828783416748,
  "ry": 6.953901767730713,
  "rz": 0.3037002682685852
}];
},{}],"JQ82":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isOnAnyCargoBattle = void 0;
var _custom = require("./custom.event");
var _system = require("./system");
var _family = require("../../shared/family.cargobattle");
var _TextTimerBar = require("./bars/classes/TextTimerBar");
var _user = require("./user");
const player = mp.players.local;
mp.events.add('family:cargoBattle:setGPS', id => {
  var _allBattles$get;
  (_allBattles$get = allBattles.get(id)) === null || _allBattles$get === void 0 || _allBattles$get.setGPS();
});
_custom.CustomEvent.registerServer('family:cargoBattle:start', (x, y, z, id) => {
  if (!allBattles.get(id)) {
    new CargoBattle(id).start(x, y, z);
  } else {
    const b = allBattles.get(id);
    if (!b.mainBlip) b.start(x, y, z);
  }
});
_custom.CustomEvent.registerServer('family:cargoBattle:stop', id => CargoBattle.stop(id));
_custom.CustomEvent.registerServer('family:cargoBattle:stopAll', () => CargoBattle.stopAll());
_custom.CustomEvent.register('family:cargoBattle:stopAll', () => CargoBattle.stopAll());
_custom.CustomEvent.registerServer('family:cargoBattle:setStage', (id, stage, name, points, speed) => CargoBattle.setStage(id, stage, name, points, speed));
_custom.CustomEvent.registerServer('family:cargoBattle:readyStart', (id, time) => {
  if (!allBattles.get(id)) new CargoBattle(id).readyStart(time);else {
    const b = allBattles.get(id);
    if (!b.readyStartBar || !b.readyStartBar.exists()) b.readyStart(time);
  }
});
let allBattles = new Map();
let viewCef = null;
const isOnAnyCargoBattle = () => {
  let anyBattle = false;
  allBattles.forEach(b => {
    if (b.isOnBattle()) anyBattle = true;
  });
  return anyBattle;
};
exports.isOnAnyCargoBattle = isOnAnyCargoBattle;
class CargoBattle {
  constructor(id) {
    this.mainBlip = null;
    this.addBlip = null;
    this.flashTimer = null;
    this.startPosition = null;
    this.blipFlash = false;
    this.speed = 1000;
    this.readyStartBar = null;
    this.readyStartTime = 0;
    this.readyStartTimeout = null;
    this.id = id;
    allBattles.set(this.id, this);
  }
  setGPS() {
    if (this.startPosition) _user.user.setWaypoint(this.startPosition.x, this.startPosition.y, this.startPosition.z, true);
  }
  readyStart(time) {
    if (!time && this.readyStartTime <= 0) return this.endReadyStart();
    if (time) this.readyStartTime = time;
    const title = `Подготовка к Высадке груза${_user.user.isAdminNow() ? ' (ID: ' + this.id + ')' : ''}`;
    const text = _system.system.secondsToString(this.readyStartTime--);
    if (this.readyStartBar && this.readyStartBar.exists()) {
      this.readyStartBar.title = title;
      this.readyStartBar.text = text;
    } else this.readyStartBar = new _TextTimerBar.TextTimerBar(title, text);
    if (this.readyStartTimeout) clearTimeout(this.readyStartTimeout);
    this.readyStartTimeout = setTimeout(() => this.readyStart(), 1000);
  }
  endReadyStart() {
    if (this.readyStartBar && this.readyStartBar.exists()) this.readyStartBar.destroy();
    if (this.readyStartTimeout) {
      clearTimeout(this.readyStartTimeout);
      this.readyStartTimeout = null;
    }
    this.readyStartBar = null;
  }
  static get viewCef() {
    return viewCef;
  }
  static set viewCef(val) {
    viewCef = val;
  }
  static stop(id) {
    allBattles.forEach((b, i) => {
      if (b.id == id && b.mainBlip) {
        b.stop();
        allBattles.delete(b.id);
      }
    });
  }
  static stopAll() {
    allBattles.forEach((b, i) => {
      if (b.mainBlip) b.stop();
    });
    allBattles = new Map();
  }
  static setStage(id, stage, name, points, speed) {
    allBattles.forEach(b => {
      if (b.id == id) b.setStage(stage, name, points, speed);
    });
  }
  isVeryClosest() {
    let veryClosest = this;
    let minimalDistance = _system.system.distanceToPos(player.position, this.startPosition);
    allBattles.forEach(b => {
      if (b.id != this.id && b.mainBlip && _system.system.distanceToPos(player.position, b.startPosition) < minimalDistance) veryClosest = b;
    });
    return veryClosest == this;
  }
  isOnBattle() {
    return this.mainBlip && this.startPosition && _system.system.distanceToPos(player.position, this.startPosition) <= _family.FAMILY_CARGO_DISTANCE;
  }
  setStage(stage, name, points, speed) {
    this.speed = speed;
    if (this.isOnBattle()) {
      if (this.addBlip) {
        this.addBlip.destroy();
        this.addBlip = null;
      }
    } else this.createAddBlip();
    if (stage == _family.FamilyCargoStages.STAGE_NONE) {
      if (this.flashTimer) {
        clearInterval(this.flashTimer);
        this.flashTimer = null;
      }
      this.mainBlip.setColour(2);
      if (CargoBattle.viewCef == this) {
        _custom.CustomEvent.triggerCef('hud:cargoBattle', false, '', 0);
      }
      return;
    }
    if (stage == _family.FamilyCargoStages.STAGE_FREEZE) {
      if (this.flashTimer) {
        clearInterval(this.flashTimer);
        this.flashTimer = null;
      }
      this.mainBlip.setColour(26);
      if (this.isVeryClosest()) {
        _custom.CustomEvent.triggerCef('hud:cargoBattle', true, name, points, 0);
        CargoBattle.viewCef = this;
      }
      return;
    }
    if (stage == _family.FamilyCargoStages.STAGE_ATTACK) {
      if (!this.flashTimer) this.startIntervalBlip();
      if (this.isVeryClosest()) {
        _custom.CustomEvent.triggerCef('hud:cargoBattle', true, name, points, speed);
        CargoBattle.viewCef = this;
      }
      return;
    }
  }
  createAddBlip() {
    if (this.addBlip) return;
    this.addBlip = mp.blips.new(103, new mp.Vector3(this.startPosition.x, this.startPosition.y, this.startPosition.z), {
      dimension: 0,
      shortRange: false,
      color: 2
    });
  }
  stop() {
    if (CargoBattle.viewCef == this) {
      _custom.CustomEvent.triggerCef('hud:cargoBattle', false, '', 0);
    }
    if (this.mainBlip) {
      this.mainBlip.destroy();
      this.mainBlip = null;
    }
    if (this.addBlip) {
      this.addBlip.destroy();
      this.addBlip = null;
    }
    if (this.flashTimer) {
      clearInterval(this.flashTimer);
      this.flashTimer = null;
    }
    this.endReadyStart();
    this.startPosition = {
      x: 0,
      y: 0,
      z: -3000
    };
  }
  start(x, y, z) {
    this.startPosition = {
      x,
      y,
      z
    };
    this.mainBlip = mp.blips.new(9, new mp.Vector3(x, y, z), {
      alpha: 150,
      dimension: 0,
      radius: _family.FAMILY_CARGO_DISTANCE,
      shortRange: true,
      color: 2,
      name: 'Семейный груз'
    });
    this.createAddBlip();
  }
  startIntervalBlip() {
    this.flashTimer = setInterval(() => {
      if (!this.mainBlip) return;
      this.mainBlip.setAlpha(this.blipFlash ? 50 : 150);
      this.mainBlip.setColour(this.blipFlash ? 1 : 85);
      this.blipFlash = !this.blipFlash;
    }, this.speed);
  }
}
},{"./custom.event":"py8h","./system":"pi2J","../../shared/family.cargobattle":"tmym","./bars/classes/TextTimerBar":"CjKg","./user":"ggMw"}],"nroP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.survival = exports.hospitalTimer = exports.healTimer = exports.getNearestHealPoint = void 0;
var _custom = require("./custom.event");
var _user = require("./user");
var _system = require("./system");
var _arrays = require("../../shared/arrays");
var _checkpoints = require("./checkpoints");
var _jobs = require("./jobs");
var _TextTimerBar = require("./bars/classes/TextTimerBar");
var _accept = require("./accept");
var _dispatch = require("./dispatch");
var _survival = require("../../shared/survival");
var _economy = require("../../shared/economy");
var _ill = require("../../shared/ill");
var _menu = require("./menu");
var _markers = require("../../shared/markers.settings");
var _protection = require("./protection");
var _family = require("./family.cargobattle");
var _gui = require("./gui");
var _vip = require("../../shared/vip");
var _cameraManager = require("./cameraManager");
const player = mp.players.local;
const survival = exports.survival = {
  food: 0,
  water: 0
};
let currentRespawnHash;
let currentRespawnHashCode = _system.system.randomStr(10);
let currentHealHash;
let currentHealHashCode = _system.system.randomStr(10);
_custom.CustomEvent.registerServer('survival:init', (food, water) => {
  survival.food = food;
  survival.water = water;
});
const selectIll = (heal = false) => {
  return new Promise(resolve => {
    const m = new _menu.MenuClass('Выберите необходимую болезнь');
    m.onclose = () => {
      resolve(null);
    };
    m.workAnyTime = true;
    m.exitProtect = true;
    _ill.illData.map(ill => {
      m.newItem({
        name: ill.name,
        more: heal ? `$${_system.system.numberFormat(ill.healByMedicCostPerOne)} за единицу` : '',
        onpress: () => {
          m.close();
          resolve(ill.id);
        }
      });
    });
    m.open();
  });
};
_checkpoints.colshapes.new(_ill.HEAL_MEDIC_POSITION, 'Место для лечения болезней', () => {
  if (_user.user.fraction != 16) return _user.user.notify("Вы должны быть медиком чтобы лечить пациентов", 'error');
  const m = new _menu.MenuClass('Лечение от зависимостей');
  m.newItem({
    name: 'Обследование',
    desc: 'Выбрав этот пункт вы проведёте обследование пациента',
    onpress: () => {
      const target = _user.user.getNearestPlayer();
      if (!target) return _user.user.notify("Поблизости никого нет", 'error');
      _custom.CustomEvent.callServer('illdata:data', target.remoteId).then(res => {
        if (!res) return;
        const s = new _menu.MenuClass('Информация');
        for (let q in res) {
          const data = (0, _ill.getIllConfig)(q);
          if (data) {
            const val = res[q];
            const valV = (val / 10).toFixed(0);
            const valVM = (data.max / 10).toFixed(0);
            const valVC = (data.critical / 10).toFixed(0);
            const cost = data.healByMedicCostPerOne * val;
            s.newItem({
              name: `${data.name}`,
              more: `${valV} / ${valVM} %`,
              desc: `Текущее состояние болезни: ${valV}% / ${valVM}%. Критическое значение: ${valVC}%`,
              onpress: () => {
                (0, _accept.DialogAccept)(`Вылечить пациента за $${cost}.`, 'small', 20000).then(status => {
                  if (!status) return;
                  _custom.CustomEvent.triggerServer('illdata:heal', target.remoteId, data.id, cost);
                });
              }
            });
          }
        }
        s.open();
      });
    }
  });
  m.open();
});
_survival.HEAL_ZONE_POS.map(item => {
  _checkpoints.colshapes.new(item, 'Выписка из больницы $' + _system.system.numberFormat(_economy.QUICK_HEAL_COST.AUTO), async () => {
    if (healTimer <= 0) return _user.user.notify('Вам не требуется выписка', 'error');
    const sum = (await _user.user.haveActiveLicense('med')) ? _economy.QUICK_HEAL_COST.AUTO_LICENSE : _economy.QUICK_HEAL_COST.AUTO;
    (0, _accept.DialogAccept)(`Вы хотите оплатить $${_system.system.numberFormat(sum)} за ускореное лечение?`, 'big').then(status => {
      if (!status) return;
      if (healTimer <= 0) return _user.user.notify('Вам не требуется выписка', 'error');
      if (_user.user.money < sum) return _user.user.notify('У вас недостаточно средств для оплаты', 'error');
      _custom.CustomEvent.callServer('heal:payauto').then(q => {
        if (!q) return;
        setHealTimer(0);
        _user.user.notify('Вас выписали', 'success');
      });
    });
  }, {
    radius: _markers.MARKERS_SETTINGS.HEAL_ZONE.r,
    color: _markers.MARKERS_SETTINGS.HEAL_ZONE.color
  });
});
let exitHealtProtect = [new mp.Vector3(346.12, -592.85, 28.79), new mp.Vector3(350.62, -581.76, 28.79), new mp.Vector3(320.41, -561.42, 28.78)];
exitHealtProtect.map(pos => {
  let shape = _checkpoints.colshapes.new(pos, null, () => {
    if (healTimer <= 0) return;
    const pos = getNearestHealPoint();
    (0, _protection.anticheatProtect)('heal');
    _custom.CustomEvent.triggerServer('heal:tryrun', pos.x, pos.y, pos.z);
  }, {
    color: [0, 0, 0, 0],
    onenter: true
  });
});
const startTimer = 120;
_custom.CustomEvent.registerServer('hospital:healTimer', () => {
  return healTimer;
});
_custom.CustomEvent.registerServer('hospital:clearHealTimer', () => {
  if (healTimer) _user.user.notify('Вас выписали', 'success');
  setHealTimer(0);
  return true;
});
let hospitalTimer = exports.hospitalTimer = -1;
let qs;
let triggerDeath = false;
_custom.CustomEvent.registerServer('player:dead', (killerName, killerId) => {
  if (mp.players.local.wasKilledByTakedown() && _user.user.login && _gui.gui.currentGui !== "spawn") {
    setTimeout(() => callDeath(killerName, killerId), 3500);
  } else {
    callDeath(killerName, killerId);
  }
});
setInterval(() => {
  if (player.getHealth() > 0) {
    triggerDeath = false;
  } else if (!triggerDeath) {
    callDeath();
  }
}, 10000);
let deathWantedLevel = 0;
let lastKillerId = null;
let lastKillerName = null;
let isPopupWithMedics;
mp.events.add('gui:menuClosed', async menu => {
  if (player.isDead()) {
    await (0, _accept.openDeathDialog)(reviveTimer, lastKillerId, lastKillerName, true);
    _custom.CustomEvent.triggerCef('deathpopup:setType', isPopupWithMedics);
  }
});
const deathCamera = _cameraManager.CamerasManager.hasCamera('death') ? _cameraManager.CamerasManager.getCamera('death') : _cameraManager.CamerasManager.createCamera('death', 'default', mp.players.local.position, new mp.Vector3(-90, 0, 0), 50);
const mouseSensitivity = 6;
mp.events.add('render', () => {
  if (deathCamera && deathCamera.isActive() && deathCamera.isRendering() && !mp.gui.cursor.visible) {
    mp.game.controls.disableAllControlActions(2);
    let x = mp.game.controls.getDisabledControlNormal(7, 1) * mouseSensitivity;
    let y = mp.game.controls.getDisabledControlNormal(7, 2) * mouseSensitivity;
    let currentRot = deathCamera.getRot(2);
    currentRot = new mp.Vector3(currentRot.x - y, 0, currentRot.z - x);
    deathCamera.setRot(currentRot.x, currentRot.y, currentRot.z, 2);
  }
});
const callDeath = async (killerName, killerId) => {
  if (!_user.user.login) return;
  if (_gui.gui.currentGui === "spawn") return;
  if (triggerDeath) return;
  triggerDeath = true;
  _custom.CustomEvent.triggerServer('death:toggle', true);
  setDeathTimer(300);
  let qs2 = _system.system.randomStr(10);
  qs = qs2 + "";
  if (!player.dimension && !(0, _family.isOnAnyCargoBattle)()) {
    deathCamera.setCoord(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z + 1);
    _cameraManager.CamerasManager.setActiveCamera(deathCamera, true);
    const status = await (0, _accept.openDeathDialog)(reviveTimer, killerId, killerName);
    isPopupWithMedics = status;
    if (qs !== qs2) return;
    if (!status) {
      if (hospitalTimer < 60) setDeathTimer(60);
      _dispatch.dispatch.call(16, `Срочная реанимация`, true, hospitalTimer);
    } else if (hospitalTimer > 60) {
      const vipConfig = (0, _vip.getVipConfig)(player.getVariable('vip'));
      const deathTime = vipConfig !== null && vipConfig !== void 0 && vipConfig.deathScreenTime ? vipConfig.deathScreenTime / 1000 : 180;
      setDeathTimer(deathTime);
    }
    while (player.isDead()) await _system.system.sleep(100);
    _cameraManager.CamerasManager.setActiveCamera(deathCamera, false);
    (0, _accept.destroyDeathDialog)();
  } else {
    setDeathTimer(5);
  }
};
let healTimer = exports.healTimer = 0;
_custom.CustomEvent.registerServer('heal:start', time => {
  exports.healTimer = healTimer = time;
  currentHealHash = _system.system.encryptCodes(healTimer.toString(), currentHealHashCode);
  _user.user.notify("Не покидайте палату на время прохождения лечения, швы могут разойтись", "info", null, 12000);
});
setInterval(() => {
  if (!_user.user.login) return;
  if (!player.isDead() && deathCamera.isActive() && reviveTimer === 0) {
    _cameraManager.CamerasManager.setActiveCamera(deathCamera, false);
    _custom.CustomEvent.triggerCef('deathpopup:show', false);
  }
  if (healTimer <= 0) return;
  setHealTimer(healTimer - 1);
  const vipdata = _user.user.vipData;
  if (!vipdata || !vipdata.healmultipler) return;
  if (healTimer <= 5) return;
  setTimeout(() => {
    if (healTimer <= 5) return;
    setHealTimer(healTimer - 1);
  }, 500);
}, 1000);
const getNearestHealPoint = () => {
  let posid = 0;
  let posvec;
  _survival.hospitalPos.map((item, index) => {
    if (!index) {
      posvec = (0, _arrays.randomArrayElement)(item);
    } else if (_system.system.distanceToPos2D(item[0], player.position) < _system.system.distanceToPos2D(posvec, player.position)) {
      posvec = (0, _arrays.randomArrayElement)(item);
      posid = index;
    }
  });
  return posvec;
};
exports.getNearestHealPoint = getNearestHealPoint;
let healerTimer = new _TextTimerBar.TextTimerBar("Время до выписки", "");
healerTimer.hidden = true;
const setHealTimer = time => {
  let hack = false;
  if (currentHealHash && healTimer) {
    if (currentHealHash != _system.system.encryptCodes(healTimer.toString(), currentHealHashCode)) {
      exports.healTimer = healTimer = 1000;
      hack = true;
      _user.user.cheatDetect('memory', 'Подмена срока лечения в больнице');
      _custom.CustomEvent.triggerServer('heal:setTime', healTimer);
    }
  }
  if (!hack) exports.healTimer = healTimer = time;
  currentHealHash = _system.system.encryptCodes(healTimer.toString(), currentHealHashCode);
  if (healTimer == 0) {
    healerTimer.hidden = true;
    _user.user.notify("Вы успешно прошли лечение", "success");
    currentHealHash = null;
    _custom.CustomEvent.triggerServer('heal:end');
    return;
  } else if (healTimer % 30 === 0) {
    _custom.CustomEvent.triggerServer('heal:setTime', healTimer);
  }
  const pos = getNearestHealPoint();
  if (_system.system.distanceToPos2D(player.position, pos) > 200 || !_user.user.inInterrior) {
    (0, _protection.anticheatProtect)('heal');
    _custom.CustomEvent.triggerServer('heal:tryrun', pos.x, pos.y, pos.z);
  }
  healerTimer.text = _system.system.secondsToString(time);
  healerTimer.hidden = false;
};
let reviveTimer = 0;
const setDeathTimer = time => {
  let hack = false;
  if (hospitalTimer && currentRespawnHash) {
    if (currentRespawnHash != _system.system.encryptCodes(hospitalTimer.toString(), currentRespawnHashCode)) {
      _user.user.cheatDetect('memory', 'Подмена срока возрождения');
      exports.hospitalTimer = hospitalTimer = 1000;
      hack = true;
    }
  }
  if (!hack) exports.hospitalTimer = hospitalTimer = time;
  currentRespawnHash = _system.system.encryptCodes(hospitalTimer.toString(), currentRespawnHashCode);
  if (time <= 0) {
    if (!reviveTimer) (0, _accept.destroyDeathDialog)();
    _cameraManager.CamerasManager.setActiveCamera(deathCamera, false);
    reviveTimer = 0;
  } else reviveTimer = time;
  _custom.CustomEvent.triggerCef('deathpopup:setTime', reviveTimer);
  mp.game.gameplay.disableAutomaticRespawn(true);
  mp.game.gameplay.ignoreNextRestart(true);
  mp.game.gameplay.setFadeInAfterDeathArrest(true);
  mp.game.gameplay.setFadeOutAfterDeath(false);
};
setInterval(() => {
  if (!_user.user.login) return;
  if (hospitalTimer <= 0) return;
  if (!_user.user.dead) {
    reviveTimer = 0;
    exports.hospitalTimer = hospitalTimer = 0;
    return;
  }
  setDeathTimer(hospitalTimer - 1);
  if (hospitalTimer > 0) return;
  let posvec = getNearestHealPoint();
  if (!player.isDead()) _custom.CustomEvent.triggerCef('deathpopup:show', false);
  reviveTimer = 0;
  (0, _protection.anticheatProtect)('heal');
  _custom.CustomEvent.triggerServer('survival:death', posvec.x, posvec.y, posvec.z);
  _custom.CustomEvent.triggerServer('death:toggle', false);
  exports.hospitalTimer = hospitalTimer = -1;
  currentRespawnHash = null;
}, 1000);
setInterval(() => {
  if (!_user.user.login) return;
  if (_user.user.isAdminNow()) return;
  let waterMinus = .01;
  let foodMinus = .01;
  if (player.isSprinting()) waterMinus += _survival.WATER_RATE.SPRINTING;
  if (player.isRunning()) waterMinus += _survival.WATER_RATE.RUNNING;
  if (player.isStrafing()) waterMinus += _survival.WATER_RATE.STRAFING;
  if (player.isSwimming()) waterMinus += _survival.WATER_RATE.SWIMMING;
  if (player.isSwimmingUnderWater()) waterMinus += _survival.WATER_RATE.DIVING;
  if (survival.water < 0) survival.water = 0;
  if (player.isSprinting()) foodMinus += _survival.WATER_RATE.SPRINTING;
  if (player.isRunning()) foodMinus += _survival.WATER_RATE.RUNNING;
  if (player.isStrafing()) foodMinus += _survival.WATER_RATE.STRAFING;
  if (player.isSwimming()) foodMinus += _survival.WATER_RATE.SWIMMING;
  if (player.isSwimmingUnderWater()) foodMinus += _survival.WATER_RATE.DIVING;
  if (_jobs.doJobNow) {
    waterMinus *= _survival.DO_JOB_WATER_MULTIPLER;
    foodMinus *= _survival.DO_JOB_FOOD_MULTIPLER;
  }
  survival.water -= waterMinus;
  survival.food -= foodMinus;
  if (survival.water < 0) survival.water = 0;
  if (survival.food < 0) survival.food = 0;
}, 1000);
setInterval(() => {
  try {
    if (!_user.user.login) return;
    if (_user.user.isAdminNow()) return;
    let hp = 0;
    if (survival.water == 0) hp += _survival.HP_WATER_RATE;
    if (survival.food == 0) hp += _survival.HP_FOOD_RATE;
    if (survival.water == 0 && survival.food == 0) hp += _survival.HP_TOTAL_FOOD_WATER_RATE;
    if (hp == 0) return;
    player.setHealth(Math.trunc(100 + player.getHealth() - hp));
  } catch (err) {
    let hp = 0;
    if (survival.water == 0) hp += _survival.HP_WATER_RATE;
    if (survival.food == 0) hp += _survival.HP_FOOD_RATE;
    if (survival.water == 0 && survival.food == 0) hp += _survival.HP_TOTAL_FOOD_WATER_RATE;
    if (hp == 0) return;
    _custom.CustomEvent.triggerServer('srv:log', 'HP: ' + Math.trunc(100 + player.getHealth() - hp));
  }
}, _survival.HP_MINUS_RATE * 1000);
setInterval(() => {
  if (!_user.user.login) return;
  if (_user.user.isAdminNow()) return;
  _custom.CustomEvent.triggerServer('survival:sync', survival.food, survival.water);
}, 120000);
let hp = mp.players.local.getHealth();
_custom.CustomEvent.registerServer('survival:setHP', count => {
  mp.players.local.setHealth(count + 100);
});
setInterval(() => {
  const health = mp.players.local.getHealth();
  if (hp === health) return;
  _custom.CustomEvent.triggerServer('survival:updateHealth', health);
  hp = health;
}, 100);
},{"./custom.event":"py8h","./user":"ggMw","./system":"pi2J","../../shared/arrays":"vBRx","./checkpoints":"XCJl","./jobs":"un2p","./bars/classes/TextTimerBar":"CjKg","./accept":"RT6N","./dispatch":"CTZz","../../shared/survival":"axP1","../../shared/economy":"nzl1","../../shared/ill":"o9ld","./menu":"Aiz7","../../shared/markers.settings":"fusL","./protection":"Qh13","./family.cargobattle":"JQ82","./gui":"bk91","../../shared/vip":"ngv5","./cameraManager":"mcyQ"}],"lYa9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonHiddenMasksIds = void 0;
const nonHiddenMasksIds = exports.nonHiddenMasksIds = [0, 27, 73, 109, 114, 120, 121, 122];
},{}],"ZNkb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PLAYER_IN_VEHICLE_CONFIG = exports.OPENING_HOOD_LIST = void 0;
const PLAYER_IN_VEHICLE_CONFIG = exports.PLAYER_IN_VEHICLE_CONFIG = [{
  x: -0.10,
  y: -2.90,
  z: 0.78,
  model: 'asbo',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.12,
  y: -2.20,
  z: 0.84,
  model: 'kanjo',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.16,
  z: 0.82,
  model: 'prairie',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.02,
  y: -2.32,
  z: 0.86,
  model: 'rhapsody',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.92,
  z: 0.90,
  model: 'cogcabrio',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.74,
  z: 0.70,
  model: 'felon',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 18.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.68,
  z: 0.64,
  model: 'felon2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 18.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: -0.00
}, {
  x: 0.00,
  y: -3.64,
  z: 0.72,
  model: 'jackal',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 20.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.90,
  z: 0.80,
  model: 'oracle',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.10,
  z: 0.64,
  model: 'oracle2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.34,
  z: 0.76,
  model: 'sentinel2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 17.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.96,
  z: 0.60,
  model: 'windsor',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.60,
  z: 0.66,
  model: 'zion',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.64,
  z: 0.64,
  model: 'zion2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.84,
  z: 0.76,
  model: 'fib',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.20,
  y: -4.14,
  z: 0.64,
  model: 'fib2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 68.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.08,
  y: -4.12,
  z: 0.72,
  model: 'lguard',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 87.00,
  place_x: -0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.60,
  z: 0.80,
  model: 'police',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.76,
  z: 0.74,
  model: 'police2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.88,
  z: 0.70,
  model: 'police3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 9.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.54,
  z: 0.82,
  model: 'police4',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 36.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.86,
  z: 0.68,
  model: 'policeold1',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 46.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.58,
  z: 0.70,
  model: 'policeold2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 31.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.16,
  y: -4.30,
  z: 0.64,
  model: 'pranger',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 83.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.06,
  y: -3.58,
  z: 0.86,
  model: 'sheriff',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 41.00,
  place_x: 0.00,
  place_y: -0.00,
  place_z: 0.00
}, {
  x: 0.16,
  y: -4.04,
  z: 0.64,
  model: 'sheriff2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 91.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.42,
  z: 0.70,
  model: 'crusader',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 30.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.38,
  z: 0.56,
  model: 'blade',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 51.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: -0.00
}, {
  x: 0.00,
  y: -2.40,
  z: 0.66,
  model: 'buccaneer',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 9.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.68,
  z: 0.72,
  model: 'chino',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.96,
  z: 0.68,
  model: 'chino2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.60,
  z: 0.54,
  model: 'clique',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 27.00,
  place_x: 0.00,
  place_y: -0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.60,
  z: 1.00,
  model: 'dominator',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.48,
  z: 1.02,
  model: 'dominator2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.18,
  y: -2.64,
  z: 0.82,
  model: 'dukes',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 29.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -2.68,
  z: 0.70,
  model: 'dukes3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 4.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -2.46,
  z: 0.72,
  model: 'faction',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.36,
  z: 0.70,
  model: 'faction2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 8.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.40,
  z: 0.70,
  model: 'faction3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 10.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.48,
  z: 0.62,
  model: 'ellie',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.46,
  z: 0.80,
  model: 'gauntlet',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 11.00,
  place_x: 0.00,
  place_y: -0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.76,
  z: 0.84,
  model: 'gauntlet2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 34.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.42,
  z: 0.64,
  model: 'gauntlet3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 3.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.62,
  z: 0.70,
  model: 'gauntlet4',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.50,
  z: 0.74,
  model: 'impaler',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.50,
  z: 0.74,
  model: 'impaler2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.50,
  z: 0.74,
  model: 'impaler3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.50,
  z: 0.74,
  model: 'impaler4',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.34,
  z: 0.98,
  model: 'imperator',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 4.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.34,
  z: 0.98,
  model: 'imperator2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 4.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.34,
  z: 0.98,
  model: 'imperator3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 4.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.76,
  z: 0.80,
  model: 'moonbeam',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.32,
  z: 0.88,
  model: 'ruiner',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 42.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.32,
  z: 0.88,
  model: 'ruiner2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 42.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.76,
  z: 0.82,
  model: 'tampa',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.76,
  z: 0.82,
  model: 'tampa3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.72,
  z: 0.78,
  model: 'vamos',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.54,
  z: 1.00,
  model: 'brawler',
  rot_x: 0.00,
  rot_y: -1.00,
  rot_z: 10.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.36,
  z: 0.90,
  model: 'freecrawler',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.24,
  y: -2.94,
  z: 0.50,
  model: 'hellion',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 88.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.22,
  y: -3.54,
  z: 0.62,
  model: 'insurgent2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 86.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.16,
  y: -3.72,
  z: 0.78,
  model: 'rancherxl',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 50.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.16,
  y: -3.72,
  z: 0.78,
  model: 'rancherxl2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 50.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.54,
  z: 0.70,
  model: 'baller',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 47.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.60,
  z: 0.78,
  model: 'baller2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 36.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.56,
  z: 0.72,
  model: 'baller3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 37.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.96,
  z: 0.74,
  model: 'baller4',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 34.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.42,
  z: 0.58,
  model: 'bjxl',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 32.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.80,
  z: 0.64,
  model: 'cavalcade',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 47.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.88,
  z: 0.76,
  model: 'cavalcade2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 45.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.48,
  z: 0.76,
  model: 'dubsta',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 39.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.54,
  z: 0.76,
  model: 'dubsta2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 42.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.60,
  z: 0.68,
  model: 'fq2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 35.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.22,
  y: -4.10,
  z: 0.70,
  model: 'granger',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 86.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.84,
  z: 0.62,
  model: 'gresley',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 44.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.04,
  y: -3.70,
  z: 0.74,
  model: 'habanero',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 37.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.50,
  z: 1.00,
  model: 'huntley',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 36.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.24,
  y: -3.76,
  z: 0.72,
  model: 'landstalker',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 80.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.10,
  z: 0.74,
  model: 'landstalker2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 49.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: 4.08,
  z: 0.84,
  model: 'patriot',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 218.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.52,
  z: 0.60,
  model: 'radi',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 25.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.44,
  z: 0.48,
  model: 'rebla',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 32.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.56,
  z: 0.62,
  model: 'rocoto',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 44.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.42,
  z: 0.76,
  model: 'seminole',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 43.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.06,
  y: -3.12,
  z: 0.66,
  model: 'seminole2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 40.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.76,
  z: 0.86,
  model: 'serrano',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 21.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.84,
  z: 0.82,
  model: 'xls',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 43.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.26,
  z: 0.80,
  model: 'asea',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 22.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.26,
  z: 0.80,
  model: 'asea2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 22.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.34,
  z: 0.72,
  model: 'cog55',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 28.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.76,
  z: 0.78,
  model: 'cognoscenti',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 29.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.92,
  z: 0.60,
  model: 'emperor',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 26.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.92,
  z: 0.60,
  model: 'emperor2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 26.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.92,
  z: 0.60,
  model: 'emperor3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 26.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.38,
  z: 0.80,
  model: 'ingot',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 39.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.86,
  z: 0.70,
  model: 'primo',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.14,
  y: -3.90,
  z: 0.82,
  model: 'regina',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 34.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.58,
  z: 0.98,
  model: 'stratum',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 37.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.42,
  z: 0.74,
  model: 'superd',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 23.00,
  place_x: -0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.08,
  y: -3.46,
  z: 0.76,
  model: 'surge',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 40.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.48,
  z: 0.88,
  model: 'tailgater',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 23.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.04,
  z: 0.62,
  model: 'washington',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.64,
  z: 0.94,
  model: 'taxi',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 29.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.14,
  y: -1.20,
  z: 0.56,
  model: 'alpha',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.12,
  y: -3.50,
  z: 0.76,
  model: 'banshee',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.16,
  y: -3.66,
  z: 0.76,
  model: 'bestiagts',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.10,
  y: -3.32,
  z: 0.98,
  model: 'blista2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.06,
  y: -3.84,
  z: 0.80,
  model: 'buffalo',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.08,
  y: -3.48,
  z: 0.80,
  model: 'buffalo2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 180.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.08,
  y: -3.48,
  z: 0.82,
  model: 'buffalo3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 180.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.12,
  y: -3.00,
  z: 0.70,
  model: 'drafter',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -166.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.04,
  y: -2.96,
  z: 0.78,
  model: 'elegy',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 194.00,
  place_x: -0.00,
  place_y: -0.00,
  place_z: -0.00
}, {
  x: -0.00,
  y: -3.40,
  z: 0.70,
  model: 'elegy2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.22,
  y: -3.24,
  z: 0.94,
  model: 'feltzer2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -4.00,
  place_x: -0.00,
  place_y: -0.00,
  place_z: -0.00
}, {
  x: 0.14,
  y: -2.62,
  z: 0.78,
  model: 'fusilade',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 180.00,
  place_x: 0.00,
  place_y: -0.00,
  place_z: 0.00
}, {
  x: -0.08,
  y: -3.08,
  z: 0.86,
  model: 'futo',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.14,
  y: -3.62,
  z: 0.84,
  model: 'hotring',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.10,
  y: -2.80,
  z: 0.80,
  model: 'issi7',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.18,
  y: -3.76,
  z: 0.66,
  model: 'jugular',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.06,
  y: -3.48,
  z: 0.82,
  model: 'kuruma',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.12,
  y: -3.46,
  z: 0.86,
  model: 'kuruma2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.04,
  y: -3.40,
  z: 0.82,
  model: 'paragon',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 195.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.02
}, {
  x: 0.02,
  y: -3.40,
  z: 0.86,
  model: 'paragon2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 194.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.08,
  y: -3.64,
  z: 0.98,
  model: 'schafter2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -180.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.08,
  y: -3.70,
  z: 0.96,
  model: 'schafter3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 180.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.98,
  z: 0.96,
  model: 'schafter4',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -172.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.08,
  y: -3.76,
  z: 0.94,
  model: 'schafter5',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 180.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.00,
  z: 0.94,
  model: 'schafter6',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 190.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.12,
  y: -2.72,
  z: 0.78,
  model: 'schlagen',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -180.00,
  place_x: -0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.04,
  y: -3.36,
  z: 0.88,
  model: 'schwarzer',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 182.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.10,
  y: -2.92,
  z: 0.72,
  model: 'sentinel3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 180.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.16,
  y: -3.20,
  z: 0.84,
  model: 'streiter',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 226.00,
  place_x: 0.00,
  place_y: -0.00,
  place_z: -0.00
}, {
  x: -0.00,
  y: -3.02,
  z: 0.76,
  model: 'sugoi',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 190.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.04,
  y: -3.00,
  z: 0.86,
  model: 'sultan',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 189.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -2.86,
  z: 0.80,
  model: 'sultan2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 191.00,
  place_x: -0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.90,
  z: 0.78,
  model: 'casco',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.08,
  y: -3.54,
  z: 0.58,
  model: 'dynasty',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.16,
  y: -2.74,
  z: 0.78,
  model: 'fagaloa',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -58.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.06,
  y: -3.64,
  z: 0.68,
  model: 'nebula',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.50,
  z: 0.72,
  model: 'peyote',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -171.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.12,
  y: -3.42,
  z: 0.74,
  model: 'peyote3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -180.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.14,
  y: -3.40,
  z: 0.86,
  model: 'pigalle',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 47.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.08,
  y: -3.40,
  z: 0.68,
  model: 'rapidgt3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.02,
  z: 0.82,
  model: 'retinue',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -171.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -2.76,
  z: 0.78,
  model: 'stinger',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -169.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.08,
  y: -3.58,
  z: 0.76,
  model: 'tornado',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -6.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.06,
  y: -3.56,
  z: 0.74,
  model: 'tornado2',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 13.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.04,
  y: -3.56,
  z: 0.72,
  model: 'tornado3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 13.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.56,
  z: 0.72,
  model: 'tornado4',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 16.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.18,
  z: 0.80,
  model: 'tornado5',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -164.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.08,
  y: -3.62,
  z: 0.78,
  model: 'tornado6',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.04,
  y: -2.92,
  z: 0.90,
  model: 'sultanrs',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: -170.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.32,
  z: 0.74,
  model: 'gtr34',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.12,
  y: -3.46,
  z: 0.80,
  model: 'focusrs',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.06,
  y: -3.34,
  z: 0.98,
  model: 'camry18',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.24,
  z: 0.66,
  model: 'nisgtr',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.02,
  y: -3.62,
  z: 0.80,
  model: 'x5m',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.08,
  z: 0.86,
  model: 's63',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.08,
  y: -3.34,
  z: 1.04,
  model: 'audirs6tk',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.38,
  z: 0.72,
  model: 'panamera17turbo',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.90,
  z: 0.94,
  model: 'rculi',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.02,
  y: -3.56,
  z: 0.74,
  model: 'modelx',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.02,
  y: -3.84,
  z: 0.68,
  model: 'bmw3',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.38,
  z: 0.50,
  model: 'land200',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.70,
  z: 0.62,
  model: 'm4f82',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.04,
  y: -3.24,
  z: 0.74,
  model: 'm5f90',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.78,
  z: 0.44,
  model: 'e63s',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.38,
  z: 0.64,
  model: 'g500',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.86,
  z: 0.58,
  model: 'w140',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -2.80,
  z: 0.54,
  model: 'vaz2121',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.30,
  z: 0.62,
  model: 'bmwm8',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.54,
  z: 0.66,
  model: 'w447onyx',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.18,
  z: 0.82,
  model: 'evo9onyx',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.42,
  z: 0.58,
  model: 'm5e28onyx',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.50,
  z: 0.54,
  model: 'must1onyx',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.64,
  z: 0.98,
  model: 'bentonyx',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.02,
  y: -3.34,
  z: 0.76,
  model: 'mers4x4',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.58,
  z: 0.64,
  model: 'mersg63',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.48,
  z: 0.62,
  model: 'merse63s',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -2.92,
  z: 0.88,
  model: 'a45',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.52,
  z: 0.78,
  model: 'gle63',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.86,
  z: 0.98,
  model: 'camry70',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.82,
  z: 0.82,
  model: 'lc200',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.72,
  z: 0.82,
  model: "chaser",
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.04,
  y: -2.96,
  z: 0.96,
  model: 'AE86ONYX',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: -0.00,
  y: -3.60,
  z: 0.82,
  model: '2170',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.02,
  y: -3.54,
  z: 0.58,
  model: 'm5e39',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.02,
  y: -3.40,
  z: 0.66,
  model: 'gls21',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.86,
  z: 0.70,
  model: 'cayen20',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -3.18,
  z: 0.92,
  model: 'a45',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}, {
  x: 0.00,
  y: -4.08,
  z: 0.76,
  model: 'cesc18',
  rot_x: 0.00,
  rot_y: 0.00,
  rot_z: 0.00,
  place_x: 0.00,
  place_y: 0.00,
  place_z: 0.00
}];
const OPENING_HOOD_LIST = exports.OPENING_HOOD_LIST = ['benson', 'biff', 'cerberus', 'cerberus2', 'cerberus3', 'packer', 'phantom', 'phantom3', 'pounder', 'pounder2', 'stockade', 'stockade3', 'terbyte', 'asbo', 'blista', 'brioso', 'club', 'dilettante', 'dilettante2', 'kanjo', 'issi2', 'issi3', 'issi4', 'issi5', 'issi6', 'panto', 'prairie', 'rhapsody', 'cogcabrio', 'exemplar', 'f620', 'felon', 'felon2', 'jackal', 'oracle', 'oracle2', 'sentinel', 'sentinel2', 'windsor', 'windsor2', 'zion', 'zion2', 'ambulance', 'fbi', 'fbi2', 'lguard', 'pbus', 'police', 'police2', 'police3', 'police4', 'policeold1', 'policeold2', 'pranger', 'riot', 'sheriff', 'sheriff2', 'flatbed', 'guardian', 'mixer', 'mixer2', 'rubble', 'tiptruck', 'tiptruck2', 'barracks', 'barracks2', 'barracks3', 'crusader', 'blade', 'buccaneer', 'buccaneer2', 'chino', 'chino2', 'clique', 'coquette3', 'deviant', 'dominator', 'dominator2', 'dominator3', 'dominator4', 'dominator5', 'dominator6', 'dukes', 'dukes2', 'dukes3', 'faction', 'faction2', 'faction3', 'ellie', 'gauntlet', 'gauntlet2', 'gauntlet3', 'gauntlet4', 'gauntlet5', 'hermes', 'hotknife', 'hustler', 'impaler', 'impaler2', 'impaler3', 'impaler4', 'imperator', 'imperator2', 'imperator3', 'lurcher', 'moonbeam', 'moonbeam2', 'nightshade', 'phoenix', 'picador', 'ratloader', 'ratloader2', 'ruiner', 'ruiner2', 'sabregt', 'sabregt2', 'slamvan', 'slamvan2', 'slamvan3', 'slamvan4', 'slamvan5', 'slamvan6', 'stalion', 'stalion2', 'tampa', 'tampa3', 'tulip', 'vamos', 'vigero', 'virgo', 'virgo2', 'virgo3', 'voodoo', 'voodoo2', 'yosemite', 'yosemite2', 'yosemite3', 'bfinjection', 'bodhi2', 'brawler', 'bruiser', 'bruiser2', 'bruiser3', 'caracara', 'caracara2', 'dloader', 'dubsta3', 'everon', 'freecrawler', 'hellion', 'kalahari', 'kamacho', 'marshall', 'mesa3', 'monster', 'monster3', 'monster4', 'monster5', 'rancherxl', 'rancherxl2', 'rebel', 'rebel2', 'riata', 'sandking', 'sandking2', 'technical', 'technical2', 'technical3', 'baller', 'baller2', 'baller3', 'baller4', 'baller5', 'baller6', 'bjxl', 'cavalcade', 'cavalcade2', 'contender', 'dubsta', 'dubsta2', 'fq2', 'granger', 'gresley', 'habanero', 'huntley', 'landstalker', 'landstalker2', 'mesa', 'mesa2', 'novak', 'patriot', 'patriot2', 'radi', 'rebla', 'rocoto', 'seminole', 'seminole2', 'serrano', 'toros', 'xls', 'xls2', 'asea', 'asea2', 'asterope', 'cog55', 'cog552', 'cognoscenti', 'cognoscenti2', 'emperor', 'emperor2', 'emperor3', 'fugitive', 'glendale', 'glendale2', 'ingot', 'intruder', 'limo2', 'premier', 'primo', 'primo2', 'regina', 'romero', 'stafford', 'stanier', 'stratum', 'stretch', 'superd', 'surge', 'tailgater', 'warrener', 'washington', 'pbus2', 'rentalbus', 'taxi', 'tourbus', 'alpha', 'banshee', 'bestiagts', 'blista2', 'blista3', 'buffalo', 'buffalo2', 'buffalo3', 'carbonizzare', 'comet2', 'comet3', 'comet4', 'comet5', 'coquette', 'coquette4', 'drafter', 'elegy', 'elegy2', 'feltzer2', 'flashgt', 'furoregt', 'fusilade', 'futo', 'gb200', 'komoda', 'imorgon', 'issi7', 'italigto', 'jugular', 'jester', 'jester2', 'jester3', 'khamelion', 'kuruma', 'kuruma2', 'locust', 'lynx', 'massacro', 'massacro2', 'neo', 'neon', 'ninef', 'ninef2', 'omnis', 'paragon', 'paragon2', 'pariah', 'penumbra', 'penumbra2', 'raiden', 'rapidgt', 'rapidgt2', 'revolter', 'schafter2', 'schafter3', 'schafter4', 'schafter5', 'schafter6', 'schlagen', 'schwarzer', 'sentinel3', 'seven70', 'specter', 'specter2', 'streiter', 'sugoi', 'sultan', 'sultan2', 'surano', 'tampa2', 'tropos', 'verlierer2', 'vstr', 'ardent', 'btype', 'btype3', 'casco', 'cheetah2', 'coquette2', 'deluxo', 'dynasty', 'fagaloa', 'feltzer3', 'gt500', 'infernus2', 'jb7002', 'jb700', 'mamba', 'manana', 'manana2', 'michelli', 'nebula', 'peyote', 'peyote3', 'pigalle', 'rapidgt3', 'retinue', 'retinue2', 'savestra', 'stinger', 'stingergt', 'stromberg', 'swinger', 'torero', 'tornado', 'tornado2', 'tornado3', 'tornado4', 'tornado5', 'turismo2', 'viseris', 'z190', 'ztype', 'zion', 'cheburek', 'adder', 'autarch', 'banshee2', 'bullet', 'cyclone', 'entity2', 'entityxf', 'emerus', 'furia', 'gp1', 'infernus', 'italigtb', 'italigtb2', 'krieger', 'nero', 'nero2', 'osiris', 'pfister811', 'reaper', 'sc1', 'sheava', 'sultanrs', 't20', 'tempesta', 'thrax', 'tyrant', 'tyrus', 'vacca', 'voltic', 'voltic2', 'xa21', 'zentorno', 'zorrusso', 'sadler', 'sadler2', 'scrap', 'towtruck', 'towtruck2', 'tractor2', 'tractor3', 'utillitruck', 'utillitruck2', 'utillitruck3', 'bison', 'bison2', 'bison3', 'bobcatxl', 'boxville', 'boxville2', 'boxville3', 'boxville4', 'burrito', 'burrito2', 'burrito3', 'burrito4', 'burrito5', 'camper', 'gburrito', 'gburrito2', 'minivan', 'minivan2', 'paradise', 'pony', 'pony2', 'rumpo', 'rumpo2', 'rumpo3', 'speedo', 'speedo2', 'speedo4', 'taco', 'youga', 'youga2'];
},{}],"J8pg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicles = void 0;
var _custom = require("./custom.event");
var _system = require("./system");
var _user = require("./user");
var _autosalon = require("./businesses/autosalon");
var _playerIn = require("../../shared/player.in.vehicle");
var _controls = require("./controls");
var _business = require("../../shared/business");
const player = mp.players.local;
let carStaticList = [];
mp.keys.bind(70, false, () => {
  if (mp.players.local.getIsTaskActive(160)) {
    const handle = mp.players.local.getVehicleIsUsing();
    mp.events.call('playerStartedEnterVehicle', handle);
    mp.events.callRemote('playerStartedEnterVehicle', mp.vehicles.atHandle(handle).remoteId);
  }
});
const spawnStaticVehicle = (item, id) => {
  const pos = new mp.Vector3(item.x, item.y, item.z);
  if (_system.system.distanceToPos(pos, player.position) > _business.StaticVehicleStreamRange) return;
  if (carStaticList.find(q => q && q.staticVehicle === id)) return;
  const h = item.h;
  const model = item.model;
  const primary = item.color1;
  const secondary = item.color2;
  const veh = mp.vehicles.new(mp.game.joaat(model), pos, {
    heading: h,
    dimension: -1
  });
  veh.staticVehicle = id;
  veh.autosalon = true;
  carStaticList.push(veh);
  setTimeout(() => {
    veh.setCustomPrimaryColour(primary[0], primary[1], primary[2]);
    veh.setCustomSecondaryColour(secondary[0], secondary[1], secondary[2]);
    veh.setDoorsLocked(2);
    veh.freezePosition(true);
  }, 100);
};
setInterval(() => {
  carStaticList.map(veh => {
    if (veh && mp.vehicles.exists(veh)) {
      if (_business.StaticVehicle[veh.staticVehicle].spin) veh.setHeading(veh.getHeading() + 1);
      veh.setDoorsLocked(2);
      veh.freezePosition(true);
    }
  });
}, 100);
setInterval(() => {
  _business.StaticVehicle.map((item, index) => spawnStaticVehicle(item, index));
  carStaticList.map((veh, index) => {
    if (veh && mp.vehicles.exists(veh)) {
      if (_system.system.distanceToPos(veh.position, player.position) > _business.StaticVehicleStreamRange) {
        veh.destroy();
        carStaticList.splice(index, 1);
      }
    }
  });
}, 1200);
const vehicles = exports.vehicles = {
  findNearests: (range = 5) => {
    return mp.vehicles.toArray().filter(veh => veh.handle && _system.system.distanceToPos(player.position, veh.position) <= range).sort((a, b) => {
      return _system.system.distanceToPos(player.position, a.position) - _system.system.distanceToPos(player.position, b.position);
    });
  },
  findNearest: (range = 5) => {
    if (player.vehicle) return player.vehicle;
    let vehs = vehicles.findNearests(range);
    if (vehs.length >= 1) return vehs[0];else return null;
  },
  lockSound: async veh => {
    if (!mp.vehicles.exists(veh)) return;
    const times = veh.getVariable('locked') ? 3 : 2;
    const timer = veh.getVariable('locked') ? 800 : 400;
    const duration = veh.getVariable('locked') ? 500 : 200;
    let vehicleHorn = veh.getMod(14);
    let count = 0;
    let lights = 2;
    veh.setMod(14, -1);
    while (count < times) {
      if (mp.vehicles.exists(veh)) {
        veh.startHorn(duration, mp.game.joaat("HELDDOWN"), false);
        veh.setLights(2);
      }
      await _system.system.sleep(timer / 2);
      if (mp.vehicles.exists(veh)) veh.setLights(0);
      count++;
      await _system.system.sleep(timer / 2);
    }
    if (mp.vehicles.exists(veh)) {
      veh.setLights(0);
      veh.setMod(14, vehicleHorn);
    }
  }
};
mp.events.add('render', () => {
  if (player.getVariable('inVehicleTruck')) {
    _controls.disableControlGroup.allControls();
    _controls.disableControlGroup.cameraChanging();
    if (mp.game.invoke('0x8D4D46230B2C353A') !== 4) {
      mp.game.cam.setFollowPedCamViewMode(4);
    }
  }
});
let seatBelt = false;
setInterval(() => {
  if (!player.vehicle && seatBelt) {
    seatBelt = false;
    mp.players.local.setConfigFlag(32, true);
  }
}, 3000);
_custom.CustomEvent.register('seatbelt', () => {
  if (!player.vehicle) return;
  const veh = player.vehicle;
  if (mp.game.vehicle.isThisModelABicycle(veh.getModel())) return;
  if (mp.game.vehicle.isThisModelABike(veh.getModel())) return;
  if (mp.game.vehicle.isThisModelABoat(veh.getModel())) return;
  if (mp.game.vehicle.isThisModelAHeli(veh.getModel())) return;
  if (mp.game.vehicle.isThisModelAPlane(veh.getModel())) return;
  if (mp.game.vehicle.isThisModelAQuadbike(veh.getModel())) return;
  if (mp.game.vehicle.isThisModelATrain(veh.getModel())) return;
  mp.players.local.setConfigFlag(32, seatBelt);
  seatBelt = !seatBelt;
  if (seatBelt) _user.user.notify('Вы пристегнули ремень безопасности', 'success');else _user.user.notify('Вы отстегнули ремень безопасности', 'error');
});
let lastData = JSON.stringify({});
let hal = false;
mp.events.add('render', () => {
  hal = !hal;
  if (hal) return;
  if (!_user.user.login) return;
  let data = {};
  if (mp.players.local.vehicle) {
    const veh = mp.players.local.vehicle;
    data = {
      f: Math.min(100, Math.floor(veh.getVariable('fuel') / veh.getVariable('fuel_max') * 100)),
      s: _system.system.getCurrentSpeed(),
      l: veh.getVariable('locked'),
      e: veh.getVariable('engine'),
      x: seatBelt
    };
  }
  if (lastData == JSON.stringify(data)) return;
  lastData = JSON.stringify(data);
  _custom.CustomEvent.triggerCef('hud:speedometer', data);
});
mp.events.addDataHandler("freeze", async (target, val) => {
  if (target.type !== "vehicle") return;
  target.freezePosition(val);
});
mp.events.addDataHandler("truckopen", async (target, status) => {
  if (target.type !== "vehicle") return;
  status ? target.setDoorOpen(5, true, true) : target.setDoorShut(5, true);
});
mp.events.add('entityStreamIn', async target => {
  if (target.type !== "vehicle") return;
  if (target.getVariable('freeze')) {
    target.freezePosition(true);
  }
});
mp.events.addDataHandler("multiple", async (target, val) => {
  if (target.type !== "vehicle") return;
  target.setEngineTorqueMultiplier(val / 100);
});
mp.events.add('entityStreamIn', async target => {
  if (target.type !== "vehicle") return;
  if (!target.getVariable('multiple')) return;
  target.setEngineTorqueMultiplier(target.getVariable('multiple') / 100);
});
mp.events.addDataHandler("inVehicleTruck", async (target, val) => {
  if (target.type != "player") return;
  if (typeof val !== "number") {
    target.clearTasks();
    target.resetAlpha();
    target.setAlpha(255);
    target.detach(false, false);
    return;
  }
  let veh = mp.vehicles.atRemoteId(val);
  if (!veh) await _system.system.sleep(500);
  if (!veh) veh = mp.vehicles.atRemoteId(val);
  if (!veh) return;
  if (!veh.handle) return;
  const cfg = _playerIn.PLAYER_IN_VEHICLE_CONFIG.find(q => q.model === veh.getVariable('modelname'));
  if (!cfg) return _user.user.notify("vehicle in truck cfg error");
  _user.user.playAnim([["amb@world_human_bum_slumped@male@laying_on_right_side@idle_a", "idle_a"]], false, true, target.remoteId);
  target.attachTo(veh.handle, veh.getBoneIndexByName('engine'), cfg.x, cfg.y, cfg.z, cfg.rot_x, cfg.rot_y, cfg.rot_z, true, true, false, true, 1, true);
});
mp.events.add('entityStreamIn', async target => {
  if (target.type != "player") return;
  if (!target.getVariable('inVehicleTruck')) return;
  let veh = mp.vehicles.atRemoteId(target.getVariable('inVehicleTruck'));
  if (!veh) await _system.system.sleep(500);
  veh = mp.vehicles.atRemoteId(target.getVariable('inVehicleTruck'));
  if (!veh) return;
  if (!veh.handle) return;
  const cfg = _playerIn.PLAYER_IN_VEHICLE_CONFIG.find(q => q.model === veh.getVariable('modelname'));
  if (!cfg) return;
  _user.user.playAnim([["amb@world_human_bum_slumped@male@laying_on_right_side@idle_a", "idle_a"]], false, true, target.remoteId);
  target.attachTo(veh.handle, veh.getBoneIndexByName('engine'), cfg.x, cfg.y, cfg.z, cfg.rot_x, cfg.rot_y, cfg.rot_z, true, true, false, true, 1, true);
});
setInterval(() => {
  mp.players.forEachInStreamRange(async target => {
    if (!target.getVariable('inVehicleTruck')) return;
    let veh = mp.vehicles.atRemoteId(target.getVariable('inVehicleTruck'));
    if (!veh) await _system.system.sleep(500);
    veh = mp.vehicles.atRemoteId(target.getVariable('inVehicleTruck'));
    if (!veh) return;
    if (!veh.handle) return;
    if (veh.getDoorAngleRatio(5) === 0) {
      target.setAlpha(0);
    } else {
      target.setAlpha(255);
      target.resetAlpha();
    }
  });
}, 800);
mp.events.addDataHandler("truckopen", (veh, val) => {
  if (veh.type != "vehicle") return;
  if (val) {
    veh.setDoorOpen(5, false, false);
  } else if (!val) {
    veh.setDoorShut(5, false);
  }
});
mp.events.addDataHandler("hoodopen", (veh, val) => {
  if (veh.type != "vehicle") return;
  if (val) {
    veh.setDoorOpen(4, false, false);
  } else if (!val) {
    veh.setDoorShut(4, false);
  }
});
mp.events.addDataHandler("locked", (entity, status) => {
  if (entity.type != "vehicle") return;
  vehicles.lockSound(entity);
  if (status) {
    entity.lastLockedTime = _system.system.timestamp;
  }
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "vehicle") return;
  entity.setDirtLevel(entity.getVariable('dirt') || 0.0);
  mp.game.invoke('0x1F2AA07F00B3217A', entity.handle, 0);
  if (entity.getVariable('truckopen')) {
    entity.setDoorOpen(5, false, true);
  }
  if (entity.getVariable('hoodopen')) {
    entity.setDoorOpen(4, false, true);
  }
  if (entity.autosalon) {
    entity.setEngineOn(true, true, false);
    entity.setUndriveable(false);
  }
  if (entity.getVariable('engine')) entity.setEngineOn(true, true, false);else entity.setEngineOn(false, true, false);
  entity.setUndriveable(entity.getVariable('engine') ? false : true);
});
mp.events.addDataHandler("engine", (entity, value) => {
  if (!value) entity.setEngineOn(false, true, false);else entity.setEngineOn(true, true, false);
  entity.setUndriveable(value ? false : true);
});
let vehicleDirt = {
  time: _system.system.timestamp,
  remoteId: -1
};
setInterval(() => {
  if (!_user.user.login) return;
  if (!_user.user.isDriver) return;
  const veh = player.vehicle;
  if (!veh) return;
  const dirtyValue = veh.getVariable('dirt') || 0;
  const current = veh.getDirtLevel();
  if (veh.remoteId !== vehicleDirt.remoteId) {
    vehicleDirt.time = _system.system.timestamp;
    vehicleDirt.remoteId = veh.remoteId;
    _custom.CustomEvent.triggerServer('vehicle:syncDirt', dirtyValue);
  } else {
    if (dirtyValue !== current && _system.system.timestamp - vehicleDirt.time > 360) {
      _custom.CustomEvent.triggerServer('vehicle:syncDirt', current + 0.01);
      vehicleDirt.time = _system.system.timestamp;
    }
  }
}, 60000);
mp.events.addDataHandler("dirt", (entity, value) => {
  if (entity.type !== "vehicle") return;
  entity.setDirtLevel(value ? value : 0.01);
});
setInterval(() => {
  if (!mp.players.local.vehicle) return;
  if (typeof mp.players.local.vehicle.remoteId !== "number") return;
  if (_autosalon.testDriveMode) return;
  if (player.vehicle) {
    if (player.vehicle.autosalon) {
      player.vehicle.setEngineOn(true, true, false);
      player.vehicle.setUndriveable(false);
      return;
    }
  }
  const vehicle = mp.players.local.vehicle;
  if (vehicle.getVariable('engine')) vehicle.setEngineOn(true, true, true);else vehicle.setEngineOn(false, true, true);
  vehicle.setUndriveable(vehicle.getVariable('engine') ? false : true);
  if (vehicle.getVariable('multiple')) vehicle.setEngineTorqueMultiplier(vehicle.getVariable('multiple') / 100);
}, 700);
let send = false;
_custom.CustomEvent.register('lockveh', () => {
  if (send) return;
  let veh = vehicles.findNearest();
  if (!veh) return _user.user.notify("ТС поблизости не обнаружен", "error");
  if (typeof veh.remoteId !== "number") return _user.user.notify("Вы не можете управлять данным ТС", "error");
  if (mp.game.vehicle.isThisModelABicycle(veh.getModel())) return;
  send = true;
  setTimeout(() => {
    send = false;
  }, 2000);
  _custom.CustomEvent.triggerServer('lockveh', veh.remoteId);
});
_custom.CustomEvent.register('engineveh', () => {
  let veh = player.vehicle;
  if (!veh) return;
  if (veh.autosalon) return;
  const driver = veh.getPedInSeat(-1);
  if (!driver || driver != player.handle) return _user.user.notify("Чтобы управлять двигателем необходимо находится за рулём", "error");
  if (typeof veh.remoteId !== "number") return _user.user.notify("Вы не можете управлять данным ТС", "error");
  if (mp.game.vehicle.isThisModelABicycle(veh.getModel())) return;
  if (veh.getVariable('fraction') && _user.user.fraction !== veh.getVariable('fraction') && !_user.user.isAdminNow()) return _user.user.notify("Вы не можете управлять данным ТС", "error");
  _custom.CustomEvent.triggerServer('engineveh', veh.remoteId);
});
},{"./custom.event":"py8h","./system":"pi2J","./user":"ggMw","./businesses/autosalon":"eXav","../../shared/player.in.vehicle":"ZNkb","./controls":"yuOK","../../shared/business":"ZFkC"}],"gNQw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startDance = exports.dancing = void 0;
var _system = require("./system");
var _user = require("./user");
var _controls = require("./controls");
var _custom = require("./custom.event");
const player = mp.players.local;
let intesityCounter = 1;
let animIntensity = ['li', 'mi', 'hi'];
let numCounter = 1;
let animNum = ['09', '11', '13', '15', '17'];
let animVersion = 1;
let animPos = 1;
let dancing = exports.dancing = false;
let block = false;
async function dance() {
  bailoteo(animIntensity[intesityCounter], animNum[numCounter], animVersion, animPos);
  block = true;
  await _system.system.sleep(500);
  block = false;
  return true;
}
function bailoteo(animIntensity, animNum, animVersion, animPos) {
  let gender = _user.user.isMale() ? 'male' : 'female';
  let animDict = "anim@amb@nightclub@dancers@crowddance_facedj@";
  let anim = animIntensity + "_dance_facedj_" + animNum + "_v" + animVersion + "_" + gender + "^" + animPos;
  _user.user.playAnim([[animDict, anim]], false, true);
}
const startDance = () => {
  exports.dancing = dancing = !dancing;
  dance();
};
exports.startDance = startDance;
(0, _controls.registerHotkey)(39, () => {
  if (!dancing) return;
  if (block) return;
  if (intesityCounter < 2) {
    intesityCounter++;
  } else {
    intesityCounter = 1;
  }
  dance();
  _user.user.notify('Интенсивность изменена', 'success');
});
(0, _controls.registerHotkey)(40, () => {
  if (!dancing) return;
  if (block) return;
  if (numCounter < 4) {
    numCounter++;
  } else {
    numCounter = 0;
  }
  dance();
  _user.user.notify('Номер изменён', 'success');
});
(0, _controls.registerHotkey)(37, () => {
  if (!dancing) return;
  if (block) return;
  animVersion = animVersion === 1 ? 2 : 1;
  dance();
  _user.user.notify('Вариация изменена', 'success');
});
(0, _controls.registerHotkey)(38, () => {
  if (!dancing) return;
  if (block) return;
  if (animPos < 6 && animPos >= 1) {
    animPos++;
  } else {
    animPos = 1;
  }
  dance();
  _user.user.notify('Стиль изменён', 'success');
});
_custom.CustomEvent.register('stopanim', () => {
  if (!dancing) return;
  exports.dancing = dancing = false;
  intesityCounter = 1;
  numCounter = 1;
  animVersion = 1;
  animPos = 1;
});
},{"./system":"pi2J","./user":"ggMw","./controls":"yuOK","./custom.event":"py8h"}],"E5lg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectItem = exports.inventory = void 0;
var _custom = require("./custom.event");
var _inventory = require("../../shared/inventory");
var _gui = require("./gui");
var _user = require("./user");
var _cloth = require("./cloth");
var _menu = require("./menu");
var _system = require("./system");
var _dance = require("./dance");
var _furniturePlace = require("./houses/furniturePlace");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
const inventory = exports.inventory = {
  open: () => {
    _custom.CustomEvent.triggerServer('inventory:open');
  },
  close: () => {}
};
let remCnt = 0;
_custom.CustomEvent.registerServer('fireshow:play', async ([x, y, z]) => {
  const countTry = 10;
  remCnt += countTry;
  await _system.system.sleep(2000);
  const object = mp.objects.new('ind_prop_firework_03', new mp.Vector3(x, y, z), {
    dimension: 0
  });
  await _system.system.sleep(10);
  object.placeOnGroundProperly();
  object.freezePosition(true);
  await _system.system.sleep(5000);
  for (let count = 0; count < countTry; count++) {
    while (!mp.game.streaming.hasNamedPtfxAssetLoaded('scr_indep_fireworks')) {
      mp.game.streaming.requestNamedPtfxAsset('scr_indep_fireworks');
      await _system.system.sleep(10);
    }
    mp.game.graphics.setPtfxAssetNextCall('scr_indep_fireworks');
    let part1 = mp.game.graphics.startParticleFxLoopedAtCoord('scr_indep_firework_trailburst', x, y, z, 0.0, 0.0, 0.0, 1.0, false, false, false, false);
    await _system.system.sleep(3500);
    remCnt--;
  }
  if (remCnt <= 0) mp.game.streaming.removeNamedPtfxAsset('scr_indep_fireworks');
  if (remCnt < 0) remCnt = 0;
  await _system.system.sleep(2000);
  if (mp.objects.exists(object)) object.destroy();
});
_custom.CustomEvent.registerServer('inventory:openExchange', (myInventory, exchange, weapons, hotkeys, inv_level) => {
  _gui.gui.setGuiWithEvent('inventory', 'inventory:exchange', myInventory, exchange, _objectSpread(_objectSpread({}, _cloth.dressData), {}, {
    armour: player.getArmour()
  }), weapons, hotkeys, inv_level);
});
_custom.CustomEvent.registerServer('inventory:open', (blocks, weapon, hotkeys, inv_level) => {
  _gui.gui.setGui('inventory');
  _custom.CustomEvent.triggerCef('inventory:open', blocks, _objectSpread(_objectSpread({}, _cloth.dressData), {}, {
    armour: player.getArmour()
  }), weapon, hotkeys, inv_level);
});
_custom.CustomEvent.register('invopen', () => {
  inventory.open();
});
let sendHotkeyCommand = false;
for (let i = 0; i < 5; i++) {
  _custom.CustomEvent.register('invslot' + (i + 1), () => {
    if (_gui.gui.is_block_keys) return;
    if (_gui.terminalOpened) return;
    if (_gui.inputOnFocus) return;
    if (_user.user.cuffed) return _user.user.notify('Нельзя использовать в наручниках');
    if (_user.user.walkingWithObject) return _user.user.notify('Недоступно при перемещении предмета', 'error');
    _custom.CustomEvent.triggerServer('inventory:hotkey:user', i);
    sendHotkeyCommand = true;
    setTimeout(() => {
      sendHotkeyCommand = false;
    }, 2000);
  });
}
_custom.CustomEvent.register('phoneSlot', () => {
  if (!_user.user.login) return;
  if (_menu.currentMenu) return;
  if (_gui.gui.is_block_keys) return;
  if (_gui.terminalOpened) return;
  if (_gui.inputOnFocus) return;
  if (_dance.dancing) return;
  if (!_furniturePlace.furniturePlace.lockControls) return;
  if (_user.user.cuffed) return _user.user.notify('Нельзя использовать в наручниках');
  if (_user.user.walkingWithObject) return _user.user.notify('Недоступно при перемещении предмета', 'error');
  _custom.CustomEvent.triggerServer('phone:openPhone');
  sendHotkeyCommand = true;
  setTimeout(() => {
    sendHotkeyCommand = false;
  }, 500);
});
_custom.CustomEvent.register('tabletSlot', () => {
  if (!_user.user.login) return;
  if (_menu.currentMenu) return;
  if (_gui.terminalOpened) return;
  if (_gui.inputOnFocus) return;
  if (_dance.dancing) return;
  if (!_furniturePlace.furniturePlace.lockControls) return;
  if (_user.user.cuffed) return _user.user.notify('Нельзя использовать в наручниках');
  if (_user.user.walkingWithObject) return _user.user.notify('Недоступно при перемещении предмета', 'error');
  if (_gui.gui.currentGui === 'tablet') {
    _gui.gui.setGui(null);
  } else {
    if (_gui.gui.is_block_keys) return;
    _custom.CustomEvent.triggerServer('tablet:openTablet');
  }
});
let sendReloadCommand = false;
let serverWeapon;
_custom.CustomEvent.registerServer('user:removeWeapon', data => {
  serverWeapon = data ? data.hash : null;
  sendWeaponAmmo = 0;
  _custom.CustomEvent.triggerCef('hud:weapon', data ? _objectSpread(_objectSpread({}, data), {}, {
    ammo: 0
  }) : null);
});
_custom.CustomEvent.registerServer('weaponInHand', data => {
  serverWeapon = data ? data.hash : null;
  sendWeaponAmmo = 0;
  _custom.CustomEvent.triggerCef('hud:weapon', data ? _objectSpread(_objectSpread({}, data), {}, {
    ammo: 0
  }) : null);
});
let sendWeaponAmmo = 0;
const AMMO_UPDATE_COOLDOWN_MS = 100;
let nextAmmoUpdateTime = 0;
let finalAmmoCheckTimer = null;
function updateHudAmmo(ammo) {
  if (_system.system.timestampMS < nextAmmoUpdateTime) {
    if (finalAmmoCheckTimer == null) {
      finalAmmoCheckTimer = setTimeout(() => {
        _custom.CustomEvent.triggerCef('hud:ammo', _user.user.currentAmmo);
        clearTimeout(finalAmmoCheckTimer);
        finalAmmoCheckTimer = null;
      }, AMMO_UPDATE_COOLDOWN_MS);
    }
    return;
  }
  _custom.CustomEvent.triggerCef('hud:ammo', ammo);
  nextAmmoUpdateTime = _system.system.timestampMS + AMMO_UPDATE_COOLDOWN_MS;
}
mp.events.add('render', () => {
  if (serverWeapon) mp.game.controls.disableControlAction(0, 45, true);
  mp.game.controls.disableControlAction(0, 140, true);
  const hand = 2725352035;
  const currentAmmo = _user.user.currentAmmo;
  if (sendWeaponAmmo !== currentAmmo) {
    sendWeaponAmmo = currentAmmo;
    updateHudAmmo(currentAmmo);
  }
  if (mp.players.local.weapon !== hand && mp.game.weapon.getWeaponClipSize(mp.players.local.weapon) && mp.game.controls.isDisabledControlJustPressed(0, 45) && !sendReloadCommand && !_gui.gui.is_block_keys && !_gui.phoneOpened && !_gui.terminalOpened && !_gui.inputOnFocus) {
    _custom.CustomEvent.triggerServer('inventory:reload:weapon');
    sendReloadCommand = true;
    setTimeout(() => {
      sendReloadCommand = false;
    }, 3000);
  }
});
const selectItem = (disabled = [], disableName) => {
  return new Promise((resolve, reject) => {
    const select = (name, category = _inventory.ITEM_TYPE_ARRAY.length) => {
      if (name) name = name.toLowerCase();
      let m = new _menu.MenuClass('Выберите предмет');
      m.onclose = () => {
        resolve(null);
      };
      m.newItem({
        name: 'Поиск',
        more: name,
        onpress: () => {
          (0, _menu.DialogInput)("Введите имя или ID", name ? name : "").then(val => {
            if (val === null) return select(name);else return select(val);
          });
        }
      });
      m.newItem({
        name: 'Категория',
        type: "list",
        list: [..._inventory.ITEM_TYPE_ARRAY, "Все предметы"],
        listSelected: category,
        onpress: itm => {
          select(name, itm.listSelected);
        }
      });
      _inventory.inventoryShared.items.map(item => {
        if (disabled.includes(item.item_id) && !disableName) return;
        if (category !== _inventory.ITEM_TYPE_ARRAY.length) {
          if (item.type !== category) return;
        }
        let idsrch = parseInt(name);
        if (!name || item.name.toLowerCase().includes(name) || idsrch === item.item_id) {
          m.newItem({
            name: item.name + " #" + item.item_id,
            icon: `Item_${item.item_id}`,
            more: disabled.includes(item.item_id) && disableName ? disableName : "",
            onpress: () => {
              if (disabled.includes(item.item_id)) return _user.user.notify(disableName, "error");
              m.close();
              resolve(item.item_id);
            }
          });
        }
      });
      if (name) m.subtitle = `Список найденых предметов (${m.items.length} / ${_inventory.inventoryShared.items.length})`;else m.subtitle = `Список всех доступных пердметов`;
      m.open();
    };
    select();
  });
};
exports.selectItem = selectItem;
_custom.CustomEvent.register('tablet:getTrackSuspect', () => {
  return _user.user.trackSuspect;
});
_custom.CustomEvent.registerServer('tablet:open', (house, vehicles, faction, myNumbers, lifeInvaderModerate, bussinessData, familyData, gosSuspects) => {
  _gui.gui.setGui('tablet');
  const trackSuspect = _user.user.trackSuspect;
  _custom.CustomEvent.triggerCef('tablet:open', house, vehicles, faction, myNumbers, lifeInvaderModerate, bussinessData, familyData, gosSuspects, trackSuspect);
});
let objects = [];
setInterval(() => {
  if (!_user.user.login) return;
  objects = [];
  mp.objects.forEachInStreamRange(object => {
    if (!object.getVariable('inventory_dropped')) return;
    if (!object.isCollisonDisabled()) {
      object.setCollision(false, true);
    }
    if (_system.system.distanceToPos(object.position, mp.players.local.position) > 5) return;
    objects.push({
      handle: object.handle,
      x: object.position.x,
      y: object.position.y,
      z: object.position.z,
      name: (0, _inventory.getBaseItemNameById)(object.getVariable('item_id'))
    });
  });
}, 400);
mp.events.add('render', () => {
  objects.map(item => {
    _gui.gui.drawText3D(item.name, item.x, item.y, item.z, 0.5, true);
  });
});
let flashEnabled = new Map();
const setWeaponAddons = (target, data, oldData, tick = false) => {
  if (!mp.players.exists(target) || !target.handle) return;
  if (oldData) {
    const weaponHash = oldData[0];
    const weaponHashInt = mp.game.joaat(weaponHash);
    const cfg = _inventory.inventoryShared.getWeaponConfigByHash(weaponHash);
    if (cfg) {
      const addons = oldData[1];
      if (addons) {
        addons.map(addon => {
          var _cfg$addons$addon;
          const hash = (_cfg$addons$addon = cfg.addons[addon]) === null || _cfg$addons$addon === void 0 ? void 0 : _cfg$addons$addon.hash;
          if (hash) {
            mp.game.invoke('0x1E8BE90C74FB4C09', target.handle, weaponHashInt >> 0, mp.game.joaat(hash) >> 0);
          }
        });
      }
    }
  }
  flashEnabled.delete(target.remoteId);
  if (data) {
    const weaponHash = data[0];
    const weaponHashInt = mp.game.joaat(weaponHash.toUpperCase());
    const cfg = _inventory.inventoryShared.getWeaponConfigByHash(weaponHash);
    if (cfg) {
      const addons = data[1];
      if (addons) {
        addons.map(addon => {
          var _cfg$addons$addon2;
          const hash = (_cfg$addons$addon2 = cfg.addons[addon]) === null || _cfg$addons$addon2 === void 0 ? void 0 : _cfg$addons$addon2.hash;
          if (hash) {
            if (hash.includes('_FLSH')) flashEnabled.set(target.remoteId, hash);
            const hashC = mp.game.joaat(hash);
            if (hash.includes('WEAPON_TINT')) {
              mp.game.invoke('0x50969B9B89ED5738', target.handle, weaponHashInt >> 0, Number.parseInt(hash.toString().replace('WEAPON_TINT', '')) >> 0);
            }
            mp.game.invoke('0xD966D51AA5B28BB9', target.handle, weaponHashInt >> 0, hashC >> 0);
            if (!tick) {
              setTimeout(() => {
                if (target && mp.players.exists(target) && target.handle) mp.game.invoke('0xD966D51AA5B28BB9', target.handle, weaponHashInt >> 0, hashC >> 0);
              }, 500);
            }
          }
        });
      }
    }
  }
};
let flashPos = {
  COMPONENT_AT_AR_FLSH: [new mp.Vector3(0.5, 0.03, 0.05), new mp.Vector3(1.0, -0.16, 0.145)],
  COMPONENT_AT_PI_FLSH: [new mp.Vector3(0.28, 0.04, 0.0), new mp.Vector3(1.0, -0.12, 0.03)],
  COMPONENT_AT_PI_FLSH_02: [new mp.Vector3(0.28, 0.04, 0.0), new mp.Vector3(1.0, -0.135, 0.03)],
  COMPONENT_AT_PI_FLSH_03: [new mp.Vector3(0.28, 0.04, 0.0), new mp.Vector3(1.0, -0.135, 0.03)]
};
let block = false;
_custom.CustomEvent.register('flashlight', () => {
  if (block) return;
  if (!flashEnabled.has(player.remoteId)) return;
  block = true;
  _custom.CustomEvent.triggerServer('inventory:flashlight');
  mp.game.audio.playSoundFrontend(-1, "PICK_UP_WEAPON", "HUD_FRONTEND_CUSTOM_SOUNDSET", true);
  setTimeout(() => {
    block = false;
  }, 3000);
});
mp.events.add('render', () => {
  flashEnabled.forEach((hash, targetid) => {
    const target = mp.players.atRemoteId(targetid);
    if (!target || !mp.players.exists(target) || !target.handle) return flashEnabled.delete(targetid);
    if (!target.getVariable('flashlightWeapon')) return;
    const cfg = flashPos[hash];
    if (!cfg) return;
    let FlashlightPosition = target.getBoneCoords(0xDEAD, cfg[0].x, cfg[0].y, cfg[0].z);
    let FlashlightDirection = target.getBoneCoords(0xDEAD, cfg[1].x, cfg[1].y, cfg[1].z);
    let DirectionVector = new mp.Vector3(FlashlightDirection.x - FlashlightPosition.x, FlashlightDirection.y - FlashlightPosition.y, FlashlightDirection.z - FlashlightPosition.z);
    let VectorMagnitude = Math.hypot(DirectionVector.x, DirectionVector.y, DirectionVector.z);
    let FlashlightEndPosition = new mp.Vector3(DirectionVector.x / VectorMagnitude, DirectionVector.y / VectorMagnitude, DirectionVector.z / VectorMagnitude);
    mp.game.graphics.drawSpotLight(FlashlightPosition.x, FlashlightPosition.y, FlashlightPosition.z, FlashlightEndPosition.x, FlashlightEndPosition.y, FlashlightEndPosition.z, 255, 255, 255, 40.0, 2.0, 2.0, 10.0, 15.0);
  });
});
mp.events.addDataHandler("currentWeaponAddons", async (target, data, oldData) => {
  if (target.type !== "player") return;
  setTimeout(() => {
    if (!mp.players.exists(target) || !target.handle) return;
    setWeaponAddons(target, data, oldData);
  }, mp.players.local === target ? 100 : 500);
});
mp.events.add('entityStreamIn', async target => {
  if (target.type !== "player") return;
  setTimeout(() => {
    if (!mp.players.exists(target) || !target.handle) return;
    const val = target.getVariable('currentWeaponAddons');
    if (val) setWeaponAddons(target, target.getVariable('currentWeaponAddons'), null);
  }, mp.players.local === target ? 100 : 500);
});
setInterval(() => {
  if (!_user.user.login) return;
  const my = mp.players.local.getVariable('currentWeaponAddons');
  if (my) setWeaponAddons(mp.players.local, my, null, true);
  mp.players.forEachInStreamRange(target => {
    const val = target.getVariable('currentWeaponAddons');
    if (val) setWeaponAddons(target, val, null, true);
  });
}, 1000);
},{"./custom.event":"py8h","../../shared/inventory":"vpPR","./gui":"bk91","./user":"ggMw","./cloth":"Sp7p","./menu":"Aiz7","./system":"pi2J","./dance":"gNQw","./houses/furniturePlace":"opsa"}],"XwUR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicleSpawnPoints = void 0;
const vehicleSpawnPoints = exports.vehicleSpawnPoints = [{
  x: -590.25,
  y: -252.78,
  z: 35.96,
  heading: 209,
  models: [],
  id: 0
}, {
  x: -529.58,
  y: -294.59,
  z: 35.1,
  heading: 292,
  models: [],
  id: 1
}, {
  x: -474.4,
  y: -298.34,
  z: 35.12,
  heading: 20,
  models: [],
  id: 2
}, {
  x: -490.93,
  y: -331.98,
  z: 34.36,
  heading: 69,
  models: [],
  id: 3
}, {
  x: -490.26,
  y: -342.09,
  z: 34.37,
  heading: 82,
  models: [],
  id: 4
}, {
  x: -456.1,
  y: -345.72,
  z: 34.36,
  heading: 262,
  models: [],
  id: 5
}, {
  x: -455.64,
  y: -333.08,
  z: 34.37,
  heading: 253,
  models: [],
  id: 6
}, {
  x: -481.96,
  y: -388.28,
  z: 34.03,
  heading: 261,
  models: [],
  id: 7
}, {
  x: -438.47,
  y: -459.97,
  z: 32.61,
  heading: 351,
  models: [],
  id: 8
}, {
  x: -448.54,
  y: -458.18,
  z: 32.95,
  heading: 347,
  models: [],
  id: 9
}, {
  x: -419.16,
  y: -332.52,
  z: 33.11,
  heading: 352,
  models: [],
  id: 10
}, {
  x: -378.71,
  y: -196.66,
  z: 36.73,
  heading: 99,
  models: [],
  id: 11
}, {
  x: -360.47,
  y: -227.74,
  z: 37.25,
  heading: 51,
  models: [],
  id: 12
}, {
  x: -357.53,
  y: -222.87,
  z: 37.29,
  heading: 52,
  models: [],
  id: 13
}, {
  x: -261.82,
  y: -298.04,
  z: 30.33,
  heading: 14,
  models: [],
  id: 14
}, {
  x: -251.81,
  y: -247.77,
  z: 36.52,
  heading: 359,
  models: [],
  id: 15
}, {
  x: -244.53,
  y: -219.35,
  z: 36.52,
  heading: 88,
  models: [],
  id: 16
}, {
  x: -244.01,
  y: -234.01,
  z: 36.52,
  heading: 89,
  models: [],
  id: 17
}, {
  x: -289.99,
  y: -121.67,
  z: 44.98,
  heading: 104,
  models: [],
  id: 18
}, {
  x: -285.86,
  y: -104.39,
  z: 46.57,
  heading: 92,
  models: [],
  id: 19
}, {
  x: -387.31,
  y: -127.97,
  z: 38.68,
  heading: 118,
  models: [],
  id: 20
}, {
  x: -355.87,
  y: -103.17,
  z: 45.66,
  heading: 158,
  models: [],
  id: 21
}, {
  x: -369.09,
  y: -98.53,
  z: 45.66,
  heading: 147,
  models: [],
  id: 22
}, {
  x: -372.47,
  y: -80.28,
  z: 45.66,
  heading: 248,
  models: [],
  id: 23
}, {
  x: -337.27,
  y: -92.56,
  z: 47,
  heading: 326,
  models: [],
  id: 24
}, {
  x: -324.3,
  y: -54.47,
  z: 54.42,
  heading: 160,
  models: [],
  id: 25
}, {
  x: -357.77,
  y: -69.61,
  z: 54.42,
  heading: 130,
  models: [],
  id: 26
}, {
  x: -397.75,
  y: -91.46,
  z: 54.42,
  heading: 163,
  models: [],
  id: 27
}, {
  x: -387.94,
  y: -53.02,
  z: 54.42,
  heading: 249,
  models: [],
  id: 28
}, {
  x: -337.38,
  y: -5.17,
  z: 47.48,
  heading: 60,
  models: [],
  id: 29
}, {
  x: -159.56,
  y: -176.33,
  z: 43.62,
  heading: 341,
  models: [],
  id: 30
}, {
  x: -187.23,
  y: -175.57,
  z: 43.62,
  heading: 148,
  models: [],
  id: 31
}, {
  x: -70.78,
  y: -212.48,
  z: 45.44,
  heading: 338,
  models: [],
  id: 32
}, {
  x: -52.32,
  y: -218.28,
  z: 45.44,
  heading: 338,
  models: [],
  id: 33
}, {
  x: -58.83,
  y: -236.44,
  z: 45.23,
  heading: 67,
  models: [],
  id: 34
}, {
  x: -18.74,
  y: -217.25,
  z: 46.18,
  heading: 156,
  models: [],
  id: 35
}, {
  x: -32.37,
  y: -370.48,
  z: 39.21,
  heading: 251,
  models: [],
  id: 36
}, {
  x: -41.72,
  y: -388.3,
  z: 38.55,
  heading: 246,
  models: [],
  id: 37
}, {
  x: 26.24,
  y: -366.69,
  z: 39.36,
  heading: 153,
  models: [],
  id: 38
}, {
  x: 119.54,
  y: -448.41,
  z: 41.13,
  heading: 71,
  models: [],
  id: 39
}, {
  x: 123.77,
  y: -436.6,
  z: 41.09,
  heading: 65,
  models: [],
  id: 40
}, {
  x: 107.35,
  y: -336.85,
  z: 43.45,
  heading: 157,
  models: [],
  id: 41
}, {
  x: 154.77,
  y: -354.21,
  z: 43.31,
  heading: 155,
  models: [],
  id: 42
}, {
  x: 168.27,
  y: -421.59,
  z: 40.91,
  heading: 342,
  models: [],
  id: 43
}, {
  x: 170.58,
  y: -304.75,
  z: 46.15,
  heading: 156,
  models: [],
  id: 44
}, {
  x: 270.68,
  y: -322.63,
  z: 44.92,
  heading: 60,
  models: [],
  id: 45
}, {
  x: 279.14,
  y: -333.39,
  z: 44.92,
  heading: 243,
  models: [],
  id: 46
}, {
  x: 293.38,
  y: -346.36,
  z: 44.92,
  heading: 69,
  models: [],
  id: 47
}, {
  x: 272.81,
  y: -516.98,
  z: 43.12,
  heading: 151,
  models: [],
  id: 48
}, {
  x: 302.67,
  y: -516.88,
  z: 43.15,
  heading: 339,
  models: [],
  id: 49
}, {
  x: 411.04,
  y: -401.01,
  z: 46.74,
  heading: 296,
  models: [],
  id: 50
}, {
  x: 417.18,
  y: -372.96,
  z: 46.84,
  heading: 140,
  models: [],
  id: 51
}, {
  x: 445.3,
  y: -333.46,
  z: 47.62,
  heading: 152,
  models: [],
  id: 52
}, {
  x: 442.8,
  y: -286.91,
  z: 49.27,
  heading: 42,
  models: [],
  id: 53
}, {
  x: 454.8,
  y: -292,
  z: 48.4,
  heading: 67,
  models: [],
  id: 54
}, {
  x: 462.07,
  y: -280.28,
  z: 48.63,
  heading: 160,
  models: [],
  id: 55
}, {
  x: 510.03,
  y: -240.66,
  z: 48.55,
  heading: 160,
  models: [],
  id: 56
}, {
  x: 507.39,
  y: -206.42,
  z: 51.09,
  heading: 202,
  models: [],
  id: 57
}, {
  x: 529.18,
  y: -206.72,
  z: 51.81,
  heading: 24,
  models: [],
  id: 58
}, {
  x: 540.91,
  y: -214.75,
  z: 52.45,
  heading: 186,
  models: [],
  id: 59
}, {
  x: 529.08,
  y: -206.12,
  z: 51.85,
  heading: 21,
  models: [],
  id: 60
}, {
  x: 536.22,
  y: -183.36,
  z: 54.35,
  heading: 69,
  models: [],
  id: 61
}, {
  x: 534.51,
  y: -169.38,
  z: 54.66,
  heading: 179,
  models: [],
  id: 62
}, {
  x: 526.67,
  y: -168.73,
  z: 55.26,
  heading: 183,
  models: [],
  id: 63
}, {
  x: 553.05,
  y: -143.26,
  z: 58.62,
  heading: 180,
  models: [],
  id: 64
}, {
  x: 500.05,
  y: -104.95,
  z: 61.96,
  heading: 248,
  models: [],
  id: 65
}, {
  x: 503.12,
  y: -98.32,
  z: 62.19,
  heading: 270,
  models: [],
  id: 66
}, {
  x: 473.21,
  y: -161.49,
  z: 57.63,
  heading: 233,
  models: [],
  id: 67
}, {
  x: 436.01,
  y: -152.31,
  z: 63.31,
  heading: 248,
  models: [],
  id: 68
}, {
  x: 462.38,
  y: -138.69,
  z: 61.54,
  heading: 77,
  models: [],
  id: 69
}, {
  x: 350.29,
  y: -135.04,
  z: 65.52,
  heading: 331,
  models: [],
  id: 70
}, {
  x: 334.27,
  y: -128.49,
  z: 67.17,
  heading: 340,
  models: [],
  id: 71
}, {
  x: 312.04,
  y: -107.84,
  z: 68.88,
  heading: 248,
  models: [],
  id: 72
}, {
  x: 278.78,
  y: -145.66,
  z: 65.2,
  heading: 248,
  models: [],
  id: 73
}, {
  x: 299.64,
  y: -197.05,
  z: 61.57,
  heading: 247,
  models: [],
  id: 74
}, {
  x: 284.53,
  y: -199.41,
  z: 61.57,
  heading: 155,
  models: [],
  id: 75
}, {
  x: 268.34,
  y: -191.77,
  z: 61.57,
  heading: 146,
  models: [],
  id: 76
}, {
  x: 272.58,
  y: -182.27,
  z: 61.57,
  heading: 339,
  models: [],
  id: 77
}, {
  x: 341.43,
  y: -185.04,
  z: 58.05,
  heading: 69,
  models: [],
  id: 78
}, {
  x: 327.83,
  y: -204.25,
  z: 54.09,
  heading: 155,
  models: [],
  id: 79
}, {
  x: 322.99,
  y: -225.09,
  z: 54.07,
  heading: 159,
  models: [],
  id: 80
}, {
  x: 294.71,
  y: -233.95,
  z: 53.99,
  heading: 1,
  models: [],
  id: 81
}, {
  x: 278.79,
  y: -227.81,
  z: 53.98,
  heading: 14,
  models: [],
  id: 82
}, {
  x: 253.34,
  y: -242.75,
  z: 53.89,
  heading: 242,
  models: [],
  id: 83
}, {
  x: 208.72,
  y: -257.59,
  z: 52.06,
  heading: 142,
  models: [],
  id: 84
}, {
  x: 162.71,
  y: -61.86,
  z: 68.26,
  heading: 321,
  models: [],
  id: 85
}, {
  x: 166.67,
  y: -33.87,
  z: 67.91,
  heading: 5,
  models: [],
  id: 86
}, {
  x: 160.27,
  y: -31.29,
  z: 67.79,
  heading: 357,
  models: [],
  id: 87
}, {
  x: 218,
  y: -27.62,
  z: 69.72,
  heading: 339,
  models: [],
  id: 88
}, {
  x: 325.68,
  y: -679.08,
  z: 29.32,
  heading: 249,
  models: [],
  id: 89
}, {
  x: 323.59,
  y: -683.82,
  z: 29.31,
  heading: 236,
  models: [],
  id: 90
}, {
  x: 305.13,
  y: -691.41,
  z: 29.33,
  heading: 342,
  models: [],
  id: 91
}, {
  x: 297.93,
  y: -695.9,
  z: 29.3,
  heading: 161,
  models: [],
  id: 92
}, {
  x: 291.16,
  y: -689.82,
  z: 29.3,
  heading: 248,
  models: [],
  id: 93
}, {
  x: 302.67,
  y: -776.71,
  z: 29.19,
  heading: 157,
  models: [],
  id: 94
}, {
  x: 330.71,
  y: -772.55,
  z: 29.16,
  heading: 339,
  models: [],
  id: 95
}, {
  x: 315.52,
  y: -867.15,
  z: 29.19,
  heading: 259,
  models: [],
  id: 96
}, {
  x: 370.54,
  y: -821.8,
  z: 29.29,
  heading: 178,
  models: [],
  id: 97
}, {
  x: 360,
  y: -804.85,
  z: 29.29,
  heading: 358,
  models: [],
  id: 98
}, {
  x: 387.77,
  y: -740.66,
  z: 29.29,
  heading: 359,
  models: [],
  id: 99
}, {
  x: 383.86,
  y: -765.95,
  z: 29.29,
  heading: 177,
  models: [],
  id: 100
}, {
  x: 410.88,
  y: -753.85,
  z: 29.13,
  heading: 359,
  models: [],
  id: 101
}, {
  x: 401.19,
  y: -788.2,
  z: 29.14,
  heading: 179,
  models: [],
  id: 102
}, {
  x: 453.91,
  y: -807.1,
  z: 27.61,
  heading: 179,
  models: [],
  id: 103
}, {
  x: 459.73,
  y: -690.44,
  z: 27.64,
  heading: 359,
  models: [],
  id: 104
}, {
  x: 468.92,
  y: -629.52,
  z: 28.5,
  heading: 174,
  models: [],
  id: 105
}, {
  x: 503.04,
  y: -609.78,
  z: 24.75,
  heading: 177,
  models: [],
  id: 106
}, {
  x: 503.55,
  y: -555.83,
  z: 24.75,
  heading: 174,
  models: [],
  id: 107
}, {
  x: 426.7,
  y: -582.83,
  z: 28.52,
  heading: 144,
  models: [],
  id: 108
}, {
  x: 482.75,
  y: -906.35,
  z: 35.97,
  heading: 294,
  models: [],
  id: 109
}, {
  x: 483.15,
  y: -895.09,
  z: 35.97,
  heading: 292,
  models: [],
  id: 110
}, {
  x: 450.11,
  y: -900.02,
  z: 28.56,
  heading: 178,
  models: [],
  id: 111
}, {
  x: 385.6,
  y: -906.63,
  z: 29.45,
  heading: 270,
  models: [],
  id: 112
}, {
  x: 385.96,
  y: -901.89,
  z: 29.45,
  heading: 275,
  models: [],
  id: 113
}, {
  x: 451.08,
  y: -1157.68,
  z: 29.29,
  heading: 268,
  models: [],
  id: 114
}, {
  x: 384.3,
  y: -1154.32,
  z: 29.29,
  heading: 291,
  models: [],
  id: 115
}, {
  x: 347.44,
  y: -1153.67,
  z: 29.29,
  heading: 268,
  models: [],
  id: 116
}, {
  x: 325.78,
  y: -1162.95,
  z: 29.29,
  heading: 269,
  models: [],
  id: 117
}, {
  x: 306.18,
  y: -1094.46,
  z: 29.4,
  heading: 295,
  models: [],
  id: 118
}, {
  x: 289.42,
  y: -1036.58,
  z: 29.07,
  heading: 89,
  models: [],
  id: 119
}, {
  x: 224.37,
  y: -1092.1,
  z: 29.16,
  heading: 354,
  models: [],
  id: 120
}, {
  x: 246.68,
  y: -1161.59,
  z: 29.16,
  heading: 161,
  models: [],
  id: 121
}, {
  x: 162.97,
  y: -1146.87,
  z: 29.29,
  heading: 1,
  models: [],
  id: 122
}, {
  x: 148.02,
  y: -1145.88,
  z: 29.29,
  heading: 0,
  models: [],
  id: 123
}, {
  x: 136.45,
  y: -1153.33,
  z: 29.32,
  heading: 270,
  models: [],
  id: 124
}, {
  x: 120.79,
  y: -1115.93,
  z: 29.19,
  heading: 179,
  models: [],
  id: 125
}, {
  x: 37.81,
  y: -1178.89,
  z: 29.32,
  heading: 307,
  models: [],
  id: 126
}, {
  x: 96.68,
  y: -1173.49,
  z: 29.3,
  heading: 93,
  models: [],
  id: 127
}, {
  x: 258.23,
  y: -1113.54,
  z: 29.41,
  heading: 221,
  models: [],
  id: 128
}, {
  x: -225.28,
  y: -1115.78,
  z: 22.99,
  heading: 159,
  models: [],
  id: 129
}, {
  x: -130.97,
  y: -1025.08,
  z: 27.27,
  heading: 129,
  models: [],
  id: 130
}, {
  x: -76.19,
  y: -989.47,
  z: 28.08,
  heading: 159,
  models: [],
  id: 131
}, {
  x: -148.6,
  y: -1166,
  z: 25.27,
  heading: 87,
  models: [],
  id: 132
}, {
  x: -134.99,
  y: -1178.28,
  z: 25.28,
  heading: 269,
  models: [],
  id: 133
}, {
  x: -207.22,
  y: -1180.38,
  z: 23.03,
  heading: 87,
  models: [],
  id: 134
}, {
  x: -185.05,
  y: -1180.39,
  z: 23.08,
  heading: 269,
  models: [],
  id: 135
}, {
  x: -238.48,
  y: -1168.98,
  z: 22.95,
  heading: 78,
  models: [],
  id: 136
}, {
  x: -240.97,
  y: -1180.94,
  z: 23.03,
  heading: 90,
  models: [],
  id: 137
}, {
  x: -221.68,
  y: -1174.85,
  z: 23.01,
  heading: 0,
  models: [],
  id: 138
}, {
  x: -317.78,
  y: -1111.22,
  z: 23,
  heading: 158,
  models: [],
  id: 139
}, {
  x: -326.33,
  y: -1108.83,
  z: 22.98,
  heading: 153,
  models: [],
  id: 140
}, {
  x: -335.48,
  y: -1105.44,
  z: 22.98,
  heading: 159,
  models: [],
  id: 141
}, {
  x: -352.57,
  y: -1088.55,
  z: 23.03,
  heading: 69,
  models: [],
  id: 142
}, {
  x: -349.1,
  y: -1076.89,
  z: 23.03,
  heading: 67,
  models: [],
  id: 143
}, {
  x: -329.05,
  y: -1074.65,
  z: 23.03,
  heading: 278,
  models: [],
  id: 144
}, {
  x: -328.95,
  y: -997.79,
  z: 30.39,
  heading: 247,
  models: [],
  id: 145
}, {
  x: -334.2,
  y: -1009,
  z: 30.38,
  heading: 245,
  models: [],
  id: 146
}, {
  x: -825.16,
  y: -2643.42,
  z: 13.81,
  heading: 235,
  models: [],
  id: 147
}, {
  x: -871.57,
  y: -2586.34,
  z: 13.83,
  heading: 64,
  models: [],
  id: 148
}, {
  x: -841.41,
  y: -2473,
  z: 13.83,
  heading: 307,
  models: [],
  id: 149
}, {
  x: -1095.62,
  y: -2159.86,
  z: 13.29,
  heading: 223,
  models: [],
  id: 150
}, {
  x: -964.74,
  y: -1972.04,
  z: 13.19,
  heading: 131,
  models: [],
  id: 151
}, {
  x: -594.46,
  y: -2368.38,
  z: 13.83,
  heading: 143,
  models: [],
  id: 152
}, {
  x: -1063.33,
  y: -2162.87,
  z: 13.28,
  heading: 221,
  models: [],
  id: 153
}, {
  x: -1088.81,
  y: -2137.43,
  z: 13.28,
  heading: 43,
  models: [],
  id: 154
}, {
  x: -992.07,
  y: -2512.7,
  z: 13.83,
  heading: 58,
  models: [],
  id: 155
}, {
  x: -999.19,
  y: -2524.83,
  z: 13.83,
  heading: 57,
  models: [],
  id: 156
}, {
  x: -893.37,
  y: -2617.34,
  z: 16.6,
  heading: 236,
  models: [],
  id: 157
}, {
  x: -936.14,
  y: -2692.45,
  z: 21.61,
  heading: 241,
  models: [],
  id: 158
}, {
  x: -920.66,
  y: -2596.78,
  z: 26.6,
  heading: 144,
  models: [],
  id: 159
}, {
  x: -938.26,
  y: -2695.49,
  z: 31.64,
  heading: 238,
  models: [],
  id: 160
}, {
  x: -942.28,
  y: -2648.68,
  z: 39.04,
  heading: 241,
  models: [],
  id: 161
}, {
  x: -1010.63,
  y: -2604.08,
  z: 39.1,
  heading: 66,
  models: [],
  id: 162
}, {
  x: -1054.06,
  y: -2624.24,
  z: 31.6,
  heading: 235,
  models: [],
  id: 163
}, {
  x: -1018.09,
  y: -2645.16,
  z: 26.6,
  heading: 241,
  models: [],
  id: 164
}, {
  x: -1012.69,
  y: -2552.78,
  z: 21.61,
  heading: 236,
  models: [],
  id: 165
}, {
  x: -589.85,
  y: -1641.28,
  z: 19.86,
  heading: 240,
  models: [],
  id: 166
}, {
  x: -620.45,
  y: -1649.74,
  z: 25.83,
  heading: 239,
  models: [],
  id: 167
}, {
  x: -635.93,
  y: -1656.25,
  z: 25.83,
  heading: 60,
  models: [],
  id: 168
}, {
  x: -64.46,
  y: -2024.93,
  z: 18.02,
  heading: 198,
  models: [],
  id: 169
}, {
  x: -102.89,
  y: -2024.39,
  z: 18.02,
  heading: 172,
  models: [],
  id: 170
}, {
  x: -78.75,
  y: -1988.68,
  z: 18.02,
  heading: 349,
  models: [],
  id: 171
}, {
  x: -263.87,
  y: -2091.85,
  z: 27.62,
  heading: 106,
  models: [],
  id: 172
}, {
  x: -338.69,
  y: -2187.05,
  z: 9.86,
  heading: 267,
  models: [],
  id: 173
}, {
  x: -315.06,
  y: -2169.86,
  z: 10.29,
  heading: 238,
  models: [],
  id: 174
}, {
  x: -302.03,
  y: -2225.71,
  z: 8.43,
  heading: 144,
  models: [],
  id: 175
}, {
  x: -177.48,
  y: -2197.43,
  z: 10.32,
  heading: 290,
  models: [],
  id: 176
}, {
  x: -174.17,
  y: -2147.69,
  z: 16.7,
  heading: 202,
  models: [],
  id: 177
}, {
  x: -154.62,
  y: -2134.56,
  z: 16.7,
  heading: 18,
  models: [],
  id: 178
}, {
  x: -131.66,
  y: -2148.76,
  z: 16.7,
  heading: 200,
  models: [],
  id: 179
}, {
  x: -115.31,
  y: -2120.02,
  z: 16.7,
  heading: 201,
  models: [],
  id: 180
}, {
  x: -76.16,
  y: -2106.09,
  z: 16.7,
  heading: 200,
  models: [],
  id: 181
}, {
  x: -54.18,
  y: -2120.88,
  z: 16.7,
  heading: 197,
  models: [],
  id: 182
}, {
  x: -40.55,
  y: -2101.48,
  z: 16.7,
  heading: 19,
  models: [],
  id: 183
}, {
  x: -21.78,
  y: -2089.8,
  z: 16.7,
  heading: 286,
  models: [],
  id: 184
}, {
  x: -590.56,
  y: -1588.64,
  z: 26.75,
  heading: 263,
  models: [],
  id: 185
}, {
  x: -428.51,
  y: -1718.32,
  z: 19.12,
  heading: 155,
  models: [],
  id: 186
}, {
  x: -529.3,
  y: -1684.8,
  z: 19.16,
  heading: 37,
  models: [],
  id: 187
}, {
  x: -680.13,
  y: -1399.86,
  z: 5,
  heading: 269,
  models: [],
  id: 188
}, {
  x: 8.43,
  y: -1837.33,
  z: 24.79,
  heading: 137,
  models: [],
  id: 189
}, {
  x: 15.66,
  y: -1819.07,
  z: 25.09,
  heading: 48,
  models: [],
  id: 190
}, {
  x: -67.9,
  y: -1830.85,
  z: 26.94,
  heading: 139,
  models: [],
  id: 191
}, {
  x: -54.76,
  y: -1846.91,
  z: 26.38,
  heading: 141,
  models: [],
  id: 192
}, {
  x: 274.9,
  y: -2067.61,
  z: 17.1,
  heading: 295,
  models: [],
  id: 193
}, {
  x: 107.2,
  y: -1813.25,
  z: 26.54,
  heading: 139,
  models: [],
  id: 194
}, {
  x: 175.25,
  y: -1708.48,
  z: 29.29,
  heading: 312,
  models: [],
  id: 195
}, {
  x: -258.32,
  y: -2650.77,
  z: 6,
  heading: 124,
  models: [],
  id: 196
}, {
  x: -88.58,
  y: -2631.34,
  z: 6,
  heading: 256,
  models: [],
  id: 197
}, {
  x: -233.28,
  y: -2600.7,
  z: 6,
  heading: 327,
  models: [],
  id: 198
}, {
  x: -226.2,
  y: -2655.15,
  z: 6,
  heading: 265,
  models: [],
  id: 199
}, {
  x: 141.97,
  y: -2451.21,
  z: 6,
  heading: 113,
  models: [],
  id: 200
}, {
  x: 243.4,
  y: -3337.92,
  z: 5.81,
  heading: 179,
  models: [],
  id: 201
}, {
  x: 113.74,
  y: -3335.56,
  z: 6.01,
  heading: 177,
  models: [],
  id: 202
}, {
  x: 306.51,
  y: -3228.61,
  z: 5.88,
  heading: 266,
  models: [],
  id: 203
}, {
  x: 145.44,
  y: -3210.1,
  z: 5.86,
  heading: 86,
  models: [],
  id: 204
}, {
  x: 123.56,
  y: -3081.9,
  z: 5.98,
  heading: 356,
  models: [],
  id: 205
}, {
  x: 133.04,
  y: -2982.74,
  z: 6.82,
  heading: 266,
  models: [],
  id: 206
}, {
  x: 283.84,
  y: -2659.82,
  z: 6.18,
  heading: 176,
  models: [],
  id: 207
}, {
  x: 350.73,
  y: -2630.62,
  z: 6.22,
  heading: 88,
  models: [],
  id: 208
}, {
  x: -527.9,
  y: -2902.19,
  z: 6,
  heading: 203,
  models: [],
  id: 209
}, {
  x: -407.08,
  y: -2819.43,
  z: 6,
  heading: 324,
  models: [],
  id: 210
}, {
  x: -446.27,
  y: -2430.53,
  z: 6,
  heading: 319,
  models: [],
  id: 211
}, {
  x: -333.45,
  y: -2523.85,
  z: 6,
  heading: 228,
  models: [],
  id: 212
}, {
  x: -355.72,
  y: -1538,
  z: 27.71,
  heading: 88,
  models: [],
  id: 213
}, {
  x: -352.88,
  y: -1585.38,
  z: 22.92,
  heading: 182,
  models: [],
  id: 214
}, {
  x: -351.31,
  y: -1389.33,
  z: 31.34,
  heading: 180,
  models: [],
  id: 215
}, {
  x: -1071.76,
  y: -1447.32,
  z: 5.4,
  heading: 69,
  models: [],
  id: 216
}, {
  x: -1037.61,
  y: -1420.44,
  z: 5.43,
  heading: 251,
  models: [],
  id: 217
}, {
  x: -1039.9,
  y: -1319.43,
  z: 5.45,
  heading: 77,
  models: [],
  id: 218
}, {
  x: -1074.66,
  y: -1245.55,
  z: 5.41,
  heading: 300,
  models: [],
  id: 219
}, {
  x: -2009.13,
  y: -499.26,
  z: 11.58,
  heading: 142,
  models: [],
  id: 220
}, {
  x: -2044.71,
  y: -438.54,
  z: 11.62,
  heading: 46,
  models: [],
  id: 221
}, {
  x: -2219.75,
  y: -361.92,
  z: 13.33,
  heading: 253,
  models: [],
  id: 222
}, {
  x: -2038.47,
  y: -260.7,
  z: 23.39,
  heading: 139,
  models: [],
  id: 223
}, {
  x: -1796.07,
  y: -394.7,
  z: 45.09,
  heading: 318,
  models: [],
  id: 224
}, {
  x: -1765.7,
  y: -524.38,
  z: 38.77,
  heading: 121,
  models: [],
  id: 225
}, {
  x: -1780.04,
  y: -498.34,
  z: 38.78,
  heading: 220,
  models: [],
  id: 226
}, {
  x: -1519.04,
  y: -417.06,
  z: 35.44,
  heading: 46,
  models: [],
  id: 227
}, {
  x: -1532.01,
  y: -443.56,
  z: 35.44,
  heading: 46,
  models: [],
  id: 228
}, {
  x: -1464.31,
  y: -359.92,
  z: 44,
  heading: 210,
  models: [],
  id: 229
}, {
  x: -1413.58,
  y: -254.42,
  z: 46.38,
  heading: 40,
  models: [],
  id: 230
}, {
  x: -1343.52,
  y: -204.45,
  z: 43.73,
  heading: 305,
  models: [],
  id: 231
}, {
  x: -1327.55,
  y: -230.39,
  z: 42.84,
  heading: 129,
  models: [],
  id: 232
}, {
  x: -1261.58,
  y: -226.07,
  z: 42.45,
  heading: 308,
  models: [],
  id: 233
}, {
  x: -1284.37,
  y: -193.61,
  z: 47.05,
  heading: 305,
  models: [],
  id: 234
}, {
  x: -1274.4,
  y: -252.61,
  z: 51.55,
  heading: 214,
  models: [],
  id: 235
}, {
  x: -1284.19,
  y: -193.62,
  z: 56.1,
  heading: 303,
  models: [],
  id: 236
}, {
  x: -1273.75,
  y: -253.33,
  z: 60.65,
  heading: 213,
  models: [],
  id: 237
}, {
  x: -1560.84,
  y: -246.85,
  z: 48.28,
  heading: 50,
  models: [],
  id: 238
}, {
  x: -1570.53,
  y: -287.47,
  z: 48.28,
  heading: 141,
  models: [],
  id: 239
}, {
  x: -1461.64,
  y: -373.46,
  z: 39.18,
  heading: 220,
  models: [],
  id: 240
}, {
  x: -2292.99,
  y: 413.93,
  z: 174.47,
  heading: 334,
  models: [],
  id: 241
}, {
  x: -2341.23,
  y: 346.5,
  z: 172.86,
  heading: 202,
  models: [],
  id: 242
}, {
  x: -2318.63,
  y: 298.97,
  z: 169.47,
  heading: 297,
  models: [],
  id: 243
}, {
  x: -2341.49,
  y: 269.46,
  z: 169.47,
  heading: 295,
  models: [],
  id: 244
}, {
  x: -1878.8,
  y: 311.7,
  z: 89.02,
  heading: 9,
  models: [],
  id: 245
}, {
  x: -273.79,
  y: 726.38,
  z: 207.6,
  heading: 224,
  models: [],
  id: 246
}, {
  x: 706.27,
  y: 597.67,
  z: 128.91,
  heading: 164,
  models: [],
  id: 247
}, {
  x: 672.21,
  y: 622.22,
  z: 128.91,
  heading: 347,
  models: [],
  id: 248
}, {
  x: 587.85,
  y: 607.51,
  z: 128.91,
  heading: 340,
  models: [],
  id: 249
}, {
  x: 723.32,
  y: 656.63,
  z: 128.91,
  heading: 8,
  models: [],
  id: 250
}, {
  x: 953.52,
  y: -132.99,
  z: 74.45,
  heading: 238,
  models: [],
  id: 251
}, {
  x: 1101.44,
  y: -272.54,
  z: 69.37,
  heading: 325,
  models: [],
  id: 252
}, {
  x: 1134.96,
  y: -411.77,
  z: 67.05,
  heading: 95,
  models: [],
  id: 253
}, {
  x: 1109.32,
  y: -332.25,
  z: 67.11,
  heading: 207,
  models: [],
  id: 254
}, {
  x: 1097.63,
  y: -340.1,
  z: 67.22,
  heading: 34,
  models: [],
  id: 255
}, {
  x: 1253.1,
  y: -731.44,
  z: 62.7,
  heading: 312,
  models: [],
  id: 256
}, {
  x: 1133.41,
  y: -974.62,
  z: 46.56,
  heading: 278,
  models: [],
  id: 257
}, {
  x: 1239.03,
  y: -1098.3,
  z: 38.53,
  heading: 27,
  models: [],
  id: 258
}, {
  x: 1242.96,
  y: -1152.73,
  z: 37.66,
  heading: 199,
  models: [],
  id: 259
}, {
  x: 1208.93,
  y: -1257.79,
  z: 35.23,
  heading: 180,
  models: [],
  id: 260
}, {
  x: 1210.26,
  y: -1359.29,
  z: 35.23,
  heading: 82,
  models: [],
  id: 261
}, {
  x: 1137.17,
  y: -1405.36,
  z: 34.61,
  heading: 267,
  models: [],
  id: 262
}, {
  x: 1198.53,
  y: -1495.78,
  z: 34.69,
  heading: 178,
  models: [],
  id: 263
}, {
  x: 1219.28,
  y: -1524.2,
  z: 34.69,
  heading: 176,
  models: [],
  id: 264
}, {
  x: 1176.75,
  y: -1536.99,
  z: 39.4,
  heading: 359,
  models: [],
  id: 265
}, {
  x: 1168.63,
  y: -1563.32,
  z: 34.69,
  heading: 87,
  models: [],
  id: 266
}, {
  x: 1484.67,
  y: -1605.89,
  z: 71.89,
  heading: 229,
  models: [],
  id: 267
}, {
  x: 1565.9,
  y: -1682.23,
  z: 88.19,
  heading: 10,
  models: [],
  id: 268
}, {
  x: 1674.6,
  y: -1634.07,
  z: 112.35,
  heading: 342,
  models: [],
  id: 269
}, {
  x: 1807.47,
  y: -1284.56,
  z: 96.07,
  heading: 312,
  models: [],
  id: 270
}, {
  x: 1374.04,
  y: -731.14,
  z: 67.18,
  heading: 97,
  models: [],
  id: 271
}, {
  x: 716.25,
  y: -2128.67,
  z: 29.2,
  heading: 265,
  models: [],
  id: 272
}, {
  x: 718.25,
  y: -2255.58,
  z: 29.25,
  heading: 263,
  models: [],
  id: 273
}, {
  x: 775.18,
  y: -2384.41,
  z: 22.07,
  heading: 355,
  models: [],
  id: 274
}, {
  x: 861.54,
  y: -2118.86,
  z: 30.59,
  heading: 255,
  models: [],
  id: 275
}, {
  x: 820.75,
  y: -1978.09,
  z: 29.29,
  heading: 171,
  models: [],
  id: 276
}, {
  x: 736.63,
  y: -1911.97,
  z: 29.29,
  heading: 169,
  models: [],
  id: 277
}, {
  x: 725.31,
  y: -2033.72,
  z: 29.28,
  heading: 355,
  models: [],
  id: 278
}, {
  x: 808.29,
  y: -2027.94,
  z: 29.25,
  heading: 354,
  models: [],
  id: 279
}, {
  x: 896.67,
  y: -1732.53,
  z: 30.39,
  heading: 159,
  models: [],
  id: 280
}, {
  x: 715.58,
  y: -1815.59,
  z: 19.64,
  heading: 350,
  models: [],
  id: 281
}, {
  x: 569.5,
  y: -1792.16,
  z: 29.18,
  heading: 353,
  models: [],
  id: 282
}, {
  x: -1588,
  y: -1020.24,
  z: 7.49,
  heading: 51,
  models: [],
  id: 283
}, {
  x: -1940.57,
  y: 1775.93,
  z: 174.14,
  heading: 200,
  models: [],
  id: 284
}, {
  x: -1132.48,
  y: 2694.78,
  z: 18.8,
  heading: 130,
  models: [],
  id: 285
}, {
  x: 43.03,
  y: 2802.87,
  z: 57.88,
  heading: 142,
  models: [],
  id: 286
}, {
  x: 1220.89,
  y: 1872.13,
  z: 78.91,
  heading: 133,
  models: [],
  id: 287
}, {
  x: 1210.75,
  y: 1810.39,
  z: 78.37,
  heading: 207,
  models: [],
  id: 288
}, {
  x: 1137.62,
  y: 2663.44,
  z: 38,
  heading: 357,
  models: [],
  id: 289
}, {
  x: 1112.77,
  y: 2648.42,
  z: 38,
  heading: 180,
  models: [],
  id: 290
}, {
  x: 2344.42,
  y: 3141.39,
  z: 48.21,
  heading: 339,
  models: [],
  id: 291
}, {
  x: 2779.41,
  y: 2811.21,
  z: 41.57,
  heading: 301,
  models: [],
  id: 292
}, {
  x: 2928.46,
  y: 4321.82,
  z: 50.52,
  heading: 294,
  models: [],
  id: 293
}, {
  x: 2910.8,
  y: 4372.74,
  z: 50.4,
  heading: 117,
  models: [],
  id: 294
}, {
  x: 2543.63,
  y: 4664.43,
  z: 34.08,
  heading: 338,
  models: [],
  id: 295
}, {
  x: 2169.83,
  y: 4774.98,
  z: 41.25,
  heading: 349,
  models: [],
  id: 296
}, {
  x: 1944.96,
  y: 4622.84,
  z: 40.44,
  heading: 14,
  models: [],
  id: 297
}, {
  x: 1793.68,
  y: 4584.46,
  z: 37.13,
  heading: 5,
  models: [],
  id: 298
}, {
  x: 1334.69,
  y: 4377.26,
  z: 44.37,
  heading: 171,
  models: [],
  id: 299
}, {
  x: -951.14,
  y: 5427.08,
  z: 38.51,
  heading: 283,
  models: [],
  id: 300
}, {
  x: -759.26,
  y: 5547.19,
  z: 33.49,
  heading: 347,
  models: [],
  id: 301
}, {
  x: -698.37,
  y: 5811.5,
  z: 17.32,
  heading: 240,
  models: [],
  id: 302
}, {
  x: -679.65,
  y: 5824.59,
  z: 17.33,
  heading: 315,
  models: [],
  id: 303
}, {
  x: -218.81,
  y: 6532.52,
  z: 11.1,
  heading: 226,
  models: [],
  id: 304
}, {
  x: -18.73,
  y: 6273.88,
  z: 31.23,
  heading: 33,
  models: [],
  id: 305
}, {
  x: -393.02,
  y: 6082.06,
  z: 31.5,
  heading: 306,
  models: [],
  id: 306
}, {
  x: 34.92,
  y: -1757.24,
  z: 29.3,
  heading: 227,
  models: [],
  id: 307
}, {
  x: 451.21,
  y: -555.54,
  z: 28.5,
  heading: 271,
  models: [],
  id: 308
}, {
  x: 191.83,
  y: -1846.76,
  z: 27.2,
  heading: 317,
  models: [],
  id: 309
}, {
  x: 196.55,
  y: -1850.6,
  z: 27.2,
  heading: 319,
  models: [],
  id: 310
}, {
  x: 201.14,
  y: -1854.61,
  z: 27.2,
  heading: 318,
  models: [],
  id: 311
}, {
  x: 205.69,
  y: -1858.41,
  z: 27.19,
  heading: 318,
  models: [],
  id: 312
}, {
  x: 328.01,
  y: -2086.73,
  z: 17.9,
  heading: 325,
  models: [],
  id: 313
}, {
  x: 316.02,
  y: -2075.97,
  z: 18.04,
  heading: 319,
  models: [],
  id: 314
}, {
  x: 309.08,
  y: -2126.82,
  z: 15.11,
  heading: 46,
  models: [],
  id: 315
}, {
  x: 101.45,
  y: -2070.34,
  z: 17.64,
  heading: 181,
  models: [],
  id: 316
}, {
  x: 108.28,
  y: -2070.36,
  z: 17.65,
  heading: 180,
  models: [],
  id: 317
}, {
  x: 115.31,
  y: -2069.93,
  z: 17.65,
  heading: 182,
  models: [],
  id: 318
}, {
  x: 122.07,
  y: -2070.74,
  z: 17.55,
  heading: 177,
  models: [],
  id: 319
}, {
  x: -128.09,
  y: -2147.35,
  z: 16.7,
  heading: 199,
  models: [],
  id: 320
}, {
  x: -107.33,
  y: -2139.77,
  z: 16.7,
  heading: 199,
  models: [],
  id: 321
}, {
  x: -56.26,
  y: -2098.67,
  z: 16.7,
  heading: 199,
  models: [],
  id: 322
}, {
  x: -386.99,
  y: -2168.67,
  z: 10.32,
  heading: 267,
  models: [],
  id: 323
}, {
  x: -757.45,
  y: -2061.56,
  z: 8.9,
  heading: 133,
  models: [],
  id: 324
}, {
  x: -762.43,
  y: -2056.8,
  z: 8.9,
  heading: 135,
  models: [],
  id: 325
}, {
  x: -767.08,
  y: -2051.82,
  z: 8.9,
  heading: 133,
  models: [],
  id: 326
}, {
  x: -779.23,
  y: -2039.61,
  z: 8.88,
  heading: 133,
  models: [],
  id: 327
}, {
  x: -772.71,
  y: -2023.09,
  z: 8.88,
  heading: 36,
  models: [],
  id: 328
}, {
  x: -760.39,
  y: -2010.76,
  z: 8.88,
  heading: 47,
  models: [],
  id: 329
}, {
  x: -755.67,
  y: -2005.13,
  z: 8.88,
  heading: 53,
  models: [],
  id: 330
}, {
  x: -748.87,
  y: -1991.81,
  z: 8.88,
  heading: 71,
  models: [],
  id: 331
}, {
  x: -746.53,
  y: -1981.14,
  z: 8.87,
  heading: 79,
  models: [],
  id: 332
}, {
  x: -729.69,
  y: -1968.96,
  z: 8.87,
  heading: 282,
  models: [],
  id: 333
}, {
  x: -727.63,
  y: -1979.11,
  z: 8.87,
  heading: 286,
  models: [],
  id: 334
}, {
  x: -725.22,
  y: -1989.02,
  z: 8.87,
  heading: 280,
  models: [],
  id: 335
}, {
  x: -722.14,
  y: -2002.26,
  z: 8.87,
  heading: 282,
  models: [],
  id: 336
}, {
  x: -719.37,
  y: -2015.87,
  z: 8.88,
  heading: 289,
  models: [],
  id: 337
}, {
  x: -716.2,
  y: -2029.33,
  z: 8.89,
  heading: 284,
  models: [],
  id: 338
}, {
  x: -686.03,
  y: -2058.97,
  z: 8.87,
  heading: 184,
  models: [],
  id: 339
}, {
  x: -699.84,
  y: -2060.2,
  z: 8.87,
  heading: 186,
  models: [],
  id: 340
}, {
  x: 290,
  y: -326.46,
  z: 44.92,
  heading: 69,
  models: [],
  id: 341
}, {
  x: 295.28,
  y: -342.92,
  z: 44.92,
  heading: 251,
  models: [],
  id: 342
}, {
  x: 635.52,
  y: 286.03,
  z: 103.2,
  heading: 332,
  models: [],
  id: 343
}, {
  x: 106.47,
  y: 318.52,
  z: 112.11,
  heading: 162,
  models: [],
  id: 344
}, {
  x: -133.76,
  y: 400.93,
  z: 113.42,
  heading: 155,
  models: [],
  id: 345
}, {
  x: -1718.09,
  y: -900.62,
  z: 7.69,
  heading: 319,
  models: [],
  id: 346
}, {
  x: -1706.21,
  y: -910.59,
  z: 7.7,
  heading: 321,
  models: [],
  id: 347
}, {
  x: -1690.24,
  y: -924.85,
  z: 7.7,
  heading: 330,
  models: [],
  id: 348
}, {
  x: 171.39,
  y: -2945.07,
  z: 6,
  heading: 91,
  models: [],
  id: 349
}, {
  x: 120.95,
  y: -2859.75,
  z: 6,
  heading: 269,
  models: [],
  id: 350
}, {
  x: -1092.32,
  y: -1944.77,
  z: 13.08,
  heading: 149,
  models: [],
  id: 351
}, {
  x: -201.81,
  y: 281.78,
  z: 92.54,
  heading: 161,
  models: [],
  id: 352
}, {
  x: 1156.09,
  y: -285.8,
  z: 68.85,
  heading: 187,
  models: [],
  id: 353
}, {
  x: 1242.04,
  y: -334.47,
  z: 69.08,
  heading: 352,
  models: [],
  id: 354
}, {
  x: 1265.28,
  y: -340.14,
  z: 69.08,
  heading: 289,
  models: [],
  id: 355
}, {
  x: 1272.89,
  y: -358,
  z: 69.07,
  heading: 292,
  models: [],
  id: 356
}, {
  x: 1216.32,
  y: -1072.12,
  z: 39.39,
  heading: 302,
  models: [],
  id: 357
}, {
  x: 1200.89,
  y: -1058.9,
  z: 41.04,
  heading: 300,
  models: [],
  id: 358
}, {
  x: -50.93,
  y: -2019.1,
  z: 18.02,
  heading: 208,
  models: [],
  id: 359
}, {
  x: -12.84,
  y: -1747.54,
  z: 29.3,
  heading: 227,
  models: [],
  id: 360
}, {
  x: 3.73,
  y: -1741.53,
  z: 29.31,
  heading: 47,
  models: [],
  id: 361
}, {
  x: 896.4,
  y: -3186.63,
  z: 5.9,
  heading: 183,
  models: [],
  id: 362
}, {
  x: 533.4,
  y: -1756.79,
  z: 29.04,
  heading: 330,
  models: [],
  id: 363
}, {
  x: 529.67,
  y: -1765.71,
  z: 28.69,
  heading: 197,
  models: [],
  id: 364
}, {
  x: 515.15,
  y: -1764.51,
  z: 28.65,
  heading: 198,
  models: [],
  id: 365
}, {
  x: -896.09,
  y: -2592.2,
  z: 13.83,
  heading: 151,
  models: [],
  id: 366
}, {
  x: 498.78,
  y: -582.38,
  z: 24.75,
  heading: 81,
  models: [],
  id: 367
}, {
  x: 928.34,
  y: -1775.91,
  z: 31.09,
  heading: 261,
  models: [],
  id: 368
}, {
  x: 12.55,
  y: -1519.81,
  z: 29.45,
  heading: 340,
  models: [],
  id: 369
}, {
  x: 365.05,
  y: -1666.94,
  z: 32.54,
  heading: 231,
  models: [],
  id: 370
}, {
  x: 253.73,
  y: -2571.52,
  z: 5.7,
  heading: 202,
  models: [],
  id: 371
}, {
  x: 260.79,
  y: -2567.82,
  z: 5.7,
  heading: 206,
  models: [],
  id: 372
}, {
  x: 273.2,
  y: -2562.67,
  z: 5.7,
  heading: 200,
  models: [],
  id: 373
}, {
  x: 283.2,
  y: -2565.4,
  z: 5.7,
  heading: 23,
  models: [],
  id: 374
}, {
  x: 293.47,
  y: -2562.05,
  z: 5.7,
  heading: 16,
  models: [],
  id: 375
}, {
  x: 746.65,
  y: -1824.19,
  z: 29.29,
  heading: 17,
  models: [],
  id: 376
}, {
  x: 1106.24,
  y: 253.81,
  z: 80.86,
  heading: 237,
  models: [],
  id: 377
}, {
  x: 1111.11,
  y: 261.94,
  z: 80.86,
  heading: 237,
  models: [],
  id: 378
}, {
  x: 1116.5,
  y: 254.99,
  z: 80.86,
  heading: 60,
  models: [],
  id: 379
}, {
  x: 1328.03,
  y: -735.89,
  z: 66.16,
  heading: 253,
  models: [],
  id: 380
}, {
  x: -213.01,
  y: 302.26,
  z: 96.99,
  heading: 179,
  models: [],
  id: 381
}, {
  x: -212.85,
  y: 313.5,
  z: 96.95,
  heading: 4,
  models: [],
  id: 382
}, {
  x: -205.72,
  y: 314.17,
  z: 96.95,
  heading: 358,
  models: [],
  id: 383
}, {
  x: -202.23,
  y: 302.34,
  z: 96.95,
  heading: 179,
  models: [],
  id: 384
}, {
  x: -2063.81,
  y: -452.85,
  z: 11.61,
  heading: 138,
  models: [],
  id: 385
}, {
  x: -2020.2,
  y: -476.61,
  z: 11.39,
  heading: 317,
  models: [],
  id: 386
}, {
  x: -2008.41,
  y: -486.66,
  z: 11.39,
  heading: 319,
  models: [],
  id: 387
}, {
  x: -2182.79,
  y: -420.59,
  z: 13.13,
  heading: 173,
  models: [],
  id: 388
}, {
  x: -2137.21,
  y: -396.58,
  z: 13.23,
  heading: 229,
  models: [],
  id: 389
}, {
  x: -2145.19,
  y: -405.83,
  z: 13.32,
  heading: 223,
  models: [],
  id: 390
}, {
  x: -2963.87,
  y: 58.98,
  z: 11.61,
  heading: 149,
  models: [],
  id: 391
}, {
  x: -2975.6,
  y: 66.27,
  z: 11.61,
  heading: 150,
  models: [],
  id: 392
}, {
  x: -2984.5,
  y: 71.77,
  z: 11.61,
  heading: 145,
  models: [],
  id: 393
}, {
  x: -2999.89,
  y: 94.87,
  z: 11.61,
  heading: 313,
  models: [],
  id: 394
}, {
  x: -2991.61,
  y: 88.04,
  z: 11.59,
  heading: 327,
  models: [],
  id: 395
}, {
  x: -2979.21,
  y: 80.46,
  z: 11.53,
  heading: 331,
  models: [],
  id: 396
}, {
  x: -3047.8,
  y: 169.3,
  z: 11.61,
  heading: 286,
  models: [],
  id: 397
}, {
  x: -3044.01,
  y: 158.36,
  z: 11.61,
  heading: 295,
  models: [],
  id: 398
}, {
  x: -3039.37,
  y: 148.8,
  z: 11.61,
  heading: 294,
  models: [],
  id: 399
}, {
  x: -3047.06,
  y: 115.15,
  z: 11.57,
  heading: 135,
  models: [],
  id: 400
}, {
  x: -400.11,
  y: 199.44,
  z: 83.04,
  heading: 356,
  models: [],
  id: 401
}, {
  x: -354.54,
  y: -1498.23,
  z: 30.24,
  heading: 88,
  models: [],
  id: 402
}, {
  x: -241.34,
  y: -1707.04,
  z: 33.56,
  heading: 210,
  models: [],
  id: 403
}, {
  x: 1191.74,
  y: -1569.47,
  z: 39.4,
  heading: 179,
  models: [],
  id: 404
}, {
  x: 1177.94,
  y: -1569.68,
  z: 39.4,
  heading: 182,
  models: [],
  id: 405
}, {
  x: 1175.13,
  y: -1555.99,
  z: 39.4,
  heading: 0,
  models: [],
  id: 406
}, {
  x: 1185.67,
  y: -1556.1,
  z: 39.4,
  heading: 0,
  models: [],
  id: 407
}, {
  x: 335.47,
  y: -1162.81,
  z: 29.29,
  heading: 271,
  models: [],
  id: 408
}, {
  x: -976.55,
  y: -1959.22,
  z: 13.19,
  heading: 135,
  models: [],
  id: 409
}, {
  x: -959.17,
  y: -1955.08,
  z: 13.19,
  heading: 316,
  models: [],
  id: 410
}, {
  x: -565.16,
  y: -2339.36,
  z: 13.83,
  heading: 316,
  models: [],
  id: 411
}, {
  x: -573.01,
  y: -2332.67,
  z: 13.83,
  heading: 319,
  models: [],
  id: 412
}, {
  x: -583.4,
  y: -2323.76,
  z: 13.83,
  heading: 318,
  models: [],
  id: 413
}, {
  x: -591.12,
  y: -2316.82,
  z: 13.83,
  heading: 318,
  models: [],
  id: 414
}, {
  x: -601.59,
  y: -2307.82,
  z: 13.83,
  heading: 317,
  models: [],
  id: 415
}, {
  x: -611.74,
  y: -2298.86,
  z: 13.83,
  heading: 318,
  models: [],
  id: 416
}, {
  x: -1532.54,
  y: -983.83,
  z: 13.02,
  heading: 321,
  models: [],
  id: 417
}, {
  x: -1540.61,
  y: -976.89,
  z: 13.02,
  heading: 320,
  models: [],
  id: 418
}, {
  x: -617.46,
  y: -916.72,
  z: 23.67,
  heading: 293,
  models: [],
  id: 419
}, {
  x: 2134.6,
  y: 1915.52,
  z: 94.01,
  heading: 97,
  models: [],
  id: 420
}, {
  x: 2016.37,
  y: 1839.66,
  z: 95.12,
  heading: 13,
  models: [],
  id: 421
}, {
  x: 1876.12,
  y: 2535.86,
  z: 45.67,
  heading: 270,
  models: [],
  id: 422
}, {
  x: 1870.78,
  y: 2591.92,
  z: 45.67,
  heading: 89,
  models: [],
  id: 423
}, {
  x: 1876.54,
  y: 2622.05,
  z: 45.67,
  heading: 270,
  models: [],
  id: 424
}, {
  x: 1869.1,
  y: 2674.61,
  z: 45.67,
  heading: 264,
  models: [],
  id: 425
}, {
  x: 1855.7,
  y: 2620.57,
  z: 45.67,
  heading: 84,
  models: [],
  id: 426
}, {
  x: 1523.11,
  y: 1723.7,
  z: 109.92,
  heading: 42,
  models: [],
  id: 427
}, {
  x: 1528.97,
  y: 780.64,
  z: 77.44,
  heading: 216,
  models: [],
  id: 428
}, {
  x: 1515.51,
  y: 773.31,
  z: 77.44,
  heading: 197,
  models: [],
  id: 429
}, {
  x: 1526.2,
  y: 793.82,
  z: 77.45,
  heading: 66,
  models: [],
  id: 430
}, {
  x: 201.37,
  y: 1218.25,
  z: 225.46,
  heading: 284,
  models: [],
  id: 431
}, {
  x: 196.17,
  y: 1238.39,
  z: 225.46,
  heading: 277,
  models: [],
  id: 432
}, {
  x: 218.9,
  y: 1257.18,
  z: 225.46,
  heading: 193,
  models: [],
  id: 433
}, {
  x: 236.66,
  y: 1145.2,
  z: 225.47,
  heading: 103,
  models: [],
  id: 434
}, {
  x: 271.91,
  y: 1181,
  z: 225.34,
  heading: 306,
  models: [],
  id: 435
}, {
  x: 260.67,
  y: 1261.95,
  z: 232.87,
  heading: 295,
  models: [],
  id: 436
}, {
  x: -68.48,
  y: 894.48,
  z: 235.54,
  heading: 293,
  models: [],
  id: 437
}, {
  x: 178.12,
  y: 393.42,
  z: 109.04,
  heading: 351,
  models: [],
  id: 438
}, {
  x: 190.16,
  y: 380.06,
  z: 108.28,
  heading: 192,
  models: [],
  id: 439
}, {
  x: 209.3,
  y: 376.06,
  z: 107.02,
  heading: 193,
  models: [],
  id: 440
}, {
  x: 204.71,
  y: 340.17,
  z: 105.63,
  heading: 342,
  models: [],
  id: 441
}, {
  x: 270.46,
  y: 315.86,
  z: 105.53,
  heading: 341,
  models: [],
  id: 442
}, {
  x: 316.17,
  y: 344.67,
  z: 105.2,
  heading: 344,
  models: [],
  id: 443
}, {
  x: 334.82,
  y: 340.42,
  z: 105.2,
  heading: 345,
  models: [],
  id: 444
}, {
  x: 349.65,
  y: 349.6,
  z: 105.09,
  heading: 253,
  models: [],
  id: 445
}, {
  x: 363.19,
  y: 293.1,
  z: 103.47,
  heading: 69,
  models: [],
  id: 446
}, {
  x: 364.41,
  y: 271.46,
  z: 103.09,
  heading: 160,
  models: [],
  id: 447
}, {
  x: 375.65,
  y: 273.52,
  z: 103.07,
  heading: 356,
  models: [],
  id: 448
}, {
  x: 391.53,
  y: 281.04,
  z: 102.99,
  heading: 250,
  models: [],
  id: 449
}, {
  x: 429.81,
  y: 259.98,
  z: 103.21,
  heading: 70,
  models: [],
  id: 450
}, {
  x: 458.42,
  y: 261.11,
  z: 103.2,
  heading: 69,
  models: [],
  id: 451
}, {
  x: 463.11,
  y: 227.33,
  z: 103.19,
  heading: 249,
  models: [],
  id: 452
}, {
  x: -356.72,
  y: -423.58,
  z: 29.04,
  heading: 352,
  models: [],
  id: 453
}, {
  x: -726.98,
  y: -404.96,
  z: 35.04,
  heading: 270,
  models: [],
  id: 454
}, {
  x: -726.54,
  y: -415.75,
  z: 35.03,
  heading: 267,
  models: [],
  id: 455
}, {
  x: -953.41,
  y: -504.29,
  z: 36.81,
  heading: 270,
  models: [],
  id: 456
}, {
  x: -1130.23,
  y: -755.63,
  z: 19.29,
  heading: 286,
  models: [],
  id: 457
}, {
  x: -1139.46,
  y: -743.58,
  z: 19.88,
  heading: 105,
  models: [],
  id: 458
}, {
  x: -1141.53,
  y: -751.63,
  z: 19.34,
  heading: 285,
  models: [],
  id: 459
}, {
  x: -1112.72,
  y: -854.52,
  z: 13.52,
  heading: 218,
  models: [],
  id: 460
}, {
  x: -934.43,
  y: -1302.35,
  z: 5.02,
  heading: 200,
  models: [],
  id: 461
}, {
  x: -925.55,
  y: -1299.46,
  z: 5.02,
  heading: 19,
  models: [],
  id: 462
}, {
  x: -904.99,
  y: -1292.42,
  z: 5.01,
  heading: 201,
  models: [],
  id: 463
}, {
  x: -824.86,
  y: -1195.6,
  z: 6.72,
  heading: 321,
  models: [],
  id: 464
}, {
  x: -817.36,
  y: -1201.65,
  z: 6.93,
  heading: 318,
  models: [],
  id: 465
}, {
  x: -863.92,
  y: -1217.74,
  z: 5.83,
  heading: 298,
  models: [],
  id: 466
}, {
  x: -863.92,
  y: -1217.74,
  z: 5.83,
  heading: 298,
  models: [],
  id: 466
}, {
  x: -859.3,
  y: -1118.76,
  z: 7.06,
  heading: 119,
  models: [],
  id: 467
}, {
  x: -836.31,
  y: -1112.07,
  z: 9.05,
  heading: 209,
  models: [],
  id: 468
}, {
  x: -738.03,
  y: -1033.22,
  z: 12.73,
  heading: 297,
  models: [],
  id: 469
}, {
  x: -767.07,
  y: -1068.44,
  z: 11.89,
  heading: 29,
  models: [],
  id: 470
}, {
  x: -761.73,
  y: -1022.26,
  z: 13.15,
  heading: 115,
  models: [],
  id: 471
}, {
  x: -752.17,
  y: -1003.77,
  z: 11.93,
  heading: 26,
  models: [],
  id: 472
}, {
  x: -759.3,
  y: -905.73,
  z: 19.74,
  heading: 89,
  models: [],
  id: 473
}, {
  x: -759.51,
  y: -894.56,
  z: 20.46,
  heading: 87,
  models: [],
  id: 474
}, {
  x: -607.95,
  y: -875.75,
  z: 25.29,
  heading: 49,
  models: [],
  id: 475
}, {
  x: -612.28,
  y: -880.72,
  z: 25.16,
  heading: 55,
  models: [],
  id: 476
}, {
  x: -575.9,
  y: -878.67,
  z: 25.7,
  heading: 357,
  models: [],
  id: 477
}, {
  x: -299.91,
  y: -619.25,
  z: 33.41,
  heading: 126,
  models: [],
  id: 478
}, {
  x: -650.92,
  y: -435.29,
  z: 34.57,
  heading: 297,
  models: [],
  id: 479
}, {
  x: -571.52,
  y: -446.5,
  z: 34.14,
  heading: 95,
  models: [],
  id: 480
}, {
  x: -652.63,
  y: -607.11,
  z: 33.22,
  heading: 175,
  models: [],
  id: 481
}, {
  x: -960.23,
  y: -661.44,
  z: 25.06,
  heading: 118,
  models: [],
  id: 482
}, {
  x: -934.06,
  y: -674.13,
  z: 26.48,
  heading: 280,
  models: [],
  id: 483
}, {
  x: -989.19,
  y: -772.73,
  z: 16.09,
  heading: 179,
  models: [],
  id: 484
}, {
  x: -832.82,
  y: -955.92,
  z: 15.53,
  heading: 106,
  models: [],
  id: 485
}, {
  x: 20.54,
  y: 129.82,
  z: 87.05,
  heading: 71,
  models: [],
  id: 486
}, {
  x: 33.29,
  y: 91.88,
  z: 79.02,
  heading: 242,
  models: [],
  id: 487
}, {
  x: -1146.3,
  y: -516.37,
  z: 33.15,
  heading: 208,
  models: [],
  id: 488
}, {
  x: -1162.1,
  y: -553.01,
  z: 29.8,
  heading: 47,
  models: [],
  id: 489
}, {
  x: -1186.95,
  y: -543.15,
  z: 28.75,
  heading: 215,
  models: [],
  id: 490
}];
},{}],"cBiX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GANGWAR_ZONE_MONEY = exports.GANGWAR_ZONES = exports.GANGWAR_RADIUS = exports.GANGWAR_MINUTES = exports.GANGWAR_EXIT_TIMEOUT_MINUTES = void 0;
const GANGWAR_RADIUS = exports.GANGWAR_RADIUS = 38;
const GANGWAR_ZONE_MONEY = exports.GANGWAR_ZONE_MONEY = 350;
const GANGWAR_MINUTES = exports.GANGWAR_MINUTES = 12;
const GANGWAR_EXIT_TIMEOUT_MINUTES = exports.GANGWAR_EXIT_TIMEOUT_MINUTES = 2;
const GANGWAR_ZONES = exports.GANGWAR_ZONES = [{
  id: 1,
  x: -442.98,
  y: -1717.79,
  z: 18.66,
  default: 21,
  spawn: true
}, {
  id: 2,
  x: -366.98,
  y: -1717.79,
  z: 18.66,
  default: 21
}, {
  id: 3,
  x: -290.98,
  y: -1717.79,
  z: 18.66,
  default: 21
}, {
  id: 4,
  x: -290.98,
  y: -1641.79,
  z: 18.66,
  default: 21
}, {
  id: 5,
  x: -290.98,
  y: -1565.79,
  z: 18.66,
  default: 21
}, {
  id: 6,
  x: -214.98,
  y: -1565.79,
  z: 18.66,
  default: 21
}, {
  id: 7,
  x: -214.98,
  y: -1641.79,
  z: 18.66,
  default: 21
}, {
  id: 8,
  x: -214.98,
  y: -1717.79,
  z: 18.66,
  default: 21
}, {
  id: 9,
  x: -138.98,
  y: -1717.79,
  z: 18.66,
  default: 21
}, {
  id: 10,
  x: -138.98,
  y: -1641.79,
  z: 18.66,
  default: 21
}, {
  id: 11,
  x: -138.98,
  y: -1565.79,
  z: 18.66,
  default: 21
}, {
  id: 12,
  x: -62.98,
  y: -1565.79,
  z: 18.66,
  default: 21
}, {
  id: 13,
  x: -62.98,
  y: -1641.79,
  z: 18.66,
  default: 21
}, {
  id: 14,
  x: -62.98,
  y: -1489.79,
  z: 18.66,
  default: 21
}, {
  id: 15,
  x: 13.98,
  y: -1717.79,
  z: 18.66,
  default: 21
}, {
  id: 16,
  x: 13.98,
  y: -1641.79,
  z: 18.66,
  default: 21
}, {
  id: 17,
  x: 13.98,
  y: -1565.79,
  z: 18.66,
  default: 21
}, {
  id: 18,
  x: 13.98,
  y: -1489.79,
  z: 18.66,
  default: 21
}, {
  id: 19,
  x: -62.98,
  y: -1717.79,
  z: 18.66,
  default: 21
}, {
  id: 20,
  x: 89.98,
  y: -1489.79,
  z: 18.66,
  default: 21
}, {
  id: 21,
  x: -62.98,
  y: -1793.79,
  z: 18.66,
  default: 19
}, {
  id: 22,
  x: 13.98,
  y: -1793.79,
  z: 18.66,
  default: 19
}, {
  id: 23,
  x: 13.98,
  y: -1869.79,
  z: 18.66,
  default: 19
}, {
  id: 24,
  x: 89.98,
  y: -1869.79,
  z: 18.66,
  default: 19
}, {
  id: 25,
  x: 89.98,
  y: -1945.79,
  z: 18.66,
  default: 19,
  spawn: true
}, {
  id: 26,
  x: 165.98,
  y: -1869.79,
  z: 18.66,
  default: 19
}, {
  id: 27,
  x: 165.98,
  y: -1793.79,
  z: 18.66,
  default: 19
}, {
  id: 28,
  x: 89.98,
  y: -1793.79,
  z: 18.66,
  default: 19
}, {
  id: 29,
  x: 241.98,
  y: -1793.79,
  z: 18.66,
  default: 19
}, {
  id: 30,
  x: 241.98,
  y: -1869.79,
  z: 18.66,
  default: 19
}, {
  id: 31,
  x: 241.98,
  y: -1945.79,
  z: 18.66,
  default: 19
}, {
  id: 32,
  x: 317.98,
  y: -1793.79,
  z: 18.66,
  default: 19
}, {
  id: 33,
  x: 89.98,
  y: -1717.79,
  z: 18.66,
  default: 19
}, {
  id: 34,
  x: 165.98,
  y: -1717.79,
  z: 18.66,
  default: 19
}, {
  id: 35,
  x: 241.98,
  y: -1717.79,
  z: 18.66,
  default: 19
}, {
  id: 36,
  x: 89.98,
  y: -1641.79,
  z: 18.66,
  default: 19
}, {
  id: 37,
  x: 317.98,
  y: -1717.79,
  z: 18.66,
  default: 19
}, {
  id: 38,
  x: 165.98,
  y: -2021.79,
  z: 18.66,
  default: 19
}, {
  id: 39,
  x: 241.98,
  y: -2021.79,
  z: 18.66,
  default: 19
}, {
  id: 40,
  x: 165.98,
  y: -1945.79,
  z: 18.66,
  default: 19
}, {
  id: 41,
  x: 165.98,
  y: -1489.79,
  z: 18.66,
  default: 20
}, {
  id: 42,
  x: 241.98,
  y: -1489.79,
  z: 18.66,
  default: 20
}, {
  id: 43,
  x: 317.98,
  y: -1489.79,
  z: 18.66,
  default: 20
}, {
  id: 44,
  x: 393.98,
  y: -1489.79,
  z: 18.66,
  default: 20
}, {
  id: 45,
  x: 469.98,
  y: -1489.79,
  z: 18.66,
  default: 20
}, {
  id: 46,
  x: 469.98,
  y: -1413.79,
  z: 18.66,
  default: 20
}, {
  id: 47,
  x: 393.98,
  y: -1413.79,
  z: 18.66,
  default: 20
}, {
  id: 48,
  x: 317.98,
  y: -1413.79,
  z: 18.66,
  default: 20
}, {
  id: 49,
  x: 241.98,
  y: -1413.79,
  z: 18.66,
  default: 20
}, {
  id: 50,
  x: 89.98,
  y: -1565.79,
  z: 18.66,
  default: 20
}, {
  id: 51,
  x: 165.98,
  y: -1641.79,
  z: 18.66,
  default: 20
}, {
  id: 52,
  x: 165.98,
  y: -1565.79,
  z: 18.66,
  default: 20
}, {
  id: 53,
  x: 241.98,
  y: -1565.79,
  z: 18.66,
  default: 20
}, {
  id: 54,
  x: 241.98,
  y: -1641.79,
  z: 18.66,
  default: 20
}, {
  id: 55,
  x: 317.98,
  y: -1641.79,
  z: 18.66,
  default: 20
}, {
  id: 56,
  x: 317.98,
  y: -1565.79,
  z: 18.66,
  default: 20
}, {
  id: 57,
  x: 393.98,
  y: -1641.79,
  z: 18.66,
  default: 20
}, {
  id: 58,
  x: 393.98,
  y: -1565.79,
  z: 18.66,
  default: 20
}, {
  id: 59,
  x: 469.98,
  y: -1565.79,
  z: 18.66,
  default: 20
}, {
  id: 60,
  x: 469.98,
  y: -1337.79,
  z: 18.66,
  default: 20,
  spawn: true
}, {
  id: 61,
  x: 892.49,
  y: -2173.03,
  z: 35.69,
  default: 18,
  spawn: true
}, {
  id: 62,
  x: 816.49,
  y: -2173.03,
  z: 35.69,
  default: 18
}, {
  id: 63,
  x: 740.49,
  y: -2173.03,
  z: 35.69,
  default: 18
}, {
  id: 64,
  x: 740.49,
  y: -2097.03,
  z: 35.69,
  default: 18
}, {
  id: 65,
  x: 816.49,
  y: -2097.03,
  z: 35.69,
  default: 18
}, {
  id: 66,
  x: 892.49,
  y: -2097.03,
  z: 35.69,
  default: 18
}, {
  id: 67,
  x: 892.49,
  y: -2021.03,
  z: 35.69,
  default: 18
}, {
  id: 68,
  x: 816.49,
  y: -2021.03,
  z: 35.69,
  default: 18
}, {
  id: 69,
  x: 816.49,
  y: -1945.03,
  z: 35.69,
  default: 18
}, {
  id: 70,
  x: 892.49,
  y: -1945.03,
  z: 35.69,
  default: 18
}, {
  id: 71,
  x: 892.49,
  y: -1869.03,
  z: 35.69,
  default: 18
}, {
  id: 72,
  x: 816.49,
  y: -1869.03,
  z: 35.69,
  default: 18
}, {
  id: 73,
  x: 968.49,
  y: -1869.03,
  z: 35.69,
  default: 18
}, {
  id: 74,
  x: 968.49,
  y: -1793.03,
  z: 35.69,
  default: 18
}, {
  id: 75,
  x: 968.49,
  y: -1717.03,
  z: 35.69,
  default: 18
}, {
  id: 76,
  x: 816.49,
  y: -1717.03,
  z: 35.69,
  default: 18
}, {
  id: 77,
  x: 816.49,
  y: -1793.03,
  z: 35.69,
  default: 18
}, {
  id: 78,
  x: 892.49,
  y: -1717.03,
  z: 35.69,
  default: 18
}, {
  id: 79,
  x: 892.49,
  y: -1793.03,
  z: 35.69,
  default: 18
}, {
  id: 80,
  x: 968.49,
  y: -1945.03,
  z: 35.69,
  default: 18
}, {
  id: 81,
  x: 317.98,
  y: -1945.79,
  z: 18.66,
  default: 22
}, {
  id: 82,
  x: 317.98,
  y: -1869.79,
  z: 18.66,
  default: 22
}, {
  id: 83,
  x: 393.98,
  y: -1793.79,
  z: 18.66,
  default: 22
}, {
  id: 84,
  x: 393.98,
  y: -1869.79,
  z: 18.66,
  default: 22
}, {
  id: 85,
  x: 393.98,
  y: -1945.79,
  z: 18.66,
  default: 22
}, {
  id: 86,
  x: 469.98,
  y: -1945.79,
  z: 18.66,
  default: 22
}, {
  id: 87,
  x: 469.98,
  y: -1869.79,
  z: 18.66,
  default: 22
}, {
  id: 88,
  x: 469.98,
  y: -1793.79,
  z: 18.66,
  default: 22
}, {
  id: 89,
  x: 545.98,
  y: -1793.79,
  z: 18.66,
  default: 22
}, {
  id: 90,
  x: 545.98,
  y: -1869.79,
  z: 18.66,
  default: 22
}, {
  id: 91,
  x: 545.98,
  y: -1945.79,
  z: 18.66,
  default: 22,
  spawn: true
}, {
  id: 92,
  x: 393.98,
  y: -1717.79,
  z: 18.66,
  default: 22
}, {
  id: 93,
  x: 469.98,
  y: -1641.79,
  z: 18.66,
  default: 22
}, {
  id: 94,
  x: 469.98,
  y: -1717.79,
  z: 18.66,
  default: 22
}, {
  id: 95,
  x: 545.98,
  y: -1717.79,
  z: 18.66,
  default: 22
}, {
  id: 96,
  x: 545.98,
  y: -1641.79,
  z: 18.66,
  default: 22
}, {
  id: 97,
  x: 545.98,
  y: -1565.79,
  z: 35.69,
  default: 22
}, {
  id: 98,
  x: 317.98,
  y: -2021.79,
  z: 18.66,
  default: 22
}, {
  id: 99,
  x: 393.98,
  y: -2021.79,
  z: 18.66,
  default: 22
}, {
  id: 100,
  x: 469.98,
  y: -2021.79,
  z: 18.66,
  default: 22
}];
},{}],"JP2j":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _menu = require("./menu");
var _user = require("./user");
var _cameraManager = require("./cameraManager");
var _gui = require("./gui");
let point1;
let rot1;
let point2;
let rot2;
let fov = 70;
class SplineCameraGUI {
  static createMenu() {
    let menu = new _menu.MenuClass('Сплайн камера');
    menu.exitProtect = true;
    menu.newItem({
      name: 'Установить точку 1',
      desc: 'Используется положение и поворот персонажа',
      onpress: () => {
        point1 = mp.players.local.position;
        rot1 = mp.game.cam.getGameplayCamRot(0);
      }
    });
    menu.newItem({
      name: 'Установить точку 2',
      desc: 'Используется положение и поворот персонажа',
      onpress: () => {
        point2 = mp.players.local.position;
        rot2 = mp.game.cam.getGameplayCamRot(0);
      }
    });
    menu.newItem({
      name: 'FOV',
      desc: 'Поле зрения камеры (70 по умолч.)',
      onpress: () => {
        (0, _menu.DialogInput)('Введите значени Field of View', 0, 1000, 'int').then(val => {
          if (!val || isNaN(val) || val <= 0) return;
          fov = val;
        });
      }
    });
    menu.newItem({
      name: 'Запустить пролет',
      desc: 'Запустить пролет от точки1 до точки2',
      onpress: () => {
        _menu.MenuClass.closeMenu();
        (0, _menu.DialogInput)('Введите время перехода в мс', 0, 1000000, 'int').then(val => {
          if (!val || isNaN(val) || val <= 0) return;
          (0, _cameraManager.drawCamera)(point1, rot1, point2, rot2, fov, val);
          (0, _gui.hideHud)(true);
        });
      }
    });
    menu.open();
  }
}
exports.default = SplineCameraGUI;
class SplineCamera {
  constructor() {
    this._currentNodeIndex = 0;
    this._cameraIndex = mp.game.cam.createCam('DEFAULT_SPLINE_CAMERA', false);
  }
  addNode(position, rotation) {
    mp.game.cam.addCamSplineNode(this._cameraIndex, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 100, 100, 1);
  }
  startTransitionToNextNode(transitionTime, waitTime = 0) {
    if (!this._isActive) {
      mp.game.cam.renderScriptCams(true, false, 0, false, false);
      this._isActive = true;
    }
    _user.user.notify('index ' + mp.game.cam.getCamSplineNodePhase(this._cameraIndex));
    _user.user.notify('index2 ' + this._currentNodeIndex);
    mp.game.cam.setCamSplineDuration(this._cameraIndex, transitionTime);
    mp.game.cam.setCamSplinePhase(this._cameraIndex, this._currentNodeIndex++);
  }
  destroy() {
    mp.game.cam.renderScriptCams(false, false, 0, false, true);
  }
}
let cam = new SplineCamera();
},{"./menu":"Aiz7","./user":"ggMw","./cameraManager":"mcyQ","./gui":"bk91"}],"s4Xg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.noClipSwitch = exports.noClip = exports.isNoClipEnable = exports.inSpectatorMode = exports.getNoClipSpeedName = exports.debug = exports.adminDataDrawVehicles = exports.adminDataDrawRange = exports.adminDataDrawPlayers = void 0;
var _controls = require("./controls");
var _menu = require("./menu");
var _custom = require("./custom.event");
var _user = require("./user");
var _inventory = require("../../shared/inventory");
var _gui = require("./gui");
var _system = require("./system");
var _vehicles = require("./vehicles");
var _inventory2 = require("./inventory");
var _npcPark = require("../../shared/npc.park.zone");
var _cameraWaypoints = require("../../shared/cameraWaypoints");
var _cameraManager = require("./cameraManager");
var _accept = require("./accept");
var _gangwar = require("../../shared/gangwar");
var _attach = require("../../shared/attach.system");
var _cloth = require("./cloth");
var _splineCamera = _interopRequireDefault(require("./splineCamera"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const player = mp.players.local;
_custom.CustomEvent.register('admin', () => {
  adminMenu();
});
let inSp;
let inSpId;
let spError = false;
const inSpectatorMode = () => {
  return inSp;
};
exports.inSpectatorMode = inSpectatorMode;
let currentQuickAdmin = false;
mp.keys.bind(48, true, () => {
  if (!_user.user.isAdminNow()) return;
  if (_gui.gui.currentGui) return;
  if (_gui.inputOnFocus) return;
  currentQuickAdmin = !currentQuickAdmin;
  (0, _controls.tempCursorStatus)(currentQuickAdmin);
  sendAdminPanelData();
});
mp.keys.bind(113, true, () => {
  if (!_user.user.isAdminNow()) return;
  if (_gui.gui.currentGui) return;
  if (_gui.inputOnFocus) return;
  _custom.CustomEvent.triggerServer('mainmenu:open', true);
  setTimeout(() => {
    _custom.CustomEvent.triggerCef('ticket:selectFirstFree', true);
  }, 500);
});
setInterval(() => {
  if (!_user.user.isAdminNow()) return;
  if (!currentQuickAdmin) return;
  sendAdminPanelData();
}, 10000);
const sendAdminPanelData = id => {
  _custom.CustomEvent.triggerCef('admin:panel:show', currentQuickAdmin, currentQuickAdmin ? _system.system.sortArrayObjects(mp.players.toArray().filter(player => player.getVariable('id')).map(q => {
    return {
      id: q.getVariable('id'),
      name: q.getVariable('name'),
      dist: _system.system.distanceToPos(mp.players.local.position, q.position)
    };
  }), [{
    id: 'dist',
    type: 'ASC'
  }]).map(player => {
    return [player.id, player.name];
  }) : [], id);
};
mp.events.addDataHandler("admin:freeze", async (target, val) => {
  if (target.type !== "player") return;
  target.freezePosition(val);
});
mp.events.add('entityStreamIn', async target => {
  if (target.type !== "player") return;
  if (!target.getVariable('admin:freeze')) return;
  target.freezePosition(true);
});
mp.events.add('render', () => {
  if (player.getVariable('admin:freeze')) _controls.disableControlGroup.allControls();
});
_custom.CustomEvent.registerServer('admin:sp', (pos, remoteId, id) => {
  const target = mp.players.atRemoteId(remoteId);
  if (!target && !target.handle) return _user.user.notify("Вы не можете за ним наблюдать", 'error');
  inSp = target;
  inSpId = id;
  spError = true;
  currentQuickAdmin = true;
  (0, _controls.tempCursorStatus)(true);
  sendAdminPanelData(id);
  player.setCoords(pos[0], pos[1], pos[2], true, true, true, true);
  setTimeout(() => {
    spError = false;
  }, 5000);
});
mp.events.add('admin:spectate:stop', (returnMe, tpHim, id) => {
  _custom.CustomEvent.triggerServer('admin:spectate:stop', returnMe, tpHim, id);
  stop();
});
const stop = () => {
  inSp = null;
  inSpId = null;
  spError = true;
  _custom.CustomEvent.triggerCef('admin:spectate:stop');
  _user.user.notify('Наблюдение прервано', 'error');
  if (currentQuickAdmin) sendAdminPanelData();
};
mp.events.add('render', () => {
  if (!inSp) return;
  if (!_user.user.isAdminNow()) {
    stop();
    _custom.CustomEvent.triggerServer('admin:spectate:stop');
    return;
  }
  if (!spError && (!mp.players.exists(inSp) || !inSp.handle || player.position.z > 2000)) {
    spError = true;
    _custom.CustomEvent.triggerServer('admin:spectate:problem', inSpId);
    return;
  }
  if (mp.players.exists(inSp) && inSp.handle) {
    const pos = inSp.position;
    const h = inSp.getHeading();
    if (pos) player.setCoords(pos.x - 5, pos.y, pos.z - 10, true, true, true, true);
    if (h) player.setHeading(h);
    mp.game.invoke('0x8BBACBF51DA047A8', inSp.handle);
  }
});
let debug = exports.debug = false;
let anticheatNotify = true;
function adminMenu() {
  if (!_user.user.admin_level) return;
  let m = new _menu.MenuClass('', 'Действия');
  m.spriteName = "admin";
  m.exitProtect = true;
  m.newItem({
    name: _user.user.enabledAdmin ? "Выключить админ-мод" : "Включить админ-мод",
    onpress: async () => {
      if (_user.user.enabledAdmin && noClipEnabled) return _user.user.notify('Выйдите из режима NoClip прежде чем выключить админку', 'error');
      if (_user.user.enabledAdmin && inSpectatorMode()) return _user.user.notify('Выйдите из режима SP прежде чем выключить админку', 'error');
      const status = !_user.user.enabledAdmin;
      if (!status && currentQuickAdmin) {
        currentQuickAdmin = false;
        sendAdminPanelData();
      }
      _user.user.enabledAdmin = !_user.user.enabledAdmin;
      let c = 0;
      while (c < 100 && status != _user.user.enabledAdmin) {
        await _system.system.sleep(10);
        c++;
      }
      adminMenu();
    }
  });
  if (_user.user.enabledAdmin) {
    m.newItem({
      name: "Список игроков",
      onpress: () => {
        usersList();
      }
    });
  }
  m.newItem({
    name: "Админ-чат",
    onpress: () => {
      m.close();
      _gui.gui.setGui('adminchat');
    }
  });
  m.newItem({
    name: "Чит-репорт",
    onpress: () => {
      m.close();
      _gui.gui.setGui('admincheat');
    }
  });
  if (!_user.user.enabledAdmin) return m.open();
  m.newItem({
    name: "Уведомления от античита",
    more: anticheatNotify ? '~g~ON' : '~r~OFF',
    desc: 'Включает или выключает уведомления об срабатывании античита в чате',
    onpress: () => {
      anticheatNotify = !anticheatNotify;
      _custom.CustomEvent.triggerServer('anticheatNotify', anticheatNotify);
      adminMenu();
    }
  });
  m.newItem({
    name: "Имя над головой",
    onpress: () => {
      (0, _menu.DialogInput)('Введите новое имя', player.getVariable('adminName') || "", 15).then(name => {
        if (!name) return;
        name = _system.system.filterInput(name);
        if (!name) return;
        _custom.CustomEvent.triggerServer('admin:setName', name);
      });
    }
  });
  m.newItem({
    name: "ТП на метку",
    onpress: () => {
      _user.user.teleportWaypoint();
    }
  });
  m.newItem({
    name: "Транспорт",
    onpress: () => {
      vehicleMenu();
    }
  });
  if (_user.user.hasPermission('admin:events:system')) {
    m.newItem({
      name: "Система мероприятий",
      onpress: () => {
        _custom.CustomEvent.triggerServer('admin:events:system');
      }
    });
  }
  if (_user.user.hasPermission('admin:global:notify')) {
    m.newItem({
      name: "Админское оповещение игрокам",
      desc: 'Все игроки (в зависимости от выбора) получат уведомление от администрации в чат',
      type: 'list',
      list: ['Всем', 'В измерении'],
      onpress: itm => {
        m.close();
        (0, _menu.DialogInput)('Введите текст сообщения', '', 120, 'textarea').then(text => {
          if (!text) return;
          _custom.CustomEvent.triggerServer('admin:global:notify', text, !!itm.listSelected);
        });
      }
    });
    m.newItem({
      name: "Оповещение (Событие) игрокам",
      desc: 'Все игроки (в зависимости от выбора) получат уведомление (Событие) в чат',
      type: 'list',
      list: ['Всем', 'В измерении'],
      onpress: itm => {
        m.close();
        (0, _menu.DialogInput)('Введите текст сообщения', '', 120, 'textarea').then(text => {
          if (!text) return;
          _custom.CustomEvent.triggerServer('admin:globalevent:notify', text, !!itm.listSelected);
        });
      }
    });
  }
  if (_user.user.hasPermission('admin:allheal')) {
    m.newItem({
      name: "Исцелить всех в радиусе 50м",
      onpress: () => {
        _custom.CustomEvent.triggerServer('admin:allheal');
      }
    });
  }
  m.newItem({
    name: "Реконнект",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:reconnect');
    }
  });
  m.newItem({
    name: "Полное восстановление",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:fullrestore');
    }
  });
  m.newItem({
    name: "Убийства рядом (100m)",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('death:log');
    }
  });
  m.newItem({
    name: "Выйти",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:quit');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:menu')) {
    m.newItem({
      name: "~y~Настройки сервера",
      onpress: () => {
        Serversettings();
      }
    });
  }
  m.newItem({
    name: "~c~Данные для разработки",
    onpress: () => {
      devData();
    }
  });
  m.open();
}
function Serversettings() {
  if (!_user.user.admin_level) return;
  let m = new _menu.MenuClass('', 'Действия');
  if (_user.user.hasPermission('admin:vehicle:configs')) {
    m.newItem({
      name: "~g~Конфиг транспорта",
      onpress: () => {
        _custom.CustomEvent.triggerServer('admins:vehicle:config');
      }
    });
  }
  if (_user.user.hasPermission('admin:gamedata:menu')) {
    m.newItem({
      name: "~y~Добавление нового",
      onpress: () => {
        gameMenu();
      }
    });
  }
  if (_user.user.hasPermission('admin:1xPromocodes:manage')) {
    m.newItem({
      name: "Одноразовые промокоды",
      onpress: () => {
        _custom.CustomEvent.triggerServer('admin:onetimePromo');
      }
    });
  }
  if (_user.user.hasPermission('admin:mainmenu:ads')) {
    m.newItem({
      name: "Реклама в системном меню",
      onpress: () => {
        m.close();
        _custom.CustomEvent.triggerServer('admin:mainmenu:ads');
      }
    });
  }
  if (_user.user.hasPermission('admin:x2func')) {
    m.newItem({
      name: "~k~ Функции X2",
      onpress: () => {
        m.close();
        _custom.CustomEvent.triggerServer('admin:x2func');
      }
    });
  }
  if (_user.user.hasPermission('admin:familyControl')) {
    m.newItem({
      name: "Управление семьями",
      onpress: () => {
        m.close();
        _custom.CustomEvent.triggerServer('admin:familyControl');
      }
    });
  }
  if (_user.user.hasPermission('admin:paydayglobal')) {
    m.newItem({
      name: "Выдать всем PayDay",
      desc: 'Произойдёт всё тоже самое, что и происходит автоматически каждый час. Все игроки получат ЗП, Мафии доход и прочее. Единственное - не будут работать проверки на отыгранное время и прочее',
      onpress: () => {
        m.close();
        (0, _accept.DialogAccept)('Вы уверены?', 'big').then(status => {
          if (!status) return;
          _custom.CustomEvent.triggerServer('admin:paydayglobal');
        });
      }
    });
  }
  if (_user.user.hasPermission('admin:blacklist')) {
    m.newItem({
      name: "Управление BlackList",
      onpress: () => {
        _custom.CustomEvent.triggerServer('admin:blacklist');
      }
    });
  }
  if (_user.user.test) {
    m.newItem({
      name: "WhiteList тестового сервера",
      onpress: () => {
        _custom.CustomEvent.triggerServer('users:whitelist');
      }
    });
  }
  if (_user.user.hasPermission('admin:system:reboot')) {
    m.newItem({
      name: "~r~Меню перезагрузки сервера",
      onpress: () => {
        const submenu = new _menu.MenuClass("", "Меню перезагрузки сервера");
        submenu.spriteName = "admin";
        submenu.exitProtect = true;
        submenu.newItem({
          name: "Запустить процедуру",
          desc: "Выберите количество минут",
          type: "range",
          rangeselect: [0, 120],
          onpress: itm => {
            if (!_user.user.hasPermission('admin:system:reboot')) return;
            let code = _system.system.randomStr(4, "QAZXDCFGHJKLVBNMRTYHJK");
            (0, _menu.DialogInput)("Для подтверждения напишите код - " + code, "", 120).then(reason => {
              if (!reason) return _user.user.notify("Отмена", "success");
              if (reason !== code) return;
              if (!_user.user.hasPermission('admin:system:reboot')) return;
              _menu.MenuClass.closeMenu();
              _custom.CustomEvent.triggerServer('admin:system:reboot', itm.listSelected);
            });
          }
        });
        submenu.newItem({
          name: "Отменить текущий перезапуск",
          onpress: itm => {
            if (!_user.user.hasPermission('admin:system:reboot')) return;
            _custom.CustomEvent.triggerServer('admin:system:rebootstop');
          }
        });
        submenu.newItem({
          name: "Запустить процедуру обновления",
          desc: 'Данная процедура работает только на тестовом сервере',
          onpress: itm => {
            if (!_user.user.hasPermission('admin:system:reboot')) return;
            _custom.CustomEvent.triggerServer('admin:system:update');
          }
        });
        submenu.open();
      }
    });
  }
  m.open();
}
let lastSpawnModel = mp.storage.data.lastVehicle || null;
const vehicleMenu = () => {
  let m = new _menu.MenuClass('', "Транспорт");
  m.onclose = () => {
    adminMenu();
  };
  m.spriteName = "admin";
  m.newItem({
    name: "Спавн ТС",
    onpress: () => {
      const spawnMethood = ["Оказаться в ТС", "Заспавнить не садясь в ТС"];
      let spawnMethoodSelect = 0;
      let headersList = ["Угол игрока"];
      for (let id = 1; id <= 360; id++) headersList.push(`${id}`);
      let headerSelect = 0;
      const submenu = new _menu.MenuClass('', 'Выбор ТС');
      submenu.onclose = () => {
        vehicleMenu();
      };
      submenu.newItem({
        name: "Ввести название",
        onpress: () => (0, _menu.DialogInput)('Введите модель').then(async model => {
          if (!model) return;
          if (noClipEnabled) return _user.user.notify('Выйдите из режима NoClip прежде чем спавнить ТС', 'error');
          if (!mp.game.streaming.isModelAVehicle(mp.game.joaat(model))) return _user.user.notify("Модель указана не верно", "error");
          _custom.CustomEvent.triggerServer('admin:spawn:vehicle', model, spawnMethoodSelect, headerSelect);
          let c = 0;
          while (spawnMethoodSelect && !player.vehicle && c < 100) await _system.system.sleep(20), c++;
          lastSpawnModel = model;
          mp.storage.data.lastVehicle = model;
          vehicleMenu();
        })
      });
      submenu.newItem({
        name: "Метод спавна",
        type: "list",
        list: spawnMethood,
        listSelected: spawnMethoodSelect,
        onchange: val => {
          spawnMethoodSelect = val;
        }
      });
      submenu.newItem({
        name: "Угол спавна",
        desc: 'Параметр определяет угол поворота транспорта при спавне. По умолчанию ТС будет повернут в ту сторону, куда смотрит игрок, однако если вы хотите заспавнить красиво несколько ТС, то лучше выбрать определённый угол поворота, чтобы весь транспорт смотрел в одну сторону',
        type: "list",
        list: headersList,
        listSelected: headerSelect,
        onchange: val => {
          headerSelect = val;
        }
      });
      if (lastSpawnModel) {
        submenu.newItem({
          name: "Спавн последней модели",
          more: lastSpawnModel,
          desc: 'Это последняя модель, которую вы спавнили через админку',
          onpress: () => {
            if (noClipEnabled) return _user.user.notify('Выйдите из режима NoClip прежде чем спавнить ТС', 'error');
            _custom.CustomEvent.triggerServer('admin:spawn:vehicle', lastSpawnModel, spawnMethoodSelect, headerSelect);
          }
        });
      }
      submenu.open();
    }
  });
  m.newItem({
    name: "Очистка всех тс в радиусе 20м",
    onpress: () => {
      _custom.CustomEvent.triggerServer('admins:vehicle:respawnRange');
    }
  });
  if (player.vehicle) {
    m.newItem({
      name: 'Информация о ТС',
      onpress: () => {
        _custom.CustomEvent.triggerServer('admins:vehicle:info');
      }
    });
    m.newItem({
      name: "Топливо ТС",
      desc: "Изменить параметры топлива транспорта",
      onpress: () => {
        _custom.CustomEvent.triggerServer('admins:vehicle:fuel');
      }
    });
    m.newItem({
      name: "Покрасить ТС",
      desc: "Если ТС принадлежит игроку - перекраска будет сохранена",
      onpress: () => {
        _custom.CustomEvent.triggerServer('admins:vehicle:color');
      }
    });
  }
  m.newItem({
    name: "~r~Удалить/Респавн ближайшего ТС",
    desc: "ТС игрока или фракции отправится на точку респавна, а арендованный либо админский ТС будет удалён",
    onpress: () => {
      const veh = _vehicles.vehicles.findNearest(5);
      if (!veh) return _user.user.notify("Поблизости нет ТС", "error");
      if (veh.autosalon) return;
      _custom.CustomEvent.triggerServer('admins:vehicle:respawn', veh.remoteId, false);
    }
  });
  m.newItem({
    name: "~b~Респавн ближайшего ТС",
    desc: "Какой бы не был ТС - произойдёт респавн",
    onpress: () => {
      const veh = _vehicles.vehicles.findNearest(5);
      if (!veh) return _user.user.notify("Поблизости нет ТС", "error");
      if (veh.autosalon) return;
      _custom.CustomEvent.triggerServer('admins:vehicle:respawn', veh.remoteId, true);
    }
  });
  m.newItem({
    name: "~y~Ремонт ближайшего ТС",
    desc: "Какой бы не был ТС - произойдёт полный ремонт с восстановлением топлива и прочего",
    onpress: () => {
      const veh = _vehicles.vehicles.findNearest(5);
      if (!veh) return _user.user.notify("Поблизости нет ТС", "error");
      if (veh.autosalon) return;
      _custom.CustomEvent.triggerServer('admins:vehicle:fullFix', veh.remoteId);
    }
  });
  m.open();
};
const usersList = name => {
  if (name) name = name.toLowerCase();
  let m = new _menu.MenuClass("Список игроков");
  m.onclose = () => {
    adminMenu();
  };
  m.newItem({
    name: 'Поиск',
    more: name,
    onpress: () => {
      (0, _menu.DialogInput)("Введите имя или ID", name ? name : "").then(val => {
        if (val === null) return usersList(name);else return usersList(val);
      });
    }
  });
  m.newItem({
    name: '~r~Найти игрока оффлайн',
    onpress: () => {
      (0, _menu.DialogInput)("Введите ID игрока", null, 6, 'int').then(val => {
        if (val === null) return;
        if (val <= 0) return;
        _custom.CustomEvent.triggerServer('admin:users:choice', val);
      });
    }
  });
  m.newItem({
    name: mp.players.local.getVariable('name') + " (ВЫ)",
    more: `ID: ${mp.players.local.getVariable('id')}`,
    onpress: () => {
      _custom.CustomEvent.triggerServer('admin:users:choice', mp.players.local.getVariable('id'));
    }
  });
  mp.players.toArray().filter(player => player.getVariable('id') && _user.user.id != player.getVariable('id') && (!name || player.getVariable('name').toLowerCase().includes(name) || parseInt(name) == player.getVariable('id'))).map(player => {
    const id = player.getVariable('id');
    m.newItem({
      name: player.getVariable('name'),
      more: `ID: ${id}`,
      onpress: () => {
        _custom.CustomEvent.triggerServer('admin:users:choice', id);
      }
    });
  });
  m.open();
};
const coordDebugData = [["Координаты", 0], ["Для обычного маркера", 1], ["Для плоского маркера", 0.9]];
const drawDebugCoordString = (name, offset, type, withHeading) => {
  const crd = player.vehicle ? player.vehicle.position : player.position;
  const pos = new mp.Vector3(crd.x, crd.y, crd.z - offset);
  const res = !type ? `${pos.x.toFixed(2)}, ${pos.y.toFixed(2)}, ${pos.z.toFixed(2)}${withHeading ? `, ${Math.floor(player.getHeading())}` : ''}` : `x: ${pos.x.toFixed(2)}, y: ${pos.y.toFixed(2)}, z: ${pos.z.toFixed(2)}${withHeading ? `, h: ${Math.floor(player.getHeading())}` : ''}`;
  (0, _menu.DialogInput)(name, res);
};
let debugPointsList = [];
const clearPoints = () => {
  debugPointsList.map(item => {
    if (mp.markers.exists(item[2])) item[2].destroy();
    if (mp.blips.exists(item[3])) item[3].destroy();
  });
  debugPointsList = [];
};
let adminDataDrawPlayers = exports.adminDataDrawPlayers = false;
let adminDataDrawVehicles = exports.adminDataDrawVehicles = false;
let adminDataDrawRange = exports.adminDataDrawRange = 1;
const devData = () => {
  clearPoints();
  let m = new _menu.MenuClass("Блок данных");
  m.exitProtect = true;
  m.onclose = () => {
    adminMenu();
  };
  m.newItem({
    name: "Отладочные данные",
    onpress: () => {
      exports.debug = debug = !debug;
    }
  });
  m.newItem({
    name: "Данные по игрокам",
    desc: 'Отображает дополнительные данные о игроках',
    onpress: () => {
      exports.adminDataDrawPlayers = adminDataDrawPlayers = !adminDataDrawPlayers;
    }
  });
  m.newItem({
    name: "Данные по ТС",
    desc: 'Отображает дополнительные данные о ТС',
    onpress: () => {
      exports.adminDataDrawVehicles = adminDataDrawVehicles = !adminDataDrawVehicles;
    }
  });
  m.newItem({
    name: "Сплайн камера",
    desc: 'Управление сплайн камерой',
    onpress: _splineCamera.default.createMenu
  });
  m.newItem({
    name: "Множитель дистанции отрисовки",
    desc: 'Во сколько раз мы будем дальше показывать данные',
    onpress: () => {
      (0, _menu.DialogInput)('Введите множитель', adminDataDrawRange, 7, 'float').then(val => {
        if (!val) return;
        exports.adminDataDrawRange = adminDataDrawRange = val;
      });
    }
  });
  m.newItem({
    name: "~b~Раздел получения",
    onpress: () => {
      _user.user.notify("Это не пункт, листайте ниже", "error");
    }
  });
  coordDebugData.map(([name, offset]) => {
    m.newItem({
      name: name,
      type: "list",
      list: ["Через запятую", "Объект", "Через запятую с углом", "Объект с углом"],
      onpress: itm => {
        if (itm.listSelected === 0) return drawDebugCoordString(name, offset, 0, false);
        if (itm.listSelected === 1) return drawDebugCoordString(name, offset, 1, false);
        if (itm.listSelected === 2) return drawDebugCoordString(name, offset, 0, true);
        if (itm.listSelected === 3) return drawDebugCoordString(name, offset, 1, true);
      }
    });
  });
  m.newItem({
    name: "~b~Раздел сбора масива координат",
    onpress: () => {
      _user.user.notify("Это не пункт, листайте ниже", "error");
    }
  });
  coordDebugData.map(([name, offset]) => {
    m.newItem({
      name: name,
      type: "list",
      list: ["Через запятую", "Объект", "Через запятую с углом", "Объект с углом"],
      onpress: itm => {
        const submenu = new _menu.MenuClass("Сбор коодинат", itm.listSelectedName);
        submenu.onclose = () => {
          devData();
        };
        submenu.newItem({
          name: "Добавить точку",
          onpress: () => {
            const crd = player.vehicle ? player.vehicle.position : player.position;
            const pos = new mp.Vector3(crd.x, crd.y, crd.z - offset);
            const pos2 = new mp.Vector3(crd.x, crd.y, crd.z + 1);
            const marker = mp.markers.new(0, pos2, 2, {
              color: [255, 0, 0, 255],
              dimension: player.dimension
            });
            const blip = mp.blips.new(164, pos2, {
              scale: 0.5,
              color: 1,
              dimension: player.dimension
            });
            debugPointsList.push([pos, player.getHeading(), marker, blip]);
          }
        });
        submenu.newItem({
          name: "Скопировать список",
          onpress: () => {
            const res = debugPointsList.map(q => {
              let s = itm.listSelected === 0 || itm.listSelected === 2 ? [q[0].x.toFixed(2), q[0].y.toFixed(2), q[0].z.toFixed(2)] : {
                x: q[0].x.toFixed(2),
                y: q[0].y.toFixed(2),
                z: q[0].z.toFixed(2)
              };
              if (itm.listSelected === 2 || itm.listSelected === 3) {
                if (itm.listSelected === 2) {
                  s.push(q[1].toFixed(0));
                } else {
                  s.h = q[1].toFixed(0);
                }
              }
              return s;
            });
            (0, _menu.DialogInput)("Результат", JSON.stringify(res).replace(/}/g, '|').replace(/{/g, '|').replace(/\[/g, '|').replace(/]/g, '|').replace(/"/g, '').replace(/'/g, ''), 99999999, "textarea");
          }
        });
        submenu.newItem({
          name: "Очистить список",
          onpress: () => {
            clearPoints();
          }
        });
        submenu.open();
      }
    });
  });
  m.newItem({
    name: "~b~Раздел специфических данных",
    onpress: () => {
      _user.user.notify("Это не пункт, листайте ниже", "error");
    }
  });
  m.newItem({
    name: 'Конфиг для стула',
    desc: 'Данный пункт позволяет создать файл конфигурации для посадки на стул. При открытии вас попросит указать handle объёкта. Этот параметр уникален для вашего клиента, чтобы его получить - включите отладочный режим и наведите курсор на нужный объёкт. Сверху будет написан Handle выделеного объекта',
    onpress: () => {
      generateChairConfig();
    }
  });
  m.newItem({
    name: 'Конфиг для игрока в багажнике',
    desc: 'Данный пункт позволяет создать файл конфигурации для того, чтобы в багажник машины можно было закинуть игрока. Так же если машина будет прописана в этом конфиге - то можно будет просто визуально открывать и закрывать багажник',
    onpress: () => {
      generatePlayerInVehicleConfig();
    }
  });
  m.newItem({
    name: 'Конфиг атача предмета',
    desc: 'Данный пункт позволяет настроить корректное крепление предмета инвентаря к руке.',
    onpress: () => {
      generateInventoryAttach();
    }
  });
  m.newItem({
    name: 'Конфиг одежды',
    desc: 'Позволяет посмотреть как выглядит одежда',
    onpress: () => {
      (0, _cloth.createDress)(true);
    }
  });
  m.newItem({
    name: 'Тест анимации',
    desc: 'Данный пункт позволяет посмотреть как будут выглядеть анимации',
    onpress: () => {
      generateAnimConfig();
    }
  });
  m.newItem({
    name: 'Тест сценария',
    desc: 'Данный пункт позволяет посмотреть как будут выглядеть сценарий',
    onpress: () => {
      generateScenarioConfig();
    }
  });
  m.newItem({
    name: 'Тест камеры',
    desc: 'Данный пункт позволяет посмотреть как будет двигаться камера',
    onpress: () => {
      const submenu = new _menu.MenuClass('Список');
      submenu.onclose = () => {
        devData();
      };
      _cameraWaypoints.CAMERA_WAYPOINTS.map(item => {
        submenu.newItem({
          name: `${item.id}`,
          onpress: () => {
            submenu.close();
            (0, _cameraManager.drawCameraConf)(item);
          }
        });
      });
      submenu.open();
    }
  });
  m.newItem({
    name: 'Угол поворота камеры',
    desc: '',
    onpress: () => {
      const rot = _cameraManager.CamerasManager.gameplayCam.getRot(2);
      (0, _menu.DialogInput)('Скопируйте данные', `rx: ${rot.x}, ry: ${rot.y}, rz: ${rot.z}`);
    }
  });
  m.newItem({
    name: 'Хеш текущего оружия',
    desc: 'Этот хеш необходим для конфига урона',
    onpress: () => {
      (0, _menu.DialogInput)('Скопируйте данные', mp.game.invoke('0x0A6DB4965674D243', player.handle));
    }
  });
  m.newItem({
    name: 'Парковочные точки NPC',
    desc: 'Просмотр и телепорт по парковочным точкам NPC',
    onpress: () => {
      let search;
      const ops = () => {
        const submenu = new _menu.MenuClass("Парковочные точки");
        submenu.onclose = () => {
          devData();
        };
        submenu.newItem({
          name: `Поиск`,
          more: `${search}`,
          onpress: () => {
            (0, _menu.DialogInput)('Введите ID для поиска', `${search}`, 5, 'text').then(res => {
              if (res === null) return ops();
              search = res;
              ops();
            });
          }
        });
        _npcPark.vehicleSpawnPoints.filter(q => !search || search.includes(q.id.toString())).map(q => {
          submenu.newItem({
            name: `${q.id}`,
            desc: 'Нажмите ENTER чтобы телепортироваться на точку',
            onpress: () => {
              _user.user.teleport(q.x, q.y, q.z);
            }
          });
        });
        submenu.open();
      };
      ops();
    }
  });
  m.open();
};
const generateInventoryAttach = () => {
  (0, _inventory2.selectItem)().then(async item_id => {
    if (!item_id) return devData();
    const cfg = _inventory.inventoryShared.get(item_id);
    if (!cfg) return devData();
    const m = new _menu.MenuClass("Создание конфига атача", "Параметры");
    m.exitProtect = true;
    const weaponCfg = _inventory.inventoryShared.getWeaponConfigByItemId(cfg.item_id);
    const weaponHash = weaponCfg && weaponCfg.ammo_max ? weaponCfg.hash : null;
    const model = weaponHash ? mp.game.joaat(weaponHash) : mp.game.joaat(cfg.prop);
    if (weaponHash) {
      let c = 0;
      mp.game.weapon.requestWeaponAsset(model, 31, 0);
      while (!mp.game.weapon.hasWeaponAssetLoaded(model) && c < 200) await _system.system.sleep(100), c++;
    } else {
      if (!mp.game.streaming.hasModelLoaded(model)) {
        let c = 0;
        mp.game.streaming.requestModel(model);
        while (!mp.game.streaming.hasModelLoaded(model) && c < 200) await _system.system.sleep(10), c++;
      }
    }
    let objectH = !weaponHash ? mp.game.object.createObject(model, player.position.x, player.position.y, player.position.z - 10, true, true, true) : mp.game.weapon.createWeaponObject(model, 120, player.position.x, player.position.y, player.position.z + 3, true, 0, 0);
    let object = mp.objects.newWeak(objectH);
    let c = 0;
    let [x, y, z, rx, ry, rz] = cfg.propAttachParam || [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    while (c < 100 && !object.handle) await _system.system.sleep(10), c++;
    m.exitProtect = true;
    m.onclose = () => {
      devData();
    };
    let boneId = 18905;
    const attach = () => {
      object.attachTo(player.handle, player.getBoneIndex(boneId), x, y, z, rx, ry, rz, false, false, false, false, 2, true);
    };
    attach();
    let variants = [];
    let variantsStr = [];
    for (let s = -2; s <= 2; s += 0.005) {
      variants.push(s);
      variantsStr.push(s.toFixed(3));
    }
    let variantsR = [];
    let variantsRStr = [];
    for (let s = 0; s <= 360; s++) {
      variantsR.push(s);
      variantsRStr.push(s.toFixed(0));
    }
    m.newItem({
      name: 'Часть тела',
      type: 'list',
      list: _attach.ATTACH_BONES_LIST.map(q => `${q[0]} | ${q[1]}`),
      listSelected: _attach.ATTACH_BONES_LIST.findIndex(q => q[1] === boneId),
      onchange: val => {
        boneId = _attach.ATTACH_BONES_LIST[val][1];
        attach();
      }
    });
    m.newItem({
      name: 'X',
      type: 'list',
      list: variantsStr,
      listSelected: variants.findIndex(q => q >= x),
      onchange: val => {
        let p = variants[val];
        x = p;
        attach();
      }
    });
    m.newItem({
      name: 'Y',
      type: 'list',
      list: variantsStr,
      listSelected: variants.findIndex(q => q >= y),
      onchange: val => {
        let p = variants[val];
        y = p;
        attach();
      }
    });
    m.newItem({
      name: 'Z',
      type: 'list',
      list: variantsStr,
      listSelected: variants.findIndex(q => q >= z),
      onchange: val => {
        let p = variants[val];
        z = p;
        attach();
      }
    });
    m.newItem({
      name: 'RX',
      type: 'list',
      list: variantsRStr,
      listSelected: variantsR.findIndex(q => q >= rx),
      onchange: val => {
        let p = variantsR[val];
        rx = p;
        attach();
      }
    });
    m.newItem({
      name: 'RY',
      type: 'list',
      list: variantsRStr,
      listSelected: variantsR.findIndex(q => q >= ry),
      onchange: val => {
        let p = variantsR[val];
        ry = p;
        attach();
      }
    });
    m.newItem({
      name: 'RZ',
      type: 'list',
      list: variantsRStr,
      listSelected: variantsR.findIndex(q => q >= rz),
      onchange: val => {
        let p = variantsR[val];
        rz = p;
        attach();
      }
    });
    m.newItem({
      name: '~g~Данные',
      onpress: () => {
        (0, _menu.DialogInput)('Скопируйте данные', `[${boneId}, ${x.toFixed(3)}, ${y.toFixed(3)}, ${z.toFixed(3)}, ${rx.toFixed(0)}, ${ry.toFixed(0)}, ${rz.toFixed(0)}]`);
      }
    });
    m.open();
    let int = setInterval(() => {
      if (!_menu.currentMenu || _menu.currentMenu.id !== m.id) {
        object.destroy();
        clearInterval(int);
      }
    }, 1000);
  });
};
const generateScenarioConfig = (scenario, name = "") => {
  const m = new _menu.MenuClass("Создание конфига анимаций", "Параметры");
  m.exitProtect = true;
  m.onclose = () => {
    devData();
  };
  m.newItem({
    name: "~r~Остановить сценарий",
    onpress: () => {
      _user.user.stopAnim();
    }
  });
  m.newItem({
    name: "~g~Воспроизвести сценарий",
    onpress: () => {
      if (!scenario) return _user.user.notify("Укажите название сценария", "error");
      _user.user.playScenario(scenario);
    }
  });
  m.newItem({
    name: "Сценарий",
    more: scenario || "~r~Не указан",
    onpress: () => {
      (0, _menu.DialogInput)("Укажите сценарий", scenario, 120).then(val => {
        if (val) scenario = val;
        generateScenarioConfig(scenario, name);
      });
    }
  });
  m.open();
};
const generateAnimConfig = (dict, anim, upper = false, looping = false, name = "") => {
  const m = new _menu.MenuClass("Создание конфига анимаций", "Параметры");
  m.onclose = () => {
    devData();
  };
  m.exitProtect = true;
  m.newItem({
    name: "~r~Остановить анимацию",
    onpress: () => {
      _user.user.stopAnim();
    }
  });
  m.newItem({
    name: "~g~Воспроизвести анимацию",
    onpress: () => {
      if (!dict) return _user.user.notify("Укажите каталог анимации", "error");
      if (!anim) return _user.user.notify("Укажите название анимации", "error");
      _user.user.playAnim([[dict, anim]], upper, looping);
    }
  });
  m.newItem({
    name: "Каталог",
    more: dict || "~r~Не указана",
    onpress: () => {
      (0, _menu.DialogInput)("Укажите каталог анимации", dict, 120).then(val => {
        if (val) dict = val;
        generateAnimConfig(dict, anim, upper, looping, name);
      });
    }
  });
  m.newItem({
    name: "Название",
    more: anim || "~r~Не указано",
    onpress: () => {
      (0, _menu.DialogInput)("Укажите название анимации", anim, 120).then(val => {
        if (val) anim = val;
        generateAnimConfig(dict, anim, upper, looping, name);
      });
    }
  });
  m.newItem({
    name: "Только верхняя часть тела",
    type: 'list',
    list: ["Нет", "Да"],
    listSelected: upper ? 1 : 0,
    onchange: val => {
      upper = val ? true : false;
    }
  });
  m.newItem({
    name: "Зациклить анимацию",
    type: 'list',
    listSelected: looping ? 1 : 0,
    list: ["Нет", "Да"],
    onchange: val => {
      looping = val ? true : false;
    }
  });
  m.open();
};
const generatePlayerInVehicleConfig = cfg => {
  cfg = {
    offset: {
      x: 0,
      y: 0,
      z: 0
    },
    rot: {
      x: 0,
      y: 0,
      z: 0
    },
    place: {
      x: 0,
      y: 0,
      z: 0
    }
  };
  let veh;
  mp.vehicles.forEachInStreamRange(vehicle => {
    if (veh && _system.system.distanceToPos(player.position, veh.position) < _system.system.distanceToPos(player.position, vehicle.position)) return;
    if (_system.system.distanceToPos(player.position, vehicle.position) > 5) return;
    veh = vehicle;
  });
  if (!veh) return _user.user.notify("Поблизости должен быть ТС, для которого будете создавать конфиг", "error");
  const handle = veh.handle;
  if (!handle) return devData();
  if (veh.getBoneIndexByName('boot') == -1) return _user.user.notify("У данного ТС нет багажника", "error");
  if (veh.getBoneIndexByName('engine') == -1) return _user.user.notify("Для данного ТС нельзя сделать закидку в багажник", "error");
  const m = new _menu.MenuClass("Создание конфига багажника", "Настройки");
  m.exitProtect = true;
  m.onclose = () => {
    _user.user.stopAnim();
    player.resetAlpha();
    player.detach(false, false);
    devData();
  };
  const fix = () => {
    if (!mp.vehicles.exists(veh)) return;
    _user.user.playAnim([["amb@world_human_bum_slumped@male@laying_on_right_side@idle_a", "idle_a"]], false, true);
    player.attachTo(handle, veh.getBoneIndexByName('engine'), cfg.offset.x, cfg.offset.y, cfg.offset.z, cfg.rot.x, cfg.rot.y, cfg.rot.z, true, true, false, true, 1, true);
    const pos = veh.getOffsetFromGivenWorldCoords(cfg.place.x, cfg.place.y, cfg.place.z);
  };
  fix();
  m.onclose = () => {
    devData();
  };
  m.newItem({
    name: "Открыть/Закрыть багажник",
    onpress: () => {
      if (veh.getDoorAngleRatio(5) === 0) {
        veh.setDoorOpen(5, false, true);
      } else {
        veh.setDoorShut(5, false);
      }
    }
  });
  m.newItem({
    name: "ТС",
    more: veh.getVariable('modelname')
  });
  let coords = [];
  let coordsN = [];
  for (let id = -5; id <= 5; id += 0.02) coords.push(`${id.toFixed(2)}`), coordsN.push(id);
  let rots = [];
  let rotsN = [];
  for (let id = -360; id <= 360; id += 1) rots.push(`${id.toFixed(0)}`), rotsN.push(id);
  m.newItem({
    name: "Координата X",
    type: "list",
    list: coords,
    listSelected: Math.floor(coords.length / 2),
    onchange: val => {
      cfg.offset.x = coordsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Координата Y",
    type: "list",
    list: coords,
    listSelected: Math.floor(coords.length / 2),
    onchange: val => {
      cfg.offset.y = coordsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Координата Z",
    type: "list",
    list: coords,
    listSelected: Math.floor(coords.length / 2),
    onchange: val => {
      cfg.offset.z = coordsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Угол X",
    type: "list",
    list: rots,
    listSelected: Math.floor(rots.length / 2),
    onchange: val => {
      cfg.rot.x = rotsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Угол Y",
    type: "list",
    list: rots,
    listSelected: Math.floor(rots.length / 2),
    onchange: val => {
      cfg.rot.y = rotsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Угол Z",
    type: "list",
    list: rots,
    listSelected: Math.floor(rots.length / 2),
    onchange: val => {
      cfg.rot.z = rotsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Координата рядом X",
    desc: "Эта координата нужна для определения точки около которой можно юзать багажник",
    type: "list",
    list: coords,
    listSelected: Math.floor(coords.length / 2),
    onchange: val => {
      cfg.place.x = coordsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Координата рядом Y",
    desc: "Эта координата нужна для определения точки около которой можно юзать багажник",
    type: "list",
    list: coords,
    listSelected: Math.floor(coords.length / 2),
    onchange: val => {
      cfg.place.y = coordsN[val];
      fix();
    }
  });
  m.newItem({
    name: "Координата рядом Z",
    desc: "Эта координата нужна для определения точки около которой можно юзать багажник",
    type: "list",
    list: coords,
    listSelected: Math.floor(coords.length / 2),
    onchange: val => {
      cfg.place.z = coordsN[val];
      fix();
    }
  });
  m.newItem({
    name: "~g~Сохранить",
    onpress: () => {
      (0, _menu.DialogInput)('Вот параметры', `x: ${cfg.offset.x.toFixed(2)}, y: ${cfg.offset.y.toFixed(2)}, z: ${cfg.offset.z.toFixed(2)}, model: ${veh.getVariable('modelname')}, rot_x: ${cfg.rot.x.toFixed(2)}, rot_y: ${cfg.rot.y.toFixed(2)}, rot_z: ${cfg.rot.z.toFixed(2)}, place_x: ${cfg.place.x.toFixed(2)}, place_y: ${cfg.place.y.toFixed(2)}, place_z: ${cfg.place.z.toFixed(2)}`);
    }
  });
  m.open();
};
const generateChairConfig = (handle, cfg) => {
  cfg = {
    heading: 180,
    offset: {
      x: 0,
      y: 0,
      z: 0
    },
    needTp: 0
  };
  let dict = '';
  let anim = '';
  (0, _menu.DialogInput)("Handle объёкта", handle, 40, "int").then(handle => {
    if (!handle) return devData();
    const m = new _menu.MenuClass("Создание конфига посадки", "Настройки");
    m.onclose = () => {
      _user.user.stopAnim();
      devData();
    };
    m.exitProtect = true;
    const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    const model = mp.game.invoke('0x9F47B058362C84B5', handle);
    const fix = () => {
      let posres = mp.game.object.getObjectOffsetFromCoords(pos.x, pos.y, pos.z, heading.x, cfg.offset.x, cfg.offset.y, cfg.offset.z);
      if (dict && anim) {
        player.setCoordsNoOffset(posres.x, posres.y, posres.z, true, true, true);
        player.setHeading(heading.x + cfg.heading);
        _user.user.playAnim([[dict, anim]], false, true);
      } else {
        _user.user.playScenario("PROP_HUMAN_SEAT_CHAIR_MP_PLAYER", posres.x, posres.y, posres.z, heading.x + cfg.heading, true);
      }
    };
    fix();
    m.onclose = () => {
      devData();
    };
    m.newItem({
      name: "Handle объёкта",
      more: handle
    });
    m.newItem({
      name: "Model объёкта",
      more: model
    });
    m.newItem({
      name: "Угол",
      type: "range",
      rangeselect: [0, 359],
      listSelected: 180,
      onchange: val => {
        cfg.heading = val;
        fix();
      }
    });
    let coords = [];
    let coordsN = [];
    for (let id = -5; id <= 5; id += 0.02) coords.push(`${id}`), coordsN.push(id);
    m.newItem({
      name: "Координата X",
      type: "list",
      list: coords,
      listSelected: Math.floor(coords.length / 2),
      onchange: val => {
        cfg.offset.x = coordsN[val];
        fix();
      }
    });
    m.newItem({
      name: "Координата Y",
      type: "list",
      list: coords,
      listSelected: Math.floor(coords.length / 2),
      onchange: val => {
        cfg.offset.y = coordsN[val];
        fix();
      }
    });
    m.newItem({
      name: "Координата Z",
      type: "list",
      list: coords,
      listSelected: Math.floor(coords.length / 2),
      onchange: val => {
        cfg.offset.z = coordsN[val];
        fix();
      }
    });
    m.newItem({
      name: "Нужен телепорт",
      type: "list",
      list: ["Не нужен", "Нужен"],
      desc: "При включении этого параметра игрок будет мгновенно телепортирован к пропу вместо того, чтобы спокойно к нему подойти",
      onchange: val => {
        cfg.needTp = val;
        fix();
      }
    });
    m.newItem({
      name: "Категория анимации",
      desc: "Указывайте если нужна",
      onpress: val => {
        (0, _menu.DialogInput)('Введите папку', dict, 240, 'textarea').then(val => {
          if (typeof val !== 'string') return;
          dict = val;
        });
      }
    });
    m.newItem({
      name: "Название анимации",
      desc: "Указывайте если нужна",
      onpress: val => {
        (0, _menu.DialogInput)('Введите название', anim, 240, 'textarea').then(val => {
          if (typeof val !== 'string') return;
          anim = val;
        });
      }
    });
    m.newItem({
      name: "~g~Сохранить",
      onpress: () => {
        (0, _menu.DialogInput)('Вот параметры', `x: ${cfg.offset.x.toFixed(2)}, y: ${cfg.offset.y.toFixed(2)}, z: ${cfg.offset.z.toFixed(2)}, h: ${cfg.heading}, model: ${model}, needTp: ${cfg.needTp ? 'true' : 'false'}`);
      }
    });
    m.open();
  });
};
const gameMenu = () => {
  if (!_user.user.hasPermission('admin:gamedata:menu')) return _user.user.notify('У вас нет доступа', "error");
  let m = new _menu.MenuClass("Игровые данные");
  m.onclose = () => {
    adminMenu();
  };
  m.exitProtect = true;
  if (_user.user.hasPermission('admin:weather:set')) m.newItem({
    name: "Управление временем",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:weather:control');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:createbiz')) m.newItem({
    name: "Бизнес",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:gamedata:createbiz');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:newhouse')) m.newItem({
    name: "Новый дом",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:gamedata:newhouse');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:newwarehouse')) m.newItem({
    name: "Новый склад для игроков",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:gamedata:newwarehouse');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:dress')) m.newItem({
    name: "~y~Каталог одежды",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:gamedata:dress');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:lsc')) m.newItem({
    name: "Конфиг ЛСК",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:gamedata:lsc');
    }
  });
  if (_user.user.hasPermission('admin:chest:accessRemote')) m.newItem({
    name: "Каталог фракционных складов",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:chest:accessRemote');
    }
  });
  if (_user.user.hasPermission('admin:garage:accessRemote')) m.newItem({
    name: "Каталог фракционных гаражей",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:fraction:garage');
    }
  });
  if (_user.user.hasPermission('admin:chestorder:access')) m.newItem({
    name: "Каталог складов для заказа",
    desc: "Это склады, из которых фракция заказывает себе товары в свой склад",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:chestorder:access');
    }
  });
  if (_user.user.hasPermission('admin:moneychest:access')) m.newItem({
    name: "Каталог сейфов",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:moneychest:access');
    }
  });
  if (_user.user.hasPermission('admin:safezones')) m.newItem({
    name: "Переключение ЗЗ",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:safezone');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:restoregrab')) m.newItem({
    name: "Управление точками ограбления",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:gamedata:restoregrab');
    }
  });
  if (_user.user.hasPermission('admin:gamedata:textworld')) m.newItem({
    name: "Отрисовка текста в мире",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('admin:gamedata:textworld');
    }
  });
  if (_user.user.hasPermission('admin:jobdress')) m.newItem({
    name: "Создать новый гардероб",
    onpress: () => {
      m.close();
      _custom.CustomEvent.triggerServer('garderob:new');
    }
  });
  if (_user.user.hasPermission('admin:boomboxblock')) m.newItem({
    name: "Удалить песню из игнора",
    desc: 'Необходимо указать идентификатор песни',
    onpress: () => {
      (0, _menu.DialogInput)('Укажите ID', ``, 10).then(val => {
        if (!val) return;
        _custom.CustomEvent.triggerServer('boombox:removeIgnore', val);
      });
    }
  });
  if (_user.user.isAdminNow(6)) {
    m.newItem({
      name: "Запустить списание налогов",
      desc: '',
      onpress: () => {
        (0, _accept.DialogAccept)('Вы уверены?', `big`).then(val => {
          if (!val) return;
          _custom.CustomEvent.triggerServer('tax:admin');
        });
      }
    });
  }
  m.open();
};
const controlsIds = {
  F5: 74,
  W: 32,
  S: 33,
  A: 34,
  D: 35,
  Space: 321,
  Shift: 21,
  LCtrl: 326,
  SpeedUP: 38,
  SpeedDOWN: 44
};
mp.events.addDataHandler("alpha", (entity, value, oldValue) => {
  if (entity.type != "player") return;
  entity.setAlpha(value);
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "player") return;
  if (entity.getVariable('alpha')) entity.setAlpha(entity.getVariable('alpha'));
});
const fly = {
  flying: false,
  lockZ: false,
  f: 2.0,
  w: 2.0,
  h: 2.0
};
const gameplayCam = mp.cameras.new('gameplay');
function switchFly(status) {
  if (status && mp.players.local.vehicle) return _user.user.notify("Покиньте транспорт");
  fly.flying = !fly.flying;
  const player = mp.players.local;
  player.freezePosition(fly.flying);
  mp.players.local.setMaxSpeed(fly.flying ? 0 : 99999);
  if (!fly.flying && !mp.game.controls.isControlPressed(0, controlsIds.Space)) {
    let position = mp.players.local.position;
    position.z = mp.game.gameplay.getGroundZFor3dCoord(position.x, position.y, position.z, 0.0, false);
    mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
    mp.game.streaming.requestCollisionAtCoord(position.x, position.y, position.z);
  }
  if (fly.flying) {
    _user.user.notify(`Включён`, 'success', null, 2000, 'FLY Mode');
  }
  _custom.CustomEvent.triggerServer('flyMode', fly.flying);
}
setInterval(() => {
  if (fly.flying && !_user.user.enabledAdmin) switchFly(false);
}, 1000);
mp.keys.bind(0x58, true, function () {
  if (!_user.user.login) return;
  if (!fly.flying) return;
  if (!_user.user.enabledAdmin) return;
  fly.lockZ = !fly.lockZ;
  _user.user.notify(`Ось Z: ${fly.lockZ ? 'Зафиксирована' : 'Снята с фиксации'}`, fly.lockZ ? 'success' : 'error', null, 1000, 'FLY Mode');
});
mp.events.add('render', () => {
  if (!_user.user.login) return;
  if (_user.user.enabledAdmin) {
    if (mp.game.controls.isControlJustPressed(0, controlsIds.F5)) switchFly(!fly.flying);
  }
  if (_user.user.login && fly.flying) {
    let controls = mp.game.controls;
    const direction = gameplayCam.getDirection();
    let updated = false;
    let position = mp.players.local.position;
    if (controls.isControlPressed(0, controlsIds.SpeedUP)) fly.f += 0.01;
    if (controls.isDisabledControlPressed(0, controlsIds.SpeedDOWN)) fly.f -= 0.01;
    if (fly.f < 0.1) fly.f = 0.1;
    if (fly.f > 20.0) fly.f = 20.0;
    const speed = controls.isControlPressed(0, controlsIds.Shift) ? fly.f * 3 : fly.f;
    if (controls.isControlPressed(0, controlsIds.W)) {
      position.x += direction.x * speed;
      position.y += direction.y * speed;
      if (!fly.lockZ) position.z += direction.z * speed;
      updated = true;
    } else if (controls.isControlPressed(0, controlsIds.S)) {
      position.x -= direction.x * speed;
      position.y -= direction.y * speed;
      if (!fly.lockZ) position.z -= direction.z * speed;
      updated = true;
    }
    if (controls.isControlPressed(0, controlsIds.A)) {
      position.x += -direction.y * speed;
      position.y += direction.x * speed;
      updated = true;
    } else if (controls.isControlPressed(0, controlsIds.D)) {
      position.x -= -direction.y * speed;
      position.y -= direction.x * speed;
      updated = true;
    }
    if (controls.isControlPressed(0, controlsIds.Space)) {
      position.z += speed;
      updated = true;
    } else if (controls.isControlPressed(0, controlsIds.LCtrl)) {
      position.z -= speed;
      updated = true;
    }
    if (updated) {
      mp.players.local.setMaxSpeed(99999999);
      mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
    } else {
      mp.players.local.setMaxSpeed(0);
    }
  }
});
let noClipEnabled = false;
let noClipSpeed = 1;
let noClipSpeedNames = ["Die", "Slow", "Medium", "Fast", "Very Fast", "Extremely Fast", "Snail Speed!"];
const noClipSwitch = function () {
  noClip(!noClipEnabled);
};
exports.noClipSwitch = noClipSwitch;
const noClip = function (enable) {
  if (inSpectatorMode()) return;
  noClipEnabled = enable;
  if (noClipEnabled) _user.user.notify(`~b~Нажмите ~s~H~b~ чтобы выключить No Clip`);
};
exports.noClip = noClip;
const isNoClipEnable = function () {
  return noClipEnabled;
};
exports.isNoClipEnable = isNoClipEnable;
const getNoClipSpeedName = function () {
  return noClipSpeedNames[noClipSpeed];
};
exports.getNoClipSpeedName = getNoClipSpeedName;
(0, _controls.registerHotkey)(103, () => {
  if (!debug) return;
  if (!_controls.raycastTarget || !_controls.raycastTarget.entity) return _user.user.notify("Выделите объект мышкой", "error");
  const entity = _controls.raycastTarget.entity;
  const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", typeof entity === "number" ? entity : entity.handle);
  const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', typeof entity === "number" ? entity : entity.handle, true);
  const model = typeof entity === "number" ? mp.game.invoke('0x9F47B058362C84B5', entity) : entity.model;
  const m = new _menu.MenuClass("Отладка объекта", "Информация по объекту");
  m.exitProtect = true;
  m.newItem({
    name: "Тип объекта",
    more: typeof entity === "number" ? "Игровой обычный" : "Сетевой " + entity.type
  });
  m.newItem({
    name: "Handle",
    desc: "Идентификатор объёкта в игровом мире, уникальный для вашего клиента",
    more: typeof entity === "number" ? entity : entity.handle,
    onpress: () => {
      (0, _menu.DialogInput)("", typeof entity === "number" ? entity : entity.handle);
    }
  });
  m.newItem({
    name: "Модель",
    desc: "Модель объекта",
    more: model,
    onpress: () => {
      (0, _menu.DialogInput)("", model);
    }
  });
  m.newItem({
    name: "Угол поворота",
    more: heading.x,
    onpress: () => {
      (0, _menu.DialogInput)("", heading.x);
    }
  });
  m.newItem({
    name: "Координаты",
    more: `x: ${pos.x.toFixed(2)}, y: ${pos.y.toFixed(2)}, z: ${pos.z.toFixed(2)}`
  });
  m.newItem({
    name: "Скопировать",
    type: "list",
    list: ["Через запятую", "Объект", "Через запятую с углом", "Объект с углом"],
    onpress: itm => {
      let text = "";
      if (itm.listSelected == 0) text = `${pos.x.toFixed(2)}, ${pos.y.toFixed(2)}, ${pos.z.toFixed(2)}`;
      if (itm.listSelected == 1) text = `x: ${pos.x.toFixed(2)}, y: ${pos.y.toFixed(2)}, z: ${pos.z.toFixed(2)}`;
      if (itm.listSelected == 2) text = `${pos.x.toFixed(2)}, ${pos.y.toFixed(2)}, ${pos.z.toFixed(2)} ${heading.x.toFixed(0)}`;
      if (itm.listSelected == 3) text = `x: ${pos.x.toFixed(2)}, y: ${pos.y.toFixed(2)}, z: ${pos.z.toFixed(2)}, h: ${heading.x.toFixed(0)}`;
      (0, _menu.DialogInput)("Скопировать координаты", text);
    }
  });
  m.newItem({
    name: 'Конфиг для стула',
    desc: 'Данный пункт позволяет создать файл конфигурации для посадки на стул. При открытии вас попросит указать handle объёкта. Этот параметр уникален для вашего клиента, чтобы его получить - включите отладочный режим и наведите курсор на нужный объёкт. Сверху будет написан Handle выделеного объекта',
    onpress: () => {
      generateChairConfig(typeof entity === "number" ? entity : entity.handle);
    }
  });
  m.open();
});
mp.events.add('render', () => {
  if (debug) {
    let hitRaycast;
    if (_controls.raycastTarget && _controls.raycastTarget.entity) {
      const entity = _controls.raycastTarget.entity;
      if (mp.gui.cursor.visible && !_gui.gui.currentGui) {
        _gui.gui.drawText3D(`${typeof entity === "number" ? entity : `${entity.type} ${entity.id}`} ${_controls.raycastTarget.position.x.toFixed(2)} ${_controls.raycastTarget.position.y.toFixed(2)} ${_controls.raycastTarget.position.z.toFixed(2)}`, _controls.raycastTarget.position.x, _controls.raycastTarget.position.y, _controls.raycastTarget.position.z);
        const dist = _system.system.distanceToPos(mp.players.local.position, _controls.raycastTarget.position);
        if (dist < 10) {
          const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", typeof entity === "number" ? entity : entity.handle);
          const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', typeof entity === "number" ? entity : entity.handle, true);
          const model = typeof entity === "number" ? mp.game.invoke('0x9F47B058362C84B5', entity) : entity.model;
          _gui.gui.drawText(`SELECTED OBJECT HANDLE ${typeof entity === "number" ? entity : entity.handle} \nPOS ${pos.x.toFixed(2)} ${pos.y.toFixed(2)} ${pos.z.toFixed(2)}\nH ${heading.x.toFixed(2)} ${heading.y.toFixed(2)} ${heading.z.toFixed(2)}\nM: ${model}\nNum 7 - Info`, 0.5, 0.02, 0.2);
        }
        if (dist > 2) {
          const middle = _system.system.middlePoint3d(mp.players.local.position, _controls.raycastTarget.position);
          _gui.gui.drawText3D(`${dist.toFixed(1)}m`, middle.x, middle.y, middle.z);
        }
        mp.game.graphics.drawLine(player.position.x, player.position.y, player.position.z, _controls.raycastTarget.position.x, _controls.raycastTarget.position.y, _controls.raycastTarget.position.z, 255, 0, 0, 255);
      }
      hitRaycast = entity;
    }
    const zoneGang = _gangwar.GANGWAR_ZONES.find(q => _system.system.distanceToPos(player.position, q) < _gangwar.GANGWAR_RADIUS);
    _gui.gui.drawText(`POS ${player.position.x.toFixed(1)} ${player.position.y.toFixed(1)} ${player.position.z.toFixed(1)}\nH: ${Math.floor(player.getHeading())} | D ${player.dimension} Int ${_user.user.interrior} In ${_user.user.inInterrior}\nC ${mp.gui.cursor.visible} X ${_controls.cursorX.toFixed(2)} Y ${_controls.cursorY.toFixed(2)} ${hitRaycast ? `H ${hitRaycast}` : ''}${zoneGang ? ` | CAPT ${zoneGang.id}` : ''}`, 0.07, 0.5, 0.2);
  }
  if (noClipEnabled) {
    if (!_user.user.isAdminNow()) return noClipEnabled = false;
    let noClipEntity = mp.players.local.isSittingInAnyVehicle() ? mp.players.local.vehicle : mp.players.local;
    noClipEntity.freezePosition(true);
    mp.game.controls.disableControlAction(0, 31, true);
    mp.game.controls.disableControlAction(0, 32, true);
    mp.game.controls.disableControlAction(0, 33, true);
    mp.game.controls.disableControlAction(0, 34, true);
    mp.game.controls.disableControlAction(0, 35, true);
    mp.game.controls.disableControlAction(0, 36, true);
    mp.game.controls.disableControlAction(0, 266, true);
    mp.game.controls.disableControlAction(0, 267, true);
    mp.game.controls.disableControlAction(0, 268, true);
    mp.game.controls.disableControlAction(0, 269, true);
    mp.game.controls.disableControlAction(0, 44, true);
    mp.game.controls.disableControlAction(0, 20, true);
    mp.game.controls.disableControlAction(0, 47, true);
    let yoff = 0.0;
    let zoff = 0.0;
    if (mp.game.controls.isControlJustPressed(0, 22)) {
      noClipSpeed++;
      if (noClipSpeed >= noClipSpeedNames.length) noClipSpeed = 0;
    }
    if (mp.game.controls.isDisabledControlPressed(0, 32)) {
      yoff = 0.5;
    }
    if (mp.game.controls.isDisabledControlPressed(0, 33)) {
      yoff = -0.5;
    }
    if (mp.game.controls.isDisabledControlPressed(0, 34)) {
      noClipEntity.setRotation(0, 0, noClipEntity.getRotation(0).z + 3, 0, true);
    }
    if (mp.game.controls.isDisabledControlPressed(0, 35)) {
      noClipEntity.setRotation(0, 0, noClipEntity.getRotation(0).z - 3, 0, true);
    }
    if (mp.game.controls.isDisabledControlPressed(0, 44)) {
      zoff = 0.21;
    }
    if (mp.game.controls.isDisabledControlPressed(0, 20)) {
      zoff = -0.21;
    }
    if (mp.game.controls.isDisabledControlPressed(0, 74)) {
      if (!noClipEntity.getVariable('isTyping')) {
        noClipEnabled = false;
      }
    }
    let newPos = noClipEntity.getOffsetFromInWorldCoords(0, yoff * (noClipSpeed * 0.7), zoff * (noClipSpeed * 0.7));
    let heading = noClipEntity.getRotation(0).z;
    noClipEntity.setVelocity(0, 0, 0);
    noClipEntity.setRotation(0, 0, heading, 0, false);
    noClipEntity.setCollision(false, false);
    noClipEntity.setCoordsNoOffset(newPos.x, newPos.y, newPos.z, true, true, true);
    noClipEntity.freezePosition(false);
    noClipEntity.setInvincible(false);
    noClipEntity.setCollision(true, true);
  }
});
},{"./controls":"yuOK","./menu":"Aiz7","./custom.event":"py8h","./user":"ggMw","../../shared/inventory":"vpPR","./gui":"bk91","./system":"pi2J","./vehicles":"J8pg","./inventory":"E5lg","../../shared/npc.park.zone":"XwUR","../../shared/cameraWaypoints":"n8Tl","./cameraManager":"mcyQ","./accept":"RT6N","../../shared/gangwar":"cBiX","../../shared/attach.system":"TxUd","./cloth":"Sp7p","./splineCamera":"JP2j"}],"AGmA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyConfigMaxSpeed = applyConfigMaxSpeed;
var _lsc = require("../../../shared/lsc");
var _custom = require("../custom.event");
var _gui = require("../gui");
var _system = require("../system");
mp.events.add('playerEnterVehicle', (vehicle, seat) => {
  applyConfigMaxSpeed(vehicle);
  applyChipTuning(mp.players.local.vehicle);
});
function applyConfigMaxSpeed(vehicle) {
  const maxSpeed = vehicle.getVariable('maxSpeed');
  if (maxSpeed) {
    vehicle.setMaxSpeed(maxSpeed / 3.6);
  } else {
    vehicle.setMaxSpeed(999);
  }
}
setInterval(() => {
  if (mp.players.local.isInAnyVehicle(false) && mp.players.local.vehicle && mp.vehicles.exists(mp.players.local.vehicle)) {
    applyConfigMaxSpeed(mp.players.local.vehicle);
  }
}, 5000);
mp.events.addDataHandler('tuning:chip', (vehicle, value, oldValue) => {
  if (mp.players.local.vehicle === vehicle) {
    applyChipTuning(vehicle);
  }
});
mp.events.addDataHandler('maxSpeed', (vehicle, value, oldValue) => {
  if (mp.players.local.vehicle === vehicle) {
    applyConfigMaxSpeed(vehicle);
  }
});
function applyChipTuning(vehicle) {
  if (!mp.vehicles.exists(vehicle)) {
    return;
  }
  checkDefaultSettings(vehicle);
  const chipDataJson = vehicle.getVariable('tuning:chip');
  if (!chipDataJson) {
    applyDefaultSettings(vehicle);
    return;
  }
  const chipData = JSON.parse(chipDataJson);
  if (!chipData) {
    applyDefaultSettings(vehicle);
    return;
  }
  for (let option of chipData) {
    var _handlingConfigs$find;
    const handlingName = (_handlingConfigs$find = _lsc.handlingConfigs.find(handling => handling.id === option.handlingId)) === null || _handlingConfigs$find === void 0 ? void 0 : _handlingConfigs$find.handlingName;
    if (handlingName) {
      vehicle.setHandling(handlingName, option.value, true);
    }
  }
}
let isChipOpened = false;
_custom.CustomEvent.registerServer('lsc:exitChip', () => {
  isChipOpened = false;
  mp.game.cam.renderScriptCams(false, false, 0, false, false);
});
mp.events.add('gui:menuClosed', gui => {
  if (gui === 'lsc' && isChipOpened) {
    _custom.CustomEvent.triggerServer('lsc:chip:exit', openedBusinessId);
  }
});
let openedBusinessId = -1;
_custom.CustomEvent.registerServer('business:lscChip:open', (businessId, tuningCost, currentTuning) => {
  isChipOpened = true;
  openedBusinessId = businessId;
  const vehicle = mp.players.local.vehicle;
  if (!currentTuning || currentTuning.length === 0) {
    currentTuning = _lsc.handlingConfigs.map(handlingConfig => ({
      handlingId: handlingConfig.id,
      value: vehicle.getHandling(handlingConfig.handlingName)
    }));
  }
  const standardConfig = getDefaultConfig(vehicle);
  _gui.gui.setGui('lsc');
  _custom.CustomEvent.triggerCef('lsc:startChip', vehicle.getVariable('modelname') || '', currentTuning, standardConfig, tuningCost, businessId, vehicle.remoteId);
});
_custom.CustomEvent.registerServer('lsc:chip:loadDefaults', defaultConfigs => {
  for (let pair of defaultConfigs) {
    defaultConfigByModel.set(pair[0], pair[1]);
  }
});
const defaultConfigByModel = new Map();
function checkDefaultSettings(vehicle) {
  if (defaultConfigByModel.has(vehicle.model)) {
    return;
  }
  const config = _lsc.handlingConfigs.map(handling => ({
    handlingId: handling.id,
    value: vehicle.getHandling(handling.handlingName)
  }));
  defaultConfigByModel.set(vehicle.model, config);
  _custom.CustomEvent.triggerServer('lsc:chip:setDefault', vehicle.model, config);
}
function applyDefaultSettings(vehicle) {
  const config = getDefaultConfig(vehicle);
  if (!config) {
    return;
  }
  for (let option of config) {
    var _handlingConfigs$find2;
    const handlingName = (_handlingConfigs$find2 = _lsc.handlingConfigs.find(handling => handling.id === option.handlingId)) === null || _handlingConfigs$find2 === void 0 ? void 0 : _handlingConfigs$find2.handlingName;
    if (handlingName) {
      vehicle.setHandling(handlingName, option.value, true);
    }
  }
}
function getDefaultConfig(vehicle) {
  return defaultConfigByModel.get(vehicle.model);
}
let phi = 25,
  theta = -15,
  phim = 0,
  thetam = 0,
  lastX = 0,
  lastY = 0;
const degToRad = Math.PI / 180;
let camera;
if (!camera || !mp.cameras.exists(camera)) {
  camera = mp.cameras.new('lsc', new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0), 40);
}
let leftDown = false;
let rightDown = false;
let downPos = [0, 0];
const player = mp.players.local;
setInterval(() => {
  if (!isChipOpened) return;
  mp.game.cam.renderScriptCams(true, false, 0, false, false);
  camera.setActive(true);
  const cursorPos = mp.gui.cursor.position;
  const resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
  if (!mp.keys.isDown(0x02)) {
    if (rightDown) rightDown = false;
  } else {
    if (!player.vehicle) return;
    if (!rightDown) {
      if (!(mp.gui.cursor.position[0] * 100 / resolution.x >= 27 && mp.gui.cursor.position[0] * 100 / resolution.x < 78) || !(mp.gui.cursor.position[1] * 100 / resolution.y <= 90)) return;
      rightDown = true;
      downPos = mp.gui.cursor.position;
    }
    if (!rightDown) return;
    if (cursorPos[0] != lastX || cursorPos[1] != lastY) {
      let newFov = _system.system.smallestNumber(_system.system.biggestNumber(10, camera.getFov() + (cursorPos[1] - lastY) * 0.3), 80);
      camera.setFov(newFov);
    }
  }
  if (!mp.keys.isDown(0x01)) {
    if (leftDown) leftDown = false;
  } else {
    if (!player.vehicle) return;
    if (!leftDown) {
      if (!(mp.gui.cursor.position[0] * 100 / resolution.x >= 27 && mp.gui.cursor.position[0] * 100 / resolution.x < 78) || !(mp.gui.cursor.position[1] * 100 / resolution.y <= 90)) return;
      leftDown = true;
      downPos = mp.gui.cursor.position;
      thetam = theta;
      phim = phi;
    }
    if (!leftDown) return;
    if (cursorPos[0] != lastX || cursorPos[1] != lastY) {
      thetam = theta;
      phim = phi;
      phi = -(cursorPos[0] - lastX) * 0.1 + phim;
      theta = -(cursorPos[1] - lastY) * 0.1 + thetam;
      if (theta > 90) theta = 90;else if (theta < 65) theta = 65;
      const distance = 10;
      const newCoord = [distance * Math.sin(theta * degToRad) * Math.cos(phi * degToRad), distance * Math.sin(theta * degToRad) * Math.sin(phi * degToRad), distance * Math.cos(theta * degToRad)];
      camera.setCoord(player.vehicle.position.x + newCoord[0], player.vehicle.position.y + newCoord[1], player.vehicle.position.z + newCoord[2]);
      camera.pointAt(player.vehicle.handle, 0, 0, 0, true);
    }
  }
  lastX = cursorPos[0];
  lastY = cursorPos[1];
}, 10);
},{"../../../shared/lsc":"p5oy","../custom.event":"py8h","../gui":"bk91","../system":"pi2J"}],"azP4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.driftMapLoaded = exports.driftData = void 0;
var _custom = require("./custom.event");
var _drift = require("../../shared/drift");
var _user = require("./user");
var _system = require("./system");
var _lsc = require("./businesses/lsc.chip");
const player = mp.players.local;
let driftMapLoaded = exports.driftMapLoaded = false;
_custom.CustomEvent.registerServer('driftmap', status => {
  if (status) mp.game.streaming.requestIpl("driftmap");else mp.game.streaming.removeIpl("driftmap");
  exports.driftMapLoaded = driftMapLoaded = status;
  _custom.CustomEvent.triggerCef('driftmap', status);
});
let q = 0;
setInterval(() => {
  if (!driftMapLoaded) {
    q = 0;
    return;
  }
  if (mp.players.local.position.z < 400) q++;else q = 0;
  if (q === 3) {
    _custom.CustomEvent.triggerServer('drift:fall');
  }
}, 1000);
const rad = function (degrees) {
  return degrees * Math.PI / 180;
};
const deg = function (radians) {
  return radians * 180 / Math.PI;
};
const angle = vehicle => {
  let velocity = vehicle.getVelocity();
  let vx = velocity.x;
  let vy = velocity.y;
  let vz = velocity.z;
  let modV = Math.sqrt(vx * vx + vy * vy);
  let rot = vehicle.getRotation(0);
  let rx = rot.x;
  let ry = rot.y;
  let rz = rot.z;
  let sn = -Math.sin(rad(rz));
  let cs = Math.cos(rad(rz));
  if (vehicle.getSpeed() * 3.6 < 30 && vehicle.gear == 0) return [0, modV];
  let cosX = (sn * vx + cs * vy) / modV;
  if (cosX > 0.966 && cosX < 0) return [0, modV];else return [deg(Math.acos(cosX)) * 0.5, modV];
};
let speed = 0;
mp.events.add('render', () => {
  const vehicle = player.vehicle;
  if (!vehicle) {
    return;
  }
  if (!vehicle.getVariable('driftEnable')) {
    if (speed > 0) {
      (0, _lsc.applyConfigMaxSpeed)(vehicle);
      speed = 0;
      if (vehicle.getVariable('multiple')) vehicle.setEngineTorqueMultiplier(vehicle.getVariable('multiple') / 100);
    }
    return;
  }
  let vehparam = angle(vehicle);
  if (!isNaN(vehparam[0]) && vehparam[0] > 2 && vehparam[1] > 10 && vehicle.gear != 0) {
    let cfg = _drift.DRIFT_DEFAULT_PARAMS;
    let anglemultiple = vehicle.getVariable('driftAngle') || 0;
    let speedmultiple = vehicle.getVariable('driftSpeed') || 0;
    anglemultiple = anglemultiple / 100 * cfg.angle;
    speedmultiple = speedmultiple / 100 * cfg.speed;
    let angleparam = vehparam[0] * anglemultiple;
    let spparam = (70 - vehparam[1]) * speedmultiple;
    let power = (angleparam + spparam) / 10;
    const current = vehicle.getSpeed();
    if (speed - current > 20) speed = current;
    vehicle.setMaxSpeed(speed);
    vehicle.setEngineTorqueMultiplier(power);
  } else {
    if (vehicle.getVariable('multiple')) vehicle.setEngineTorqueMultiplier(vehicle.getVariable('multiple') / 100);
    speed = vehicle.getSpeed();
    (0, _lsc.applyConfigMaxSpeed)(vehicle);
  }
});
const driftData = exports.driftData = {
  block: false,
  health: 0,
  time: 0,
  current: {
    score: 0,
    multiple: 0,
    text: []
  },
  last: {
    score: 0,
    multiple: 0,
    text: []
  },
  draw: function () {
    if (this.last.score != this.current.score || this.last.multiple != this.current.multiple || JSON.stringify(this.last.text) != JSON.stringify(this.current.text)) {
      _custom.CustomEvent.triggerCef('drift:score', this.current.score, this.current.multiple, this.current.text);
      if (this.last.score && !this.current.score) {
        if (_user.user.isDriver) _custom.CustomEvent.triggerServer('drift:score', this.last.score);
      }
      this.last.score = this.current.score;
      this.last.multiple = this.current.multiple;
      this.last.text = this.current.text;
    }
  }
};
setInterval(() => {
  if (driftData.block) return driftData.draw();
  const vehicle = player.vehicle;
  if (!_user.user.inDriftMap || _user.user.afk || !vehicle || !vehicle.getVariable('driftEnable') || vehicle.isInAir()) {
    if ((driftData.current.score || driftData.current.multiple) && _system.system.timestamp - driftData.time > 3) {
      driftData.current.score = 0;
      driftData.current.multiple = 0;
    }
  } else {
    let vehparam = angle(vehicle);
    if (!isNaN(vehparam[0]) && vehparam[0] > 2 && vehparam[1] > 10 && vehicle.gear != 0) {
      if (driftData.current.multiple < 1) driftData.current.multiple = 1;
      if (!driftData.health) driftData.health = vehicle.getBodyHealth();else if (vehicle.getBodyHealth() !== driftData.health) {
        driftData.block = true;
        setTimeout(() => {
          driftData.health = 0;
          driftData.block = false;
          driftData.current.score = 0;
          driftData.current.multiple = 0;
        }, 5000);
      } else {
        driftData.current.text = [];
        let angleText = "";
        if (vehparam[0] > 15) angleText = "+ Angle";
        if (vehparam[0] > 25) angleText = "++ Angle";
        if (vehparam[0] > 30) angleText = "+++ Angle";
        if (angleText) driftData.current.text.push(angleText);
        let speedText = "";
        let speedInKmh = vehparam[1] * 3.6;
        if (speedInKmh > 60) speedText = "+ Speed";
        if (speedInKmh > 90) speedText = "++ Speed";
        if (speedInKmh > 120) speedText = "+++ Speed";
        if (speedText) driftData.current.text.push(speedText);
        let addScore = Math.floor(vehparam[0] * vehparam[1] / 100 * driftData.current.multiple);
        driftData.current.score += addScore;
        driftData.current.multiple = Math.min(driftData.current.multiple + 0.03, 10.0);
        driftData.time = _system.system.timestamp;
        const nearestVeh = _user.user.getNearestVehicles(6)[1];
        if (nearestVeh) {
          if (nearestVeh.getVariable('driftEnable')) {
            let vehparam2 = angle(nearestVeh);
            if (!isNaN(vehparam2[0]) && vehparam2[0] > 2 && vehparam2[1] > 10) {
              driftData.current.score += addScore;
              driftData.current.text.push('+ Paired');
            } else {}
          } else {}
        } else {}
      }
    } else if ((driftData.current.score || driftData.current.multiple) && _system.system.timestamp - driftData.time > 3) {
      driftData.current.score = 0;
      driftData.current.multiple = 0;
    } else if (driftData.current.multiple > 1) {
      driftData.current.multiple = Math.max(driftData.current.multiple - 0.01, 1.0);
    }
  }
  driftData.draw();
}, 100);
},{"./custom.event":"py8h","../../shared/drift":"ogyk","./user":"ggMw","./system":"pi2J","./businesses/lsc.chip":"AGmA"}],"ZnXR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fractionCfg = void 0;
var _custom = require("../custom.event");
var _gui = require("../gui");
let fractionsConfig = [];
let initCef = false;
_custom.CustomEvent.registerServer('client:fractions-config:load', data => {
  fractionsConfig.push(data);
});
mp.events.add('fractionCfg:cefReady', () => {
  if (initCef === true) return;
  initCef = true;
  setTimeout(() => {
    fractionsConfig.forEach(el => {
      _gui.gui.browser.call('cef:fractions-config:load', JSON.stringify(el));
    });
  }, 2000);
});
_custom.CustomEvent.registerServer('client:fractions-config:update', data => {
  _gui.gui.browser.call('cef:fractions-config:update', JSON.stringify(data));
  let itemKey;
  const item = fractionsConfig.find((el, key) => {
    if (el.id === data.id) {
      itemKey = key;
      return true;
    }
  });
  if (!item || !itemKey) return;
  fractionsConfig[itemKey] = data;
});
const fractionCfg = exports.fractionCfg = {
  get policeFactions() {
    return fractionCfg.list.filter(q => q.police).map(q => q.id);
  },
  get gangFactions() {
    return fractionCfg.list.filter(q => q.gang).map(q => q.id);
  },
  get mafiaFactions() {
    return fractionCfg.list.filter(q => q.mafia).map(q => q.id);
  },
  get gos() {
    return fractionCfg.list.filter(q => q.gos);
  },
  list: fractionsConfig,
  getFraction: fractionid => {
    return fractionsConfig.find(item => item.id == fractionid);
  },
  getFractionName: fractionid => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return null;
    return data.name;
  },
  getFractionColor: fractionid => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return "#fc0317";
    return data.color || "#fc0317";
  },
  getFractionIcon: fractionid => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return null;
    return data.icon;
  },
  getFractionDesc: fractionid => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return null;
    return data.desc;
  },
  getFractionRanks: fractionid => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return [];
    return data.ranks;
  },
  getLeaderRank: fractionid => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return null;
    return data.ranks.length;
  },
  getRankSalary: (fractionid, rank) => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return 0;
    return data.salaries[rank - 1];
  },
  getSubLeaderRank: fractionid => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return null;
    return data.ranks.length - 2;
  },
  isLeader: (fractionid, rank) => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return false;
    return data.ranks.length <= rank;
  },
  isSubLeader: (fractionid, rank) => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return false;
    return data.ranks.length - 1 <= rank;
  },
  isRankCorrect: (fractionid, rank) => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return false;
    if (!data.ranks[rank - 1]) return false;
    return true;
  },
  getRankName: (fractionid, rank) => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return null;
    if (!data.ranks[rank - 1]) return null;
    return data.ranks[rank - 1];
  },
  getPayDayMoney: (fractionid, rank) => {
    let data = fractionCfg.getFraction(fractionid);
    if (!data) return 0;
    return data.moneybase;
  }
};
setTimeout(() => {
  _custom.CustomEvent.triggerServer("client:fractions-config:init");
}, 1500);
},{"../custom.event":"py8h","../gui":"bk91"}],"ggMw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cuff_follow = exports.clearAllWeapons = void 0;
exports.drawSprite = drawSprite;
exports.nowPutIntoVehicleBlock = exports.nowPutIntoVehicle = exports.myWeaponsHashStr = exports.myWeaponsHash = exports.myWeapons = exports.giveWeaponLocally = void 0;
exports.setAllLocalSkinData = setAllLocalSkinData;
exports.user = void 0;
var _system = require("./system");
var _camera = require("./camera");
var _character = require("../../shared/character");
var _custom = require("./custom.event");
var _alert = require("../../shared/alert");
var _permissions = require("../../shared/permissions");
var _survival = require("./survival");
var _anim = require("./anim");
var _gui = require("./gui");
var _controls = require("./controls");
var _masks = require("../../shared/masks");
var _anticheat = require("../../shared/anticheat");
var _vip = require("../../shared/vip");
var _admin = require("./admin");
var _survival2 = require("../../shared/survival");
var _drift = require("./drift");
var _roulette = require("./casino/roulette");
var _dice = require("./casino/dice");
var _slots = require("./casino/slots");
var _main = require("../../shared/casino/main");
var _fractions = require("./fractions");
var _nowPutIntoVehicle, _nowPutIntoVehicle2, _nowPutIntoVehicle3, _nowPutIntoVehicle4;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
let characterLocalSkinData = _objectSpread({}, _character.defaultCharacterData);
function setAllLocalSkinData(val) {
  characterLocalSkinData = val;
}
setInterval(() => {
  mp.game.stats.statSetInt(mp.game.joaat("SP0_STAMINA"), 100, false);
  mp.game.stats.statSetInt(mp.game.joaat("SP0_STRENGTH"), 100, false);
  mp.game.stats.statSetInt(mp.game.joaat("SP0_LUNG_CAPACITY"), 100, false);
  mp.game.stats.statSetInt(mp.game.joaat("SP0_WHEELIE_ABILITY"), 100, false);
  mp.game.stats.statSetInt(mp.game.joaat("SP0_FLYING_ABILITY"), 100, false);
  mp.game.stats.statSetInt(mp.game.joaat("SP0_SHOOTING_ABILITY"), 100, false);
  mp.game.stats.statSetInt(mp.game.joaat("SP0_STEALTH_ABILITY"), 100, false);
}, 20000);
let sendEventsCheat = new Map();
_custom.CustomEvent.registerServer('start:textshow', () => {
  _gui.gui.setGui('greeting');
});
_custom.CustomEvent.registerServer('spawn:select', (...params) => {
  _gui.gui.setGui('spawn');
  _custom.CustomEvent.triggerCef('spawn:select', ...params);
});
_custom.CustomEvent.registerServer('cef:alert:setHelpKey', (key, text) => {
  user.setHelpKey(key, text);
});
function getLocalSkinData(param) {
  return characterLocalSkinData[param];
}
function setLocalSkinData(param, value) {
  characterLocalSkinData[param] = value;
  user.updateCharacterFace(true);
}
let screenEffects = [];
setInterval(() => {
  screenEffects.map((item, index) => {
    item[1] -= 2;
    if (item[1] <= 0) {
      mp.game.graphics.stopScreenEffect(item[0]);
      screenEffects.splice(index, 1);
    }
  });
}, 2000);
let drugScreenTimer = 0;
let alcoControlTimer = 0;
_custom.CustomEvent.registerServer('drug:clean', () => {
  if (alcoControlTimer) alcoControlTimer = 1;
  if (drugScreenTimer) drugScreenTimer = 1;
});
_custom.CustomEvent.registerServer("drug:use", (time, alco = false) => {
  if (alco) {
    alcoControlTimer += time;
    return;
  }
  if (drugScreenTimer) {
    drugScreenTimer += time;
    return;
  }
  drugScreenTimer += time;
  if (mp.game.graphics.getScreenEffectIsActive('DrugsMichaelAliensFightOut')) mp.game.graphics.stopScreenEffect('DrugsMichaelAliensFightOut');
  mp.game.graphics.startScreenEffect('DrugsMichaelAliensFightIn', 0, true);
});
let currentShakeCam = 0.0;
setInterval(() => {
  if (alcoControlTimer) {
    alcoControlTimer--;
    if (alcoControlTimer) {
      let style = "";
      if (alcoControlTimer > 60) style = "drunk@moderatedrunk_head_up";else if (alcoControlTimer > 30) style = "drunk@slightlydrunk";else style = "drunk@moderatedrunk_head_up";
      user.setTempWalkStyle((user.isMale() ? "move_m@" : "move_f@") + style);
      let time = 0;
      if (drugScreenTimer > 60) time = 1.0;else if (drugScreenTimer > 30) time = 1.5;else time = 2.0;
      if (time !== currentShakeCam) {
        currentShakeCam = time;
        mp.game.cam.shakeGameplayCam("DRUNK_SHAKE", time);
        player.setMotionBlur(true);
      }
      randomControlVeh(alcoControlTimer);
    } else {
      mp.game.cam.shakeGameplayCam("DRUNK_SHAKE", 0.0);
      currentShakeCam = 0.0;
      player.setMotionBlur(false);
    }
  }
  if (!drugScreenTimer) return;
  drugScreenTimer--;
  if (drugScreenTimer && !mp.game.graphics.getScreenEffectIsActive('DrugsMichaelAliensFightIn')) {
    drugScreenTimer = 0;
    return;
  }
  if (drugScreenTimer) {
    randomControlVeh(drugScreenTimer);
  }
  if (!drugScreenTimer) {
    mp.game.graphics.stopScreenEffect('DrugsMichaelAliensFightIn');
    mp.game.graphics.startScreenEffect('DrugsMichaelAliensFightOut', 0, true);
    setTimeout(() => {
      if (drugScreenTimer) return;
      mp.game.graphics.stopScreenEffect('DrugsMichaelAliensFightOut');
    }, 5000);
  }
}, 1000);
const VFX_MODE_DEFAULT = 0;
const VFX_MODE_ALIEN = 1;
const VFX_MODE_CLOWN = 2;
async function requestNamedPtfxAssetAsync(ptfxAssetName) {
  mp.game.streaming.requestNamedPtfxAsset(ptfxAssetName);
  while (!mp.game.streaming.hasNamedPtfxAssetLoaded(ptfxAssetName)) {
    await _system.system.sleep(100);
  }
}
Object.defineProperty(mp.game.graphics, "bloodVfxMode", {
  get() {
    return this._vfxMode || VFX_MODE_DEFAULT;
  },
  async set(value) {
    switch (value) {
      case VFX_MODE_ALIEN:
        await requestNamedPtfxAssetAsync("scr_rcbarry1");
        mp.game.graphics.enableClownBloodVfx(false);
        mp.game.graphics.enableAlienBloodVfx(true);
        break;
      case VFX_MODE_CLOWN:
        await requestNamedPtfxAssetAsync("scr_rcbarry2");
        mp.game.graphics.enableAlienBloodVfx(false);
        mp.game.graphics.enableClownBloodVfx(true);
        break;
      default:
        value = VFX_MODE_DEFAULT;
        mp.game.graphics.enableAlienBloodVfx(false);
        mp.game.graphics.enableClownBloodVfx(false);
        break;
    }
    this._vfxMode = value;
  }
});
let drugChangedModel = false;
setInterval(() => {
  if (!drugScreenTimer && !drugChangedModel) return;
  if (drugScreenTimer) {
    drugChangedModel = true;
    mp.game.graphics.bloodVfxMode = VFX_MODE_CLOWN;
  } else {
    drugChangedModel = false;
    mp.game.graphics.bloodVfxMode = VFX_MODE_DEFAULT;
  }
}, 1000);
const randomControlVeh = effect => {
  const veh = player.vehicle;
  if (veh) {
    if (user.isDriver && veh.getSpeed() * 3.6 > 20 && veh.getSpeedVector(true).y > 0) {
      const vehClass = veh.getClass();
      if (![15, 16, 21, 13].includes(vehClass)) {
        const randInt = _system.system.randomArrayElement([{
          interaction: 27,
          time: 1500
        }, {
          interaction: 6,
          time: 1000
        }, {
          interaction: 7,
          time: 800
        }, {
          interaction: 8,
          time: 800
        }, {
          interaction: 10,
          time: 800
        }, {
          interaction: 11,
          time: 800
        }, {
          interaction: 23,
          time: 2000
        }, {
          interaction: 31,
          time: 2000
        }]);
        let time = 0;
        if (effect > 60) time = 1;else if (effect > 30) time = 0.5;else time = .2;
        player.taskVehicleTempAction(veh.handle, randInt.interaction, randInt.time * time);
      }
    }
  }
};
let RandomVehicleInteraction = [{
  interaction: 27,
  time: 1500
}, {
  interaction: 6,
  time: 1000
}, {
  interaction: 7,
  time: 800
}, {
  interaction: 8,
  time: 800
}, {
  interaction: 10,
  time: 800
}, {
  interaction: 11,
  time: 800
}, {
  interaction: 23,
  time: 2000
}, {
  interaction: 31,
  time: 2000
}];
mp.events.add('playerDeath', () => {
  mp.game.invoke('0xB4EDDC19532BFB85');
  if (player.vehicle) player.setCoords(player.position.x, player.position.y, player.position.z, true, true, true, false);
  screenEffects = [];
});
_custom.CustomEvent.registerServer('addScreenEffect', (name, time) => {
  let item = screenEffects.find(q => q[0] === name);
  if (item) {
    item[1] += time;
  } else {
    screenEffects.push([name, time]);
    mp.game.graphics.startScreenEffect(name, 0, true);
  }
});
_custom.CustomEvent.registerServer('showLoadDisplay', time => {
  user.showLoadDisplay(time);
});
_custom.CustomEvent.registerServer('hideLoadDisplay', time => {
  user.hideLoadDisplay(time);
});
_custom.CustomEvent.registerServer('playScenario', (name, x, y, z, h, teleport) => {
  user.playScenario(name, x, y, z, h, teleport);
});
_custom.CustomEvent.registerServer('loadDating', data => {
  user.myDating = data;
});
_custom.CustomEvent.registerServer('newDating', data => {
  const have = user.myDating.findIndex(q => q[0] === data[0]);
  if (have > -1) {
    const q = [...user.myDating];
    q.splice(have, 1);
    user.myDating = [...q, data];
  } else {
    user.myDating.push(data);
  }
});
_custom.CustomEvent.registerServer('turnToFace', (targetid, duration = -1) => {
  const target = mp.players.atRemoteId(targetid);
  if (!target.handle) return;
  user.stopAnim();
  player.taskTurnToFace(target.handle, duration);
});
_custom.CustomEvent.registerServer('goToCoord', (x, y, z, h, slide = 0) => {
  player.taskTurnToFaceCoord(x, y, z, 100);
  player.taskGoStraightToCoord(x, y, z, 1.0, -1, typeof h === "number" ? h : player.getHeading(), slide);
});
_custom.CustomEvent.register('cef:getIsMale', () => {
  return user.isMale();
});
mp.events.addDataHandler("fraction", async (target, val) => {
  if (target.type != "player") return;
  if (target.remoteId !== player.remoteId) return;
  _custom.CustomEvent.triggerCef('user:fraction', val);
});
mp.events.addDataHandler("rank", async (target, val) => {
  if (target.type != "player") return;
  if (target.remoteId !== player.remoteId) return;
  _custom.CustomEvent.triggerCef('user:rank', val);
});
mp.events.addDataHandler("tag", async (target, val) => {
  if (target.type != "player") return;
  if (target.remoteId !== player.remoteId) return;
  _custom.CustomEvent.triggerCef('user:tag', val);
});
const maxDistance = 350;
const width = 0.03;
const height = 0.0065;
const border = 0.001;
const color = [255, 255, 255, 255];
mp.nametags.enabled = false;
setInterval(() => {
  mp.game.player.setHealthRechargeMultiplier(0.0);
}, 500);
function drawSprite(dict, name, scale, heading, colour, x, y, layer = 0) {
  let resolution = mp.game.graphics.getScreenActiveResolution(0, 0),
    textureResolution = mp.game.graphics.getTextureResolution(dict, name),
    textureScale = [scale[0] * textureResolution.x / resolution.x, scale[1] * textureResolution.y / resolution.y];
  if (mp.game.graphics.hasStreamedTextureDictLoaded(dict)) {
    if (typeof layer === 'number') mp.game.graphics.set2dLayer(layer);
    mp.game.graphics.drawSprite(dict, name, x, y, textureScale[0], textureScale[1], heading, colour.r, colour.g, colour.b, colour.a);
  } else mp.game.graphics.requestStreamedTextureDict(dict, true);
}
mp.events.add('render', nametags => {
  mp.game.player.setHealthRechargeMultiplier(0.0);
  if (!user.login) return;
  if (_gui.gui.currentGui && _gui.gui.currentGui != 'deathpopup') return;
  if (mp.game.invoke('0x475768A975D5AD17', player.handle, 6)) {
    mp.game.controls.disableControlAction(1, 140, true);
    mp.game.controls.disableControlAction(1, 141, true);
    mp.game.controls.disableControlAction(1, 142, true);
  }
  mp.game.controls.disableControlAction(27, 346, true);
  mp.game.controls.disableControlAction(27, 347, true);
  const graphics = mp.game.graphics;
  const screenRes = graphics.getScreenResolution(0, 0);
  if (_admin.adminDataDrawVehicles && !_gui.hideHudStatus) {
    mp.vehicles.forEachInStreamRange(veh => {
      if (_system.system.distanceToPos(veh.position, player.position) < 50 * _admin.adminDataDrawRange) {
        let speed = Math.floor(veh.getSpeed() * 3.6);
        _gui.gui.drawText3D(`ID: ${veh.remoteId} DIM: ${veh.dimension} ${veh.getVariable('modelname')} ${veh.getVariable('fraction') ? `| F: ${veh.getVariable('fraction')}` : ''}\n${speed > 20 ? `Speed: ${speed}kmh` : ''}`, veh.position.x, veh.position.y, veh.position.z);
      }
    });
  }
  if (_gui.hideHudStatus) return;
  mp.game.invoke('0xFF0B610F6BE0D7AF');
  const localPlayerFamily = mp.players.local.getVariable('family');
  nametags.forEach(nametag => {
    let [player, x, y, distance] = nametag;
    if (x < 0.2 || x > 0.8) return;
    if (player.getAlpha() < 10 && !user.isAdminNow()) return;
    const maxDist = user.isAdminNow() ? maxDistance * _admin.adminDataDrawRange : maxDistance;
    if (distance <= maxDist) {
      const id = player.getVariable('id');
      if (!id) return;
      if (!user.isAdminNow() && !mp.players.local.hasClearLosTo(player.handle, 17)) return;
      let scale = distance / maxDistance;
      if (scale < 0.6) scale = 0.6;
      let health = player.getVariable("customHealth") / 100;
      let armour = player.getArmour() / 100;
      y -= scale * (0.005 * (screenRes.y / 1080));
      let text = '';
      if (player.getVariable('enabledAdmin')) text += `~r~ADMIN~w~ `;
      if (player.getVariable('afk')) text += `~r~AFK~w~ `;
      let inMask = !_masks.nonHiddenMasksIds.includes(player.getDrawableVariation(1));
      const targetFraction = player.getVariable('fraction');
      if (targetFraction !== 0 && targetFraction === mp.players.local.getVariable('fraction')) {
        inMask = false;
      }
      const targetFamily = player.getVariable('family');
      const localFamily = mp.players.local.getVariable('family');
      if (targetFamily && targetFamily[0] && localFamily && localFamily[0] && targetFamily[0] == localFamily[0]) {
        inMask = false;
      }
      const poss = player.getVariable('deathLog');
      if (user.isAdminNow() && poss) {
        const posss = poss.map(q => {
          return {
            x: q[0],
            y: q[1],
            z: q[2]
          };
        });
        const pos = posss.find(q => _system.system.distanceToPos(q, player.position) <= _survival2.AFTER_DEATH_RANGE);
        if (pos) {
          text += `~r~DEATH ${_system.system.distanceToPos(pos, player.position).toFixed(0)}m~w~ `;
        }
      }
      if (mp.game.player.isFreeAimingAtEntity(player.handle)) text += '\n';
      let muted = !!player.getVariable('muted:chat') || !!player.getVariable('muted:voice');
      if (!inMask || user.isAdminNow()) {
        text += `\n${muted ? '~c~' : ''}(${id}) ${user.getDating(id, player)}${muted ? '~w~' : ''}`;
      } else {
        text += `\n${muted ? '~c~' : ''}(${id})${muted ? '~w~' : ''}`;
      }
      const f = player.getVariable('fraction');
      const g = player.getVariable('family');
      if (user.isAdminNow() && (_admin.adminDataDrawPlayers || (0, _admin.inSpectatorMode)() == player) && (f || g && g[0])) text += `\n${f ? `F: ${f}  R: ${player.getVariable('rank')} ` : ``}${g && g[0] ? ` G: ${g[0]}` : ``}`;
      if (user.isAdminNow() && (_admin.adminDataDrawPlayers || (0, _admin.inSpectatorMode)() == player)) text += `\nHP: ${player.getVariable("customHealth")}${player.getArmour() ? `AP: ${player.getArmour()}` : ''}`;
      if (player.vehicle) {
        const screenCoords = mp.game.graphics.world3dToScreen2d(player.position.x, player.position.y, player.position.z + 1.2);
        if (!screenCoords) return;
        if (player.isVoiceActive) drawSprite("mpleaderboard", 'leaderboard_audio_3', [0.9, 0.9], 0, {
          r: 255,
          g: 255,
          b: 255,
          a: 255
        }, screenCoords.x, screenCoords.y - 0.01);
        mp.game.graphics.drawText(text, [screenCoords.x, screenCoords.y], {
          font: 4,
          color: [255, 255, 255, 255],
          scale: [0.4, 0.4],
          outline: true,
          centre: true
        });
        if (user.family != 0 && player.getVariable('family') && player.getVariable('family')[0] == user.family) drawSprite("Mpleaderboard", "leaderboard_friends_icon", [0.9, 0.8], 0, {
          r: 255,
          g: 20,
          b: 10,
          a: 220
        }, screenCoords.x, screenCoords.y + 0.06);
      } else {
        if (player.isVoiceActive) drawSprite("mpleaderboard", 'leaderboard_audio_3', [0.9, 0.9], 0, {
          r: 255,
          g: 255,
          b: 255,
          a: 255
        }, x, y - 0.01);
        mp.game.graphics.drawText(text, [x, y], {
          font: 4,
          color: [255, 255, 255, 255],
          scale: [0.4, 0.4],
          outline: true,
          centre: true
        });
        if (user.family != 0 && player.getVariable('family') && player.getVariable('family')[0] == user.family) drawSprite("Mpleaderboard", "leaderboard_friends_icon", [0.9, 0.8], 0, {
          r: 255,
          g: 20,
          b: 10,
          a: 220
        }, x, y + 0.06);
      }
      if (mp.game.player.isFreeAimingAtEntity(player.handle)) {
        let y2 = y + 0.042;
        if (armour > 0) {
          let x2 = x - width / 2 - border / 2;
          graphics.drawRect(x2, y2, width + border * 2, 0.0085, 0, 0, 0, 200);
          graphics.drawRect(x2, y2, width, height, 150, 150, 150, 255);
          graphics.drawRect(x2 - width / 2 * (1 - health), y2, width * health, height, 255, 255, 255, 200);
          x2 = x + width / 2 + border / 2;
          graphics.drawRect(x2, y2, width + border * 2, height + border * 2, 0, 0, 0, 200);
          graphics.drawRect(x2, y2, width, height, 41, 66, 78, 255);
          graphics.drawRect(x2 - width / 2 * (1 - armour), y2, width * armour, height, 48, 108, 135, 200);
        } else {
          graphics.drawRect(x, y2, width + border * 2, height + border * 2, 0, 0, 0, 200);
          graphics.drawRect(x, y2, width, height, 150, 150, 150, 255);
          graphics.drawRect(x - width / 2 * (1 - health), y2, width * health, height, 255, 255, 255, 200);
        }
      }
    }
  });
});
_custom.CustomEvent.registerServer('vip:data', (vip, vipend) => {
  user.vip = vip;
  user.vip_end = vipend;
});
let money;
let chips;
let bank_money;
_custom.CustomEvent.registerServer('setMoney', val => {
  money = val;
  _custom.CustomEvent.triggerCef('cef:hud:setMoney', val);
});
_custom.CustomEvent.registerServer('setChips', val => {
  chips = val;
  _custom.CustomEvent.triggerCef('cef:hud:setChips', val);
});
_custom.CustomEvent.registerServer('setBankMoney', val => {
  bank_money = val;
  _custom.CustomEvent.triggerCef('cef:hud:setMoneyBank', val);
});
_custom.CustomEvent.registerServer('cef:showHelp', text => {
  user.showHelp(text);
});
let showHelpText;
_custom.CustomEvent.registerServer('getAmmo', () => {
  return user.currentAmmo;
});
_custom.CustomEvent.registerServer('tpWaypoint', () => {
  user.teleportWaypoint();
});
_custom.CustomEvent.registerServer('verifyVehModel', model => {
  return mp.game.streaming.isModelAVehicle(mp.game.joaat(model));
});
let helpKey;
let helpKeyText;
const user = exports.user = {
  get chips() {
    return chips;
  },
  get inDriftMap() {
    return _drift.driftMapLoaded;
  },
  openLogs: (ids, name) => {
    _custom.CustomEvent.triggerServer('logs:open', ids, name);
  },
  haveActiveLicense: async lic => {
    return await _custom.CustomEvent.callServer('haveActiveLicense', lic);
  },
  get cuffed() {
    return !!player.getVariable('cuffed');
  },
  get currentAmmo() {
    let ammo = mp.players.local.getAmmoInClip(mp.players.local.weapon);
    if (ammo == 65535) ammo = 0;
    return ammo;
  },
  getNearestPed(r = 5, onlyVisible = true) {
    return user.getNearestPeds(r, onlyVisible)[0];
  },
  getNearestPeds(r = 5, onlyVisible = true) {
    return mp.peds.toArray().filter(ped => ped.dimension == player.dimension && _system.system.distanceToPos(ped.getCoordsAutoAlive(), player.position) <= r && (!onlyVisible || ped.getAlpha() > 20)).sort((a, b) => {
      return _system.system.distanceToPos(a.getCoordsAutoAlive(), player.position) - _system.system.distanceToPos(b.getCoordsAutoAlive(), player.position);
    });
  },
  getNearestPlayer(r = 5, onlyVisible = true) {
    return user.getNearestPlayers(r, onlyVisible)[0];
  },
  getNearestPlayers(r = 5, onlyVisible = true) {
    return mp.players.toArray().filter(tPlayer => tPlayer.dimension == player.dimension && tPlayer.id != player.id && _system.system.distanceToPos(tPlayer.getCoordsAutoAlive(), player.position) <= r && (!onlyVisible || tPlayer.getAlpha() > 20)).sort((a, b) => {
      return _system.system.distanceToPos(a.getCoordsAutoAlive(), player.position) - _system.system.distanceToPos(b.getCoordsAutoAlive(), player.position);
    });
  },
  getNearestPlayersInCoord(position, dimension = 0, r = 5, onlyVisible = true) {
    return mp.players.toArray().filter(tPlayer => tPlayer.dimension == dimension && _system.system.distanceToPos(tPlayer.getCoordsAutoAlive(), position) <= r && (!onlyVisible || tPlayer.getAlpha() > 20)).sort((a, b) => {
      return _system.system.distanceToPos(a.getCoordsAutoAlive(), position) - _system.system.distanceToPos(b.getCoordsAutoAlive(), position);
    });
  },
  isVehicleInSameDimension(vehicle) {
    if (vehicle.dimension == _system.GLOBAL_DIMENSION) return true;
    return vehicle.dimension == player.dimension;
  },
  getNearestVehicle(r = 5) {
    let vehs = mp.vehicles.toArray().filter(veh => this.isVehicleInSameDimension(veh) && _system.system.distanceToPos(veh.getCoordsAutoAlive(), player.position) <= r && !veh.autosalon).sort((a, b) => {
      return _system.system.distanceToPos(a.getCoordsAutoAlive(), player.position) - _system.system.distanceToPos(b.getCoordsAutoAlive(), player.position);
    });
    if (vehs.length > 0) return vehs[0];
  },
  getNearestVehicles(r = 5) {
    return mp.vehicles.toArray().filter(veh => veh.dimension == player.dimension && _system.system.distanceToPos(veh.getCoordsAutoAlive(), player.position) <= r && !veh.autosalon).sort((a, b) => {
      return _system.system.distanceToPos(a.getCoordsAutoAlive(), player.position) - _system.system.distanceToPos(b.getCoordsAutoAlive(), player.position);
    });
  },
  setBlur: (status, transitionTime = 1000) => {
    if (status) mp.game.graphics.transitionToBlurred(transitionTime);else mp.game.graphics.transitionFromBlurred(transitionTime);
  },
  get showHelpText() {
    return showHelpText;
  },
  showHelp: text => {
    if (showHelpText !== text) _custom.CustomEvent.triggerCef('cef:showHelp', text);
    showHelpText = text;
  },
  get name() {
    return player.getVariable('name');
  },
  get money() {
    return money;
  },
  get money_bank() {
    return bank_money;
  },
  get walkingWithObject() {
    return player.getVariable('walkingWithObject');
  },
  teleportWaypoint: () => {
    try {
      let entity = mp.players.local.vehicle && mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle ? mp.players.local.vehicle : mp.players.local;
      let pos = _system.system.getWaypointPosition();
      if (pos.x != 0) {
        user.teleport(pos.x, pos.y, pos.z);
        setTimeout(async () => {
          let fnd = false;
          for (let q = -40; q < 500 && !fnd; q += 100) {
            if (!fnd) {
              mp.game.streaming.requestCollisionAtCoord(pos.x, pos.y, q);
              entity.setCoordsNoOffset(pos.x, pos.y, q, false, false, false);
              const z = mp.game.gameplay.getGroundZFor3dCoord(pos.x, pos.y, q, 0.0, false);
              if (z) {
                fnd = true;
                entity.setCoordsNoOffset(pos.x, pos.y, z, false, false, false);
              } else {
                await _system.system.sleep(100);
              }
            }
          }
        }, _system.system.TELEPORT_TIME + 200);
      }
    } catch (e) {
      mp.console.logError(e);
    }
  },
  get isDriver() {
    const veh = player.vehicle;
    if (!veh) return false;
    if (veh.getPedInSeat(-1) !== player.handle) return false;
    return true;
  },
  get myWalkstyle() {
    return 0;
  },
  get walkStyle() {
    return player.getVariable('walkstyle');
  },
  set walkStyle(val) {},
  setTempWalkStyle(val) {
    if (user.walkStyle == val) return;
    _custom.CustomEvent.triggerServer('setWalkstyle', val);
  },
  get afk() {
    return !!player.getVariable('afk');
  },
  set afk(val) {
    _custom.CustomEvent.triggerServer('afk:status', val);
  },
  vip: null,
  vip_end: 0,
  get vipData() {
    if (!user.vip) return null;
    if (_system.system.timestamp > user.vip_end) return null;
    const cfg = (0, _vip.getVipConfig)(this.vip);
    if (!cfg) return null;
    const end = user.vip_end;
    return _objectSpread(_objectSpread({}, cfg), {}, {
      end
    });
  },
  get free() {
    if (user.dead) return false;
    if (!user.login) return false;
    if (player.isUsingAnyScenario()) return false;
    if (player.isReloading()) return false;
    return true;
  },
  copyText: text => {
    _custom.CustomEvent.triggerCef('cef:copytext', text);
  },
  cheatDetect: (type, reason) => {
    if (sendEventsCheat.has(type)) return;
    sendEventsCheat.set(type, true);
    setTimeout(() => {
      sendEventsCheat.delete(type);
    }, 3000);
    _custom.CustomEvent.triggerServer('anticheat:detect', type, reason);
  },
  myDating: [],
  getDating: (id, target) => {
    if (!target) return;
    const targetFraction = target.getVariable('fraction');
    const targetRank = target.getVariable('rank');
    const targetFamily = target.getVariable('family');
    const isTargetMedia = target.getVariable('media');
    const localPlayerFamily = mp.players.local.getVariable('family');
    if (target && user.isAdminNow()) {
      if (target.getVariable('enabledAdmin') && target.getVariable('adminName')) return target.getVariable('adminName');
      if (isTargetMedia) return `~p~` + target.getVariable('name');
      if (targetFraction && targetRank && _fractions.fractionCfg.getLeaderRank(targetFraction) === targetRank) return `~g~` + target.getVariable('name');
      return target.getVariable('name');
    }
    const data = user.myDating.find(q => q[0] === id);
    return target && target.getVariable('enabledAdmin') && target.getVariable('adminName') ? target.getVariable('adminName') : data ? data[1] : targetFraction && targetFraction === player.getVariable('fraction') ? target.getVariable('name') : user.family && targetFamily && targetFamily[0] == user.family ? target.getVariable('name') : '';
  },
  setHelpKey(key, text, time) {
    if (!time && key == helpKey && helpKeyText === text) return;
    helpKey = key;
    helpKeyText = text;
    _custom.CustomEvent.triggerCef('cef:alert:setHelpKey', key, text);
    if (!time) return;
    setTimeout(() => {
      if (!this.exists) return;
      this.removeHelpKey();
    }, time);
  },
  notifyBig(title, text, time = 5000) {
    _custom.CustomEvent.triggerCef('cef:notifyBig', title, text, time);
  },
  removeHelpKey() {
    if (helpKey || helpKeyText) _custom.CustomEvent.triggerCef('cef:alert:removeHelpKey');
    helpKey = null;
    helpKeyText = null;
  },
  clearWaypointHistoryByName: name => {
    _custom.CustomEvent.triggerCef('gps:clearHistory', name);
  },
  addWaypointHistory: (x, y, z, name) => {
    _custom.CustomEvent.triggerCef('gps:chatNotify', name, x, y, z);
  },
  setWaypoint: (x, y, z, notify = true, chatNotify) => {
    mp.game.ui.setNewWaypoint(x, y);
    if (chatNotify) {
      user.addWaypointHistory(x, y, z, chatNotify);
    }
    if (!notify || mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, 0, x, y, 0, true) < 1) return;
    user.notify('Метка в GPS была установлена', "success");
  },
  getWaypoint: () => {
    let pos = new mp.Vector3(0, 0, 0);
    if (mp.game.invoke('0x1DD1F58F493F1DA5')) {
      let blipInfoIdIterator = mp.game.invoke('0x186E5D252FA50E7D');
      for (let index = mp.game.invoke('0x1BEDE233E6CD2A1F', blipInfoIdIterator); mp.game.invoke('0xA6DB27D19ECBB7DA', index); index = mp.game.invoke('0x14F96AA50D6FBEA7', blipInfoIdIterator)) if (mp.game.invoke('0xBE9B0959FFD0779B', index) == 4) pos = mp.game.ui.getBlipInfoIdCoord(index);
      pos.z += 1550;
    }
    return pos.x != 0 || pos.y != 0 || pos.z != 0 ? pos : null;
  },
  clearWaypoint: () => {
    mp.game.invoke('0xD8E694757BCEA8E9');
  },
  playScenario: (name, x, y, z, h, teleport) => {
    if (name && x && y && z && h) {
      player.clearTasksImmediately();
      player.taskStartScenarioAtPosition(name, x, y, z, h, -1, !!!teleport && name == "PROP_HUMAN_SEAT_BENCH", !!teleport);
    } else if (name == 'PROP_HUMAN_SEAT_BENCH') {
      user.stopAnim();
      let pos = player.getOffsetFromInWorldCoords(0, -0.5, -0.5);
      let heading = player.getRotation(0).z;
      player.taskStartScenarioAtPosition(name, pos.x, pos.y, pos.z, heading, -1, true, false);
    } else {
      user.stopAnim();
      player.taskStartScenarioInPlace(name, 0, true);
    }
  },
  goToCoord: (pos, heading, speed = 1.0) => {
    return new Promise(async resolve => {
      const seqId = [228];
      mp.game.invoke(_system.system.natives.OPEN_SEQUENCE_TASK, seqId);
      mp.game.invoke(_system.system.natives.TASK_GO_STRAIGHT_TO_COORD, 0, pos.x, pos.y, pos.z, 1.0, -1, heading + 0.001, 0.05);
      mp.game.invoke(_system.system.natives.CLOSE_SEQUENCE_TASK, seqId[0]);
      mp.game.invoke(_system.system.natives.TASK_PERFORM_SEQUENCE, player.handle, seqId[0]);
      mp.game.invoke(_system.system.natives.CLEAR_SEQUENCE_TASK, seqId);
      await _system.system.sleep(500);
      let fail = false;
      let nearest = 0;
      let timer = setTimeout(() => {
        fail = true;
      }, 10000);
      while (mp.game.invoke(_system.system.natives.GET_SEQUENCE_PROGRESS, player.handle) != -1 && !fail) {
        if (_system.system.distanceToPos(player.position, pos) < 0.5) nearest++;
        if (nearest >= 200) fail = false;
        await _system.system.sleep(10);
      }
      if (!fail) clearTimeout(timer);
      return resolve(!fail);
    });
  },
  playExitCasinoAnim: () => {
    return new Promise(resolve => {
      _custom.CustomEvent.triggerServer('casino:freeze', null);
      const {
        x,
        y,
        z
      } = player.position;
      const pos = player.getOffsetFromInWorldCoords(0.0, -1.5, 0.0);
      user.playAnim([[_main.EXIT_ANIM[0], _main.EXIT_ANIM[1]]], false, false).then(q => {
        const dist = _system.system.distanceToPos(player.position, {
          x,
          y,
          z
        });
        const dist2 = _system.system.distanceToPos(player.position, pos);
        if (dist2 > dist) player.setCoordsNoOffset(pos.x, pos.y, pos.z, true, true, true);
        resolve(q);
      });
    });
  },
  playEnterCasinoAnim: pos => {
    return new Promise(resolve => {
      user.playAnim([[_main.ENTER_ANIM[0], _main.ENTER_ANIM[1]]], false, false).then(q => {
        const {
          x,
          y,
          z
        } = pos ? pos : mp.players.local.position;
        _custom.CustomEvent.triggerServer('casino:freeze', {
          x,
          y,
          z
        });
        resolve(q);
      });
    });
  },
  playAnim: (seq, upper = false, lopping = false, target) => {
    if (typeof target === "number") return (0, _anim.playAnims)(target, seq, upper, lopping);
    if (!upper) return (0, _anim.playAnims)(player.remoteId, seq, upper, lopping);else _custom.CustomEvent.triggerServer('user:playAnimation', seq, upper, lopping);
  },
  stopAnim: () => {
    if ((0, _roulette.inCasinoRoulette)()) return;
    if (_slots.currentSlotData.inGame) return;
    if ((0, _dice.inDiceGame)()) return;
    if (player.getVariable('inVehicleTruck')) return;
    if (player.isReloading()) return;
    if (player.getVariable('follow')) return;
    player.clearTasks();
    if (_anim.myLastAnimUpper) {
      _custom.CustomEvent.triggerServer('anim:stop');
      (0, _anim.myLastAnimUpperClear)();
    }
  },
  disableAllControlsSystem: status => {
    (0, _controls.disableAllControlSystemStatus)(status);
  },
  interrior: 0,
  get healing() {
    return _survival.hospitalTimer > 0;
  },
  get inInterrior() {
    return !!!mp.game.interior.areCoordsCollidingWithExterior(player.position.x, player.position.y, player.position.z);
  },
  get dead() {
    return mp.players.local.isDead() || mp.players.local.getHealth() <= 0;
  },
  get id() {
    return player.getVariable('id') || -1;
  },
  get fraction() {
    return player.getVariable('fraction');
  },
  get fractionData() {
    return user.fraction ? _fractions.fractionCfg.getFraction(user.fraction) : null;
  },
  get family() {
    return player.getVariable('family') ? player.getVariable('family')[0] : 0;
  },
  get familyRank() {
    return player.getVariable('family')[1];
  },
  get rank() {
    return player.getVariable('rank');
  },
  get is_gos() {
    if (!user.fraction) return false;
    const data = _fractions.fractionCfg.getFraction(user.fraction);
    return data ? !!data.gos : false;
  },
  get is_police() {
    if (!user.fraction) return false;
    const data = _fractions.fractionCfg.getFraction(user.fraction);
    return data ? !!data.police : false;
  },
  get is_gang() {
    if (!user.fraction) return false;
    const data = _fractions.fractionCfg.getFraction(user.fraction);
    return data ? !!data.gang : false;
  },
  get is_mafia() {
    if (!user.fraction) return false;
    const data = _fractions.fractionCfg.getFraction(user.fraction);
    return data ? !!data.mafia : false;
  },
  hasPermission: name => {
    let perm = _permissions.permissions[name];
    if (!perm) return false;
    if (user.isAdminNow(7)) return true;
    if (perm.admin_level && !user.isAdminNow(perm.admin_level)) return false;
    if (perm.fractions) {
      if (!perm.fractions.includes(user.fraction)) return false;
    }
    if (perm.rank && perm.rank > user.rank) return false;
    if (user.fraction && perm.rankLast) {
      const fraction = user.fractionData;
      if (!fraction) return false;
      if (fraction.ranks.length + 1 - perm.rankLast > user.rank) return false;
    }
    if (perm.gos && !user.is_gos) return false;
    return true;
  },
  login: false,
  trackSuspect: -1,
  trackSuspectLastTime: 0,
  notify: (text, type = "info", img, time = _alert.DEFAULT_ALERT_TIME, title) => {
    text = _system.system.filterInput(text);
    text = text.trim();
    _custom.CustomEvent.triggerCef('cef:alert:setAlert', type, text, img, time, title);
  },
  get enabledAdmin() {
    let enabled = player.getVariable('enabledAdmin') && user.admin_level > 0;
    mp.players.local.setInvincible(!!enabled);
    return !!player.getVariable('enabledAdmin');
  },
  set enabledAdmin(value) {
    if (user.admin_level == 0) return;
    _custom.CustomEvent.triggerServer('enableAdmin', value);
    if (!value && !user.family) _custom.CustomEvent.trigger('family:cargoBattle:stopAll');
  },
  isAdminNow(level = 1) {
    if (!user.enabledAdmin) return false;
    if (!user.admin_level) return false;
    if (typeof level === 'number') return user.admin_level >= level;
  },
  get admin_level() {
    return player.getVariable('admin_level');
  },
  get test() {
    return test;
  },
  getSex: (target = mp.players.local) => {
    if (target.model === mp.game.joaat('mp_f_freemode_01')) return "F";else if (target.model === mp.game.joaat('mp_m_freemode_01')) return "M";
  },
  isMale: (target = mp.players.local) => user.getSex(target) == "M",
  isFeemale: (target = mp.players.local) => user.getSex(target) == "F",
  teleport: async (x, y, z, h) => {
    user.showLoadDisplay();
    player.freezePosition(true);
    await _system.system.sleep(_system.system.TELEPORT_TIME);
    player.setCoords(x, y, z, true, true, true, true);
    if (typeof h === "number") player.setHeading(h), mp.game.cam.setGameplayCamRelativeHeading(0);
    _camera.cameraManager.destroyCam();
    await _system.system.sleep(1000);
    player.freezePosition(false);
    user.hideLoadDisplay();
    mp.events.call('teleportEnd');
  },
  teleportVisible: async h => {
    user.showLoadDisplay();
    await _system.system.sleep(_system.system.TELEPORT_TIME);
    if (typeof h === "number") mp.game.cam.setGameplayCamRelativeHeading(0);
    _camera.cameraManager.destroyCam();
    await _system.system.sleep(500);
    user.hideLoadDisplay();
  },
  hideLoadDisplay: (duration = 500, hud = true) => {
    _custom.CustomEvent.triggerCef('fadeOut', duration);
  },
  showLoadDisplay: (duration = 500, hud = true) => {
    _custom.CustomEvent.triggerCef('fadeIn', duration);
  },
  getLocalSkinData,
  getFullLocalSkinData: () => {
    return characterLocalSkinData;
  },
  setLocalSkinData,
  setPlayerModel: model => {
    _custom.CustomEvent.triggerServer('server:user:setPlayerModel', model);
  },
  updateCharacterFace: (isLocal = false) => {
    if (!isLocal) return _custom.CustomEvent.triggerServer('server:user:updateCharacterFace');
    player.setHeadBlendData(user.getLocalSkinData('SHAPE_THRID_ID'), user.getLocalSkinData('SHAPE_SECOND_ID'), 0, user.getLocalSkinData('SKIN_THRID_ID'), user.getLocalSkinData('SKIN_SECOND_ID'), 0, user.getLocalSkinData('SHAPE_MIX'), user.getLocalSkinData('SKIN_MIX'), 0, true);
    let features = user.getLocalSkinData('FACE_SPECIFICATIONS');
    if (features) {
      features.forEach((item, id) => {
        player.setFaceFeature(id, item);
      });
    }
    player.setComponentVariation(2, user.getLocalSkinData('HAIR'), 0, 2);
    player.setHeadOverlay(2, user.getLocalSkinData('EYEBROWS'), user.getLocalSkinData('EYEBROWS_OPACITY'), user.getLocalSkinData('EYEBROWS_COLOR'), 0);
    player.setHairColor(user.getLocalSkinData('HAIR_COLOR'), user.getLocalSkinData('HAIR_COLOR2'));
    player.setEyeColor(user.getLocalSkinData('EYE_COLOR'));
    player.setHeadOverlay(9, user.getLocalSkinData('OVERLAY9'), user.getLocalSkinData('OVERLAY9_OPACITY'), user.getLocalSkinData('OVERLAY9_COLOR'), 0);
    if (user.getSex() == "M") {
      if (user.getLocalSkinData('OVERLAY10') != -1) player.setHeadOverlay(10, user.getLocalSkinData('OVERLAY10'), 1.0, user.getLocalSkinData('OVERLAY10_COLOR'), 0);
      player.setHeadOverlay(1, user.getLocalSkinData('OVERLAY'), user.getLocalSkinData('OVERLAY_OPACITY'), 1, 1);
    } else if (user.getSex() == "F") {
      if (user.getLocalSkinData('OVERLAY4') != -1) player.setHeadOverlay(4, user.getLocalSkinData('OVERLAY4'), user.getLocalSkinData('OVERLAY4_OPACITY') || 1.0, user.getLocalSkinData('OVERLAY4_COLOR'), 0);
      if (user.getLocalSkinData('OVERLAY5') != -1) player.setHeadOverlay(5, user.getLocalSkinData('OVERLAY5'), 1.0, user.getLocalSkinData('OVERLAY5_COLOR'), 0);
      if (user.getLocalSkinData('OVERLAY8') != -1) player.setHeadOverlay(8, user.getLocalSkinData('OVERLAY8'), 1.0, user.getLocalSkinData('OVERLAY8_COLOR'), 0);
      if (user.getLocalSkinData('BLUSH')) {
        player.setHeadOverlay(5, user.getLocalSkinData('BLUSH'), user.getLocalSkinData('BLUSH_OPACITY') || 0.0, user.getLocalSkinData('BLUSH_COLOR') || 0, 0);
      }
    }
    if (user.getLocalSkinData('LIPS')) {
      player.setHeadOverlay(8, user.getLocalSkinData('LIPS'), user.getLocalSkinData('LIPS_OPACITY') || 0.0, user.getLocalSkinData('LIPS_COLOR') || 0, 0);
    }
  }
};
mp.events.add('teleport', async (x, y, z, h) => {
  await user.teleport(x, y, z, h);
});
mp.events.add('teleportVisible', async h => {
  await user.teleportVisible(h);
});
let test = false;
mp.events.add('setLogin', (signatureKey, announce, ip) => {
  user.login = true;
  test = announce;
  mp.players.local.setMeleeWeaponDamageModifier = _ => {
    _custom.CustomEvent.triggerServer('anticheat:detect', "weapon", "Подозрение на увеличенный урон холодного оружия");
  };
  mp.players.local.setWeaponDamageModifier = _ => {
    _custom.CustomEvent.triggerServer('anticheat:detect', "weapon", "Подозрение на увеличенный урон оружия");
  };
  mp.players.local.setWeaponDefenseModifier = _ => {
    _custom.CustomEvent.triggerServer('anticheat:detect', "weapon", "Подозрение на увеличенный урон");
  };
  _custom.CustomEvent.triggerCef('signatureKey', signatureKey, announce, ip);
});
_custom.CustomEvent.registerSocket('test', data => {
  user.notify(data);
});
let cuff_follow = exports.cuff_follow = false;
mp.events.add('entityStreamIn', player => {
  if (!player.getVariable('follow')) {
    return;
  }
  handlePlayerFollow(player);
});
mp.events.addDataHandler('follow', player => {
  if (!player.handle) {
    return;
  }
  handlePlayerFollow(player);
});
function handlePlayerFollow(player) {
  const targetId = player.getVariable('follow');
  if (!targetId) {
    player.clearTasks();
    return;
  }
  const followTarget = mp.players.atRemoteId(targetId - 1);
  if (!(followTarget !== null && followTarget !== void 0 && followTarget.handle)) {
    return;
  }
  player.taskFollowToOffsetOf(followTarget.handle, 0, 0, 0, 1.0, -1, 1, true);
}
setInterval(() => {
  const targetid = player.getVariable('follow');
  if (cuff_follow && !targetid) {
    user.stopAnim();
    exports.cuff_follow = cuff_follow = false;
    return;
  } else if (targetid) {
    const target = mp.players.atRemoteId(targetid - 1);
    if (!target) return;
    if (!target.handle) return;
    const pos = target.position;
    if (!pos) return;
    if (_system.system.distanceToPos(pos, player.position) < 2) return;
    player.taskFollowToOffsetOf(target.handle, 0, 0, 0, 1.0, -1, 1, true);
  }
}, 1000);
let myWeapons = exports.myWeapons = void 0;
let myWeaponsHash = exports.myWeaponsHash = void 0;
let myWeaponsHashStr = exports.myWeaponsHashStr = _system.system.randomStr(10);
const clearAllWeapons = () => {
  exports.myWeapons = myWeapons = null;
  exports.myWeaponsHash = myWeaponsHash = null;
  player.removeAllWeapons();
  player.giveWeapon(-1569615261, 1, true);
  if (player.getVariable('currentWeapon')) _custom.CustomEvent.triggerServer('clearcurrentWeapon');
};
exports.clearAllWeapons = clearAllWeapons;
const getHashWeapon = weapon => {
  let hash = _anticheat.weapon_hashes.find(q => q[0].toUpperCase() === String(weapon).toUpperCase() || q[1] === weapon || mp.game.joaat(q[0]) === weapon);
  return hash ? hash[1] : null;
};
_custom.CustomEvent.registerServer('user:removeWeapon', () => {
  clearAllWeapons();
});
_custom.CustomEvent.registerServer('user:giveWeapon', (weapon, ammo, equipNow = true) => {
  let hash = typeof weapon === "number" ? weapon : getHashWeapon(weapon);
  if (!hash) return user.notify('bad hash');
  exports.myWeapons = myWeapons = hash;
  exports.myWeaponsHash = myWeaponsHash = _system.system.encryptCodes(myWeapons.toString(), myWeaponsHashStr);
  player.giveWeapon(hash, ammo, equipNow);
});
const giveWeaponLocally = (weapon, ammo, equipNow = true) => {
  let hash = typeof weapon === "number" ? weapon : getHashWeapon(weapon);
  exports.myWeapons = myWeapons = hash;
  exports.myWeaponsHash = myWeaponsHash = _system.system.encryptCodes(myWeapons.toString(), myWeaponsHashStr);
  player.giveWeapon(hash, ammo, equipNow);
};
exports.giveWeaponLocally = giveWeaponLocally;
let nowPutIntoVehicle = exports.nowPutIntoVehicle = 0;
const nowPutIntoVehicleBlock = () => {
  _nowPutIntoVehicle = nowPutIntoVehicle++, exports.nowPutIntoVehicle = nowPutIntoVehicle, _nowPutIntoVehicle;
  setTimeout(() => {
    _nowPutIntoVehicle2 = nowPutIntoVehicle--, exports.nowPutIntoVehicle = nowPutIntoVehicle, _nowPutIntoVehicle2;
  }, 1000);
};
exports.nowPutIntoVehicleBlock = nowPutIntoVehicleBlock;
_custom.CustomEvent.registerServer('user:leaveVehicle', (flag = 16) => {
  if (!player.vehicle) return;
  player.taskLeaveVehicle(player.vehicle.handle, flag);
});
_custom.CustomEvent.registerServer('user:putIntoVehicle', async (vehid, seat) => {
  seat -= 1;
  const veh = mp.vehicles.atRemoteId(vehid);
  if (!veh) return;
  let count = 0;
  while (!veh.handle && count < 10) {
    count += 1;
    await _system.system.sleep(500);
  }
  if (!veh.handle) return;
  _nowPutIntoVehicle3 = nowPutIntoVehicle++, exports.nowPutIntoVehicle = nowPutIntoVehicle, _nowPutIntoVehicle3;
  player.setIntoVehicle(veh.handle, seat);
  setTimeout(() => {
    _nowPutIntoVehicle4 = nowPutIntoVehicle--, exports.nowPutIntoVehicle = nowPutIntoVehicle, _nowPutIntoVehicle4;
  }, 1000);
});
},{"./system":"pi2J","./camera":"h8FB","../../shared/character":"TaDG","./custom.event":"py8h","../../shared/alert":"p1MO","../../shared/permissions":"yoce","./survival":"nroP","./anim":"stJJ","./gui":"bk91","./controls":"yuOK","../../shared/masks":"lYa9","../../shared/anticheat":"e4XL","../../shared/vip":"ngv5","./admin":"s4Xg","../../shared/survival":"axP1","./drift":"azP4","./casino/roulette":"YFCp","./casino/dice":"UScX","./casino/slots":"scHn","../../shared/casino/main":"FJpA","./fractions":"ZnXR"}],"FjA8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nailsConfig = exports.getComponentCost = exports.getCatalogIdByComponent = exports.getBarberItemDeafaultCost = exports.barberCatalogBase = exports.NAILS_COMPONENT_ID = exports.BarberShopItemIds = exports.BarberShopCost = exports.BarberCatalogNames = void 0;
var BarberShopCost;
(function (BarberShopCost) {
  BarberShopCost[BarberShopCost["hair"] = 800] = "hair";
  BarberShopCost[BarberShopCost["paint"] = 650] = "paint";
  BarberShopCost[BarberShopCost["lenses"] = 400] = "lenses";
  BarberShopCost[BarberShopCost["nails"] = 50000] = "nails";
})(BarberShopCost || (exports.BarberShopCost = BarberShopCost = {}));
var BarberShopItemIds;
(function (BarberShopItemIds) {
  BarberShopItemIds[BarberShopItemIds["HAIR"] = 1] = "HAIR";
  BarberShopItemIds[BarberShopItemIds["PAINT"] = 2] = "PAINT";
  BarberShopItemIds[BarberShopItemIds["LENSES"] = 3] = "LENSES";
  BarberShopItemIds[BarberShopItemIds["NAILS"] = 4] = "NAILS";
})(BarberShopItemIds || (exports.BarberShopItemIds = BarberShopItemIds = {}));
const getItemIdCost = (data, id, defaultValue = 0) => {
  return data.find(q => q.item === id) ? data.find(q => q.item === id).price : defaultValue;
};
const getBarberItemDeafaultCost = item => {
  if (item === BarberShopItemIds.HAIR) return BarberShopCost.hair;else if (item === BarberShopItemIds.PAINT) return BarberShopCost.paint;else if (item === BarberShopItemIds.LENSES) return BarberShopCost.lenses;else if (item === BarberShopItemIds.NAILS) return BarberShopCost.nails;
};
exports.getBarberItemDeafaultCost = getBarberItemDeafaultCost;
const getComponentCost = (component, data = []) => {
  if (['hair', 'beard', 'beardOpacity', 'eyebrows', 'eyebrowOpacity'].includes(component)) return getItemIdCost(data, BarberShopItemIds.HAIR, BarberShopCost.hair);
  if (['eyecolor'].includes(component)) return getItemIdCost(data, BarberShopItemIds.LENSES, BarberShopCost.lenses);
  if (['nails'].includes(component)) return getItemIdCost(data, BarberShopItemIds.NAILS, BarberShopCost.nails);
  return getItemIdCost(data, BarberShopItemIds.PAINT, BarberShopCost.paint);
};
exports.getComponentCost = getComponentCost;
const getCatalogIdByComponent = component => {
  if (['hair', 'beard', 'beardOpacity', 'eyebrows', 'eyebrowOpacity'].includes(component)) return BarberShopItemIds.HAIR;
  if (['eyecolor'].includes(component)) return BarberShopItemIds.LENSES;
  if (['nails'].includes(component)) return BarberShopItemIds.NAILS;
  return BarberShopItemIds.PAINT;
};
exports.getCatalogIdByComponent = getCatalogIdByComponent;
const BarberCatalogNames = exports.BarberCatalogNames = ['Волосы', 'Краска для волос', 'Линзы'];
const barberCatalogBase = exports.barberCatalogBase = [{
  item: BarberShopItemIds.HAIR,
  price: BarberShopCost.hair,
  count: 10,
  max_count: 10
}, {
  item: BarberShopItemIds.PAINT,
  price: BarberShopCost.paint,
  count: 10,
  max_count: 10
}, {
  item: BarberShopItemIds.LENSES,
  price: BarberShopCost.lenses,
  count: 10,
  max_count: 10
}];
const NAILS_COMPONENT_ID = exports.NAILS_COMPONENT_ID = 10;
const nailsConfig = exports.nailsConfig = [{
  Id: -1,
  Drawable: 0,
  Texture: 0
}, {
  Id: 1,
  Drawable: 89,
  Texture: 0
}, {
  Id: 2,
  Drawable: 89,
  Texture: 1
}, {
  Id: 3,
  Drawable: 89,
  Texture: 2
}, {
  Id: 4,
  Drawable: 89,
  Texture: 3
}, {
  Id: 5,
  Drawable: 89,
  Texture: 4
}, {
  Id: 6,
  Drawable: 89,
  Texture: 5
}, {
  Id: 7,
  Drawable: 89,
  Texture: 6
}, {
  Id: 8,
  Drawable: 89,
  Texture: 7
}, {
  Id: 9,
  Drawable: 89,
  Texture: 8
}, {
  Id: 10,
  Drawable: 89,
  Texture: 9
}, {
  Id: 11,
  Drawable: 89,
  Texture: 10
}, {
  Id: 12,
  Drawable: 90,
  Texture: 0
}, {
  Id: 13,
  Drawable: 90,
  Texture: 1
}, {
  Id: 14,
  Drawable: 90,
  Texture: 2
}, {
  Id: 15,
  Drawable: 90,
  Texture: 3
}, {
  Id: 16,
  Drawable: 90,
  Texture: 4
}, {
  Id: 17,
  Drawable: 90,
  Texture: 5
}, {
  Id: 18,
  Drawable: 90,
  Texture: 6
}, {
  Id: 19,
  Drawable: 90,
  Texture: 7
}, {
  Id: 20,
  Drawable: 90,
  Texture: 8
}, {
  Id: 21,
  Drawable: 90,
  Texture: 9
}, {
  Id: 22,
  Drawable: 90,
  Texture: 10
}, {
  Id: 23,
  Drawable: 91,
  Texture: 0
}, {
  Id: 24,
  Drawable: 91,
  Texture: 1
}, {
  Id: 25,
  Drawable: 91,
  Texture: 2
}, {
  Id: 26,
  Drawable: 91,
  Texture: 3
}, {
  Id: 27,
  Drawable: 91,
  Texture: 4
}, {
  Id: 28,
  Drawable: 91,
  Texture: 5
}, {
  Id: 29,
  Drawable: 91,
  Texture: 6
}, {
  Id: 30,
  Drawable: 91,
  Texture: 7
}, {
  Id: 31,
  Drawable: 91,
  Texture: 8
}, {
  Id: 32,
  Drawable: 91,
  Texture: 9
}, {
  Id: 33,
  Drawable: 92,
  Texture: 0
}, {
  Id: 34,
  Drawable: 92,
  Texture: 1
}, {
  Id: 35,
  Drawable: 92,
  Texture: 2
}, {
  Id: 36,
  Drawable: 92,
  Texture: 3
}, {
  Id: 37,
  Drawable: 92,
  Texture: 4
}, {
  Id: 38,
  Drawable: 92,
  Texture: 5
}, {
  Id: 39,
  Drawable: 92,
  Texture: 6
}, {
  Id: 40,
  Drawable: 92,
  Texture: 7
}, {
  Id: 41,
  Drawable: 92,
  Texture: 8
}, {
  Id: 42,
  Drawable: 92,
  Texture: 9
}, {
  Id: 43,
  Drawable: 92,
  Texture: 10
}, {
  Id: 44,
  Drawable: 93,
  Texture: 0
}, {
  Id: 45,
  Drawable: 93,
  Texture: 1
}, {
  Id: 46,
  Drawable: 93,
  Texture: 2
}, {
  Id: 47,
  Drawable: 93,
  Texture: 3
}, {
  Id: 48,
  Drawable: 93,
  Texture: 4
}, {
  Id: 49,
  Drawable: 93,
  Texture: 5
}, {
  Id: 50,
  Drawable: 93,
  Texture: 6
}, {
  Id: 51,
  Drawable: 93,
  Texture: 7
}, {
  Id: 52,
  Drawable: 93,
  Texture: 8
}, {
  Id: 53,
  Drawable: 93,
  Texture: 9
}, {
  Id: 54,
  Drawable: 94,
  Texture: 0
}, {
  Id: 55,
  Drawable: 94,
  Texture: 1
}, {
  Id: 56,
  Drawable: 94,
  Texture: 2
}, {
  Id: 57,
  Drawable: 94,
  Texture: 3
}, {
  Id: 58,
  Drawable: 94,
  Texture: 4
}, {
  Id: 59,
  Drawable: 94,
  Texture: 5
}, {
  Id: 60,
  Drawable: 94,
  Texture: 6
}, {
  Id: 61,
  Drawable: 94,
  Texture: 7
}, {
  Id: 62,
  Drawable: 94,
  Texture: 8
}, {
  Id: 63,
  Drawable: 94,
  Texture: 9
}, {
  Id: 64,
  Drawable: 94,
  Texture: 10
}, {
  Id: 65,
  Drawable: 95,
  Texture: 0
}, {
  Id: 66,
  Drawable: 95,
  Texture: 1
}, {
  Id: 67,
  Drawable: 95,
  Texture: 2
}, {
  Id: 68,
  Drawable: 95,
  Texture: 3
}, {
  Id: 69,
  Drawable: 95,
  Texture: 4
}, {
  Id: 70,
  Drawable: 95,
  Texture: 5
}, {
  Id: 71,
  Drawable: 95,
  Texture: 6
}, {
  Id: 72,
  Drawable: 95,
  Texture: 7
}, {
  Id: 73,
  Drawable: 95,
  Texture: 8
}, {
  Id: 74,
  Drawable: 95,
  Texture: 9
}];
},{}],"X7UN":[function(require,module,exports) {
"use strict";

var _system = require("./system");
var _user = require("./user");
var _gui = require("./gui");
var _custom = require("./custom.event");
var _character = require("../../shared/character");
var _controls = require("./controls");
var _protection = require("./protection");
var _barbershop = require("../../shared/barbershop");
const player = mp.players.local;
let personageCam = null;
let currentCamCoords = null;
let currentCamDist = 0.2;
let currentCamRot = -2;
let camHeights = [-1.2, 0.7];
let camHeightsCurrent = 0.0;
let mouseMoveBlock;
mp.events.add({
  'client:user:personage:start': async () => {
    const skin = _character.defaultCharacterData;
    for (let param in skin) {
      _user.user.setLocalSkinData(param, skin[param]);
    }
    player.clearAllProps();
    _user.user.showLoadDisplay();
    await _system.system.sleep(500);
    _user.user.hideLoadDisplay();
    personageCam = mp.cameras.new('customization', _character.PERSONAGE_CAMERA_POS, new mp.Vector3(0, 0, 0), 20);
    personageCam.pointAtCoord(_character.PERSONAGE_CAMERA_POS_POINT.x, _character.PERSONAGE_CAMERA_POS_POINT.y, _character.PERSONAGE_CAMERA_POS_POINT.z);
    personageCam.setActive(true);
    mp.game.cam.renderScriptCams(true, false, 0, false, false);
    mp.gui.chat.activate(false);
    mp.gui.chat.show(false);
    mp.gui.cursor.show(true, true);
    mp.game.invoke('0x31B73D1EA9F01DA2');
    setTimeout(() => {
      mp.game.invoke('0x31B73D1EA9F01DA2');
    }, 100);
    _gui.gui.setGui('personage');
    (0, _controls.tempCursorStatus)(true);
    mp.players.local.position = _character.PERSONAGE_POS;
    (0, _protection.teleportAnticheat)(_character.PERSONAGE_POS.x, _character.PERSONAGE_POS.y, _character.PERSONAGE_POS.z);
    mp.players.local.setRotation(0, 0, _character.PERSONAGE_POS_HEADING, 0, true);
    mp.players.local.freezePosition(true);
    mp.players.local.setVisible(true, false);
    mp.players.local.taskPlayAnim('amb@world_human_guard_patrol@male@base', 'base', 8.0, -8, -1, 9, 0, false, false, false);
    if (mouseMoveBlock) mouseMoveBlock.destroy();
    mouseMoveBlock = (0, _controls.mouseMove)((right, down, leftKey, rightKey, posX, posY) => {
      if (posX > 0.21 && posX < 0.61) {
        if (right > 0.04 || right < -0.04) {
          player.setHeading(player.getHeading() + right * 1.5);
        }
        if (down > 0.04 || down < -0.04) {
          camHeightsCurrent += down / 400;
          if (camHeightsCurrent > camHeights[1]) camHeightsCurrent = camHeights[1];
          if (camHeightsCurrent < camHeights[0]) camHeightsCurrent = camHeights[0];
          personageCam.pointAtCoord(_character.PERSONAGE_CAMERA_POS_POINT.x, _character.PERSONAGE_CAMERA_POS_POINT.y, _character.PERSONAGE_CAMERA_POS_POINT.z + camHeightsCurrent);
        }
      }
    }, 10);
  },
  'client:user:personage:setAge': age => {
    if (age > 72) player.setHeadOverlay(3, 14, 1, 1, 1);else if (age > 69) player.setHeadOverlay(3, 16, 1, 1, 1);else if (age > 66) player.setHeadOverlay(3, 12, 1, 1, 1);else if (age > 63) player.setHeadOverlay(3, 11, 0.9, 1, 1);else if (age > 60) player.setHeadOverlay(3, 10, 0.9, 1, 1);else if (age > 57) player.setHeadOverlay(3, 9, 0.9, 1, 1);else if (age > 54) player.setHeadOverlay(3, 8, 0.8, 1, 1);else if (age > 51) player.setHeadOverlay(3, 7, 0.7, 1, 1);else if (age > 48) player.setHeadOverlay(3, 6, 0.6, 1, 1);else if (age > 45) player.setHeadOverlay(3, 5, 0.5, 1, 1);else if (age > 42) player.setHeadOverlay(3, 4, 0.4, 1, 1);else if (age > 39) player.setHeadOverlay(3, 4, 0.4, 1, 1);else if (age > 36) player.setHeadOverlay(3, 3, 0.3, 1, 1);else if (age > 33) player.setHeadOverlay(3, 1, 0.2, 1, 1);else if (age > 30) player.setHeadOverlay(3, 0, 0.1, 1, 1);
  },
  'client:user:personage:eventManager': async (type, value, name, family, age, dress, promo) => {
    switch (type) {
      case 'save':
        personageCam.destroy();
        _gui.gui.setGui(null);
        personageCam = null;
        mp.players.local.freezePosition(false);
        mp.gui.cursor.show(false, false);
        (0, _controls.tempCursorStatus)(false);
        mp.game.cam.renderScriptCams(false, true, 500, true, true);
        _gui.gui.cursor = false;
        _custom.CustomEvent.triggerServer('server:user:personage:done', JSON.stringify(_user.user.getFullLocalSkinData()), name, family, age, dress, promo);
        if (mouseMoveBlock) mouseMoveBlock.destroy();
        break;
      case 'features':
        _user.user.setLocalSkinData('FACE_SPECIFICATIONS', JSON.parse(value));
        break;
      case 'floor':
        _user.user.showLoadDisplay(500);
        await _system.system.sleep(500);
        _user.user.setLocalSkinData('SEX', value);
        _user.user.setPlayerModel(!value ? 'mp_m_freemode_01' : 'mp_f_freemode_01');
        setTimeout(() => _user.user.updateCharacterFace(true));
        mp.players.local.taskPlayAnim('amb@world_human_guard_patrol@male@base', 'base', 8.0, -8, -1, 9, 0, false, false, false);
        await _system.system.sleep(500);
        _user.user.updateCharacterFace(true);
        _user.user.hideLoadDisplay();
        break;
      case 'mother':
        _user.user.setLocalSkinData('SHAPE_THRID_ID', value);
        _user.user.setLocalSkinData('SKIN_THRID_ID', value);
        break;
      case 'father':
        _user.user.setLocalSkinData('SHAPE_SECOND_ID', value);
        _user.user.setLocalSkinData('SKIN_SECOND_ID', value);
        break;
      case 'heredity':
        _user.user.setLocalSkinData('SHAPE_MIX', value);
        break;
      case 'skin':
        _user.user.setLocalSkinData('SKIN_MIX', value);
        break;
      case 'hair':
        _user.user.setLocalSkinData('HAIR', value);
        break;
      case 'hairColor':
        _user.user.setLocalSkinData('HAIR_COLOR', value);
        break;
      case 'hairColor2':
        _user.user.setLocalSkinData('HAIR_COLOR2', value);
        break;
      case 'eyeColor':
        _user.user.setLocalSkinData('EYE_COLOR', value);
        break;
      case 'eyebrows':
        _user.user.setLocalSkinData('EYEBROWS', value);
        break;
      case 'eyebrowsColor':
        _user.user.setLocalSkinData('EYEBROWS_COLOR', value);
        break;
      case 'eyebrowsOpacity':
        _user.user.setLocalSkinData('EYEBROWS_OPACITY', value);
        break;
      case 'beard':
        _user.user.setLocalSkinData('OVERLAY', value - 1);
        break;
      case 'beardColor':
        _user.user.setLocalSkinData('OVERLAY_COLOR', value);
        break;
      case 'beardOpacity':
        _user.user.setLocalSkinData('OVERLAY_OPACITY', value);
        break;
      case 'freckles':
        _user.user.setLocalSkinData('OVERLAY9', value - 1);
        break;
      case 'frecklesOpacity':
        _user.user.setLocalSkinData('OVERLAY9_OPACITY', value);
        break;
      case 'makeup':
        _user.user.setLocalSkinData('OVERLAY4', value);
        break;
      case 'makeupColor':
        _user.user.setLocalSkinData('OVERLAY4_COLOR', value);
        break;
      case 'makeupOpacity':
        _user.user.setLocalSkinData('OVERLAY4_OPACITY', value);
        break;
      case 'lips':
        _user.user.setLocalSkinData('LIPS', value);
        break;
      case 'lipsOpacity':
        _user.user.setLocalSkinData('LIPS_OPACITY', value);
        break;
      case 'lipsColor':
        _user.user.setLocalSkinData('LIPS_COLOR', value);
        break;
      case 'blush':
        _user.user.setLocalSkinData('BLUSH', value);
        break;
      case 'blushOpacity':
        _user.user.setLocalSkinData('BLUSH_OPACITY', value);
        break;
      case 'blushColor':
        _user.user.setLocalSkinData('BLUSH_COLOR', value);
        break;
      case 'nails':
        const nailsData = _barbershop.nailsConfig.find(data => data.Id === value);
        mp.players.local.setComponentVariation(_barbershop.NAILS_COMPONENT_ID, nailsData.Drawable, nailsData.Texture, 2);
        break;
    }
  }
});
},{"./system":"pi2J","./user":"ggMw","./gui":"bk91","./custom.event":"py8h","../../shared/character":"TaDG","./controls":"yuOK","./protection":"Qh13","../../shared/barbershop":"FjA8"}],"IzQA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WEEDING_PAY = exports.WEDDING_POS = exports.WEDDING_NAME = void 0;
const WEDDING_POS = exports.WEDDING_POS = [new mp.Vector3(-327.25, 2798.52, 59.18), new mp.Vector3(-1669.60, -291.65, 51.62)];
const WEDDING_NAME = exports.WEDDING_NAME = 'Центр регистрации брака';
const WEEDING_PAY = exports.WEEDING_PAY = 7000;
},{}],"HJlI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HousesTeleportsList = exports.HOUSES_TELEPORT_SEPARATOR = void 0;
const HOUSES_TELEPORT_SEPARATOR = exports.HOUSES_TELEPORT_SEPARATOR = 1000;
const HousesTeleportsList = exports.HousesTeleportsList = [{
  name: "Многоквартирный дом 1",
  pos: new mp.Vector3(-772.91, 312.45, 84.70),
  posH: 174,
  carExit: new mp.Vector3(-796.12, 320.12, 84.69),
  carH: 184,
  inside: new mp.Vector3(-793.91, 332.37, 45.56),
  insideH: 350,
  rooms: [[-792.27, 339.63, 45.56, 90], [-795.48, 339.52, 45.56, 265], [-792.47, 347.13, 45.56, 84], [-795.66, 347.00, 45.56, 271], [-800.60, 350.70, 45.56, 280], [-799.09, 351.87, 45.56, 180], [-794.16, 352.16, 45.56, 179], [-789.26, 352.21, 45.56, 175], [-787.46, 351.12, 45.56, 84]]
}, {
  name: "Многоквартирный дом 2",
  pos: new mp.Vector3(-1447.48, -537.72, 33.74),
  posH: 210,
  carExit: new mp.Vector3(-1449.22, -513.89, 30.58),
  carH: 33,
  inside: new mp.Vector3(-793.91, 332.37, 45.56),
  insideH: 350,
  rooms: [[-792.27, 339.63, 45.56, 90], [-795.48, 339.52, 45.56, 265], [-792.47, 347.13, 45.56, 84], [-795.66, 347.00, 45.56, 271], [-800.60, 350.70, 45.56, 280], [-799.09, 351.87, 45.56, 180], [-794.16, 352.16, 45.56, 179], [-789.26, 352.21, 45.56, 175], [-787.46, 351.12, 45.56, 84]]
}, {
  name: "Многоквартирный дом 3",
  pos: new mp.Vector3(-595.91, 37.10, 42.61),
  posH: 174,
  carExit: new mp.Vector3(-623.55, 56.63, 42.73),
  carH: 89,
  inside: new mp.Vector3(-793.91, 332.37, 45.56),
  insideH: 350,
  rooms: [[-792.27, 339.63, 45.56, 90], [-795.48, 339.52, 45.56, 265], [-792.47, 347.13, 45.56, 84], [-795.66, 347.00, 45.56, 271], [-800.60, 350.70, 45.56, 280], [-799.09, 351.87, 45.56, 180], [-794.16, 352.16, 45.56, 179], [-789.26, 352.21, 45.56, 175], [-787.46, 351.12, 45.56, 84]]
}];
},{}],"CM8x":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMiningLevel = exports.getMiningCardProfit = exports.getMiningAlgoritmEfficiency = exports.calculateMiningFarmPoints = exports.calculateMiningFarmData = exports.MiningHouseDefault = exports.MINING_VIDEOCARDS_ATTACHLIST = exports.MINING_VIDEOCARDS = exports.MINING_TICK_INTERVAL = exports.MINING_TF_INDEX_BASE_COIN = exports.MINING_SELL_COEFFICIENT = exports.MINING_RAMS = exports.MINING_POWERSS = exports.MINING_LEVELS_LIST = exports.MINING_CPUS = exports.MINING_ALGORITHMS_LEVELS = exports.DEFAULT_RAM_POWER_INDEX = exports.DEFAULT_MINING_LEVEL_ID = exports.DEFAULT_MINING_ALGORITHM_ID = exports.DEFAULT_GPU_POWER_INDEX = exports.DEFAULT_CPU_POWER_INDEX = exports.COIN_SELL_POS = void 0;
const DEFAULT_CPU_POWER_INDEX = exports.DEFAULT_CPU_POWER_INDEX = 50;
const DEFAULT_RAM_POWER_INDEX = exports.DEFAULT_RAM_POWER_INDEX = 200;
const DEFAULT_GPU_POWER_INDEX = exports.DEFAULT_GPU_POWER_INDEX = 10;
const DEFAULT_MINING_LEVEL_ID = exports.DEFAULT_MINING_LEVEL_ID = 0;
const DEFAULT_MINING_ALGORITHM_ID = exports.DEFAULT_MINING_ALGORITHM_ID = 3200;
const MINING_TF_INDEX_BASE_COIN = exports.MINING_TF_INDEX_BASE_COIN = 300;
const MINING_SELL_COEFFICIENT = exports.MINING_SELL_COEFFICIENT = 0.021;
const MINING_TICK_INTERVAL = exports.MINING_TICK_INTERVAL = 1;
const COIN_SELL_POS = exports.COIN_SELL_POS = new mp.Vector3(5.78, -708.56, 45.07);
const MINING_VIDEOCARDS_ATTACHLIST = exports.MINING_VIDEOCARDS_ATTACHLIST = [{
  props: ["pp_videocard760", "pp_videocard7601"],
  attachPositions: [[-0.025, -0.536, -0.365], [-0.025, -0.429, -0.365], [-0.025, -0.323, -0.365], [-0.025, -0.217, -0.365], [-0.025, -0.11, -0.365], [-0.025, -0.004, -0.365], [-0.025, 0.102, -0.365], [-0.025, 0.209, -0.365], [-0.025, 0.315, -0.365], [-0.025, 0.421, -0.365], [-0.025, 0.528, -0.365], [-0.025, 0.634, -0.365], [-0.025, 0.74, -0.365], [-0.025, 0.847, -0.365], [-0.025, 0.953, -0.365], [-0.025, 1.059, -0.365], [-0.025, 1.165, -0.365], [-0.025, 1.272, -0.365], [-0.025, -0.536, -0.072], [-0.025, -0.429, -0.072], [-0.025, -0.323, -0.072], [-0.025, -0.217, -0.072], [-0.025, -0.11, -0.072], [-0.025, -0.004, -0.072], [-0.025, 0.102, -0.072], [-0.025, 0.209, -0.072], [-0.025, 0.315, -0.072], [-0.025, 0.421, -0.072], [-0.025, 0.528, -0.072], [-0.025, 0.634, -0.072], [-0.025, 0.74, -0.072], [-0.025, 0.847, -0.072], [-0.025, 0.953, -0.072], [-0.025, 1.059, -0.072], [-0.025, 1.165, -0.072], [-0.025, 1.272, -0.072], [-0.025, -0.536, 0.22], [-0.025, -0.429, 0.22], [-0.025, -0.323, 0.22], [-0.025, -0.217, 0.22], [-0.025, -0.11, 0.22], [-0.025, -0.004, 0.22], [-0.025, 0.102, 0.22], [-0.025, 0.209, 0.22], [-0.025, 0.315, 0.22], [-0.025, 0.421, 0.22], [-0.025, 0.528, 0.22], [-0.025, 0.634, 0.22], [-0.025, 0.74, 0.22], [-0.025, 0.847, 0.22], [-0.025, 0.953, 0.22], [-0.025, 1.059, 0.22], [-0.025, 1.165, 0.22], [-0.025, 1.272, 0.22], [-0.025, -0.536, 0.512], [-0.025, -0.429, 0.512], [-0.025, -0.323, 0.512], [-0.025, -0.217, 0.512], [-0.025, -0.11, 0.512], [-0.025, -0.004, 0.512], [-0.025, 0.102, 0.512], [-0.025, 0.209, 0.512], [-0.025, 0.315, 0.512], [-0.025, 0.421, 0.512], [-0.025, 0.528, 0.512], [-0.025, 0.634, 0.512], [-0.025, 0.74, 0.512], [-0.025, 0.847, 0.512], [-0.025, 0.953, 0.512], [-0.025, 1.059, 0.512], [-0.025, 1.165, 0.512], [-0.025, 1.272, 0.512]]
}, {
  props: ["pp_videocardamd", "pp_videocardamd1"],
  attachPositions: [[-0.017, -0.549, -0.368], [-0.017, -0.443, -0.368], [-0.017, -0.336, -0.368], [-0.017, -0.230, -0.368], [-0.017, -0.124, -0.368], [-0.017, -0.017, -0.368], [-0.017, 0.089, -0.368], [-0.017, 0.195, -0.368], [-0.017, 0.302, -0.368], [-0.017, 0.408, -0.368], [-0.017, 0.514, -0.368], [-0.017, 0.621, -0.368], [-0.017, 0.727, -0.368], [-0.017, 0.833, -0.368], [-0.017, 0.940, -0.368], [-0.017, 1.046, -0.368], [-0.017, 1.152, -0.368], [-0.017, 1.258, -0.368], [-0.017, -0.549, -0.075], [-0.017, -0.443, -0.075], [-0.017, -0.336, -0.075], [-0.017, -0.230, -0.075], [-0.017, -0.124, -0.075], [-0.017, -0.017, -0.075], [-0.017, 0.089, -0.075], [-0.017, 0.195, -0.075], [-0.017, 0.302, -0.075], [-0.017, 0.408, -0.075], [-0.017, 0.514, -0.075], [-0.017, 0.621, -0.075], [-0.017, 0.727, -0.075], [-0.017, 0.833, -0.075], [-0.017, 0.940, -0.075], [-0.017, 1.046, -0.075], [-0.017, 1.152, -0.075], [-0.017, 1.258, -0.075], [-0.017, -0.549, 0.217], [-0.017, -0.443, 0.217], [-0.017, -0.336, 0.217], [-0.017, -0.230, 0.217], [-0.017, -0.124, 0.217], [-0.017, -0.017, 0.217], [-0.017, 0.089, 0.217], [-0.017, 0.195, 0.217], [-0.017, 0.302, 0.217], [-0.017, 0.408, 0.217], [-0.017, 0.514, 0.217], [-0.017, 0.621, 0.217], [-0.017, 0.727, 0.217], [-0.017, 0.833, 0.217], [-0.017, 0.940, 0.217], [-0.017, 1.046, 0.217], [-0.017, 1.152, 0.217], [-0.017, 1.258, 0.217], [-0.017, -0.549, 0.51], [-0.017, -0.443, 0.51], [-0.017, -0.336, 0.51], [-0.017, -0.230, 0.51], [-0.017, -0.124, 0.51], [-0.017, -0.017, 0.51], [-0.017, 0.089, 0.51], [-0.017, 0.195, 0.51], [-0.017, 0.302, 0.51], [-0.017, 0.408, 0.51], [-0.017, 0.514, 0.51], [-0.017, 0.621, 0.51], [-0.017, 0.727, 0.51], [-0.017, 0.833, 0.51], [-0.017, 0.940, 0.51], [-0.017, 1.046, 0.51], [-0.017, 1.152, 0.51], [-0.017, 1.258, 0.51]]
}, {
  props: ["pp_videocard2080", "pp_videocard20801"],
  attachPositions: [[-0.009, -0.547, -0.374], [-0.009, -0.440, -0.374], [-0.009, -0.334, -0.374], [-0.009, -0.228, -0.374], [-0.009, -0.121, -0.374], [-0.009, -0.015, -0.374], [-0.009, 0.091, -0.374], [-0.009, 0.198, -0.374], [-0.009, 0.304, -0.374], [-0.009, 0.410, -0.374], [-0.009, 0.517, -0.374], [-0.009, 0.623, -0.374], [-0.009, 0.729, -0.374], [-0.009, 0.836, -0.374], [-0.009, 0.942, -0.374], [-0.009, 1.049, -0.374], [-0.009, 1.155, -0.374], [-0.009, 1.261, -0.374], [-0.009, -0.547, -0.078], [-0.009, -0.440, -0.078], [-0.009, -0.334, -0.078], [-0.009, -0.228, -0.078], [-0.009, -0.121, -0.078], [-0.009, -0.015, -0.078], [-0.009, 0.091, -0.078], [-0.009, 0.198, -0.078], [-0.009, 0.304, -0.078], [-0.009, 0.410, -0.078], [-0.009, 0.517, -0.078], [-0.009, 0.623, -0.078], [-0.009, 0.729, -0.078], [-0.009, 0.836, -0.078], [-0.009, 0.942, -0.078], [-0.009, 1.049, -0.078], [-0.009, 1.155, -0.078], [-0.009, 1.261, -0.078], [-0.009, -0.547, 0.212], [-0.009, -0.440, 0.212], [-0.009, -0.334, 0.212], [-0.009, -0.228, 0.212], [-0.009, -0.121, 0.212], [-0.009, -0.015, 0.212], [-0.009, 0.091, 0.212], [-0.009, 0.198, 0.212], [-0.009, 0.304, 0.212], [-0.009, 0.410, 0.212], [-0.009, 0.517, 0.212], [-0.009, 0.623, 0.212], [-0.009, 0.729, 0.212], [-0.009, 0.836, 0.212], [-0.009, 0.942, 0.212], [-0.009, 1.049, 0.212], [-0.009, 1.155, 0.212], [-0.009, 1.261, 0.212], [-0.009, -0.547, 0.505], [-0.009, -0.440, 0.505], [-0.009, -0.334, 0.505], [-0.009, -0.228, 0.505], [-0.009, -0.121, 0.505], [-0.009, -0.015, 0.505], [-0.009, 0.091, 0.505], [-0.009, 0.198, 0.505], [-0.009, 0.304, 0.505], [-0.009, 0.410, 0.505], [-0.009, 0.517, 0.505], [-0.009, 0.623, 0.505], [-0.009, 0.729, 0.505], [-0.009, 0.836, 0.505], [-0.009, 0.942, 0.505], [-0.009, 1.049, 0.505], [-0.009, 1.155, 0.505], [-0.009, 1.261, 0.505]]
}, {
  props: ["pp_powersupply"],
  attachPositions: [[-0.1, -0.478, -0.596], [-0.1, -0.079, -0.596], [-0.1, 0.32, -0.596], [-0.1, 0.72, -0.596], [-0.1, 1.119, -0.596]]
}];
const MiningHouseDefault = exports.MiningHouseDefault = {
  level: DEFAULT_MINING_LEVEL_ID,
  ram: [],
  cpu: 0,
  algorithm: DEFAULT_MINING_ALGORITHM_ID,
  cards: [],
  powers: [],
  viruses: 0,
  amount: 0
};
const MINING_LEVELS_LIST = exports.MINING_LEVELS_LIST = [{
  id: 0,
  next: 1,
  requireItems: [],
  requireMoney: 0,
  max_cards: 1,
  max_additional_power_blocks: 1,
  max_ram_count: 1
}, {
  id: 1,
  next: 2,
  requireItems: [],
  requireMoney: 20000,
  max_cards: 2,
  max_additional_power_blocks: 1,
  max_ram_count: 2
}, {
  id: 2,
  next: 3,
  requireItems: [],
  requireMoney: 40000,
  max_cards: 3,
  max_additional_power_blocks: 2,
  max_ram_count: 3
}, {
  id: 3,
  next: 4,
  requireItems: [],
  requireMoney: 60000,
  max_cards: 4,
  max_additional_power_blocks: 2,
  max_ram_count: 4
}, {
  id: 4,
  next: 5,
  requireItems: [],
  requireMoney: 80000,
  max_cards: 5,
  max_additional_power_blocks: 3,
  max_ram_count: 4
}, {
  id: 5,
  next: 6,
  requireItems: [],
  requireMoney: 100000,
  max_cards: 6,
  max_additional_power_blocks: 4,
  max_ram_count: 6
}];
const MINING_ALGORITHMS_LEVELS = exports.MINING_ALGORITHMS_LEVELS = [{
  item: DEFAULT_MINING_ALGORITHM_ID,
  cost: 0,
  efficiency: 20,
  ram: DEFAULT_RAM_POWER_INDEX,
  cpu: DEFAULT_CPU_POWER_INDEX
}, {
  item: 3201,
  cost: 0,
  efficiency: 50,
  ram: DEFAULT_RAM_POWER_INDEX,
  cpu: DEFAULT_CPU_POWER_INDEX
}, {
  item: 3202,
  cost: 0,
  efficiency: 70,
  ram: DEFAULT_RAM_POWER_INDEX * 1.5,
  cpu: DEFAULT_CPU_POWER_INDEX * 1.5
}, {
  item: 3203,
  cost: 0,
  efficiency: 80,
  ram: DEFAULT_RAM_POWER_INDEX * 1.8,
  cpu: DEFAULT_CPU_POWER_INDEX * 1.8
}, {
  item: 3204,
  cost: 0,
  efficiency: 99,
  ram: DEFAULT_RAM_POWER_INDEX * 2,
  cpu: DEFAULT_CPU_POWER_INDEX * 2
}];
const MINING_VIDEOCARDS = exports.MINING_VIDEOCARDS = [{
  item: 3100,
  value: DEFAULT_GPU_POWER_INDEX,
  powerUse: 100
}, {
  item: 3101,
  value: DEFAULT_GPU_POWER_INDEX * 1.1,
  powerUse: 200
}, {
  item: 3102,
  value: DEFAULT_GPU_POWER_INDEX * 1.2,
  powerUse: 400
}, {
  item: 3103,
  value: DEFAULT_GPU_POWER_INDEX * 1.3,
  powerUse: 500
}, {
  item: 3104,
  value: DEFAULT_GPU_POWER_INDEX * 1.4,
  powerUse: 700
}, {
  item: 3105,
  value: DEFAULT_GPU_POWER_INDEX * 1.5,
  powerUse: 800
}];
const MINING_CPUS = exports.MINING_CPUS = [{
  item: 3300,
  value: DEFAULT_CPU_POWER_INDEX * 1.2,
  powerUse: 50
}, {
  item: 3301,
  value: DEFAULT_CPU_POWER_INDEX * 1.4,
  powerUse: 100
}, {
  item: 3302,
  value: DEFAULT_CPU_POWER_INDEX * 1.6,
  powerUse: 200
}, {
  item: 3303,
  value: DEFAULT_CPU_POWER_INDEX * 1.8,
  powerUse: 400
}];
const MINING_RAMS = exports.MINING_RAMS = [{
  item: 3400,
  value: DEFAULT_RAM_POWER_INDEX * 1.2,
  powerUse: 100
}, {
  item: 3401,
  value: DEFAULT_RAM_POWER_INDEX * 1.4,
  powerUse: 150
}, {
  item: 3402,
  value: DEFAULT_RAM_POWER_INDEX * 1.6,
  powerUse: 200
}, {
  item: 3403,
  value: DEFAULT_RAM_POWER_INDEX * 1.8,
  powerUse: 300
}];
const MINING_POWERSS = exports.MINING_POWERSS = [{
  item: 3500,
  value: 600,
  powerUse: 0
}, {
  item: 3501,
  value: 900,
  powerUse: 0
}, {
  item: 3502,
  value: 1300,
  powerUse: 0
}];
const getMiningLevel = id => {
  return MINING_LEVELS_LIST.find(q => q.id === id);
};
exports.getMiningLevel = getMiningLevel;
const getMiningAlgoritmEfficiency = id => {
  const item = MINING_ALGORITHMS_LEVELS.find(q => q.item === id);
  return item ? item.efficiency : 0;
};
exports.getMiningAlgoritmEfficiency = getMiningAlgoritmEfficiency;
const getMiningCardProfit = id => {
  const item = MINING_VIDEOCARDS.find(q => q.item === id);
  return item ? item.value : 0;
};
exports.getMiningCardProfit = getMiningCardProfit;
const calculateMiningFarmPoints = (algorithm, cards) => {
  const profit = getMiningAlgoritmEfficiency(algorithm);
  if (!profit) return 0;
  let tf = 0;
  cards.filter(q => q).map(item => tf += getMiningCardProfit(item));
  return tf / 100 * profit;
};
exports.calculateMiningFarmPoints = calculateMiningFarmPoints;
const calculateMiningFarmData = data => {
  const algorithm = data.algorithm;
  const cpu = data.cpu;
  const rams = data.ram;
  const cards = data.cards;
  const powers = data.powers;
  let res = {
    amount: data.amount,
    profit: 0,
    tf: 0,
    power: {
      max: 0,
      current: 0
    },
    cpu: {
      max: 0,
      current: 0
    },
    ram: {
      max: 0,
      current: 0
    }
  };
  const a = MINING_ALGORITHMS_LEVELS.find(q => q.item === algorithm);
  if (a) {
    res.profit = getMiningAlgoritmEfficiency(algorithm);
    res.cpu.current = a.cpu;
    res.ram.current = a.ram;
  }
  const c = MINING_CPUS.find(q => q.item === cpu);
  if (c) {
    res.cpu.max = c.value;
    res.power.current = res.power.current + c.powerUse;
  }
  const r = MINING_RAMS.filter(q => rams.includes(q.item));
  if (r.length > 0) {
    r.map(q => {
      res.ram.max = q.value;
      res.power.current = res.power.current + q.powerUse;
    });
  }
  const v = MINING_VIDEOCARDS.filter(q => cards.includes(q.item));
  if (v.length > 0) {
    v.map(q => {
      res.power.current = res.power.current + q.powerUse;
    });
  }
  const p = MINING_POWERSS.filter(q => powers.includes(q.item));
  if (p.length > 0) {
    p.map(q => {
      res.power.max = res.power.max + q.value;
    });
  }
  res.tf = calculateMiningFarmPoints(algorithm, cards);
  if (res.cpu.max < res.cpu.current) res.tf = 0;
  if (res.power.max < res.power.current) res.tf = 0;
  if (res.ram.max < res.ram.current) res.tf = 0;
  return res;
};
exports.calculateMiningFarmData = calculateMiningFarmData;
},{}],"Kug6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBusinessBlip = exports.BUSINESS_BLIPS = exports.BLIPS_DATA = void 0;
var _business = require("./business");
var _wedding = require("./wedding");
var _houses = require("./houses");
var _construction = require("./construction");
var _drift = require("./drift");
var _mining = require("./mining");
const BUSINESS_BLIPS = exports.BUSINESS_BLIPS = [{
  type: _business.BUSINESS_TYPE.BANK,
  subtype: 0,
  blip: 374,
  color: 39
}, {
  type: _business.BUSINESS_TYPE.BANK,
  subtype: 1,
  blip: 374,
  color: 1
}, {
  type: _business.BUSINESS_TYPE.BANK,
  subtype: 2,
  blip: 374,
  color: 2
}, {
  type: _business.BUSINESS_TYPE.BANK,
  subtype: 3,
  blip: 374,
  color: 3
}, {
  type: _business.BUSINESS_TYPE.FUEL,
  subtype: 0,
  blip: 415,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.FUEL,
  subtype: 1,
  blip: 415,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.TUNING,
  subtype: 0,
  blip: 446,
  color: 0
}, {
  type: _business.BUSINESS_TYPE.TUNING,
  subtype: 1,
  blip: 488,
  color: 0
}, {
  type: _business.BUSINESS_TYPE.PARKING,
  subtype: 0,
  blip: 267,
  color: 38
}, {
  type: _business.BUSINESS_TYPE.PARKING,
  subtype: 1,
  blip: 267,
  color: 38
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 0,
  blip: 739,
  color: 4,
  scale: 0.7
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 1,
  blip: 225,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 2,
  blip: 225,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 3,
  blip: 225,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 4,
  blip: 226,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 5,
  blip: 427,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 6,
  blip: 251,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 7,
  blip: 225,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.VEHICLE_SHOP,
  subtype: 8,
  blip: 530,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 0,
  blip: 52,
  color: 0
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 1,
  blip: 521,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 2,
  blip: 110,
  color: 0
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 3,
  blip: 153,
  color: 69
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 4,
  blip: 597,
  color: 69
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 5,
  blip: 52,
  color: 2
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 6,
  blip: 463,
  color: 64
}, {
  type: _business.BUSINESS_TYPE.ITEM_SHOP,
  subtype: 7,
  blip: 403,
  color: 48
}, {
  type: _business.BUSINESS_TYPE.BAR,
  subtype: 0,
  blip: 136,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.BAR,
  subtype: 1,
  blip: 136,
  color: 4
}, {
  type: _business.BUSINESS_TYPE.BARBER,
  subtype: 0,
  blip: 71,
  color: 81
}, {
  type: _business.BUSINESS_TYPE.BARBER,
  subtype: 1,
  blip: 71,
  color: 81
}, {
  type: _business.BUSINESS_TYPE.BARBER,
  subtype: 2,
  blip: 71,
  color: 81
}, {
  type: _business.BUSINESS_TYPE.BARBER,
  subtype: 3,
  blip: 71,
  color: 81
}, {
  type: _business.BUSINESS_TYPE.TATTOO_SALON,
  subtype: 0,
  blip: 75,
  color: 10
}, {
  type: _business.BUSINESS_TYPE.TATTOO_SALON,
  subtype: 1,
  blip: 75,
  color: 10
}, {
  type: _business.BUSINESS_TYPE.TATTOO_SALON,
  subtype: 2,
  blip: 75,
  color: 10
}, {
  type: _business.BUSINESS_TYPE.TATTOO_SALON,
  subtype: 3,
  blip: 75,
  color: 10
}, {
  type: _business.BUSINESS_TYPE.TATTOO_SALON,
  subtype: 4,
  blip: 75,
  color: 10
}, {
  type: _business.BUSINESS_TYPE.DRESS_SHOP,
  subtype: 0,
  blip: 73,
  color: 3
}, {
  type: _business.BUSINESS_TYPE.DRESS_SHOP,
  subtype: 1,
  blip: 73,
  color: 3
}, {
  type: _business.BUSINESS_TYPE.DRESS_SHOP,
  subtype: 2,
  blip: 73,
  color: 3
}, {
  type: _business.BUSINESS_TYPE.DRESS_SHOP,
  subtype: 3,
  blip: 73,
  color: 3
}, {
  type: _business.BUSINESS_TYPE.DRESS_SHOP,
  subtype: 4,
  blip: 617,
  color: 3
}, {
  type: _business.BUSINESS_TYPE.WASH,
  subtype: 0,
  blip: 100,
  color: 4
}];
const getBusinessBlip = (type, subtype) => {
  return BUSINESS_BLIPS.find(q => q.type === type && q.subtype === subtype);
};
exports.getBusinessBlip = getBusinessBlip;
const BLIPS_DATA = exports.BLIPS_DATA = [{
  type: 621,
  color: 1,
  position: new mp.Vector3(283.97, -586.67, 43.38),
  name: "Больница"
}, {
  type: 540,
  color: 63,
  position: new mp.Vector3(2506.09, -379.85, 94.12),
  name: "FIB"
}, {
  type: 526,
  color: 60,
  position: new mp.Vector3(1846.05, 3679.35, 38.89),
  name: "Sheriffs Department"
}, {
  type: 526,
  color: 60,
  position: new mp.Vector3(-447.44, 6008.74, 40.32),
  name: "Sheriffs Department"
}, {
  type: 598,
  color: 4,
  position: new mp.Vector3(-2018.60, 3162.23, 57.58),
  name: "Army"
}, {
  type: 78,
  color: 2,
  position: new mp.Vector3(-1503.98, 850.20, 188.74),
  name: "Русское посольство"
}, {
  type: 78,
  color: 1,
  position: new mp.Vector3(-349.98, 191.19, 103.70),
  name: "Японское посольство"
}, {
  type: 78,
  color: 46,
  position: new mp.Vector3(1405.99, 1147.69, 119.26),
  name: "Итальянское посольство"
}, {
  type: 590,
  color: 59,
  position: new mp.Vector3(-585.05, -928.50, 36.83),
  name: "Weazel News"
}, {
  type: 672,
  color: 18,
  position: new mp.Vector3(-704.59, -1286.57, 5.05),
  name: "Регистрация ТС"
}, {
  type: 641,
  color: 50,
  position: new mp.Vector3(-1656.09, -826.43, 9.94),
  name: "Продажа ТС"
}, {
  type: 238,
  color: 4,
  position: new mp.Vector3(1848.93, 2608.78, 45.59),
  name: "Тюрьма"
}, {
  type: 126,
  color: 41,
  position: new mp.Vector3(-235.38, -2035.33, 36.20),
  name: "Мероприятия (Maze Arena)"
}, {
  type: 621,
  color: 1,
  position: new mp.Vector3(-249.51, 6326.59, 32.43),
  name: "Больница"
}, {
  type: 280,
  color: 8,
  position: new mp.Vector3(295.27, -1191.71, 29.25),
  name: "Ламар"
}, {
  type: 280,
  color: 5,
  position: new mp.Vector3(20.22, -1301.45, 29.13),
  name: "Стэнли"
}, {
  type: 280,
  color: 5,
  position: new mp.Vector3(-1066.14, -873.60, 4.99),
  name: "Джеффри"
}, {
  type: 84,
  color: 59,
  position: new mp.Vector3(-461.37, -1715.58, 18.64),
  name: "Bloods"
}, {
  type: 84,
  color: 25,
  position: new mp.Vector3(100.15, -1948.33, 22.35),
  name: "Families"
}, {
  type: 84,
  color: 27,
  position: new mp.Vector3(892.59, -2173.04, 32.29),
  name: "Ballas"
}, {
  type: 84,
  color: 46,
  position: new mp.Vector3(542.46, -1944.71, 24.99),
  name: "Vagos"
}, {
  type: 478,
  color: 5,
  name: 'Ремонт квартир',
  position: _construction.CONSTRUCTION_REGISTER_POS
}, {
  type: 467,
  color: 4,
  name: 'Рынок',
  position: new mp.Vector3(-1627.47, -1088.61, 13.02)
}, ..._houses.HousesTeleportsList.map(item => {
  return {
    type: 476,
    color: 26,
    name: item.name,
    position: new mp.Vector3(item.pos.x, item.pos.y, item.pos.z)
  };
}), ..._wedding.WEDDING_POS.map(item => {
  return {
    type: 305,
    color: 0,
    name: _wedding.WEDDING_NAME,
    position: item
  };
}), {
  type: 649,
  color: 1,
  name: 'Дрифт трасса',
  position: new mp.Vector3(_drift.DRIFT_MAP_EXIT.x, _drift.DRIFT_MAP_EXIT.y, _drift.DRIFT_MAP_EXIT.z),
  options: {
    range: 150
  }
}, {
  type: 84,
  color: 3,
  position: new mp.Vector3(496.25, -1336.79, 29.32),
  name: "Marabunta Grande"
}, {
  type: 594,
  color: 0,
  position: _mining.COIN_SELL_POS,
  name: "Биржа криптовалюты"
}, {
  type: 304,
  color: 4,
  position: new mp.Vector3(705.81, -966.68, 30.41),
  name: "Очистка розыска"
}, {
  type: 304,
  color: 4,
  position: new mp.Vector3(-749.69, 5589.60, 38.03),
  name: "Очистка розыска"
}, {
  type: 304,
  color: 4,
  position: new mp.Vector3(1702.38, 3290.27, 48.92),
  name: "Очистка розыска"
}, {
  type: 621,
  color: 1,
  position: new mp.Vector3(1835.30, 3678.29, 34.27),
  name: "Больница"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2091.61, 5150.82, 50.28),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(1884.17, 5019.68, 49.83),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(1803.65, 5041.41, 60.04),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(1875.42, 4868.56, 46.70),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2002.49, 4802.68, 44.85),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2066.05, 4864.52, 43.89),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2106.92, 4907.48, 41.88),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2167.01, 5011.55, 42.04),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2199.60, 4983.26, 45.08),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2254.46, 4885.33, 42.60),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2300.50, 4770.67, 38.91),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2387.49, 4803.93, 37.76),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2502.12, 4892.72, 45.03),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2544.27, 4859.92, 37.79),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2339.31, 5083.47, 45.83),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(2855.15, 4696.89, 48.99),
  name: "Ферма"
}, {
  type: 206,
  color: 2,
  position: new mp.Vector3(1867.55, 4756.94, 41.73),
  name: "Ферма"
}, {
  type: 523,
  color: 3,
  position: new mp.Vector3(-1160.78, -1733.07, 3.11),
  name: "Каршеринг"
}];
},{"./business":"ZFkC","./wedding":"IzQA","./houses":"HJlI","./construction":"dSZZ","./drift":"ogyk","./mining":"CM8x"}],"vw4c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRouteBlip = createRouteBlip;
exports.destroyRouteBlip = destroyRouteBlip;
var _blips = require("../../shared/blips");
var _system = require("./system");
var _custom = require("./custom.event");
_system.system.createBlip(60, 4, new mp.Vector3(434.95, -981.83, 30.69), "LSPD");
let blid = 0;
_blips.BLIPS_DATA.map(blip => {
  blid++;
  _system.system.createDynamicBlip(`BLIP_${blid}`, blip.type, blip.color, blip.position, blip.name, blip.options);
});
const routeBlips = new Map();
function createRouteBlip(name, position, color) {
  destroyRouteBlip(name);
  const blip = mp.blips.new(1, position, {
    shortRange: true,
    color: color,
    scale: 1,
    name: name
  });
  blip.setRoute(true);
  blip.setRouteColour(color);
  routeBlips.set(name, blip);
}
_custom.CustomEvent.registerServer('blips:createRouteBlip', (name, position, color) => createRouteBlip(name, position, color));
_custom.CustomEvent.registerServer('blips:destroyRouteBlip', name => {
  destroyRouteBlip(name);
});
function destroyRouteBlip(name) {
  const routeBlip = routeBlips.get(name);
  if (routeBlip && mp.blips.exists(routeBlip)) {
    routeBlip.destroy();
    routeBlips.delete(name);
  }
}
},{"../../shared/blips":"Kug6","./system":"pi2J","./custom.event":"py8h"}],"pSwe":[function(require,module,exports) {
"use strict";

var _system = require("../system");
var _order = require("../../../shared/order.system");
var _scaleform = require("../scaleform.mp");
_order.ORDER_LOAD_COORDS.map((item, index) => {
  _system.system.createBlipNearest(85, 26, item, `Погрузочная зона №${index + 1}`, 100);
  new _scaleform.ScaleformTextMp(new mp.Vector3(item.x, item.y, item.z + 1), `Погрузочная зона №${index + 1}`, {
    range: 5,
    type: "front"
  });
});
_order.ORDER_CAR_POS.map(item => {
  _system.system.createBlip(85, 1, item, `Аренда служебного транспорта`, 0);
  new _scaleform.ScaleformTextMp(new mp.Vector3(item.x, item.y, item.z + 1), 'Аренда служебного транспорта', {
    range: 20,
    type: "front"
  });
});
_order.ORDER_MENU_POS.map(item => {
  _system.system.createBlip(616, 26, item, `Служба доставки`);
  new _scaleform.ScaleformTextMp(new mp.Vector3(item.x, item.y, item.z + 1), `Служба доставки`, {
    range: 25,
    type: "front"
  });
});
},{"../system":"pi2J","../../../shared/order.system":"Bxla","../scaleform.mp":"p2OF"}],"oVg3":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _gui = require("../gui");
_custom.CustomEvent.registerServer('fuel:open', (...args) => {
  _gui.gui.setGui('fuel');
  _custom.CustomEvent.triggerCef('fuel:open', ...args);
});
},{"../custom.event":"py8h","../gui":"bk91"}],"EGzc":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _gui = require("../gui");
var _inventory = require("../../../shared/inventory");
var _controls = require("../controls");
const sourceBackpack = {
  drawable: 0,
  texture: 0
};
_custom.CustomEvent.registerServer('shop:open', () => {
  sourceBackpack.drawable = mp.players.local.getDrawableVariation(5);
  sourceBackpack.texture = mp.players.local.getTextureVariation(5);
  _gui.gui.setGui('shop');
});
let cefData = [];
_custom.CustomEvent.registerServer('item_shop:init', (shopId, shopName, items, donate, shopType, shopCategory) => {
  cefData = [shopId, shopName, items, donate, shopType, shopCategory];
  _custom.CustomEvent.triggerCef('cef:item_shop:init', ...cefData);
});
mp.events.add('shop::closeButton', () => {
  if (tryOnTimeout != null) {
    clearTimeout(tryOnTimeout);
    tryOnTimeout = null;
  }
  mp.players.local.setComponentVariation(5, sourceBackpack.drawable, sourceBackpack.texture, 2);
});
let tryOnTimeout = null;
mp.events.add('shop::tryOnBackpack', backpackItemId => {
  var _CONTAINERS_DATA$find;
  const backpackCfg = (_CONTAINERS_DATA$find = _inventory.CONTAINERS_DATA.find(container => container.item_id === backpackItemId)) === null || _CONTAINERS_DATA$find === void 0 ? void 0 : _CONTAINERS_DATA$find.bag_sync;
  if (!backpackCfg) {
    return;
  }
  if (tryOnTimeout != null) {
    clearTimeout(tryOnTimeout);
    tryOnTimeout = null;
    mp.players.local.setComponentVariation(5, sourceBackpack.drawable, sourceBackpack.texture, 2);
  }
  _gui.gui.setGui(null);
  mp.players.local.setComponentVariation(5, backpackCfg.d, backpackCfg.t, backpackCfg.p);
  tryOnTimeout = setTimeout(() => {
    _gui.gui.setGuiWithEvent('shop', 'cef:item_shop:init', ...cefData);
    tryOnTimeout = null;
  }, 3000);
});
mp.events.add('render', () => {
  if (!tryOnTimeout) {
    return;
  }
  _controls.disableControlGroup.baseKeyDisable();
});
},{"../custom.event":"py8h","../gui":"bk91","../../../shared/inventory":"vpPR","../controls":"yuOK"}],"nphQ":[function(require,module,exports) {
"use strict";

require("./lsc");
require("./autosalon");
require("./order.zone");
require("./fuel");
require("./barber");
require("./lsc.chip");
require("./shop");
},{"./lsc":"vjs0","./autosalon":"eXav","./order.zone":"pSwe","./fuel":"oVg3","./barber":"FstL","./lsc.chip":"AGmA","./shop":"EGzc"}],"DSux":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hotkeysTasks = exports.hotkeysAllowed = exports.hotkeyCategories = exports.getKeyName = exports.getHotkeysNeedHold = exports.getHotkeysName = exports.getHotkeysCanEdit = exports.generateHotkeysButtonsArray = exports.defaultHotkeys = void 0;
const defaultHotkeys = exports.defaultHotkeys = {
  invopen: 9,
  mmenu: 77,
  cursor: 192,
  voice: 78,
  radio: 96,
  lockveh: 76,
  engineveh: 66,
  hidehud: 120,
  stopanim: 121,
  anim: 57,
  gpress: 71,
  seatbelt: 88,
  vreload: 118,
  flashlight: 74,
  radarEnable: 104,
  invslot1: 49,
  invslot2: 50,
  invslot3: 51,
  invslot4: 52,
  invslot5: 53,
  phoneSlot: 38,
  tabletSlot: 40,
  ten0: 96,
  megaphone: 191,
  report: 117,
  toggleChat: 116,
  cuff: 54,
  uncuff: 55,
  follow: 90,
  admin: 56,
  autopilot: 79,
  snowball: 113,
  petControl: 89,
  battlePass: 115,
  duckWalk: 20
};
const hotkeysTasks = exports.hotkeysTasks = {
  invopen: ["Открыть инвентарь"],
  mmenu: ["Главное меню"],
  cursor: ["Включить/Выключить курсор"],
  lockveh: ["Закрыть/Открыть ближайший ТС"],
  engineveh: ["Завести/Заглушить ТС"],
  voice: ["Голосовой чат", false, true],
  radio: ["Использовать рацию", false, true],
  hidehud: ["Скрыть/Отобразить HUD"],
  stopanim: ["Отменить анимацию"],
  anim: ["Воспроизвести анимацию"],
  gpress: ["Взаимодействие"],
  seatbelt: ["Ремень безопасности"],
  vreload: ["Перезагрузить голосовой чат"],
  flashlight: ["Фонарь на оружии"],
  radarEnable: ["Включить Скоростной радар"],
  invslot1: ["Слот быстрого доступа 1"],
  invslot2: ["Слот быстрого доступа 2"],
  invslot3: ["Слот быстрого доступа 3"],
  invslot4: ["Слот быстрого доступа 4"],
  invslot5: ["Слот быстрого доступа 5"],
  phoneSlot: ["Открыть/закрыть телефон"],
  tabletSlot: ["Открыть/закрыть планшет"],
  ten0: ["Отправить Код 0"],
  megaphone: ["Говорить в громкоговоритель/Мегафон"],
  report: ["Меню тикетов"],
  toggleChat: ["Выключить/включить чат", true],
  admin: ["Админ-меню", true],
  cuff: ["Надеть наручники/стяжки"],
  uncuff: ["Снять наручники/стяжки"],
  follow: ["Вести за собой"],
  autopilot: ["Включить/выключить автопилот"],
  snowball: ["Слепить снежок"],
  petControl: ["Управление питомцем"],
  battlePass: ["Battle pass"],
  duckWalk: ["Встать/присесть"]
};
const hotkeyCategories = exports.hotkeyCategories = [{
  name: "Инвентарь",
  keys: ["invopen", "invslot1", "invslot2", "invslot3", "invslot4", "invslot5"]
}, {
  name: "Транспорт",
  keys: ["autopilot", "engineveh", "lockveh", "seatbelt"]
}, {
  name: "Персонаж и взаимодействие",
  keys: ["duckWalk", "gpress", "anim", "stopanim", "snowball", "petControl", "cuff", "uncuff", "follow", "flashlight"]
}, {
  name: "Интерфейс",
  keys: ["report", "phoneSlot", "tabletSlot", "vreload", "hidehud", "battlePass", "toggleChat", "radio", "voice", "cursor"]
}, {
  name: "Админ раздел",
  keys: ["admin", "report"]
}, {
  name: "Раздел полиции",
  keys: ["ten0", "megaphone", "radarEnable"]
}];
const getHotkeysName = task => {
  const cfg = hotkeysTasks[task];
  if (!cfg) return;
  return cfg[0];
};
exports.getHotkeysName = getHotkeysName;
const getHotkeysCanEdit = task => {
  const cfg = hotkeysTasks[task];
  if (!cfg) return;
  return !!!cfg[1];
};
exports.getHotkeysCanEdit = getHotkeysCanEdit;
const getHotkeysNeedHold = task => {
  const cfg = hotkeysTasks[task];
  if (!cfg) return;
  return !!cfg[2];
};
exports.getHotkeysNeedHold = getHotkeysNeedHold;
const generateHotkeysButtonsArray = () => {
  let data = [];
  for (let key in hotkeysAllowed) {
    data.push([key, hotkeysAllowed[key]]);
  }
  return data;
};
exports.generateHotkeysButtonsArray = generateHotkeysButtonsArray;
const getKeyName = key => {
  return hotkeysAllowed[key];
};
exports.getKeyName = getKeyName;
const hotkeysAllowed = exports.hotkeysAllowed = {
  8: "BackSpace",
  9: "Tab",
  18: "Alt",
  20: "CapsLock",
  33: "PageUP",
  34: "PageDown",
  35: "End",
  36: "Home",
  45: "Insert",
  46: "Delete",
  145: "Scroll Lock",
  192: "~",
  191: "/",
  37: "Стрелка влево",
  38: "Стрелка вверх",
  39: "Стрелка вправо",
  40: "Стрелка вниз",
  44: "Print Screen",
  48: "Цифра 0",
  49: "Цифра 1",
  50: "Цифра 2",
  51: "Цифра 3",
  52: "Цифра 4",
  53: "Цифра 5",
  54: "Цифра 6",
  55: "Цифра 7",
  56: "Цифра 8",
  57: "Цифра 9",
  66: "B",
  67: "C",
  71: "G",
  72: "H",
  73: "I",
  74: "J",
  75: "K",
  76: "L",
  77: "M",
  78: "N",
  79: "O",
  84: "T",
  85: "U",
  88: "X",
  89: "Y",
  90: "Z",
  96: "NumPad 0",
  97: "NumPad 1",
  98: "NumPad 2",
  99: "NumPad 3",
  100: "NumPad 4",
  101: "NumPad 5",
  102: "NumPad 6",
  103: "NumPad 7",
  104: "NumPad 8",
  105: "NumPad 9",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10"
};
},{}],"OtV2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.currentHotkeys = void 0;
var _hotkeys = require("../../shared/hotkeys");
var _custom = require("./custom.event");
var _gui = require("./gui");
var _user = require("./user");
var _controls = require("./controls");
let currentHotkeys = exports.currentHotkeys = _hotkeys.defaultHotkeys;
setInterval(() => {
  syncHotkeys();
}, 10000);
const syncHotkeys = () => {
  _custom.CustomEvent.triggerCef('currentHotkeys', currentHotkeys, mp.storage.data.alertsEnable.hudHotkeys);
};
const getTasksOnKey = key => {
  let tasks = [];
  for (let task in currentHotkeys) {
    let keycode = currentHotkeys[task];
    if (keycode === key) {
      tasks.push(task);
    }
  }
  return tasks;
};
mp.events.add('hotkeys:set', (task, key, notify = true) => {
  currentHotkeys[task] = key;
  mp.storage.data.hotkeys[task] = key;
  if (notify) _user.user.notify("Горячая клавиша назначена", "success");
  syncHotkeys();
});
if (typeof mp.storage.data.hotkeys === "object") {
  for (let task in mp.storage.data.hotkeys) {
    let key = mp.storage.data.hotkeys[task];
    currentHotkeys[task] = key;
  }
}
mp.storage.data.hotkeys = currentHotkeys;
let hotkeySpamPress = false;
let hotkeySpamUnPress = false;
for (let key in _hotkeys.hotkeysAllowed) (0, _controls.registerHotkey)(parseInt(key), () => {
  getTasksOnKey(parseInt(key)).map(task => {
    if (!checkHotkey(task, false)) return;
    _custom.CustomEvent.trigger(task, true);
  });
}, () => {
  getTasksOnKey(parseInt(key)).map(task => {
    if (!_hotkeys.hotkeysTasks[task][2]) return;
    if (!checkHotkey(task, true)) return;
    _custom.CustomEvent.trigger(task, false);
  });
});
const checkHotkey = (task, unpress) => {
  if (_gui.inputOnFocus) return false;
  if (unpress && task === "voice") return true;
  if (!unpress && hotkeySpamPress) return false;
  if (unpress && hotkeySpamUnPress) return false;
  if (unpress) {
    hotkeySpamUnPress = true;
    setTimeout(() => {
      hotkeySpamUnPress = false;
    }, 500);
  } else {
    hotkeySpamPress = true;
    setTimeout(() => {
      hotkeySpamPress = false;
    }, 500);
  }
  if (task === "voice") return true;
  if (task === "cursor") return true;
  if (task === 'gpress' && _gui.gui.currentGui === 'interact') {
    _gui.gui.setGui(null);
    return;
  }
  if (task === "invopen" && _gui.gui.currentGui === "inventory") {
    _custom.CustomEvent.triggerServer('inventory:close');
    _gui.gui.setGui(null);
    return;
  }
  if (task === "mmenu" && _gui.gui.currentGui === "mainmenu") {
    _gui.gui.setGui(null);
    return;
  }
  if (task === "tabletSlot" && _gui.gui.currentGui === "tablet") {
    _gui.gui.setGui(null);
    return;
  }
  if (task === "report" && _gui.gui.currentGui === "deathpopup") return true;
  if (_gui.gui.cursor) return false;
  if (task === "admin") return true;
  if (task === "mmenu") return true;
  if (_gui.gui.is_block_keys) return false;
  if (_user.user.dead) return false;
  return true;
};
},{"../../shared/hotkeys":"DSux","./custom.event":"py8h","./gui":"bk91","./user":"ggMw","./controls":"yuOK"}],"ciLG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAlertSetting = void 0;
var _custom = require("./custom.event");
var _gui = require("./gui");
var _survival = require("./survival");
var _user = require("./user");
var _hotkeys = require("./hotkeys");
var _fractions = require("./fractions");
_custom.CustomEvent.registerServer('mainmenu:data', (name, exp, level, wanted_level, wanted_reason, fraction, rank, players, business, house, ads, vipName, vipEnd, donate_money, warns, job, bizList, bankNumber, bankPos, donateX, online, total, bonus, carbonus, donateX3, achieve, achieveDaily, promocodeMy, promocodeMyCount, promocodeMyRewardGived, report = false) => {
  _gui.gui.setGui('mainmenu');
  _custom.CustomEvent.triggerCef('mainmenu:setCrosshairSettings', mp.storage.data.crosshair);
  _custom.CustomEvent.triggerCef('mainmenu:data', name, _survival.survival.food, _survival.survival.water, _user.user.isMale(), exp, level, wanted_level, wanted_reason, warns, 0, job, _fractions.fractionCfg.getFractionName(fraction), _fractions.fractionCfg.getRankName(fraction, rank), house, business, players, _hotkeys.currentHotkeys, mp.storage.data.voiceSettings, mp.storage.data.menuItems, ads, vipName, vipEnd, donate_money, bizList, bankNumber, bankPos, donateX, donateX3, online, total, bonus, mp.storage.data.alertsEnable, carbonus, achieve, achieveDaily, promocodeMy, promocodeMyCount, promocodeMyRewardGived, _user.user.getNearestPlayers(50).map(q => {
    const id = q.getVariable('id');
    if (!mp.storage.data.voiceUsers) mp.storage.data.voiceUsers = [];
    const data = mp.storage.data.voiceUsers.find(s => s[0] === id);
    return [id, data ? data[1] : 100];
  }), mp.storage.data.voiceLevel || 1, mp.storage.data.lodDistPlayers || 200, mp.storage.data.lodDistVehs || 200, typeof mp.storage.data.boomboxSound === 'number' ? mp.storage.data.boomboxSound : 100, report);
});
mp.events.add('menu:setItemsOnPage', menuItems => {
  mp.storage.data.menuItems = menuItems;
});
mp.events.add('voiceUser:set', (id, val) => {
  if (!mp.storage.data.voiceUsers) mp.storage.data.voiceUsers = [];
  let data = mp.storage.data.voiceUsers.find(s => s[0] === id);
  if (data) data[1] = val;else mp.storage.data.voiceUsers.push([id, val]);
});
mp.events.add('voiceUser:voiceLevel', val => {
  mp.storage.data.voiceLevel = val;
});
_custom.CustomEvent.register('mmenu', () => {
  _custom.CustomEvent.triggerServer('mainmenu:open');
});
_custom.CustomEvent.register('report', () => {
  _custom.CustomEvent.triggerServer('mainmenu:open', true);
});
let int = setInterval(() => {
  if (!_user.user.login) return;
  clearInterval(int);
  _custom.CustomEvent.triggerServer('alertsEnable:data', mp.storage.data.alertsEnable);
}, 1000);
mp.events.add('saveAlertSettings', datas => {
  if (!datas) return;
  const data = JSON.parse(datas);
  mp.storage.data.alertsEnable = data;
  _custom.CustomEvent.triggerServer('alertsEnable:data', mp.storage.data.alertsEnable);
  _custom.CustomEvent.triggerCef('alerts:enable', mp.storage.data.alertsEnable);
});
const getAlertSetting = key => {
  return !!mp.storage.data.alertsEnable[key];
};
exports.getAlertSetting = getAlertSetting;
},{"./custom.event":"py8h","./gui":"bk91","./survival":"nroP","./user":"ggMw","./hotkeys":"OtV2","./fractions":"ZnXR"}],"o6VP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VOICE_WALL_DIVIDER = exports.VOICE_VEH_TWO_DIVIDER = exports.VOICE_VEH_ONE_DIVIDER = exports.POLICE_MEGAPHONE_PROPS = exports.MaxRange = exports.MICROPHONE_PROPS = void 0;
const MaxRange = exports.MaxRange = 15;
const VOICE_WALL_DIVIDER = exports.VOICE_WALL_DIVIDER = 28;
const VOICE_VEH_ONE_DIVIDER = exports.VOICE_VEH_ONE_DIVIDER = 3;
const VOICE_VEH_TWO_DIVIDER = exports.VOICE_VEH_TWO_DIVIDER = 5;
const MICROPHONE_PROPS = exports.MICROPHONE_PROPS = [{
  model: "v_microphone",
  dist: 40,
  multiple: 4
}];
const POLICE_MEGAPHONE_PROPS = exports.POLICE_MEGAPHONE_PROPS = [{
  model: "police",
  dist: 60,
  multiple: 6
}, {
  model: "police2",
  dist: 60,
  multiple: 6
}, {
  model: "police3",
  dist: 60,
  multiple: 6
}, {
  model: "police4",
  dist: 60,
  multiple: 6
}, {
  model: "ford",
  dist: 60,
  multiple: 6
}, {
  model: "sheriff",
  dist: 60,
  multiple: 6
}, {
  model: "sheriff2",
  dist: 60,
  multiple: 6
}, {
  model: "pranger",
  dist: 60,
  multiple: 6
}, {
  model: "riot",
  dist: 60,
  multiple: 6
}, {
  model: "riot2",
  dist: 60,
  multiple: 6
}, {
  model: "policeb",
  dist: 60,
  multiple: 6
}, {
  model: "insurgent2",
  dist: 60,
  multiple: 6
}, {
  model: "polcorvet",
  dist: 60,
  multiple: 6
}, {
  model: "policet",
  dist: 60,
  multiple: 6
}, {
  model: "baller5",
  dist: 60,
  multiple: 6
}, {
  model: "dinghy4",
  dist: 60,
  multiple: 6
}];
},{}],"WpQ0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressVoice = exports.getVoiceSettingMultiple = exports.getVoiceMultipler = exports.getDistAndMultipleTarget = void 0;
exports.restartVoice = restartVoice;
exports.voiceKeyPressed = void 0;
var _user = require("./user");
var _custom = require("./custom.event");
var _system = require("./system");
var _gui = require("./gui");
var _anim = require("./anim");
var _megaphone = require("../../shared/megaphone");
mp.events.add('saveVoiceSettings', params => {
  const cfg = JSON.parse(params);
  if (mp.storage.data.voiceSettings[0] != cfg[0]) {
    _custom.CustomEvent.triggerServer('setMicrophoneVolume', mp.storage.data.voiceSettings[0]);
  }
  mp.storage.data.voiceSettings = cfg;
  _user.user.notify("Настройки голосового чата сохранены", "success");
  setTimeout(() => {
    voiceConfig();
  }, 100);
});
_custom.CustomEvent.register('vreload', () => {
  mp.voiceChat.cleanupAndReload(true, true, true);
  _user.user.notify('Голосовой чат перезапущен', 'success');
});
let voiceVolume = 6.0;
let phoneVolume = 11.0;
const voiceVolumeBasic = 2.0;
const phoneVolumeBasic = 11.0;
const getVoiceSettingMultiple = id => {
  if (!mp.storage.data.voiceUsers) mp.storage.data.voiceUsers = [];
  const data = mp.storage.data.voiceUsers.find(q => q[0] === id);
  return data ? data[1] : 100;
};
exports.getVoiceSettingMultiple = getVoiceSettingMultiple;
function voiceConfig() {
  const cfg = mp.storage.data.voiceSettings;
  if (!cfg) mp.storage.data.voiceSettings = [100, 100, 100];
  voiceVolume = voiceVolumeBasic / 100 * mp.storage.data.voiceSettings[1];
  phoneVolume = phoneVolumeBasic / 100 * mp.storage.data.voiceSettings[2];
}
voiceConfig();
setTimeout(() => {
  if (mp.storage.data.voiceSettings[0] !== 100) _custom.CustomEvent.triggerServer('setMicrophoneVolume', mp.storage.data.voiceSettings[0]);
}, 1000);
const getVoiceMultipler = target => {
  if (!mp.players.exists(target)) return 0;
  let val = 0;
  const id = target.getVariable('id');
  const level = mp.storage.data.voiceLevel || 1;
  const ulvl = Number(target.getVariable('level')) || 1;
  if (level > ulvl) return 0.0;
  if (typeof target.getVariable('microphoneVolume') !== "number") val = 1;else val = target.getVariable('microphoneVolume') / 100;
  return val * (getVoiceSettingMultiple(id) / 100);
};
exports.getVoiceMultipler = getVoiceMultipler;
let currentRadio = "";
let worldList = [];
let phoneTarget;
let radioList = [];
let block = false;
let currentMyMultiple = null;
let pressMegaphone = false;
const getDistAndMultipleTarget = target => {
  if (!target || !mp.players.exists(target)) return {
    dist: _megaphone.MaxRange,
    multiple: 1.0
  };
  const data = target.getVariable('microphoneVolumeCustom');
  if (!data) return {
    dist: _megaphone.MaxRange,
    multiple: 1.0
  };
  const q = JSON.parse(data);
  if (!q) return {
    dist: _megaphone.MaxRange,
    multiple: 1.0
  };
  return {
    dist: q[1],
    multiple: q[0]
  };
};
exports.getDistAndMultipleTarget = getDistAndMultipleTarget;
let currentMultSend = false;
setInterval(() => {
  if (!_user.user.login) return;
  let keypress = mp.keys.isDown(mp.storage.data.hotkeys.megaphone);
  if (!keypress && currentMultSend) {
    _custom.CustomEvent.triggerServer('voice:setDistAndMultiple', 0, 0);
    currentMultSend = false;
    return;
  } else {
    if (keypress) {
      let haveAccess = [0, 0];
      const veh = mp.players.local.vehicle;
      if (veh) {
        if (veh.getPedInSeat(0) !== mp.players.local.handle || !veh.getIsEngineRunning()) return;
        const item = _megaphone.POLICE_MEGAPHONE_PROPS.find(q => mp.game.joaat(q.model) === veh.model);
        if (item) {
          haveAccess = [item.multiple, item.dist];
        }
      }
      if (haveAccess[0] == 0) {
        const pos = mp.players.local.position;
        const item = _megaphone.MICROPHONE_PROPS.find(q => mp.game.object.getClosestObjectOfType(pos.x, pos.y, pos.z, 3, mp.game.joaat(q.model), true, true, true));
        if (item) {
          haveAccess = [item.multiple, item.dist];
        }
      }
      if (haveAccess[0] == 0 && currentMultSend) {
        _custom.CustomEvent.triggerServer('voice:setDistAndMultiple', 0, 0);
        currentMultSend = false;
      } else if (haveAccess[0] != 0 && !currentMultSend) {
        _custom.CustomEvent.triggerServer('voice:setDistAndMultiple', haveAccess[0], haveAccess[1]);
        currentMultSend = true;
      }
    }
  }
}, 100);
function restartVoice() {
  if (block) return mp.game.ui.notifications.show('~r~Нельзя так часто перезагружать голосовой чат');
  block = true;
  setTimeout(() => {
    block = false;
  }, 10000);
  mp.voiceChat.cleanupAndReload(true, true, true);
  mp.game.ui.notifications.show('~g~Голосовой чат перезапущен');
}
function removeWorldVoice(nplayer, disconnect = true, triggerServer = true) {
  if (typeof nplayer == "number") nplayer = mp.players.atRemoteId(nplayer);
  if (!mp.players.exists(nplayer)) return;
  if (nplayer.remoteId == phoneTarget) return;
  if (radioList.indexOf(nplayer.remoteId) > -1) return;
  let idx = worldList.indexOf(nplayer.remoteId);
  if (idx !== -1) worldList.splice(idx, 1);
  if (!disconnect) return;
  const dist = _system.system.distanceToPos(mp.players.local.position, nplayer.position);
  const dataMultiple = getDistAndMultipleTarget(nplayer);
  if (triggerServer) {
    _custom.CustomEvent.triggerServer("worldVoiceRemove", nplayer.remoteId);
  }
  nplayer.isListening = false;
  nplayer.voiceVolume = 0.0;
  nplayer.voice3d = false;
}
let radioSpeakersq = [];
function voiceControllerTick() {
  radioSpeakersq = [];
  currentRadio = mp.players.local.getVariable('radioVol');
  const playersToRemove = [];
  const playersToAdd = [];
  mp.players.forEach(nplayer => {
    if (nplayer.remoteId === mp.players.local.remoteId) return;
    if (!phoneRadioController(nplayer)) {
      if (!nplayer.handle) {
        nplayer.voiceVolume = 0.0;
        nplayer.voice3d = false;
        return;
      }
      const dist = _system.system.distanceToPos(mp.players.local.position, nplayer.position);
      const dataMultiple = getDistAndMultipleTarget(nplayer);
      const needSpeak = dist <= dataMultiple.dist && mp.players.local.dimension == nplayer.dimension;
      if (!needSpeak) {
        if (worldList.indexOf(nplayer.remoteId) > -1) {
          removeWorldVoice(nplayer, true, false);
          playersToRemove.push(nplayer.remoteId);
        }
        nplayer.voiceVolume = 0.0;
        nplayer.voice3d = false;
      } else {
        if (worldList.indexOf(nplayer.remoteId) == -1) {
          worldList.push(nplayer.remoteId);
          playersToAdd.push(nplayer.remoteId);
          nplayer.isListening = true;
        }
        if (nplayer.vehicle && nplayer.vehicle == mp.players.local.vehicle) {
          nplayer.voiceVolume = voiceVolume * getVoiceMultipler(nplayer) * dataMultiple.multiple;
          nplayer.voice3d = false;
        } else {
          let s = 1;
          let clearLosTo = mp.players.local.hasClearLosTo(nplayer.handle, 17);
          if (clearLosTo) {
            const myVeh = mp.players.local.vehicle;
            const tVeh = nplayer.vehicle;
            if (myVeh) {
              if (!mp.game.vehicle.isThisModelABike(myVeh.model) && !mp.game.vehicle.isThisModelABicycle(myVeh.model) && !mp.game.vehicle.isThisModelAQuadbike(myVeh.model) && !mp.game.vehicle.isThisModelABoat(myVeh.model)) {
                s = _megaphone.VOICE_VEH_ONE_DIVIDER;
              }
            }
            if (tVeh) {
              if (!mp.game.vehicle.isThisModelABike(tVeh.model) && !mp.game.vehicle.isThisModelABicycle(tVeh.model) && !mp.game.vehicle.isThisModelAQuadbike(tVeh.model) && !mp.game.vehicle.isThisModelABoat(tVeh.model)) {
                if (s != _megaphone.VOICE_VEH_ONE_DIVIDER) s = _megaphone.VOICE_VEH_TWO_DIVIDER;else s = _megaphone.VOICE_VEH_ONE_DIVIDER;
              }
            }
          } else {
            s = _megaphone.VOICE_WALL_DIVIDER;
          }
          let maxVoiceVolume = voiceVolume * getVoiceMultipler(nplayer) * dataMultiple.multiple;
          let metrVoiceVolume = maxVoiceVolume / dataMultiple.dist;
          let minusVoiceVolume = metrVoiceVolume * dist;
          let endVolume = (maxVoiceVolume - minusVoiceVolume) / s;
          if (endVolume < 0) endVolume = 0.0;
          nplayer.voiceVolume = endVolume;
          nplayer.voice3d = true;
        }
      }
    }
  });
  radioSpeakers = radioSpeakersq;
  _custom.CustomEvent.triggerServer("worldVoiceChangeScope", playersToRemove, playersToAdd);
}
setInterval(() => {
  if (!_user.user.login) return;
  voiceControllerTick();
}, 100);
function phoneRadioController(nplayer) {
  let speak = false;
  if (nplayer) {
    if (currentRadio && currentRadio.length > 3 && currentRadio == nplayer.getVariable('radioVol') && nplayer.getVariable('radioSpeak')) {
      nplayer.voiceVolume = phoneVolume * getVoiceMultipler(nplayer);
      nplayer.voice3d = false;
      speak = true;
      if (!radioSpeakersq.includes(`${nplayer.getVariable('name')} [${nplayer.getVariable('id')}]`)) radioSpeakersq.push(`${nplayer.getVariable('name')} [${nplayer.getVariable('id')}]`);
    }
    if (typeof phoneTarget === "number" && phoneTarget == nplayer.remoteId) {
      nplayer.voiceVolume = phoneVolume * getVoiceMultipler(nplayer);
      nplayer.voice3d = false;
      speak = true;
    }
  }
  if (!speak) {
    if (worldList.indexOf(nplayer.remoteId) == -1) {
      nplayer.voiceVolume = 0.0;
      nplayer.voice3d = false;
    }
  }
  return speak;
}
mp.events.add('radio:targetStopSpeak', targetid => {
  radioList.splice(radioList.indexOf(targetid), 1);
  removeWorldVoice(targetid);
});
mp.events.add('radio:targetStartSpeak', targetid => {
  radioList.splice(radioList.indexOf(targetid), 1);
  radioList.push(targetid);
});
mp.events.addDataHandler("muted:voice", (entity, value) => {
  if (entity != mp.players.local) return;
  if (!value) return _gui.gui.execute('CEF.hud.lockMicrophone(false)');
  disableMicrophone();
  disableMicrophoneRadio();
  _gui.gui.execute('CEF.hud.lockMicrophone(true)');
});
let pressVoice = exports.pressVoice = false;
const enableMicrophone = async () => {
  if (!_user.user.login) return;
  if (_user.user.dead) return;
  if (mp.players.local.getVariable('muted:voice')) return _user.user.notify(`У вас блокировка голосового чата до ${_system.system.timeStampString(mp.players.local.getVariable('muted:voice'))}`, 'error');
  if (pressVoice) return;
  mp.voiceChat.muted = false;
  _custom.CustomEvent.triggerCef('hud:setMicrophone', true);
  _custom.CustomEvent.triggerServer('startWorldSpeak');
  exports.pressVoice = pressVoice = true;
  setTimeout(() => {
    exports.pressVoice = pressVoice = false;
  }, 300);
  exports.voiceKeyPressed = voiceKeyPressed = true;
  mp.game.streaming.requestAnimDict("mp_facial");
  while (!mp.game.streaming.hasAnimDictLoaded("mp_facial")) await _system.system.sleep(10);
  mp.players.local.playFacialAnim("mic_chatter", "mp_facial");
};
const disableMicrophone = async () => {
  if (!_user.user.login) return;
  mp.voiceChat.muted = true;
  _custom.CustomEvent.triggerCef('hud:setMicrophone', false);
  _custom.CustomEvent.triggerServer('stopWorldSpeak');
  exports.voiceKeyPressed = voiceKeyPressed = false;
  mp.game.streaming.requestAnimDict("facials@gen_male@variations@normal");
  while (!mp.game.streaming.hasAnimDictLoaded("facials@gen_male@variations@normal")) await _system.system.sleep(10);
  mp.players.local.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
};
setInterval(() => {
  if (radioKeyPressed || mp.players.local.getVariable('radioSpeak')) {
    if (mp.keys.isDown(mp.storage.data.hotkeys.radio)) return;
    disableMicrophoneRadio();
    return;
  }
  if (voiceKeyPressed) {
    if (mp.keys.isDown(mp.storage.data.hotkeys.voice)) return;
    disableMicrophone();
    return;
  }
}, 1500);
let radioKeyPressed = false;
let voiceKeyPressed = exports.voiceKeyPressed = false;
const enableMicrophoneRadio = () => {
  if (!_user.user.login) return;
  if (_user.user.cuffed) return;
  if (_user.user.dead) return;
  if (radioKeyPressed) return;
  if (!mp.players.local.getVariable('radioVol')) return;
  if (mp.players.local.getVariable('muted:voice')) return _user.user.notify(`У вас блокировка голосового чата до ${_system.system.timeStampString(mp.players.local.getVariable('muted:voice'))}`, 'error');
  radioKeyPressed = true;
  _custom.CustomEvent.triggerCef('radio:speaking', true);
  _custom.CustomEvent.triggerServer("radio:enableMic");
  enableMicrophone();
};
const disableMicrophoneRadio = () => {
  if (!_user.user.login) return;
  if (!radioKeyPressed) return;
  disableMicrophone();
  _custom.CustomEvent.triggerCef('radio:speaking', false);
  _user.user.stopAnim();
  radioKeyPressed = false;
  _custom.CustomEvent.triggerServer("radio:disableMic");
};
_custom.CustomEvent.register('radio', status => {
  if (status) enableMicrophoneRadio();else disableMicrophoneRadio();
});
_custom.CustomEvent.register('voice', status => {
  if (status) enableMicrophone();else disableMicrophone();
});
let oldRadioSpeakData = [];
setInterval(() => {
  if (JSON.stringify(oldRadioSpeakData) !== JSON.stringify(radioSpeakers)) {
    oldRadioSpeakData = radioSpeakers;
    _custom.CustomEvent.triggerCef('radio:speakersList', radioSpeakers);
  }
}, 100);
mp.events.addDataHandler('radioVol', (playerq, value) => {
  if (playerq.remoteId == mp.players.local.remoteId) {
    _custom.CustomEvent.triggerCef("radio:setFreq", value);
    mp.storage.data.radioFreq = value;
  }
});
mp.events.addDataHandler('radioSpeak', (playerq, status) => {
  if (status) {
    (0, _anim.playAnims)(playerq.remoteId, [["random@arrests", "generic_radio_chatter"]], true, true);
  } else {
    playerq.clearTasks();
  }
});
let int = setInterval(() => {
  if (!_user.user.login) return;
  clearInterval(int);
  if (!mp.storage.data.radioFreq) return;
  _custom.CustomEvent.triggerServer('radio:connectToFreq', mp.storage.data.radioFreq, false);
}, 1000);
mp.events.add({
  "playerStartTalking": nplayer => {
    phoneRadioController(nplayer);
  },
  "playerStartTalkingEvent": async nplayer => {
    if (!nplayer) return;
    nplayer.isSpeaking = true;
    let radioVol = mp.players.local.getVariable("radioVol");
    let nradioVol = nplayer.getVariable("radioVol");
    let nradiospeak = nplayer.getVariable('radioSpeak');
    if (phoneTarget == nplayer.remoteId || radioVol && radioVol == nradioVol && nradiospeak) {
      nplayer.voiceVolume = phoneVolume * getVoiceMultipler(nplayer);
      nplayer.voice3d = false;
    }
    phoneRadioController(nplayer);
    if (!nplayer.handle) return;
    mp.game.streaming.requestAnimDict("mp_facial");
    while (!mp.game.streaming.hasAnimDictLoaded("mp_facial")) await _system.system.sleep(10);
    nplayer.playFacialAnim("mic_chatter", "mp_facial");
  },
  "playerStopTalkingEvent": async nplayer => {
    if (!nplayer) return;
    nplayer.isSpeaking = false;
    if (!nplayer.handle) return;
    mp.game.streaming.requestAnimDict("facials@gen_male@variations@normal");
    while (!mp.game.streaming.hasAnimDictLoaded("facials@gen_male@variations@normal")) await _system.system.sleep(10);
    nplayer.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
  },
  "playerQuit": nplayer => {
    if (!nplayer) return;
    worldList.splice(worldList.indexOf(nplayer.remoteId), 1);
    radioList.splice(radioList.indexOf(nplayer.remoteId), 1);
    if (phoneTarget == nplayer.remoteId) phoneTarget = null;
  },
  "callStop": () => {
    const target = mp.players.atRemoteId(phoneTarget);
    phoneTarget = null;
    removeWorldVoice(target);
  },
  "callStart": nplayerid => {
    phoneTarget = nplayerid;
  }
});
let radioSpeakers = [];
},{"./user":"ggMw","./custom.event":"py8h","./system":"pi2J","./gui":"bk91","./anim":"stJJ","../../shared/megaphone":"o6VP"}],"x9dN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VENDOR_MACHINES = void 0;
const VENDOR_MACHINES = exports.VENDOR_MACHINES = [{
  model: 1114264700,
  cost: 300,
  item_id: 3,
  offset: {
    x: 0.0,
    y: -0.97,
    z: 0.05
  }
}, {
  model: 992069095,
  cost: 300,
  item_id: 2,
  offset: {
    x: 0.0,
    y: -0.97,
    z: 0.05
  }
}, {
  model: -654402915,
  cost: 300,
  item_id: 21,
  offset: {
    x: 0.0,
    y: -0.97,
    z: 0.05
  }
}, {
  model: 690372739,
  cost: 300,
  item_id: 5,
  offset: {
    x: 0.0,
    y: -0.87,
    z: 1.05
  }
}];
},{}],"fYDh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ATM_PROPS = exports.ATM_BUTTONS = void 0;
const ATM_PROPS = exports.ATM_PROPS = [{
  model: 506770882,
  offset: {
    x: 0.0,
    y: -0.58,
    z: 1
  },
  task: "PROP_HUMAN_ATM"
}, {
  model: -870868698,
  offset: {
    x: 0.0,
    y: -0.88,
    z: 1
  },
  task: "PROP_HUMAN_ATM"
}, {
  model: -1126237515,
  offset: {
    x: 0.0,
    y: -0.58,
    z: 1
  },
  task: "PROP_HUMAN_ATM"
}, {
  model: -1364697528,
  offset: {
    x: 0.0,
    y: -0.58,
    z: 1
  },
  task: "PROP_HUMAN_ATM"
}];
const ATM_BUTTONS = exports.ATM_BUTTONS = [{
  id: 0,
  icon: 'wallet',
  name: 'Снятие налички'
}, {
  id: 1,
  icon: 'creditcard-income',
  name: 'Перевод на другой счёт'
}, {
  id: 2,
  icon: 'table',
  name: 'История операций'
}, {
  id: 3,
  icon: 'command',
  name: 'Смена пин-кода'
}];
},{}],"b3O8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CASH_SUM_REVARD = exports.CASH_RESTORE_HOURS = exports.CASH_MACHINE_GRAB_SECOND = exports.CASH_MACHINES_LIST = exports.CASH_GRAB_PED_SCARE_TIME = exports.CASH_GRAB_MIN_ONLINE = exports.CASH_GRAB_MANY = exports.CASH_GRAB_BIZ_DIST = void 0;
const CASH_MACHINES_LIST = exports.CASH_MACHINES_LIST = [303280717, -297318917];
const CASH_GRAB_PED_SCARE_TIME = exports.CASH_GRAB_PED_SCARE_TIME = 5;
const CASH_RESTORE_HOURS = exports.CASH_RESTORE_HOURS = 7;
const CASH_GRAB_MANY = exports.CASH_GRAB_MANY = true;
const CASH_GRAB_BIZ_DIST = exports.CASH_GRAB_BIZ_DIST = 10;
const CASH_MACHINE_GRAB_SECOND = exports.CASH_MACHINE_GRAB_SECOND = 5 * 60;
const CASH_GRAB_MIN_ONLINE = exports.CASH_GRAB_MIN_ONLINE = 150;
const CASH_SUM_REVARD = exports.CASH_SUM_REVARD = [7500, 10000];
},{}],"g7OS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DOORS_LIST = void 0;
const DOORS_LIST = exports.DOORS_LIST = [{
  text: "Кабинет губернатора",
  fraction: 1,
  doors: [{
    hash: 736699661,
    x: -557.67,
    y: -205.05,
    z: 38.55
  }, {
    hash: 736699661,
    x: -556.38,
    y: -207.31,
    z: 38.54
  }],
  pos: {
    x: -556.85,
    y: -206.02,
    z: 38.38
  },
  defaultOpened: true
}, {
  text: "Зал заседаний",
  fraction: 1,
  doors: [{
    hash: 736699661,
    x: -560.68,
    y: -199.83,
    z: 38.54
  }, {
    hash: 736699661,
    x: -559.39,
    y: -202.08,
    z: 38.54
  }],
  pos: {
    x: -559.87,
    y: -200.81,
    z: 38.38
  },
  defaultOpened: true
}, {
  text: "Комната охраны",
  fraction: 1,
  doors: [{
    hash: 1219957182,
    x: -563.42,
    y: -195.08,
    z: 37.38
  }, {
    hash: -1225363909,
    x: -562.68,
    y: -196.37,
    z: 37.38
  }],
  pos: {
    x: -562.94,
    y: -195.65,
    z: 38.38
  },
  defaultOpened: true
}, {
  text: "Зал собраний",
  fraction: 1,
  doors: [{
    hash: 736699661,
    x: -543.11,
    y: -185.10,
    z: 38.39
  }, {
    hash: 736699661,
    x: -541.80,
    y: -187.35,
    z: 38.38
  }],
  pos: {
    x: -542.63,
    y: -186.33,
    z: 38.23
  },
  defaultOpened: true
}, {
  text: "Зал собраний",
  fraction: 1,
  doors: [{
    hash: 736699661,
    x: -540.68,
    y: -189.37,
    z: 38.38
  }, {
    hash: 736699661,
    x: -539.39,
    y: -191.63,
    z: 38.38
  }],
  pos: {
    x: -540.09,
    y: -190.57,
    z: 38.23
  },
  defaultOpened: true
}, {
  text: "Офис капитана",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: 1857.25,
    y: 3690.30,
    z: 34.42
  }],
  pos: {
    x: 1856.68,
    y: 3689.86,
    z: 34.27
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: 1849.98,
    y: 3684.11,
    z: 34.42
  }, {
    hash: -2023754432,
    x: 1851.29,
    y: 3681.87,
    z: 34.42
  }],
  pos: {
    x: 1850.59,
    y: 3683.01,
    z: 34.27
  },
  defaultOpened: true
}, {
  text: "Оружейная комната",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: 1849.40,
    y: 3691.21,
    z: 34.42
  }, {
    hash: -2023754432,
    x: 1847.13,
    y: 3689.95,
    z: 34.42
  }],
  pos: {
    x: 1848.34,
    y: 3690.48,
    z: 34.27
  },
  defaultOpened: true
}, {
  text: "Клетка 1",
  fraction: 7,
  doors: [{
    hash: 2367212570,
    x: 1862.763,
    y: 3688.412,
    z: 30.40947
  }],
  pos: {
    x: 1862.18,
    y: 3689.24,
    z: 30.26
  },
  defaultOpened: true
}, {
  text: "Клетка 2",
  fraction: 7,
  doors: [{
    hash: 2367212570,
    x: 1860.897,
    y: 3691.643,
    z: 30.40947
  }],
  pos: {
    x: 1860.68,
    y: 3692.40,
    z: 30.26
  },
  defaultOpened: true
}, {
  text: "Клетка 3",
  fraction: 7,
  doors: [{
    hash: 2367212570,
    x: 1858.996,
    y: 3694.936,
    z: 30.40947
  }],
  pos: {
    x: 1858.60,
    y: 3695.67,
    z: 30.26
  },
  defaultOpened: true
}, {
  text: "Допросная",
  fraction: 7,
  doors: [{
    hash: 749848321,
    x: 1852.92,
    y: 3686.41,
    z: 30.41
  }],
  pos: {
    x: 1852.39,
    y: 3686.11,
    z: 30.26
  },
  defaultOpened: true
}, {
  text: "Гардеробная передняя",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: -450.71,
    y: 6016.37,
    z: 31.87
  }],
  pos: {
    x: -450.12,
    y: 6016.14,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Гардеробная задняя",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: -454.04,
    y: 6010.24,
    z: 31.86
  }],
  pos: {
    x: -453.46,
    y: 6010.71,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Комната ожидания",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: -442.86,
    y: 6010.96,
    z: 31.87
  }, {
    hash: -2023754432,
    x: -441.02,
    y: 6012.79,
    z: 31.87
  }],
  pos: {
    x: -441.82,
    y: 6011.81,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка передняя",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: -442.66,
    y: 6009.30,
    z: 31.87
  }, {
    hash: -2023754432,
    x: -440.82,
    y: 6007.46,
    z: 31.87
  }],
  pos: {
    x: -441.63,
    y: 6008.32,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка задняя",
  fraction: 7,
  doors: [{
    hash: 749848321,
    x: -447.77,
    y: 6005.19,
    z: 31.87
  }],
  pos: {
    x: -447.16,
    y: 6004.93,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Оружейная комната передняя",
  fraction: 7,
  doors: [{
    hash: 749848321,
    x: -437.04,
    y: 6003.70,
    z: 31.87
  }],
  pos: {
    x: -436.45,
    y: 6003.40,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Оружейная комната задняя",
  fraction: 7,
  doors: [{
    hash: 749848321,
    x: -440.42,
    y: 5998.60,
    z: 31.87
  }],
  pos: {
    x: -440.93,
    y: 5999.20,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Хол",
  fraction: 7,
  doors: [{
    hash: -2023754432,
    x: -449.57,
    y: 6008.54,
    z: 31.87
  }, {
    hash: -2023754432,
    x: -447.73,
    y: 6006.70,
    z: 31.87
  }],
  pos: {
    x: -448.67,
    y: 6007.65,
    z: 31.72
  },
  defaultOpened: true
}, {
  text: "Клетка",
  fraction: 7,
  doors: [{
    hash: 2367212570,
    x: -444.3676,
    y: 6012.223,
    z: 28.13549
  }],
  pos: {
    x: -444.54,
    y: 6011.47,
    z: 27.99
  },
  defaultOpened: true
}, {
  text: "Допросная",
  fraction: 7,
  doors: [{
    hash: 749848321,
    x: -436.63,
    y: 6002.55,
    z: 28.14
  }],
  pos: {
    x: -437.05,
    y: 6002.04,
    z: 27.99
  },
  defaultOpened: true
}, {
  text: "КПП №1",
  fraction: 4,
  doors: [{
    hash: 3419809524,
    x: -1569.93579,
    y: 2765.0498,
    z: 18.088747
  }, {
    hash: 3419809524,
    x: -1562.23181,
    y: 2774.231,
    z: 18.088747
  }],
  pos: {
    x: -1565.88,
    y: 2769.39,
    z: 17.44
  },
  defaultOpened: true
}, {
  text: "КПП №2",
  fraction: 4,
  doors: [{
    hash: 3419809524,
    x: -2322.044,
    y: 3393.939,
    z: 31.424181
  }, {
    hash: 3419809524,
    x: -2314.3186,
    y: 3403.1123,
    z: 31.4162941
  }],
  pos: {
    x: -2318.45,
    y: 3398.73,
    z: 30.76
  },
  defaultOpened: true
}, {
  text: "Казарма",
  fraction: 4,
  doors: [{
    hash: 1248599813,
    x: -2346.53,
    y: 3231.97,
    z: 35.09
  }],
  pos: {
    x: -2346.15,
    y: 3231.20,
    z: 34.97
  },
  defaultOpened: true
}, {
  text: "Ворота EMS",
  fraction: 16,
  doors: [{
    hash: 741314661,
    x: 399.8277,
    y: -551.1396,
    z: 27.56778
  }],
  pos: {
    x: 402.78,
    y: -546.71,
    z: 28.58
  },
  defaultOpened: true
}, {
  text: "Серверная",
  fraction: 3,
  doors: [{
    hash: -2051651622,
    x: 2504.32,
    y: -411.30,
    z: 94.27
  }],
  pos: {
    x: 2504.83,
    y: -411.69,
    z: 94.11
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка",
  fraction: 3,
  doors: [{
    hash: -1033001619,
    x: 2490.97,
    y: -405.18,
    z: 94.26
  }],
  pos: {
    x: 2490.41,
    y: -404.62,
    z: 94.11
  },
  defaultOpened: true
}, {
  text: "КПЗ и склад",
  fraction: 3,
  doors: [{
    hash: -1033001619,
    x: 2491.09,
    y: -405.05,
    z: 90.27
  }],
  pos: {
    x: 2490.59,
    y: -404.52,
    z: 90.11
  },
  defaultOpened: true
}, {
  text: "Склад",
  fraction: 3,
  doors: [{
    hash: -1033001619,
    x: 2496.61,
    y: -403.95,
    z: 90.26
  }],
  pos: {
    x: 2495.97,
    y: -403.42,
    z: 90.10
  },
  defaultOpened: true
}, {
  text: "Первая допросная",
  fraction: 3,
  doors: [{
    hash: -1033001619,
    x: 2502.89,
    y: -416.84,
    z: 90.25
  }],
  pos: {
    x: 2502.35,
    y: -416.28,
    z: 90.10
  },
  defaultOpened: true
}, {
  text: "Вторая допросная",
  fraction: 3,
  doors: [{
    hash: -1033001619,
    x: 2506.97,
    y: -420.91,
    z: 90.25
  }],
  pos: {
    x: 2506.44,
    y: -420.39,
    z: 90.10
  },
  defaultOpened: true
}, {
  text: "Второй этаж",
  fraction: 3,
  doors: [{
    hash: -1033001619,
    x: 2490.97,
    y: -405.18,
    z: 100.52
  }],
  pos: {
    x: 2490.47,
    y: -404.61,
    z: 100.36
  },
  defaultOpened: true
}, {
  text: "Кабинет директора",
  fraction: 3,
  doors: [{
    hash: -2051651622,
    x: 2517.29,
    y: -443.74,
    z: 100.50
  }],
  pos: {
    x: 2516.75,
    y: -444.27,
    z: 100.37
  },
  defaultOpened: true
}, {
  text: "Лекционная",
  fraction: 3,
  doors: [{
    hash: -2051651622,
    x: 2523.45,
    y: -437.57,
    z: 100.51
  }],
  pos: {
    x: 2522.92,
    y: -438.07,
    z: 100.37
  },
  defaultOpened: true
}, {
  text: "Главный вход в левый корпус",
  fraction: 3,
  doors: [{
    hash: 3691419444,
    x: 2521.943,
    y: -417.3813,
    z: 93.09399
  }, {
    hash: 1122723068,
    x: 2520.103,
    y: -415.5412,
    z: 93.09382
  }],
  pos: {
    x: 2520.85,
    y: -416.45,
    z: 94.12
  },
  defaultOpened: true
}, {
  text: "Подвал",
  fraction: 3,
  doors: [{
    hash: 1055151324,
    x: 2511.095,
    y: -416.0965,
    z: 99.27245
  }],
  pos: {
    x: 2510.34,
    y: -415.76,
    z: 99.11
  }
}, {
  text: "Конференц зал",
  fraction: 3,
  doors: [{
    hash: 1055151324,
    x: 2510.824,
    y: -435.6792,
    z: 99.27245
  }, {
    hash: 1055151324,
    x: 2512.664,
    y: -433.8399,
    z: 99.27245
  }],
  pos: {
    x: 2511.55,
    y: -434.44,
    z: 99.11
  }
}, {
  text: "Кабинеты",
  fraction: 3,
  doors: [{
    hash: 1055151324,
    x: 2499.76,
    y: -424.20,
    z: 99.11
  }, {
    hash: 1055151324,
    x: 2501.43,
    y: -422.52,
    z: 99.11
  }],
  pos: {
    x: 2500.37,
    y: -423.30,
    z: 99.11
  }
}, {
  text: "Главный вход",
  fraction: 3,
  doors: [{
    hash: 4180086300,
    x: 2515.791,
    y: -355.7704,
    z: 93.08971
  }, {
    hash: 2249271310,
    x: 2513.928,
    y: -357.5838,
    z: 93.08971
  }],
  pos: {
    x: 2514.82,
    y: -356.55,
    z: 94.09
  }
}, {
  text: "Лестница",
  fraction: 3,
  doors: [{
    hash: 823867722,
    x: 2497.481,
    y: -353.3639,
    z: 94.25793
  }],
  pos: {
    x: 2498.03,
    y: -353.91,
    z: 94.09
  }
}, {
  text: "Тренажерный зал",
  fraction: 3,
  doors: [{
    hash: 823867722,
    x: 2506.72,
    y: -361.99,
    z: 94.09
  }, {
    hash: 823867722,
    x: 2504.99,
    y: -360.32,
    z: 94.09
  }],
  pos: {
    x: 2505.76,
    y: -361.36,
    z: 94.09
  }
}, {
  text: "Охрана",
  fraction: 3,
  doors: [{
    hash: 823867722,
    x: 2506.371,
    y: -357.1198,
    z: 94.2556
  }],
  pos: {
    x: 2505.78,
    y: -356.82,
    z: 94.09
  }
}, {
  text: "Гардероб",
  fraction: 3,
  doors: [{
    hash: 823867722,
    x: 2520.449,
    y: -336.174,
    z: 94.25628
  }, {
    hash: 823867722,
    x: 2522.29,
    y: -338.0148,
    z: 94.25628
  }],
  pos: {
    x: 2521.16,
    y: -337.32,
    z: 94.09
  }
}, {
  text: "Задний вход",
  fraction: 5,
  doors: [{
    hash: 1104171198,
    x: -1045.118,
    y: -232.0034,
    z: 39.44269
  }, {
    hash: 1104171198,
    x: -1046.52,
    y: -229.3665,
    z: 39.44269
  }],
  pos: {
    x: -1045.79,
    y: -230.70,
    z: 39.01
  },
  defaultOpened: true
}, {
  text: "Главный вход",
  fraction: 5,
  doors: [{
    hash: -1679881977,
    x: -1083.62,
    y: -260.42,
    z: 38.19
  }, {
    hash: -1045015371,
    x: -1080.97,
    y: -259.02,
    z: 38.19
  }],
  pos: {
    x: -1082.22,
    y: -259.66,
    z: 37.79
  },
  defaultOpened: true
}, {
  text: "конференц-зал",
  fraction: 5,
  doors: [{
    hash: 2473190209,
    x: -1048.281,
    y: -236.8198,
    z: 44.17329
  }, {
    hash: 2473190209,
    x: -1047.086,
    y: -239.1204,
    z: 44.17329
  }],
  pos: {
    x: -1048.38,
    y: -238.24,
    z: 44.02
  },
  defaultOpened: true
}, {
  text: "Гардеробная",
  fraction: 5,
  doors: [{
    hash: -495720969,
    x: -1055.96,
    y: -236.43,
    z: 44.17
  }],
  pos: {
    x: -1055.29,
    y: -236.18,
    z: 44.02
  },
  defaultOpened: true
}, {
  text: "Черный вход",
  fraction: 5,
  doors: [{
    hash: 738456037,
    x: -576.44,
    y: -939.58,
    z: 23.99
  }, {
    hash: 738456037,
    x: -573.84,
    y: -939.58,
    z: 23.99
  }],
  pos: {
    x: -575.15,
    y: -939.24,
    z: 23.86
  }
}, {
  text: "Студия",
  fraction: 5,
  doors: [{
    hash: 1901183774,
    x: -580.05,
    y: -918.18,
    z: 28.34
  }],
  pos: {
    x: -580.24,
    y: -917.49,
    z: 28.18
  }
}, {
  text: "Студия 2",
  fraction: 5,
  doors: [{
    hash: 1901183774,
    x: -579.25,
    y: -928.54,
    z: 28.34
  }],
  pos: {
    x: -579.24,
    y: -929.38,
    z: 28.19
  }
}, {
  text: "Студия 3",
  fraction: 5,
  doors: [{
    hash: 1901183774,
    x: -574.97,
    y: -938.39,
    z: 28.34
  }, {
    hash: 1901183774,
    x: -574.98,
    y: -935.82,
    z: 28.34
  }],
  pos: {
    x: -575.16,
    y: -937.19,
    z: 28.18
  }
}, {
  text: "Серверная",
  fraction: 5,
  doors: [{
    hash: 1901183774,
    x: -594.12,
    y: -931.85,
    z: 32.69
  }],
  pos: {
    x: -594.75,
    y: -931.96,
    z: 32.52
  }
}, {
  text: "Студия 5",
  fraction: 5,
  doors: [{
    hash: 1901183774,
    x: -574.58,
    y: -935.11,
    z: 32.69
  }],
  pos: {
    x: -574.59,
    y: -935.85,
    z: 32.52
  }
}, {
  text: "Гардеробная",
  fraction: 5,
  doors: [{
    hash: 1901183774,
    x: -575.70,
    y: -926.10,
    z: 32.69
  }],
  pos: {
    x: -576.65,
    y: -926.26,
    z: 32.52
  }
}, {
  text: "Главный вход",
  fraction: 24,
  doors: [{
    hash: 1033441082,
    x: -1515.80,
    y: 850.72,
    z: 181.72
  }, {
    hash: 1033441082,
    x: -1518.03,
    y: 851.55,
    z: 181.72
  }],
  pos: {
    x: -1516.90,
    y: 851.30,
    z: 181.59
  },
  defaultOpened: true
}, {
  text: "Правая входная дверь",
  fraction: 24,
  doors: [{
    hash: 1033441082,
    x: -1520.77,
    y: 848.33,
    z: 181.72
  }],
  pos: {
    x: -1520.14,
    y: 848.61,
    z: 181.60
  },
  defaultOpened: true
}, {
  text: "Левая входная дверь",
  fraction: 24,
  doors: [{
    hash: 1033441082,
    x: -1500.63,
    y: 856.68,
    z: 181.72
  }],
  pos: {
    x: -1501.27,
    y: 856.46,
    z: 181.60
  },
  defaultOpened: true
}, {
  text: "Задний вход",
  fraction: 24,
  doors: [{
    hash: 1033441082,
    x: -1490.46,
    y: 851.03,
    z: 181.72
  }, {
    hash: 1033441082,
    x: -1491.46,
    y: 853.18,
    z: 181.72
  }],
  pos: {
    x: -1491.04,
    y: 852.21,
    z: 181.60
  },
  defaultOpened: true
}, {
  text: "Служебное помещение",
  fraction: 24,
  doors: [{
    hash: -1785293089,
    x: -1511.60,
    y: 844.05,
    z: 181.70
  }, {
    hash: -1785293089,
    x: -1510.60,
    y: 841.90,
    z: 181.70
  }],
  pos: {
    x: -1511.13,
    y: 843.00,
    z: 181.60
  },
  defaultOpened: true
}, {
  text: "Кабинет директора",
  fraction: 24,
  doors: [{
    hash: -1785293089,
    x: -1520.32,
    y: 833.40,
    z: 186.28
  }],
  pos: {
    x: -1520.03,
    y: 832.70,
    z: 186.15
  },
  defaultOpened: true
}, {
  text: "Выход на балкон",
  fraction: 24,
  doors: [{
    hash: 1033441082,
    x: -1522.39,
    y: 843.54,
    z: 186.28
  }],
  pos: {
    x: -1521.79,
    y: 843.83,
    z: 186.15
  },
  defaultOpened: true
}, {
  text: "Двор",
  fraction: 8,
  doors: [{
    hash: -462653789,
    x: -1346.44,
    y: 57.45,
    z: 55.69
  }, {
    hash: -462653789,
    x: -1346.61,
    y: 59.33,
    z: 55.69
  }],
  pos: {
    x: -1346.34,
    y: 58.40,
    z: 55.25
  },
  defaultOpened: true
}, {
  text: "Основной вход",
  fraction: 8,
  doors: [{
    hash: -462653789,
    x: -1365.66,
    y: 57.70,
    z: 54.44
  }, {
    hash: -462653789,
    x: -1365.49,
    y: 55.82,
    z: 54.44
  }],
  pos: {
    x: -1365.49,
    y: 56.75,
    z: 54.13
  },
  defaultOpened: true
}, {
  text: "Подвал",
  fraction: 8,
  doors: [{
    hash: -1687047623,
    x: -1358.03,
    y: 90.57,
    z: 55.40
  }],
  pos: {
    x: -1358.76,
    y: 90.47,
    z: 55.25
  },
  defaultOpened: true
}, {
  text: "Кабинет директора",
  fraction: 8,
  doors: [{
    hash: -1687047623,
    x: -1349.91,
    y: 59.18,
    z: 60.52
  }],
  pos: {
    x: -1350.16,
    y: 59.90,
    z: 60.41
  },
  defaultOpened: true
}, {
  text: "Гардеробная",
  fraction: 8,
  doors: [{
    hash: -1687047623,
    x: -1351.09,
    y: 61.97,
    z: 60.52
  }],
  pos: {
    x: -1351.79,
    y: 61.67,
    z: 60.41
  },
  defaultOpened: true
}, {
  text: "Оружейная",
  fraction: 8,
  doors: [{
    hash: -1687047623,
    x: -1359.27,
    y: 61.23,
    z: 60.53
  }],
  pos: {
    x: -1359.79,
    y: 60.90,
    z: 60.41
  },
  defaultOpened: true
}, {
  text: "Погреб",
  fraction: 9,
  doors: [{
    hash: 1033441082,
    x: -1929.55,
    y: 2059.38,
    z: 140.97
  }],
  pos: {
    x: -1928.90,
    y: 2059.12,
    z: 140.84
  },
  defaultOpened: true
}, {
  text: "Левый вход",
  fraction: 9,
  doors: [{
    hash: 1662086909,
    x: -1890.26,
    y: 2052.15,
    z: 141.29
  }, {
    hash: 1662086909,
    x: -1887.94,
    y: 2051.30,
    z: 141.29
  }],
  pos: {
    x: -1888.98,
    y: 2051.75,
    z: 141.02
  },
  defaultOpened: true
}, {
  text: "Правый вход",
  fraction: 9,
  doors: [{
    hash: 1662086909,
    x: -1887.56,
    y: 2051.16,
    z: 141.29
  }, {
    hash: 1662086909,
    x: -1885.24,
    y: 2050.31,
    z: 141.29
  }],
  pos: {
    x: -1886.49,
    y: 2050.75,
    z: 141.01
  },
  defaultOpened: true
}, {
  text: "Задний выход",
  fraction: 9,
  doors: [{
    hash: -245429350,
    x: -1879.33,
    y: 2071.39,
    z: 141.28
  }, {
    hash: -245429350,
    x: -1879.33,
    y: 2071.39,
    z: 141.28
  }],
  pos: {
    x: -1880.32,
    y: 2071.58,
    z: 141.00
  },
  defaultOpened: true
}, {
  text: "Правый выход",
  fraction: 9,
  doors: [{
    hash: 1662086909,
    x: -1861.76,
    y: 2054.07,
    z: 141.29
  }, {
    hash: 1662086909,
    x: -1859.29,
    y: 2054.07,
    z: 141.29
  }],
  pos: {
    x: -1860.61,
    y: 2054.00,
    z: 141.01
  },
  defaultOpened: true
}, {
  text: "Кухня",
  fraction: 9,
  doors: [{
    hash: -1687047623,
    x: -1876.10,
    y: 2057.71,
    z: 141.11
  }],
  pos: {
    x: -1875.88,
    y: 2058.39,
    z: 140.99
  },
  defaultOpened: true
}, {
  text: "Балкон",
  fraction: 9,
  doors: [{
    hash: -1687047623,
    x: -1890.48,
    y: 2068.24,
    z: 145.66
  }],
  pos: {
    x: -1890.77,
    y: 2067.60,
    z: 145.51
  },
  defaultOpened: true
}, {
  text: "Кабинет директора",
  fraction: 9,
  doors: [{
    hash: -1687047623,
    x: -1883.43,
    y: 2055.98,
    z: 145.66
  }],
  pos: {
    x: -1884.12,
    y: 2056.17,
    z: 145.51
  },
  defaultOpened: true
}, {
  text: "Гардеробная",
  fraction: 9,
  doors: [{
    hash: -1687047623,
    x: -1882.05,
    y: 2057.23,
    z: 145.57
  }],
  pos: {
    x: -1882.28,
    y: 2056.56,
    z: 145.51
  },
  defaultOpened: true
}, {
  text: "Оружейная",
  fraction: 9,
  doors: [{
    hash: 747539127,
    x: -1881.00,
    y: 2060.67,
    z: 144.51
  }],
  pos: {
    x: -1881.13,
    y: 2060.27,
    z: 145.51
  },
  defaultOpened: true
}, {
  text: "Главный вход",
  fraction: 23,
  doors: [{
    hash: 1039647283,
    x: -336.10,
    y: 206.45,
    z: 89.45
  }, {
    hash: 1039647283,
    x: -338.51,
    y: 207.43,
    z: 89.45
  }],
  pos: {
    x: -337.41,
    y: 206.96,
    z: 88.58
  },
  defaultOpened: true
}, {
  text: "Задний выход",
  fraction: 23,
  doors: [{
    hash: 866758039,
    x: -349.39,
    y: 179.50,
    z: 88.10
  }, {
    hash: 866758039,
    x: -347.24,
    y: 179.50,
    z: 88.10
  }],
  pos: {
    x: -348.29,
    y: 179.52,
    z: 87.94
  },
  defaultOpened: true
}, {
  text: "Вход в подвал",
  fraction: 23,
  doors: [{
    hash: -1687047623,
    x: -335.20,
    y: 188.34,
    z: 88.71
  }],
  pos: {
    x: -335.94,
    y: 188.30,
    z: 88.57
  },
  defaultOpened: true
}, {
  text: "Кухня",
  fraction: 23,
  doors: [{
    hash: -121180812,
    x: -348.75,
    y: 194.10,
    z: 88.72
  }],
  pos: {
    x: -348.71,
    y: 193.56,
    z: 88.57
  },
  defaultOpened: true
}, {
  text: "Кабинет директора",
  fraction: 23,
  doors: [{
    hash: -121180812,
    x: -344.98,
    y: 190.35,
    z: 95.34
  }],
  pos: {
    x: -344.89,
    y: 190.99,
    z: 95.19
  },
  defaultOpened: true
}, {
  text: "Оружейная",
  fraction: 23,
  doors: [{
    hash: -121180812,
    x: -351.94,
    y: 191.08,
    z: 95.34
  }],
  pos: {
    x: -351.98,
    y: 190.52,
    z: 95.19
  },
  defaultOpened: true
}, {
  text: "Служебный вход",
  fraction: 23,
  doors: [{
    hash: -121180812,
    x: -347.58,
    y: 195.83,
    z: 95.34
  }],
  pos: {
    x: -348.14,
    y: 195.81,
    z: 95.19
  },
  defaultOpened: true
}, {
  text: "Вход",
  fraction: 21,
  doors: [{
    hash: -35610440,
    x: -470.44,
    y: -1722.93,
    z: 18.91
  }],
  pos: {
    x: -470.56,
    y: -1722.24,
    z: 18.77
  },
  defaultOpened: true
}, {
  text: "Вход 2",
  fraction: 21,
  doors: [{
    hash: -35610440,
    x: -484.22,
    y: -1729.65,
    z: 19.82
  }],
  pos: {
    x: -485.08,
    y: -1729.69,
    z: 19.67
  },
  defaultOpened: true
}, {
  text: "Мастерская",
  fraction: 21,
  doors: [{
    hash: -35610440,
    x: -483.51,
    y: -1728.13,
    z: 19.68
  }],
  pos: {
    x: -483.93,
    y: -1727.58,
    z: 19.51
  },
  defaultOpened: true
}, {
  text: "Склад",
  fraction: 21,
  doors: [{
    hash: -35610440,
    x: -485.73,
    y: -1719.85,
    z: 19.72
  }],
  pos: {
    x: -485.43,
    y: -1720.60,
    z: 19.57
  },
  defaultOpened: true
}, {
  text: "Вход",
  fraction: 21,
  doors: [{
    hash: 1093926891,
    x: -1387.088,
    y: -586.5935,
    z: 30.45739
  }, {
    hash: 1093926891,
    x: -1389.197,
    y: -587.9832,
    z: 30.45739
  }],
  pos: {
    x: -1388.32,
    y: -587.02,
    z: 30.22
  },
  defaultOpened: true
}, {
  text: "Вход",
  fraction: 18,
  doors: [{
    hash: 4259356856,
    x: 893.1168,
    y: -2171.419,
    z: 32.54395
  }],
  pos: {
    x: 892.44,
    y: -2171.44,
    z: 32.39
  },
  defaultOpened: true
}, {
  text: "Склад",
  fraction: 18,
  doors: [{
    hash: 4259356856,
    x: 884.3304,
    y: -2163.563,
    z: 32.4353
  }],
  pos: {
    x: 884.35,
    y: -2162.83,
    z: 32.28
  },
  defaultOpened: true
}, {
  text: "Склад",
  fraction: 20,
  doors: [{
    hash: 1173348778,
    x: 452.0893,
    y: -1305.413,
    z: 30.35599
  }],
  pos: {
    x: 452.88,
    y: -1305.54,
    z: 30.12
  },
  defaultOpened: true
}, {
  text: "Вход 1",
  fraction: 22,
  doors: [{
    hash: 2374820049,
    x: 500.0611,
    y: -1962.585,
    z: 25.16408
  }],
  pos: {
    x: 500.88,
    y: -1962.96,
    z: 25.06
  },
  defaultOpened: true
}, {
  text: "Вход 2",
  fraction: 22,
  doors: [{
    hash: 2374820049,
    x: 502.4556,
    y: -1966.44,
    z: 25.16417
  }],
  pos: {
    x: 502.17,
    y: -1965.70,
    z: 25.06
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка 1",
  fraction: 2,
  doors: [{
    hash: 2974090917,
    x: 471.3868,
    y: -986.3861,
    z: 28.23847
  }, {
    hash: 2974090917,
    x: 468.783,
    y: -986.3882,
    z: 28.23847
  }],
  pos: {
    x: 470.08,
    y: -985.97,
    z: 28.09
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка 2",
  fraction: 2,
  doors: [{
    hash: 4163671155,
    x: 468.7839,
    y: -993.9683,
    z: 28.23798
  }, {
    hash: 4163671155,
    x: 471.3859,
    y: -993.9683,
    z: 28.23798
  }],
  pos: {
    x: 469.98,
    y: -994.12,
    z: 28.09
  },
  defaultOpened: true
}, {
  text: "Офис 1",
  fraction: 2,
  doors: [{
    hash: 2372686273,
    x: 452.8327,
    y: -988.2734,
    z: 35.95989
  }, {
    hash: 2372686273,
    x: 452.8327,
    y: -990.3912,
    z: 35.95989
  }],
  pos: {
    x: 452.73,
    y: -989.31,
    z: 35.68
  },
  defaultOpened: true
}, {
  text: "Офис 2",
  fraction: 2,
  doors: [{
    hash: 2974090917,
    x: 459.9573,
    y: -991.5281,
    z: 35.83414
  }, {
    hash: 2974090917,
    x: 459.9565,
    y: -988.9236,
    z: 35.83414
  }],
  pos: {
    x: 459.95,
    y: -990.31,
    z: 35.68
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка 3",
  fraction: 2,
  doors: [{
    hash: 2974090917,
    x: 459.9573,
    y: -991.5283,
    z: 30.83918
  }, {
    hash: 2974090917,
    x: 459.9573,
    y: -988.9244,
    z: 30.83918
  }],
  pos: {
    x: 460.03,
    y: -990.11,
    z: 30.69
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка 4",
  fraction: 2,
  doors: [{
    hash: 4163671155,
    x: 462.2406,
    y: -988.9244,
    z: 25.86339
  }, {
    hash: 4163671155,
    x: 462.2434,
    y: -991.5268,
    z: 25.86339
  }],
  pos: {
    x: 462.09,
    y: -990.23,
    z: 25.71
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка 5",
  fraction: 2,
  doors: [{
    hash: 4163671155,
    x: 468.7828,
    y: -986.3874,
    z: 23.46275
  }, {
    hash: 4163671155,
    x: 471.3876,
    y: -986.3874,
    z: 23.46275
  }],
  pos: {
    x: 470.33,
    y: -986.36,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Лестничная площадка 6",
  fraction: 2,
  doors: [{
    hash: 4163671155,
    x: 471.3864,
    y: -993.9685,
    z: 23.46061
  }, {
    hash: 4163671155,
    x: 468.7833,
    y: -993.9685,
    z: 23.46061
  }],
  pos: {
    x: 470.03,
    y: -993.29,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Вход к камерам",
  fraction: 2,
  doors: [{
    hash: 2233064549,
    x: 470.7346,
    y: -977.412,
    z: 23.4634
  }],
  pos: {
    x: 469.99,
    y: -977.68,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Камера 1",
  fraction: 2,
  doors: [{
    hash: 2233064549,
    x: 473.623,
    y: -972.9127,
    z: 23.4634
  }],
  pos: {
    x: 473.12,
    y: -972.38,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Камера 2",
  fraction: 2,
  doors: [{
    hash: 2233064549,
    x: 473.6221,
    y: -966.6074,
    z: 23.4634
  }],
  pos: {
    x: 472.95,
    y: -966.00,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Камера 3",
  fraction: 2,
  doors: [{
    hash: 2233064549,
    x: 473.621,
    y: -960.3025,
    z: 23.4634
  }],
  pos: {
    x: 472.99,
    y: -959.90,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Камера 4",
  fraction: 2,
  doors: [{
    hash: 2233064549,
    x: 467.468,
    y: -959.3839,
    z: 23.4634
  }],
  pos: {
    x: 467.35,
    y: -959.97,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Камера 5",
  fraction: 2,
  doors: [{
    hash: 2233064549,
    x: 467.4684,
    y: -965.69,
    z: 23.4634
  }],
  pos: {
    x: 467.30,
    y: -966.31,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Камера 6",
  fraction: 2,
  doors: [{
    hash: 2233064549,
    x: 467.4698,
    y: -971.9943,
    z: 23.4634
  }],
  pos: {
    x: 467.37,
    y: -972.56,
    z: 23.31
  },
  defaultOpened: true
}, {
  text: "Лаборатория 1",
  fraction: 16,
  doors: [{
    hash: 1415151278,
    x: 298.2036,
    y: -592.9224,
    z: 43.40875
  }],
  pos: {
    x: 298.74,
    y: -593.34,
    z: 43.26
  },
  defaultOpened: true
}, {
  text: "Лаборатория 2",
  fraction: 16,
  doors: [{
    hash: 1415151278,
    x: 298.2036,
    y: -592.9224,
    z: 43.40875
  }],
  pos: {
    x: 305.23,
    y: -595.27,
    z: 43.26
  },
  defaultOpened: true
}, {
  text: "Лаборатория 3",
  fraction: 16,
  doors: [{
    hash: 1415151278,
    x: 304.5355,
    y: -595.2271,
    z: 43.40875
  }],
  pos: {
    x: 311.80,
    y: -597.61,
    z: 43.26
  },
  defaultOpened: true
}, {
  text: "Ресепшн",
  fraction: 16,
  doors: [{
    hash: 1415151278,
    x: 313.0905,
    y: -588.9059,
    z: 43.40875
  }, {
    hash: 1415151278,
    x: 313.9705,
    y: -586.4881,
    z: 43.40875
  }],
  pos: {
    x: 313.61,
    y: -587.66,
    z: 43.26
  },
  defaultOpened: true
}, {
  text: "Вход 8",
  fraction: 25,
  doors: [{
    hash: 3262795659,
    x: 1390.488,
    y: 1161.237,
    z: 114.4817
  }, {
    hash: 3262795659,
    x: 1390.488,
    y: 1163.438,
    z: 114.4817
  }],
  pos: {
    x: 1390.18,
    y: 1162.36,
    z: 114.33
  },
  defaultOpened: true
}, {
  text: "Подвал",
  fraction: 25,
  doors: [{
    hash: 736699661,
    x: 1407.688,
    y: 1128.333,
    z: 114.4977
  }],
  pos: {
    x: 1406.82,
    y: 1127.87,
    z: 114.33
  },
  defaultOpened: true
}, {
  text: "Проходная",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1691.49,
    y: 2577.84,
    z: 45.68
  }],
  pos: {
    x: 1691.49,
    y: 2577.84,
    z: 45.68
  },
  defaultOpened: false
}, {
  text: "Проходная Офис-1",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1688.72,
    y: 2571.60,
    z: 45.68
  }],
  pos: {
    x: 1689.24,
    y: 2571.32,
    z: 45.68
  },
  defaultOpened: false
}, {
  text: "Проходная Офис-2",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1693.94,
    y: 2571.60,
    z: 45.68
  }],
  pos: {
    x: 1693.49,
    y: 2571.36,
    z: 45.68
  },
  defaultOpened: false
}, {
  text: "Вход",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.523,
    y: 2467.454,
    z: 46.13116
  }],
  pos: {
    x: 1670.90,
    y: 2466.70,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 622",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.688,
    y: 2460.736,
    z: 46.12994
  }],
  pos: {
    x: 1671.05,
    y: 2459.56,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 620",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.69,
    y: 2455.92,
    z: 50.00
  }],
  pos: {
    x: 1671.18,
    y: 2455.69,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 621",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.693,
    y: 2457.011,
    z: 50.14636
  }],
  pos: {
    x: 1671.03,
    y: 2459.53,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 623",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.688,
    y: 2457.012,
    z: 46.12994
  }],
  pos: {
    x: 1671.00,
    y: 2455.85,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 619",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.693,
    y: 2453.287,
    z: 50.14636
  }],
  pos: {
    x: 1670.41,
    y: 2452.49,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 624",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.688,
    y: 2453.286,
    z: 46.12994
  }],
  pos: {
    x: 1671.03,
    y: 2452.10,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 618",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.693,
    y: 2449.561,
    z: 50.14636
  }],
  pos: {
    x: 1671.04,
    y: 2448.33,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 625",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.688,
    y: 2449.561,
    z: 46.12994
  }],
  pos: {
    x: 1671.02,
    y: 2448.39,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 617",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.693,
    y: 2445.841,
    z: 50.14636
  }],
  pos: {
    x: 1671.01,
    y: 2444.64,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 626",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.688,
    y: 2445.839,
    z: 46.12994
  }],
  pos: {
    x: 1670.99,
    y: 2444.73,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 616",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1675.566,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1674.42,
    y: 2441.24,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 627",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1675.565,
    y: 2440.925,
    z: 46.13091
  }],
  pos: {
    x: 1674.37,
    y: 2441.24,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 615",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1679.081,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1677.89,
    y: 2441.23,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 628",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1679.082,
    y: 2440.925,
    z: 46.13091
  }],
  pos: {
    x: 1677.95,
    y: 2441.24,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 614",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1682.625,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1681.53,
    y: 2441.27,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 629",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1682.62,
    y: 2440.925,
    z: 46.13091
  }],
  pos: {
    x: 1681.44,
    y: 2441.27,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 630",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1686.345,
    y: 2440.925,
    z: 46.13091
  }],
  pos: {
    x: 1685.18,
    y: 2441.26,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 613",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1686.345,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1685.17,
    y: 2441.25,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 612",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1690.071,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1688.87,
    y: 2441.28,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 631",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1690.071,
    y: 2440.924,
    z: 46.13091
  }],
  pos: {
    x: 1688.86,
    y: 2441.26,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 632",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1693.796,
    y: 2440.924,
    z: 46.13091
  }],
  pos: {
    x: 1692.70,
    y: 2441.24,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 611",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1693.796,
    y: 2440.925,
    z: 50.14619
  }],
  pos: {
    x: 1692.69,
    y: 2441.27,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 610",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1697.52,
    y: 2440.925,
    z: 50.14619
  }],
  pos: {
    x: 1696.42,
    y: 2441.25,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 633",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1697.52,
    y: 2440.925,
    z: 46.13091
  }],
  pos: {
    x: 1696.44,
    y: 2441.27,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 609",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1701.245,
    y: 2440.925,
    z: 50.14619
  }],
  pos: {
    x: 1700.11,
    y: 2441.23,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 634",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1701.245,
    y: 2440.925,
    z: 46.13091
  }],
  pos: {
    x: 1700.07,
    y: 2441.24,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 608",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1704.971,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1703.89,
    y: 2441.23,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 635",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1704.971,
    y: 2440.924,
    z: 46.13091
  }],
  pos: {
    x: 1703.77,
    y: 2441.28,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 607",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1708.694,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1707.58,
    y: 2441.23,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 636",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1708.694,
    y: 2440.924,
    z: 46.13091
  }],
  pos: {
    x: 1707.51,
    y: 2441.32,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 606",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1712.421,
    y: 2440.924,
    z: 50.14619
  }],
  pos: {
    x: 1711.26,
    y: 2441.24,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 637",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1712.421,
    y: 2440.924,
    z: 46.13091
  }],
  pos: {
    x: 1711.29,
    y: 2441.24,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 605",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.086,
    y: 2445.84,
    z: 50.14321
  }],
  pos: {
    x: 1714.75,
    y: 2444.74,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 638",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.086,
    y: 2445.84,
    z: 46.12989
  }],
  pos: {
    x: 1714.76,
    y: 2444.62,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 604",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.086,
    y: 2449.561,
    z: 50.14321
  }],
  pos: {
    x: 1714.77,
    y: 2448.39,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 639",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.087,
    y: 2449.561,
    z: 46.12989
  }],
  pos: {
    x: 1714.78,
    y: 2448.38,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 603",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.086,
    y: 2453.287,
    z: 50.14321
  }],
  pos: {
    x: 1714.78,
    y: 2452.08,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 640",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.087,
    y: 2453.287,
    z: 46.12989
  }],
  pos: {
    x: 1714.78,
    y: 2452.12,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 602",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.086,
    y: 2457.012,
    z: 50.14321
  }],
  pos: {
    x: 1714.75,
    y: 2455.87,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 641",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.087,
    y: 2457.012,
    z: 46.12989
  }],
  pos: {
    x: 1714.74,
    y: 2455.81,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Камера 601",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.086,
    y: 2460.737,
    z: 50.14321
  }],
  pos: {
    x: 1714.77,
    y: 2459.61,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Камера 642",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.087,
    y: 2460.735,
    z: 46.12989
  }],
  pos: {
    x: 1714.78,
    y: 2459.64,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Вход",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1715.256,
    y: 2466.154,
    z: 46.13197
  }],
  pos: {
    x: 1715.04,
    y: 2467.00,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Склад",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1670.906,
    y: 2481.484,
    z: 46.12421
  }],
  pos: {
    x: 1670.18,
    y: 2481.15,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Вход в блок 1",
  fraction: 7,
  doors: [{
    hash: 3256632098,
    x: 1703.325,
    y: 2475.592,
    z: 46.12902
  }],
  pos: {
    x: 1703.80,
    y: 2476.14,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Вход в блок 2",
  fraction: 7,
  doors: [{
    hash: 3256632098,
    x: 1681.741,
    y: 2476.279,
    z: 46.13059
  }],
  pos: {
    x: 1682.31,
    y: 2475.92,
    z: 45.95
  },
  defaultOpened: true
}, {
  text: "Кабинет 1",
  fraction: 7,
  doors: [{
    hash: 4165413875,
    x: 1707.291,
    y: 2474.066,
    z: 46.13017
  }],
  pos: {
    x: 1706.57,
    y: 2474.29,
    z: 45.98
  },
  defaultOpened: false
}, {
  text: "Наблюдательный пункт 1",
  fraction: 7,
  doors: [{
    hash: 4165413875,
    x: 1699.737,
    y: 2468.822,
    z: 46.1289
  }],
  pos: {
    x: 1698.75,
    y: 2469.00,
    z: 45.98
  },
  defaultOpened: false
}, {
  text: "Наблюдательный пункт 2",
  fraction: 7,
  doors: [{
    hash: 4165413875,
    x: 1687.397,
    y: 2468.821,
    z: 46.12875
  }],
  pos: {
    x: 1686.60,
    y: 2469.00,
    z: 45.98
  },
  defaultOpened: false
}, {
  text: "Наблюдательный пункт 3",
  fraction: 7,
  doors: [{
    hash: 4165413875,
    x: 1679.846,
    y: 2473.969,
    z: 46.131
  }],
  pos: {
    x: 1678.83,
    y: 2473.84,
    z: 45.98
  },
  defaultOpened: false
}, {
  text: "Коридор",
  fraction: 7,
  doors: [{
    hash: 4165413875,
    x: 1667.854,
    y: 2476.09,
    z: 46.12963
  }],
  pos: {
    x: 1667.06,
    y: 2475.86,
    z: 45.98
  },
  defaultOpened: true
}, {
  text: "Лестница 1",
  fraction: 7,
  doors: [{
    hash: 4165413875,
    x: 1691.794,
    y: 2457.103,
    z: 50.14656
  }],
  pos: {
    x: 1691.89,
    y: 2457.92,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Лестница 2",
  fraction: 7,
  doors: [{
    hash: 4165413875,
    x: 1693.499,
    y: 2457.103,
    z: 50.14393
  }],
  pos: {
    x: 1693.37,
    y: 2457.87,
    z: 50.00
  },
  defaultOpened: true
}, {
  text: "Коридор",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1775.296,
    y: 2510.252,
    z: 46.11236
  }],
  pos: {
    x: 1775.22,
    y: 2511.17,
    z: 45.96
  },
  defaultOpened: true
}, {
  text: "Коридор",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1735.905,
    y: 2489.012,
    z: 46.11648
  }],
  pos: {
    x: 1736.34,
    y: 2488.18,
    z: 45.96
  },
  defaultOpened: true
}, {
  text: "Вход в блок 3",
  fraction: 7,
  doors: [{
    hash: 3256632098,
    x: 1741.226,
    y: 2502.28,
    z: 46.11132
  }],
  pos: {
    x: 1742.06,
    y: 2502.32,
    z: 45.81
  },
  defaultOpened: true
}, {
  text: "Вход в блок 4",
  fraction: 7,
  doors: [{
    hash: 3256632098,
    x: 1760.222,
    y: 2512.462,
    z: 46.11219
  }],
  pos: {
    x: 1760.75,
    y: 2513.03,
    z: 45.961
  },
  defaultOpened: true
}, {
  text: "Больничка 1",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1652.437,
    y: 2482.25,
    z: 46.1146
  }],
  pos: {
    x: 1651.52,
    y: 2482.68,
    z: 45.97
  },
  defaultOpened: true
}, {
  text: "Больничка 2",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1649.779,
    y: 2484.48,
    z: 46.1146
  }],
  pos: {
    x: 1649.01,
    y: 2485.12,
    z: 45.97
  },
  defaultOpened: true
}, {
  text: "Вход в столовую 1",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1641.461,
    y: 2475.016,
    z: 46.12078
  }],
  pos: {
    x: 1640.75,
    y: 2474.66,
    z: 45.97
  },
  defaultOpened: true
}, {
  text: "Больничка 3",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1616.702,
    y: 2512.111,
    z: 46.12175
  }],
  pos: {
    x: 1616.17,
    y: 2512.72,
    z: 45.97
  },
  defaultOpened: true
}, {
  text: "Больничка 4",
  fraction: 7,
  doors: [{
    hash: 1716321923,
    x: 1614.043,
    y: 2514.342,
    z: 46.12175
  }],
  pos: {
    x: 1613.63,
    y: 2515.07,
    z: 45.97
  },
  defaultOpened: true
}];
},{}],"H2nx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDoorStatus = exports.getDoorStatus = exports.getDoorData = exports.doorEventHave = exports.doorEvent = void 0;
var _doors = require("../../shared/doors");
var _custom = require("./custom.event");
var _gui = require("./gui");
var _system = require("./system");
var _user = require("./user");
const player = mp.players.local;
let doorsStatus = new Map();
let drawText = [];
const doorsRechange = new Map();
setInterval(async () => {
  if (doorsStatus.size === 0) {
    return;
  }
  drawText = [];
  _doors.DOORS_LIST.map((item, id) => {
    const dist = _system.system.distanceToPos(mp.players.local.position, item.pos);
    if (dist > 30) return;
    const intId = mp.game.interior.getInteriorAtCoords(item.pos.x, item.pos.y, item.pos.z);
    if (intId && !mp.game.interior.isInteriorReady(intId)) return;
    if (dist < 4) {
      drawText.push({
        id,
        text: `${item.text}`,
        locked: getDoorStatus(id),
        x: item.pos.x,
        y: item.pos.y,
        z: item.pos.z
      });
    }
    item.doors.map(async (data, idx) => {
      const locked = getDoorStatus(id);
      mp.game.object.doorControl(data.hash, data.x, data.y, data.z, locked, 0.0, 0.0, 0.0);
    });
  });
}, 1000);
mp.events.add('render', () => {
  drawText.map(item => _gui.gui.drawText3D(`${item.text} (${item.locked ? '~r~Закрыто' : '~g~Открыто'})`, item.x, item.y, item.z, null, true));
});
const getDoorStatus = id => {
  return doorsStatus.get(id);
};
exports.getDoorStatus = getDoorStatus;
const setDoorStatus = (id, status, ignoreAccess = false) => {
  _custom.CustomEvent.triggerServer("door:status", id, status, ignoreAccess);
};
exports.setDoorStatus = setDoorStatus;
const getDoorData = id => {
  return _doors.DOORS_LIST[id];
};
exports.getDoorData = getDoorData;
_custom.CustomEvent.registerServer('doors:data', list => {
  list.map(q => {
    doorsStatus.set(q[0], q[1]);
  });
});
const doorEvent = () => {
  const door = drawText.find(q => _system.system.distanceToPos(player.position, q) < 2);
  if (!door) return false;
  clickDoor(door.id);
  return true;
};
exports.doorEvent = doorEvent;
const doorEventHave = () => {
  const door = drawText.find(q => _system.system.distanceToPos(player.position, q) < 2);
  if (!door) return null;
  return door.text;
};
exports.doorEventHave = doorEventHave;
const clickDoor = async id => {
  let data = getDoorData(id);
  if (!_user.user.isAdminNow() && _user.user.fraction != data.fraction) return _user.user.notify("У вас нет ключей", "error");
  if (!(await _custom.CustomEvent.callServer('fraction:haveDoorRights'))) return _user.user.notify("У вас нет доступа", "error");
  if (player.dimension) return _user.user.notify("Сейчас нельзя закрывать двери", "error");
  player.taskGoStraightToCoord(data.pos.x, data.pos.y, data.pos.z, 1.0, 10000, mp.game.gameplay.getHeadingFromVector2d(player.position.x - data.pos.x, player.position.y - data.pos.y) + 180, 0.6);
  let c = 0;
  while (c < 100 && _system.system.distanceToPos2D(player.position, data.pos) > 0.6) {
    await _system.system.sleep(10);
    c++;
  }
  if (_system.system.distanceToPos2D(player.position, data.pos) > 0.8) return;
  _user.user.playAnim([['mp_common', 'givetake2_a']], false, false).then(() => {
    setDoorStatus(id, !getDoorStatus(id));
  });
};
},{"../../shared/doors":"g7OS","./custom.event":"py8h","./gui":"bk91","./system":"pi2J","./user":"ggMw"}],"H3J5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invokeHook = invokeHook;
exports.registerHookHandler = registerHookHandler;
exports.unregisterHookHandler = unregisterHookHandler;
const registeredHooks = new Map();
function invokeHook(name, ...args) {
  const hookHandlers = registeredHooks.get(name);
  if (hookHandlers) {
    return hookHandlers.map(handler => handler(...args)).filter(result => !!result || typeof result === 'boolean');
  }
  return [];
}
function registerHookHandler(name, handler) {
  if (registeredHooks.has(name)) {
    registeredHooks.get(name).push(handler);
  } else {
    registeredHooks.set(name, [handler]);
  }
}
function unregisterHookHandler(name, handler) {
  if (registeredHooks.has(name)) {
    const handlers = registeredHooks.get(name);
    const idx = handlers.findIndex(_handler => _handler === handler);
    if (idx === -1) {
      return;
    }
    handlers.splice(idx, 1);
  }
}
},{}],"m19G":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inInteract = exports.gameObjectClick = exports.gInteractObject = exports.entitysData = exports.RAYCAST_DETECT_ENTITY_HOOK = exports.ENTITY_TYPES = void 0;
var _gui = require("./gui");
var _user = require("./user");
var _system = require("./system");
var _vendor = require("../../shared/vendor.mashines");
var _custom = require("./custom.event");
var _inventory = require("../../shared/inventory");
var _atm = require("../../shared/atm");
var _cash = require("../../shared/cash.machines");
var _doors = require("./doors");
var _hotkeys = require("../../shared/hotkeys");
var _checkpoints = require("./checkpoints");
var _anim = require("./anim");
var _dice = require("./casino/dice");
var _roulette = require("./casino/roulette");
var _slots = require("./casino/slots");
var _raycast = require("./raycast");
var _hooks = require("../../shared/hooks");
const RAYCAST_DETECT_ENTITY_HOOK = exports.RAYCAST_DETECT_ENTITY_HOOK = 'interact-detect-entity';
let inInteract = exports.inInteract = false;
let entitysData = exports.entitysData = [];
const player = mp.players.local;
_custom.CustomEvent.register('cuff', () => {
  const target = gInteractObject.get();
  if ((target === null || target === void 0 ? void 0 : target.type) != 'player') return;
  _custom.CustomEvent.triggerServer('cuffTarget', target.remoteId);
});
_custom.CustomEvent.register('uncuff', () => {
  const target = gInteractObject.get();
  if ((target === null || target === void 0 ? void 0 : target.type) != 'player') return;
  _custom.CustomEvent.triggerServer('uncuffTarget', target.remoteId);
});
_custom.CustomEvent.register('follow', () => {
  const target = gInteractObject.get();
  if ((target === null || target === void 0 ? void 0 : target.type) != 'player') return;
  _custom.CustomEvent.triggerServer('followTarget', target.remoteId);
});
const gameObjectClick = async handle => {
  if (!_user.user.free) return;
  const model = mp.game.invoke('0x9F47B058362C84B5', handle);
  if ([233175726, 1920863736].includes(model)) {
    if (player.isUsingScenario('PROP_HUMAN_MUSCLE_CHIN_UPS')) return _user.user.stopAnim();
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
    let posres = mp.game.object.getObjectOffsetFromCoords(pos.x, pos.y, pos.z, heading.x, model == 233175726 ? -1.5 : 0.0, -0.15, 0.98);
    _user.user.playScenario('PROP_HUMAN_MUSCLE_CHIN_UPS', posres.x, posres.y, posres.z, heading.x);
    return;
  }
  if (1005957871 === model) {
    if (player.isUsingScenario('PROP_HUMAN_SEAT_MUSCLE_BENCH_PRESS')) return _user.user.stopAnim();
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
    let posres = mp.game.object.getObjectOffsetFromCoords(pos.x, pos.y, pos.z, heading.x, 0.0, -0.15, -0.23);
    _user.user.playScenario('PROP_HUMAN_SEAT_MUSCLE_BENCH_PRESS', posres.x, posres.y, posres.z, heading.x + 180, true);
    return;
  }
  const cash = _cash.CASH_MACHINES_LIST.find(q => q === model);
  if (cash) {
    const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    player.taskGoStraightToCoord(pos.x, pos.y, pos.z, 1.0, 30000, _system.system.headingToCoord(player.position, pos), 1.0);
    let c = 0;
    while (_system.system.distanceToPos2D(player.position, pos) > 1.1 && c < 50) await _system.system.sleep(100), c++;
    if (_system.system.distanceToPos2D(player.position, pos) > 1.1) return _user.user.stopAnim();
    _custom.CustomEvent.callServer('cash:mashine:grab:status', Math.floor(pos.x), Math.floor(pos.y), Math.floor(pos.z)).then(status => {
      if (status && status.err) {
        _user.user.stopAnim();
        _user.user.notify(status.text, "error");
        return;
      }
      _user.user.notify("Начинаем вскрывать кассу", "success");
      (0, _anim.playAnimationWithResult)(['anim@heists@money_grab@duffel', 'loop'], _cash.CASH_MACHINE_GRAB_SECOND, 'Вскрытие кассового аппарата', _system.system.headingToCoord(player.position, pos) + 90).then(status => {
        if (status) _custom.CustomEvent.triggerServer('cash:mashine:grab:success', Math.floor(pos.x), Math.floor(pos.y), Math.floor(pos.z));
      });
    });
    return;
  }
  const vendor = _vendor.VENDOR_MACHINES.find(q => q.model === model);
  if (vendor) {
    const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    let posres = mp.game.object.getObjectOffsetFromCoords(pos.x, pos.y, pos.z, heading.x, vendor.offset.x, vendor.offset.y, vendor.offset.z);
    player.taskLookAt(handle, 2000, 2048, 2);
    player.setResetFlag(322, true);
    player.taskGoStraightToCoord(posres.x, posres.y, posres.z, 1.0, 20000, heading.x, 0.1);
    let c = 0;
    while (_system.system.distanceToPos2D(player.position, posres) > 0.1 && c < 50) await _system.system.sleep(100), c++;
    if (_system.system.distanceToPos2D(player.position, posres) > 0.1) return _user.user.stopAnim();
    if (!(await _custom.CustomEvent.callServer('vendor:buy', model))) return _user.user.stopAnim();
    player.setCoords(posres.x, posres.y, posres.z - 1, true, true, true, true);
    player.setHeading(heading.x);
    mp.game.audio.requestAmbientAudioBank('VENDING_MACHINE', false);
    _user.user.playAnim([["MINI@SPRUNK@FIRST_PERSON", "PLYR_BUY_DRINK_PT1"]], false, false);
    setTimeout(() => {
      _user.user.stopAnim();
    }, 4000);
    return;
  }
  const atm = _atm.ATM_PROPS.find(q => q.model === model);
  if (atm) {
    const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    let posres = mp.game.object.getObjectOffsetFromCoords(pos.x, pos.y, pos.z, heading.x, atm.offset.x, atm.offset.y, atm.offset.z);
    _user.user.playScenario("PROP_HUMAN_ATM", posres.x, posres.y, posres.z, heading.x, false);
    _custom.CustomEvent.triggerServer('atm:load');
    return;
  }
};
exports.gameObjectClick = gameObjectClick;
const pickAllObjects = () => {
  exports.entitysData = entitysData = [];
  if (!_user.user.login) return;
  const {
    x,
    y,
    z
  } = player.position;
  _cash.CASH_MACHINES_LIST.forEach(model => {
    const handle = mp.game.object.getClosestObjectOfType(x, y, z + 1, 3, model, true, true, true);
    if (handle) {
      const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
      const mz = Math.abs(pos.z - z);
      if (mz > 4) return;
      entitysData.push({
        text: "Ограбить",
        handle,
        x: pos.x,
        y: pos.y,
        z: pos.z
      });
    }
  });
  _vendor.VENDOR_MACHINES.forEach(vendor => {
    const handle = mp.game.object.getClosestObjectOfType(x, y, z + 1, 3, vendor.model, true, true, true);
    if (!handle) return;
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    const heading = mp.game.invokeVector3("0xE83D4F9BA2A38914", handle);
    let posres = mp.game.object.getObjectOffsetFromCoords(pos.x, pos.y, pos.z, heading.x, 0, 0, vendor.offset.z);
    entitysData.push({
      text: `${(0, _inventory.getBaseItemNameById)(vendor.item_id)} ($${_system.system.numberFormat(vendor.cost)})`,
      handle,
      x: posres.x,
      y: posres.y,
      z: posres.z
    });
  });
  _atm.ATM_PROPS.forEach(item => {
    const handle = mp.game.object.getClosestObjectOfType(x, y, z + 1, 3, item.model, true, true, true);
    if (!handle) return;
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
    const mz = Math.abs(pos.z - z);
    if (mz > 4) return;
    entitysData.push({
      text: `Банкомат`,
      handle,
      x: pos.x,
      y: pos.y,
      z: pos.z + 1
    });
  });
  let handleC = mp.game.object.getClosestObjectOfType(x, y, z, 3, 1005957871, true, true, true);
  if (handleC) {
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handleC, true);
    entitysData.push({
      text: `Поднимать штангу`,
      handle: handleC,
      x: pos.x,
      y: pos.y,
      z: pos.z + 1
    });
  }
  let handleP = mp.game.object.getClosestObjectOfType(x, y, z, 3, 1920863736, true, true, true);
  if (!handleP) handleP = mp.game.object.getClosestObjectOfType(x, y, z, 3, 233175726, true, true, true);
  if (handleP) {
    const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handleP, true);
    entitysData.push({
      text: `Подтягиватся`,
      handle: handleP,
      x: pos.x,
      y: pos.y,
      z: pos.z + 1
    });
  }
};
let split = false;
let interactCefString = "[]";
mp.events.add('render', () => {
  if (!_user.user.login) return;
  if (_gui.gui.currentGui) return;
  let items = [];
  entitysData.map(item => {
    const xy = mp.game.graphics.world3dToScreen2d(item.x, item.y, item.z);
    if (!xy) return;
    if (xy.x < 0) return;
    if (xy.y < 0) return;
    if (xy.x > 1) return;
    if (xy.y > 1) return;
    items.push({
      text: item.text,
      handle: item.handle,
      x: xy.x,
      y: xy.y
    });
  });
  items.map(item => {
    _gui.gui.drawText(item.text, item.x, item.y);
  });
});
const gInteractObject = exports.gInteractObject = {
  get: () => {
    return currentGInteractObject;
  }
};
let currentGInteractObject = null;
function updateRaycastInteractObject() {
  let entity = _raycast.Raycast.getEntityLookAt();
  if (typeof entity === 'number') {
    if (mp.players.atHandle(entity)) {
      entity = mp.players.atHandle(entity);
    } else if (mp.vehicles.atHandle(entity)) {
      entity = mp.vehicles.atHandle(entity);
    } else if (mp.objects.atHandle(entity)) {
      const mpEntity = mp.objects.atHandle(entity);
      if (mpEntity) {
        entity = mpEntity;
      } else {
        entity = mp.objects.newWeak(entity);
      }
    } else if (mp.peds.atHandle(entity)) {
      entity = mp.peds.atHandle(entity);
    } else {
      currentGInteractObject = null;
      return;
    }
  }
  currentGInteractObject = entity;
}
const ENTITY_TYPES = exports.ENTITY_TYPES = {
  PED: 'ped',
  VEHICLE: 'vehicle',
  OBJECT: 'object',
  PLAYER: 'player'
};
setInterval(() => {
  if (!_user.user.login) {
    return;
  }
  updateRaycastInteractObject();
  pickAllObjects();
  if (_checkpoints.currentColshape || player.vehicle) return _user.user.showHelp(null);
  const anyscenario = player.isUsingAnyScenario();
  if (player.isUsingAnyScenario()) return _user.user.showHelp(`Остановить анимацию [${(0, _hotkeys.getKeyName)(mp.storage.data.hotkeys.stopanim)}]`);
  const door = (0, _doors.doorEventHave)();
  if (door) return _user.user.showHelp(door);
  let closest = entitysData.filter(q => _system.system.distanceToPos(player.position, q) < 2);
  let raycastEntity = currentGInteractObject;
  if (raycastEntity) {
    const data = (0, _hooks.invokeHook)(RAYCAST_DETECT_ENTITY_HOOK, raycastEntity)[0];
    if (data) {
      return _user.user.showHelp(`${data.helpText} [${(0, _hotkeys.getKeyName)(mp.storage.data.hotkeys.gpress)}]`);
    }
    if (raycastEntity.type === ENTITY_TYPES.PLAYER) {
      if (raycastEntity.alpha === 0) return;
      const dating = _user.user.getDating(raycastEntity.getVariable('id'), raycastEntity);
      return _user.user.showHelp(`Взаимодействие с ${dating ? dating : 'Незнакомцем'} #${raycastEntity.getVariable('id')} [${(0, _hotkeys.getKeyName)(mp.storage.data.hotkeys.gpress)}]`);
    } else if (raycastEntity.type === ENTITY_TYPES.VEHICLE) {
      return _user.user.showHelp(`Взаимодействие с ${raycastEntity.getVariable('name') || raycastEntity.getVariable('modelname') || "ТС"} [${(0, _hotkeys.getKeyName)(mp.storage.data.hotkeys.gpress)}]`);
    }
  }
  if (closest.length > 0) {
    closest = closest.sort((a, b) => {
      const adist = _system.system.distanceToPos(player.position, a);
      const bdist = _system.system.distanceToPos(player.position, b);
      return adist - bdist;
    });
    const itm = closest[0];
    return _user.user.showHelp(`${itm.text} [${(0, _hotkeys.getKeyName)(mp.storage.data.hotkeys.gpress)}]`);
  }
  if (!anyscenario) {
    if (!(0, _dice.inDiceGame)() && (0, _dice.nearestDiceTable)() > -1) return _user.user.showHelp('Кости [E]');
    if (!(0, _roulette.inCasinoRoulette)() && (0, _roulette.getNearestRouletteTable)() > -1) return _user.user.showHelp('Рулетка [E]');
    if (!(0, _slots.inSlotGame)() && (0, _slots.getNearestSlotsMachine)()) return _user.user.showHelp('Игровой автомат [E]');
  }
  _user.user.showHelp(null);
}, 500);
},{"./gui":"bk91","./user":"ggMw","./system":"pi2J","../../shared/vendor.mashines":"x9dN","./custom.event":"py8h","../../shared/inventory":"vpPR","../../shared/atm":"fYDh","../../shared/cash.machines":"b3O8","./doors":"H2nx","../../shared/hotkeys":"DSux","./checkpoints":"XCJl","./anim":"stJJ","./casino/dice":"UScX","./casino/roulette":"YFCp","./casino/slots":"scHn","./raycast":"ghdA","../../shared/hooks":"H3J5"}],"Wwxz":[function(require,module,exports) {
"use strict";

var _user = require("./user");
mp.events.add('gps:set', (x, y, z, chatNotify, alert = true) => {
  _user.user.setWaypoint(x, y, z, alert, chatNotify);
});
},{"./user":"ggMw"}],"sBsW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TRY_RUN_ADD_TIME = exports.PRISON_DATA = exports.MAX_WANTED_LEVEL = exports.JAIL_PC_COORDS = exports.JAIL_MINUTES_PER_STAR = exports.JAIL_ADMIN_MAX_MIN = exports.CUFF_LEAVE_WARN_DAYS = exports.CUFF_LEAVE_JAIL_MINUTES = exports.ADV_MONEY_PERCENT_TO_USER = exports.ADV_JAIL_FREE_COST_MIN_MORE_TIME = exports.ADV_JAIL_FREE_COST_MIN_MORE = exports.ADV_JAIL_FREE_COST_MIN = exports.ADMIN_PRISON_RADIUS = exports.ADMIN_PRISON_COORD = void 0;
const CUFF_LEAVE_WARN_DAYS = exports.CUFF_LEAVE_WARN_DAYS = 10;
const CUFF_LEAVE_JAIL_MINUTES = exports.CUFF_LEAVE_JAIL_MINUTES = 180;
const JAIL_MINUTES_PER_STAR = exports.JAIL_MINUTES_PER_STAR = 5;
const MAX_WANTED_LEVEL = exports.MAX_WANTED_LEVEL = 5;
const ADMIN_PRISON_COORD = exports.ADMIN_PRISON_COORD = new mp.Vector3(1641.21, 2570.45, 45.56);
const ADMIN_PRISON_RADIUS = exports.ADMIN_PRISON_RADIUS = 30;
const PRISON_DATA = exports.PRISON_DATA = [new mp.Vector3(1686.48, 2515.00, 45.56), 310, new mp.Vector3(1849.25, 2585.41, 44.67)];
const JAIL_PC_COORDS = exports.JAIL_PC_COORDS = [new mp.Vector3(1690.71, 2593.26, 44.58), new mp.Vector3(472.11, -974.96, 22.31), new mp.Vector3(2510.00, -354.03, 104.69), new mp.Vector3(1857.34, 3685.44, 29.26), new mp.Vector3(-441.60, 6012.94, 26.99)];
const ADV_JAIL_FREE_COST_MIN = exports.ADV_JAIL_FREE_COST_MIN = 400;
const ADV_JAIL_FREE_COST_MIN_MORE = exports.ADV_JAIL_FREE_COST_MIN_MORE = 700;
const ADV_JAIL_FREE_COST_MIN_MORE_TIME = exports.ADV_JAIL_FREE_COST_MIN_MORE_TIME = 45;
const ADV_MONEY_PERCENT_TO_USER = exports.ADV_MONEY_PERCENT_TO_USER = 20;
const TRY_RUN_ADD_TIME = exports.TRY_RUN_ADD_TIME = 5;
const JAIL_ADMIN_MAX_MIN = exports.JAIL_ADMIN_MAX_MIN = 500;
},{}],"arTi":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _system = require("./system");
var _user = require("./user");
var _jail = require("../../shared/jail");
var _TextTimerBar = require("./bars/classes/TextTimerBar");
let blockText;
let currentJailTime = 0;
let currentJailReason = "";
let currentJailAdmin = false;
let currentJailHash;
let currentJailHashCode = _system.system.randomStr(10);
_custom.CustomEvent.registerServer('jail:sync', (time, reason, admin = false) => {
  currentJailTime = time;
  currentJailReason = reason;
  currentJailAdmin = admin;
  currentJailHash = _system.system.encryptCodes(currentJailTime.toString(), currentJailHashCode);
  block = true;
  setTimeout(() => {
    block = false;
  }, 3000);
});
_custom.CustomEvent.registerServer('jail:clear', () => {
  clearJailData();
});
const clearJailData = () => {
  currentJailTime = 0;
  currentJailReason = '';
  currentJailAdmin = false;
  currentJailHash = null;
  if (blockText && blockText.exists) blockText.destroy();
  blockText = null;
};
let block = false;
setInterval(() => {
  if (block) return;
  if (currentJailTime <= 0 && !currentJailHash) return;
  if (currentJailHash && currentJailHash !== _system.system.encryptCodes(currentJailTime.toString(), currentJailHashCode)) {
    currentJailTime += 1000;
    currentJailHash = _system.system.encryptCodes(currentJailTime.toString(), currentJailHashCode);
    _custom.CustomEvent.triggerServer('jail:sync', currentJailTime, currentJailAdmin);
    _user.user.cheatDetect('memory', `Перемотка времени в ${currentJailAdmin ? 'Админской' : "RP"} тюрьме`);
    return;
  }
  currentJailTime--;
  if (currentJailTime <= 0) {
    _custom.CustomEvent.triggerServer('jail:sync', 0, currentJailAdmin);
    clearJailData();
  } else {
    if (_system.system.distanceToPos(mp.players.local.position, currentJailAdmin ? _jail.ADMIN_PRISON_COORD : _jail.PRISON_DATA[0]) > (currentJailAdmin ? _jail.ADMIN_PRISON_RADIUS : _jail.PRISON_DATA[1])) {
      _custom.CustomEvent.triggerServer('jail:tryRun');
      _user.user.notify("Попытка побега из тюрьмы");
      return;
    }
    currentJailHash = _system.system.encryptCodes(currentJailTime.toString(), currentJailHashCode);
    if (blockText && blockText.exists) {
      blockText.title = `${currentJailAdmin ? 'Деморган' : 'Заключение в тюрьме'} ${currentJailReason ? `| ${currentJailReason}` : ''}`;
      blockText.text = _system.system.secondsToString(currentJailTime);
    } else {
      blockText = new _TextTimerBar.TextTimerBar(`${currentJailAdmin ? 'Деморган' : 'Заключение в тюрьме'} ${currentJailReason ? `| ${currentJailReason}` : ''}`, _system.system.secondsToString(currentJailTime));
    }
    if (currentJailTime % 60 === 0) _custom.CustomEvent.triggerServer('jail:sync', currentJailTime, currentJailAdmin);
  }
}, 1000);
},{"./custom.event":"py8h","./system":"pi2J","./user":"ggMw","../../shared/jail":"sBsW","./bars/classes/TextTimerBar":"CjKg"}],"bi8R":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interractionMenuBasic = exports.InteractionItem = void 0;
let ids = 0;
class interractionMenuBasic {
  constructor(name) {
    this.autoClose = true;
    this.items = [];
    ids++;
    this.name = name;
    this.id = parseInt(`${ids}`);
    interractionMenuBasic.list.set(this.id, this);
  }
  static get(id) {
    return this.list.get(id);
  }
  add(name, category, icon, handle) {
    this.items.push({
      name,
      handle,
      icon,
      category
    });
  }
  handle(id) {
    const item = this.items[id];
    if (!item) return;
    item.handle();
  }
}
exports.interractionMenuBasic = interractionMenuBasic;
interractionMenuBasic.list = new Map();
class InteractionItem {
  constructor(name, icon, category, handle) {
    this.name = name;
    this.icon = icon;
    this.category = category;
    this.handle = handle;
  }
}
exports.InteractionItem = InteractionItem;
},{}],"i0E8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interractionMenu = void 0;
var _interactions = require("../../shared/interactions");
var _custom = require("./custom.event");
var _gui = require("./gui");
class interractionMenu extends _interactions.interractionMenuBasic {
  constructor(forVehicle) {
    super('');
    this._forVehicle = forVehicle;
  }
  open() {
    this.name = this.name.replace(/\n/g, '|');
    _gui.gui.setGui('interact');
    _custom.CustomEvent.triggerCef('intMenu:open', this.id, this._forVehicle, this.items);
  }
  close() {
    if (_gui.gui.currentGui === "interact") _gui.gui.setGui(null);
  }
}
exports.interractionMenu = interractionMenu;
_custom.CustomEvent.registerServer('intMenu:open', (id, forVehicle, items) => {
  const m = new interractionMenu(forVehicle);
  m.autoClose = true;
  items.map((item, index) => {
    m.add(item.name, item.category, item.icon, () => {
      _custom.CustomEvent.triggerServer('interractionMenu:select', id, index);
    });
  });
  m.open();
});
mp.events.add('interractionMenu:select', (id, index) => {
  const m = interractionMenu.get(id);
  if (!m) return;
  _gui.gui.setGui(null);
  m.handle(index);
});
},{"../../shared/interactions":"bi8R","./custom.event":"py8h","./gui":"bk91"}],"eVha":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _gui = require("./gui");
_custom.CustomEvent.registerServer('chest:open', (id, name, items) => {
  _gui.gui.setGui("chest");
  _custom.CustomEvent.triggerCef('chest:open', id, name, items);
});
},{"./custom.event":"py8h","./gui":"bk91"}],"Ri0V":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interriors = exports.getInteriorsHouse = exports.getInteriorsGarage = exports.getInteriorHouseById = exports.getInteriorGarageById = exports.MAX_RESIDENTS = exports.HOUSE_STOCK_POS = exports.HOUSE_STOCK_ENTER_POS = exports.HOUSE_MONEY_POS = exports.DEFAULT_FAMILY_HOUSE_GARAGE = void 0;
const HOUSE_STOCK_POS = exports.HOUSE_STOCK_POS = new mp.Vector3(1097.03, -3099.10, -40.00);
const HOUSE_MONEY_POS = exports.HOUSE_MONEY_POS = new mp.Vector3(1088.42, -3101.39, -40.00);
const HOUSE_STOCK_ENTER_POS = exports.HOUSE_STOCK_ENTER_POS = {
  x: 1087.67,
  y: -3099.31,
  z: -40.00,
  h: 263
};
const MAX_RESIDENTS = exports.MAX_RESIDENTS = [{
  price: 10000,
  count: 10
}, {
  price: 1000,
  count: 5
}, {
  price: 100,
  count: 1
}];
const interriors = exports.interriors = [{
  id: 1,
  name: "Классический дом с зеленым интерьером",
  enter: {
    x: 346.75,
    y: -1012.27,
    z: -100.20,
    h: 353
  },
  type: "house",
  stock: {
    x: 350.79,
    y: -993.68,
    z: -100.20
  },
  mining: {
    x: 344.76,
    y: -993.93,
    z: -100.20,
    h: 171 + 90
  },
  craftpos: [{
    x: 352.38,
    y: -995.36,
    z: -100.20
  }, {
    x: 352.40,
    y: -996.20,
    z: -100.20
  }, {
    x: 352.36,
    y: -997.22,
    z: -100.20
  }, {
    x: 352.51,
    y: -994.01,
    z: -100.20
  }],
  robberyPoints: [{
    x: 351.48,
    y: -998.79,
    z: -100.20
  }, {
    x: 350.69,
    y: -993.73,
    z: -100.20
  }, {
    x: 349.18,
    y: -994.86,
    z: -100.20
  }, {
    x: 345.04,
    y: -996.75,
    z: -100.20
  }]
}, {
  id: 3,
  name: "Интерьер аппартаментов №1",
  enter: {
    x: -786.49,
    y: 315.86,
    z: 216.64,
    h: 264.76
  },
  type: "house",
  stock: {
    x: -796.06,
    y: 327.93,
    z: 216.04
  },
  mining: {
    x: -799.577,
    y: 325.8,
    z: 216.8356,
    h: 268 + 90
  },
  craftpos: [{
    x: -795.57,
    y: 326.15,
    z: 216.04
  }, {
    x: -795.22,
    y: 322.44,
    z: 216.04
  }, {
    x: -796.35,
    y: 322.36,
    z: 216.04
  }, {
    x: -798.32,
    y: 322.05,
    z: 216.04
  }],
  robberyPoints: [{
    x: -788.64,
    y: 320.84,
    z: 216.04
  }, {
    x: -798.34,
    y: 322.47,
    z: 216.04
  }, {
    x: -798.74,
    y: 327.46,
    z: 216.04
  }, {
    x: -792.09,
    y: 328.56,
    z: 216.04
  }, {
    x: 792.43,
    y: 331.87,
    z: 216.04
  }, {
    x: -799.88,
    y: 338.29,
    z: 219.44
  }]
}, {
  id: 4,
  name: "Интерьер аппартаментов №2",
  enter: {
    x: -786.42,
    y: 315.73,
    z: 186.91,
    h: 265
  },
  type: "house",
  stock: {
    x: -795.97,
    y: 328.12,
    z: 186.31
  },
  mining: {
    x: -799.5821,
    y: 325.88,
    z: 187.1087,
    h: 270 + 90
  },
  craftpos: [{
    x: -799.21,
    y: 323.73,
    z: 186.31
  }, {
    x: -798.61,
    y: 322.46,
    z: 186.31
  }, {
    x: -796.46,
    y: 322.24,
    z: 186.31
  }, {
    x: -795.24,
    y: 322.27,
    z: 186.31
  }],
  robberyPoints: [{
    x: -788.69,
    y: 320.91,
    z: 186.31
  }, {
    x: -792.10,
    y: 330.26,
    z: 186.31
  }, {
    x: -781.66,
    y: 340.66,
    z: 186.11
  }, {
    x: -792.68,
    y: 341.79,
    z: 186.11
  }, {
    x: -796.59,
    y: 328.22,
    z: 189.71
  }, {
    x: -799.88,
    y: 338.63,
    z: 189.71
  }]
}, {
  id: 5,
  name: "Интерьер аппартаментов №3",
  enter: {
    x: -774.09,
    y: 341.98,
    z: 195.69,
    h: 91.13
  },
  type: "house",
  stock: {
    x: -765.30,
    y: 329.66,
    z: 195.09
  },
  mining: {
    x: -761.4208,
    y: 331.99,
    z: 195.8836,
    h: 88 + 90
  },
  craftpos: [{
    x: -761.30,
    y: 334.04,
    z: 195.09
  }, {
    x: -762.28,
    y: 335.63,
    z: 195.09
  }, {
    x: -764.63,
    y: 335.44,
    z: 195.09
  }, {
    x: -766.02,
    y: 335.62,
    z: 195.09
  }],
  robberyPoints: [{
    x: -772.60,
    y: 336.71,
    z: 195.09
  }, {
    x: -771.48,
    y: 322.14,
    z: 194.89
  }, {
    x: -764.48,
    y: 329.23,
    z: 198.49
  }, {
    x: -760.90,
    y: 320.05,
    z: 198.49
  }, {
    x: -762.28,
    y: 327.90,
    z: 198.49
  }, {
    x: -778.53,
    y: 324.13,
    z: 195.09
  }]
}, {
  id: 6,
  name: "Интерьер аппартаментов №4",
  enter: {
    x: -31.19,
    y: -595.08,
    z: 79.03,
    h: 243.02
  },
  type: "house",
  stock: {
    x: -12.49,
    y: -598.71,
    z: 78.43
  },
  mining: {
    x: -7.982438,
    y: -597.7199,
    z: 79.22951,
    h: 70 + 90
  },
  craftpos: [{
    x: -7.40,
    y: -595.86,
    z: 78.43
  }, {
    x: -8.00,
    y: -594.17,
    z: 78.43
  }, {
    x: -9.86,
    y: -593.42,
    z: 78.43
  }, {
    x: -10.91,
    y: -593.07,
    z: 78.43
  }],
  robberyPoints: [{
    x: -22.85,
    y: -589.46,
    z: 78.43
  }, {
    x: -36.98,
    y: -583.95,
    z: 77.83
  }, {
    x: -32.66,
    y: -583.62,
    z: 77.87
  }, {
    x: -35.65,
    y: -580.60,
    z: 77.83
  }, {
    x: -37.51,
    y: -590.02,
    z: 77.83
  }, {
    x: -38.69,
    y: -588.18,
    z: 77.83
  }]
}, {
  id: 7,
  name: "Интерьер аппартаментов №5",
  enter: {
    x: -18.47,
    y: -591.79,
    z: 89.11,
    h: 336.67
  },
  type: "house",
  stock: {
    x: -27.08,
    y: -588.49,
    z: 89.12
  },
  mining: {
    x: -26.99229,
    y: -592.1089,
    z: 89.91925,
    h: 332 + 90
  },
  craftpos: [{
    x: -24.91,
    y: -593.02,
    z: 89.12
  }, {
    x: -22.92,
    y: -591.41,
    z: 89.11
  }, {
    x: -22.58,
    y: -590.35,
    z: 89.11
  }, {
    x: -22.02,
    y: -589.07,
    z: 89.11
  }],
  robberyPoints: [{
    x: -39.38,
    y: -572.66,
    z: 87.71
  }, {
    x: -45.84,
    y: -586.60,
    z: 87.71
  }, {
    x: -35.89,
    y: -586.29,
    z: 87.71
  }, {
    x: -30.20,
    y: -576.87,
    z: 87.71
  }, {
    x: -34.66,
    y: -580.35,
    z: 82.91
  }, {
    x: -37.97,
    y: -584.59,
    z: 82.92
  }]
}, {
  id: 8,
  name: "Интерьер классический",
  enter: {
    x: -1908.79,
    y: -572.79,
    z: 18.11,
    h: 237.01
  },
  type: "house",
  stock: {
    x: -1903.22,
    y: -573.43,
    z: 18.10
  },
  mining: {
    x: -1905.52,
    y: -570.93,
    z: 18.10,
    h: 136 + 90
  },
  robberyPoints: [{
    x: -1904.44,
    y: -574.74,
    z: 18.10
  }, {
    x: -1906.42,
    y: -577.36,
    z: 18.08
  }, {
    x: -1911.45,
    y: -569.83,
    z: 18.10
  }, {
    x: -1910.10,
    y: -570.98,
    z: 18.10
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 10,
  name: "Интерьер дешевой квартиры",
  enter: {
    x: 151.44,
    y: -1007.05,
    z: -100.00,
    h: 339
  },
  type: "house",
  stock: {
    x: 151.54,
    y: -1003.30,
    z: -100.00
  },
  mining: {
    x: 152.41,
    y: -1000.61,
    z: -99.00,
    h: 176 + 90
  },
  robberyPoints: [{
    x: 154.66,
    y: -1005.98,
    z: -100.00
  }, {
    x: 154.34,
    y: -1003.28,
    z: -100.00
  }, {
    x: 151.68,
    y: -1004.91,
    z: -100.00
  }, {
    x: 151.72,
    y: -1003.21,
    z: -100.00
  }]
}, {
  id: 11,
  name: "Элитный 3х этажный интерьер",
  enter: {
    x: -174.18,
    y: 497.72,
    z: 136.67,
    h: 197.71
  },
  type: "house",
  stock: {
    x: -175.59,
    y: 492.74,
    z: 129.04
  },
  mining: {
    x: -172.9775,
    y: 489.5455,
    z: 129.831,
    h: 9 + 90
  },
  craftpos: [{
    x: -171.00,
    y: 490.11,
    z: 129.04
  }, {
    x: -169.75,
    y: 491.40,
    z: 129.04
  }, {
    x: -170.27,
    y: 493.41,
    z: 129.04
  }, {
    x: -170.46,
    y: 494.60,
    z: 129.04
  }],
  robberyPoints: [{
    x: -171.08,
    y: 486.86,
    z: 136.44
  }, {
    x: -170.44,
    y: 482.72,
    z: 136.24
  }, {
    x: -164.62,
    y: 485.46,
    z: 136.24
  }, {
    x: -173.21,
    y: 500.26,
    z: 129.04
  }, {
    x: -174.65,
    y: 496.12,
    z: 129.04
  }, {
    x: -170.23,
    y: 482.23,
    z: 132.88
  }]
}, {
  id: 12,
  name: "Бюджетный интерьер",
  enter: {
    x: 266.09,
    y: -1007.37,
    z: -102.01,
    h: 6
  },
  type: "house",
  stock: {
    x: 259.94,
    y: -1003.80,
    z: -100.01
  },
  mining: {
    x: 256.87,
    y: -997.40,
    z: -100.01,
    h: 267 + 90
  },
  robberyPoints: [{
    x: 265.54,
    y: -998.95,
    z: -100.01
  }, {
    x: 262.20,
    y: -996.28,
    z: -100.01
  }, {
    x: 257.13,
    y: -995.75,
    z: -100.01
  }, {
    x: 256.95,
    y: -997.72,
    z: -100.01
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 13,
  name: "Бюджетный интерьер №2",
  enter: {
    x: -1150.55,
    y: -1520.95,
    z: 9.63,
    h: 32.35
  },
  type: "house",
  stock: {
    x: -1152.98,
    y: -1516.87,
    z: 9.63
  },
  mining: {
    x: -1158.92,
    y: -1518.15,
    z: 9.63,
    h: 218 + 90
  },
  robberyPoints: [{
    x: -1151.50,
    y: -1518.55,
    z: 9.63
  }, {
    x: -1145.54,
    y: -1514.62,
    z: 9.63
  }, {
    x: -1144.41,
    y: -1515.17,
    z: 9.63
  }, {
    x: -1152.25,
    y: -1516.88,
    z: 9.63
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 14,
  name: "Бюджетный интерьер №3",
  enter: {
    x: -1150.55,
    y: -1520.95,
    z: 9.63,
    h: 32.35
  },
  type: "house",
  stock: {
    x: -1152.98,
    y: -1516.87,
    z: 9.63
  },
  mining: {
    x: -1158.92,
    y: -1518.15,
    z: 9.63,
    h: 218 + 90
  },
  robberyPoints: [{
    x: -1151.50,
    y: -1518.55,
    z: 9.63
  }, {
    x: -1145.54,
    y: -1514.62,
    z: 9.63
  }, {
    x: -1144.41,
    y: -1515.17,
    z: 9.63
  }, {
    x: -1152.25,
    y: -1516.88,
    z: 9.63
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 2,
  name: "Гараж на 2 машины",
  enter: {
    x: 179.11,
    y: -1001.16,
    z: -100.00,
    h: 174.02
  },
  type: "garage",
  cars: [{
    x: 171.45,
    y: -1003.70,
    z: -99.90,
    h: 180
  }, {
    x: 175.45,
    y: -1003.70,
    z: -99.90,
    h: 180
  }]
}, {
  id: 15,
  name: "Гараж на 4 машины",
  enter: {
    x: 206.89,
    y: -999.10,
    z: -99.90,
    h: 147
  },
  type: "garage",
  cars: [{
    x: 202.75,
    y: -1004.67,
    z: -99.90,
    h: 90
  }, {
    x: 197.76,
    y: -997.00,
    z: -99.90,
    h: 180
  }, {
    x: 192.76,
    y: -997.00,
    z: -99.90,
    h: 180
  }, {
    x: 202.75,
    y: -998.94,
    z: -99.90,
    h: 135
  }]
}, {
  id: 16,
  name: "Гараж на 8 машин",
  enter: {
    x: 240.54,
    y: -1004.87,
    z: -100.00,
    h: 91
  },
  type: "garage",
  cars: [{
    x: 223.60,
    y: -980.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -985.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -990.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -995.75,
    z: -99.90,
    h: 240
  }, {
    x: 233.40,
    y: -985.75,
    z: -99.90,
    h: 120
  }, {
    x: 233.40,
    y: -990.75,
    z: -99.90,
    h: 120
  }, {
    x: 233.40,
    y: -995.75,
    z: -99.90,
    h: 120
  }, {
    x: 233.40,
    y: -1000.75,
    z: -99.90,
    h: 120
  }]
}, {
  id: 17,
  name: "Гараж на 120 машин (для семей)",
  enter: {
    x: 833.01,
    y: -1308.94,
    z: -84.81,
    h: 270
  },
  type: "garage",
  cars: [{
    x: 859.57,
    y: -1264.53,
    z: -84.71,
    h: 92
  }, {
    x: 859.70,
    y: -1271.33,
    z: -84.71,
    h: 92
  }, {
    x: 859.80,
    y: -1277.74,
    z: -84.71,
    h: 92
  }, {
    x: 859.95,
    y: -1283.89,
    z: -84.71,
    h: 92
  }, {
    x: 860.05,
    y: -1289.91,
    z: -84.71,
    h: 93
  }, {
    x: 860.17,
    y: -1295.52,
    z: -84.71,
    h: 92
  }, {
    x: 860.29,
    y: -1302.18,
    z: -84.71,
    h: 94
  }, {
    x: 860.41,
    y: -1308.95,
    z: -84.71,
    h: 94
  }, {
    x: 852.48,
    y: -1309.00,
    z: -84.71,
    h: 92
  }, {
    x: 852.35,
    y: -1302.66,
    z: -84.71,
    h: 94
  }, {
    x: 852.24,
    y: -1295.73,
    z: -84.71,
    h: 92
  }, {
    x: 852.10,
    y: -1290.30,
    z: -84.71,
    h: 94
  }, {
    x: 852.00,
    y: -1284.07,
    z: -84.71,
    h: 92
  }, {
    x: 851.85,
    y: -1278.08,
    z: -84.71,
    h: 93
  }, {
    x: 851.75,
    y: -1271.51,
    z: -84.71,
    h: 91
  }, {
    x: 851.62,
    y: -1264.81,
    z: -84.71,
    h: 92
  }, {
    x: 843.67,
    y: -1265.10,
    z: -84.71,
    h: 91
  }, {
    x: 843.80,
    y: -1271.69,
    z: -84.71,
    h: 92
  }, {
    x: 843.90,
    y: -1278.31,
    z: -84.71,
    h: 92
  }, {
    x: 844.05,
    y: -1284.28,
    z: -84.71,
    h: 92
  }, {
    x: 844.16,
    y: -1290.68,
    z: -84.71,
    h: 92
  }, {
    x: 844.28,
    y: -1296.01,
    z: -84.71,
    h: 92
  }, {
    x: 844.42,
    y: -1303.08,
    z: -84.71,
    h: 93
  }, {
    x: 844.53,
    y: -1309.27,
    z: -84.71,
    h: 92
  }, {
    x: 834.80,
    y: -1302.90,
    z: -84.71,
    h: 273
  }, {
    x: 834.67,
    y: -1296.10,
    z: -84.71,
    h: 273
  }, {
    x: 834.58,
    y: -1291.09,
    z: -84.71,
    h: 273
  }, {
    x: 834.44,
    y: -1284.50,
    z: -84.71,
    h: 272
  }, {
    x: 834.32,
    y: -1278.44,
    z: -84.71,
    h: 272
  }, {
    x: 834.18,
    y: -1271.80,
    z: -84.71,
    h: 271
  }, {
    x: 834.07,
    y: -1265.13,
    z: -84.71,
    h: 271
  }, {
    x: 864.18,
    y: -2002.93,
    z: -84.71,
    h: 93
  }, {
    x: 864.32,
    y: -2008.85,
    z: -84.71,
    h: 91
  }, {
    x: 864.44,
    y: -2015.31,
    z: -84.71,
    h: 92
  }, {
    x: 864.55,
    y: -2021.33,
    z: -84.71,
    h: 90
  }, {
    x: 864.66,
    y: -2027.34,
    z: -84.71,
    h: 93
  }, {
    x: 864.78,
    y: -2033.52,
    z: -84.71,
    h: 93
  }, {
    x: 864.91,
    y: -2039.82,
    z: -84.71,
    h: 90
  }, {
    x: 865.04,
    y: -2046.78,
    z: -84.71,
    h: 91
  }, {
    x: 857.09,
    y: -2046.87,
    z: -84.71,
    h: 91
  }, {
    x: 856.97,
    y: -2040.06,
    z: -84.71,
    h: 93
  }, {
    x: 856.83,
    y: -2033.87,
    z: -84.71,
    h: 92
  }, {
    x: 856.72,
    y: -2027.50,
    z: -84.71,
    h: 91
  }, {
    x: 856.62,
    y: -2021.26,
    z: -84.71,
    h: 92
  }, {
    x: 856.51,
    y: -2015.69,
    z: -84.71,
    h: 92
  }, {
    x: 856.37,
    y: -2009.04,
    z: -84.71,
    h: 92
  }, {
    x: 856.24,
    y: -2003.24,
    z: -84.71,
    h: 93
  }, {
    x: 848.29,
    y: -2003.49,
    z: -84.71,
    h: 92
  }, {
    x: 848.42,
    y: -2009.19,
    z: -84.71,
    h: 91
  }, {
    x: 848.57,
    y: -2016.00,
    z: -84.71,
    h: 93
  }, {
    x: 848.68,
    y: -2021.46,
    z: -84.71,
    h: 93
  }, {
    x: 848.77,
    y: -2027.60,
    z: -84.71,
    h: 92
  }, {
    x: 848.88,
    y: -2034.21,
    z: -84.71,
    h: 93
  }, {
    x: 849.02,
    y: -2040.45,
    z: -84.71,
    h: 93
  }, {
    x: 849.14,
    y: -2046.99,
    z: -84.71,
    h: 92
  }, {
    x: 838.71,
    y: -2003.74,
    z: -84.71,
    h: 271
  }, {
    x: 838.87,
    y: -2009.39,
    z: -84.71,
    h: 273
  }, {
    x: 838.95,
    y: -2016.16,
    z: -84.71,
    h: 273
  }, {
    x: 839.06,
    y: -2022.03,
    z: -84.71,
    h: 273
  }, {
    x: 839.18,
    y: -2027.93,
    z: -84.71,
    h: 272
  }, {
    x: 839.31,
    y: -2034.44,
    z: -84.71,
    h: 272
  }, {
    x: 1670.14,
    y: -1258.39,
    z: -84.71,
    h: 91
  }, {
    x: 1670.27,
    y: -1264.97,
    z: -84.71,
    h: 92
  }, {
    x: 1670.38,
    y: -1271.17,
    z: -84.71,
    h: 92
  }, {
    x: 1670.52,
    y: -1277.77,
    z: -84.71,
    h: 93
  }, {
    x: 1670.64,
    y: -1284.02,
    z: -84.71,
    h: 94
  }, {
    x: 1670.33,
    y: -1290.17,
    z: -84.71,
    h: 92
  }, {
    x: 1670.88,
    y: -1296.40,
    z: -84.71,
    h: 92
  }, {
    x: 1671.02,
    y: -1303.01,
    z: -84.71,
    h: 91
  }, {
    x: 1663.06,
    y: -1303.05,
    z: -84.71,
    h: 90
  }, {
    x: 1662.95,
    y: -1296.50,
    z: -84.71,
    h: 91
  }, {
    x: 1662.39,
    y: -1290.46,
    z: -84.71,
    h: 92
  }, {
    x: 1662.71,
    y: -1284.34,
    z: -84.71,
    h: 94
  }, {
    x: 1662.59,
    y: -1278.01,
    z: -84.71,
    h: 91
  }, {
    x: 1662.43,
    y: -1271.47,
    z: -84.71,
    h: 92
  }, {
    x: 1661.70,
    y: -1265.29,
    z: -84.71,
    h: 93
  }, {
    x: 1662.20,
    y: -1258.54,
    z: -84.71,
    h: 92
  }, {
    x: 1654.26,
    y: -1258.78,
    z: -84.71,
    h: 93
  }, {
    x: 1653.76,
    y: -1265.49,
    z: -84.71,
    h: 92
  }, {
    x: 1654.48,
    y: -1271.68,
    z: -84.71,
    h: 92
  }, {
    x: 1654.63,
    y: -1278.25,
    z: -84.71,
    h: 92
  }, {
    x: 1654.76,
    y: -1284.67,
    z: -84.71,
    h: 92
  }, {
    x: 1654.44,
    y: -1290.59,
    z: -84.71,
    h: 92
  }, {
    x: 1654.99,
    y: -1296.61,
    z: -84.71,
    h: 91
  }, {
    x: 1655.11,
    y: -1303.12,
    z: -84.71,
    h: 93
  }, {
    x: 1644.66,
    y: -1259.11,
    z: -84.71,
    h: 272
  }, {
    x: 1644.79,
    y: -1265.74,
    z: -84.71,
    h: 270
  }, {
    x: 1644.90,
    y: -1271.88,
    z: -84.71,
    h: 272
  }, {
    x: 1645.04,
    y: -1278.64,
    z: -84.71,
    h: 272
  }, {
    x: 1645.16,
    y: -1284.83,
    z: -84.71,
    h: 271
  }, {
    x: 1645.30,
    y: -1290.78,
    z: -84.71,
    h: 272
  }, {
    x: -173.15,
    y: -1275.13,
    z: -84.71,
    h: 92
  }, {
    x: -173.03,
    y: -1281.31,
    z: -84.71,
    h: 93
  }, {
    x: -172.91,
    y: -1287.51,
    z: -84.71,
    h: 93
  }, {
    x: -172.98,
    y: -1293.70,
    z: -84.71,
    h: 92
  }, {
    x: -172.77,
    y: -1299.77,
    z: -84.71,
    h: 93
  }, {
    x: -172.54,
    y: -1306.09,
    z: -84.71,
    h: 93
  }, {
    x: -172.43,
    y: -1312.19,
    z: -84.71,
    h: 92
  }, {
    x: -172.28,
    y: -1319.02,
    z: -84.71,
    h: 92
  }, {
    x: -180.22,
    y: -1319.06,
    z: -84.71,
    h: 92
  }, {
    x: -180.37,
    y: -1312.33,
    z: -84.71,
    h: 91
  }, {
    x: -180.46,
    y: -1306.54,
    z: -84.71,
    h: 93
  }, {
    x: -180.71,
    y: -1300.11,
    z: -84.71,
    h: 93
  }, {
    x: -180.92,
    y: -1294.16,
    z: -84.71,
    h: 95
  }, {
    x: -180.85,
    y: -1287.74,
    z: -84.71,
    h: 91
  }, {
    x: -180.96,
    y: -1281.64,
    z: -84.71,
    h: 93
  }, {
    x: -181.09,
    y: -1275.29,
    z: -84.71,
    h: 92
  }, {
    x: -189.03,
    y: -1275.57,
    z: -84.71,
    h: 91
  }, {
    x: -188.91,
    y: -1281.90,
    z: -84.71,
    h: 92
  }, {
    x: -188.80,
    y: -1287.91,
    z: -84.71,
    h: 92
  }, {
    x: -188.86,
    y: -1294.63,
    z: -84.71,
    h: 93
  }, {
    x: -188.65,
    y: -1300.46,
    z: -84.71,
    h: 93
  }, {
    x: -188.40,
    y: -1306.66,
    z: -84.71,
    h: 92
  }, {
    x: -188.33,
    y: -1312.38,
    z: -84.71,
    h: 90
  }, {
    x: -188.17,
    y: -1319.07,
    z: -84.71,
    h: 91
  }, {
    x: -198.51,
    y: -1275.73,
    z: -84.71,
    h: 273
  }, {
    x: -198.53,
    y: -1282.36,
    z: -84.71,
    h: 274
  }, {
    x: -198.39,
    y: -1288.32,
    z: -84.71,
    h: 272
  }, {
    x: -198.28,
    y: -1294.84,
    z: -84.71,
    h: 273
  }, {
    x: -198.17,
    y: -1300.99,
    z: -84.71,
    h: 273
  }, {
    x: -198.03,
    y: -1306.99,
    z: -84.71,
    h: 271
  }]
}, {
  id: 18,
  name: "Интерьер казино",
  enter: {
    x: 969.65,
    y: 63.11,
    z: 111.56,
    h: 240
  },
  type: "house",
  stock: {
    x: 976.94,
    y: 78.67,
    z: 115.16
  },
  robberyPoints: [{
    x: 977.71,
    y: 69.28,
    z: 115.16
  }, {
    x: 970.81,
    y: 74.85,
    z: 115.16
  }, {
    x: 973.20,
    y: 76.30,
    z: 115.18
  }, {
    x: 974.63,
    y: 65.76,
    z: 115.16
  }, {
    x: 961.27,
    y: 33.73,
    z: 115.18
  }, {
    x: 961.54,
    y: 25.69,
    z: 115.16
  }]
}, {
  id: 19,
  name: "Гараж на 1 машину",
  enter: {
    x: 179.11,
    y: -1001.16,
    z: -100.00,
    h: 174.02
  },
  type: "garage",
  cars: [{
    x: 173.25,
    y: -1003.66,
    z: -99.90,
    h: 182
  }]
}, {
  id: 20,
  name: "Гараж на 3 машины",
  enter: {
    x: 206.89,
    y: -999.10,
    z: -99.90,
    h: 147
  },
  type: "garage",
  cars: [{
    x: 197.76,
    y: -997.00,
    z: -99.90,
    h: 180
  }, {
    x: 192.76,
    y: -997.00,
    z: -99.90,
    h: 180
  }, {
    x: 202.75,
    y: -998.94,
    z: -99.90,
    h: 135
  }]
}, {
  id: 21,
  name: "Гараж на 5 машин",
  enter: {
    x: 240.54,
    y: -1004.87,
    z: -100.00,
    h: 91
  },
  type: "garage",
  cars: [{
    x: 222.82,
    y: -1000.20,
    z: -99.90,
    h: 248
  }, {
    x: 223.60,
    y: -985.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -990.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -995.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.70,
    y: -980.70,
    z: -99.90,
    h: 228
  }]
}, {
  id: 22,
  name: "Гараж на 6 машин",
  enter: {
    x: 240.54,
    y: -1004.87,
    z: -100.00,
    h: 91
  },
  type: "garage",
  cars: [{
    x: 223.60,
    y: -980.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -985.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -990.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -995.75,
    z: -99.90,
    h: 240
  }, {
    x: 222.69,
    y: -1000.26,
    z: -99.90,
    h: 245
  }, {
    x: 233.57,
    y: -980.67,
    z: -99.90,
    h: 128
  }]
}, {
  id: 23,
  name: "Гараж на 10 машин",
  enter: {
    x: 240.54,
    y: -1004.87,
    z: -100.00,
    h: 91
  },
  type: "garage",
  cars: [{
    x: 223.60,
    y: -980.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -985.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -990.75,
    z: -99.90,
    h: 240
  }, {
    x: 223.60,
    y: -995.75,
    z: -99.90,
    h: 240
  }, {
    x: 233.40,
    y: -985.75,
    z: -99.90,
    h: 120
  }, {
    x: 233.40,
    y: -990.75,
    z: -99.90,
    h: 120
  }, {
    x: 233.40,
    y: -995.75,
    z: -99.90,
    h: 120
  }, {
    x: 233.40,
    y: -1000.75,
    z: -99.90,
    h: 120
  }, {
    x: 222.82,
    y: -1000.20,
    z: -99.90,
    h: 248
  }, {
    x: 233.54,
    y: -980.72,
    z: -99.90,
    h: 74
  }]
}, {
  id: 24,
  name: "Пользовательская №1",
  enter: {
    x: 38.12,
    y: -1919.08,
    z: -1.53,
    h: 358
  },
  type: "house",
  stock: {
    x: 29.95,
    y: -1910.88,
    z: -1.53
  },
  mining: {
    x: 40.77,
    y: -1918.13,
    z: -1.53,
    h: 218 + 143
  },
  robberyPoints: [{
    x: 30.36,
    y: -1913.40,
    z: -1.53
  }, {
    x: 32.04,
    y: -1910.66,
    z: -1.53
  }, {
    x: 34.75,
    y: -1910.64,
    z: -1.53
  }, {
    x: 37.83,
    y: -1910.56,
    z: -1.53
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 25,
  name: "Пользовательская №2",
  enter: {
    x: 38.12,
    y: -1919.08,
    z: -1.53,
    h: 358
  },
  type: "house",
  stock: {
    x: 29.95,
    y: -1910.88,
    z: -1.53
  },
  mining: {
    x: 40.77,
    y: -1918.13,
    z: -1.53,
    h: 218 + 143
  },
  robberyPoints: [{
    x: 30.36,
    y: -1913.40,
    z: -1.53
  }, {
    x: 32.04,
    y: -1910.66,
    z: -1.53
  }, {
    x: 34.75,
    y: -1910.64,
    z: -1.53
  }, {
    x: 37.83,
    y: -1910.56,
    z: -1.53
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 26,
  name: "Пользовательская №3",
  enter: {
    x: 38.12,
    y: -1919.08,
    z: -1.53,
    h: 358
  },
  type: "house",
  stock: {
    x: 29.95,
    y: -1910.88,
    z: -1.53
  },
  mining: {
    x: 40.77,
    y: -1918.13,
    z: -1.53,
    h: 218 + 143
  },
  robberyPoints: [{
    x: 30.36,
    y: -1913.40,
    z: -1.53
  }, {
    x: 32.04,
    y: -1910.66,
    z: -1.53
  }, {
    x: 34.75,
    y: -1910.64,
    z: -1.53
  }, {
    x: 37.83,
    y: -1910.56,
    z: -1.53
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 27,
  name: "Пользовательская №4",
  enter: {
    x: -135.78,
    y: -1041.83,
    z: -10.29,
    h: 88
  },
  type: "house",
  stock: {
    x: -147.40,
    y: -1033.71,
    z: -10.29
  },
  mining: {
    x: -146.59,
    y: -1038.28,
    z: -10.29,
    h: 90
  },
  robberyPoints: [{
    x: -144.53,
    y: -1047.16,
    z: -10.29
  }, {
    x: -147.12,
    y: -1047.17,
    z: -10.29
  }, {
    x: -148.02,
    y: -1043.90,
    z: -10.29
  }, {
    x: -140.51,
    y: -1043.51,
    z: -10.29
  }]
}, {
  id: 28,
  name: "Пользовательская №5",
  enter: {
    x: -135.78,
    y: -1041.83,
    z: -10.29,
    h: 88
  },
  type: "house",
  stock: {
    x: -147.40,
    y: -1033.71,
    z: -10.29
  },
  mining: {
    x: -146.59,
    y: -1038.28,
    z: -10.29,
    h: 90
  },
  robberyPoints: [{
    x: -144.53,
    y: -1047.16,
    z: -10.29
  }, {
    x: -147.12,
    y: -1047.17,
    z: -10.29
  }, {
    x: -148.02,
    y: -1043.90,
    z: -10.29
  }, {
    x: -140.51,
    y: -1043.51,
    z: -10.29
  }]
}, {
  id: 29,
  name: "Пользовательская №6",
  enter: {
    x: -135.78,
    y: -1041.83,
    z: -10.29,
    h: 88
  },
  type: "house",
  stock: {
    x: -147.40,
    y: -1033.71,
    z: -10.29
  },
  mining: {
    x: -146.59,
    y: -1038.28,
    z: -10.29,
    h: 90
  },
  robberyPoints: [{
    x: -144.53,
    y: -1047.16,
    z: -10.29
  }, {
    x: -147.12,
    y: -1047.17,
    z: -10.29
  }, {
    x: -148.02,
    y: -1043.90,
    z: -10.29
  }, {
    x: -140.51,
    y: -1043.51,
    z: -10.29
  }]
}, {
  id: 30,
  name: "Пользовательская №7",
  enter: {
    x: -828.79,
    y: -715.36,
    z: 100.58,
    h: 183
  },
  type: "house",
  stock: {
    x: -817.01,
    y: -728.03,
    z: 103.97
  },
  mining: {
    x: -821.1531,
    y: -730.7302,
    z: 104.7615,
    h: 89
  },
  robberyPoints: [{
    x: -831.61,
    y: -729.73,
    z: 101.17
  }, {
    x: -826.22,
    y: -722.29,
    z: 100.58
  }, {
    x: -832.78,
    y: -727.87,
    z: 100.58
  }, {
    x: -836.65,
    y: -721.51,
    z: 100.58
  }]
}, {
  id: 31,
  name: "Пользовательская №8",
  enter: {
    x: -828.79,
    y: -715.36,
    z: 100.58,
    h: 183
  },
  type: "house",
  stock: {
    x: -817.01,
    y: -728.03,
    z: 103.97
  },
  mining: {
    x: -821.1531,
    y: -730.7302,
    z: 104.7615,
    h: 89
  },
  robberyPoints: [{
    x: -831.61,
    y: -729.73,
    z: 101.17
  }, {
    x: -826.22,
    y: -722.29,
    z: 100.58
  }, {
    x: -832.78,
    y: -727.87,
    z: 100.58
  }, {
    x: -836.65,
    y: -721.51,
    z: 100.58
  }]
}, {
  id: 32,
  name: "Пользовательская №9",
  enter: {
    x: -828.79,
    y: -715.36,
    z: 100.58,
    h: 183
  },
  type: "house",
  stock: {
    x: -817.01,
    y: -728.03,
    z: 103.97
  },
  mining: {
    x: -821.1531,
    y: -730.7302,
    z: 104.7615,
    h: 89
  },
  robberyPoints: [{
    x: -831.61,
    y: -729.73,
    z: 101.17
  }, {
    x: -826.22,
    y: -722.29,
    z: 100.58
  }, {
    x: -832.78,
    y: -727.87,
    z: 100.58
  }, {
    x: -836.65,
    y: -721.51,
    z: 100.58
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 33,
  name: "Пользовательская №10",
  enter: {
    x: -835.76,
    y: -715.60,
    z: 86.77,
    h: 183
  },
  type: "house",
  stock: {
    x: -820.64,
    y: -719.71,
    z: 91.05
  },
  mining: {
    x: -824.97,
    y: -723.67,
    z: 92.05,
    h: 7
  },
  robberyPoints: [{
    x: -824.08,
    y: -728.32,
    z: 86.97
  }, {
    x: -831.05,
    y: -720.38,
    z: 86.97
  }, {
    x: -823.20,
    y: -719.57,
    z: 91.05
  }, {
    x: -823.20,
    y: -719.57,
    z: 91.05
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 34,
  name: "Пользовательская №11",
  enter: {
    x: -835.76,
    y: -715.60,
    z: 86.77,
    h: 183
  },
  type: "house",
  stock: {
    x: -820.64,
    y: -719.71,
    z: 91.05
  },
  mining: {
    x: -824.97,
    y: -723.67,
    z: 92.05,
    h: 7
  },
  robberyPoints: [{
    x: -824.08,
    y: -728.32,
    z: 86.97
  }, {
    x: -831.05,
    y: -720.38,
    z: 86.97
  }, {
    x: -823.20,
    y: -719.57,
    z: 91.05
  }, {
    x: -823.20,
    y: -719.57,
    z: 91.05
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 35,
  name: "Пользовательская №12",
  enter: {
    x: -835.76,
    y: -715.60,
    z: 86.77,
    h: 183
  },
  type: "house",
  stock: {
    x: -820.64,
    y: -719.71,
    z: 91.05
  },
  mining: {
    x: -824.97,
    y: -723.67,
    z: 92.05,
    h: 7
  },
  robberyPoints: [{
    x: -824.08,
    y: -728.32,
    z: 86.97
  }, {
    x: -831.05,
    y: -720.38,
    z: 86.97
  }, {
    x: -823.20,
    y: -719.57,
    z: 91.05
  }, {
    x: -823.20,
    y: -719.57,
    z: 91.05
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 36,
  name: "Пользовательская №13",
  enter: {
    x: -830.71,
    y: -728.84,
    z: 81.80,
    h: 183
  },
  type: "house",
  stock: {
    x: -825.16,
    y: -724.55,
    z: 81.76
  },
  mining: {
    x: -824.77,
    y: -715.71,
    z: 82.76,
    h: 267
  },
  robberyPoints: [{
    x: -813.60,
    y: -716.47,
    z: 81.76
  }, {
    x: -825.45,
    y: -718.12,
    z: 81.76
  }, {
    x: -831.67,
    y: -719.26,
    z: 81.76
  }, {
    x: -828.59,
    y: -724.31,
    z: 81.76
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 37,
  name: "Пользовательская №14",
  enter: {
    x: -830.71,
    y: -728.84,
    z: 81.80,
    h: 183
  },
  type: "house",
  stock: {
    x: -825.16,
    y: -724.55,
    z: 81.76
  },
  mining: {
    x: -824.77,
    y: -715.71,
    z: 82.76,
    h: 267
  },
  robberyPoints: [{
    x: -813.60,
    y: -716.47,
    z: 81.76
  }, {
    x: -825.45,
    y: -718.12,
    z: 81.76
  }, {
    x: -831.67,
    y: -719.26,
    z: 81.76
  }, {
    x: -828.59,
    y: -724.31,
    z: 81.76
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 38,
  name: "Пользовательская №15",
  enter: {
    x: -830.71,
    y: -728.84,
    z: 81.80,
    h: 183
  },
  type: "house",
  stock: {
    x: -825.16,
    y: -724.55,
    z: 81.76
  },
  mining: {
    x: -824.77,
    y: -715.71,
    z: 82.76,
    h: 267
  },
  robberyPoints: [{
    x: -813.60,
    y: -716.47,
    z: 81.76
  }, {
    x: -825.45,
    y: -718.12,
    z: 81.76
  }, {
    x: -831.67,
    y: -719.26,
    z: 81.76
  }, {
    x: -828.59,
    y: -724.31,
    z: 81.76
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 39,
  name: "Пользовательская №16",
  enter: {
    x: -36.03,
    y: -575.10,
    z: 49.02,
    h: 183
  },
  type: "house",
  stock: {
    x: -33.21,
    y: -600.17,
    z: 53.42
  },
  mining: {
    x: -12.38,
    y: -595.86,
    z: 54.42,
    h: 251
  },
  robberyPoints: [{
    x: -32.92,
    y: -583.45,
    z: 49.02
  }, {
    x: -34.54,
    y: -587.86,
    z: 49.02
  }, {
    x: -19.22,
    y: -606.54,
    z: 49.02
  }, {
    x: -25.65,
    y: -576.31,
    z: 53.42
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 40,
  name: "Пользовательская №17",
  enter: {
    x: -36.03,
    y: -575.10,
    z: 49.02,
    h: 183
  },
  type: "house",
  stock: {
    x: -33.21,
    y: -600.17,
    z: 53.42
  },
  mining: {
    x: -12.38,
    y: -595.86,
    z: 54.42,
    h: 251
  },
  robberyPoints: [{
    x: -32.92,
    y: -583.45,
    z: 49.02
  }, {
    x: -34.54,
    y: -587.86,
    z: 49.02
  }, {
    x: -19.22,
    y: -606.54,
    z: 49.02
  }, {
    x: -25.65,
    y: -576.31,
    z: 53.42
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 41,
  name: "Пользовательская №18",
  enter: {
    x: -36.03,
    y: -575.10,
    z: 49.02,
    h: 183
  },
  type: "house",
  stock: {
    x: -33.21,
    y: -600.17,
    z: 53.42
  },
  mining: {
    x: -12.38,
    y: -595.86,
    z: 54.42,
    h: 251
  },
  robberyPoints: [{
    x: -32.92,
    y: -583.45,
    z: 49.02
  }, {
    x: -34.54,
    y: -587.86,
    z: 49.02
  }, {
    x: -19.22,
    y: -606.54,
    z: 49.02
  }, {
    x: -25.65,
    y: -576.31,
    z: 53.42
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 42,
  name: "Пользовательская №19",
  enter: {
    x: -691.10,
    y: 326.01,
    z: 127.81,
    h: 265
  },
  type: "house",
  stock: {
    x: -696.56,
    y: 319.50,
    z: 131.39
  },
  mining: {
    x: -691.35,
    y: 314.14,
    z: 132.39,
    h: 174
  },
  robberyPoints: [{
    x: -695.46,
    y: 315.66,
    z: 131.39
  }, {
    x: -687.78,
    y: 324.43,
    z: 131.39
  }, {
    x: -680.80,
    y: 329.33,
    z: 127.63
  }, {
    x: -676.95,
    y: 322.92,
    z: 127.63
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 43,
  name: "Пользовательская №20",
  enter: {
    x: -691.10,
    y: 326.01,
    z: 127.81,
    h: 265
  },
  type: "house",
  stock: {
    x: -696.56,
    y: 319.50,
    z: 131.39
  },
  mining: {
    x: -691.35,
    y: 314.14,
    z: 132.39,
    h: 174
  },
  robberyPoints: [{
    x: -695.46,
    y: 315.66,
    z: 131.39
  }, {
    x: -687.78,
    y: 324.43,
    z: 131.39
  }, {
    x: -680.80,
    y: 329.33,
    z: 127.63
  }, {
    x: -676.95,
    y: 322.92,
    z: 127.63
  }],
  cryptoWithdrawalTax: 0.15
}, {
  id: 44,
  name: "Пользовательская №21",
  enter: {
    x: -691.10,
    y: 326.01,
    z: 127.81,
    h: 265
  },
  type: "house",
  stock: {
    x: -696.56,
    y: 319.50,
    z: 131.39
  },
  mining: {
    x: -691.35,
    y: 314.14,
    z: 132.39,
    h: 174
  },
  robberyPoints: [{
    x: -695.46,
    y: 315.66,
    z: 131.39
  }, {
    x: -687.78,
    y: 324.43,
    z: 131.39
  }, {
    x: -680.80,
    y: 329.33,
    z: 127.63
  }, {
    x: -676.95,
    y: 322.92,
    z: 127.63
  }],
  cryptoWithdrawalTax: 0.15
}];
const DEFAULT_FAMILY_HOUSE_GARAGE = exports.DEFAULT_FAMILY_HOUSE_GARAGE = 17;
const getInteriorHouseById = id => {
  return interriors.find(q => q.id === id && q.type === "house");
};
exports.getInteriorHouseById = getInteriorHouseById;
const getInteriorGarageById = id => {
  return interriors.find(q => q.id === id && q.type === "garage");
};
exports.getInteriorGarageById = getInteriorGarageById;
const getInteriorsHouse = () => {
  return interriors.filter(q => q.type === "house");
};
exports.getInteriorsHouse = getInteriorsHouse;
const getInteriorsGarage = () => {
  return interriors.filter(q => q.type === "garage");
};
exports.getInteriorsGarage = getInteriorsGarage;
},{}],"baXL":[function(require,module,exports) {
"use strict";

var _inrerriors = require("../../shared/inrerriors");
var _inventory = require("./inventory");
var _checkpoints = require("./checkpoints");
var _menu = require("./menu");
var _user = require("./user");
var _inventory2 = require("../../shared/inventory");
var _houses = require("../../shared/houses");
var _custom = require("./custom.event");
var _system = require("./system");
const player = mp.players.local;
_checkpoints.colshapes.new(_inrerriors.HOUSE_STOCK_POS, `Склад`, () => {
  const m = new _menu.MenuClass('Склад');
  m.newItem({
    name: 'Открыть',
    onpress: () => {
      _inventory.inventory.open();
    }
  });
  m.newItem({
    name: 'Записи',
    onpress: () => {
      _user.user.openLogs(`house_${_inventory2.OWNER_TYPES.STOCK_SAFE}_${player.dimension}`, 'Склад');
    }
  });
  m.open();
}, {
  color: [100, 203, 63, 100],
  dimension: -1,
  type: 1,
  radius: 1.5,
  drawStaticName: "scaleform"
});
let homeBlip;
let warehouseBlip;
let familyHomeBlip;
_custom.CustomEvent.registerServer('warehouseBlip:create', pos => {
  warehouseBlip = _system.system.createBlip(50, 49, pos, 'Ваш склад', 0);
});
_custom.CustomEvent.registerServer('warehouseBlip:destroy', () => {
  if (warehouseBlip) warehouseBlip.destroy();
});
_custom.CustomEvent.registerServer('house:homeBlip:create', positionData => {
  const pos = JSON.parse(positionData);
  homeBlip = _system.system.createBlip(40, 5, pos, 'Ваш дом', 0);
});
_custom.CustomEvent.registerServer('house:homeBlip:delete', () => {
  if (homeBlip) homeBlip.destroy();
});
_custom.CustomEvent.registerServer('familyHome:createBlip', positionData => {
  const pos = JSON.parse(positionData);
  familyHomeBlip = _system.system.createBlip(40, 51, pos, 'Семейный дом', 0);
});
_custom.CustomEvent.registerServer('familyHome:deleteBlip', positionData => {
  if (familyHomeBlip) familyHomeBlip.destroy();
});
_inrerriors.interriors.map((item, index) => {
  if (item.type === "house") {
    if (item.stock) {
      _checkpoints.colshapes.new(new mp.Vector3(item.stock.x, item.stock.y, item.stock.z), 'Хранилище', () => {
        const m = new _menu.MenuClass('Хранилище');
        m.newItem({
          name: 'Открыть',
          onpress: () => {
            _inventory.inventory.open();
          }
        });
        m.newItem({
          name: 'Записи',
          onpress: () => {
            _user.user.openLogs(`house_${_inventory2.OWNER_TYPES.HOUSE}_${player.dimension}`, 'Хранилище');
          }
        });
        m.open();
      }, {
        color: [100, 203, 63, 100],
        dimension: -1,
        radius: 1.5,
        type: 1,
        drawStaticName: "scaleform"
      });
    }
  }
});
_houses.HousesTeleportsList.map((item, index) => {
  _checkpoints.colshapes.new(item.pos, item.name, player => {
    _custom.CustomEvent.triggerServer('houseteleport:houseMenu', index);
  }, {
    drawStaticName: 'scaleform',
    dimension: 0
  });
  _checkpoints.colshapes.new(new mp.Vector3(item.carExit.x, item.carExit.y, item.carExit.z + 0.5), item.name, player => {
    _custom.CustomEvent.triggerServer('houseteleport:vehicleMenu', index);
  }, {
    drawStaticName: 'scaleform',
    dimension: 0,
    radius: 3,
    type: 36
  });
  for (let q = _houses.HOUSES_TELEPORT_SEPARATOR * (index + 1); q < _houses.HOUSES_TELEPORT_SEPARATOR * (index + 2); q++) {
    _checkpoints.colshapes.new(item.inside, item.name, player => {
      _custom.CustomEvent.triggerServer('houseteleport:houseMenu', index);
    }, {
      drawStaticName: 'scaleform',
      dimension: q
    });
  }
});
},{"../../shared/inrerriors":"Ri0V","./inventory":"E5lg","./checkpoints":"XCJl","./menu":"Aiz7","./user":"ggMw","../../shared/inventory":"vpPR","../../shared/houses":"HJlI","./custom.event":"py8h","./system":"pi2J"}],"Aej0":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
let blip;
_custom.CustomEvent.registerServer('vehicleGrab:setBlipPos', (x, y, z) => {
  if (blip && blip.doesExist()) blip.destroy();
  blip = mp.blips.new(9, new mp.Vector3(x, y, z), {
    color: 6,
    rotation: 0,
    dimension: 0,
    radius: 160,
    alpha: 100
  });
});
_custom.CustomEvent.registerServer('vehicleGrab:deleteBlip', () => {
  if (blip && blip.doesExist()) {
    blip.destroy();
    blip = null;
  }
});
},{"./custom.event":"py8h"}],"smwu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VEHICLE_REGISTRATION_TARIFS = exports.VEHICLE_REGISTRATION_POS = void 0;
const VEHICLE_REGISTRATION_TARIFS = exports.VEHICLE_REGISTRATION_TARIFS = [["Случайный 8 значный номер", 5000, false, 8], ["Случайный 7 значный номер", 10000, false, 7], ["Случайный 6 значный номер", 15000, false, 6], ["Номерной знак под заказ", 2500, true, 0]];
const VEHICLE_REGISTRATION_POS = exports.VEHICLE_REGISTRATION_POS = [{
  x: -705.50,
  y: -1285.73,
  z: 4.10
}];
},{}],"rrVP":[function(require,module,exports) {
"use strict";

var _vehicle = require("../../shared/vehicle.registration");
var _checkpoints = require("./checkpoints");
var _user = require("./user");
var _gui = require("./gui");
_checkpoints.colshapes.new(_vehicle.VEHICLE_REGISTRATION_POS.map(item => new mp.Vector3(item.x, item.y, item.z)), "Точка регистрации ТС", player => {
  if (!player.vehicle) return _user.user.notify("Чтобы воспользоваться услугами центра регистрации ТС необходимо приехать на том самом ТС, который Вы желаете зарегистрировать", "error", "CHAR_TOM");
  if (player.vehicle.autosalon) return _user.user.notify("Этот ТС мы не принимаем к регистрации.", "error", "CHAR_TOM");
  const id = player.vehicle.getVariable('id');
  const owner = player.vehicle.getVariable('owner');
  const ownerFamily = player.vehicle.getVariable('ownerfamily');
  if (!id || !owner && !ownerFamily) return _user.user.notify("Этот ТС мы не принимаем к регистрации.", "error", "CHAR_TOM");
  if (owner && owner !== _user.user.id || ownerFamily && (ownerFamily != _user.user.family || _user.user.familyRank != 4)) return _user.user.notify("ТС, который вы регистрируете должен принадлежать Вам или семье.", "error", "CHAR_TOM");
  _gui.gui.setGui('numberplate');
}, {
  type: 27,
  radius: 5
});
},{"../../shared/vehicle.registration":"smwu","./checkpoints":"XCJl","./user":"ggMw","./gui":"bk91"}],"xe6u":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckpointTimerBar = void 0;
var _util = require("../util");
var coordsAndSize = _interopRequireWildcard(require("../coordsAndSizes"));
var _TimerBarBase = require("./TimerBarBase");
var _ = require("..");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  drawSprite
} = mp.game.graphics;
const {
  checkpointOffsetY,
  checkpointBaseX,
  checkpointWidth,
  checkpointHeight,
  checkpointOffsetX
} = coordsAndSize.default;
class CheckpointTimerBar extends _TimerBarBase.TimerBarBase {
  constructor(title, numCheckpoints) {
    super(title);
    this._thin = true;
    this._color = [255, 255, 255, 255];
    this._inProgressColor = [255, 255, 255, 51];
    this._failedColor = [0, 0, 0, 255];
    this._checkpointStates = {};
    this._numCheckpoints = (0, _util.clamp)(numCheckpoints, 0, 16);
    _.timerBarPool.add(this);
  }
  get numCheckpoints() {
    return this._numCheckpoints;
  }
  get color() {
    return this._color;
  }
  get inProgressColor() {
    return this._inProgressColor;
  }
  get failedColor() {
    return this._failedColor;
  }
  set color(value) {
    this._color = (0, _util.getColorFromValue)(value);
  }
  set inProgressColor(value) {
    this._inProgressColor = (0, _util.getColorFromValue)(value);
  }
  set failedColor(value) {
    this._failedColor = (0, _util.getColorFromValue)(value);
  }
  setCheckpointState(index, newState) {
    if (index < 0 || index >= this._numCheckpoints) {
      return;
    }
    this._checkpointStates[index] = newState;
  }
  setAllCheckpointsState(newState) {
    for (let i = 0; i < this._numCheckpoints; i++) {
      this._checkpointStates[i] = newState;
    }
  }
  get checkpointArrayBoolean() {
    let res = [];
    for (let i = 0; i < this._numCheckpoints; i++) {
      res.push(!!this._checkpointStates[i]);
    }
    return res;
  }
  draw(y) {
    super.draw(y);
    y += checkpointOffsetY;
    for (let i = 0, cpX = checkpointBaseX; i < this._numCheckpoints; i++) {
      const drawColor = this._checkpointStates[i] ? this._checkpointStates[i] === CheckpointTimerBar.state.failed ? this._failedColor : this._color : this._inProgressColor;
      drawSprite("timerbars", "circle_checkpoints", cpX, y, checkpointWidth, checkpointHeight, 0.0, drawColor[0], drawColor[1], drawColor[2], drawColor[3]);
      cpX -= checkpointOffsetX;
    }
  }
}
exports.CheckpointTimerBar = CheckpointTimerBar;
CheckpointTimerBar.state = {
  inProgress: 0,
  completed: 1,
  failed: 2
};
;
},{"../util":"YLDX","../coordsAndSizes":"Sqs5","./TimerBarBase":"MPzd","..":"ORIu"}],"SVhP":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _licence = require("../../shared/licence");
var _system = require("./system");
var _user = require("./user");
var _TextTimerBar = require("./bars/classes/TextTimerBar");
var _CheckpointTimerBar = require("./bars/classes/CheckpointTimerBar");
const player = mp.players.local;
_licence.LICENCE_CENTER_LIST.map(item => {
  if (item.icon) _system.system.createBlip(item.icon, 1, new mp.Vector3(item.point.x, item.point.y, item.point.z), item.name, 0);
});
const checkSize = 5;
_custom.CustomEvent.registerServer('autoschool:practice', async (exam, lic, vehicleid) => {
  const resolve = status => {
    _custom.CustomEvent.triggerServer('autoschool:practice:result', status);
  };
  let cdexitVeh = 30;
  const cfg = _licence.LICENCE_CENTER_LIST[exam];
  let end = false;
  let player = mp.players.local;
  let checkpoints = [...cfg.points];
  let check;
  let blip;
  let currentCheckID = 0;
  let checkBlip = 2;
  let checkBlipFinish = 4;
  _user.user.notify("Приступайте к выполнению");
  let mapTimeBar;
  let interval = setInterval(() => {
    if (end) {
      cdexitVeh = 30;
      clearInterval(interval);
      if (mapTimeBar) mapTimeBar.destroy();
    } else if (mp.players.local.vehicle && mp.players.local.vehicle.remoteId == vehicleid) {
      cdexitVeh = 30;
      if (mapTimeBar) mapTimeBar.hidden = true;
    } else {
      cdexitVeh--;
      if (mapTimeBar && mapTimeBar.exists) {
        mapTimeBar.hidden = false;
        mapTimeBar.text = _system.system.secondsToString(cdexitVeh + 1);
      } else {
        mapTimeBar = new _TextTimerBar.TextTimerBar("Вернитесь в учебный ТС", _system.system.secondsToString(cdexitVeh + 1));
      }
      if (cdexitVeh == 0) {
        resolve(false);
        end = true;
        if (mapTimeBar && mapTimeBar.exists) {
          mapTimeBar.destroy();
        }
        clearInterval(interval);
      }
    }
  }, 1000);
  while (!end) {
    let checkdata = {
      x: _system.system.parseFloat(checkpoints[currentCheckID].x),
      y: _system.system.parseFloat(checkpoints[currentCheckID].y),
      z: _system.system.parseFloat(checkpoints[currentCheckID].z)
    };
    let checkdataNext = {
      x: _system.system.parseFloat(checkpoints[currentCheckID].x),
      y: _system.system.parseFloat(checkpoints[currentCheckID].y),
      z: _system.system.parseFloat(checkpoints[currentCheckID].z)
    };
    if (currentCheckID != checkpoints.length - 1) {
      checkdataNext = {
        x: _system.system.parseFloat(checkpoints[currentCheckID + 1].x),
        y: _system.system.parseFloat(checkpoints[currentCheckID + 1].y),
        z: _system.system.parseFloat(checkpoints[currentCheckID + 1].z)
      };
    }
    check = mp.checkpoints.new(currentCheckID == checkpoints.length - 1 ? checkBlipFinish : checkBlip, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z - 1), checkSize + 0.0001, {
      direction: currentCheckID == checkpoints.length - 1 ? new mp.Vector3(0, 0, 75) : new mp.Vector3(checkdataNext.x, checkdataNext.y, checkdataNext.z),
      color: [255, 255, 0, 60],
      visible: true,
      dimension: player.dimension
    });
    blip = mp.blips.new(currentCheckID == checkpoints.length - 1 ? 611 : 1, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z), {
      name: !checkdataNext ? 'Финишная точка' : 'Контрольная точка',
      color: 5,
      shortRange: false,
      dimension: player.dimension
    });
    blip.setRoute(true);
    let reached = false;
    while (!reached) {
      let distance = mp.game.gameplay.getDistanceBetweenCoords(checkdata.x, checkdata.y, checkdata.z, player.position.x, player.position.y, player.position.z, false);
      if (distance < checkSize + 0.8) {
        if (player.vehicle && player.vehicle.remoteId == vehicleid) {
          reached = true;
          mp.game.audio.playSound(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false, 0, true);
        } else {
          await _system.system.sleep(10);
        }
      } else {
        await _system.system.sleep(10);
      }
      if (end) {
        if (blip) blip.destroy(), blip = null;
        if (check) check.destroy(), check = null;
        reached = true;
      }
    }
    if (blip) blip.destroy(), blip = null;
    if (check) check.destroy(), check = null;
    if (currentCheckID == checkpoints.length - 1) {
      end = true;
      if (mapTimeBar && mapTimeBar.exists) {
        mapTimeBar.destroy();
      }
      resolve(true);
    } else {
      currentCheckID++;
    }
  }
});
let objectsShoot = [];
const clearObjects = () => {
  objectsShoot.map(item => {
    if (item) {
      if (mp.objects.exists(item[0])) item[0].destroy();
      if (mp.blips.exists(item[1])) item[1].destroy();
    }
  });
  objectsShoot = [];
};
const shootTargets = ['gr_prop_gr_target_05b', 'gr_prop_gr_target_02b'];
let CheckpointBar;
let checkPointCnt = 0;
_custom.CustomEvent.registerServer('license:gun', async (examindex, licindex, weapon) => {
  clearObjects();
  await _system.system.sleep(1000);
  const cfg = _licence.LICENCE_CENTER_LIST[examindex];
  if (!cfg) return;
  const cfgLic = _licence.LICENCE_CENTER_LIST[examindex].license[licindex];
  if (!cfgLic) return;
  const points = [...cfg.points];
  player.freezePosition(true);
  player.setHeading(cfg.start.h);
  player.setCoords(cfg.start.x, cfg.start.y, cfg.start.z - 1, true, true, true, true);
  mp.game.cam.setGameplayCamRelativeHeading(0);
  let timer = parseInt(`${_licence.licenseShootTimer}`);
  _user.user.notify("Для успешной сдачи практической части экзамена приготовьтесь за " + timer + " секунд отстрелять все мишени", "success", "DIA_TARGET", 5000);
  points.map(item => {
    const pos = new mp.Vector3(item.x, item.y, item.z);
    setTimeout(() => {
      const obj = mp.objects.new(mp.game.joaat(_system.system.randomArrayElement(shootTargets)), pos, {
        dimension: player.dimension,
        rotation: new mp.Vector3(0, 0, item.h)
      });
      setTimeout(() => {
        objectsShoot.push([obj, _system.system.createBlip(119, 1, pos, "Мишень", player.dimension, false), obj.handle]);
      }, 100);
    }, 10);
  });
  await _system.system.sleep(1000);
  let end = false;
  mp.game.invoke('0x3EDCB0505123623B', player.handle, true, mp.game.joaat(weapon));
  player.freezePosition(false);
  const mapTimeBar = new _TextTimerBar.TextTimerBar("Стрельба по мишеням", _system.system.secondsToString(timer));
  CheckpointBar = new _CheckpointTimerBar.CheckpointTimerBar("Мишени", points.length);
  checkPointCnt = 0;
  while (!end) {
    if (timer <= 0 || objectsShoot.length === 0) end = true;else {
      mapTimeBar.text = _system.system.secondsToString(timer);
      await _system.system.sleep(1000);
      timer--;
    }
  }
  mapTimeBar.destroy();
  CheckpointBar.destroy();
  CheckpointBar = null;
  _custom.CustomEvent.triggerServer("licese:weapon:result", objectsShoot.length === 0);
  clearObjects();
});
mp.events.add('playerWeaponShot', targetPosition => {
  if (objectsShoot.length === 0) return;
  const cast = mp.raycasting.testPointToPoint(player.position, targetPosition, [player.handle], [2, 4, 8, 16]);
  if (!cast) return;
  if (!cast.entity) return;
  let index = objectsShoot.findIndex(q => q[0].id === cast.entity.id);
  if (index === -1) return;
  if (CheckpointBar && CheckpointBar.exists) {
    CheckpointBar.setCheckpointState(checkPointCnt, _CheckpointTimerBar.CheckpointTimerBar.state.completed);
    checkPointCnt++;
  }
  if (mp.objects.exists(objectsShoot[index][0])) objectsShoot[index][0].destroy();
  if (mp.blips.exists(objectsShoot[index][1])) objectsShoot[index][1].destroy();
  objectsShoot.splice(index, 1);
});
},{"./custom.event":"py8h","../../shared/licence":"c0dc","./system":"pi2J","./user":"ggMw","./bars/classes/TextTimerBar":"CjKg","./bars/classes/CheckpointTimerBar":"xe6u"}],"ds7w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.taskRoutePlay = exports.taskGoCoords = exports.taskGoCoord = exports.isPedMy = void 0;
var _system = require("./system");
let scaredlib = "amb@code_human_cower_stand@male@react_cowering",
  scaredanim = "base_right";
mp.events.addDataHandler("grabScared", async (entity, value) => {
  if (entity.type != "ped") return;
  if (value) scareAnim(entity);else stopAnim(entity);
});
mp.events.addDataHandler("cowGrease", async entity => {
  if (entity.type != "ped") return;
  mp.game.streaming.requestAnimDict('amb@lo_res_idles@');
  while (!mp.game.streaming.hasAnimDictLoaded('amb@lo_res_idles@')) await _system.system.sleep(100);
  mp.game.invoke('0xEA47FE3719165B94', entity.handle, 'amb@lo_res_idles@', 'creatures_world_cow_grazing_lo_res_base', 2.0001, 2.0001, -1, 1, 0, 0, 0, 0);
  setTimeout(() => {
    mp.game.invoke('0xE1EF3C1216AFF2CD', entity.handle);
  }, 3000);
});
mp.events.addDataHandler("pedHi", entity => {
  if (entity.type != "ped") return;
  mp.game.invoke("0x8E04FEDD28D42462", entity.handle, "Generic_Hi", "Speech_Params_Force", 0);
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "ped") return;
  if (entity.getVariable('grabScared')) scareAnim(entity);else stopAnim(entity);
});
const stopAnim = ped => {
  mp.game.invoke('0xE1EF3C1216AFF2CD', ped.handle);
};
const scareAnim = async ped => {
  mp.game.streaming.requestAnimDict(scaredlib);
  while (!mp.game.streaming.hasAnimDictLoaded(scaredlib)) await _system.system.sleep(100);
  mp.game.invoke('0xEA47FE3719165B94', ped.handle, scaredlib, scaredanim, 2.0001, 2.0001, -1, 1, 0, 0, 0, 0);
};
const taskGoCoord = (ped, pos, heading = 0) => {
  const seqId = [228];
  mp.game.invoke(_system.system.natives.OPEN_SEQUENCE_TASK, seqId);
  mp.game.invoke(_system.system.natives.TASK_GO_STRAIGHT_TO_COORD, 0, pos.x, pos.y, pos.z, 1.0, -1, heading + 0.001, 0.05);
  mp.game.invoke(_system.system.natives.CLOSE_SEQUENCE_TASK, seqId[0]);
  mp.game.invoke(_system.system.natives.TASK_PERFORM_SEQUENCE, ped.handle, seqId[0]);
  mp.game.invoke(_system.system.natives.CLEAR_SEQUENCE_TASK, seqId);
};
exports.taskGoCoord = taskGoCoord;
const taskGoCoords = (ped, poss) => {
  const seqId = [228];
  mp.game.invoke(_system.system.natives.OPEN_SEQUENCE_TASK, seqId);
  poss.map(pos => {
    mp.game.invoke(_system.system.natives.TASK_GO_STRAIGHT_TO_COORD, 0, pos.x, pos.y, pos.z, 1.0, -1, (pos.h || 0) + 0.001, 0.05);
  });
  mp.game.invoke(_system.system.natives.CLOSE_SEQUENCE_TASK, seqId[0]);
  mp.game.invoke(_system.system.natives.TASK_PERFORM_SEQUENCE, ped.handle, seqId[0]);
  mp.game.invoke(_system.system.natives.CLEAR_SEQUENCE_TASK, seqId);
};
exports.taskGoCoords = taskGoCoords;
const taskRoutePlay = (ped, pos, patrolName, scenario) => {
  mp.game.invoke('0x7767DD9D65E91319', patrolName);
  mp.game.invoke('0xA36BFB5EE89F3D82', patrolName);
  pos.map((item, i) => {
    let next = i === pos.length - 1 ? pos[0] : pos[i + 1];
    mp.game.invoke('0x8EDF950167586B7C', i, scenario, ...item, ...next, mp.game.gameplay.getRandomIntInRange(5000, 10000));
  });
  pos.map((item, i) => {
    let next = i === pos.length - 1 ? 0 : i + 1;
    mp.game.invoke('0x23083260DEC3A551', i, next);
  });
  mp.game.invoke('0xB043ECA801B8CBC1');
  mp.game.invoke('0xAF8A443CCC8018DC');
  mp.game.invoke('0xBDA5DF49D080FE4E', ped.handle, patrolName, 1.0, true, true);
};
exports.taskRoutePlay = taskRoutePlay;
const isPedMy = ped => {
  var _ped$controller;
  return ((_ped$controller = ped.controller) === null || _ped$controller === void 0 ? void 0 : _ped$controller.remoteId) === mp.players.local.remoteId;
};
exports.isPedMy = isPedMy;
},{"./system":"pi2J"}],"L1Tx":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _system = require("./system");
var _doors = require("../../shared/doors");
var _doors2 = require("./doors");
const player = mp.players.local;
const workDistance = 3;
const doorTerminal = -160937700;
const sendToTerminal = text => {
  _custom.CustomEvent.triggerCef('terminal:send', text);
};
_custom.CustomEvent.register('terminal:search', () => {
  const {
    x,
    y,
    z
  } = player.position;
  const handle = mp.game.object.getClosestObjectOfType(x, y, z + 1, workDistance, doorTerminal, true, true, true);
  return handle;
});
_custom.CustomEvent.register('terminal:bruteforce:validterminal', handle => {
  const model = mp.game.invoke('0x9F47B058362C84B5', handle);
  if (model !== doorTerminal) return false;
  const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
  if (!pos) return false;
  return true;
});
_custom.CustomEvent.register('terminal:bruteforce:validterminal:interact', handle => {
  const model = mp.game.invoke('0x9F47B058362C84B5', parseInt(handle));
  if (model !== doorTerminal) return 0;
  const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', parseInt(handle), true);
  if (!pos) return 0;
  const dist = _system.system.distanceToPos(pos, player.position);
  const signal = workDistance / dist;
  if (signal < workDistance / 10) return 0;
  return signal;
});
mp.events.add('terminal:bruteforce:validterminal:done', handle => {
  const model = mp.game.invoke('0x9F47B058362C84B5', parseInt(handle));
  if (model !== doorTerminal) return sendToTerminal("Сигнал потерян");
  const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', parseInt(handle), true);
  if (!pos) return sendToTerminal("Сигнал потерян");
  const dist = _system.system.distanceToPos(pos, player.position);
  if (dist > workDistance * 2) return sendToTerminal("Сигнал потерян");
  _doors.DOORS_LIST.map((door, index) => {
    if (!_system.system.isPointInPoints(pos, [door.pos, ...door.doors], 5)) return;
    if (!(0, _doors2.getDoorStatus)(index)) return sendToTerminal("Тернинал информирует что дверь уже открыта");
    (0, _doors2.setDoorStatus)(index, false, true);
  });
});
},{"./custom.event":"py8h","./system":"pi2J","../../shared/doors":"g7OS","./doors":"H2nx"}],"tuMh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GRAB_POS_LIST = exports.GRAB_C4_SET_TIME = exports.GRAB_C4_EXPLODE_TIME = void 0;
var _minigame = require("./minigame");
const GRAB_C4_SET_TIME = exports.GRAB_C4_SET_TIME = 10;
const GRAB_C4_EXPLODE_TIME = exports.GRAB_C4_EXPLODE_TIME = 30;
const GRAB_POS_LIST = exports.GRAB_POS_LIST = [{
  type: "money",
  fractions: "mafia",
  familyLevel: 3,
  name: "Pacific",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: 961976194,
    x: 254.38,
    y: 225.72,
    z: 100.88,
    h: 272,
    r: 2.5,
    exit_r: 2.5,
    exit_x: 252.98,
    exit_y: 222.28,
    exit_z: 100.68,
    hide_x: 256.24,
    hide_y: 232.96,
    hide_z: 102.36,
    default_x: 255.23,
    default_y: 223.98,
    default_z: 102.39,
    alert: [2, 3, 4, 7]
  },
  online: 1,
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 10,
  points: [{
    x: 258.03,
    y: 214.47,
    z: 100.68,
    h: 161
  }, {
    x: 259.25,
    y: 217.74,
    z: 100.68,
    h: 341
  }, {
    x: 263.59,
    y: 216.23,
    z: 100.68,
    h: 341
  }, {
    x: 262.31,
    y: 213.02,
    z: 100.68,
    h: 156
  }],
  worldTime: [[17, 18], [18, 19], [19, 20], [20, 21], [21, 22]],
  days: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31],
  restoreWorldTime: [5, 18, 19, 20, 21],
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  money_max: [350000, 400000],
  money: [1500, 2000]
}, {
  type: "money",
  fractions: "mafia",
  familyLevel: 3,
  name: "Casino",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: -1042390945,
    x: 999.30,
    y: 29.06,
    z: 72.76,
    h: 328,
    r: 2.5,
    exit_r: 2.0,
    exit_x: 997.12,
    exit_y: 25.18,
    exit_z: 72.74,
    hide_x: 1002.22,
    hide_y: 26.59,
    hide_z: 68.30,
    default_x: 997.46,
    default_y: 29.39,
    default_z: 73.29,
    alert: [2, 3, 4, 7]
  },
  online: 60,
  anim: ["anim@heists@money_grab@duffel", "loop"],
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  second_anim: 10,
  points: [{
    x: 998.74,
    y: -0.90,
    z: 71.74,
    h: 202
  }, {
    x: 996.05,
    y: -1.59,
    z: 71.74,
    h: 199
  }, {
    x: 975.62,
    y: 7.09,
    z: 71.74,
    h: 117
  }, {
    x: 974.11,
    y: 11.24,
    z: 71.74,
    h: 106
  }],
  worldTime: [[17, 18], [18, 19], [19, 20], [20, 21], [21, 22]],
  days: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31],
  restoreWorldTime: [9, 18, 19, 20, 21],
  money_max: [400000, 450000],
  money: [1500, 2000]
}, {
  type: "money",
  fractions: "gang",
  name: "Fleeca1",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: 2121050683,
    x: 147.04,
    y: -1044.89,
    z: 28.47,
    h: 64,
    r: 2.5,
    exit_r: 2.5,
    exit_x: 148.69,
    exit_y: -1049.13,
    exit_z: 29.29,
    hide_x: 147.96,
    hide_y: -1044.71,
    hide_z: 23.53,
    default_x: 148.03,
    default_y: -1044.36,
    default_z: 29.51,
    alert: [2, 3]
  },
  worldTime: [[15, 16]],
  online: 1,
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 5,
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  points: [{
    x: 150.28,
    y: -1049.77,
    z: 28.45,
    h: 248
  }, {
    x: 149.13,
    y: -1050.64,
    z: 28.45,
    h: 159
  }, {
    x: 147.57,
    y: -1050.04,
    z: 28.45,
    h: 161
  }, {
    x: 147.34,
    y: -1048.79,
    z: 28.45,
    h: 68
  }],
  restoreWorldTime: [23],
  money_max: [300000, 350000],
  money: [1200, 1500]
}, {
  type: "money",
  fractions: "gang",
  name: "Fleeca3",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: 2121050683,
    x: 1176.41,
    y: 2711.76,
    z: 37.20,
    h: 266,
    r: 2.5,
    exit_r: 4,
    exit_x: 1173.19,
    exit_y: 2715.11,
    exit_z: 38.01,
    hide_x: 1175.26,
    hide_y: 2711.91,
    hide_z: 33.60,
    default_x: 1175.54,
    default_y: 2710.86,
    default_z: 38.23,
    alert: [7, 3]
  },
  online: 1,
  worldTime: [[16, 17]],
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 5,
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  points: [{
    x: 1174.81,
    y: 2715.22,
    z: 37.17,
    h: 270
  }, {
    x: 1173.91,
    y: 2716.39,
    z: 37.17,
    h: 7
  }, {
    x: 1172.51,
    y: 2716.31,
    z: 37.17,
    h: 6
  }, {
    x: 1171.57,
    y: 2715.10,
    z: 37.17,
    h: 104
  }],
  restoreWorldTime: [23],
  money_max: [300000, 350000],
  money: [1200, 1500]
}, {
  type: "money",
  fractions: "gang",
  name: "Fleeca6",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: 2121050683,
    x: -1211.50,
    y: -335.54,
    z: 36.88,
    h: 115,
    r: 2.5,
    exit_r: 4,
    exit_x: -1207.20,
    exit_y: -337.18,
    exit_z: 37.70,
    hide_x: -1210.69,
    hide_y: -335.30,
    hide_z: 30.12,
    default_x: -1211.26,
    default_y: -334.56,
    default_z: 37.92,
    alert: [2, 3]
  },
  online: 1,
  worldTime: [[18, 19]],
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 5,
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  points: [{
    x: -1205.75,
    y: -336.63,
    z: 36.86,
    h: 297
  }, {
    x: -1205.94,
    y: -337.87,
    z: 36.86,
    h: 202
  }, {
    x: -1207.48,
    y: -338.75,
    z: 36.86,
    h: 179
  }, {
    x: -1208.56,
    y: -338.05,
    z: 36.86,
    h: 117
  }],
  restoreWorldTime: [23],
  money_max: [300000, 350000],
  money: [1200, 1500]
}, {
  type: "money",
  fractions: "gang",
  name: "Fleeca2",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: -63539571,
    x: -2957.62,
    y: 481.61,
    z: 14.80,
    h: 193,
    r: 2.5,
    exit_r: 4,
    exit_x: -2954.15,
    exit_y: 484.64,
    exit_z: 15.62,
    hide_x: -2957.88,
    hide_y: 482.30,
    hide_z: 9.60,
    default_x: -2958.54,
    default_y: 482.27,
    default_z: 15.84,
    alert: [7, 3]
  },
  online: 1,
  worldTime: [[19, 20]],
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 5,
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  points: [{
    x: -2954.15,
    y: 482.87,
    z: 14.78,
    h: 176
  }, {
    x: -2953.04,
    y: 483.67,
    z: 14.78,
    h: 274
  }, {
    x: -2952.87,
    y: 485.19,
    z: 14.78,
    h: 295
  }, {
    x: -2954.07,
    y: 486.00,
    z: 14.78,
    h: 356
  }],
  restoreWorldTime: [23],
  money_max: [300000, 350000],
  money: [1200, 1500]
}, {
  type: "money",
  fractions: "gang",
  name: "Fleeca5",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: 2121050683,
    x: -353.98,
    y: -53.93,
    z: 48.15,
    h: 68,
    r: 2.5,
    exit_r: 4,
    exit_x: -351.92,
    exit_y: -58.28,
    exit_z: 48.96,
    hide_x: -352.75,
    hide_y: -54.34,
    hide_z: 41.93,
    default_x: -352.74,
    default_y: -53.57,
    default_z: 49.18,
    alert: [2, 3]
  },
  online: 1,
  worldTime: [[20, 21]],
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 5,
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  points: [{
    x: -353.47,
    y: -57.91,
    z: 48.11,
    h: 68
  }, {
    x: -353.17,
    y: -59.12,
    z: 48.11,
    h: 189
  }, {
    x: -351.62,
    y: -59.80,
    z: 48.11,
    h: 162
  }, {
    x: -350.44,
    y: -58.85,
    z: 48.11,
    h: 281
  }],
  restoreWorldTime: [23],
  money_max: [300000, 350000],
  money: [1200, 1500]
}, {
  type: "money",
  fractions: "gang",
  name: "Fleeca4",
  door: {
    timer: GRAB_C4_EXPLODE_TIME,
    hash: 2121050683,
    x: 311.08,
    y: -283.20,
    z: 53.27,
    h: 66,
    r: 2.5,
    exit_r: 4,
    exit_x: 313.06,
    exit_y: -287.49,
    exit_z: 54.09,
    hide_x: 312.24,
    hide_y: -283.49,
    hide_z: 45.97,
    default_x: 312.36,
    default_y: -282.73,
    default_z: 54.30,
    alert: [7, 3]
  },
  online: 1,
  worldTime: [[21, 22]],
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 5,
  minigame: _minigame.MINIGAME_TYPE.MONEY,
  points: [{
    x: 311.57,
    y: -287.00,
    z: 53.24,
    h: 69
  }, {
    x: 312.00,
    y: -288.43,
    z: 53.24,
    h: 164
  }, {
    x: 313.41,
    y: -289.14,
    z: 53.24,
    h: 190
  }, {
    x: 314.49,
    y: -288.10,
    z: 53.24,
    h: 248
  }],
  restoreWorldTime: [23],
  money_max: [300000, 350000],
  money: [1200, 1500]
}, {
  type: "item",
  fractions: [18, 19, 20, 21, 22, 23, 24, 25],
  name: "Army",
  worldTime: [[17, 18], [18, 19], [19, 20], [20, 21], [21, 22]],
  online: 1,
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 10,
  points: [{
    x: -1779.71,
    y: 2995.42,
    z: 31.81,
    h: 337
  }, {
    x: -1780.19,
    y: 2997.67,
    z: 31.81,
    h: 271
  }, {
    x: -1785.34,
    y: 3000.48,
    z: 31.81,
    h: 214
  }, {
    x: -1787.46,
    y: 2999.02,
    z: 31.81,
    h: 224
  }, {
    x: -1798.27,
    y: 2930.29,
    z: 31.81,
    h: 48
  }, {
    x: -1784.29,
    y: 2947.41,
    z: 31.81,
    h: 52
  }],
  findChance: 0,
  restoreWorldTime: [4, 18, 19, 20, 21],
  days: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 24],
  giveItem: [{
    item: 529,
    amount: 10
  }, {
    item: 910,
    amount: 20
  }, {
    item: 519,
    amount: 6
  }, {
    item: 500,
    amount: 15
  }, {
    item: 532,
    amount: 4
  }, {
    item: 530,
    amount: 10
  }, {
    item: 544,
    amount: 10
  }, {
    item: 151,
    amount: 100
  }, {
    item: 854,
    amount: 2
  }, {
    item: 539,
    amount: 10
  }, {
    item: 537,
    amount: 10
  }, {
    item: 872,
    amount: 20
  }, {
    item: 873,
    amount: 20
  }, {
    item: 874,
    amount: 20
  }, {
    item: 875,
    amount: 20
  }, {
    item: 876,
    amount: 20
  }, {
    item: 877,
    amount: 20
  }, {
    item: 571,
    amount: 10
  }, {
    item: 878,
    amount: 10
  }, {
    item: 960,
    amount: 30
  }]
}, {
  type: "item",
  fractions: "gang",
  name: "Port",
  door: {
    timer: 420,
    hash: 2244758654,
    x: 610.3449,
    y: -3058.781,
    z: 5.422087,
    h: 358,
    r: 1.5,
    exit_r: 1,
    exit_x: 610.15,
    exit_y: -3062.83,
    exit_z: 5.07,
    hide_x: 611.07,
    hide_y: -3058.70,
    hide_z: 1.17,
    default_x: 610.983,
    default_y: -3059.51,
    default_z: 6.3120,
    alert: [4, 7, 2, 3],
    alertBefore: true
  },
  online: 1,
  days: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31],
  worldTime: [[17, 18], [18, 19], [19, 20], [20, 21], [21, 22]],
  anim: ["anim@heists@money_grab@duffel", "loop"],
  second_anim: 10,
  points: [{
    x: 610.40,
    y: -3095.96,
    z: 5.07,
    h: 267
  }, {
    x: 613.22,
    y: -3093.60,
    z: 5.07,
    h: 187
  }, {
    x: 612.20,
    y: -3084.11,
    z: 5.07,
    h: 2
  }, {
    x: 609.99,
    y: -3081.54,
    z: 5.07,
    h: 266
  }],
  restoreWorldTime: [4, 18, 19, 20, 21],
  giveItem: [{
    item: 872,
    amount: 20
  }, {
    item: 873,
    amount: 20
  }, {
    item: 874,
    amount: 20
  }, {
    item: 875,
    amount: 20
  }, {
    item: 876,
    amount: 20
  }, {
    item: 877,
    amount: 20
  }, {
    item: 854,
    amount: 3
  }, {
    item: 910,
    amount: 30
  }, {
    item: 539,
    amount: 10
  }, {
    item: 537,
    amount: 10
  }, {
    item: 571,
    amount: 10
  }, {
    item: 960,
    amount: 20
  }]
}];
},{"./minigame":"K6Qz"}],"oAOB":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _user = require("./user");
var _system = require("./system");
var _grab = require("../../shared/grab.zone");
var _hudBar = require("./hudBar");
var _minigame = require("./minigame");
const player = mp.players.local;
let exploded = new Map();
_custom.CustomEvent.registerServer('grab:start', (anim, x, y, z, h, minigame) => {
  return new Promise(async resolve => {
    player.taskGoStraightToCoord(x, y, z, 1.0, 30000, h, 0.0);
    let c = 0;
    while (c < 50 && _system.system.distanceToPos2D(player.position, {
      x,
      y
    }) > 0.1) await _system.system.sleep(100);
    if (_system.system.distanceToPos2D(player.position, {
      x,
      y
    }) > 0.1) return resolve(false);
    if (typeof anim === "string") _user.user.playScenario(anim);else _user.user.playAnim([anim], false, true);
    await _system.system.sleep(2000);
    let timer = _grab.GRAB_C4_SET_TIME;
    let block = _hudBar.hudBar.timer('Сбор денег', timer);
    let int = setInterval(async () => {
      timer--;
      let playAnim = false;
      if (typeof anim === "string") playAnim = player.isUsingScenario(anim);else playAnim = player.isPlayingAnim(anim[0], anim[1], 3);
      if (timer <= 0 || !playAnim || _system.system.distanceToPos2D(player.position, {
        x,
        y
      }) > 1.3) {
        if (timer > 0) {
          _user.user.notify("Вы прервали сбор денег", "error");
          resolve(false);
        } else {
          if (minigame && !(await (0, _minigame.MinigamePlay)(minigame))) return resolve(false);
          resolve(true);
        }
        _user.user.stopAnim();
        block.destroy();
        clearInterval(int);
      }
    }, 1000);
  });
});
_custom.CustomEvent.registerServer('grab:explode', (x, y, z, h) => {
  return new Promise(async resolve => {
    player.taskGoStraightToCoord(x, y, z, 1.0, 30000, h, 0.1);
    let c = 0;
    while (c < 50 && _system.system.distanceToPos2D(player.position, {
      x,
      y
    }) > 1) await _system.system.sleep(100);
    if (_system.system.distanceToPos2D(player.position, {
      x,
      y
    }) > 1) return resolve(false);
    _user.user.playScenario("CODE_HUMAN_MEDIC_TEND_TO_DEAD");
    await _system.system.sleep(2000);
    let timer = _grab.GRAB_C4_SET_TIME;
    let block = _hudBar.hudBar.timer('Установка взрывчатки', timer);
    let int = setInterval(() => {
      timer--;
      if (timer <= 0 || !player.isUsingScenario("CODE_HUMAN_MEDIC_TEND_TO_DEAD") || _system.system.distanceToPos2D(player.position, {
        x,
        y
      }) > 1.3) {
        if (timer > 0) {
          _user.user.notify("Вы прервали установку взрывчатки", "error");
          resolve(false);
        } else {
          resolve(true);
        }
        _user.user.stopAnim();
        block.destroy();
        clearInterval(int);
      }
    }, 1000);
  });
});
_custom.CustomEvent.registerServer('grab:door:add', (id, noexplode = false) => {
  exploded.set(id, true);
  const cfg = _grab.GRAB_POS_LIST[id];
  if (!cfg) return;
  if (!cfg.door) return;
  if (mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, cfg.door.x, cfg.door.y, cfg.door.z, true) > 100) return;
  sync();
  if (noexplode) return;
  mp.game.fire.addExplosion(cfg.door.default_x, cfg.door.default_y, cfg.door.default_z, 2, 20, false, false, 0);
  mp.game.audio.playSoundFromCoord(-1, "Jet_Explosions", cfg.door.default_x, cfg.door.default_y, cfg.door.default_z, "exile_1", false, 0, false);
  mp.game.fire.addExplosion(cfg.door.x, cfg.door.y, cfg.door.z, 2, 20, false, false, 0);
  mp.game.audio.playSoundFromCoord(-1, "Jet_Explosions", cfg.door.x, cfg.door.y, cfg.door.z, "exile_1", false, 0, false);
  const middle = _system.system.middlePoint3d(cfg.door, {
    x: cfg.door.default_x,
    y: cfg.door.default_y,
    z: cfg.door.default_z
  });
  mp.game.fire.addExplosion(middle.x, middle.y, middle.z, 2, 20, false, false, 0);
  mp.game.audio.playSoundFromCoord(-1, "Jet_Explosions", middle.x, middle.y, middle.z, "exile_1", false, 0, false);
});
_custom.CustomEvent.registerServer('grab:door:remove', id => {
  exploded.delete(id);
  const cfg = _grab.GRAB_POS_LIST[id];
  if (!cfg) return;
  if (!cfg.door) return;
  if (mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, cfg.door.x, cfg.door.y, cfg.door.z, true) > 100) return;
  sync();
});
const sync = () => {
  _grab.GRAB_POS_LIST.map((item, id) => {
    const data = item.door;
    if (!data) return;
    const dist = _system.system.distanceToPos(mp.players.local.position, data);
    if (dist > 50) return;
    let hide = exploded.has(id);
    const handle = mp.game.object.getClosestObjectOfType(data.x, data.y, data.z + 1, 10, data.hash, true, true, true);
    if (handle) {
      const pos = mp.game.invokeVector3('0x3FEF770D40960D5A', handle, true);
      if (hide) {
        if (_system.system.distanceToPos(pos, {
          x: data.hide_x,
          y: data.hide_y,
          z: data.hide_z
        }) > 0.2) mp.game.invoke('0x06843DA7060A026B', handle, data.hide_x, data.hide_y, data.hide_z, true, true, true, false);
      } else {
        if (_system.system.distanceToPos(pos, {
          x: data.default_x,
          y: data.default_y,
          z: data.default_z
        }) > 0.2) mp.game.invoke('0x06843DA7060A026B', handle, data.default_x, data.default_y, data.default_z, true, true, true, false);
      }
      mp.game.invoke('0x428CA6DBD1094446', handle, true);
    }
  });
};
setInterval(() => {
  sync();
}, 2000);
},{"./custom.event":"py8h","./user":"ggMw","./system":"pi2J","../../shared/grab.zone":"tuMh","./hudBar":"WSqW","./minigame":"KnNo"}],"ZIDx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wantedViewZones = void 0;
const wantedViewZones = exports.wantedViewZones = [[{
  x: 1568.34,
  y: -3585.49
}, {
  x: -2131.20,
  y: -1252.95
}], [{
  x: -2131.20,
  y: -1252.95
}, {
  x: 1457.52,
  y: 876.39
}], [{
  x: -2482.40,
  y: -37.20
}, {
  x: -3556.23,
  y: 1529.26
}], [{
  x: -411.06,
  y: 5939.08
}, {
  x: 163.43,
  y: 6868.06
}], [{
  x: 1304.71,
  y: 3655.74
}, {
  x: 1459.56,
  y: 3613.03
}], [{
  x: 1408.07,
  y: 3763.61
}, {
  x: 2060.85,
  y: 3751.83
}]];
},{}],"fUei":[function(require,module,exports) {
"use strict";

var _user = require("./user");
var _system = require("./system");
var _custom = require("./custom.event");
var _system2 = require("../../shared/system");
var _wantedViewZones = require("../../shared/wantedViewZones");
let trackingBlips = new Map();
let myTrackingList = [];
_custom.CustomEvent.registerServer('faction:gpsTracking', value => {
  myTrackingList = value;
});
mp.events.add('tablet:suspect:track', id => {
  _user.user.trackSuspect = id;
});
setInterval(() => {
  if (!_user.user.login) return;
  if (!_user.user.fraction || mp.players.local.dimension) {
    trackingBlips.forEach((_, id) => removeBlip(id));
    return;
  }
  mp.players.forEach(target => {
    const id = target.getVariable('id');
    if (haveAccess(target)) {
      const pos = JSON.parse(target.getVariable('gpsTrackPos'));
      if (!trackingBlips.has(id)) {
        const blip = _system.system.createBlip(pos.v ? 225 : 280, 1, pos, `GPS Метка: ${target.getVariable('name')} #${id}`, 0);
        trackingBlips.set(id, blip);
        blip.setRoute(true);
        blip.setRouteColour(59);
      } else {
        const blip = trackingBlips.get(id);
        blip.setSprite(pos.v ? 225 : 280);
        blip.setRoute(false);
        blip.setPosition(pos.x, pos.y, pos.z);
        blip.setRoute(true);
        blip.setRouteColour(59);
      }
    } else if (_user.user.trackSuspect == id && _user.user.is_police && !target.dimension && !!target.getVariable('suspectGPS_position')) {
      const pos = JSON.parse(target.getVariable('suspectGPS_position'));
      const inZone = _wantedViewZones.wantedViewZones.map(vz => {
        return _system2.systemUtil.isPointInRectangle2D({
          x: pos.x,
          y: pos.y
        }, {
          x: vz[0].x,
          y: vz[0].y
        }, {
          x: vz[1].x,
          y: vz[1].y
        });
      }).includes(true);
      if (_system.system.distanceToPos2D(mp.players.local.position, {
        x: pos.x,
        y: pos.y
      }) < 500.0) {
        if (_system.system.timestamp - _user.user.trackSuspectLastTime < 15) return;
      } else if (!inZone || _system.system.timestamp - _user.user.trackSuspectLastTime < 60) return;
      if (!trackingBlips.has(id)) {
        const blip = _system.system.createBlip(pos.v ? 645 : 458, 59, pos, `Отслеживаемый преступник ${target.getVariable('name')} #${id}`, 0);
        trackingBlips.set(id, blip);
        blip.setRoute(true);
        blip.setRouteColour(59);
      } else {
        const blip = trackingBlips.get(id);
        blip.setSprite(pos.v ? 645 : 458);
        blip.setRoute(false);
        blip.setColour(59);
        blip.setPosition(pos.x, pos.y, pos.z);
        blip.setRoute(true);
        blip.setRouteColour(59);
      }
      _user.user.trackSuspectLastTime = _system.system.timestamp;
    } else {
      removeBlip(id);
    }
  });
}, 2000);
const haveAccess = data => {
  const target = typeof data === "number" ? mp.players.toArray().find(q => q.getVariable('id') === data) : data;
  if (!target || !mp.players.exists(target)) return false;
  if (target.dimension) return false;
  const id = typeof data === "number" ? data : target.getVariable('id');
  if (!myTrackingList.includes(id)) return false;
  if (_user.user.fraction !== target.getVariable('fraction')) return false;
  if (!target.getVariable('gpsTrack')) return false;
  if (!target.getVariable('gpsTrackPos')) return false;
  return true;
};
const removeBlip = id => {
  let blip = trackingBlips.get(id);
  if (!blip) return;
  if (_user.user.trackSuspect == id) _user.user.trackSuspect = -1;
  blip.destroy();
  trackingBlips.delete(id);
};
const createBlip = id => {
  let blip = trackingBlips.get(id);
  if (!blip) return;
  blip.destroy();
  trackingBlips.delete(id);
};
let blips = [];
setInterval(() => {
  if (!_user.user.login) return;
  const mypos = mp.players.local.position;
  blips.map(([blip, dist, pos], id) => {
    if (!blip || !mp.blips.exists(blip)) return blips.splice(id, 1);
    if (_system.system.distanceToPos2D(pos, mypos) <= dist) {
      blip.destroy();
      blips.splice(id, 1);
    }
  });
}, 1000);
_custom.CustomEvent.registerServer('gps:blips', list => {
  blips.map(([blip, dist, pos], id) => {
    if (!blip || !mp.blips.exists(blip)) return;
    blip.destroy();
  });
  blips = [];
  list.map(item => {
    blips.push([_system.system.createBlip(item.type, item.color, {
      x: item.x,
      y: item.y,
      z: 0
    }, item.name, 0, !!item.shortRange), item.distDestroy, {
      x: item.x,
      y: item.y
    }]);
  });
});
},{"./user":"ggMw","./system":"pi2J","./custom.event":"py8h","../../shared/system":"SNxO","../../shared/wantedViewZones":"ZIDx"}],"XmeB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WAIT_REGISTER = exports.WAIT_FOR_START_REGISTER = exports.RACE_TYPE_ARR_NAME = exports.RACE_TYPE_ARR = exports.RACE_REGISTER_POS = exports.RACE_REGISTER_BOARD = exports.RACE_NAME = exports.PLAYER_MAPS_LIMIT = exports.MONEY_RAGE = exports.MIN_RACERS = exports.MIN_CHECKPOINTS = exports.MAX_RACERS = exports.LIMIT_CHECKPOINTS = exports.CHANCE_WIN_MULTIPLER = exports.CHANCE_WIN_EXTRA_BONUS_FIRST = exports.CHANCE_WIN_EXTRA_BONUS = void 0;
const RACE_REGISTER_POS = exports.RACE_REGISTER_POS = [new mp.Vector3(-246.19, -2007.87, 29.15), new mp.Vector3(-248.65, -2013.81, 29.15)];
const RACE_REGISTER_BOARD = exports.RACE_REGISTER_BOARD = [[new mp.Vector3(-245.67, -2010.52, 30.15), 250]];
const RACE_NAME = exports.RACE_NAME = "RaceClub";
const WAIT_FOR_START_REGISTER = exports.WAIT_FOR_START_REGISTER = 10;
const WAIT_REGISTER = exports.WAIT_REGISTER = 2;
const MIN_RACERS = exports.MIN_RACERS = 5;
const MAX_RACERS = exports.MAX_RACERS = 20;
const MONEY_RAGE = exports.MONEY_RAGE = [9000, 15000];
const PLAYER_MAPS_LIMIT = exports.PLAYER_MAPS_LIMIT = 5;
const LIMIT_CHECKPOINTS = exports.LIMIT_CHECKPOINTS = 100;
const MIN_CHECKPOINTS = exports.MIN_CHECKPOINTS = 10;
const RACE_TYPE_ARR = exports.RACE_TYPE_ARR = ["line", "circle"];
const RACE_TYPE_ARR_NAME = exports.RACE_TYPE_ARR_NAME = ["Спринт", "Кольцо"];
const CHANCE_WIN_EXTRA_BONUS = exports.CHANCE_WIN_EXTRA_BONUS = 5;
const CHANCE_WIN_EXTRA_BONUS_FIRST = exports.CHANCE_WIN_EXTRA_BONUS_FIRST = true;
const CHANCE_WIN_MULTIPLER = exports.CHANCE_WIN_MULTIPLER = 10;
},{}],"MPk7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.discord = void 0;
var _user = require("./user");
var _survival = require("./survival");
var _roulette = require("./casino/roulette");
var _dice = require("./casino/dice");
const player = mp.players.local;
let currentSetStatus;
let currentSetText;
const discord = exports.discord = {
  get status() {
    return currentSetStatus;
  },
  set status(val) {
    currentSetStatus = val;
    discord.update();
  },
  update() {
    let text;
    if (currentSetStatus) text = currentSetStatus;
    if (!text && !_user.user.login) text = 'Заходит на сервер';
    if (!text && mp.game.ui.isPauseMenuActive()) text = 'В меню паузы';
    if (!text && _user.user.afk) text = 'AFK';
    if (!text && _user.user.isAdminNow()) text = 'Администрирует';
    if (!text && (player.isSprinting() || player.isRunning())) text = 'Бегает';
    if (!text && _user.user.dead) text = 'В коме';
    if (!text && _survival.healTimer) text = 'Проходит лечение';
    if (!text && (0, _roulette.inCasinoRoulette)()) text = 'Ставит на рулетке в казино';
    if (!text && (0, _dice.inDiceGame)()) text = 'Играет в кости';
    if (!text) text = 'Играет';
    if (text === currentSetText) return;
    currentSetText = text;
    mp.discord.update('Detroit', text);
  }
};
setInterval(() => {
  discord.update();
}, 1000);
},{"./user":"ggMw","./survival":"nroP","./casino/roulette":"YFCp","./casino/dice":"UScX"}],"oS9n":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drivePoints = void 0;
var _custom = require("./custom.event");
var _system = require("./system");
var _race = require("../../shared/race");
var _user = require("./user");
var _TextTimerBar = require("./bars/classes/TextTimerBar");
var _CheckpointTimerBar = require("./bars/classes/CheckpointTimerBar");
var _discord = require("./discord");
const player = mp.players.local;
let raceEditLabels = [];
let raceEditMarkers = [];
let raceEditBlips = [];
let raceEditName;
let raceEditId;
let raceEditCars = [];
let raceEditVeh;
let raceEditType;
let raceEditPos;
let raceEditStarts;
_custom.CustomEvent.registerServer('race:editmap', (id, name, pos, starts, type, cars) => {
  raceEditId = id;
  raceEditName = name;
  raceEditPos = pos;
  raceEditStarts = starts;
  raceEditType = type;
  raceEditCars = cars;
  reloadTestMarkers();
});
mp.events.add('raceedit:spawnCar', car => {
  if (raceEditVeh && mp.vehicles.exists(raceEditVeh)) raceEditVeh.destroy();
  raceEditVeh = mp.vehicles.new(mp.game.joaat(car), player.position, {
    heading: player.getHeading(),
    dimension: player.dimension
  });
  raceEditVeh.autosalon = true;
  setTimeout(() => {
    player.setIntoVehicle(raceEditVeh.handle, -1);
  }, 100);
});
mp.events.add('raceedit:newSpawn', () => {
  if (raceEditStarts.length >= _race.MAX_RACERS) return _user.user.notify(`Лимит точек спавна - ${_race.MAX_RACERS}`, 'error');
  let pos = player.vehicle ? player.vehicle.position : player.position;
  let heading = player.vehicle ? player.vehicle.getHeading() : player.getHeading();
  let item = {
    x: parseFloat(pos.x.toFixed(1)),
    y: parseFloat(pos.y.toFixed(1)),
    z: parseFloat(pos.z.toFixed(1)),
    h: heading
  };
  raceEditStarts.push(item);
  reloadTestMarkers();
});
mp.events.add('raceedit:newCheck', () => {
  if (raceEditPos.length >= _race.LIMIT_CHECKPOINTS) return _user.user.notify(`Лимит чекпоинтов - ${_race.LIMIT_CHECKPOINTS}`, 'error');
  let pos = player.vehicle ? player.vehicle.position : player.position;
  let heading = player.vehicle ? player.vehicle.getHeading() : player.getHeading();
  let item = {
    x: parseFloat(pos.x.toFixed(1)),
    y: parseFloat(pos.y.toFixed(1)),
    z: parseFloat(pos.z.toFixed(1)),
    h: heading
  };
  raceEditPos.push(item);
  reloadTestMarkers();
});
mp.events.add('raceedit:changeType', () => {
  raceEditType = raceEditType === "circle" ? "line" : "circle";
});
mp.events.add('raceedit:spawnDel', id => {
  raceEditStarts.splice(id, 1);
  reloadTestMarkers();
});
mp.events.add('raceedit:checkDel', id => {
  raceEditPos.splice(id, 1);
  reloadTestMarkers();
});
mp.events.add('raceedit:spawnTp', id => {
  const ent = player.vehicle ? player.vehicle : player;
  const crd = raceEditStarts[id];
  if (!crd) return;
  ent.setCoords(crd.x, crd.y, crd.z, true, true, true, false);
});
mp.events.add('raceedit:checkTp', id => {
  const ent = player.vehicle ? player.vehicle : player;
  const crd = raceEditPos[id];
  if (!crd) return;
  ent.setCoords(crd.x, crd.y, crd.z, true, true, true, false);
});
mp.events.add('raceedit:save', status => {
  exitEdit(status);
});
const exitEdit = status => {
  clearTestMarkers();
  if (raceEditVeh && mp.vehicles.exists(raceEditVeh)) raceEditVeh.destroy();
  raceEditVeh = null;
  if (!status) {
    raceEditId = null;
    return _custom.CustomEvent.triggerServer('raceedit:exit');
  }
  _custom.CustomEvent.triggerServer('raceedit:save', raceEditId, raceEditPos, raceEditStarts, raceEditType);
  raceEditId = null;
};
mp.events.add('playerDeath', () => {
  if (!raceEditId) return;
  _custom.CustomEvent.triggerCef('raceedit:close');
  exitEdit(false);
});
const clearTestMarkers = () => {
  raceEditLabels.map(item => {
    if (mp.labels.exists(item)) item.destroy();
  });
  raceEditLabels = [];
  raceEditMarkers.map(item => {
    if (mp.markers.exists(item)) item.destroy();
  });
  raceEditMarkers = [];
  raceEditBlips.map(item => {
    if (mp.blips.exists(item)) item.destroy();
  });
  raceEditBlips = [];
};
const reloadTestMarkers = () => {
  clearTestMarkers();
  raceEditStarts.map((item, index) => {
    raceEditLabels.push(mp.labels.new(`Стартовая позиция #${index}`, new mp.Vector3(item.x, item.y, item.z), {
      dimension: player.dimension
    }));
    raceEditMarkers.push(mp.markers.new(1, new mp.Vector3(item.x, item.y, item.z), 2, {
      color: [255, 0, 0, 50],
      dimension: player.dimension
    }));
    raceEditBlips.push(_system.system.createBlip(435, 1, new mp.Vector3(item.x, item.y, item.z), `Стартовая позиция ${index}`, player.dimension));
  });
  raceEditPos.map((item, index) => {
    raceEditLabels.push(mp.labels.new(index === raceEditPos.length - 1 ? `Финальный чекпоинт ${index}` : `Чекпоинт ${index}`, new mp.Vector3(item.x, item.y, item.z), {
      dimension: player.dimension
    }));
    raceEditMarkers.push(mp.markers.new(1, new mp.Vector3(item.x, item.y, item.z), 2, {
      color: [0, 255, 0, 50],
      dimension: player.dimension
    }));
    raceEditBlips.push(_system.system.createBlip(index === raceEditPos.length - 1 ? 38 : 1, 2, new mp.Vector3(item.x, item.y, item.z), index === raceEditPos.length - 1 ? `Финальный чекпоинт ${index}` : `Чекпоинт ${index}`, player.dimension));
  });
  _custom.CustomEvent.triggerCef('raceedit:open', raceEditId, raceEditName, raceEditPos.length, raceEditStarts.length, raceEditType, raceEditCars);
};
let raceCarId;
let racePoints = [];
let raceLaps;
_custom.CustomEvent.registerServer("race:load", (carId, points, laps) => {
  raceCarId = carId;
  racePoints = points;
  raceLaps = laps;
});
let checkpointBar;
_custom.CustomEvent.registerServer('race:starttimer', async () => {
  checkpointBar = new _CheckpointTimerBar.CheckpointTimerBar("Обратный отсчёт", 4);
  checkpointBar.color = 18;
  for (let i = 0; i < 3; i++) {
    mp.game.audio.playSoundFrontend(-1, "RACE_PLACED", "HUD_AWARDS", true);
    checkpointBar.setCheckpointState(i, _CheckpointTimerBar.CheckpointTimerBar.state.failed);
    await _system.system.sleep(1000);
  }
});
_custom.CustomEvent.registerServer("race:start", () => {
  _user.user.disableAllControlsSystem(false);
  if (checkpointBar && checkpointBar.exists) {
    checkpointBar.setAllCheckpointsState(_CheckpointTimerBar.CheckpointTimerBar.state.completed);
    setTimeout(() => {
      if (checkpointBar && checkpointBar.exists) {
        checkpointBar.destroy();
        checkpointBar = null;
      }
    }, 2000);
  }
  _discord.discord.status = "В гонке";
  drivePoints(raceCarId, racePoints, raceLaps).then(status => {
    _custom.CustomEvent.triggerServer('race:end', status);
    _discord.discord.status = null;
  });
});
_custom.CustomEvent.registerServer("race:test", (model, pos, start, laps) => {
  player.setCoords(start.x, start.y, start.z, true, true, true, false);
  if (raceEditVeh && mp.vehicles.exists(raceEditVeh)) raceEditVeh.destroy();
  raceEditVeh = mp.vehicles.new(mp.game.joaat(model), new mp.Vector3(start.x, start.y, start.z), {
    heading: start.h,
    dimension: player.dimension
  });
  raceEditVeh.autosalon = true;
  setTimeout(() => {
    player.setIntoVehicle(raceEditVeh.handle, -1);
    _user.user.disableAllControlsSystem(false);
  }, 1000);
  drivePoints(raceEditVeh.remoteId, pos, laps).then(res => {
    if (raceEditVeh && mp.vehicles.exists(raceEditVeh)) raceEditVeh.destroy();
    raceEditVeh = null;
    _custom.CustomEvent.triggerServer('raceedit:exit');
  });
});
const drivePoints = (vehicleid, checkpoints, laps = 1, checkSize = 4) => {
  return new Promise(async resolve => {
    const allChecksCount = checkpoints.length * laps;
    let checkBar = 1;
    let bar = new _TextTimerBar.TextTimerBar('Чекпоинт', checkBar + '/' + allChecksCount);
    let cdexitVeh = 10;
    let end = false;
    let player = mp.players.local;
    let check;
    let blip;
    let currentCheckID = 0;
    let checkBlip = 2;
    let checkBlipFinish = 4;
    let mapTimeBar;
    let mapLapBar;
    const clear = () => {
      if (bar && bar.exists) bar.destroy();
      if (mapTimeBar && mapTimeBar.exists) mapTimeBar.destroy();
      if (mapLapBar && mapLapBar.exists) mapLapBar.destroy();
    };
    if (laps > 1) {
      mapLapBar = new _TextTimerBar.TextTimerBar("Осталось кругов", laps.toString());
    }
    let interval = setInterval(() => {
      if (end) {
        cdexitVeh = 10;
        clearInterval(interval);
      } else if (mp.players.local.vehicle && mp.players.local.vehicle.remoteId == vehicleid) {
        if (cdexitVeh != 10 && mapTimeBar && mapTimeBar.exists) mapTimeBar.destroy();
        cdexitVeh = 10;
      } else {
        cdexitVeh--;
        if (mapTimeBar && mapTimeBar.exists) {
          mapTimeBar.text = _system.system.secondsToString(cdexitVeh + 1);
        } else {
          mapTimeBar = new _TextTimerBar.TextTimerBar("Вернитесь в ТС", _system.system.secondsToString(cdexitVeh + 1));
        }
        if (cdexitVeh == 0) {
          if (bar) bar.destroy();
          resolve(false);
          end = true;
          clearInterval(interval);
          clear();
        }
      }
    }, 1000);
    while (!end) {
      let checkdata = {
        x: _system.system.parseFloat(checkpoints[currentCheckID].x),
        y: _system.system.parseFloat(checkpoints[currentCheckID].y),
        z: _system.system.parseFloat(checkpoints[currentCheckID].z)
      };
      let checkdataNext = {
        x: _system.system.parseFloat(checkpoints[currentCheckID].x),
        y: _system.system.parseFloat(checkpoints[currentCheckID].y),
        z: _system.system.parseFloat(checkpoints[currentCheckID].z)
      };
      if (currentCheckID != checkpoints.length - 1) {
        checkdataNext = {
          x: _system.system.parseFloat(checkpoints[currentCheckID + 1].x),
          y: _system.system.parseFloat(checkpoints[currentCheckID + 1].y),
          z: _system.system.parseFloat(checkpoints[currentCheckID + 1].z)
        };
      }
      check = mp.checkpoints.new(currentCheckID == checkpoints.length - 1 && laps == 1 ? checkBlipFinish : checkBlip, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z - 1), checkSize + 0.0001, {
        direction: currentCheckID == checkpoints.length - 1 ? new mp.Vector3(0, 0, 75) : new mp.Vector3(checkdataNext.x, checkdataNext.y, checkdataNext.z),
        color: [255, 255, 0, 60],
        visible: true,
        dimension: player.dimension
      });
      blip = mp.blips.new(currentCheckID == checkpoints.length - 1 && laps == 1 ? 611 : 1, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z), {
        name: !checkdataNext && laps == 1 ? 'Финишная точка' : 'Контрольная точка',
        color: 5,
        shortRange: false,
        dimension: player.dimension
      });
      blip.setRoute(true);
      let reached = false;
      while (!reached) {
        let distance = mp.game.gameplay.getDistanceBetweenCoords(checkdata.x, checkdata.y, checkdata.z, player.position.x, player.position.y, player.position.z, false);
        if (distance < checkSize + 0.8) {
          if (player.vehicle && player.vehicle.remoteId == vehicleid) {
            reached = true;
            mp.game.audio.playSound(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false, 0, true);
          } else {
            await _system.system.sleep(10);
          }
        } else {
          await _system.system.sleep(10);
        }
        if (end) {
          if (blip) blip.destroy(), blip = null;
          if (check) check.destroy(), check = null;
          reached = true;
        }
      }
      if (blip) blip.destroy(), blip = null;
      if (check) check.destroy(), check = null;
      if (currentCheckID == checkpoints.length - 1) {
        if (laps > 1) {
          laps--;
          currentCheckID = 0;
          checkBar++;
          bar.text = checkBar + '/' + allChecksCount;
          if (mapLapBar && mapLapBar.exists) {
            mapLapBar.text = laps ? laps.toString() : 'Последний';
          }
        } else {
          end = true;
          clear();
          resolve(true);
        }
      } else {
        checkBar++;
        bar.text = checkBar + '/' + allChecksCount;
        currentCheckID++;
      }
    }
  });
};
exports.drivePoints = drivePoints;
},{"./custom.event":"py8h","./system":"pi2J","../../shared/race":"XmeB","./user":"ggMw","./bars/classes/TextTimerBar":"CjKg","./bars/classes/CheckpointTimerBar":"xe6u","./discord":"MPk7"}],"If03":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFisherLevelByExp = exports.getBestAvailabelFishByLevel = exports.RODS = exports.FishAnimTime = exports.FISH_PULLING_KEYS = exports.FISH_POS = exports.FISH_HELP_TEXT = exports.FISH_CATCH_CHANCE = exports.FISHES = exports.FISHER_LEVELS_EXP_TO_ACHIEVE = exports.FISHER_LEVEL = void 0;
const FISH_POS = exports.FISH_POS = [{
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: -3011.56,
    y: -1566.88,
    z: 7.89
  }],
  r: 200
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: -2142.46,
    y: 6012.10,
    z: 1.34
  }],
  r: 200
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 3737.39,
    y: -1355.64,
    z: 0.57
  }],
  r: 200
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 5711.55,
    y: 4335.23,
    z: 0.32
  }],
  r: 500,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 4111.53,
    y: 1330.25,
    z: 2.15
  }],
  r: 500,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 713.55,
    y: 4092.29,
    z: 33.73,
    h: 180
  }, {
    x: 711.50,
    y: 4098.92,
    z: 34.79,
    h: 95
  }, {
    x: 711.49,
    y: 4102.94,
    z: 34.79,
    h: 88
  }],
  r: 4,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 1340.74,
    y: 4225.07,
    z: 32.92,
    h: 259
  }, {
    x: 1307.48,
    y: 4230.05,
    z: 32.92,
    h: 197
  }, {
    x: 1314.63,
    y: 4228.90,
    z: 32.92,
    h: 167
  }, {
    x: 1321.88,
    y: 4227.48,
    z: 32.92,
    h: 168
  }, {
    x: 1329.04,
    y: 4226.06,
    z: 32.92,
    h: 172
  }, {
    x: 1336.22,
    y: 4224.81,
    z: 32.92,
    h: 170
  }, {
    x: 1335.87,
    y: 4227.85,
    z: 32.92,
    h: 357
  }],
  r: 2,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: -3416.11,
    y: 951.86,
    z: 7.35,
    h: 182
  }, {
    x: -3428.34,
    y: 977.75,
    z: 7.35,
    h: 88
  }, {
    x: -3428.34,
    y: 970.21,
    z: 7.35,
    h: 77
  }, {
    x: -3428.34,
    y: 962.00,
    z: 7.35,
    h: 93
  }, {
    x: -3428.34,
    y: 954.82,
    z: 7.35,
    h: 92
  }, {
    x: -3422.40,
    y: 951.81,
    z: 7.35,
    h: 181
  }],
  r: 2,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: -1823.14,
    y: -1266.26,
    z: 7.62,
    h: 230
  }, {
    x: -1863.00,
    y: -1234.52,
    z: 7.62,
    h: 53
  }, {
    x: -1862.89,
    y: -1239.84,
    z: 7.62,
    h: 121
  }, {
    x: -1857.89,
    y: -1244.03,
    z: 7.62,
    h: 140
  }, {
    x: -1852.83,
    y: -1248.27,
    z: 7.62,
    h: 155
  }, {
    x: -1846.80,
    y: -1253.46,
    z: 7.62,
    h: 136
  }, {
    x: -1840.41,
    y: -1258.69,
    z: 7.62,
    h: 143
  }, {
    x: -1840.41,
    y: -1258.69,
    z: 7.62,
    h: 143
  }, {
    x: -1834.39,
    y: -1263.74,
    z: 7.62,
    h: 141
  }, {
    x: -1829.51,
    y: -1267.73,
    z: 7.62,
    h: 145
  }],
  r: 2,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: -69.07,
    y: -2779.93,
    z: 5.08,
    h: 189
  }, {
    x: -95.70,
    y: -2774.02,
    z: 5.08,
    h: 180
  }, {
    x: -92.70,
    y: -2774.21,
    z: 5.08,
    h: 176
  }, {
    x: -97.40,
    y: -2769.51,
    z: 5.08,
    h: 84
  }, {
    x: -97.28,
    y: -2764.29,
    z: 5.08,
    h: 99
  }, {
    x: -97.31,
    y: -2761.66,
    z: 5.08,
    h: 92
  }, {
    x: -69.90,
    y: -2776.86,
    z: 5.08,
    h: 118
  }, {
    x: -42.03,
    y: -2777.92,
    z: 0.62,
    h: 183
  }, {
    x: -18.90,
    y: -2763.88,
    z: 5.09,
    h: 183
  }, {
    x: 16.51,
    y: -2801.71,
    z: 1.53,
    h: 178
  }, {
    x: 11.00,
    y: -2801.53,
    z: 1.53,
    h: 131
  }, {
    x: 23.85,
    y: -2807.71,
    z: 4.70,
    h: 175
  }, {
    x: 46.01,
    y: -2794.05,
    z: 4.72,
    h: 179
  }],
  r: 2,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 105.81,
    y: -3324.24,
    z: 5.02,
    h: 91
  }, {
    x: 105.84,
    y: -3309.31,
    z: 5.07,
    h: 102
  }, {
    x: 106.17,
    y: -3303.51,
    z: 5.35,
    h: 93
  }, {
    x: 105.38,
    y: -3292.67,
    z: 5.05,
    h: 90
  }, {
    x: 106.09,
    y: -3275.29,
    z: 5.00,
    h: 94
  }, {
    x: 105.30,
    y: -3260.24,
    z: 5.06,
    h: 91
  }, {
    x: 105.94,
    y: -3249.36,
    z: 5.00,
    h: 92
  }, {
    x: 106.09,
    y: -3227.07,
    z: 5.00,
    h: 94
  }, {
    x: 106.10,
    y: -3220.55,
    z: 5.00,
    h: 87
  }, {
    x: 105.36,
    y: -3205.92,
    z: 5.02,
    h: 92
  }, {
    x: 106.28,
    y: -3195.47,
    z: 5.00,
    h: 89
  }, {
    x: 105.98,
    y: -3184.21,
    z: 5.00,
    h: 93
  }, {
    x: 106.10,
    y: -3177.02,
    z: 5.00,
    h: 85
  }, {
    x: 106.17,
    y: -3168.97,
    z: 5.00,
    h: 92
  }, {
    x: 106.37,
    y: -3156.50,
    z: 5.00,
    h: 94
  }, {
    x: 106.05,
    y: -3151.47,
    z: 5.00,
    h: 94
  }, {
    x: 106.25,
    y: -3145.13,
    z: 5.00,
    h: 87
  }, {
    x: 106.22,
    y: -3140.42,
    z: 5.00,
    h: 104
  }, {
    x: 106.39,
    y: -3133.16,
    z: 5.00,
    h: 84
  }, {
    x: 106.50,
    y: -3128.43,
    z: 5.00,
    h: 96
  }, {
    x: 106.77,
    y: -3124.36,
    z: 5.00,
    h: 90
  }, {
    x: 106.62,
    y: -3113.62,
    z: 5.00,
    h: 93
  }, {
    x: 106.57,
    y: -3106.63,
    z: 5.00,
    h: 72
  }, {
    x: 106.67,
    y: -3100.68,
    z: 5.00,
    h: 92
  }, {
    x: 106.55,
    y: -3092.25,
    z: 5.00,
    h: 96
  }, {
    x: 106.45,
    y: -3086.52,
    z: 5.00,
    h: 93
  }, {
    x: 106.32,
    y: -3075.99,
    z: 5.00,
    h: 97
  }, {
    x: 106.53,
    y: -3069.42,
    z: 5.00,
    h: 100
  }, {
    x: 106.25,
    y: -3063.44,
    z: 5.00,
    h: 93
  }, {
    x: 106.40,
    y: -3052.31,
    z: 5.00,
    h: 88
  }, {
    x: 106.51,
    y: -3043.70,
    z: 5.00,
    h: 91
  }, {
    x: 106.45,
    y: -3036.91,
    z: 5.00,
    h: 96
  }, {
    x: 106.66,
    y: -3031.83,
    z: 5.00,
    h: 86
  }, {
    x: 106.56,
    y: -3027.08,
    z: 5.00,
    h: 89
  }, {
    x: 106.81,
    y: -3021.70,
    z: 5.00,
    h: 90
  }, {
    x: 106.49,
    y: -3014.59,
    z: 5.00,
    h: 89
  }],
  r: 2,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 467.74,
    y: -3362.82,
    z: 5.07,
    h: 90
  }, {
    x: 467.72,
    y: -3368.88,
    z: 5.07,
    h: 86
  }, {
    x: 467.58,
    y: -3375.53,
    z: 5.07,
    h: 88
  }, {
    x: 467.71,
    y: -3384.09,
    z: 5.07,
    h: 90
  }, {
    x: 467.87,
    y: -3389.94,
    z: 5.07,
    h: 179
  }, {
    x: 480.62,
    y: -3390.11,
    z: 5.07,
    h: 174
  }, {
    x: 487.32,
    y: -3390.12,
    z: 5.07,
    h: 177
  }, {
    x: 492.02,
    y: -3390.07,
    z: 5.07,
    h: 186
  }, {
    x: 504.46,
    y: -3389.96,
    z: 5.07,
    h: 182
  }, {
    x: 510.54,
    y: -3389.92,
    z: 5.07,
    h: 225
  }, {
    x: 510.87,
    y: -3384.66,
    z: 5.07,
    h: 279
  }, {
    x: 510.68,
    y: -3380.40,
    z: 5.07,
    h: 268
  }, {
    x: 510.58,
    y: -3375.23,
    z: 5.07,
    h: 270
  }],
  r: 2,
  needLicense: true
}, {
  name: "Зона для рыбалки",
  blip: 68,
  pos: [{
    x: 1298.30,
    y: -3349.26,
    z: 4.90,
    h: 269
  }, {
    x: 1298.25,
    y: -3340.50,
    z: 4.90,
    h: 272
  }, {
    x: 1298.20,
    y: -3336.00,
    z: 4.90,
    h: 265
  }, {
    x: 1298.18,
    y: -3330.49,
    z: 4.91,
    h: 275
  }, {
    x: 1299.41,
    y: -3325.88,
    z: 5.00,
    h: 265
  }, {
    x: 1298.06,
    y: -3321.04,
    z: 4.91,
    h: 277
  }, {
    x: 1298.11,
    y: -3315.77,
    z: 4.91,
    h: 266
  }, {
    x: 1298.18,
    y: -3311.16,
    z: 4.91,
    h: 271
  }, {
    x: 1298.15,
    y: -3305.59,
    z: 4.91,
    h: 268
  }, {
    x: 1298.44,
    y: -3299.24,
    z: 4.97,
    h: 263
  }, {
    x: 1298.96,
    y: -3293.08,
    z: 5.00,
    h: 281
  }, {
    x: 1298.26,
    y: -3287.53,
    z: 4.91,
    h: 271
  }, {
    x: 1298.23,
    y: -3280.98,
    z: 4.91,
    h: 288
  }, {
    x: 1298.23,
    y: -3275.71,
    z: 4.91,
    h: 280
  }, {
    x: 1298.29,
    y: -3270.64,
    z: 4.91,
    h: 271
  }, {
    x: 1298.31,
    y: -3265.06,
    z: 4.91,
    h: 277
  }, {
    x: 1299.33,
    y: -3260.65,
    z: 5.00,
    h: 253
  }, {
    x: 1298.20,
    y: -3255.64,
    z: 4.91,
    h: 272
  }, {
    x: 1298.29,
    y: -3250.29,
    z: 4.91,
    h: 267
  }, {
    x: 1298.23,
    y: -3243.75,
    z: 4.91,
    h: 273
  }, {
    x: 1298.22,
    y: -3237.85,
    z: 4.91,
    h: 266
  }, {
    x: 1298.19,
    y: -3231.88,
    z: 4.91,
    h: 269
  }, {
    x: 1299.04,
    y: -3227.64,
    z: 4.97,
    h: 255
  }, {
    x: 1298.26,
    y: -3221.85,
    z: 4.91,
    h: 268
  }, {
    x: 1298.11,
    y: -3216.03,
    z: 4.92,
    h: 276
  }, {
    x: 1298.21,
    y: -3210.66,
    z: 4.91,
    h: 280
  }, {
    x: 1298.18,
    y: -3202.06,
    z: 4.91,
    h: 269
  }, {
    x: 1298.95,
    y: -3195.34,
    z: 4.97,
    h: 272
  }, {
    x: 1298.29,
    y: -3187.66,
    z: 4.91,
    h: 266
  }, {
    x: 1298.31,
    y: -3182.42,
    z: 4.91,
    h: 267
  }, {
    x: 1298.27,
    y: -3174.84,
    z: 4.91,
    h: 270
  }, {
    x: 1298.31,
    y: -3168.79,
    z: 4.91,
    h: 261
  }, {
    x: 1299.01,
    y: -3162.46,
    z: 4.97,
    h: 272
  }, {
    x: 1298.22,
    y: -3154.29,
    z: 4.91,
    h: 262
  }, {
    x: 1298.31,
    y: -3147.89,
    z: 4.91,
    h: 270
  }, {
    x: 1298.33,
    y: -3140.60,
    z: 4.91,
    h: 263
  }, {
    x: 1299.50,
    y: -3130.19,
    z: 4.97,
    h: 272
  }, {
    x: 1298.13,
    y: -3124.80,
    z: 4.91,
    h: 278
  }, {
    x: 1298.20,
    y: -3119.64,
    z: 4.91,
    h: 281
  }, {
    x: 1298.26,
    y: -3115.06,
    z: 4.93,
    h: 276
  }, {
    x: 1298.08,
    y: -3109.54,
    z: 4.93,
    h: 276
  }, {
    x: 1298.32,
    y: -3104.64,
    z: 4.91,
    h: 275
  }, {
    x: 1298.41,
    y: -3098.86,
    z: 4.91,
    h: 268
  }, {
    x: 1298.57,
    y: -3091.27,
    z: 4.91,
    h: 269
  }, {
    x: 1298.48,
    y: -3086.30,
    z: 4.91,
    h: 268
  }, {
    x: 1298.45,
    y: -3081.02,
    z: 4.91,
    h: 272
  }, {
    x: 1299.50,
    y: -3076.53,
    z: 4.96,
    h: 269
  }, {
    x: 1298.44,
    y: -3071.56,
    z: 4.91,
    h: 275
  }, {
    x: 1298.53,
    y: -3062.49,
    z: 4.92,
    h: 318
  }, {
    x: 1292.47,
    y: -3061.32,
    z: 4.97,
    h: 1
  }],
  r: 2,
  needLicense: true
}];
const FISH_HELP_TEXT = exports.FISH_HELP_TEXT = `В данной зоне можно ловить рыбу`;
const FISH_CATCH_CHANCE = exports.FISH_CATCH_CHANCE = 75;
var FISHER_LEVEL;
(function (FISHER_LEVEL) {
  FISHER_LEVEL[FISHER_LEVEL["First"] = 1] = "First";
  FISHER_LEVEL[FISHER_LEVEL["Second"] = 2] = "Second";
  FISHER_LEVEL[FISHER_LEVEL["Third"] = 3] = "Third";
  FISHER_LEVEL[FISHER_LEVEL["Fourth"] = 4] = "Fourth";
  FISHER_LEVEL[FISHER_LEVEL["Fifeth"] = 5] = "Fifeth";
})(FISHER_LEVEL || (exports.FISHER_LEVEL = FISHER_LEVEL = {}));
const FISHER_LEVELS_EXP_TO_ACHIEVE = exports.FISHER_LEVELS_EXP_TO_ACHIEVE = [[FISHER_LEVEL.First, 0], [FISHER_LEVEL.Second, 500], [FISHER_LEVEL.Third, 1500], [FISHER_LEVEL.Fourth, 5000], [FISHER_LEVEL.Fifeth, 10000]];
const FISHES = exports.FISHES = [{
  itemId: 9210,
  expPerCatch: 1,
  catchChances: new Map([[FISHER_LEVEL.First, 60], [FISHER_LEVEL.Second, 50], [FISHER_LEVEL.Third, 10], [FISHER_LEVEL.Fourth, 0], [FISHER_LEVEL.Fifeth, 0]])
}, {
  itemId: 9212,
  expPerCatch: 2,
  catchChances: new Map([[FISHER_LEVEL.First, 10], [FISHER_LEVEL.Second, 15], [FISHER_LEVEL.Third, 20], [FISHER_LEVEL.Fourth, 20], [FISHER_LEVEL.Fifeth, 20]])
}, {
  itemId: 9213,
  expPerCatch: 3,
  catchChances: new Map([[FISHER_LEVEL.First, 5], [FISHER_LEVEL.Second, 10], [FISHER_LEVEL.Third, 15], [FISHER_LEVEL.Fourth, 20], [FISHER_LEVEL.Fifeth, 20]])
}, {
  itemId: 9214,
  expPerCatch: 4,
  catchChances: new Map([[FISHER_LEVEL.First, 1], [FISHER_LEVEL.Second, 5], [FISHER_LEVEL.Third, 10], [FISHER_LEVEL.Fourth, 15], [FISHER_LEVEL.Fifeth, 30]])
}, {
  itemId: 9211,
  expPerCatch: 5,
  catchChances: new Map([[FISHER_LEVEL.First, 0], [FISHER_LEVEL.Second, 1], [FISHER_LEVEL.Third, 5], [FISHER_LEVEL.Fourth, 15], [FISHER_LEVEL.Fifeth, 30]])
}, {
  itemId: 823,
  expPerCatch: 6,
  catchChances: new Map([[FISHER_LEVEL.First, 0], [FISHER_LEVEL.Second, 0], [FISHER_LEVEL.Third, 1], [FISHER_LEVEL.Fourth, 10], [FISHER_LEVEL.Fifeth, 25]])
}, {
  itemId: 819,
  expPerCatch: 7,
  catchChances: new Map([[FISHER_LEVEL.First, 0], [FISHER_LEVEL.Second, 0], [FISHER_LEVEL.Third, 1], [FISHER_LEVEL.Fourth, 10], [FISHER_LEVEL.Fifeth, 20]])
}, {
  itemId: 821,
  expPerCatch: 8,
  catchChances: new Map([[FISHER_LEVEL.First, 0], [FISHER_LEVEL.Second, 0], [FISHER_LEVEL.Third, 1], [FISHER_LEVEL.Fourth, 10], [FISHER_LEVEL.Fifeth, 15]])
}, {
  itemId: 822,
  expPerCatch: 9,
  catchChances: new Map([[FISHER_LEVEL.First, 0], [FISHER_LEVEL.Second, 0], [FISHER_LEVEL.Third, 0], [FISHER_LEVEL.Fourth, 10], [FISHER_LEVEL.Fifeth, 13]])
}, {
  itemId: 820,
  expPerCatch: 10,
  catchChances: new Map([[FISHER_LEVEL.First, 0], [FISHER_LEVEL.Second, 0], [FISHER_LEVEL.Third, 0], [FISHER_LEVEL.Fourth, 5], [FISHER_LEVEL.Fifeth, 7]])
}];
const RODS = exports.RODS = [{
  itemId: 855,
  minLevelToBuy: 0,
  bestFishChanceIncrement: 0
}, {
  itemId: 9200,
  minLevelToBuy: 2,
  bestFishChanceIncrement: 5
}, {
  itemId: 9201,
  minLevelToBuy: 4,
  bestFishChanceIncrement: 10
}];
const FishAnimTime = exports.FishAnimTime = 30;
const getFisherLevelByExp = fisherExp => {
  if (fisherExp == 0) return FISHER_LEVELS_EXP_TO_ACHIEVE[0][0];
  const levelToFind = FISHER_LEVELS_EXP_TO_ACHIEVE[FISHER_LEVELS_EXP_TO_ACHIEVE.findIndex(level => level[1] >= fisherExp) - 1];
  return !levelToFind || isNaN(levelToFind[0]) ? FISHER_LEVELS_EXP_TO_ACHIEVE[FISHER_LEVELS_EXP_TO_ACHIEVE.length - 1][0] : levelToFind[0];
};
exports.getFisherLevelByExp = getFisherLevelByExp;
const getBestAvailabelFishByLevel = level => {
  return FISHES.filter(f => f.catchChances.get(level) != 0).sort((a, b) => {
    return a.expPerCatch - b.expPerCatch;
  })[0];
};
exports.getBestAvailabelFishByLevel = getBestAvailabelFishByLevel;
const FISH_PULLING_KEYS = exports.FISH_PULLING_KEYS = [[{
  keyCode: 65,
  keyName: "A"
}, {
  keyCode: 68,
  keyName: "D"
}], [{
  keyCode: 87,
  keyName: "W"
}, {
  keyCode: 68,
  keyName: "D"
}], [{
  keyCode: 65,
  keyName: "A"
}, {
  keyCode: 88,
  keyName: "X"
}], [{
  keyCode: 83,
  keyName: "S"
}, {
  keyCode: 68,
  keyName: "D"
}], [{
  keyCode: 83,
  keyName: "S"
}, {
  keyCode: 88,
  keyName: "X"
}]];
},{}],"DueU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inFishPosStatus = void 0;
var _fish = require("../../shared/fish");
var _system = require("./system");
var _anim = require("./anim");
var _custom = require("./custom.event");
var _user = require("./user");
var _attach = require("./attach");
const player = mp.players.local;
let IsFishing = false;
let BarAnimation = 0;
let RunCodeOnly1Time = true;
let lastThrowLength = 0;
_attach.AttachSystem.registerPosition("fishingrod", "prop_fishing_rod_01", 60309, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
const stopFishing = () => {
  _custom.CustomEvent.triggerCef('fish:stats:disable');
  _user.user.stopAnim();
  _custom.CustomEvent.triggerServer('fish:cancel');
  _attach.AttachSystem.removeLocal('fishingrod');
  lastThrowLength = 0;
};
_custom.CustomEvent.registerServer('rod:use', (level, exp, stats) => {
  if (!inFishPosStatus()) {
    stopFishing();
    _user.user.notify('Вы должны находиться на месте ловли рыбы', 'error');
    return;
  }
  _attach.AttachSystem.removeLocal('fishingrod');
  _attach.AttachSystem.addLocal('fishingrod');
  _custom.CustomEvent.callServer('fish:haveAccess', FISH_POS_TARGET).then(cfg => {
    if (!cfg || !cfg.rod) {
      _user.user.notify('У вас нет удочки в руках', "error");
      stopFishing();
      return;
    }
    if (!cfg || !cfg.license) {
      _user.user.notify("В данном месте требуется лицензия для ловли рыбы", "error");
      stopFishing();
      return;
    }
    if (typeof inFishPos.h === "number") player.setHeading(inFishPos.h);
    startFishingFunc(FISH_POS_TARGET);
    _custom.CustomEvent.triggerCef('fish:stats:enable', level, exp, stats);
  });
});
mp.events.add('fishing:catching:done', async result => {
  if (result >= 100) {
    _user.user.notify('Вы не успели подсечь леску, рыба сорвалась', 'warning');
    stopFishing();
  } else {
    const fish = await _custom.CustomEvent.callServer('fish:catch:start', FISH_POS_TARGET, lastThrowLength);
    if (!fish) return;
    _custom.CustomEvent.triggerCef('fish:pulling:start', fish, _system.system.randomArrayElement(_fish.FISH_PULLING_KEYS));
  }
});
mp.events.add('fishing:pulling:done', (completed, fishId) => {
  _user.user.stopAnim();
  _attach.AttachSystem.removeLocal('fishingrod');
  _custom.CustomEvent.triggerCef('fish:stats:disable');
  if (completed) {
    _custom.CustomEvent.triggerServer('fish:catch:done', fishId);
  } else {
    stopFishing();
  }
});
mp.events.add('fishing:throwing:done', throwLength => {
  (0, _anim.playAnimationWithResult)(['amb@world_human_stand_fishing@base', 'base'], _system.system.getRandomInt(5, 15), 'Ожидаем клёва').then(async status => {
    if (status) {
      (0, _anim.playAnimsEntity)(player, [['amb@world_human_stand_fishing@idle_a', 'idle_c', 1]], false, true);
      _custom.CustomEvent.triggerCef('fish:catching:start');
      lastThrowLength = throwLength;
    } else {
      stopFishing();
    }
  });
});
const startFishingFunc = async FISH_POS_TARGET => {
  if (player.vehicle) return;
  if (player.isSwimming()) return;
  IsFishing = true;
  RunCodeOnly1Time = true;
  BarAnimation = 0;
  (0, _anim.playAnimsEntity)(player, [['amb@world_human_stand_fishing@idle_a', 'idle_b', 1]], false, true);
  _custom.CustomEvent.triggerCef('fish:throwing:start');
};
_fish.FISH_POS.map(item => {
  if (item.blip) {
    item.pos.map(pos => {
      if (item.r <= 3) {
        mp.markers.new(1, new mp.Vector3(pos.x, pos.y, pos.z), 1, {
          color: [100, 203, 63, 100],
          dimension: -1
        });
      }
    });
    _system.system.createBlip(item.blip, 1, item.pos.length >= 2 ? _system.system.middlePoint3d(...item.pos) : item.pos[0], item.name);
  }
});
let inFishPos;
let FISH_POS_TARGET;
const inFishPosStatus = () => {
  return !!inFishPos;
};
exports.inFishPosStatus = inFishPosStatus;
setInterval(() => {
  inFishPos = null;
  FISH_POS_TARGET = 0;
  _fish.FISH_POS.map((item, itemid) => {
    if (inFishPos) return;
    let posInd = _system.system.isPointInPointsIndex(player.position, item.pos, item.r);
    if (posInd > -1) {
      inFishPos = item.pos[posInd];
      FISH_POS_TARGET = itemid;
    }
  });
}, 500);
},{"../../shared/fish":"If03","./system":"pi2J","./anim":"stJJ","./custom.event":"py8h","./user":"ggMw","./attach":"sXtZ"}],"OnFn":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _user = require("./user");
var _system = require("./system");
var _gr = require("../../shared/gr6");
let blips = new Map();
const name = _gr.GR6_GPS_TASK_NAME;
const clearBlips = () => {
  blips.forEach(item => {
    if (mp.blips.exists(item)) item.destroy();
  });
  blips = new Map();
};
_custom.CustomEvent.registerServer('gr6:tasks:clear', () => {
  _user.user.clearWaypointHistoryByName(name);
  clearBlips();
});
_custom.CustomEvent.registerServer('gr6:tasks:setClear', index => {
  _user.user.clearWaypointHistoryByName(`${name} #${index}`);
  const item = blips.get(index);
  if (item && mp.blips.exists(item)) item.destroy();
  blips.delete(index);
});
_custom.CustomEvent.registerServer('gr6:tasks', async pos => {
  _user.user.clearWaypointHistoryByName(name);
  clearBlips();
  await _system.system.sleep(500);
  if (pos.length === 0) return _user.user.notify("К сожалению сейчас нет заданий. Подождите", "error");
  _user.user.notify(`Вы получили ${pos.length} заданий. Адреса доступны в вашем навигаторе. После сбора всех точек возвращайтесь сюда и сдавайте средства`);
  pos.map(item => {
    blips.set(item.id, _system.system.createBlip(1, 1, new mp.Vector3(item.x, item.y, item.z), `Задание Gruppe Sechs #${item.id}`, 0, false));
    _user.user.addWaypointHistory(item.x, item.y, item.z, `${name} #${item.id}`);
  });
});
},{"./custom.event":"py8h","./user":"ggMw","./system":"pi2J","../../shared/gr6":"rOsx"}],"dHF7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TELEPORT_CONFIG = exports.HOSPITAL_TELEPORT_DIMENSION = exports.CASINO_TELEPORT_NAME = void 0;
var _main = require("./casino/main");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const CASINO_TELEPORT_NAME = exports.CASINO_TELEPORT_NAME = 'Казино';
const HOSPITAL_TELEPORT_DIMENSION = exports.HOSPITAL_TELEPORT_DIMENSION = 112233;
const TELEPORT_CONFIG = exports.TELEPORT_CONFIG = [{
  name: 'Лифт Army',
  points: [{
    name: "Лифт Army",
    x: -2360.89,
    y: 3249.38,
    z: 31.81,
    h: 325,
    d: 0
  }, {
    name: "Лифт Army",
    x: -2360.76,
    y: 3249.41,
    z: 91.90,
    h: 328,
    d: 0
  }],
  onenter: true,
  fraction: 4
}, {
  name: 'Тюрьма',
  points: [{
    name: "Вход",
    x: 1846.56,
    y: 2585.82,
    z: 44.67,
    h: 272,
    d: 0
  }, {
    name: "Выход",
    x: 1775.23,
    y: 2552.15,
    z: 44.56,
    h: 91,
    d: 0
  }],
  onenter: true,
  fraction: 7
}, {
  name: 'Гаражи',
  points: [{
    name: "1 этаж",
    x: 838.89,
    y: -1311.06,
    z: -84.71,
    h: 179,
    d: -1
  }, {
    name: "2 этаж",
    x: 843.53,
    y: -2049.03,
    z: -84.71,
    h: 179,
    d: -1
  }, {
    name: "3 этаж",
    x: 1649.59,
    y: -1305.16,
    z: -84.71,
    h: 359,
    d: -1
  }, {
    name: "4 этаж",
    x: -193.68,
    y: -1321.40,
    z: -84.71,
    h: 349,
    d: -1
  }],
  onenter: true
}, {
  name: CASINO_TELEPORT_NAME,
  points: [_objectSpread(_objectSpread({
    name: "Выход из казино"
  }, _main.CASINO_ENTER), {}, {
    d: 0
  }), {
    name: "Вход в казино",
    x: 1089.63,
    y: 206.54,
    z: -50.00,
    h: 338,
    d: _main.CASINO_MAIN_DIMENSION
  }],
  onenterpress: true
}, {
  name: 'Лифт',
  points: [{
    name: "3й этаж",
    x: 2504.50,
    y: -433.22,
    z: 98.21,
    h: 316,
    d: 0
  }, {
    name: "4й этаж",
    x: 2504.42,
    y: -433.18,
    z: 106.01,
    h: 312,
    d: 0
  }, {
    name: "4й этаж",
    x: 2497.45,
    y: -349.18,
    z: 104.79,
    h: 313,
    d: 0
  }, {
    name: "Подвал",
    x: 2491.27,
    y: -392.06,
    z: 86.81,
    h: 44,
    d: 0
  }, {
    name: "Крыша",
    x: 2509.84,
    y: -432.72,
    z: 117.33,
    h: 296,
    d: 0
  }],
  onenter: true,
  fraction: 3
}, {
  name: 'Лифт',
  points: [{
    name: "Первый этаж",
    x: 2497.47,
    y: -348.99,
    z: 93.19,
    h: 311,
    d: 0
  }, {
    name: "3й этаж",
    x: 2494.85,
    y: -346.96,
    z: 100.99,
    h: 311,
    d: 0
  }, {
    name: "4й этаж",
    x: 2495.01,
    y: -346.82,
    z: 104.79,
    h: 333,
    d: 0
  }, {
    name: "Подвал",
    x: 2491.27,
    y: -392.06,
    z: 86.81,
    h: 44,
    d: 0
  }, {
    name: "Крыша",
    x: 2505.44,
    y: -340.60,
    z: 117.12,
    h: 168,
    d: 0
  }],
  onenter: true,
  fraction: 3
}, {
  name: 'Лифт',
  points: [{
    name: "Первый этаж",
    x: 2501.93,
    y: -339.90,
    z: 100.99,
    h: 136,
    d: 0
  }, {
    name: "4й этаж",
    x: 2501.67,
    y: -340.05,
    z: 104.79,
    h: 134,
    d: 0
  }, {
    name: "Подвал",
    x: 2491.27,
    y: -392.06,
    z: 86.81,
    h: 44,
    d: 0
  }, {
    name: "Крыша",
    x: 2505.44,
    y: -340.60,
    z: 117.12,
    h: 168,
    d: 0
  }],
  onenter: true,
  fraction: 3
}, {
  name: 'Лифт',
  points: [{
    name: "Первый этаж",
    x: 2502.01,
    y: -339.73,
    z: 93.19,
    h: 133,
    d: 0
  }, {
    name: "3й этаж",
    x: 2504.40,
    y: -342.22,
    z: 100.99,
    h: 129,
    d: 0
  }, {
    name: "4й этаж",
    x: 2504.14,
    y: -342.40,
    z: 104.79,
    h: 136,
    d: 0
  }, {
    name: "Подвал",
    x: 2491.27,
    y: -392.06,
    z: 86.81,
    h: 44,
    d: 0
  }, {
    name: "Крыша",
    x: 2505.44,
    y: -340.60,
    z: 117.12,
    h: 168,
    d: 0
  }],
  onenter: true,
  fraction: 3
}, {
  name: 'Лифт',
  points: [{
    name: "Первый этаж",
    x: 2504.55,
    y: -342.13,
    z: 93.19,
    h: 137,
    d: 0
  }, {
    name: "3й этаж",
    x: 2497.49,
    y: -349.05,
    z: 100.99,
    h: 310,
    d: 0
  }, {
    name: "4й этаж",
    x: 2497.45,
    y: -349.18,
    z: 104.79,
    h: 313,
    d: 0
  }, {
    name: "Подвал",
    x: 2491.27,
    y: -392.06,
    z: 86.81,
    h: 44,
    d: 0
  }, {
    name: "Крыша",
    x: 2505.44,
    y: -340.60,
    z: 117.12,
    h: 168,
    d: 0
  }],
  onenter: true,
  fraction: 3
}, {
  name: 'Лифт',
  points: [{
    name: "Первый этаж",
    x: -590.36,
    y: -938.31,
    z: 22.97,
    h: 357,
    d: 0
  }, {
    name: "2й этаж",
    x: -590.34,
    y: -938.39,
    z: 27.28,
    h: 351,
    d: 0
  }, {
    name: "3й этаж",
    x: -590.29,
    y: -938.41,
    z: 31.62,
    h: 351,
    d: 0
  }],
  onenter: true,
  fraction: 5
}, {
  name: 'Лифт',
  points: [{
    name: "Первый этаж",
    x: -586.18,
    y: -938.64,
    z: 22.96,
    h: 358,
    d: 0
  }, {
    name: "2й этаж",
    x: -586.10,
    y: -938.23,
    z: 27.28,
    h: 355,
    d: 0
  }, {
    name: "3й этаж",
    x: -586.25,
    y: -938.48,
    z: 31.62,
    h: 356,
    d: 0
  }],
  onenter: true,
  fraction: 5
}, {
  name: 'Лифт',
  points: [{
    name: "Второй этаж",
    x: -564.61,
    y: -178.61,
    z: 41.17,
    h: 208,
    d: 0
  }, {
    name: "Башня",
    x: -558.15,
    y: -191.88,
    z: 69.07,
    h: 302,
    d: 0
  }],
  onenter: true,
  fraction: 1
}, {
  name: 'Лифт',
  points: [{
    name: "Гараж",
    x: 461.61,
    y: -981.54,
    z: 24.81,
    h: 89,
    d: 0
  }, {
    name: "Первый этаж",
    x: 463.35,
    y: -981.57,
    z: 29.79,
    h: 90,
    d: 0
  }, {
    name: "Второй этаж",
    x: 463.40,
    y: -981.72,
    z: 34.78,
    h: 102,
    d: 0
  }, {
    name: "Крыша",
    x: 462.60,
    y: -983.88,
    z: 42.79,
    h: 83,
    d: 0
  }, {
    name: "Третий этаж",
    x: 466.02,
    y: -981.57,
    z: 39.78,
    h: 83,
    d: 0
  }],
  onenter: true,
  fraction: 2
}, {
  name: 'Лифт больница',
  points: [{
    name: "Главный вход",
    x: 309.69,
    y: -569.07,
    z: 42.36,
    h: 75,
    d: 0
  }, {
    name: "Палаты",
    x: 315.18,
    y: -580.23,
    z: 86.03,
    h: 159,
    d: 0
  },, {
    name: "Крыша",
    x: 338.97,
    y: -584.90,
    z: 73.27,
    h: 252,
    d: 0
  }, {
    name: "Первый этаж",
    x: 347.93,
    y: -580.64,
    z: 27.80,
    h: 154,
    d: 0
  }],
  onenter: true
}];
},{"./casino/main":"FJpA"}],"UgKs":[function(require,module,exports) {
"use strict";

var _teleport = require("../../shared/teleport.system");
var _checkpoints = require("./checkpoints");
var _custom = require("./custom.event");
var _menu = require("./menu");
var _system = require("./system");
var _user = require("./user");
var _anim = require("./anim");
_teleport.TELEPORT_CONFIG.map((item, confid) => {
  item.points.map((q, index) => {
    const pos = new mp.Vector3(q.x, q.y, q.z);
    _checkpoints.colshapes.new(pos, item.name, async player => {
      if (item.oneway && index) return;
      if (item.fraction) {
        if (typeof item.fraction === "number" && item.fraction !== _user.user.fraction) return _user.user.notify("У вас нет доступа", "error");else if (item.fraction === "gang" && !_user.user.is_gang) return _user.user.notify("У вас нет доступа", "error");else if (item.fraction === "gos" && !_user.user.is_gos) return _user.user.notify("У вас нет доступа", "error");
      }
      if (item.family && _user.user.family !== item.family) {
        return _user.user.notify("У вас нет доступа", "error");
      }
      if (item.cost && _user.user.money < item.cost) return _user.user.notify("У вас недостаточно средств для оплаты", "error");
      if (item.oneway && item.wait && !(await (0, _anim.waitTimer)(item.wait.distance, item.wait.seconds, item.wait.text))) return;
      if (item.oneway) return _custom.CustomEvent.triggerServer('teleport:go', confid, 1);
      if (!item.onenter && !!item.onenterpress && item.points.length == 2 && !item.cost) {
        const pos = item.points.findIndex((q, i) => i !== index);
        if (pos > -1) {
          return _custom.CustomEvent.triggerServer('teleport:go', confid, pos);
        }
      }
      const m = new _menu.MenuClass(item.name);
      if (item.cost) m.subtitle = `Стоимость: $${_system.system.numberFormat(item.cost)}`;
      item.points.map((pos, posindex) => {
        if (posindex === index) return;
        m.newItem({
          name: pos.name,
          onpress: async () => {
            m.close();
            if (item.wait && !(await (0, _anim.waitTimer)(item.wait.distance, item.wait.seconds, item.wait.text))) return;
            _custom.CustomEvent.triggerServer('teleport:go', confid, posindex);
          }
        });
      });
      m.open();
    }, {
      type: 27,
      radius: item.vehicle ? 4 : 1.5,
      onenter: !!item.onenter,
      dimension: q.d,
      drawStaticName: "scaleform"
    });
  });
});
},{"../../shared/teleport.system":"dHF7","./checkpoints":"XCJl","./custom.event":"py8h","./menu":"Aiz7","./system":"pi2J","./user":"ggMw","./anim":"stJJ"}],"wR5I":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BASE_AFK_TIME = void 0;
const BASE_AFK_TIME = exports.BASE_AFK_TIME = 10;
},{}],"X2Af":[function(require,module,exports) {
"use strict";

var _system = require("./system");
var _user = require("./user");
var _afk = require("../../shared/afk");
let afktime = 0;
let voiceCount = 0;
let positionCount = 0;
let headingCount = 0;
let headingCamCount = 0;
let forvardCount = 0;
let keyPressCount = 0;
let cameraMoveCount = 0;
let lastKeyPressed = [];
let lastPosition = new mp.Vector3(0, 0, 0);
let lastHeading = 0;
let lastHeadingCam = 0;
const pointForAfk = 100;
const player = mp.players.local;
const gameplayCam = mp.cameras.new('gameplay');
function unique(arr) {
  let result = [];
  for (let str of arr) {
    if (!result.includes(str)) {
      result.push(str);
    }
  }
  return result;
}
setInterval(() => {
  if (!_user.user.login) return;
  let currentPosition = player.position;
  let currentHeading = player.getHeading();
  if (mp.game.cam.getGameplayCamRelativeHeading() - lastHeadingCam > -2 && mp.game.cam.getGameplayCamRelativeHeading() - lastHeadingCam < 2) headingCamCount++;else {
    lastHeadingCam = mp.game.cam.getGameplayCamRelativeHeading();
    headingCamCount = 0;
  }
  if (_system.system.distanceToPos(lastPosition, currentPosition) < 1) positionCount++;else {
    lastPosition = currentPosition;
    positionCount = 0;
  }
  if (currentHeading < lastHeading + 1 && currentHeading > lastHeading - 1) headingCount++;else {
    lastHeading = currentHeading;
    headingCount = 0;
  }
  if (mp.voiceChat.muted) voiceCount++;else voiceCount = 0;
  if (chanceIsAfk() < pointForAfk) {
    afktime = 0;
    if (_user.user.afk) _user.user.afk = false;
  }
}, 1000);
setInterval(() => {
  if (chanceIsAfk() >= pointForAfk) afktime++;
}, 60000);
setInterval(() => {
  if (!_user.user.login) return;
  let canBeAfk = _afk.BASE_AFK_TIME;
  const vipdata = _user.user.vipData;
  if (vipdata) {
    if (vipdata.afkminutes) canBeAfk = vipdata.afkminutes;
  }
  if (afktime > canBeAfk) {
    if (!_user.user.afk) _user.user.afk = true;
  } else {
    if (_user.user.afk) _user.user.afk = false;
  }
}, 1000);
function unicKeys() {
  return unique(lastKeyPressed).length;
}
function chanceIsAfk() {
  if (mp.game.ui.isPauseMenuActive()) return 100;
  let chance = 0;
  let voiceChance = voiceCount / 100;
  if (voiceChance > 30) voiceChance = 30;
  chance += voiceChance;
  chance += positionCount / 50;
  chance += headingCount / 50;
  chance += forvardCount / 50;
  chance += cameraMoveCount;
  let keychance = 100 - unicKeys() * 20;
  if (keychance < 0) keychance = 0;
  chance += keychance;
  if (chance > 100) chance = 100;
  return chance;
}
for (let id = 1; id < 120; id++) {
  mp.keys.bind(id, true, function () {
    if (lastKeyPressed.length >= 100) lastKeyPressed.splice(0, 1);
    lastKeyPressed.push(id);
  });
}
setInterval(() => {
  if (!_user.user.login) return;
  lastKeyPressed = [];
}, 60000);
},{"./system":"pi2J","./user":"ggMw","../../shared/afk":"wR5I"}],"GXij":[function(require,module,exports) {
"use strict";

var _user = require("./user");
const localPlayer = mp.players.local;
const maxSpeed = 10.0;
const minHeight = 15.0;
const maxHeight = 60.0;
const maxAngle = 15.0;
let timePressKey = 0;
mp.events.add('rappelSync', id => {
  let target = mp.players.atRemoteId(id);
  if (!target.handle) return;
  _user.user.stopAnim();
  target.taskRappelFromHeli(10.0);
});
setInterval(() => {
  if (mp.keys.isDown(69)) {
    const vehicle = localPlayer.vehicle;
    if (!vehicle) return timePressKey = 0;
    if (!mp.game.invoke("0x4E417C547182C84D", vehicle.handle)) return timePressKey = 0;
    if (vehicle.getSpeed() > maxSpeed) {
      _user.user.notify("Вертолёт летит слишком быстро для спуска на тросе", "error");
      return timePressKey = 0;
    }
    if (vehicle.getPedInSeat(-1) === localPlayer.handle || vehicle.getPedInSeat(0) === localPlayer.handle) {
      _user.user.notify("С данного места спуск на тросе невозможен", "error");
      return timePressKey = 0;
    }
    const taskStatus = localPlayer.getScriptTaskStatus(-275944640);
    if (taskStatus === 0 || taskStatus === 1) {
      _user.user.notify("Вы уже спускаетесь на тросе", "error");
      return timePressKey = 0;
    }
    const curHeight = vehicle.getHeightAboveGround();
    if (curHeight < minHeight || curHeight > maxHeight) {
      _user.user.notify("Вертолёт слишком высоко или слишком низко для спуска на тросе", "error");
      return timePressKey = 0;
    }
    if (!vehicle.isUpright(maxAngle) || vehicle.isUpsidedown()) {
      _user.user.notify("Стабилизируйте вертолёт для спуска на тросе", "error");
      return timePressKey = 0;
    }
    if (!_user.user.is_gos) {
      _user.user.notify("Доступно только сотрудникам гос.организаций", "error");
      return timePressKey = 0;
    }
    timePressKey++;
    if (timePressKey < 2) return;
    timePressKey = 0;
    _user.user.stopAnim();
    localPlayer.taskRappelFromHeli(10.0);
  } else {
    timePressKey = 0;
  }
}, 1500);
},{"./user":"ggMw"}],"JiGH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FPS = void 0;
class FPSCalculator {
  constructor() {
    this._fps = 0;
    let lastFrameCount = this.getFrameCount();
    setInterval(() => {
      this._fps = this.getFrameCount() - lastFrameCount;
      lastFrameCount = this.getFrameCount();
    }, 1000);
  }
  get fps() {
    return this._fps;
  }
  getFrameCount() {
    return mp.game.invoke('0xFC8202EFC642E6F2');
  }
}
const FPS = exports.FPS = new FPSCalculator();
let fpsList = [];
setInterval(() => {
  fpsList.push(FPS.fps);
}, 10000);
setInterval(() => {
  let min = Math.min(...fpsList);
  let max = Math.max(...fpsList);
  let sum = 0;
  fpsList.map(q => {
    sum += q;
  });
  let average = Math.floor(sum / fpsList.length);
  fpsList = [];
}, 10 * 60000);
},{}],"rVaP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STATIC_NPC_DATA = void 0;
const autoschool = ['Привет! Я учитель в нашей автошколе, у меня ты можешь ознакомится с правилами штата ONYX выбрав нужный тебе раздел, после чего пройдите к Lui и сдай экзамен, удачи!', {
  answers: ['Порядок дорожного движения', 'Общие правила', 'Начало движения, маневрирование', 'Сигналы светофора и регулировщика', 'Правила обгона', 'Дорожная разметка', 'Пользование внешними световыми приборами и звуковыми сигналами'],
  onAnswer: index => {
    if (index === 0) {
      return ['Движение транспортных средств является правосторонним. Все участники дорожного движения, организаторы дорожного движения и другие лица должны соблюдать требования правовых актов по дорожному движению, быть внимательными и осмотрительными в дорожном движении и обеспечивать ритмичность движения с целью предотвращения возникновения опасности и причинения вреда.', {
        answers: ['Понятно спасибо!'],
        onAnswer: () => autoschool
      }];
    }
    if (index === 1) {
      return ['Пройти обучение навыкам вождения на автомобиле или мотоцикле можно только начиная с 16 лет. Перед началом движения, перестроением, поворотом (разворотом) и остановкой водитель обязан подавать сигналы световыми указателями поворота соответствующего направленияПри приближении транспортного средства с включенными проблесковым маячком синего цвета и специальным звуковым сигналом водители обязаны уступить дорогу для обеспечения беспрепятственного проезда указанного транспортного средства. При съезде автомобиля правыми колесами на неукрепленную и влажную обочину возникает опасность заноса из-за разницы сцепления правых и левых колес с дорогой. При этом целесообразно, не меняя скорости, т.е. не прибегая к торможению, плавным поворотом рулевого колеса вернуть автомобиль на проезжую часть. Торможение в данной ситуации может вызвать занос автомобиля. ', {
        answers: ['Понятно спасибо!'],
        onAnswer: () => autoschool
      }];
    }
    if (index === 2) {
      return ['Перед началом движения, перестроением, поворотом (разворотом) и остановкой водитель обязан подавать сигналы световыми указателями поворота соответствующего направления.При перестроении водитель должен уступить дорогу транспортным средствам, движущимся попутно без изменения направления движения. При одновременном перестроении транспортных средств, движущихся попутно, водитель должен уступить дорогу транспортному средству, находящемуся справаПри выезде на дорогу с прилегающей территории водитель должен уступить дорогу транспортным средствам и пешеходам, движущимся по ней, а при съезде с дороги - пешеходам и велосипедистам, путь движения которых он пересекает', {
        answers: ['Понятно спасибо!'],
        onAnswer: () => autoschool
      }];
    }
    if (index === 3) {
      return ['Круглые сигналы светофора имеют следующие значения: ЗЕЛЕНЫЙ СИГНАЛ разрешает движение; ЗЕЛЕНЫЙ МИГАЮЩИЙ СИГНАЛ  разрешает движение и информирует вас о том, что в скоре будет включен запрещающий сигнал. ЖЕЛТЫЙ МИГАЮЩИЙ СИГНАЛ разрешает движение и информирует о наличии нерегулируемого перекрестка или пешеходного перехода, предупреждает об опасности; КРАСНЫЙ СИГНАЛ, в том числе мигающий, запрещает движение. ', {
        answers: ['Понятно спасибо!'],
        onAnswer: () => autoschool
      }];
    }
    if (index === 4) {
      return ['Перед началом обгона водитель должен убедиться в том, что:водитель транспортного средства, которое двигается впереди по той самой полосе, не подал сигнал о намерении поворота (перестроение) налево;полоса , предназначенная для встречного движения, свободна на достаточно для обгона расстоянии;ваше транспортное средство никто не обгоняет. водителю обгоняемого транспортного средства запрещается препятствовать обгону путем повышения скорости движения или иными действиями.', {
        answers: ['Понятно спасибо!'],
        onAnswer: () => autoschool
      }];
    }
    if (index === 5) {
      return ['Белые и желтые линии - Могут быть сплошными и прерывистыми, одиночными и двойными. Они используются для отделения полос и разделения движения потоков транспортных средств.Желтые линии - отделяют полосы движения транспортных средств движущихся в противоположном направлении. Так-же одиночная желтая линия может отделять правую кромку обочины на шоссе. Белые линии - отделяют полосы движения транспортных средств движущихся в одном направлении. Так-же одиночная желтая линия может отделять правую кромку обочины на шоссе. Прерывистая одиночная желтая линия - Следует держаться правее от линии, за исключением случая когда вы обгоняете впереди идущее Т/С. Вы можете пересекать прерывистую желтую линию только для безопасного обгона впереди идущих транспортных средств, и в случаях пересечения перекрестка если это обусловлено дорожной разметкой .Прерывисто-сплошная двойная желтая линия - Сплошная желтая линия справа от прерывистой желтой линии означает что по встречной полосе на этом участке обгон запрещен (за исключением безопасного поворота налево на перекрестках, проезда прямо на перекрестках если это обусловлено дорожной разметкой в виде стрелки направления движения вашей полосы “движение только прямо”). Если прерывистая желтая линия находится справа от сплошной желтой линии вы можете совершить обгон впереди идущего Т/С и занять свою полосу (даже пересекая сплошную желтую линию).Двойная желтая линия - Обгон на этом участке дороге запрещен. Пересекать двойную желтую линию запрещено за исключением безопасного пересечения перекрестков если это обусловлено соответствующей дорожной разметкой .Прерывистая белая линия - Используется для разделения полос движения в одном направлении.Пересекать прерывистую белую линию разрешено если этот маневр будет безопасным.', {
        answers: ['Понятно спасибо!'],
        onAnswer: () => autoschool
      }];
    }
    if (index === 6) {
      return ['В темное время суток и в условиях недостаточной видимости независимо от освещения дороги, а также в тоннелях на движущемся транспортном средстве должны быть включены следующие световые приборы:на всех механических транспортных средствах - фары дальнего или ближнего света, на велосипедах - фары или фонари, на гужевых повозках - фонари (при их наличии);- Дальний свет должен быть переключен на ближний:в населенных пунктах, если дорога освещена; при встречном разъезде на расстоянии не менее чем за 150 м до транспортного средства, а также и при большем, если водитель встречного транспортного средства периодическим переключением света фар покажет необходимость этого; в любых других случаях для исключения возможности ослепления водителей как встречных, так и попутных транспортных средств.', {
        answers: ['Понятно спасибо!'],
        onAnswer: () => autoschool
      }];
    }
  }
}];
const lcnmaff = ["Привет, давай я тебе раскажу чем ты можешь заниматься работая на Винодельном предприятии:", {
  answers: ["Сбор винограда", "Отжим винограда", "Перегонка в  вино", "Продажа готовых бутылок с вином"],
  onAnswer: index => {
    if (index === 0) {
      return ["Плонтация винограда помечена меткой на карте, за каждый собраный куст вы будете получать 1 плод винограда.", {
        answers: ["Понятно спасибо"],
        onAnswer: () => lcnmaff
      }];
    }
    if (index === 1) {
      return ["После того как вы собрали достаточно плодов вам нужно поехать и отжать виноград в специальном ангаре его вы можете найти на карте недалеко от палето бей", {
        answers: ["Понятно спасибо"],
        onAnswer: () => lcnmaff
      }];
    }
    if (index === 2) {
      return ["Как только вы получили виноградный сок поcле отжима вам нужно перегнать его в вино, перегоный апарат так же нахоидтся рядом с ангаром где вы получали виноградный сок", {
        answers: ["Понятно спасибо"],
        onAnswer: () => lcnmaff
      }];
    }
    if (index === 3) {
      return ["Как только после перегонки вы получили бутылки с вином вы можете продать их одному из 3 торговцев, этих торговцев вы может найти по карте они обозначены фиолетовым человеком. У каждого торговца цена меняется каждый час так что если вы хотите по выгоднее продать свою продукцию вам предётся покататься. После продажи часть суммы уйдёт в сейф вашего предприятия часть вам на руки.", {
        answers: ["Понятно спасибо"],
        onAnswer: () => lcnmaff
      }];
    }
  }
}];
const rmmaff = ["Привет, давай я тебе раскажу чем ты можешь работая на Гольф клуб:", {
  answers: ["Сбор листвы", "Переработка листвы в биотопливо", "Продажа биотоплива"],
  onAnswer: index => {
    if (index === 0) {
      return ["По всей территории гольф клуба есть места где нужно собирать листву", {
        answers: ["Понятно спасибо"],
        onAnswer: () => rmmaff
      }];
    }
    if (index === 1) {
      return ["После того как вы собрали достаточно количество листвы вы можете отвезти её на переработку, что бы получить из неё биотопливо. Завод по переработки находится рядом с Сенди-Шорс, на карте он отмечен как зелёная канистра", {
        answers: ["Понятно спасибо"],
        onAnswer: () => rmmaff
      }];
    }
    if (index === 2) {
      return ["Как только вы получили переработали листву в биотопливо, вы можете продать их одному из 3 торговцев, этих торговцев вы может найти по карте они обозначены фиолетовым челочеком. У каждого торговца цена меняется каждый час так что если вы хотите выгоднее продать свою продукцию вам предётся покататься. После продажи часть суммы уйдёт в сейф вашего предприятия часть вам на руки.", {
        answers: ["Понятно спасибо"],
        onAnswer: () => rmmaff
      }];
    }
  }
}];
const carfamali = ["Приехал поработать на карьере, тебе чем нибудь помочь?", {
  answers: ["Сбор породы", "Продажа породы"],
  onAnswer: index => {
    if (index === 0) {
      return ["На территории карьера есть места где ты можешь собирать породу, всего 3 вида породы каменная, серебряная и золотая.", {
        answers: ["Понятно спасибо"],
        onAnswer: () => carfamali
      }];
    }
    if (index === 1) {
      return ["Поcле того как вы добыли породу вы моежет поехать и её продать скупщикам. Есть два скупщика один находится на стройке в Палето, другой на въезде в порт, у каждого скупщика разная цена и меняется она каждый час. Каменная порода самая дешёвая, серебряная и золотая дороже, но шанс их получить гораздо меньше", {
        answers: ["Понятно спасибо"],
        onAnswer: () => carfamali
      }];
    }
  }
}];
const STATIC_NPC_DATA = exports.STATIC_NPC_DATA = [{
  x: 666.79,
  y: -612.33,
  z: 18.35,
  h: 256,
  name: '',
  model: "a_m_o_acult_02",
  anim: ['amb@code_human_cower_stand@female@base', 'base']
}, {
  x: 666.98,
  y: -616.87,
  z: 18.33,
  h: 359,
  name: '',
  model: "a_m_m_afriamer_01",
  anim: ['amb@world_human_stand_guard@male@base', 'base']
}, {
  x: 671.68,
  y: -612.67,
  z: 18.72,
  h: 276,
  name: '',
  model: "a_m_o_beach_01",
  anim: ['', 'base']
}, {
  x: 673.47,
  y: -612.71,
  z: 18.85,
  h: 88,
  name: '',
  model: "u_m_m_bikehire_01",
  anim: ['', 'base']
}, {
  x: 685.41,
  y: -617.53,
  z: 19.65,
  h: 66,
  name: '',
  model: "a_c_cat_01",
  anim: ['', 'base']
}, {
  x: 684.74,
  y: -616.40,
  z: 19.62,
  h: 187,
  name: '',
  model: "a_m_m_indian_01",
  anim: ['', 'base']
}, {
  x: 692.42,
  y: -617.80,
  z: 20.12,
  h: 256,
  name: '',
  model: "a_m_m_eastsa_01",
  anim: ['', 'base']
}, {
  x: 695.50,
  y: -613.33,
  z: 20.54,
  h: 119,
  name: '',
  model: "a_c_chop",
  anim: ['', 'base']
}, {
  x: 700.95,
  y: -617.31,
  z: 18.84,
  h: 4,
  name: '',
  model: "a_c_husky",
  anim: ['', 'base']
}, {
  x: 20.14,
  y: -1300.51,
  z: 28.28,
  h: 205,
  name: '',
  model: "a_c_pug",
  anim: ['', 'base']
}, {
  x: 21.17,
  y: -1300.66,
  z: 29.19,
  h: 125,
  name: '',
  model: "ig_car3guy2",
  anim: ['', 'base']
}, {
  x: 8.21,
  y: -1300.84,
  z: 29.17,
  h: 85,
  name: '',
  model: "s_m_m_dockwork_01",
  anim: ['', 'base']
}, {
  x: 7.12,
  y: -1300.73,
  z: 29.18,
  h: 269,
  name: '',
  model: "s_m_y_dockwork_01",
  anim: ['', 'base']
}, {
  x: 21.01,
  y: -1312.66,
  z: 29.46,
  h: 15,
  name: '',
  model: "g_m_y_famfor_01",
  anim: ['', 'base']
}, {
  x: 22.04,
  y: -1311.54,
  z: 29.26,
  h: 145,
  name: '',
  model: "ig_g",
  anim: ['', 'base']
}, {
  x: -1057.31,
  y: -868.33,
  z: 5.11,
  h: 38,
  name: '',
  model: "s_m_m_prisguard_01",
  anim: ['', 'base']
}, {
  x: -1068.41,
  y: -853.05,
  z: 4.87,
  h: 73,
  name: '',
  model: "s_f_y_cop_01",
  anim: ['', 'base']
}, {
  x: -1070.17,
  y: -853.82,
  z: 4.87,
  h: 330,
  name: '',
  model: "s_m_y_cop_01",
  anim: ['', 'base']
}, {
  x: -1070.16,
  y: -851.97,
  z: 4.87,
  h: 220,
  name: '',
  model: "csb_cop",
  anim: ['', 'base']
}, {
  x: -1068.14,
  y: -867.05,
  z: 4.87,
  h: 292,
  name: '',
  model: "s_m_y_hwaycop_01",
  anim: ['', 'base']
}, {
  x: -1067.71,
  y: -870.55,
  z: 4.92,
  h: 311,
  name: '',
  model: "s_m_y_ranger_01",
  anim: ['', 'base']
}, {
  x: -1047.52,
  y: -862.04,
  z: 4.92,
  h: 42,
  name: '',
  model: "s_f_y_ranger_01",
  anim: ['', 'base']
}, {
  x: -1067.31,
  y: -873.89,
  z: 4.36,
  h: 273,
  name: '',
  model: "a_c_husky",
  anim: ['', 'base']
}, {
  x: -516.26,
  y: -1013.09,
  z: 23.45,
  h: 24,
  name: '',
  model: "cs_andreas",
  anim: ['', 'base']
}, {
  x: 2138.34,
  y: 4923.52,
  z: 41.04,
  h: 344,
  name: '',
  model: "cs_andreas",
  anim: ['', 'base']
}, {
  x: -1047.80,
  y: -874.36,
  z: 5.64,
  h: 168,
  name: '',
  model: "cs_andreas",
  anim: ['', 'base']
}, {
  x: -481.60,
  y: -85.83,
  z: 39.72,
  h: 265,
  name: 'Наташа',
  model: "a_f_y_bevhills_02",
  anim: ["mini@strip_club@private_dance@part1", "priv_dance_p1"]
}, {
  x: -478.85,
  y: -89.90,
  z: 39.72,
  h: 256,
  name: 'Таня',
  model: "a_f_y_bevhills_01",
  anim: ["mini@strip_club@private_dance@part1", "priv_dance_p1"]
}, {
  x: 2413.03,
  y: 4997.99,
  z: 46.63,
  h: 126,
  name: '',
  model: "u_m_y_mani",
  anim: ['', 'base']
}, {
  x: -510.16,
  y: -1002.96,
  z: 23.55,
  h: 53,
  name: '',
  model: "s_m_m_gardener_01",
  anim: ['', 'base']
}, {
  x: -1534.90,
  y: -453.81,
  z: 35.92,
  h: 317,
  name: '',
  model: "s_m_m_migrant_01",
  anim: ['', 'base']
}, {
  x: 1966.27,
  y: 5185.21,
  z: 47.88,
  h: 186,
  name: '',
  model: "ig_omega",
  anim: ['', 'base']
}, {
  x: 319.20,
  y: -574.70,
  z: 86.93,
  h: 295,
  name: 'Mishelka',
  model: "s_f_y_scrubs_01",
  anim: ['', 'base']
}, {
  x: -251.92,
  y: 6335.87,
  z: 32.43,
  h: 172,
  name: 'Doctor',
  model: "s_m_m_scientist_01",
  anim: ['', 'base']
}, {
  x: -710.88,
  y: -1305.34,
  z: 5.11,
  h: 2,
  name: 'Учитель ПДД',
  model: "u_m_m_bankman",
  anim: ['', 'base'],
  dialog: autoschool
}, {
  x: -1882.41,
  y: 2050.37,
  z: 140.99,
  h: 345,
  name: "Информатор",
  model: "cs_carbuyer",
  anim: ['', 'base'],
  dialog: lcnmaff
}, {
  x: -1346.94,
  y: 53.83,
  z: 55.25,
  h: 84,
  name: "Информатор",
  model: "cs_carbuyer",
  anim: ['', 'base'],
  dialog: rmmaff
}, {
  x: 2952.68,
  y: 2743.51,
  z: 43.51,
  h: 234,
  name: "Работник карьера",
  model: "mp_m_weed_01",
  anim: ['', 'base'],
  dialog: carfamali
}, {
  x: -777.06,
  y: -1323.23,
  z: 5.15,
  h: 145,
  name: 'Anna',
  model: "s_f_y_shop_mid",
  anim: ['', 'base']
}, {
  x: -1154.45,
  y: -2716.10,
  z: 19.89,
  h: 323,
  name: 'Yukiteru',
  model: "ig_stevehains",
  anim: ['', 'base']
}, {
  x: 1697.49,
  y: 3594.95,
  z: 35.62,
  h: 10,
  name: 'Roman',
  model: "u_m_o_taphillbilly",
  anim: ['', 'base']
}, {
  x: 440.96,
  y: -974.44,
  z: 30.69,
  h: 209,
  name: 'Lina',
  model: "s_f_y_cop_01",
  anim: "WORLD_HUMAN_STAND_IMPATIENT_UPRIGHT"
}, {
  x: -699.28,
  y: -1311.65,
  z: 5.11,
  h: 47,
  name: 'Venskiy',
  model: "ig_bestmen",
  anim: ['', 'base']
}, {
  x: -537.79,
  y: -195.99,
  z: 38.23,
  h: 120,
  name: 'Ruslan',
  model: "s_m_y_barman_01",
  anim: ['', 'base']
}, {
  x: 450.23,
  y: -973.09,
  z: 30.69,
  h: 172,
  name: 'Elena',
  model: "cs_debra",
  anim: ['', 'base']
}, {
  x: 327.50,
  y: -598.18,
  z: 28.79,
  h: 42,
  name: 'Omar',
  model: "s_m_m_doctor_01",
  anim: ['', 'base']
}, {
  x: 1858.53,
  y: 3698.14,
  z: 34.27,
  h: 117,
  name: 'Daniel',
  model: "s_m_y_sheriff_01",
  anim: ['', 'base']
}, {
  x: -441.43,
  y: 6006.87,
  z: 31.72,
  h: 101,
  name: 'Yuno',
  model: "s_f_y_sheriff_01",
  anim: ['', 'base']
}, {
  x: 230.78,
  y: -1366.30,
  z: 39.53,
  h: 272,
  name: 'Eva',
  model: "a_f_y_femaleagent",
  anim: ['', 'base']
}, {
  x: -328.12,
  y: 2798.04,
  z: 60.18,
  h: 289,
  name: '',
  model: "cs_priest",
  anim: ['', 'base']
}, {
  x: -2353.79,
  y: 3264.34,
  z: 32.81,
  h: 234,
  name: '',
  model: "s_m_y_armymech_01",
  anim: ['', 'base']
}, {
  x: 1088.05,
  y: 221.42,
  z: -49.20,
  h: 180,
  name: 'Natasha',
  model: "a_f_y_femaleagent",
  anim: "WORLD_HUMAN_STAND_IMPATIENT_UPRIGHT",
  d: 1
}, {
  x: 300.02,
  y: -599.00,
  z: 43.26,
  h: 6,
  name: 'Хирург',
  model: "s_m_m_doctor_01",
  anim: 'WORLD_HUMAN_CLIPBOARD_FACILITY'
}, {
  x: 2509.17,
  y: -444.64,
  z: 106.91,
  h: 323,
  name: 'Midas',
  model: "cs_barry",
  anim: 'WORLD_HUMAN_CLIPBOARD_FACILITY'
}, {
  x: -1669.04,
  y: -293.02,
  z: 52.62,
  h: 20,
  name: '',
  model: "cs_priest",
  anim: ['', 'base']
}, {
  x: -253.63,
  y: 6314.59,
  z: 32.43,
  h: 296,
  name: 'Хирург',
  model: "s_m_m_doctor_01",
  anim: ['', 'base']
}, {
  x: 349.14,
  y: -587.48,
  z: 28.80,
  h: 247,
  name: 'Doctor',
  model: "s_m_m_doctor_01",
  anim: ['', 'base']
}, {
  x: -586.46,
  y: -921.22,
  z: 23.87,
  h: 133,
  name: 'Fedot',
  model: "cs_barry",
  anim: ['', 'base']
}, {
  x: -799.55,
  y: 171.47,
  z: 72.30,
  h: 82,
  name: 'Vito Andolini',
  model: "cs_movpremmale",
  anim: "WORLD_HUMAN_SEAT_WALL"
}, {
  x: -801.10,
  y: 169.04,
  z: 72.83,
  h: 13,
  name: '',
  model: "g_m_m_mexboss_01",
  anim: "WORLD_HUMAN_AA_SMOKE"
}, {
  x: -803.53,
  y: 178.50,
  z: 72.33,
  h: 173,
  name: '',
  model: "s_m_m_highsec_01",
  anim: "WORLD_HUMAN_SEAT_WALL"
}, {
  x: -800.18,
  y: 183.01,
  z: 72.61,
  h: 194,
  name: '',
  model: "s_f_m_maid_01",
  anim: ['amb@world_human_maid_clean@', 'base']
}, {
  x: -814.88,
  y: 177.71,
  z: 72.15,
  h: 20,
  name: '',
  model: "s_m_m_fiboffice_02",
  anim: ""
}, {
  x: -815.95,
  y: 180.50,
  z: 72.15,
  h: 201,
  name: '',
  model: "u_m_m_jewelsec_01",
  anim: ""
}, {
  x: -805.3,
  y: 178.75,
  z: 72.33,
  h: 198,
  name: '',
  model: "cs_martinmadrazo",
  anim: "WORLD_HUMAN_SEAT_WALL"
}, {
  x: 1829.22,
  y: 3682.36,
  z: 34.27,
  h: 249,
  name: 'Doctor',
  model: "s_m_m_doctor_01",
  anim: ['', 'base']
}, {
  x: 1830.10,
  y: 3673.16,
  z: 34.27,
  h: 294,
  name: 'Doctor',
  model: "s_m_m_doctor_01",
  anim: ['', 'base']
}, {
  x: -250.25,
  y: 6311.43,
  z: 32.43,
  h: 3,
  name: 'Doctor',
  model: "s_m_m_doctor_01",
  anim: ['', 'base']
}, {
  x: 304.24,
  y: -571.24,
  z: 86.93,
  h: 250,
  name: 'Doctor',
  model: "s_m_m_doctor_01",
  anim: ['', 'base']
}];
},{}],"CWsZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npcDialog = exports.NpcSpawn = void 0;
var _static = require("../../shared/static.npc");
var _checkpoints = require("./checkpoints");
var _custom = require("./custom.event");
var _gui = require("./gui");
var _quests = require("./quests");
var _scaleform = require("./scaleform.mp");
var _system = require("./system");
var _anim = require("./anim");
let currentDialogHandle;
_custom.CustomEvent.registerServer('bot:dialog:load', (message, npcKeys, npcName, npcInfo) => {
  npcDialog.openDialog(message, npcKeys, index => {
    _custom.CustomEvent.triggerServer('bot:dialog:answer', index);
  }, npcName, npcInfo);
});
_custom.CustomEvent.registerServer('bot:dialog:close', () => {
  npcDialog.closeDialog();
});
mp.events.add('bot:dialog:answer', index => {
  if (currentDialogHandle) currentDialogHandle(index);
});
const npcDialog = exports.npcDialog = {
  openFullDialog: (data, name, role, onEnd) => {
    npcDialog.openDialog(data[0], data[1].answers, index => {
      if (!data[1].onAnswer || index === -1) {
        if (onEnd) onEnd();
        return npcDialog.closeDialog();
      }
      const answer = data[1].onAnswer(index);
      if (!answer) {
        if (onEnd) onEnd();
        return npcDialog.closeDialog();
      }
      if (typeof answer !== "number") return npcDialog.openFullDialog(answer, name, role, onEnd);
      const cfg = _quests.quests.getQuest(answer);
      if (!cfg || !cfg.botData || !cfg.botData.dialogStart) {
        if (onEnd) onEnd();
        return npcDialog.closeDialog();
      }
      return npcDialog.openFullDialog(cfg.botData.dialogStart, name, role, onEnd);
    }, name, role);
  },
  openDialog: (message, npcKeys, handle, npcName, npcInfo) => {
    if (_gui.gui.currentGui !== "npcdialog") _gui.gui.setGui('npcdialog');
    _custom.CustomEvent.triggerCef('bot:dialog:load', message, npcKeys, npcName, npcInfo);
    currentDialogHandle = handle;
  },
  closeDialog: () => {
    _gui.gui.setGui(null);
  }
};
class NpcSpawn {
  constructor(pos, heading, model, name, handleFunc, range = 10, dimension = 0, rangeColshape = 2) {
    this._r = 10;
    this._d = 0;
    this.playCustomAnim = false;
    this.playAnim = async (seq, upper = false, lopping = false) => {
      this.playCustomAnim = true;
      let res = await (0, _anim.playAnimsEntity)(this.ped, seq, upper, lopping);
      this.playCustomAnim = false;
      this.playDefaultAnim();
      return res;
    };
    this.playDefaultAnim = () => {
      if (this.playCustomAnim) return;
      if (!this.anim) return;
      if (typeof this.anim === 'string') {
        if (!mp.game.invoke('0x1BF094736DD62C2E', this.ped.handle, this.anim)) mp.game.invoke('0x142A02425FF02BD9', this.ped.handle, this.anim, -1, false);
      } else {
        if (!mp.game.invoke('0x1F0B79228E461EC9', this.ped.handle, this.anim[0], this.anim[1], 3)) (0, _anim.playAnimsEntity)(this.ped, [[this.anim[0], this.anim[1]]], false, false);
      }
    };
    this.greetUsed = false;
    this._pos = pos;
    this._h = heading;
    this._model = model;
    this._name = name;
    this._r = range;
    this._d = dimension;
    this._colshapeRange = rangeColshape;
    if (handleFunc) this._handle = handleFunc;
    this.id = NpcSpawn.freeId;
    NpcSpawn.pool.push(this);
    this.Recreate();
  }
  static get freeId() {
    this.newid++;
    return 0 + this.newid;
  }
  static at(id) {
    return this.pool.find(q => q.id === id);
  }
  static get forEach() {
    return this.pool.forEach;
  }
  static get filter() {
    return this.pool.filter;
  }
  get position() {
    return this._pos;
  }
  get dimension() {
    return this._d;
  }
  get handle() {
    return this._handle;
  }
  set handle(val) {
    this._handle = val;
    this.Recreate();
  }
  get scaleformPos() {
    return new mp.Vector3(this._pos.x, this._pos.y, this._pos.z + 1.1);
  }
  destroy() {
    if (this.ped && mp.peds.exists(this.ped)) this.ped.destroy();
    if (this.colshape) this.colshape.destroy();
    if (this.scaleform && _scaleform.ScaleformTextMp.exists(this.scaleform)) this.scaleform.destroy();
    NpcSpawn.pool.splice(NpcSpawn.pool.findIndex(q => q.id === q.id), 1);
  }
  Recreate() {
    if (this.colshape) this.colshape.destroy();
    if (this.handle) {
      this.colshape = _checkpoints.colshapes.new(this._pos, this._name, () => {
        if (this.handle) this.handle();
      }, {
        dimension: this._d,
        color: [0, 0, 0, 0],
        radius: this._colshapeRange
      });
    }
    if (this.ped && mp.peds.exists(this.ped)) {
      this.ped.destroy();
    }
    this.ped = _system.system.createPed(this._pos, this._h, this._model, this._d);
    if (this.scaleform && _scaleform.ScaleformTextMp.exists(this.scaleform)) {
      this.scaleform.text = this._name;
      this.scaleform.position = this.scaleformPos;
      if (this.scaleform.dimension != this._d) this.scaleform.dimension = this._d;
      if (this.scaleform.range != this._r) this.scaleform.range = this._r;
    } else {
      this.scaleform = new _scaleform.ScaleformTextMp(this.scaleformPos, this._name, {
        dimension: this._d,
        range: this._r,
        type: 'front'
      });
    }
  }
}
exports.NpcSpawn = NpcSpawn;
NpcSpawn.newid = 0;
NpcSpawn.pool = [];
setInterval(() => {
  let closest = NpcSpawn.pool.filter(q => _system.system.distanceToPos(q.position, mp.players.local.position) < 150 && (q.dimension === mp.players.local.dimension || q.dimension === -1));
  closest.map(async item => {
    if (!mp.peds.exists(item.ped)) return;
    if (!item.ped.handle) return;
    if (item.greeting) {
      const grd = _system.system.distanceToPos(item.position, mp.players.local.position);
      if (!item.greetUsed) {
        if (grd <= item.greeting.dist) {
          item.greetUsed = true;
          mp.game.audio.requestAmbientAudioBank(item.greeting.voiceName, true);
          mp.game.audio.playAmbientSpeechWithVoice(item.ped.handle, item.greeting.speechName, item.greeting.voiceName, item.greeting.speechParam, false);
        }
      } else if (grd > item.greeting.dist * 5) {
        item.greetUsed = false;
      }
    }
    item.playDefaultAnim();
  });
}, 1000);
_static.STATIC_NPC_DATA.map(npc => {
  const item = new NpcSpawn(new mp.Vector3(npc.x, npc.y, npc.z), npc.h, npc.model, npc.name, null, 10, npc.d || 0);
  if (npc.anim) item.anim = npc.anim;
  if (npc.dialog) {
    item.handle = () => {
      npcDialog.openFullDialog(npc.dialog, npc.name, npc.role);
    };
  }
});
},{"../../shared/static.npc":"rVaP","./checkpoints":"XCJl","./custom.event":"py8h","./gui":"bk91","./quests":"W1Bu","./scaleform.mp":"p2OF","./system":"pi2J","./anim":"stJJ"}],"W1Bu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quests = void 0;
var _quests = require("../../shared/quests");
var _checkpoints = require("./checkpoints");
var _custom = require("./custom.event");
var _npc = require("./npc.dialog");
var _scaleform = require("./scaleform.mp");
var _system = require("./system");
var _mainmenu = require("./mainmenu");
let createdNpc = new Map();
let createdColshape = new Map();
let createdScaleform = new Map();
let createdBlip = new Map();
let questData;
_custom.CustomEvent.registerServer('quests:data', data => {
  questData = data;
  _custom.CustomEvent.triggerCef('quest:data', JSON.stringify(data.find(q => !q[2])));
});
setInterval(() => {
  if (!questData) return;
  let myQuests = [];
  const show = (0, _mainmenu.getAlertSetting)('questLines');
  questData.map(quest => {
    const questid = quest[0];
    const cfg = quests.getQuest(quest[0]);
    if (!cfg) return;
    myQuests.push(questid);
    cfg.tasks.map((task, taskid) => {
      if ((quest[2] || quest[1][taskid][0]) && createdBlip.has(`${questid}_${taskid}`)) {
        const blip = createdBlip.get(`${questid}_${taskid}`);
        if (blip && mp.blips.exists(blip)) blip.destroy();
        createdBlip.delete(`${questid}_${taskid}`);
      }
      if (cfg.taskStepByStep) {
        if (taskid && !quest[1][taskid - 1][0]) return;
      }
      if (quest[1][taskid][0]) return;
      if (task.type === "delivertonpc" || task.type === "gotopos") {
        if (quest[1][taskid][0] || !show) {
          if (createdBlip.get(`${questid}_${taskid}`)) {
            createdBlip.get(`${questid}_${taskid}`).destroy();
            createdBlip.delete(`${questid}_${taskid}`);
          }
          if (quest[2]) {
            if (createdNpc.get(`${questid}_${taskid}`)) {
              createdNpc.get(`${questid}_${taskid}`).destroy();
              createdNpc.delete(`${questid}_${taskid}`);
            }
          }
          if (createdColshape.get(`${questid}_${taskid}`)) {
            createdColshape.get(`${questid}_${taskid}`).destroy();
            createdColshape.delete(`${questid}_${taskid}`);
          }
          if (createdScaleform.get(`${questid}_${taskid}`)) {
            createdScaleform.get(`${questid}_${taskid}`).destroy();
            createdScaleform.delete(`${questid}_${taskid}`);
          }
        } else {
          if (task.type === "gotopos") {
            if (!createdColshape.has(`${questid}_${taskid}`)) {
              createdColshape.set(`${questid}_${taskid}`, new _checkpoints.colshapeHandle(new mp.Vector3(task.x, task.y, task.z), task.text, () => {
                _custom.CustomEvent.triggerServer('quest:gotopos', questid, taskid);
                createdColshape.get(`${questid}_${taskid}`).destroy();
                createdColshape.delete(`${questid}_${taskid}`);
              }, {
                radius: 2,
                type: 27,
                color: [255, 0, 0, 50],
                onenter: !task.keypress
              }));
            }
            if (!createdScaleform.has(`${questid}_${taskid}`)) {
              createdScaleform.set(`${questid}_${taskid}`, new _scaleform.ScaleformTextMp(new mp.Vector3(task.x, task.y, task.z + 1), task.text, {
                type: "front",
                range: 10
              }));
            }
          } else {
            if (!createdNpc.has(`${questid}_${taskid}`)) {
              createdNpc.set(`${questid}_${taskid}`, new _npc.NpcSpawn(new mp.Vector3(task.x, task.y, task.z), task.h, task.model, task.name, () => {
                if (task.dialog) _npc.npcDialog.openFullDialog(task.dialog, task.name, task.role, () => {
                  _custom.CustomEvent.triggerServer('quest:gotopos', questid, taskid);
                });else _custom.CustomEvent.triggerServer('quest:gotopos', questid, taskid);
              }));
            }
          }
        }
      }
      if (!mp.players.local.dimension && !createdBlip.has(`${questid}_${taskid}`) && task.blipData && !quest[2] && !quest[1][taskid][0]) {
        const blip = _system.system.createBlip(task.blipData.bliptype, task.blipData.blipcolor, new mp.Vector3(task.blipData.x, task.blipData.y, 0), task.blipData.text);
        createdBlip.set(`${questid}_${taskid}`, blip);
        if (task.blipData.bliproute) {
          blip.setRoute(true);
          blip.setRouteColour(task.blipData.bliproute);
        }
      }
    });
  });
  _quests.QUESTS_DATA.filter(q => !myQuests.includes(q.id)).map(quest => {
    const questid = quest.id;
    quest.tasks.map((task, taskid) => {
      if (createdBlip.get(`${questid}_${taskid}`)) {
        createdBlip.get(`${questid}_${taskid}`).destroy();
        createdBlip.delete(`${questid}_${taskid}`);
      }
      if (createdNpc.get(`${questid}_${taskid}`)) {
        createdNpc.get(`${questid}_${taskid}`).destroy();
        createdNpc.delete(`${questid}_${taskid}`);
      }
      if (createdColshape.get(`${questid}_${taskid}`)) {
        createdColshape.get(`${questid}_${taskid}`).destroy();
        createdColshape.delete(`${questid}_${taskid}`);
      }
      if (createdScaleform.get(`${questid}_${taskid}`)) {
        createdScaleform.get(`${questid}_${taskid}`).destroy();
        createdScaleform.delete(`${questid}_${taskid}`);
      }
    });
  });
}, 2000);
const quests = exports.quests = {
  getQuest: id => {
    return _quests.QUESTS_DATA.find(q => q.id === id);
  },
  getBot: id => {
    return _quests.QUEST_BOT_DATA.find(q => q.id === id);
  }
};
},{"../../shared/quests":"N668","./checkpoints":"XCJl","./custom.event":"py8h","./npc.dialog":"CWsZ","./scaleform.mp":"p2OF","./system":"pi2J","./mainmenu":"ciLG"}],"zYqN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSignature = void 0;
var _custom = require("./custom.event");
var _gui = require("./gui");
let signatureIDS = 0;
let signaturePromises = new Map();
const getSignature = (document, info = 'Поставьте подпись в своих документах') => {
  return new Promise(resolve => {
    _gui.gui.setGui('signature');
    signatureIDS++;
    _custom.CustomEvent.triggerCef('signature:load', info, document, signatureIDS);
    signaturePromises.set(signatureIDS, resolve);
  });
};
exports.getSignature = getSignature;
_custom.CustomEvent.registerServer('signature:get', (document, info) => {
  return getSignature(document, info);
});
mp.events.add('signature:save', (ids, status) => {
  if (!signaturePromises.has(ids)) return;
  signaturePromises.get(ids)(status);
  signaturePromises.delete(ids);
});
},{"./custom.event":"py8h","./gui":"bk91"}],"SF2W":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _interact = require("./interact");
var _doors = require("./doors");
var _system = require("./system");
var _user = require("./user");
var _hooks = require("../../shared/hooks");
const player = mp.players.local;
_custom.CustomEvent.register('gpress', () => {
  if (player.isDead()) return player.notify('Вы мертвы', 'error');
  if (_user.user.cuffed) return player.notify('Вы в наручниках', 'error');
  if (player.vehicle && player.vehicle.remoteId && !player.vehicle.autosalon) return _custom.CustomEvent.triggerServer('vehicle:interaction', player.vehicle.remoteId);
  if ((0, _doors.doorEvent)()) return;
  let closest = _interact.entitysData.filter(q => _system.system.distanceToPos(player.position, q) < 2);
  let raycastEntity = _interact.gInteractObject.get();
  if (raycastEntity) {
    const data = (0, _hooks.invokeHook)(_interact.RAYCAST_DETECT_ENTITY_HOOK, raycastEntity)[0];
    if (data) {
      data.onInteract(raycastEntity);
      return;
    }
    if (raycastEntity.type === _interact.ENTITY_TYPES.PLAYER) {
      return _custom.CustomEvent.triggerServer('player:interaction', raycastEntity.remoteId);
    } else if (raycastEntity.type === _interact.ENTITY_TYPES.VEHICLE) {
      return _custom.CustomEvent.triggerServer('vehicle:interaction', raycastEntity.remoteId);
    }
  }
  if (closest.length > 0) {
    closest = closest.sort((a, b) => {
      const adist = _system.system.distanceToPos(player.position, a);
      const bdist = _system.system.distanceToPos(player.position, b);
      return adist - bdist;
    });
    return (0, _interact.gameObjectClick)(closest[0].handle);
  }
});
},{"./custom.event":"py8h","./interact":"m19G","./doors":"H2nx","./system":"pi2J","./user":"ggMw","../../shared/hooks":"H3J5"}],"G0I7":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _user = require("./user");
var _system = require("./system");
var _taxi = require("../../shared/taxi");
var _checkpoints = require("./checkpoints");
var _dispatch = require("./dispatch");
let currentTaxiCar;
_custom.CustomEvent.registerServer('taxi:car', id => {
  currentTaxiCar = id;
});
_custom.CustomEvent.registerServer('phone:requestTaxi', () => {
  let pos = _system.system.getWaypointPosition();
  if (!pos || pos.x == 0) return _user.user.notify(`Чтобы вызвать такси необходимо указать на карте метку точки назначения`, 'error', 'CHAR_TAXI');
  if (_system.system.distanceToPos2D(mp.players.local.position, pos) < 100) return _user.user.notify(`Минимальная дистанция заказа такси 100 метров`, 'error', 'CHAR_TAXI');
  const startZone = mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z));
  const endZone = mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(pos.x, pos.y, pos.z));
  _custom.CustomEvent.triggerServer('phone:requestTaxi', pos, startZone, endZone);
});
let call = false;
let timer = 120;
_custom.CustomEvent.registerServer('phone:requestPolice', () => {
  if (call) return _user.user.notify('Вы уже совершали вызов недавно');
  call = true;
  setTimeout(() => {
    call = false;
  }, timer * 1000);
  _dispatch.dispatch.call([2, 7], 'Поступил новый вызов', true);
});
_custom.CustomEvent.register('phone:requestEms', () => {
  if (call) return _user.user.notify('Вы уже совершали вызов недавно');
  call = true;
  setTimeout(() => {
    call = false;
  }, timer * 1000);
  _dispatch.dispatch.call(16, 'Поступил новый вызов', true);
});
_custom.CustomEvent.registerServer('phone:requestEms', () => {
  if (call) return _user.user.notify('Вы уже совершали вызов недавно');
  call = true;
  setTimeout(() => {
    call = false;
  }, timer * 1000);
  _dispatch.dispatch.call(16, 'Поступил новый вызов', true);
});
_custom.CustomEvent.registerServer('phone:requestNews', () => {
  if (call) return _user.user.notify('Вы уже совершали вызов недавно');
  call = true;
  setTimeout(() => {
    call = false;
  }, timer * 1000);
  _dispatch.dispatch.call(5, 'Поступил новый вызов', true);
});
_custom.CustomEvent.registerServer('taxi:random', index => {
  const cfg = _taxi.TAXI_CONF.ordersNpc[index];
  _user.user.notify('Новый заказ получен. Проследуйте по навигатору', 'success');
  const blip = _system.system.createBlip(_taxi.TAXI_CONF.blipNpcOrder.blipStart, _taxi.TAXI_CONF.blipNpcOrder.color, new mp.Vector3(cfg.start.x, cfg.start.y, cfg.start.z), '[TAXI] Забрать пассажира');
  blip.setRoute(true);
  blip.setRouteColour(_taxi.TAXI_CONF.blipNpcOrder.color);
  let shape = _checkpoints.colshapes.new(cfg.start, 'Начальная точка', player => {
    if (!player.vehicle || player.vehicle.remoteId !== currentTaxiCar) return _user.user.notify('Вы должны быть в такси', 'error');
    if (player.getSpeed() > 1) return _user.user.notify('Остановите ТС', "error");
    shape.destroy();
    _user.user.notify('Пассажир в такси, проследуйте до точки высадки', 'success');
    setTimeout(() => {
      if (blip && mp.blips.exists(blip)) blip.destroy();
      const blip2 = _system.system.createBlip(_taxi.TAXI_CONF.blipNpcOrder.blipEnd, _taxi.TAXI_CONF.blipNpcOrder.color, new mp.Vector3(cfg.end.x, cfg.end.y, cfg.end.z), '[TAXI] Забрать пассажира');
      blip2.setRoute(true);
      blip2.setRouteColour(_taxi.TAXI_CONF.blipNpcOrder.color);
      shape = _checkpoints.colshapes.new(cfg.end, 'Точка доставки', player => {
        if (!player.vehicle || player.vehicle.remoteId !== currentTaxiCar) return _user.user.notify('Вы должны быть в такси', 'error');
        if (player.getSpeed() > 1) return _user.user.notify('Остановите ТС', "error");
        if (blip2 && mp.blips.exists(blip2)) blip2.destroy();
        shape.destroy();
        _user.user.notify('Пассажир успешно доставлен', 'success');
        _user.user.clearWaypointHistoryByName('[TAXI]');
        _custom.CustomEvent.triggerServer('taxi:delivernpc');
      }, {
        type: 27,
        radius: 5
      });
    }, 1000);
  }, {
    type: 27,
    radius: 5
  });
});
},{"./custom.event":"py8h","./user":"ggMw","./system":"pi2J","../../shared/taxi":"u758","./checkpoints":"XCJl","./dispatch":"CTZz"}],"VuTb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SELL_FISH_POS = exports.NPC_CUSTOMERS_LIST = void 0;
const SELL_FISH_POS = exports.SELL_FISH_POS = new mp.Vector3(10.77, -2765.96, 2.53);
const NPC_CUSTOMERS_LIST = exports.NPC_CUSTOMERS_LIST = [{
  name: 'Alfredo',
  model: 'a_m_m_prolhost_01',
  pos: new mp.Vector3(-1604.16, -1061.38, 13.02),
  heading: 53,
  items: [{
    item: 819,
    cost: [350, 450],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 820,
    cost: [1000, 1500],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 821,
    cost: [370, 470],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 822,
    cost: [500, 700],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 823,
    cost: [400, 500],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 9210,
    cost: [180, 220],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 9211,
    cost: [300, 400],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 9212,
    cost: [220, 250],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 9213,
    cost: [250, 300],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 9214,
    cost: [280, 350],
    max: 0,
    start: 0,
    perhour: 0
  }],
  dimension: 0,
  license: "fishsell",
  radius: 2,
  allowSellFromVehicle: true,
  background: 'fisher'
}, {
  name: "Mason",
  model: "g_m_m_armlieut_01",
  pos: new mp.Vector3(-1607.10, -1073.28, 13.02),
  heading: 51,
  items: [{
    item: 882,
    cost: 1000,
    max: 30,
    start: 30,
    perhour: 30
  }, {
    item: 884,
    cost: 1000,
    max: 30,
    start: 30,
    perhour: 30
  }],
  dimension: 0,
  radius: 2,
  allowSellFromVehicle: true,
  factions: [23, 24, 25],
  partToFraction: 20,
  background: 'sellman'
}, {
  name: "Скупщик руды Djordan",
  model: "s_m_m_janitor",
  pos: new mp.Vector3(-1627.47, -1088.61, 13.02),
  heading: 53,
  items: [{
    item: 885,
    cost: 750,
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 886,
    cost: 1000,
    max: 50,
    start: 50,
    perhour: 50
  }, {
    item: 887,
    cost: 1250,
    max: 20,
    start: 20,
    perhour: 20
  }],
  dimension: 0,
  radius: 5,
  allowSellFromVehicle: true,
  background: 'miner'
}, {
  name: "Скупщик мяса Gordon",
  model: "s_m_m_migrant_01",
  pos: new mp.Vector3(-1610.81, -1077.52, 13.02),
  heading: 54,
  items: [{
    item: 830,
    cost: [1300, 1800],
    max: 20,
    start: 20,
    perhour: 20
  }, {
    item: 831,
    cost: [200, 700],
    max: 20,
    start: 20,
    perhour: 20
  }, {
    item: 832,
    cost: [1700, 2200],
    max: 10,
    start: 10,
    perhour: 10
  }, {
    item: 833,
    cost: [50, 200],
    max: 50,
    start: 50,
    perhour: 25
  }, {
    item: 834,
    cost: [200, 350],
    max: 40,
    start: 20,
    perhour: 20
  }, {
    item: 835,
    cost: [700, 1200],
    max: 30,
    start: 30,
    perhour: 15
  }, {
    item: 836,
    cost: [700, 1200],
    max: 30,
    start: 30,
    perhour: 15
  }],
  dimension: 0,
  radius: 5,
  allowSellFromVehicle: true,
  license: "hunting",
  background: 'meat'
}, {
  name: "Коллекционер",
  model: "a_m_m_hasjew_01",
  pos: new mp.Vector3(-1616.57, -1084.58, 13.02),
  heading: 52,
  items: [{
    item: 5000,
    cost: [1500, 2000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5001,
    cost: [1400, 1900],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5002,
    cost: [1000, 1600],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5003,
    cost: [4000, 6000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5004,
    cost: [1000, 2000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5005,
    cost: [2000, 3200],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5006,
    cost: [5000, 7000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5007,
    cost: [700, 1100],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5008,
    cost: [200, 2000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5009,
    cost: [500, 1900],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5010,
    cost: [0, 1700],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5011,
    cost: [100, 3000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5012,
    cost: [50, 1350],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5013,
    cost: [20, 5000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5014,
    cost: [3000, 7000],
    max: 90,
    start: 90,
    perhour: 90
  }, {
    item: 5015,
    cost: [6000, 9000],
    max: 90,
    start: 90,
    perhour: 90
  }],
  dimension: 0,
  radius: 5,
  background: 'sellman'
}, {
  name: "Stone",
  model: "s_m_m_cntrybar_01",
  pos: new mp.Vector3(-1608.25, -1066.29, 13.0),
  heading: 71,
  items: [{
    item: 896,
    cost: 1000,
    max: 30,
    start: 30,
    perhour: 30
  }, {
    item: 898,
    cost: 1000,
    max: 30,
    start: 30,
    perhour: 30
  }, {
    item: 7020,
    cost: [350, 400],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7021,
    cost: [355, 405],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7022,
    cost: [375, 410],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7023,
    cost: [370, 425],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7024,
    cost: [320, 405],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7025,
    cost: [365, 430],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7026,
    cost: [335, 390],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7027,
    cost: [375, 430],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7028,
    cost: [325, 395],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7030,
    cost: [460, 480],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 7031,
    cost: [375, 410],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 9000,
    cost: [470, 550],
    max: 0,
    start: 0,
    perhour: 0
  }],
  dimension: 0,
  radius: 5,
  allowSellFromVehicle: true,
  background: 'meat'
}, {
  name: "Охотник за удачей",
  model: "s_m_m_janitor",
  pos: new mp.Vector3(-1628.46, -1097.32, 13.02),
  heading: 47,
  items: [{
    item: 6519,
    cost: [2000, 3000],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 6520,
    cost: [2500, 3500],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 6521,
    cost: [1500, 2000],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 6522,
    cost: [3000, 4000],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 6523,
    cost: [3500, 4500],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 6524,
    cost: [4000, 5000],
    max: 0,
    start: 0,
    perhour: 0
  }, {
    item: 6525,
    cost: [4500, 5500],
    max: 0,
    start: 0,
    perhour: 0
  }],
  dimension: 0,
  radius: 5,
  allowSellFromVehicle: true,
  background: 'pirate'
}];
},{}],"Ij8u":[function(require,module,exports) {
"use strict";

var _npc = require("../../shared/npc.customer");
var _custom = require("./custom.event");
var _npc2 = require("./npc.dialog");
var _system = require("./system");
var _gui = require("./gui");
_npc.NPC_CUSTOMERS_LIST.map((item, itemid) => {
  if (item.blip) _system.system.createDynamicBlip(`npc_customer_${itemid}`, item.blip.id, item.blip.color, item.pos, item.name, {
    fraction: item.factions,
    dimension: item.dimension
  });
  new _npc2.NpcSpawn(item.pos, item.heading, item.model, item.name, () => {
    _custom.CustomEvent.triggerServer('npc:customer:open', itemid);
  }, 10, item.dimension || 0, item.radius);
});
_custom.CustomEvent.registerServer('npc:customer:open', (data, background) => {
  _gui.gui.setGuiWithEvent('buyers', 'buyes:setData', data, background);
});
},{"../../shared/npc.customer":"VuTb","./custom.event":"py8h","./npc.dialog":"CWsZ","./system":"pi2J","./gui":"bk91"}],"U680":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DOCUMENT_GIVE_POSITIONS = exports.DOCUMENT_GIVE_MONEY_FOR_PLAYER_PERCENT = void 0;
const DOCUMENT_GIVE_MONEY_FOR_PLAYER_PERCENT = exports.DOCUMENT_GIVE_MONEY_FOR_PLAYER_PERCENT = 30;
const DOCUMENT_GIVE_POSITIONS = exports.DOCUMENT_GIVE_POSITIONS = [{
  name: "Лицензия на оружие",
  pos: new mp.Vector3(450.62, -973.74, 29.69),
  documents: [{
    id: "weapon_theory",
    cost: 10000
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 2,
  rank: 7
}, {
  name: "Мед справки и лицензии",
  pos: new mp.Vector3(344.34, -589.69, 43.28),
  documents: [{
    id: "mental_examination_ok",
    cost: 5000
  }, {
    id: "mental_examination_middle",
    cost: 5000
  }, {
    id: "phisical_examination_ok",
    cost: 5000
  }],
  license: [{
    id: "med",
    cost: 15000,
    days: 30
  }, {
    id: "reanimation",
    cost: 100000,
    days: 30
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 16,
  rank: 7
}, {
  name: "Гос лицензии и справки",
  pos: new mp.Vector3(-538.15, -196.20, 37.23),
  license: [{
    id: "fishsell",
    cost: 5000,
    days: 30
  }, {
    id: "fishrod",
    cost: 5000,
    days: 30
  }, {
    id: "biz",
    cost: 15000,
    days: 30
  }, {
    id: "advokat",
    cost: 35000,
    days: 30
  }, {
    id: "hunting",
    cost: 5000,
    days: 15
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 1,
  rank: 7
}, {
  name: "Мед справки и лицензии",
  pos: new mp.Vector3(-250.35, 6312.85, 31.43),
  documents: [{
    id: "mental_examination_ok",
    cost: 5000
  }, {
    id: "mental_examination_middle",
    cost: 5000
  }, {
    id: "phisical_examination_ok",
    cost: 5000
  }],
  license: [{
    id: "med",
    cost: 15000,
    days: 30
  }, {
    id: "reanimation",
    cost: 100000,
    days: 30
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 16,
  rank: 7
}, {
  name: "Лицензия на оружие",
  pos: new mp.Vector3(1858.27, 3697.67, 33.27),
  documents: [{
    id: "weapon_theory",
    cost: 10000
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 7,
  rank: 7
}, {
  name: "Лицензия на оружие",
  pos: new mp.Vector3(-442.12, 6006.53, 30.72),
  documents: [{
    id: "weapon_theory",
    cost: 10000
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 7,
  rank: 7
}, {
  name: "Мед справки и лицензии",
  pos: new mp.Vector3(259.97, -1359.23, 23.54),
  documents: [{
    id: "mental_examination_ok",
    cost: 5000
  }, {
    id: "mental_examination_middle",
    cost: 5000
  }, {
    id: "phisical_examination_ok",
    cost: 5000
  }],
  license: [{
    id: "med",
    cost: 15000,
    days: 30
  }, {
    id: "reanimation",
    cost: 100000,
    days: 30
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 16,
  rank: 7
}, {
  name: "Мед справки и лицензии",
  pos: new mp.Vector3(304.57, -571.70, 85.93),
  documents: [{
    id: "mental_examination_ok",
    cost: 5000
  }, {
    id: "mental_examination_middle",
    cost: 5000
  }, {
    id: "phisical_examination_ok",
    cost: 5000
  }],
  license: [{
    id: "med",
    cost: 15000,
    days: 30
  }, {
    id: "reanimation",
    cost: 100000,
    days: 30
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 16,
  rank: 7
}, {
  name: "Мед справки и лицензии",
  pos: new mp.Vector3(356.34, -601.91, 43.28),
  documents: [{
    id: "mental_examination_ok",
    cost: 5000
  }, {
    id: "mental_examination_middle",
    cost: 5000
  }, {
    id: "phisical_examination_ok",
    cost: 5000
  }],
  license: [{
    id: "med",
    cost: 15000,
    days: 30
  }, {
    id: "reanimation",
    cost: 100000,
    days: 30
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 16,
  rank: 7
}, {
  name: "Выдача лицензий",
  pos: new mp.Vector3(-2353.04, 3263.80, 31.81),
  license: [{
    id: "military",
    cost: 1,
    days: 900
  }, {
    id: "air",
    cost: 15000,
    days: 30
  }],
  fraction: 4,
  rank: 13
}, {
  name: "Удостоверение",
  pos: new mp.Vector3(2509.55, -443.80, 105.91),
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 3,
  rank: 6
}, {
  name: "Мед справки и лицензии",
  pos: new mp.Vector3(1830.10, 3673.16, 33.27),
  documents: [{
    id: "mental_examination_ok",
    cost: 5000
  }, {
    id: "mental_examination_middle",
    cost: 5000
  }, {
    id: "phisical_examination_ok",
    cost: 5000
  }],
  license: [{
    id: "med",
    cost: 15000,
    days: 30
  }, {
    id: "reanimation",
    cost: 100000,
    days: 30
  }],
  items: [{
    id: 824,
    cost: 1000
  }],
  fraction: 16,
  rank: 7
}];
},{}],"hsxS":[function(require,module,exports) {
"use strict";

var _documents = require("../../shared/documents");
var _documents2 = require("../../shared/documents.pos");
var _licence = require("../../shared/licence");
var _checkpoints = require("./checkpoints");
var _custom = require("./custom.event");
var _menu = require("./menu");
var _system = require("./system");
var _user = require("./user");
var _markers = require("../../shared/markers.settings");
var _inventory = require("../../shared/inventory");
_documents2.DOCUMENT_GIVE_POSITIONS.map((item, id) => {
  _checkpoints.colshapes.new(item.pos, item.name, player => {
    if (_user.user.fraction !== item.fraction) return _user.user.notify('У вас нет доступа', "error");
    if (_user.user.rank < item.rank) return _user.user.notify(`Доступно с ${item.rank} ранга`, "error");
    const m = new _menu.MenuClass(item.name, 'Список документов');
    if (item.documents) {
      item.documents.map((doc, ids) => {
        m.newItem({
          name: (0, _documents.getDocumentName)(doc.id),
          more: `Стоимость: $${_system.system.numberFormat(doc.cost)}`,
          onpress: () => {
            _menu.MenuClass.closeMenu();
            (0, _menu.DialogInput)('Введите ID игрока, которому выдаем документ', null, 5, 'int').then(val => {
              if (!val || isNaN(val) || val <= 0) return;
              _custom.CustomEvent.triggerServer('document:pos:get', id, 'doc', ids, val);
            });
          }
        });
      });
    }
    if (item.license) {
      item.license.map((doc, ids) => {
        m.newItem({
          name: _licence.LicenseName[doc.id],
          more: `Стоимость: $${_system.system.numberFormat(doc.cost)}. Выдаётся на ${doc.days} дней`,
          onpress: () => {
            _menu.MenuClass.closeMenu();
            (0, _menu.DialogInput)('Введите ID игрока, которому выдаем лицензию', null, 5, 'int').then(val => {
              if (!val || isNaN(val) || val <= 0) return;
              _custom.CustomEvent.triggerServer('document:pos:get', id, 'lic', ids, val);
            });
          }
        });
      });
    }
    if (item.items) {
      item.items.map((item, ids) => {
        m.newItem({
          name: (0, _inventory.getBaseItemNameById)(item.id),
          more: `Стоимость: $${_system.system.numberFormat(item.cost)}`,
          onpress: () => {
            _menu.MenuClass.closeMenu();
            (0, _menu.DialogInput)('Введите ID игрока, которому выдаем предмет', null, 5, 'int').then(val => {
              if (!val || isNaN(val) || val <= 0) return;
              _custom.CustomEvent.triggerServer('document:pos:get', id, 'item', ids, val);
            });
          }
        });
      });
    }
    m.open();
  }, {
    radius: _markers.MARKERS_SETTINGS.DOCUMENT_GIVE.r,
    color: _markers.MARKERS_SETTINGS.DOCUMENT_GIVE.color
  });
});
},{"../../shared/documents":"EDxI","../../shared/documents.pos":"U680","../../shared/licence":"c0dc","./checkpoints":"XCJl","./custom.event":"py8h","./menu":"Aiz7","./system":"pi2J","./user":"ggMw","../../shared/markers.settings":"fusL","../../shared/inventory":"vpPR"}],"BFTN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAFIA_CLEAN_WANTED_CONFIG = void 0;
const MAFIA_CLEAN_WANTED_CONFIG = exports.MAFIA_CLEAN_WANTED_CONFIG = [{
  name: "Reira",
  model: "a_f_y_femaleagent",
  pos: new mp.Vector3(705.81, -966.68, 30.41),
  heading: 300,
  costPerStar: 5000
}, {
  name: "Eduard",
  model: "s_m_y_devinsec_01",
  pos: new mp.Vector3(-749.69, 5589.60, 38.03),
  heading: 231,
  costPerStar: 5000
}, {
  name: "Ivan",
  model: "csb_reporter",
  pos: new mp.Vector3(1702.38, 3290.27, 48.92),
  heading: 286,
  costPerStar: 5000
}];
},{}],"ywkW":[function(require,module,exports) {
"use strict";

var _npc = require("./npc.dialog");
var _mafiaClean = require("../../shared/mafia.clean.wanted");
var _menu = require("./menu");
var _user = require("./user");
var _system = require("./system");
var _custom = require("./custom.event");
const player = mp.players.local;
_mafiaClean.MAFIA_CLEAN_WANTED_CONFIG.map((item, itemid) => {
  new _npc.NpcSpawn(item.pos, item.heading, item.model, item.name, async () => {
    if (!_user.user.family) return _user.user.notify('Я тебя не знаю, уходи', 'error');
    const id = await (0, _menu.DialogInput)('Введите ID игрока', null, 6, 'int');
    if (!id) return;
    if (isNaN(id) || id < 0 || id > 999999) return _user.user.notify('ID указан не верно', 'error');
    const target = mp.players.toArray().find(q => q.handle && q.getVariable('id') == id);
    if (!target) return _user.user.notify('Игрок не обнаружен', 'error');
    if (_system.system.distanceToPos(player.position, target.position) > 5) return _user.user.notify('Игрок должен быть поблизости', 'error');
    if (player.dimension != target.dimension) return _user.user.notify('Игрок должен быть поблизости', 'error');
    const data = await _custom.CustomEvent.callServer('mafia:wanted:data', id);
    if (typeof data === "string") {
      if (data === "NOT_FND") return _user.user.notify('ID указан не верно', 'error');
      if (data === "NOT_NEAR") return _user.user.notify('Игрок должен быть поблизости', 'error');
    } else {
      const m = new _menu.MenuClass(item.name, 'Очистка розыска');
      m.newItem({
        name: `Уровень розыска`,
        more: `${data}`
      });
      m.newItem({
        name: `Стоимость очистки розыска`,
        more: `$${_system.system.numberFormat(item.costPerStar * data)}`
      });
      m.newItem({
        name: `~g~Очистить розыск`,
        desc: 'За очистку розыска вы заплатите со своего кармана, так что не забудьте взять с человека оплату, если вам всё таки нужны деньги',
        onpress: () => {
          m.close();
          _custom.CustomEvent.triggerServer('mafia:wanted:clear', id, itemid);
        }
      });
      m.open();
    }
  });
});
},{"./npc.dialog":"CWsZ","../../shared/mafia.clean.wanted":"BFTN","./menu":"Aiz7","./user":"ggMw","./system":"pi2J","./custom.event":"py8h"}],"He5v":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _gui = require("./gui");
var _lsc = require("./businesses/lsc");
_custom.CustomEvent.registerServer('vehicle:sell:menu', (data, tuning) => {
  let tuningData = tuning.filter(t => {
    if (!mp.players.local.vehicle) return false;
    if (!(0, _lsc.getVehicleMod)(t[0])) return false;
    if ((0, _lsc.getVehicleMod)(t[0]).target == 'bike' && mp.game.vehicle.isThisModelACar(mp.players.local.vehicle.model)) return false;
    if ((0, _lsc.getVehicleMod)(t[0]).target == 'car' && mp.game.vehicle.isThisModelABike(mp.players.local.vehicle.model)) return false;
    return true;
  }).map(t => {
    return {
      id: t[0],
      name: (0, _lsc.getVehicleMod)(t[0]).name
    };
  });
  _gui.gui.setGui('buycar');
  _custom.CustomEvent.triggerCef('buycar:show', {
    name: data.carName,
    owner: data.carOwner,
    price: data.carPrice,
    fuel: data.carFuel,
    fuelType: data.carTypeFuel,
    plate: data.carPlate,
    bag: data.carBag,
    tuning: tuningData,
    pos: data.pos
  });
});
},{"./custom.event":"py8h","./gui":"bk91","./businesses/lsc":"vjs0"}],"dnPV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressFinger = void 0;
var _user = require("./user");
var _voice = require("./voice");
var _gui = require("./gui");
let pointing = {
  active: false,
  interval: null,
  lastSent: 0,
  start: function () {
    if (!pointing.active) {
      pointing.active = true;
      mp.game.streaming.requestAnimDict("anim@mp_point");
      while (!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) {
        mp.game.wait(0);
      }
      mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 0, 1, 1, 1);
      mp.players.local.setConfigFlag(36, true);
      mp.players.local.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
      mp.game.streaming.removeAnimDict("anim@mp_point");
      pointing.interval = setInterval(pointing.process.bind(this), 0);
    }
  },
  stop: function () {
    if (pointing.active) {
      clearInterval(pointing.interval);
      pointing.interval = null;
      pointing.active = false;
      mp.events.callRemote('pointingStop');
      mp.game.invoke("0xd01015c7316ae176", mp.players.local.handle, "Stop");
      if (!mp.players.local.isInAnyVehicle(true)) {
        mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 1, 1, 1, 1);
      }
      mp.players.local.setConfigFlag(36, false);
      _user.user.stopAnim();
    } else {
      mp.console.logInfo("NO ACTIVE POINTING");
    }
  },
  gameplayCam: mp.cameras.new("gameplay"),
  lastSync: 0,
  getRelativePitch: function () {
    let camRot = pointing.gameplayCam.getRot(2);
    return camRot.x - mp.players.local.getPitch();
  },
  process: function () {
    if (pointing.active) {
      mp.game.invoke("0x921ce12c489c4c41", mp.players.local.handle);
      let camPitch = pointing.getRelativePitch();
      if (camPitch < -70.0) {
        camPitch = -70.0;
      } else if (camPitch > 42.0) {
        camPitch = 42.0;
      }
      camPitch = (camPitch + 70.0) / 112.0;
      let camHeading = mp.game.cam.getGameplayCamRelativeHeading();
      let cosCamHeading = mp.game.system.cos(camHeading);
      let sinCamHeading = mp.game.system.sin(camHeading);
      if (camHeading < -180.0) {
        camHeading = -180.0;
      } else if (camHeading > 180.0) {
        camHeading = 180.0;
      }
      camHeading = (camHeading + 180.0) / 360.0;
      let coords = mp.players.local.getOffsetFromGivenWorldCoords(cosCamHeading * -0.2 - sinCamHeading * (0.4 * camHeading + 0.3), sinCamHeading * -0.2 + cosCamHeading * (0.4 * camHeading + 0.3), 0.6);
      let blocked = typeof mp.raycasting.testPointToPoint(new mp.Vector3(coords.x, coords.y, coords.z - 0.2), new mp.Vector3(coords.x, coords.y, coords.z + 0.2), mp.players.local.handle, 7) !== 'undefined';
      mp.game.invoke('0xd5bb4025ae449a4e', mp.players.local.handle, "Pitch", camPitch);
      mp.game.invoke('0xd5bb4025ae449a4e', mp.players.local.handle, "Heading", camHeading * -1.0 + 1.0);
      mp.game.invoke('0xb0a6cfd2c69c1088', mp.players.local.handle, "isBlocked", blocked);
      mp.game.invoke('0xb0a6cfd2c69c1088', mp.players.local.handle, "isFirstPerson", mp.game.invoke('0xee778f8c7e1142e2', mp.game.invoke('0x19cafa3c87f7c2ff')) == 4);
      if (Date.now() - pointing.lastSent > 300) {
        pointing.lastSent = Date.now();
        mp.events.callRemoteUnreliable('fpsync.update', camPitch, camHeading);
      }
    }
  }
};
mp.events.add("fpsync.stop", id => {
  setTimeout(() => {
    let netPlayer = getPlayerByRemoteId(parseInt(id));
    if (netPlayer == null) return;
    netPlayer.clearTasksImmediately();
    netPlayer.lastReceivedPointing = undefined;
    netPlayer.pointingInterval = undefined;
    mp.game.invoke("0xd01015c7316ae176", netPlayer.handle, "Stop");
    if (!netPlayer.isInAnyVehicle(true)) {
      mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 1, 1, 1, 1);
    }
    netPlayer.setConfigFlag(36, false);
    netPlayer.clearTasksImmediately();
  }, 300);
});
mp.events.add("fpsync.update", (id, camPitch, camHeading) => {
  let netPlayer = getPlayerByRemoteId(parseInt(id));
  if (netPlayer != null) {
    if (netPlayer != mp.players.local) {
      netPlayer.lastReceivedPointing = Date.now();
      if (!netPlayer.pointingInterval) {
        netPlayer.pointingInterval = setInterval(function () {
          if (Date.now() - netPlayer.lastReceivedPointing > 500) {
            clearInterval(netPlayer.pointingInterval);
            netPlayer.lastReceivedPointing = undefined;
            netPlayer.pointingInterval = undefined;
            mp.game.invoke("0xd01015c7316ae176", netPlayer.handle, "Stop");
            if (!netPlayer.isInAnyVehicle(true)) {
              mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 1, 1, 1, 1);
            }
            netPlayer.setConfigFlag(36, false);
          }
        }.bind(netPlayer), 500);
        mp.game.streaming.requestAnimDict("anim@mp_point");
        while (!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) {
          mp.game.wait(0);
        }
        mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 0, 1, 1, 1);
        netPlayer.setConfigFlag(36, true);
        netPlayer.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
        mp.game.streaming.removeAnimDict("anim@mp_point");
      }
      mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Pitch", camPitch);
      mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Heading", camHeading * -1.0 + 1.0);
      mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isBlocked", 0);
      mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isFirstPerson", 0);
    }
  }
});
let pressFinger = exports.pressFinger = false;
mp.keys.bind(0x42, true, () => {
  if (!_user.user.login) return;
  if (_gui.gui.currentGui) return;
  if (_user.user.cuffed) return;
  if (_user.user.dead) return;
  if (mp.players.local.vehicle) return;
  if (mp.players.local.isFalling()) return;
  if (mp.game.invoke('0xF92691AED837A5FC', mp.players.local.handle)) return;
  if (_voice.voiceKeyPressed) return;
  if (pressFinger) return;
  if (mp.players.local.getVariable('currentWeapon')) return;
  if (!mp.gui.cursor.visible) {
    exports.pressFinger = pressFinger = true;
    setTimeout(() => {
      exports.pressFinger = pressFinger = false;
    }, 300);
    pointing.start();
  }
});
mp.keys.bind(0x42, false, () => {
  pointing.stop();
});
function getPlayerByRemoteId(remoteId) {
  let pla = mp.players.atRemoteId(remoteId);
  if (pla == undefined || pla == null) {
    return null;
  }
  return pla;
}
},{"./user":"ggMw","./voice":"WpQ0","./gui":"bk91"}],"ziAL":[function(require,module,exports) {
let island = {
  ipls: ["h4_mph4_terrain_01_grass_0", "h4_mph4_terrain_01_grass_1", "h4_mph4_terrain_02_grass_0", "h4_mph4_terrain_02_grass_1", "h4_mph4_terrain_02_grass_2", "h4_mph4_terrain_02_grass_3", "h4_mph4_terrain_04_grass_0", "h4_mph4_terrain_04_grass_1", "h4_mph4_terrain_05_grass_0", "h4_mph4_terrain_06_grass_0 ", "h4_islandx_terrain_01", "h4_islandx_terrain_01_lod", "h4_islandx_terrain_01_slod", "h4_islandx_terrain_02", "h4_islandx_terrain_02_lod", "h4_islandx_terrain_02_slod", "h4_islandx_terrain_03", "h4_islandx_terrain_03_lod", "h4_islandx_terrain_04", "h4_islandx_terrain_04_lod", "h4_islandx_terrain_04_slod", "h4_islandx_terrain_05", "h4_islandx_terrain_05_lod", "h4_islandx_terrain_05_slod", "h4_islandx_terrain_06", "h4_islandx_terrain_06_lod", "h4_islandx_terrain_06_slod", "h4_islandx_terrain_props_05_a", "h4_islandx_terrain_props_05_a_lod", "h4_islandx_terrain_props_05_b", "h4_islandx_terrain_props_05_b_lod", "h4_islandx_terrain_props_05_c", "h4_islandx_terrain_props_05_c_lod", "h4_islandx_terrain_props_05_d", "h4_islandx_terrain_props_05_d_lod", "h4_islandx_terrain_props_05_d_slod", "h4_islandx_terrain_props_05_e", "h4_islandx_terrain_props_05_e_lod", "h4_islandx_terrain_props_05_e_slod", "h4_islandx_terrain_props_05_f", "h4_islandx_terrain_props_05_f_lod", "h4_islandx_terrain_props_05_f_slod", "h4_islandx_terrain_props_06_a", "h4_islandx_terrain_props_06_a_lod", "h4_islandx_terrain_props_06_a_slod", "h4_islandx_terrain_props_06_b", "h4_islandx_terrain_props_06_b_lod", "h4_islandx_terrain_props_06_b_slod", "h4_islandx_terrain_props_06_c", "h4_islandx_terrain_props_06_c_lod", "h4_islandx_terrain_props_06_c_slod", "h4_mph4_terrain_01", "h4_mph4_terrain_01_long_0", "h4_mph4_terrain_02", "h4_mph4_terrain_03", "h4_mph4_terrain_04", "h4_mph4_terrain_05", "h4_mph4_terrain_06", "h4_mph4_terrain_06_strm_0", "h4_mph4_terrain_lod", "h4_mph4_terrain_occ_01", "h4_mph4_terrain_occ_02", "h4_mph4_terrain_occ_03", "h4_mph4_terrain_occ_04", "h4_mph4_terrain_occ_05", "h4_mph4_terrain_occ_06", "h4_mph4_terrain_occ_07", "h4_mph4_terrain_occ_08", "h4_mph4_terrain_occ_09", "h4_islandx", "h4_islandx_disc_strandedshark", "h4_islandx_disc_strandedshark_lod", "h4_islandx_disc_strandedwhale", "h4_islandx_disc_strandedwhale_lod", "h4_islandx_props", "h4_islandx_props_lod", "h4_islandx_sea_mines", "h4_mph4_island", "h4_mph4_island_long_0", "h4_mph4_island_strm_0", "h4_aa_guns_lod", "h4_beach", "h4_beach_bar_props", "h4_beach_lod", "h4_beach_party", "h4_beach_party_lod", "h4_beach_props", "h4_beach_props_lod", "h4_beach_props_party", "h4_beach_props_slod", "h4_beach_slod", "h4_islandairstrip", "h4_islandairstrip_doorsclosed", "h4_islandairstrip_doorsclosed_lod", "h4_islandairstrip_doorsopen", "h4_islandairstrip_doorsopen_lod", "h4_islandairstrip_hangar_props", "h4_islandairstrip_hangar_props_lod", "h4_islandairstrip_hangar_props_slod", "h4_islandairstrip_lod", "h4_islandairstrip_props", "h4_islandairstrip_propsb", "h4_islandairstrip_propsb_lod", "h4_islandairstrip_propsb_slod", "h4_islandairstrip_props_lod", "h4_islandairstrip_props_slod", "h4_islandairstrip_slod", "h4_islandxcanal_props", "h4_islandxcanal_props_lod", "h4_islandxcanal_props_slod", "h4_islandxdock", "h4_islandxdock_lod", "h4_islandxdock_props", "h4_islandxdock_props_2", "h4_islandxdock_props_2_lod", "h4_islandxdock_props_2_slod", "h4_islandxdock_props_lod", "h4_islandxdock_props_slod", "h4_islandxdock_slod", "h4_islandxdock_water_hatch", "h4_islandxtower", "h4_islandxtower_lod", "h4_islandxtower_slod", "h4_islandxtower_veg", "h4_islandxtower_veg_lod", "h4_islandxtower_veg_slod", "h4_islandx_barrack_hatch", "h4_islandx_barrack_props", "h4_islandx_barrack_props_lod", "h4_islandx_barrack_props_slod", "h4_islandx_checkpoint", "h4_islandx_checkpoint_lod", "h4_islandx_checkpoint_props", "h4_islandx_checkpoint_props_lod", "h4_islandx_checkpoint_props_slod", "h4_islandx_maindock", "h4_islandx_maindock_lod", "h4_islandx_maindock_props", "h4_islandx_maindock_props_2", "h4_islandx_maindock_props_2_lod", "h4_islandx_maindock_props_2_slod", "h4_islandx_maindock_props_lod", "h4_islandx_maindock_props_slod", "h4_islandx_maindock_slod", "h4_islandx_mansion", "h4_islandx_mansion_b", "h4_islandx_mansion_b_lod", "h4_islandx_mansion_b_side_fence", "h4_islandx_mansion_b_slod", "h4_islandx_mansion_entrance_fence", "h4_islandx_mansion_guardfence", "h4_islandx_mansion_lights", "h4_islandx_mansion_lockup_01", "h4_islandx_mansion_lockup_01_lod", "h4_islandx_mansion_lockup_02", "h4_islandx_mansion_lockup_02_lod", "h4_islandx_mansion_lockup_03", "h4_islandx_mansion_lockup_03_lod", "h4_islandx_mansion_lod", "h4_islandx_mansion_office", "h4_islandx_mansion_office_lod", "h4_islandx_mansion_props", "h4_islandx_mansion_props_lod", "h4_islandx_mansion_props_slod", "h4_islandx_mansion_slod", "h4_islandx_mansion_vault", "h4_islandx_mansion_vault_lod", "h4_island_padlock_props", "h4_mansion_gate_broken", "h4_mansion_gate_closed", "h4_mansion_remains_cage", "h4_mph4_airstrip", "h4_mph4_airstrip_interior_0_airstrip_hanger", "h4_mph4_beach", "h4_mph4_dock", "h4_mph4_island_lod", "h4_mph4_island_ne_placement", "h4_mph4_island_nw_placement", "h4_mph4_island_se_placement", "h4_mph4_island_sw_placement", "h4_mph4_mansion", "h4_mph4_mansion_b", "h4_mph4_mansion_b_strm_0", "h4_mph4_mansion_strm_0", "h4_mph4_wtowers", "h4_ne_ipl_00", "h4_ne_ipl_00_lod", "h4_ne_ipl_00_slod", "h4_ne_ipl_01", "h4_ne_ipl_01_lod", "h4_ne_ipl_01_slod", "h4_ne_ipl_02", "h4_ne_ipl_02_lod", "h4_ne_ipl_02_slod", "h4_ne_ipl_03", "h4_ne_ipl_03_lod", "h4_ne_ipl_03_slod", "h4_ne_ipl_04", "h4_ne_ipl_04_lod", "h4_ne_ipl_04_slod", "h4_ne_ipl_05", "h4_ne_ipl_05_lod", "h4_ne_ipl_05_slod", "h4_ne_ipl_06", "h4_ne_ipl_06_lod", "h4_ne_ipl_06_slod", "h4_ne_ipl_07", "h4_ne_ipl_07_lod", "h4_ne_ipl_07_slod", "h4_ne_ipl_08", "h4_ne_ipl_08_lod", "h4_ne_ipl_08_slod", "h4_ne_ipl_09", "h4_ne_ipl_09_lod", "h4_ne_ipl_09_slod", "h4_nw_ipl_00", "h4_nw_ipl_00_lod", "h4_nw_ipl_00_slod", "h4_nw_ipl_01", "h4_nw_ipl_01_lod", "h4_nw_ipl_01_slod", "h4_nw_ipl_02", "h4_nw_ipl_02_lod", "h4_nw_ipl_02_slod", "h4_nw_ipl_03", "h4_nw_ipl_03_lod", "h4_nw_ipl_03_slod", "h4_nw_ipl_04", "h4_nw_ipl_04_lod", "h4_nw_ipl_04_slod", "h4_nw_ipl_05", "h4_nw_ipl_05_lod", "h4_nw_ipl_05_slod", "h4_nw_ipl_06", "h4_nw_ipl_06_lod", "h4_nw_ipl_06_slod", "h4_nw_ipl_07", "h4_nw_ipl_07_lod", "h4_nw_ipl_07_slod", "h4_nw_ipl_08", "h4_nw_ipl_08_lod", "h4_nw_ipl_08_slod", "h4_nw_ipl_09", "h4_nw_ipl_09_lod", "h4_nw_ipl_09_slod", "h4_se_ipl_00", "h4_se_ipl_00_lod", "h4_se_ipl_00_slod", "h4_se_ipl_01", "h4_se_ipl_01_lod", "h4_se_ipl_01_slod", "h4_se_ipl_02", "h4_se_ipl_02_lod", "h4_se_ipl_02_slod", "h4_se_ipl_03", "h4_se_ipl_03_lod", "h4_se_ipl_03_slod", "h4_se_ipl_04", "h4_se_ipl_04_lod", "h4_se_ipl_04_slod", "h4_se_ipl_05", "h4_se_ipl_05_lod", "h4_se_ipl_05_slod", "h4_se_ipl_06", "h4_se_ipl_06_lod", "h4_se_ipl_06_slod", "h4_se_ipl_07", "h4_se_ipl_07_lod", "h4_se_ipl_07_slod", "h4_se_ipl_08", "h4_se_ipl_08_lod", "h4_se_ipl_08_slod", "h4_se_ipl_09", "h4_se_ipl_09_lod", "h4_se_ipl_09_slod", "h4_sw_ipl_00", "h4_sw_ipl_00_lod", "h4_sw_ipl_00_slod", "h4_sw_ipl_01", "h4_sw_ipl_01_lod", "h4_sw_ipl_01_slod", "h4_sw_ipl_02", "h4_sw_ipl_02_lod", "h4_sw_ipl_02_slod", "h4_sw_ipl_03", "h4_sw_ipl_03_lod", "h4_sw_ipl_03_slod", "h4_sw_ipl_04", "h4_sw_ipl_04_lod", "h4_sw_ipl_04_slod", "h4_sw_ipl_05", "h4_sw_ipl_05_lod", "h4_sw_ipl_05_slod", "h4_sw_ipl_06", "h4_sw_ipl_06_lod", "h4_sw_ipl_06_slod", "h4_sw_ipl_07", "h4_sw_ipl_07_lod", "h4_sw_ipl_07_slod", "h4_sw_ipl_08", "h4_sw_ipl_08_lod", "h4_sw_ipl_08_slod", "h4_sw_ipl_09", "h4_sw_ipl_09_lod", "h4_sw_ipl_09_slod", "h4_underwater_gate_closed", "h4_islandx_placement_01", "h4_islandx_placement_02", "h4_islandx_placement_03", "h4_islandx_placement_04", "h4_islandx_placement_05", "h4_islandx_placement_06", "h4_islandx_placement_07", "h4_islandx_placement_08", "h4_islandx_placement_09", "h4_islandx_placement_10", "h4_mph4_island_placement"]
};
class HeistIslandMP {
  constructor() {
    this.isLoaded = false;
    this.isMapLoaded = false;
    this.islandBounds = [];
    this.player = mp.players.local;
    this.islandBounds.push([3326.365, -4240.541]);
    this.islandBounds.push([5072.705, -3550.056]);
    this.islandBounds.push([6269.617, -6009.813]);
    this.islandBounds.push([4297.188, -6994.53]);
    setInterval(async () => {
      if (!this.player) return;
      const isWithinIslandBounds = this.isPointInPolygon(this.player.position.x, this.player.position.y, this.islandBounds);
      if (isWithinIslandBounds && !this.isMapLoaded) {
        this.isMapLoaded = true;
        mp.game.invoke("0x5E1460624D194A38", this.isMapLoaded);
      } else if (!isWithinIslandBounds && this.isMapLoaded) {
        this.isMapLoaded = false;
        mp.game.invoke("0x5E1460624D194A38", this.isMapLoaded);
      }
      if (!this.isLoaded) {
        this.isLoaded = true;
        for (let i = 0; i < island.ipls.length; i++) {
          mp.game.streaming.requestIpl(island.ipls[i]);
        }
        const interior = mp.game.interior.getInteriorAtCoords(4840.571, -5174.425, 2.0);
        mp.game.interior.refreshInterior(interior);
      }
    }, 500);
  }
  isPointInPolygon(x, y, polygon) {
    if (typeof x !== 'number' || typeof y !== 'number') {
      return mp.gui.chat.push('Invalid latitude or longitude. Numbers are expected');
    } else if (!polygon || !Array.isArray(polygon)) {
      return mp.gui.chat.push('Invalid polygon. Array with locations expected');
    } else if (polygon.length === 0) {
      return mp.gui.chat.push('Invalid polygon. Non-empty Array expected');
    }
    let inside = false;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const xi = polygon[i][0];
      const yi = polygon[i][1];
      const xj = polygon[j][0];
      const yj = polygon[j][1];
      const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) inside = !inside;
    }
    return inside;
  }
}
const update = new HeistIslandMP();
},{}],"y0tC":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _checkpoints = require("./checkpoints");
var _anim = require("./anim");
let isAlreadyPlacingBag = false;
let localBlip = null;
let localColshape = null;
_custom.CustomEvent.registerServer('boxgame:readyStart', (type, name, time) => {
  _custom.CustomEvent.triggerCef('hud:gamebox', type, name, time);
});
_custom.CustomEvent.registerServer('boxgame:stopBag', () => {
  takeBag();
});
_custom.CustomEvent.registerServer('boxgame:takeBag', pos => {
  localBlip = mp.blips.new(164, new mp.Vector3(pos.x, pos.y, pos.z), {
    name: 'Доставить сумку',
    scale: 0.9,
    color: 1,
    shortRange: false,
    dimension: 0
  });
  localColshape = _checkpoints.colshapes.new(new mp.Vector3(pos.x, pos.y, pos.z - 1), "Положить сумку", player => {
    if (isAlreadyPlacingBag) return;
    isAlreadyPlacingBag = true;
    (0, _anim.playAnimationWithResult)(['anim@heists@money_grab@duffel', 'loop'], 3, "Сдача сумки").then(isDone => {
      if (!isDone) return;
      takeBag();
      _custom.CustomEvent.triggerServer('boxgame:bagEnd');
    });
  }, {
    radius: 2
  });
});
let takeBag = () => {
  localBlip.destroy();
  localBlip = null;
  localColshape.destroy();
  localColshape = null;
  isAlreadyPlacingBag = false;
};
},{"./custom.event":"py8h","./checkpoints":"XCJl","./anim":"stJJ"}],"PCni":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEATHMATCH_COLOR = void 0;
const DEATHMATCH_COLOR = exports.DEATHMATCH_COLOR = [179, 0, 0, 0.5];
},{}],"d354":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _deathmatch = require("../../shared/deathmatch");
var _system = require("./system");
var _user = require("./user");
var _controls = require("./controls");
var _hudBar = require("./hudBar");
const player = mp.players.local;
let team1 = [];
let team2 = [];
let team1_name;
let team2_name;
let team1_image;
let team2_image;
let name;
let center;
let radius;
let dimension;
let marker;
let blipitem;
let blip;
let disableShoot = false;
let enable = false;
let spectator = false;
let time;
let isCapture;
_custom.CustomEvent.registerServer('deathmath:stop', (full = true) => {
  enable = false;
  isCapture = false;
  if (!full) {
    setTimeout(() => {
      _custom.CustomEvent.triggerCef('capture:stop');
    }, 5000);
    return;
  }
  _custom.CustomEvent.triggerCef('capture:stop');
  if (marker && mp.markers.exists(marker)) marker.destroy();
  marker = null;
  if (blipitem) {
    if (mp.blips.exists(blipitem)) blipitem.destroy();
    blipitem = null;
  }
  blip = null;
});
_custom.CustomEvent.registerServer('deathmath:start', (data, spect = false, startnow = true, waitSeconds, zoneId) => {
  team1 = data[0];
  team2 = data[1];
  team1_name = data[2];
  team2_name = data[3];
  name = data[4];
  center = new mp.Vector3(data[5][0], data[5][1], data[5][2]);
  radius = data[5][3];
  dimension = data[6];
  marker = mp.markers.new(1, new mp.Vector3(center.x, center.y, center.z - 20), radius * 2, {
    color: _deathmatch.DEATHMATCH_COLOR,
    dimension
  });
  isCapture = !!zoneId;
  if (!isCapture) {
    blipitem = mp.blips.new(4, new mp.Vector3(center.x, center.y, center.z), {
      color: 1,
      rotation: 0,
      dimension,
      radius
    });
    blip = blipitem.handle;
    mp.game.invoke('0xDF735600A4696DAF', blip, 4);
    mp.game.invoke('0x03D7FB09E75D6B7E', blip, 1);
  }
  time = data[7];
  team1_image = data[8];
  team2_image = data[9];
  disableShoot = true;
  if (!startnow) {
    if (waitSeconds) {
      _hudBar.hudBar.timer('Начало боя', waitSeconds);
    }
    return;
  }
  let send = {
    show: true,
    type: name,
    capture: [{
      name: team1_name,
      image: team1_image,
      score: 0
    }, {
      name: team2_name,
      image: team2_image,
      score: 0
    }],
    killist: [],
    time,
    start: false
  };
  _custom.CustomEvent.triggerCef('capture:update', send);
  spectator = spect;
  disableShoot = false;
  setTimeout(() => {
    enable = true;
  }, 5000);
});
let notifyNearest = false;
setInterval(() => {
  if (!enable) return;
  if (isCapture) return;
  if (spectator) return;
  const dist = _system.system.distanceToPos(player.position, center);
  const nearest = dist > radius - 10;
  const outside = dist > radius;
  if (nearest && !outside) {
    if (notifyNearest) {
      notifyNearest = true;
      _user.user.notify('Осторожно, вы находитесь рядом с границей игровой зоны. Её запрещено покидать', 'error');
    }
  } else {
    notifyNearest = false;
  }
  if (dist < radius) return;
  if (player.getHealth() <= 0) return;
  _user.user.notify('Вы покинули игровую зону', 'error');
  player.setHealth(0);
}, 400);
mp.events.add('render', () => {
  if (disableShoot) {
    _controls.disableControlGroup.saveZone();
  }
});
},{"./custom.event":"py8h","../../shared/deathmatch":"PCni","./system":"pi2J","./user":"ggMw","./controls":"yuOK","./hudBar":"WSqW"}],"cDXP":[function(require,module,exports) {
"use strict";

var _gangwar = require("../../shared/gangwar");
var _user = require("./user");
var _custom = require("./custom.event");
var _fractions = require("./fractions");
var _system = require("./system");
let zoneControl = new Map();
const blips = [];
_custom.CustomEvent.registerServer('zoneControl:sync', data => data.map(q => zoneControl.set(q[0], q[1])));
const getZoneConfig = id => {
  return _gangwar.GANGWAR_ZONES.find(q => q.id === id);
};
let q = 686;
_gangwar.GANGWAR_ZONES.map(zone => {
  const blipitem = mp.blips.new(5, new mp.Vector3(zone.x, zone.y, zone.z), {
    color: 1,
    rotation: 0,
    dimension: -1,
    radius: _gangwar.GANGWAR_RADIUS
  });
  blips.push([blipitem, zone.id]);
  zoneControl.set(zone.id, 0);
});
let adminShowGangZones = false;
_custom.CustomEvent.registerServer('admin:gangzones:show', () => {
  adminShowGangZones = !adminShowGangZones;
  _user.user.notify(`Просмотр территорий банд - ${adminShowGangZones ? "включён" : "выключен"}`);
});
mp.events.add('render', () => {
  if (_user.user.is_gang || adminShowGangZones) {
    if (mp.players.local.dimension) return;
    if (blips.length !== 0) {
      blips.forEach(blip => {
        blip[0].setRotation(0);
      });
    }
  }
});
let currentZoneFight = null;
let gangwarBlips = [];
let fightCenter;
let stage = null;
_custom.CustomEvent.registerServer('deathmath:stop', (full = true) => {
  if (!currentZoneFight) return;
  currentZoneFight = null;
  stage = null;
  gangwarBlips.forEach(b => {
    mp.game.invoke('0xB14552383D39CE3E', b.handle, false);
    b.dimension = 0;
  });
  gangwarBlips = [];
});
const isAttacker = () => zoneControl.get(currentZoneFight) == _user.user.fraction;
const isAttackerInUnavailablePosition = () => {
  const cfg = getZoneConfig(currentZoneFight);
  return _system.system.isPointInRectangle2D({
    x: mp.players.local.position.x,
    y: mp.players.local.position.y
  }, {
    x: cfg.x + _gangwar.GANGWAR_RADIUS,
    y: cfg.y + _gangwar.GANGWAR_RADIUS
  }, {
    x: cfg.x - _gangwar.GANGWAR_RADIUS,
    y: cfg.y - _gangwar.GANGWAR_RADIUS
  });
};
const isPlayerOusideCapture = () => {
  const cfg = getZoneConfig(currentZoneFight);
  return !_system.system.isPointInRectangle2D({
    x: mp.players.local.position.x,
    y: mp.players.local.position.y
  }, {
    x: cfg.x + 3 * _gangwar.GANGWAR_RADIUS,
    y: cfg.y + 3 * _gangwar.GANGWAR_RADIUS
  }, {
    x: cfg.x - 3 * _gangwar.GANGWAR_RADIUS,
    y: cfg.y - 3 * _gangwar.GANGWAR_RADIUS
  });
};
const isDefenderInUnavailablePosition = () => !isAttackerInUnavailablePosition();
_custom.CustomEvent.registerServer('deathmath:start', (data, spect = false, startnow = true, waitSeconds, zoneId) => {
  if (!zoneId) return;
  const player = mp.players.local;
  currentZoneFight = zoneId;
  const blip = blips.find(b => b[1] == zoneId)[0];
  gangwarBlips = [];
  gangwarBlips.push(blip);
  fightCenter = new mp.Vector3(data[5][0], data[5][1], data[5][2]);
  const nearest = getNearestBlips(zoneId);
  nearest.forEach(z => {
    const bl = blips.find(b => b[1] == z.id)[0];
    gangwarBlips.push(bl);
  });
  mp.game.invoke('0xB14552383D39CE3E', blip.handle, true);
  setTimeout(() => blips.forEach(b => {
    stage = startnow ? "fight" : "prepare";
    if (stage == "prepare" && isAttacker()) _user.user.notify('Доберитесь до зоны проведения войны за территорию');
    if (!gangwarBlips.includes(b[0])) {
      b[0].setAlpha(0);
    }
    if (startnow) {
      if (player.getHealth() <= 0) return;
      if (isPlayerOusideCapture()) {
        _user.user.notify('Вы находились за пределами зоны', 'warning');
        player.setHealth(0);
      } else if (isAttacker() && isAttackerInUnavailablePosition()) {
        _user.user.notify('Вы находились в недоступной зоне', 'warning');
        player.setHealth(0);
      } else if (!isAttacker() && isDefenderInUnavailablePosition()) {
        _user.user.notify('Вы находились в недоступной зоне', 'warning');
        player.setHealth(0);
      } else if (mp.players.local.vehicle) {
        _user.user.notify('Вы должны были покинуть ТС до начала боя', 'warning');
        player.setHealth(0);
      }
    }
  }), _system.system.TELEPORT_TIME + 100);
});
const getNearestBlips = zoneId => {
  const cfg = getZoneConfig(zoneId);
  return _gangwar.GANGWAR_ZONES.filter(z => _system.system.isPointInRectangle2D({
    x: z.x,
    y: z.y
  }, {
    x: cfg.x + 2.5 * _gangwar.GANGWAR_RADIUS,
    y: cfg.y + 2.5 * _gangwar.GANGWAR_RADIUS
  }, {
    x: cfg.x - 2.5 * _gangwar.GANGWAR_RADIUS,
    y: cfg.y - 2.5 * _gangwar.GANGWAR_RADIUS
  }));
};
setInterval(() => {
  if (!currentZoneFight) return;
  if (stage == "prepare") {
    if (isAttacker()) {
      if (isAttackerInUnavailablePosition()) _user.user.notify('Осторожно, вы находитесь в зоне, недоступной для подготовки атаки. Срочно покиньте квадрат!', 'warning');
    } else {
      if (isDefenderInUnavailablePosition()) _user.user.notify('Осторожно, вы находитесь в зоне, недоступной для подготовки защиты. Срочно вернитесь в квадрат!', 'warning');
    }
  } else if (stage == "fight") {
    if (isPlayerOusideCapture() && mp.players.local.getHealth() > 0) {
      _user.user.notify('Вы находились за пределами зоны', 'warning');
      mp.players.local.setHealth(0);
    }
  }
}, 800);
setInterval(() => {
  if (mp.players.local.dimension) return;
  if (blips.length !== 0) {
    blips.forEach(blip => {
      const handle = blip[0].handle;
      if (!handle) return;
      blip[0].setSprite(5);
      if (_user.user.is_gang) {
        const cfg = getZoneConfig(blip[1]);
        if (cfg) blip[0].setAlpha(cfg.spawn ? 220 : 175);else blip[0].setAlpha(175);
        const fractionid = zoneControl.get(blip[1]);
        if (fractionid) {
          const fraction = _fractions.fractionCfg.getFraction(fractionid);
          if (fraction && fraction.blipgangcolor) blip[0].setColour(fraction.blipgangcolor);
        } else {
          blip[0].setColour(1);
        }
      } else {
        blip[0].setAlpha(0);
      }
    });
  }
}, 1000);
},{"../../shared/gangwar":"cBiX","./user":"ggMw","./custom.event":"py8h","./fractions":"ZnXR","./system":"pi2J"}],"yCG7":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _gui = require("./gui");
_custom.CustomEvent.registerServer('wintask:create', (taskName, item) => {
  _gui.gui.setGui('wintask');
  _custom.CustomEvent.triggerCef('wintask:show', taskName, item);
});
},{"./custom.event":"py8h","./gui":"bk91"}],"Mg1f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newRankRules = exports.getRankRuleName = exports.getFamilyUpgradeLevelPrice = exports.getFamilyFractionName = exports.family_max_users = exports.family_max_rank = exports.family_max_cars = exports.family_max_cargo = exports.familyMemberActions = exports.Timetable = exports.LevelInfo = exports.FamilyUpgrade = exports.FamilyTasksLoading = exports.FamilyTasks = exports.FamilyReputationType = exports.FamilyRankPermission = exports.FamilyPermissions = exports.FamilyExtraTaskTypes = exports.FamilyContracts = exports.FamilyContractWinTypes = exports.FamilyContractList = exports.FAMILY_TO_ORGANIZATION_MIN_LEVEL = exports.FAMILY_TIMEOUT_AFTER_CARGO_REQUEST = exports.FAMILY_REQUEST_CARGO_PRICE = exports.FAMILY_REQUEST_CARGO_AMOUNT = exports.FAMILY_CREATE_POS_GOS = exports.FAMILY_CREATE_POS_CRIME = exports.FAMILY_CREATE_MONEY = exports.FAMILY_CREATE_COINS = exports.FAMILY_CONTRACT_UPD_TIME = exports.CONTRACT_NUM_FOR_FAMILY = void 0;
var _system = require("./system");
const FAMILY_TO_ORGANIZATION_MIN_LEVEL = exports.FAMILY_TO_ORGANIZATION_MIN_LEVEL = 4;
const getFamilyFractionName = type => {
  return type == FamilyReputationType.CIVILIAN ? 'ЧОП' : 'Мафия';
};
exports.getFamilyFractionName = getFamilyFractionName;
var FamilyReputationType;
(function (FamilyReputationType) {
  FamilyReputationType[FamilyReputationType["CIVILIAN"] = 0] = "CIVILIAN";
  FamilyReputationType[FamilyReputationType["CRIME"] = 1] = "CRIME";
})(FamilyReputationType || (exports.FamilyReputationType = FamilyReputationType = {}));
const familyMemberActions = exports.familyMemberActions = [{
  id: 0,
  name: 'Ограбление человека',
  scores: 2,
  cooldown: 5
}, {
  id: 1,
  name: 'Угон автомобиля',
  scores: 3,
  cooldown: 10
}, {
  id: 2,
  name: 'Ограбление ячейки',
  scores: 2,
  cooldown: 10
}, {
  id: 3,
  name: 'Подрыв двери',
  scores: 5
}, {
  id: 4,
  name: 'Победа в войне за территорию',
  scores: 5
}, {
  id: 5,
  name: 'Ограбление кассы магазина',
  scores: 3,
  cooldown: 10
}, {
  id: 6,
  name: 'Выписка штрафа',
  scores: 2,
  cooldown: 10
}, {
  id: 7,
  name: 'Реанимация игрока',
  scores: 3,
  cooldown: 10
}, {
  id: 8,
  name: 'Эвакуация ТС',
  scores: 2,
  cooldown: 10
}, {
  id: 9,
  name: 'Отправка на штрафстоянку ТС',
  scores: 3,
  cooldown: 10
}, {
  id: 10,
  name: 'Арест за угон авто',
  scores: 5,
  cooldown: 10
}];
const newRankRules = exports.newRankRules = [{
  id: 1,
  name: 'Покупка транспорта'
}, {
  id: 2,
  name: 'Продажа транспорта в государство'
}, {
  id: 3,
  name: 'Доставка транспорта к гаражу'
}, {
  id: 4,
  name: 'Заказ груза'
}, {
  id: 5,
  name: 'Создание дубликата ключей'
}, {
  id: 6,
  name: 'Принятие в семью'
}, {
  id: 7,
  name: 'Исключать из семьи, изменять ранги'
}, {
  id: 8,
  name: 'Запускать войну за бизнесы'
}, {
  id: 9,
  name: 'Участвовать в войне за бизнес'
}];
const getRankRuleName = id => {
  return newRankRules.find(r => r.id === id);
};
exports.getRankRuleName = getRankRuleName;
const Timetable = exports.Timetable = [{
  start: '14:00',
  stop: '22:00',
  name: 'Борьба за груз',
  desc: 'проходит в данном интервале времени каждый день'
}];
var FamilyContractWinTypes;
(function (FamilyContractWinTypes) {
  FamilyContractWinTypes[FamilyContractWinTypes["MONEY"] = 9999] = "MONEY";
  FamilyContractWinTypes[FamilyContractWinTypes["COINS"] = 10000] = "COINS";
  FamilyContractWinTypes[FamilyContractWinTypes["FAMILY_POINTS"] = 10001] = "FAMILY_POINTS";
})(FamilyContractWinTypes || (exports.FamilyContractWinTypes = FamilyContractWinTypes = {}));
const family_max_rank = exports.family_max_rank = 10;
const family_max_cars = exports.family_max_cars = 20;
const family_max_cargo = exports.family_max_cargo = 3000;
const family_max_users = exports.family_max_users = 50;
const FAMILY_CREATE_MONEY = exports.FAMILY_CREATE_MONEY = 1000000;
const FAMILY_CREATE_COINS = exports.FAMILY_CREATE_COINS = 2999;
const FAMILY_CREATE_POS_GOS = exports.FAMILY_CREATE_POS_GOS = {
  x: -550.88,
  y: -188.85,
  z: 37.23
};
const FAMILY_CREATE_POS_CRIME = exports.FAMILY_CREATE_POS_CRIME = {
  x: -800.68,
  y: 171.59,
  z: 71.94
};
const FAMILY_TIMEOUT_AFTER_CARGO_REQUEST = exports.FAMILY_TIMEOUT_AFTER_CARGO_REQUEST = 60 * 5 * 60;
const FAMILY_REQUEST_CARGO_AMOUNT = exports.FAMILY_REQUEST_CARGO_AMOUNT = 1500;
const FAMILY_REQUEST_CARGO_PRICE = exports.FAMILY_REQUEST_CARGO_PRICE = 60000;
var FamilyRankPermission;
(function (FamilyRankPermission) {
  FamilyRankPermission[FamilyRankPermission["FAMILY_LEADER"] = 10000] = "FAMILY_LEADER";
  FamilyRankPermission[FamilyRankPermission["FAMILY_SUBLEADER"] = 10001] = "FAMILY_SUBLEADER";
})(FamilyRankPermission || (exports.FamilyRankPermission = FamilyRankPermission = {}));
const FamilyPermissions = exports.FamilyPermissions = {
  buyHouse: FamilyRankPermission.FAMILY_LEADER,
  changeLock: FamilyRankPermission.FAMILY_LEADER,
  keyDublicate: 5,
  sellHouse: FamilyRankPermission.FAMILY_LEADER,
  sellVehicle: 2,
  invite: 6,
  payTax: FamilyRankPermission.FAMILY_LEADER,
  buyCar: 1,
  houseUpgrade: FamilyRankPermission.FAMILY_LEADER,
  level_up: FamilyRankPermission.FAMILY_LEADER,
  kick: 7,
  setRank: 7,
  car_park: 3,
  car_teleport: FamilyRankPermission.FAMILY_SUBLEADER,
  money_take: FamilyRankPermission.FAMILY_SUBLEADER,
  request_cargo: 4,
  bizwar_start: 8,
  bizwar_join: 9
};
const FamilyTasksLoading = exports.FamilyTasksLoading = [{
  type: 0,
  loadingCoords: [{
    x: 1240.8,
    y: -3135.55,
    z: 4.63
  }, {
    x: 1240.8,
    y: -3142.07,
    z: 4.63
  }, {
    x: 1240.8,
    y: -3148.96,
    z: 4.63
  }, {
    x: 1240.8,
    y: -3155.70,
    z: 4.63
  }],
  carRegisterCoords: [{
    x: 1246.17,
    y: -3189.19,
    z: 5.13
  }],
  loadingBlip: [{
    x: 1239.95,
    y: -3145.58,
    z: 5.53
  }],
  requestCargoNpc: [{
    x: 1243.60,
    y: -3196.76,
    z: 6.03,
    h: 282,
    model: 's_m_y_construct_02'
  }]
}];
const FamilyExtraTaskTypes = exports.FamilyExtraTaskTypes = {
  'cargoBattle': {}
};
var FamilyContractList;
(function (FamilyContractList) {
  FamilyContractList[FamilyContractList["delivers"] = 1] = "delivers";
  FamilyContractList[FamilyContractList["taxists"] = 2] = "taxists";
  FamilyContractList[FamilyContractList["builders"] = 3] = "builders";
  FamilyContractList[FamilyContractList["garders"] = 4] = "garders";
  FamilyContractList[FamilyContractList["helpers"] = 5] = "helpers";
  FamilyContractList[FamilyContractList["cleaners"] = 6] = "cleaners";
  FamilyContractList[FamilyContractList["moneytransfers"] = 7] = "moneytransfers";
  FamilyContractList[FamilyContractList["onliners"] = 8] = "onliners";
  FamilyContractList[FamilyContractList["fishers"] = 9] = "fishers";
  FamilyContractList[FamilyContractList["drifters"] = 10] = "drifters";
  FamilyContractList[FamilyContractList["farmers"] = 11] = "farmers";
  FamilyContractList[FamilyContractList["robbers"] = 12] = "robbers";
})(FamilyContractList || (exports.FamilyContractList = FamilyContractList = {}));
const FAMILY_CONTRACT_UPD_TIME = exports.FAMILY_CONTRACT_UPD_TIME = 60 * 60 * 2;
const CONTRACT_NUM_FOR_FAMILY = exports.CONTRACT_NUM_FOR_FAMILY = 5;
const FamilyContracts = exports.FamilyContracts = [{
  id: 1,
  type: FamilyContractList.delivers,
  name: "Доставщики",
  desc: `Всей семьёй отвезите ${_system.systemUtil.numberFormat(100)} грузов на работе дальнобойщика`,
  needScore: 100,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 2,
  type: FamilyContractList.taxists,
  name: "Таксопарк",
  desc: `Всей семьёй выполните ${_system.systemUtil.numberFormat(100)} заказов работая таксистом`,
  needScore: 100,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 3,
  type: FamilyContractList.builders,
  name: "Прорабы",
  desc: `2 раз выполнить работу ремонта квартиры (Складывается с каждого члена семьи)`,
  needScore: 2,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 4,
  type: FamilyContractList.garders,
  name: "Садовники",
  desc: `Всей семьёй заработать в саду $${_system.systemUtil.numberFormat(50000)}`,
  needScore: 50000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 5,
  type: FamilyContractList.helpers,
  name: "Помощники",
  desc: `Всей семьёй заработать $${_system.systemUtil.numberFormat(50000)} помогая в гараже Тони`,
  needScore: 50000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 6,
  type: FamilyContractList.cleaners,
  name: "Чистильщики",
  desc: `Всей семьёй заработать $${_system.systemUtil.numberFormat(50000)} на мойке окон`,
  needScore: 50000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 7,
  type: FamilyContractList.moneytransfers,
  name: "Развозчик денег",
  desc: `Всей семьёй заработать $${_system.systemUtil.numberFormat(100000)} работая инкассатором`,
  needScore: 100000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 8,
  type: FamilyContractList.onliners,
  name: "Усидчивые",
  desc: `Пробыть в сумме всей семьёй в онлайне ${_system.systemUtil.numberFormat(80)} часов (Онлайн каждого члена семьи складывается)`,
  needScore: 80,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 9,
  type: FamilyContractList.fishers,
  name: "Рыбный промысел",
  desc: `Поймать всей семьёй ${_system.systemUtil.numberFormat(3000)} рыб`,
  needScore: 3000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 10,
  type: FamilyContractList.drifters,
  name: "Семья дрифтеров",
  desc: `Набрать всей семьёй ${_system.systemUtil.numberFormat(2000000)} очков на дрифт трассе`,
  needScore: 2000000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }, {
    type: FamilyContractWinTypes.MONEY,
    amount: 50000
  }]
}, {
  id: 11,
  type: FamilyContractList.farmers,
  name: "Старший Шахтёр",
  desc: `Добыть ${_system.systemUtil.numberFormat(50)} каменной породы в карьере`,
  needScore: 50,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 1000
  }]
}, {
  id: 12,
  type: FamilyContractList.farmers,
  name: "Младший Шахтёр",
  desc: `Добыть ${_system.systemUtil.numberFormat(25)} каменной породы в карьере`,
  needScore: 25,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 13,
  type: FamilyContractList.delivers,
  name: "Доставщики",
  desc: `Всей семьёй отвезите ${_system.systemUtil.numberFormat(50)} грузов на работе дальнобойщика`,
  needScore: 50,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 14,
  type: FamilyContractList.taxists,
  name: "Таксопарк",
  desc: `Всей семьёй выполните ${_system.systemUtil.numberFormat(50)} заказов работая таксистом`,
  needScore: 50,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 15,
  type: FamilyContractList.builders,
  name: "Прорабы",
  desc: `2 раз выполнить работу ремонта квартиры (Складывается с каждого члена семьи)`,
  needScore: 1,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 16,
  type: FamilyContractList.garders,
  name: "Садовники",
  desc: `Всей семьёй заработать в саду $${_system.systemUtil.numberFormat(25000)}`,
  needScore: 25000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 17,
  type: FamilyContractList.helpers,
  name: "Помощники",
  desc: `Всей семьёй заработать $${_system.systemUtil.numberFormat(25000)} помогая в гараже Тони`,
  needScore: 25000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 18,
  type: FamilyContractList.cleaners,
  name: "Чистильщики",
  desc: `Всей семьёй заработать $${_system.systemUtil.numberFormat(25000)} на мойке окон`,
  needScore: 25000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 19,
  type: FamilyContractList.moneytransfers,
  name: "Развозчик денег",
  desc: `Всей семьёй заработать $${_system.systemUtil.numberFormat(50000)} работая инкассатором`,
  needScore: 50000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 20,
  type: FamilyContractList.onliners,
  name: "Усидчивые",
  desc: `Пробыть в сумме всей семьёй в онлайне ${_system.systemUtil.numberFormat(40)} часов (Онлайн каждого члена семьи складывается)`,
  needScore: 40,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 21,
  type: FamilyContractList.fishers,
  name: "Рыбный промысел",
  desc: `Поймать всей семьёй ${_system.systemUtil.numberFormat(1500)} рыб`,
  needScore: 1500,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }]
}, {
  id: 22,
  type: FamilyContractList.drifters,
  name: "Семья дрифтеров",
  desc: `Набрать всей семьёй ${_system.systemUtil.numberFormat(1000000)} очков на дрифт трассе`,
  needScore: 1000000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }, {
    type: FamilyContractWinTypes.MONEY,
    amount: 25000
  }]
}, {
  id: 23,
  type: FamilyContractList.robbers,
  name: "Грабители",
  desc: `Ограбить всей семьёй кассы бизнесов на сумму ${_system.systemUtil.numberFormat(75000)}`,
  needScore: 75000,
  win: [{
    type: FamilyContractWinTypes.FAMILY_POINTS,
    amount: 500
  }, {
    type: FamilyContractWinTypes.MONEY,
    amount: 25000
  }]
}];
const FamilyTasks = exports.FamilyTasks = [{
  type: 0,
  name: 'Транспортировка гвоздей и короб',
  info: 'Отвезите груз со склада на стройку.',
  desc: 'за коробку',
  scores: 10,
  money: 700,
  color: '',
  importCoords: [{
    x: -457.02,
    y: -889.26,
    z: 22.76
  }, {
    x: -453.31,
    y: -889.43,
    z: 22.76
  }, {
    x: -449.13,
    y: -889.16,
    z: 22.76
  }]
}, {
  type: 0,
  name: 'Доставка инструментов',
  info: 'Отвезите инструменты в You Tool.',
  desc: 'за коробку',
  color: 'green',
  scores: 10,
  money: 700,
  importCoords: [{
    x: 2684.53,
    y: 3515.77,
    z: 52.40
  }, {
    x: 2680.99,
    y: 3507.77,
    z: 52.40
  }, {
    x: 2676.10,
    y: 3500.36,
    z: 52.40
  }]
}, {
  type: 0,
  name: 'Доставка семян апельсинового дерева',
  info: 'Отвезите семена апельсинов на ферму.',
  desc: 'за коробку',
  color: 'orange',
  scores: 10,
  money: 700,
  importCoords: [{
    x: 2306.87,
    y: 4882.40,
    z: 40.91
  }, {
    x: 2312.82,
    y: 4889.51,
    z: 40.91
  }]
}];
const LevelInfo = exports.LevelInfo = [{
  desc: 'Вы можете владеть домами и семейным автопарком.',
  members: 0,
  scores: 0,
  wins: 0,
  coin: 0,
  canBuyMultiHouse: true,
  canBuyCustomHouse: true,
  canBuyAirHouse: false
}, {
  desc: 'Возможность владеть домами семей с увеличенным количеством мест для транспорта семьи. Возможность грабить магазины.',
  members: 15,
  scores: 24000,
  wins: 10,
  coin: 15999,
  canBuyMultiHouse: true,
  canBuyCustomHouse: true,
  canBuyAirHouse: false
}, {
  desc: 'Возможностью приобрести вертолетную площадку, получать заказы от Ламара.',
  members: 20,
  scores: 80000,
  wins: 12,
  coin: 21999,
  canBuyMultiHouse: true,
  canBuyCustomHouse: true,
  canBuyAirHouse: true
}, {
  desc: 'Вы становитесь полноценной фракцией с возможностями выбранной вами ветки развития семьи',
  members: 30,
  scores: 120000,
  wins: 20,
  coin: 24999,
  canBuyMultiHouse: true,
  canBuyCustomHouse: true,
  canBuyAirHouse: true
}];
const FamilyUpgrade = exports.FamilyUpgrade = [{
  id: 1,
  name: 'Увеличить лимит семьи. Сейчас максимум',
  desc: 'человек',
  price: {
    money: 300000,
    coin: 500
  },
  amount: 10,
  max: 1000 - family_max_users,
  default: family_max_users,
  multiple: 1.2
}, {
  id: 2,
  name: 'Увеличить кол-во транспорта семьи. Сейчас мест',
  desc: 'мест для авто',
  price: {
    money: 100000,
    coin: 250
  },
  amount: 2,
  max: 100 - family_max_cars,
  default: family_max_cars,
  multiple: 1.2
}, {
  id: 3,
  name: 'Увеличить лимит хранимого груза семьи. Сейчас лимит',
  desc: 'кг',
  price: {
    money: 200000,
    coin: 300
  },
  amount: 1000,
  max: 20000 - family_max_cargo,
  default: family_max_cargo,
  multiple: 1.2
}, {
  id: 4,
  name: '',
  desc: 'Переименовать семью',
  price: {
    money: 0,
    coin: 1000
  },
  amount: 1,
  max: 1,
  default: 0,
  multiple: 1
}];
const getFamilyUpgradeLevelPrice = (id, level, priceType) => {
  const fu = FamilyUpgrade.find(fu => fu.id == id);
  if (fu && level == 1) return fu.price[priceType];
  return fu ? Math.floor(Math.pow(fu.multiple, level - 1) * fu.price[priceType]) : 0;
};
exports.getFamilyUpgradeLevelPrice = getFamilyUpgradeLevelPrice;
},{"./system":"SNxO"}],"GI3U":[function(require,module,exports) {
"use strict";

var _attach = require("./attach");
var _custom = require("./custom.event");
var _gui = require("./gui");
var _system = require("./system");
require("./family.cargobattle");
var _family2 = require("../../shared/family");
let haveBoxInterval = null;
const player = mp.players.local;
_custom.CustomEvent.registerServer('family:create:start', price => {
  _gui.gui.setGui('family');
  _custom.CustomEvent.triggerCef('family:showcreate', price);
});
_attach.AttachSystem.registerPosition("onyxbox", "prop_onyx_box", 28422, new mp.Vector3(0.03, -0.14, 0.06), new mp.Vector3(0, 0, 90.0));
_custom.CustomEvent.registerServer('family:getBox', () => {
  _attach.AttachSystem.addLocal('onyxbox');
  const getBoxPosition = player.position;
  haveBoxInterval = setInterval(() => {
    if (_system.system.distanceToPos(player.position, getBoxPosition) > 50.0) {
      takeBoxFromPlayer();
      _custom.CustomEvent.triggerServer('family:quest:veryOut');
    }
  }, 5000);
});
_custom.CustomEvent.registerServer('family:outBox', () => takeBoxFromPlayer());
const takeBoxFromPlayer = () => {
  _attach.AttachSystem.removeLocal('onyxbox');
  if (haveBoxInterval) {
    clearInterval(haveBoxInterval);
    haveBoxInterval = null;
  }
};
let localBlip;
_custom.CustomEvent.registerServer('family:quest:setBlip', pos => {
  if (!pos || !pos.x || !pos.y || !pos.z) return;
  if (localBlip) localBlip.destroy();
  localBlip = mp.blips.new(615, new mp.Vector3(pos.x, pos.y, pos.z), {
    name: 'Разгрузка семейного груза',
    scale: 0.9,
    color: 3,
    shortRange: false,
    dimension: 0
  });
});
mp.events.add("playerLeaveVehicle", (vehicle, seat) => {
  if (localBlip) {
    localBlip.destroy();
    localBlip = null;
  }
});
_family2.FamilyTasksLoading.map(questSettings => {
  questSettings.carRegisterCoords.map(coords => {
    _system.system.createBlipNearest(620, 29, new mp.Vector3(coords.x, coords.y, coords.z), 'Загрузка товара для семей', 100, 0);
  });
  questSettings.loadingBlip.map(coords => {
    _system.system.createBlipNearest(618, 29, new mp.Vector3(coords.x, coords.y, coords.z), 'Получение товара для семей', 100, 0);
  });
});
},{"./attach":"sXtZ","./custom.event":"py8h","./gui":"bk91","./system":"pi2J","./family.cargobattle":"JQ82","../../shared/family":"Mg1f"}],"agqi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VOTE_POS = void 0;
const VOTE_POS = exports.VOTE_POS = [new mp.Vector3(-517.66, -203.83, 37.43), new mp.Vector3(-522.41, -196.12, 37.43), new mp.Vector3(-514.19, -191.49, 37.43), new mp.Vector3(-509.51, -199.01, 37.43), new mp.Vector3(-507.16, -202.81, 37.43)];
},{}],"cgSZ":[function(require,module,exports) {
"use strict";

var _system = require("./system");
var _vote = require("../../shared/vote");
const pos = _system.system.middlePoint3d(..._vote.VOTE_POS);
_system.system.createBlipInterrior(367, 1, new mp.Vector3(pos.x, pos.y, pos.z), 'Кабинки для голосования');
},{"./system":"pi2J","../../shared/vote":"agqi"}],"zoAG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SHOOTING_WEAPONS_LIST = exports.SHOOTING_RANGES = void 0;
const SHOOTING_WEAPONS_LIST = exports.SHOOTING_WEAPONS_LIST = ["weapon_appistol", "weapon_pistol", "weapon_minismg", "weapon_revolver", "weapon_smg", "weapon_heavyshotgun", "weapon_assaultrifle_mk2", "weapon_combatmg"];
const SHOOTING_RANGES = exports.SHOOTING_RANGES = [{
  name: 'Армейское стрельбище',
  pos: new mp.Vector3(-1754.20, 2929.59, 31.91),
  enter: {
    x: -1742.70,
    y: 2940.53,
    z: 31.91,
    h: 238
  },
  exit: {
    x: -1749.41,
    y: 2941.05,
    z: 31.91,
    h: 150
  },
  items: [{
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1737.73400000,
      y: 2939.25100000,
      z: 31.73810000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -65.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1729.13000000,
      y: 2939.29200000,
      z: 31.71416000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -100.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1735.59400000,
      y: 2942.31200000,
      z: 31.73190000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 160.000
    }
  }, {
    model: "gr_prop_gr_target_02b",
    position: {
      x: -1744.80200000,
      y: 2944.08900000,
      z: 32.64614000
    },
    rotation: {
      x: -1.051,
      y: -2.639,
      z: -55.000
    }
  }, {
    model: "gr_prop_gr_target_02b",
    position: {
      x: -1739.57900000,
      y: 2937.27400000,
      z: 32.25810000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1740.63900000,
      y: 2944.84700000,
      z: 31.72072000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1737.35000000,
      y: 2942.70100000,
      z: 31.72564000
    },
    rotation: {
      x: -0.000,
      y: -0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1739.49000000,
      y: 2947.37800000,
      z: 31.62812000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 120.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1738.63300000,
      y: 2948.83500000,
      z: 31.61409000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 120.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1731.34800000,
      y: 2947.88300000,
      z: 31.73235000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1735.16300000,
      y: 2943.44300000,
      z: 31.71302000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1732.66700000,
      y: 2942.21000000,
      z: 31.71442000
    },
    rotation: {
      x: -0.500,
      y: 0.000,
      z: -149.982
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1725.34400000,
      y: 2931.28000000,
      z: 31.68057000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -155.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1716.33500000,
      y: 2938.02600000,
      z: 31.69757000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1716.29800000,
      y: 2924.19900000,
      z: 31.71649000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 115.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1708.07400000,
      y: 2924.84400000,
      z: 31.72356000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 165.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1707.41100000,
      y: 2929.41400000,
      z: 31.71502000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -5.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1748.66900000,
      y: 2932.20100000,
      z: 31.75333000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1735.92800000,
      y: 2933.58300000,
      z: 31.85718000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1745.86500000,
      y: 2936.73600000,
      z: 31.71171000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1737.83900000,
      y: 2929.38800000,
      z: 31.64512000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1705.78300000,
      y: 2899.26600000,
      z: 31.73372000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 25.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1708.81600000,
      y: 2889.61100000,
      z: 31.69457000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1715.60100000,
      y: 2882.57700000,
      z: 31.74138000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 25.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1719.76400000,
      y: 2871.27800000,
      z: 31.73417000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1712.99300000,
      y: 2889.61100000,
      z: 31.71197000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 40.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1717.89400000,
      y: 2887.48500000,
      z: 31.73644000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 90.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1726.26600000,
      y: 2868.33900000,
      z: 31.65401000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1727.38100000,
      y: 2872.96200000,
      z: 31.69425000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1731.56200000,
      y: 2870.78800000,
      z: 31.71608000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1736.74800000,
      y: 2872.90300000,
      z: 31.72786000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 85.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1738.13600000,
      y: 2869.94900000,
      z: 31.73296000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 160.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1741.12300000,
      y: 2923.77700000,
      z: 31.68410000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1742.86700000,
      y: 2921.07500000,
      z: 31.74139000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1745.07000000,
      y: 2917.09000000,
      z: 31.70095000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1708.18700000,
      y: 2903.32700000,
      z: 31.79096000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -105.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1715.78000000,
      y: 2898.99100000,
      z: 31.48486000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -110.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1712.44700000,
      y: 2895.87100000,
      z: 31.72089000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1716.45300000,
      y: 2892.27600000,
      z: 31.69579000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1735.15700000,
      y: 2892.21400000,
      z: 31.70109000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1726.98500000,
      y: 2896.74500000,
      z: 31.71740000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1726.87300000,
      y: 2892.49600000,
      z: 31.72764000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1732.24900000,
      y: 2900.08400000,
      z: 31.54546000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -120.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1737.32200000,
      y: 2891.87700000,
      z: 31.59193000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -5.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1738.89500000,
      y: 2903.95500000,
      z: 31.75171000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1740.48200000,
      y: 2900.97100000,
      z: 31.75282000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1749.80300000,
      y: 2904.19900000,
      z: 31.94684000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1743.46900000,
      y: 2895.11900000,
      z: 31.70387000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 125.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1750.27000000,
      y: 2906.05300000,
      z: 31.62413000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1754.70000000,
      y: 2909.58700000,
      z: 31.71075000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1758.78400000,
      y: 2911.00000000,
      z: 31.70669000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 30.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1757.64200000,
      y: 2908.82300000,
      z: 31.85942000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -150.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1736.70900000,
      y: 2906.34600000,
      z: 31.74233000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1737.53300000,
      y: 2904.59500000,
      z: 31.74472000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: -60.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1725.13000000,
      y: 2866.65500000,
      z: 31.73284000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 25.000
    }
  }, {
    model: "gr_prop_gr_target_05b",
    position: {
      x: -1725.13000000,
      y: 2866.65500000,
      z: 31.73284000
    },
    rotation: {
      x: 0.000,
      y: 0.000,
      z: 25.000
    }
  }]
}];
},{}],"OVYI":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _shooting = require("../../shared/shooting");
var _system = require("./system");
var _TextTimerBar = require("./bars/classes/TextTimerBar");
var _checkpoints = require("./checkpoints");
var _user = require("./user");
const player = mp.players.local;
let inShooting = false;
let objectsShoot = [];
const clearObjects = () => {
  objectsShoot.map(item => {
    if (item) {
      if (mp.objects.exists(item[0])) item[0].destroy();
      if (mp.blips.exists(item[1])) item[1].destroy();
    }
  });
  objectsShoot = [];
};
const countObjects = () => {
  return objectsShoot.length;
};
let CheckpointBar;
let checkPointCnt = 0;
_custom.CustomEvent.registerServer('shooting:start', async id => {
  const config = _shooting.SHOOTING_RANGES[id];
  if (!config) return;
  inShooting = true;
  clearObjects();
  config.items.map(item => {
    const pos = new mp.Vector3(item.position.x, item.position.y, item.position.z);
    setTimeout(() => {
      const obj = mp.objects.new(mp.game.joaat(item.model), pos, {
        dimension: player.dimension,
        rotation: new mp.Vector3(item.rotation.x * -1, item.rotation.y * -1, item.rotation.z * -1)
      });
      setTimeout(() => {
        objectsShoot.push([obj, _system.system.createBlip(119, 1, pos, "Мишень", player.dimension, false), obj.handle]);
        obj.setCanBeDamaged(true);
      }, 100);
    }, 10);
  });
  const startMS = _system.system.timestampMS;
  const start = _system.system.timestamp;
  const mapTimeBar = new _TextTimerBar.TextTimerBar('Секундомер', _system.system.secondsToString(0));
  CheckpointBar = new _TextTimerBar.TextTimerBar("Мишени", `0 / ${config.items.length}`);
  checkPointCnt = 0;
  setTimeout(() => {
    let int = setInterval(() => {
      if (!inShooting || _user.user.dead) {
        if (mapTimeBar && mapTimeBar.exists()) mapTimeBar.destroy();
        if (CheckpointBar && CheckpointBar.exists()) CheckpointBar.destroy();
        clearObjects();
        clearInterval(int);
      } else {
        const count = countObjects();
        mapTimeBar.text = _system.system.secondsToString(_system.system.timestamp - start);
        CheckpointBar.text = `${checkPointCnt} / ${config.items.length}`;
        if (count == 0 || mp.players.local.isDead() || mp.players.local.getHealth() <= 0) {
          inShooting = false;
          _custom.CustomEvent.triggerServer('shooting:finish', id, count == 0, _system.system.timestampMS - startMS);
          if (colshape) {
            colshape.destroy();
            colshape = null;
          }
        }
      }
    }, 100);
  }, 1000);
  let colshape = _checkpoints.colshapes.new(new mp.Vector3(config.exit.x, config.exit.y, config.exit.z), 'Досрочный выход', () => {
    inShooting = false;
    if (countObjects() > 0) _user.user.notify('Вы вышли досрочно', 'error');
    _custom.CustomEvent.triggerServer('shooting:finish', id, countObjects() > 0, _system.system.timestampMS - startMS);
    colshape.destroy();
    colshape = null;
  }, {
    drawStaticName: 'scaleform',
    dimension: player.dimension
  });
});
mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
  if (!inShooting || objectsShoot.length === 0) return;
  let index = objectsShoot.findIndex(q => mp.objects.exists(q[0]) && q[0].getMaxHealth() > q[0].getHealth());
  if (index === -1) return;
  checkPointCnt++;
  if (mp.objects.exists(objectsShoot[index][0])) objectsShoot[index][0].destroy();
  if (mp.blips.exists(objectsShoot[index][1])) objectsShoot[index][1].destroy();
  objectsShoot.splice(index, 1);
});
mp.events.add('playerDeath', () => {
  if (!inShooting) return;
  _custom.CustomEvent.triggerServer('shooting:dead');
});
},{"./custom.event":"py8h","../../shared/shooting":"zoAG","./system":"pi2J","./bars/classes/TextTimerBar":"CjKg","./checkpoints":"XCJl","./user":"ggMw"}],"R94t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PoliceRadar = void 0;
var _gui = require("./gui");
var _custom = require("./custom.event");
const player = mp.players.local;
class PoliceRadar {
  static drawAdvancedText(x, y, w, h, sc, text, r, g, b, a, font, jus) {
    _gui.gui.drawText(text, x - 0.1 + w, y - 0.02 + h, sc, r, g, b, a, font, jus, true, true);
  }
  static get inPoliceVehicle() {
    return player.isInAnyPoliceVehicle() && !player.isInAnyHeli();
  }
  static get canGetData() {
    return this.shown && this.inPoliceVehicle;
  }
  static getVehicleData(veh) {
    const veh2 = player.vehicle;
    if (!veh2) return;
    if (veh2.id === veh.id) return;
    let name = veh.getVariable('name');
    if (!name) name = mp.game.vehicle.getDisplayNameFromVehicleModel(veh.getModel());
    let speed = Math.floor(veh.getSpeed() * 3.6);
    let plate = veh.getNumberPlateText();
    let plateType = veh.getNumberPlateTextIndex();
    return {
      name,
      speed,
      plate,
      plateType
    };
  }
  static getData() {
    if (!this.canGetData) return;
    if (this.freeze) return;
    const veh = player.vehicle;
    if (!veh) return;
    const coordA = veh.getOffsetFromInWorldCoords(0.0, 5.0, 1.0);
    const coordB = veh.getOffsetFromInWorldCoords(0.0, 70.0, 0.0);
    const frontcar = mp.raycasting.testCapsule(coordA, coordB, 5.0, [veh.handle], [10]);
    if (frontcar && frontcar.entity && typeof frontcar.entity === "object" && frontcar.entity.type == "vehicle") {
      const data = this.getVehicleData(frontcar.entity);
      if (data) {
        this.info = {
          s: data.speed,
          p: data.plate,
          t: data.plateType
        };
      }
    }
    const rcoordA = veh.getOffsetFromInWorldCoords(0.0, -5.0, 1.0);
    const rcoordB = veh.getOffsetFromInWorldCoords(0.0, -70.0, 0.0);
    const rearcar = mp.raycasting.testCapsule(rcoordA, rcoordB, 4.0, [veh.handle], [10]);
    if (rearcar && rearcar.entity && typeof rearcar.entity === "object" && rearcar.entity.type == "vehicle") {
      const data = this.getVehicleData(rearcar.entity);
      if (data) {
        this.info2 = {
          s: data.speed,
          p: data.plate,
          t: data.plateType
        };
      }
    }
  }
  static draw() {
    this.getData();
    if (!this.canGetData) {
      this.info = {
        s: 0,
        t: 0,
        p: ""
      };
      this.info2 = {
        s: 0,
        t: 0,
        p: ""
      };
      return;
    }
    _custom.CustomEvent.triggerCef('radar:data', this.info.s, this.info.p, this.info2.s, this.info2.p, this.info.t, this.info2.t);
  }
}
exports.PoliceRadar = PoliceRadar;
PoliceRadar.shown = false;
PoliceRadar.freeze = false;
PoliceRadar.info = {
  s: 0,
  p: "",
  t: 0
};
PoliceRadar.info2 = {
  s: 0,
  p: "",
  t: 0
};
PoliceRadar.minSpeed = 5.0;
PoliceRadar.maxSpeed = 75.0;
setInterval(() => {
  if (!PoliceRadar.shown) return;
  if (!PoliceRadar.inPoliceVehicle) {
    if (PoliceRadar.shown) _custom.CustomEvent.triggerCef('radar:show', false);
    PoliceRadar.shown = false;
    return;
  }
  PoliceRadar.draw();
}, 200);
_custom.CustomEvent.register('radarEnable', () => {
  if (!PoliceRadar.inPoliceVehicle) {
    if (PoliceRadar.shown) _custom.CustomEvent.triggerCef('radar:show', false);
    PoliceRadar.shown = false;
    return;
  }
  PoliceRadar.shown = !PoliceRadar.shown;
  _custom.CustomEvent.triggerCef('radar:show', PoliceRadar.shown);
});
},{"./gui":"bk91","./custom.event":"py8h"}],"mXQQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FARMING_POSITIONS = void 0;
const FARMING_POSITIONS = exports.FARMING_POSITIONS = [{
  name: "Работа для Посольств",
  desc: "Соберайте виноград",
  item: 879,
  amount_max: 139,
  restore_tick: 139,
  tick_interval_minutes: 60,
  split: true,
  d: 0,
  blip: {
    id: 206,
    color: 25
  },
  fraction: [23, 24, 25],
  anim: {
    task: ["amb@medic@standing@tendtodead@idle_a", "idle_a"],
    seconds: 20,
    text: "Собирайте урожай",
    heading: 347
  },
  cooldown: 2,
  markerType: 1,
  pos: [{
    x: -1874.51,
    y: 2098.02,
    z: 138.56
  }, {
    x: -1881.00,
    y: 2098.04,
    z: 139.01
  }, {
    x: -1890.36,
    y: 2098.80,
    z: 138.16
  }, {
    x: -1899.85,
    y: 2099.77,
    z: 136.16
  }, {
    x: -1910.11,
    y: 2100.72,
    z: 132.89
  }, {
    x: -1909.39,
    y: 2109.30,
    z: 129.20
  }, {
    x: -1902.33,
    y: 2108.82,
    z: 131.58
  }, {
    x: -1893.75,
    y: 2108.02,
    z: 134.07
  }, {
    x: -1882.42,
    y: 2107.31,
    z: 135.76
  }, {
    x: -1874.01,
    y: 2106.79,
    z: 135.86
  }, {
    x: -1866.93,
    y: 2106.41,
    z: 135.76
  }, {
    x: -1865.98,
    y: 2110.48,
    z: 134.24
  }, {
    x: -1871.58,
    y: 2110.72,
    z: 134.44
  }, {
    x: -1883.24,
    y: 2111.98,
    z: 133.94
  }, {
    x: -1891.71,
    y: 2112.73,
    z: 132.62
  }, {
    x: -1899.10,
    y: 2113.40,
    z: 130.60
  }, {
    x: -1907.36,
    y: 2114.10,
    z: 127.79
  }, {
    x: -1907.91,
    y: 2117.94,
    z: 125.92
  }, {
    x: -1903.16,
    y: 2117.84,
    z: 127.88
  }, {
    x: -1893.17,
    y: 2117.22,
    z: 130.56
  }, {
    x: -1881.20,
    y: 2116.08,
    z: 132.62
  }, {
    x: -1871.40,
    y: 2115.07,
    z: 132.99
  }, {
    x: -1862.70,
    y: 2114.27,
    z: 132.98
  }, {
    x: -1859.28,
    y: 2118.61,
    z: 130.98
  }, {
    x: -1868.72,
    y: 2119.89,
    z: 131.09
  }, {
    x: -1879.04,
    y: 2120.90,
    z: 131.11
  }, {
    x: -1889.59,
    y: 2121.76,
    z: 129.50
  }, {
    x: -1902.61,
    y: 2122.97,
    z: 126.01
  }, {
    x: -1909.58,
    y: 2123.59,
    z: 122.97
  }, {
    x: -1909.16,
    y: 2128.40,
    z: 121.31
  }, {
    x: -1900.75,
    y: 2127.29,
    z: 124.89
  }, {
    x: -1892.62,
    y: 2126.52,
    z: 127.15
  }, {
    x: -1881.15,
    y: 2125.59,
    z: 129.22
  }, {
    x: -1871.94,
    y: 2124.74,
    z: 129.75
  }, {
    x: -1862.92,
    y: 2123.82,
    z: 129.46
  }, {
    x: -1855.08,
    y: 2122.91,
    z: 129.14
  }, {
    x: -1851.30,
    y: 2127.24,
    z: 127.64
  }, {
    x: -1858.47,
    y: 2127.47,
    z: 128.04
  }, {
    x: -1870.31,
    y: 2128.98,
    z: 128.18
  }, {
    x: -1878.26,
    y: 2129.87,
    z: 127.87
  }, {
    x: -1887.31,
    y: 2130.75,
    z: 126.67
  }, {
    x: -1897.76,
    y: 2131.61,
    z: 124.10
  }, {
    x: -1907.18,
    y: 2132.40,
    z: 120.73
  }, {
    x: -1907.80,
    y: 2136.75,
    z: 118.96
  }, {
    x: -1899.21,
    y: 2136.06,
    z: 122.05
  }, {
    x: -1890.91,
    y: 2135.31,
    z: 124.26
  }, {
    x: -1880.24,
    y: 2134.25,
    z: 126.14
  }, {
    x: -1869.29,
    y: 2133.53,
    z: 126.46
  }, {
    x: -1859.00,
    y: 2132.70,
    z: 126.18
  }, {
    x: -1851.62,
    y: 2131.92,
    z: 125.91
  }, {
    x: -1846.01,
    y: 2131.76,
    z: 125.32
  }, {
    x: -1847.98,
    y: 2136.45,
    z: 123.59
  }, {
    x: -1857.26,
    y: 2136.95,
    z: 124.43
  }, {
    x: -1864.34,
    y: 2137.65,
    z: 124.75
  }, {
    x: -1878.24,
    y: 2138.86,
    z: 124.59
  }, {
    x: -1891.90,
    y: 2139.96,
    z: 122.32
  }, {
    x: -1901.90,
    y: 2141.18,
    z: 119.38
  }, {
    x: -1908.45,
    y: 2141.81,
    z: 116.79
  }, {
    x: -1906.85,
    y: 2145.73,
    z: 115.90
  }, {
    x: -1901.35,
    y: 2145.32,
    z: 117.93
  }, {
    x: -1896.08,
    y: 2144.81,
    z: 119.69
  }, {
    x: -1888.70,
    y: 2144.10,
    z: 121.34
  }, {
    x: -1880.96,
    y: 2143.60,
    z: 122.66
  }, {
    x: -1872.05,
    y: 2143.03,
    z: 123.42
  }, {
    x: -1860.32,
    y: 2141.86,
    z: 122.81
  }, {
    x: -1850.57,
    y: 2140.97,
    z: 122.24
  }, {
    x: -1845.14,
    y: 2144.97,
    z: 119.44
  }, {
    x: -1855.26,
    y: 2146.06,
    z: 120.72
  }, {
    x: -1866.47,
    y: 2147.04,
    z: 121.63
  }, {
    x: -1875.34,
    y: 2147.83,
    z: 121.57
  }, {
    x: -1882.82,
    y: 2148.48,
    z: 120.75
  }, {
    x: -1890.90,
    y: 2148.99,
    z: 119.37
  }, {
    x: -1898.76,
    y: 2149.87,
    z: 117.05
  }, {
    x: -1904.79,
    y: 2150.61,
    z: 114.91
  }, {
    x: -1900.11,
    y: 2154.31,
    z: 115.00
  }, {
    x: -1890.95,
    y: 2153.49,
    z: 117.48
  }, {
    x: -1881.88,
    y: 2152.59,
    z: 119.22
  }, {
    x: -1872.93,
    y: 2152.01,
    z: 120.12
  }, {
    x: -1864.27,
    y: 2151.33,
    z: 119.89
  }, {
    x: -1854.41,
    y: 2150.37,
    z: 118.93
  }, {
    x: -1845.85,
    y: 2149.61,
    z: 117.69
  }, {
    x: -1849.24,
    y: 2154.82,
    z: 116.49
  }, {
    x: -1859.33,
    y: 2155.48,
    z: 117.97
  }, {
    x: -1868.43,
    y: 2156.35,
    z: 118.76
  }, {
    x: -1878.67,
    y: 2157.05,
    z: 118.10
  }, {
    x: -1887.94,
    y: 2157.75,
    z: 116.39
  }, {
    x: -1896.92,
    y: 2158.47,
    z: 114.38
  }, {
    x: -1889.76,
    y: 2162.95,
    z: 114.10
  }, {
    x: -1881.84,
    y: 2161.93,
    z: 115.78
  }, {
    x: -1871.30,
    y: 2161.07,
    z: 116.97
  }, {
    x: -1862.54,
    y: 2160.25,
    z: 116.88
  }, {
    x: -1868.71,
    y: 2165.04,
    z: 115.78
  }, {
    x: -1878.52,
    y: 2165.90,
    z: 114.87
  }, {
    x: -1824.05,
    y: 2108.81,
    z: 136.41
  }, {
    x: -1818.98,
    y: 2110.60,
    z: 135.44
  }, {
    x: -1808.48,
    y: 2115.25,
    z: 133.19
  }, {
    x: -1798.96,
    y: 2120.30,
    z: 131.95
  }, {
    x: -1785.70,
    y: 2131.45,
    z: 129.63
  }, {
    x: -1790.94,
    y: 2129.29,
    z: 129.51
  }, {
    x: -1801.34,
    y: 2124.51,
    z: 129.53
  }, {
    x: -1811.61,
    y: 2119.61,
    z: 131.09
  }, {
    x: -1821.66,
    y: 2115.02,
    z: 133.08
  }, {
    x: -1830.81,
    y: 2110.80,
    z: 135.38
  }, {
    x: -1841.09,
    y: 2106.19,
    z: 137.40
  }, {
    x: -1777.02,
    y: 2141.15,
    z: 125.68
  }, {
    x: -1794.32,
    y: 2133.00,
    z: 127.02
  }, {
    x: -1803.73,
    y: 2128.14,
    z: 127.60
  }, {
    x: -1812.78,
    y: 2124.42,
    z: 128.69
  }, {
    x: -1820.32,
    y: 2120.51,
    z: 130.33
  }, {
    x: -1828.24,
    y: 2116.98,
    z: 131.88
  }, {
    x: -1836.07,
    y: 2113.09,
    z: 133.62
  }, {
    x: -1843.57,
    y: 2109.86,
    z: 134.75
  }, {
    x: -1851.13,
    y: 2106.23,
    z: 135.30
  }, {
    x: -1847.96,
    y: 2112.95,
    z: 132.08
  }, {
    x: -1840.82,
    y: 2116.35,
    z: 131.10
  }, {
    x: -1830.43,
    y: 2120.97,
    z: 129.63
  }, {
    x: -1821.48,
    y: 2125.11,
    z: 127.98
  }, {
    x: -1810.53,
    y: 2130.46,
    z: 125.97
  }, {
    x: -1799.06,
    y: 2135.80,
    z: 124.55
  }, {
    x: -1787.49,
    y: 2140.93,
    z: 124.16
  }, {
    x: -1777.18,
    y: 2145.92,
    z: 122.94
  }, {
    x: -1770.10,
    y: 2149.24,
    z: 122.56
  }, {
    x: -1788.05,
    y: 2145.97,
    z: 121.04
  }, {
    x: -1797.02,
    y: 2141.62,
    z: 122.15
  }, {
    x: -1805.30,
    y: 2137.88,
    z: 122.79
  }, {
    x: -1815.04,
    y: 2133.32,
    z: 124.23
  }, {
    x: -1822.76,
    y: 2129.60,
    z: 125.58
  }, {
    x: -1830.64,
    y: 2125.54,
    z: 127.23
  }, {
    x: -1838.54,
    y: 2122.00,
    z: 128.45
  }, {
    x: -1832.64,
    y: 2129.93,
    z: 124.89
  }, {
    x: -1822.83,
    y: 2134.58,
    z: 123.05
  }, {
    x: -1812.79,
    y: 2138.97,
    z: 121.65
  }, {
    x: -1805.21,
    y: 2142.66,
    z: 120.59
  }, {
    x: -1799.29,
    y: 2145.29,
    z: 120.01
  }, {
    x: -1809.39,
    y: 2145.82,
    z: 118.73
  }, {
    x: -1817.26,
    y: 2142.11,
    z: 119.78
  }, {
    x: -1826.80,
    y: 2137.61,
    z: 121.23
  }, {
    x: -1830.68,
    y: 2140.96,
    z: 119.37
  }, {
    x: -1823.28,
    y: 2144.35,
    z: 118.18
  }]
}, {
  name: "Работа для Посольств",
  desc: "Уборка территории от мусора",
  item: 883,
  amount_max: 286,
  restore_tick: 286,
  tick_interval_minutes: 60,
  split: true,
  d: 0,
  blip: {
    id: 206,
    color: 25
  },
  fraction: [23, 24, 25],
  anim: {
    task: "WORLD_HUMAN_GARDENER_PLANT",
    seconds: 15,
    text: "Сбор листвы"
  },
  cooldown: 5,
  markerType: 1,
  pos: [{
    x: 62.44,
    y: 2963.56,
    z: 51.65
  }, {
    x: 63.76,
    y: 2964.28,
    z: 51.54
  }, {
    x: 64.57,
    y: 2965.45,
    z: 51.42
  }, {
    x: 65.63,
    y: 2969.25,
    z: 51.13
  }, {
    x: 67.35,
    y: 2971.30,
    z: 50.95
  }, {
    x: 71.53,
    y: 2971.40,
    z: 50.60
  }, {
    x: 75.01,
    y: 2970.09,
    z: 50.34
  }, {
    x: 77.80,
    y: 2973.47,
    z: 50.08
  }, {
    x: 80.41,
    y: 2976.80,
    z: 49.82
  }, {
    x: 84.71,
    y: 2975.80,
    z: 49.59
  }, {
    x: 88.43,
    y: 2973.20,
    z: 49.68
  }, {
    x: 92.30,
    y: 2976.27,
    z: 49.44
  }, {
    x: 95.86,
    y: 2979.44,
    z: 49.12
  }, {
    x: 100.50,
    y: 2981.17,
    z: 48.73
  }, {
    x: 102.70,
    y: 2985.51,
    z: 48.36
  }, {
    x: 106.95,
    y: 2986.29,
    z: 48.03
  }, {
    x: 107.94,
    y: 2990.42,
    z: 48.08
  }, {
    x: 112.45,
    y: 2991.54,
    z: 47.80
  }, {
    x: 114.44,
    y: 2996.16,
    z: 47.80
  }, {
    x: 118.55,
    y: 2997.42,
    z: 47.59
  }, {
    x: 118.96,
    y: 3000.90,
    z: 47.59
  }, {
    x: 116.87,
    y: 3003.47,
    z: 47.62
  }, {
    x: 112.64,
    y: 3004.14,
    z: 47.74
  }, {
    x: 109.43,
    y: 3002.54,
    z: 47.84
  }, {
    x: 106.99,
    y: 2999.38,
    z: 48.01
  }, {
    x: 104.03,
    y: 2998.98,
    z: 48.17
  }, {
    x: 102.31,
    y: 2996.55,
    z: 48.31
  }, {
    x: 101.35,
    y: 2993.00,
    z: 48.43
  }, {
    x: 98.66,
    y: 2992.27,
    z: 48.57
  }, {
    x: 97.07,
    y: 2989.66,
    z: 48.69
  }, {
    x: 94.57,
    y: 2986.41,
    z: 48.83
  }, {
    x: 92.20,
    y: 2984.80,
    z: 49.00
  }, {
    x: 90.95,
    y: 2981.46,
    z: 49.20
  }, {
    x: 87.64,
    y: 2980.71,
    z: 49.31
  }, {
    x: 83.58,
    y: 2978.59,
    z: 49.55
  }, {
    x: 80.21,
    y: 2979.59,
    z: 49.67
  }, {
    x: 77.11,
    y: 2979.49,
    z: 49.88
  }, {
    x: 73.92,
    y: 2978.26,
    z: 50.18
  }, {
    x: 71.22,
    y: 2980.15,
    z: 50.20
  }, {
    x: 67.91,
    y: 2980.58,
    z: 50.44
  }, {
    x: 64.23,
    y: 2979.02,
    z: 50.90
  }, {
    x: 61.53,
    y: 2980.93,
    z: 50.97
  }, {
    x: 58.56,
    y: 2981.61,
    z: 50.94
  }, {
    x: 55.00,
    y: 2980.66,
    z: 51.29
  }, {
    x: 52.40,
    y: 2982.49,
    z: 51.03
  }, {
    x: 49.95,
    y: 2980.74,
    z: 51.32
  }, {
    x: 47.36,
    y: 2976.21,
    z: 51.99
  }, {
    x: 46.62,
    y: 2971.49,
    z: 52.37
  }, {
    x: 48.27,
    y: 2968.37,
    z: 52.59
  }, {
    x: 47.16,
    y: 2964.54,
    z: 52.86
  }, {
    x: 48.87,
    y: 2961.39,
    z: 52.99
  }, {
    x: 52.27,
    y: 2959.53,
    z: 52.68
  }, {
    x: 53.05,
    y: 2955.69,
    z: 52.97
  }, {
    x: 51.35,
    y: 2951.62,
    z: 53.57
  }, {
    x: 53.33,
    y: 2948.52,
    z: 53.57
  }, {
    x: 56.82,
    y: 2947.53,
    z: 53.16
  }, {
    x: 59.35,
    y: 2948.16,
    z: 52.43
  }, {
    x: 63.61,
    y: 2951.70,
    z: 51.56
  }, {
    x: 70.41,
    y: 2952.88,
    z: 52.00
  }, {
    x: 77.04,
    y: 2955.85,
    z: 51.70
  }, {
    x: 84.14,
    y: 2959.68,
    z: 50.87
  }, {
    x: 89.37,
    y: 2963.01,
    z: 50.25
  }, {
    x: 94.66,
    y: 2964.31,
    z: 49.81
  }, {
    x: 100.76,
    y: 2968.97,
    z: 49.02
  }, {
    x: 105.78,
    y: 2973.91,
    z: 48.57
  }]
}, {
  name: "Работа для Посольств",
  desc: "Добыча драгоценных камней",
  item: [885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 885, 886, 886, 886, 887],
  amount_max: 96,
  restore_tick: 96,
  tick_interval_minutes: 60,
  split: true,
  d: 0,
  fraction: [23, 24, 25],
  cooldown: 5,
  markerType: 20,
  anim: {
    task: "WORLD_HUMAN_GARDENER_PLANT",
    seconds: 40,
    text: "Добыча камня"
  },
  blip: {
    id: 206,
    color: 25
  },
  pos: [{
    x: 2951.90,
    y: 2815.49,
    z: 41.30
  }, {
    x: 2949.03,
    y: 2819.53,
    z: 41.77
  }, {
    x: 2944.94,
    y: 2817.62,
    z: 41.81
  }, {
    x: 2957.31,
    y: 2818.83,
    z: 41.66
  }, {
    x: 2960.20,
    y: 2819.35,
    z: 42.45
  }, {
    x: 2973.41,
    y: 2798.01,
    z: 40.42
  }, {
    x: 2977.15,
    y: 2794.29,
    z: 39.99
  }, {
    x: 2980.60,
    y: 2789.90,
    z: 39.86
  }, {
    x: 2976.97,
    y: 2791.16,
    z: 39.65
  }, {
    x: 2973.92,
    y: 2775.31,
    z: 37.31
  }, {
    x: 2970.37,
    y: 2773.99,
    z: 37.23
  }, {
    x: 2965.03,
    y: 2773.01,
    z: 38.52
  }, {
    x: 2958.38,
    y: 2766.33,
    z: 40.02
  }, {
    x: 2954.90,
    y: 2769.31,
    z: 38.15
  }, {
    x: 2951.46,
    y: 2766.52,
    z: 38.48
  }, {
    x: 2949.07,
    y: 2766.11,
    z: 38.25
  }, {
    x: 2937.39,
    y: 2770.64,
    z: 38.09
  }, {
    x: 2938.65,
    y: 2773.07,
    z: 38.36
  }, {
    x: 2937.25,
    y: 2773.05,
    z: 38.34
  }, {
    x: 2934.71,
    y: 2783.12,
    z: 38.47
  }, {
    x: 2930.63,
    y: 2785.45,
    z: 38.44
  }, {
    x: 2928.42,
    y: 2787.37,
    z: 38.85
  }, {
    x: 2926.28,
    y: 2790.62,
    z: 39.41
  }, {
    x: 2924.86,
    y: 2793.88,
    z: 39.78
  }, {
    x: 2920.44,
    y: 2797.43,
    z: 40.10
  }, {
    x: 2918.16,
    y: 2798.72,
    z: 40.02
  }, {
    x: 2927.68,
    y: 2766.97,
    z: 43.23
  }, {
    x: 2929.31,
    y: 2764.36,
    z: 43.29
  }, {
    x: 2931.31,
    y: 2760.86,
    z: 43.83
  }, {
    x: 2937.87,
    y: 2756.22,
    z: 43.05
  }, {
    x: 2943.94,
    y: 2755.31,
    z: 42.15
  }, {
    x: 2948.80,
    y: 2754.55,
    z: 42.36
  }, {
    x: 2954.17,
    y: 2752.54,
    z: 42.58
  }, {
    x: 2955.13,
    y: 2755.08,
    z: 42.56
  }, {
    x: 2984.43,
    y: 2762.47,
    z: 41.87
  }, {
    x: 2991.89,
    y: 2775.10,
    z: 42.13
  }, {
    x: 3004.09,
    y: 2773.24,
    z: 42.09
  }, {
    x: 2988.92,
    y: 2755.28,
    z: 41.88
  }, {
    x: 2974.94,
    y: 2746.47,
    z: 42.24
  }, {
    x: 2949.90,
    y: 2738.82,
    z: 43.54
  }, {
    x: 2949.56,
    y: 2732.78,
    z: 44.08
  }, {
    x: 2942.38,
    y: 2739.44,
    z: 43.25
  }, {
    x: 2938.28,
    y: 2745.97,
    z: 42.29
  }, {
    x: 2997.93,
    y: 2756.42,
    z: 42.13
  }, {
    x: 2994.76,
    y: 2754.57,
    z: 42.13
  }, {
    x: 3017.02,
    y: 2744.24,
    z: 55.03
  }, {
    x: 2978.37,
    y: 2692.64,
    z: 63.08
  }, {
    x: 2985.14,
    y: 2703.06,
    z: 63.29
  }]
}, {
  name: "Работа для Посольств",
  desc: "Обрезайте траву",
  item: 895,
  amount_max: 286,
  restore_tick: 286,
  tick_interval_minutes: 60,
  split: true,
  d: 0,
  blip: {
    id: 206,
    color: 25
  },
  fraction: [23, 24, 25],
  anim: {
    task: "WORLD_HUMAN_GARDENER_PLANT",
    seconds: 15,
    text: "Обрезание травы"
  },
  cooldown: 5,
  markerType: 1,
  pos: [{
    x: 1140.72,
    y: 1987.58,
    z: 59.46
  }, {
    x: 1138.72,
    y: 1989.87,
    z: 59.32
  }, {
    x: 1134.79,
    y: 1993.69,
    z: 58.91
  }, {
    x: 1128.29,
    y: 1994.19,
    z: 58.36
  }, {
    x: 1128.10,
    y: 2001.17,
    z: 58.10
  }, {
    x: 1133.98,
    y: 2004.35,
    z: 58.49
  }, {
    x: 1141.03,
    y: 2003.37,
    z: 58.83
  }, {
    x: 1147.33,
    y: 1998.12,
    z: 59.38
  }, {
    x: 1151.36,
    y: 1991.53,
    z: 59.86
  }, {
    x: 1157.30,
    y: 1988.22,
    z: 60.38
  }, {
    x: 1155.09,
    y: 1981.96,
    z: 60.77
  }, {
    x: 1148.52,
    y: 1979.79,
    z: 60.28
  }, {
    x: 1141.78,
    y: 1981.97,
    z: 59.75
  }, {
    x: 1134.62,
    y: 1980.34,
    z: 59.26
  }, {
    x: 1128.88,
    y: 1984.26,
    z: 58.74
  }, {
    x: 1122.91,
    y: 1984.75,
    z: 58.22
  }, {
    x: 1122.39,
    y: 1992.22,
    z: 57.91
  }, {
    x: 1116.86,
    y: 1996.09,
    z: 57.34
  }, {
    x: 1116.81,
    y: 2003.29,
    z: 57.22
  }, {
    x: 1111.16,
    y: 2006.73,
    z: 56.85
  }, {
    x: 1113.57,
    y: 2012.80,
    z: 56.88
  }, {
    x: 1119.90,
    y: 2014.03,
    z: 57.27
  }, {
    x: 1123.40,
    y: 2018.62,
    z: 57.41
  }, {
    x: 1130.42,
    y: 2016.86,
    z: 57.84
  }, {
    x: 1135.64,
    y: 2018.52,
    z: 57.86
  }, {
    x: 1140.99,
    y: 2015.20,
    z: 58.16
  }, {
    x: 1144.94,
    y: 2011.46,
    z: 58.41
  }, {
    x: 1149.28,
    y: 2007.41,
    z: 58.70
  }, {
    x: 1152.08,
    y: 2002.01,
    z: 59.14
  }, {
    x: 1155.70,
    y: 1998.07,
    z: 59.47
  }, {
    x: 1160.79,
    y: 1995.11,
    z: 59.78
  }, {
    x: 1162.90,
    y: 1989.37,
    z: 60.50
  }, {
    x: 1168.05,
    y: 1986.78,
    z: 61.02
  }, {
    x: 1168.33,
    y: 1980.25,
    z: 61.94
  }]
}, {
  name: "Работа для Посольств",
  desc: "Ловите рыбу для суши",
  item: 897,
  amount_max: 286,
  restore_tick: 286,
  tick_interval_minutes: 60,
  split: true,
  d: 0,
  blip: {
    id: 206,
    color: 25
  },
  anim: {
    task: "WORLD_HUMAN_GARDENER_PLANT",
    seconds: 15,
    text: "Ловля рыбы"
  },
  cooldown: 5,
  fraction: [23, 24, 25],
  markerType: 1,
  pos: [{
    x: -2135.39,
    y: -524.73,
    z: -0.37
  }, {
    x: -2135.55,
    y: -522.98,
    z: -0.25
  }, {
    x: -2139.21,
    y: -518.45,
    z: -0.21
  }, {
    x: -2144.15,
    y: -514.90,
    z: -0.30
  }, {
    x: -2147.44,
    y: -512.85,
    z: -0.30
  }, {
    x: -2150.33,
    y: -509.35,
    z: -0.14
  }, {
    x: -2154.57,
    y: -508.42,
    z: -0.26
  }, {
    x: -2156.07,
    y: -511.90,
    z: -0.71
  }, {
    x: -2153.80,
    y: -515.71,
    z: -0.94
  }, {
    x: -2150.82,
    y: -518.91,
    z: -1.04
  }, {
    x: -2146.86,
    y: -521.66,
    z: -1.05
  }, {
    x: -2143.00,
    y: -524.50,
    z: -1.03
  }, {
    x: -2139.93,
    y: -526.73,
    z: -1.39
  }, {
    x: -2135.75,
    y: -526.38,
    z: -0.62
  }, {
    x: -2132.76,
    y: -527.97,
    z: -0.38
  }, {
    x: -2129.45,
    y: -531.13,
    z: -0.19
  }, {
    x: -2126.50,
    y: -534.45,
    z: -0.00
  }, {
    x: -2125.05,
    y: -540.41,
    z: 0.17
  }, {
    x: -2129.51,
    y: -544.57,
    z: -0.91
  }, {
    x: -2133.59,
    y: -542.18,
    z: -1.52
  }, {
    x: -2135.25,
    y: -538.94,
    z: -1.54
  }, {
    x: -2137.39,
    y: -534.98,
    z: -1.34
  }, {
    x: -2139.51,
    y: -531.49,
    z: -1.28
  }, {
    x: -2141.94,
    y: -526.71,
    z: -1.19
  }, {
    x: -2157.12,
    y: -509.21,
    z: -0.51
  }, {
    x: -2161.01,
    y: -504.39,
    z: -0.28
  }, {
    x: -2163.86,
    y: -505.61,
    z: -0.62
  }, {
    x: -2168.03,
    y: -506.53,
    z: -0.91
  }, {
    x: -2164.84,
    y: -508.41,
    z: -0.90
  }, {
    x: -2162.08,
    y: -511.49,
    z: -0.98
  }, {
    x: -2159.01,
    y: -515.72,
    z: -1.14
  }, {
    x: -2156.26,
    y: -518.91,
    z: -1.45
  }, {
    x: -2153.09,
    y: -521.44,
    z: -1.23
  }, {
    x: -2149.39,
    y: -524.46,
    z: -1.17
  }, {
    x: -2146.40,
    y: -527.38,
    z: -1.14
  }, {
    x: -2142.53,
    y: -532.03,
    z: -1.10
  }, {
    x: -2139.22,
    y: -536.76,
    z: -1.05
  }, {
    x: -2136.27,
    y: -541.28,
    z: -1.01
  }, {
    x: -2126.36,
    y: -543.65,
    z: -0.56
  }]
}];
},{}],"buab":[function(require,module,exports) {
"use strict";

var _farm = require("../../shared/farm");
var _system = require("./system");
_farm.FARMING_POSITIONS.map((item, id) => {
  if (item.blip) {
    _system.system.createDynamicBlip(`farm_${id}`, item.blip.id, item.blip.color, _system.system.middlePoint3d(...item.pos), item.name, {
      dimension: item.d,
      fraction: item.fraction
    });
  }
});
},{"../../shared/farm":"mXQQ","./system":"pi2J"}],"UOh7":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _system = require("./system");
let blips = new Map();
_custom.CustomEvent.registerServer('task:getDrugPoints', data => {
  blips.forEach(q => {
    if (mp.blips.exists(q)) q.destroy();
  });
  blips = new Map();
  data.map(item => {
    blips.set(item[0], _system.system.createBlip(140, 1, new mp.Vector3(item[1], item[2], item[3]), 'Точка закладки', 0, false));
  });
});
},{"./custom.event":"py8h","./system":"pi2J"}],"rKmk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NPC_SELLERS_LIST = void 0;
const NPC_SELLERS_LIST = exports.NPC_SELLERS_LIST = [{
  name: "Vadim",
  model: "s_m_y_dealer_01",
  pos: new mp.Vector3(1984.88, 5175.11, 47.64),
  heading: 101,
  items: [{
    item: 880,
    cost: [100, 150],
    max: 0,
    start: 1000,
    perhour: 500
  }, {
    item: 60,
    cost: [100, 150],
    max: 0,
    start: 1000,
    perhour: 500
  }, {
    item: 58,
    cost: [150, 200],
    max: 0,
    start: 1000,
    perhour: 500
  }, {
    item: 59,
    cost: [150, 200],
    max: 0,
    start: 1000,
    perhour: 500
  }],
  dimension: 0,
  factions: [18, 19, 21, 20, 22, 23, 24, 25],
  blip: {
    id: 496,
    color: 52
  }
}];
},{}],"rRcs":[function(require,module,exports) {
"use strict";

var _system = require("./system");
var _npc = require("../../shared/npc.seller");
_npc.NPC_SELLERS_LIST.map((item, itemid) => {
  if (item.blip) _system.system.createDynamicBlip(`npc_seller_${itemid}`, item.blip.id, item.blip.color, item.pos, item.name, {
    fraction: item.factions,
    dimension: item.dimension
  });
});
},{"./system":"pi2J","../../shared/npc.seller":"rKmk"}],"vfW2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CRAFTING_TABLES = exports.CRAFTING_ITEMS = void 0;
var _inventory = require("./inventory");
const CRAFTING_ITEMS = exports.CRAFTING_ITEMS = [{
  items: [[859, 1], [858, 1], [857, 1]],
  seconds: 30,
  type: "bomb",
  item: 854
}, {
  items: [[872, 1], [873, 1], [874, 1], [875, 1], [876, 1], [877, 1], [878, 1]],
  seconds: 5,
  type: "gun103",
  item: 532
}, {
  items: [[872, 1], [873, 1], [874, 1], [875, 1]],
  seconds: 5,
  type: "gunTec",
  item: 511
}, {
  items: [[880, 10], [55, 10]],
  seconds: 2,
  type: "trava",
  item: 51,
  count: 10
}, {
  items: [[57, 10], [55, 10], [58, 10]],
  seconds: 2,
  type: "lsd",
  item: 52,
  count: 10
}, {
  items: [[60, 10], [55, 10]],
  seconds: 2,
  type: "DMT",
  item: 53,
  count: 10
}, {
  items: [[55, 10], [56, 10], [59, 10]],
  seconds: 2,
  type: "mef",
  item: 50,
  count: 10
}, {
  items: [[4000, 1], [4001, 1], [4002, 1]],
  seconds: 2,
  type: "armor",
  item: _inventory.ARMOR_ITEM_ID
}, {
  items: [[879, 5]],
  seconds: 20,
  type: "winepress",
  item: 881
}, {
  items: [[881, 1]],
  seconds: 40,
  type: "winebottle",
  item: 882
}, {
  items: [[883, 10]],
  seconds: 60,
  type: "biofuel",
  item: 884
}, {
  items: [[895, 10]],
  seconds: 60,
  type: "silos",
  item: 896
}, {
  items: [[897, 10]],
  seconds: 60,
  type: "sushi",
  item: 898
}];
const CRAFTING_TABLES = exports.CRAFTING_TABLES = [{
  pos: [{
    x: -476.22,
    y: -1724.48,
    z: 18.51,
    h: 103
  }, {
    x: 107.10,
    y: -1982.84,
    z: 19.96,
    h: 303
  }, {
    x: 501.99,
    y: -1949.99,
    z: 23.72,
    h: 304
  }, {
    x: 892.85,
    y: -2150.90,
    z: 31.27,
    h: 354
  }, {
    x: 453.37,
    y: -1324.83,
    z: 28.27,
    h: 49
  }, {
    x: -1490.10,
    y: 834.79,
    z: 176.00,
    h: 115
  }, {
    x: 1399.26,
    y: 1142.09,
    z: 106.33,
    h: 176
  }, {
    x: -347.97,
    y: 182.69,
    z: 81.95,
    h: 260
  }],
  type: "gun103",
  name: "Крафт AK-103",
  anim: ["anim@heists@money_grab@duffel", "loop"],
  mode: "long",
  fractions: [18, 19, 20, 21, 22, 23, 24, 25],
  mafia: true
}, {
  pos: [{
    x: -478.63,
    y: -1723.58,
    z: 18.51,
    h: 18
  }, {
    x: 105.90,
    y: -1979.62,
    z: 19.96,
    h: 10
  }, {
    x: 499.65,
    y: -1946.70,
    z: 23.72,
    h: 31
  }, {
    x: 888.86,
    y: -2150.42,
    z: 31.27,
    h: 355
  }, {
    x: 450.48,
    y: -1322.39,
    z: 28.27,
    h: 50
  }],
  type: "gunTec",
  name: "Крафт револьвера",
  anim: ["anim@heists@money_grab@duffel", "loop"],
  mode: "long",
  fractions: [18, 19, 20, 21, 22]
}, {
  pos: [{
    x: -494.98,
    y: -1713.46,
    z: 18.96,
    h: 6
  }, {
    x: 89.73,
    y: -1985.43,
    z: 19.44,
    h: 293
  }, {
    x: 495.42,
    y: -1943.95,
    z: 23.72,
    h: 120
  }, {
    x: 896.71,
    y: -2161.14,
    z: 31.27,
    h: 83
  }, {
    x: 465.11,
    y: -1331.95,
    z: 28.27,
    h: 324
  }],
  type: "trava",
  name: "Крафт марихуаны",
  anim: ["anim@heists@money_grab@duffel", "loop"],
  mode: "short",
  fractions: [21, 19, 22, 18, 20]
}, {
  pos: [{
    x: -492.91,
    y: -1712.94,
    z: 18.96,
    h: 6
  }, {
    x: 90.82,
    y: -1983.43,
    z: 19.44,
    h: 293
  }, {
    x: 497.30,
    y: -1942.79,
    z: 23.72,
    h: 120
  }, {
    x: 897.30,
    y: -2156.44,
    z: 31.27,
    h: 83
  }, {
    x: 466.54,
    y: -1330.12,
    z: 28.27,
    h: 324
  }],
  type: "lsd",
  name: "Крафт ЛСД",
  anim: ["anim@heists@money_grab@duffel", "loop"],
  mode: "short",
  fractions: [21, 19, 22, 18, 20]
}, {
  pos: [{
    x: -352.45,
    y: 186.52,
    z: 81.95,
    h: 6
  }, {
    x: -1489.74,
    y: 841.91,
    z: 176.00,
    h: 293
  }, {
    x: 1384.03,
    y: 1136.31,
    z: 106.33,
    h: 120
  }],
  type: "DMT",
  name: "Крафт DMT",
  anim: ["anim@heists@money_grab@duffel", "loop"],
  mode: "short",
  fractions: [23, 24, 25]
}, {
  pos: [{
    x: -354.09,
    y: 187.38,
    z: 81.95,
    h: 6
  }, {
    x: -1491.82,
    y: 840.96,
    z: 176.00,
    h: 293
  }, {
    x: 1386.48,
    y: 1136.40,
    z: 106.33,
    h: 120
  }],
  type: "mef",
  name: "Крафт амфетамина",
  anim: ["anim@heists@money_grab@duffel", "loop"],
  mode: "short",
  fractions: [23, 24, 25]
}, {
  pos: [{
    x: 437.13,
    y: 6455.88,
    z: 27.74,
    h: 141
  }, {
    x: 431.99,
    y: 6460.27,
    z: 27.75,
    h: 141
  }, {
    x: 426.98,
    y: 6464.19,
    z: 27.78,
    h: 133
  }],
  type: "winepress",
  name: "Отжим винограда",
  anim: ["special_ped@mountain_dancer@monologue_1@monologue_1a", "mtn_dnc_if_you_want_to_get_to_heaven"],
  mode: "short",
  blipid: 365,
  blipcolor: 49,
  fractions: [23, 24, 25]
}, {
  pos: [{
    x: 421.14,
    y: 6453.42,
    z: 27.98,
    h: 178
  }, {
    x: 415.34,
    y: 6452.03,
    z: 27.81,
    h: 183
  }, {
    x: 406.10,
    y: 6452.09,
    z: 27.81,
    h: 177
  }],
  type: "winebottle",
  name: "Изготовления вина",
  anim: ["mini@repair", "fixing_a_ped"],
  mode: "short",
  blipid: 365,
  blipcolor: 49,
  fractions: [23, 24, 25]
}, {
  pos: [{
    x: 360.09,
    y: 3407.24,
    z: 35.40,
    h: 111
  }, {
    x: 360.83,
    y: 3404.44,
    z: 35.40,
    h: 116
  }],
  type: "biofuel",
  name: "Изготовления биотоплива",
  anim: ["mini@repair", "fixing_a_ped"],
  mode: "short",
  blipid: 361,
  blipcolor: 25,
  fractions: [23, 24, 25]
}, {
  pos: [{
    x: -65.98,
    y: 6243.67,
    z: 30.08,
    h: 298
  }, {
    x: -64.82,
    y: 6241.92,
    z: 30.09,
    h: 303
  }],
  type: "silos",
  name: "Изготовления силоса",
  anim: ["mini@repair", "fixing_a_ped"],
  mode: "short",
  blipid: 361,
  blipcolor: 25,
  fractions: [23, 24, 25]
}, {
  pos: [{
    x: -97.38,
    y: 2809.66,
    z: 52.22,
    h: 263
  }, {
    x: -96.05,
    y: 2811.75,
    z: 52.26,
    h: 333
  }],
  type: "sushi",
  name: "Изготовление суши",
  anim: ["mini@repair", "fixing_a_ped"],
  mode: "short",
  blipid: 760,
  blipcolor: 47,
  fractions: [23, 24, 25]
}];
},{"./inventory":"vpPR"}],"tmgr":[function(require,module,exports) {
"use strict";

var _crafting = require("../../shared/crafting");
var _system = require("./system");
_crafting.CRAFTING_TABLES.map((table, tableid) => {
  if (table.blipid) {
    setTimeout(() => {
      table.pos.map((q, i) => {
        _system.system.createDynamicBlip(`crafting_${tableid}_${i}`, table.blipid, table.blipcolor, q, table.name, {
          fraction: table.fractions
        });
      });
    }, 1000);
  }
});
},{"../../shared/crafting":"vfW2","./system":"pi2J"}],"RnBA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disableCasinoCollision = void 0;
var _main = require("../../../shared/casino/main");
var _roulette = require("./roulette");
var _slots = require("./slots");
var _dice = require("./dice");
var _user = require("../user");
let playersHandles = new Map();
const inCasinoInt = () => {
  const {
    x,
    y,
    z
  } = mp.players.local.position;
  return _main.CASINO_INTERIORS_IDS_IN.includes(mp.game.interior.getInteriorAtCoords(x, y, z));
};
setInterval(() => {
  if (!_user.user.login) return;
  if (!inCasinoInt()) return;
  mp.players.forEachInStreamRange(target => {
    if (target.id === mp.players.local.id) return;
    const id = target.remoteId;
    const inAnim = target.isPlayingAnim(_main.ENTER_ANIM[0], _main.ENTER_ANIM[1], 3) || target.getVariable('casino:freeze');
    if (inAnim == playersHandles.has(id)) return;
    disableCasinoCollision(target, inAnim);
    if (!inAnim) playersHandles.delete(id);else playersHandles.set(id, true);
  });
}, 200);
const disableCasinoCollision = (target, status) => {
  const tableId = (0, _roulette.getNearestRouletteTable)(target);
  if (tableId) {
    const table = (0, _roulette.getRouletteObject)(tableId);
    if (table && table.handle) target.setNoCollision(table.handle, !status);
  }
  const slot = (0, _slots.getNearestSlotsMachine)(target);
  if (slot && slot.handle) target.setNoCollision(slot.handle, !status);
  const dice = (0, _dice.nearestDiceTableObject)(target);
  if (dice && dice.handle) target.setNoCollision(dice.handle, !status);
};
exports.disableCasinoCollision = disableCasinoCollision;
},{"../../../shared/casino/main":"FJpA","./roulette":"YFCp","./slots":"scHn","./dice":"UScX","../user":"ggMw"}],"OgJD":[function(require,module,exports) {
"use strict";

var _system = require("../system");
var _user = require("../user");
var _main = require("../../../shared/casino/main");
let enabled = false;
let renderTarget;
const SCREEN_DIAMONDS = "CASINO_DIA_PL";
const SCREEN_SKULLS = "CASINO_HLW_PL";
const SCREEN_SNOW = "CASINO_SNWFLK_PL";
const SCREEN_WIN = "CASINO_WIN_PL";
const targetName = "casinoscreen_01";
const targetModel = mp.game.joaat('vw_vwint01_video_overlay');
const textureDict = "Prop_Screen_Vinewood";
const textureName = "BG_Wall_Colour_4x4";
const enableScreens = async () => {
  try {
    mp.game.graphics.requestStreamedTextureDict(textureDict, false);
    while (!mp.game.graphics.hasStreamedTextureDictLoaded(textureDict)) {
      await _system.system.sleep(100);
    }
    mp.game.ui.registerNamedRendertarget(targetName, false);
    mp.game.ui.linkNamedRendertarget(targetModel);
    mp.game.invoke('0xF7B38B8305F1FE8B', 0, SCREEN_DIAMONDS, true);
    mp.game.graphics.setTvAudioFrontend(true);
    mp.game.graphics.setTvVolume(-99.999999);
    mp.game.graphics.setTvChannel(-1);
    renderTarget = mp.game.ui.getNamedRendertargetRenderId(targetName);
    enabled = true;
    setTimeout(() => {
      mp.game.graphics.setTvChannel(0);
    }, 100);
  } catch (e) {
    mp.console.logError(e);
  }
};
mp.events.add('render', function () {
  if (enabled) {
    mp.game.ui.setTextRenderId(renderTarget);
    mp.game.invoke('0x61BB1D9B3A95D802', 4);
    mp.game.invoke('0xC6372ECD45D73BCD', true);
    mp.game.invoke('0x2BC54A8188768488', textureDict, textureName, 0.25, 0.5, 0.5, 1.0000001, 0.0000001, 255, 255, 255, 255);
    mp.game.graphics.drawTvChannel(0.5, 0.5, 1.0000001, 1.0000001, 0.0000001, 255, 255, 255, 255);
    mp.game.ui.setTextRenderId(1);
  }
});
const inCasinoInt = () => {
  const {
    x,
    y,
    z
  } = mp.players.local.position;
  return _main.CASINO_INTERIORS_IDS_IN.includes(mp.game.interior.getInteriorAtCoords(x, y, z));
};
let enableInt = setInterval(() => {
  if (!_user.user.login) return;
  if (!inCasinoInt()) return;
  if (enabled) return;
  enableScreens();
  clearInterval(enableInt);
}, 1000);
},{"../system":"pi2J","../user":"ggMw","../../../shared/casino/main":"FJpA"}],"zOB6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WHEEL_PROP = exports.WHEEL_POSITION = exports.WHEEL_INTERACTION_POSITION = exports.WHEEL_ANIM_DICT_MALE = exports.WHEEL_ANIM_DICT_FEMALE = exports.WHEEL_ANIMATIONS = exports.CASINO_DIMENSION = void 0;
var _main = require("./main");
const WHEEL_PROP = exports.WHEEL_PROP = 'vw_prop_vw_luckywheel_02a';
const WHEEL_POSITION = exports.WHEEL_POSITION = new mp.Vector3(1111.052, 229.8579, -49.133);
const WHEEL_ANIMATIONS = exports.WHEEL_ANIMATIONS = ['Enter_to_ArmRaisedIDLE', 'ArmRaisedIDLE_to_SpinningIDLE_High', 'SpinningIDLE_High', 'Win_Big'];
const WHEEL_ANIM_DICT_MALE = exports.WHEEL_ANIM_DICT_MALE = "ANIM_CASINO_A@AMB@CASINO@GAMES@LUCKY7WHEEL@MALE";
const WHEEL_ANIM_DICT_FEMALE = exports.WHEEL_ANIM_DICT_FEMALE = "ANIM_CASINO_A@AMB@CASINO@GAMES@LUCKY7WHEEL@FEMALE";
const WHEEL_INTERACTION_POSITION = exports.WHEEL_INTERACTION_POSITION = new mp.Vector3(1110.8710, 228.8737, -49.6358);
const CASINO_DIMENSION = exports.CASINO_DIMENSION = _main.CASINO_MAIN_DIMENSION;
},{"./main":"FJpA"}],"SHej":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wheel = void 0;
var _wheel = require("../../../../shared/casino/wheel");
class Wheel {
  constructor() {
    this.isSpinning = false;
    this.stopNow = false;
    this._entity = mp.objects.new(mp.game.joaat(_wheel.WHEEL_PROP), _wheel.WHEEL_POSITION, {
      dimension: _wheel.CASINO_DIMENSION
    });
  }
  get entity() {
    return this._entity;
  }
  setFinishRot(rot) {
    if (this.isSpinning) this.stopNow = true;
    this._entity.setRotation(0, rot, 0, 2, true);
  }
  playStartSpinSound(position) {
    mp.game.audio.playSoundFromCoord(1, 'Spin_Start', position.x, position.y, position.z, 'dlc_vw_casino_lucky_wheel_sounds', true, 0, false);
  }
  playerWinSound(position) {
    mp.game.audio.playSoundFromCoord(1, 'Win', position.x, position.y, position.z, "dlc_vw_casino_lucky_wheel_sounds", true, 0, false);
  }
}
exports.Wheel = Wheel;
},{"../../../../shared/casino/wheel":"zOB6"}],"jsm5":[function(require,module,exports) {
"use strict";

var _wheel = require("./wheel");
var _custom = require("../../custom.event");
var _user = require("../../user");
var _wheel2 = require("../../../../shared/casino/wheel");
class LuckyWheel {
  constructor() {
    this.wheel = new _wheel.Wheel();
    this.player = mp.players.local;
    this.loadAnimDict();
    _custom.CustomEvent.registerServer("casino:wheel:towheel", async () => {
      await this.comeToWheel();
    });
    _custom.CustomEvent.registerServer("casino:wheel:spin", (prize, isOwner) => {
      this.spin(prize, isOwner).then(() => {
        if (isOwner) _custom.CustomEvent.triggerServer('casino:wheel:prize', prize, this.wheel.entity.getRotation(1).y);
      });
    });
    _custom.CustomEvent.registerServer("casino:wheel:finishSpin", rot => {
      this.wheel.setFinishRot(rot);
    });
  }
  get dictionary() {
    return _user.user.getSex() === "M" ? _wheel2.WHEEL_ANIM_DICT_MALE : _wheel2.WHEEL_ANIM_DICT_FEMALE;
  }
  async spin(prize, isOwner) {
    let spins = 320,
      maxSpeed = 2.25,
      speed = maxSpeed / (320 * 2 + (prize + this.wheel.entity.getRotation(1).y / 18) * 16 + 1);
    this.wheel.playStartSpinSound(_wheel2.WHEEL_POSITION);
    this.wheel.isSpinning = true;
    while (true) {
      if (!this.wheel.entity.doesExist()) break;
      if (this.wheel.stopNow) {
        this.wheel.stopNow = false;
        break;
      }
      if (spins <= 0) {
        maxSpeed -= speed;
        this.wheel.entity.setRotation(0, this.wheel.entity.getRotation(1).y - maxSpeed, 0, 2, true);
        if (maxSpeed <= 0) {
          this.wheel.entity.setRotation(0, Math.round(this.wheel.entity.getRotation(1).y), 0, 2, true);
          this.wheel.playerWinSound(_wheel2.WHEEL_POSITION);
          if (isOwner) {
            this.player.taskPlayAnim(this.dictionary, _wheel2.WHEEL_ANIMATIONS[3], 4, -1000, -1, 1048576, 0, false, true, false);
            while (true) {
              if (this.player.isPlayingAnim(this.dictionary, _wheel2.WHEEL_ANIMATIONS[3], 3) && this.player.getAnimCurrentTime(this.dictionary, _wheel2.WHEEL_ANIMATIONS[3]) > 0.75) {
                this.player.clearTasks();
                break;
              }
              await mp.game.waitAsync(0);
            }
          }
          break;
        }
      } else {
        spins--;
        this.wheel.entity.setRotation(0, this.wheel.entity.getRotation(1).y - maxSpeed, 0, 2, true);
      }
      await mp.game.waitAsync(5);
    }
    this.wheel.isSpinning = false;
  }
  loadAnimDict(isMale = null) {
    if (isMale !== null) {
      const dict = isMale ? _wheel2.WHEEL_ANIM_DICT_MALE : _wheel2.WHEEL_ANIM_DICT_FEMALE;
      if (!mp.game.streaming.hasAnimDictLoaded(dict)) mp.game.streaming.requestAnimDict(dict);
    } else {
      if (!mp.game.streaming.hasAnimDictLoaded(_wheel2.WHEEL_ANIM_DICT_MALE)) mp.game.streaming.requestAnimDict(_wheel2.WHEEL_ANIM_DICT_MALE);
      if (!mp.game.streaming.hasAnimDictLoaded(_wheel2.WHEEL_ANIM_DICT_FEMALE)) mp.game.streaming.requestAnimDict(_wheel2.WHEEL_ANIM_DICT_FEMALE);
    }
  }
  async comeToWheel() {
    this.loadAnimDict(_user.user.getSex() === "M");
    if (this.player.getScriptTaskStatus(2106541073) === 1 || this.player.getScriptTaskStatus(2106541073) === 0) return;
    const offset = mp.game.ped.getAnimInitialOffsetPosition(this.dictionary, _wheel2.WHEEL_ANIMATIONS[0], 1111.052, 229.8492, -50.6409, 0, 0, 0, 0, 2);
    this.player.taskGoStraightToCoord(offset.x, offset.y, offset.z, 1, 8000, 317, 0.001);
    while (!(this.player.getScriptTaskStatus(2106541073) == 7 || this.player.isAtCoord(offset.x, offset.y, offset.z, 0.1, 0.0, 0.0, false, true, 0))) {
      await mp.game.waitAsync(0);
    }
    this.player.taskPlayAnim(this.dictionary, _wheel2.WHEEL_ANIMATIONS[0], 4, -1000, -1, 1048576, 0, false, true, false);
    let isGoing;
    while (true) {
      if (this.player.isPlayingAnim(this.dictionary, _wheel2.WHEEL_ANIMATIONS[0], 3) && this.player.getAnimCurrentTime(this.dictionary, _wheel2.WHEEL_ANIMATIONS[0]) > 0.97) {
        this.player.taskPlayAnim(this.dictionary, _wheel2.WHEEL_ANIMATIONS[1], 4, -1000, -1, 1048576, 0, false, true, false);
      }
      if (this.player.isPlayingAnim(this.dictionary, _wheel2.WHEEL_ANIMATIONS[1], 3)) {
        if (!isGoing && this.player.getAnimCurrentTime(this.dictionary, _wheel2.WHEEL_ANIMATIONS[1]) > 0.04) {
          isGoing = true;
          _custom.CustomEvent.triggerServer('casino:wheel:readyForSpin');
        }
        if (this.player.getAnimCurrentTime(this.dictionary, _wheel2.WHEEL_ANIMATIONS[1]) > 0.8) {
          this.player.taskPlayAnim(this.dictionary, _wheel2.WHEEL_ANIMATIONS[2], 8.0, 1.0, -1, 1, 1.0, false, false, false);
          break;
        }
      }
      await mp.game.waitAsync(0);
    }
  }
}
new LuckyWheel();
},{"./wheel":"SHej","../../custom.event":"py8h","../../user":"ggMw","../../../../shared/casino/wheel":"zOB6"}],"ydwT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inCasinoInt = void 0;
var _npc = require("../npc.dialog");
var _main = require("../../../shared/casino/main");
var _system = require("../system");
var _gui = require("../gui");
require("./roulette");
require("./slots");
require("./dice");
require("./fixAnimations");
require("./walls");
require("./wheel");
var _user = require("../user");
var _custom = require("../custom.event");
var _dice2 = require("../../../shared/casino/dice");
_system.system.createBlipInterrior(628, 0, new mp.Vector3(_main.CASINO_CASHIER.pedPos.x, _main.CASINO_CASHIER.pedPos.y, _main.CASINO_CASHIER.pedPos.z), 'Касса', _main.CASINO_CASHIER.dimension);
_system.system.createBlipInterrior(366, 0, new mp.Vector3(_dice2.DICE_TABLE_SETTINGS.DRESS_POS.x, _dice2.DICE_TABLE_SETTINGS.DRESS_POS.y, _dice2.DICE_TABLE_SETTINGS.DRESS_POS.z), 'Раздевалка', _main.CASINO_MAIN_DIMENSION);
_system.system.createBlip(679, 0, new mp.Vector3(_main.CASINO_ENTER.x, _main.CASINO_ENTER.y, _main.CASINO_ENTER.z), `Казино`, 0);
let npcCash = new _npc.NpcSpawn(new mp.Vector3(_main.CASINO_CASHIER.pedPos.x, _main.CASINO_CASHIER.pedPos.y, _main.CASINO_CASHIER.pedPos.z), _main.CASINO_CASHIER.pedPos.h, _main.CASINO_CASHIER.model, _main.CASINO_CASHIER.name, () => {
  _gui.gui.setGuiWithEvent('casino');
}, 7, _main.CASINO_CASHIER.dimension, 4);
npcCash.anim = ["anim_casino_b@amb@casino@games@roulette@dealer_female", "idle"];
npcCash.greeting = {
  dist: 5,
  voiceName: _main.CASINO_CASHIER.speech,
  speechName: 'MINIGAME_DEALER_GREET',
  speechParam: 'SPEECH_PARAMS_FORCE'
};
mp.events.addDataHandler("casino:freeze", async (target, val) => {
  if (target.type !== "player") return;
  target.freezePosition(!!val);
});
mp.events.add('entityStreamIn', async target => {
  if (target.type !== "player") return;
  if (!target.getVariable('casino:freeze')) return;
  target.freezePosition(true);
});
const inCasinoInt = () => {
  const {
    x,
    y,
    z
  } = mp.players.local.position;
  return _main.CASINO_INTERIORS_IDS_IN.includes(mp.game.interior.getInteriorAtCoords(x, y, z));
};
exports.inCasinoInt = inCasinoInt;
let inCasinoCef = false;
setInterval(() => {
  if (!_user.user.login) return;
  let q = inCasinoInt();
  if (q !== inCasinoCef) {
    _custom.CustomEvent.triggerCef('hud:incasino', q);
    inCasinoCef = q;
  }
}, 1000);
},{"../npc.dialog":"CWsZ","../../../shared/casino/main":"FJpA","../system":"pi2J","../gui":"bk91","./roulette":"YFCp","./slots":"scHn","./dice":"UScX","./fixAnimations":"RnBA","./walls":"OgJD","./wheel":"jsm5","../user":"ggMw","../custom.event":"py8h","../../../shared/casino/dice":"EbPE"}],"ZVj5":[function(require,module,exports) {
"use strict";

var _accept = require("./accept");
var _custom = require("./custom.event");
var _user = require("./user");
const player = mp.players.local;
mp.events.add("playerCreateWaypoint", position => {
  if (!player.vehicle || _user.user.isDriver) return;
  (0, _accept.DialogAccept)('Передать маршрут водителю?', 'small', 15000).then(status => {
    if (!status) return;
    _custom.CustomEvent.triggerServer('gpsMarkSyncRequest', position);
  });
});
},{"./accept":"RT6N","./custom.event":"py8h","./user":"ggMw"}],"TuAn":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _menu = require("./menu");
var _cloth = require("./cloth");
var _user = require("./user");
var _system = require("./system");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const player = mp.players.local;
let components = [107, 106, 102, 101, 100, 7, 1, 6, 4, 3, 8, 11];
const getCurrent = () => {
  return components.map(component => [component, (0, _cloth.getComponent)(component).drawable, (0, _cloth.getComponent)(component).texture]);
};
_custom.CustomEvent.registerServer('jobdress:edit', (id, index, data, name) => {
  if (_cloth.oldClothData.length == 0) (0, _cloth.generateClothData)();
  (0, _cloth.undress)();
  if (data) data.map(item => (0, _cloth.setComponent)(item[0], item[1], item[2]));
  const pos = _objectSpread({}, player.position);
  let int = setInterval(() => {
    if (_system.system.distanceToPos(player.position, pos) > 5) {
      close();
    }
  }, 1000);
  const close = () => {
    (0, _cloth.resetCloth)();
    (0, _cloth.resetClothData)();
    clearInterval(int);
    _custom.CustomEvent.triggerServer('job:dress:clear');
    _menu.MenuClass.closeMenu();
  };
  const q = (z = 0) => {
    let m = new _menu.MenuClass("", typeof index === 'number' ? 'Редактирование одежды' : "Добавление одежды");
    m.onclose = () => {
      close();
    };
    m.exitProtect = true;
    m.newItem({
      name: 'Название',
      more: name,
      onpress: (_, i) => {
        (0, _menu.DialogInput)(`Введите значение`, name || '', 10).then(val => {
          if (!val) return;
          name = _system.system.filterInput(val);
          q(i);
        });
      }
    });
    getCurrent().map((item, i) => {
      m.newItem({
        name: '--------------'
      });
      m.newItem({
        name: 'Компонент',
        more: item[0]
      });
      m.newItem({
        name: 'Вид',
        type: 'range',
        rangeselect: [-1, 9999],
        listSelected: item[1] + 1,
        onchange: val => {
          item[1] = val - 1;
          (0, _cloth.setComponent)(item[0], item[1], item[2]);
        },
        onpress: (_, i) => {
          (0, _menu.DialogInput)(`Введите значение`, item[1], 4, 'int').then(val => {
            if (typeof val !== 'number') return;
            item[1] = val;
            (0, _cloth.setComponent)(item[0], item[1], item[2]);
            q(i);
          });
        }
      });
      m.newItem({
        name: 'Текстура',
        type: 'range',
        rangeselect: [-1, 9999],
        listSelected: item[2] + 1,
        onchange: val => {
          item[2] = val - 1;
          (0, _cloth.setComponent)(item[0], item[1], item[2]);
        },
        onpress: (_, i) => {
          (0, _menu.DialogInput)(`Введите значение`, item[1], 4, 'int').then(val => {
            if (typeof val !== 'number') return;
            item[2] = val;
            (0, _cloth.setComponent)(item[0], item[1], item[2]);
            q(i);
          });
        }
      });
    });
    m.newItem({
      name: 'Сохранить',
      onpress: () => {
        if (!name) return _user.user.notify("Необходимо указать название", 'error');
        const current = getCurrent();
        close();
        _custom.CustomEvent.triggerServer('job:dress:save', id, index, current, name);
      }
    });
    m.open(z);
  };
  q();
});
},{"./custom.event":"py8h","./menu":"Aiz7","./cloth":"Sp7p","./user":"ggMw","./system":"pi2J"}],"m5tX":[function(require,module,exports) {
"use strict";

var _system = require("./system");
var _cameraManager = require("./cameraManager");
var _gui = require("./gui");
var _user = require("./user");
var _fractions = require("./fractions");
let fov_max = 80.0;
let fov_min = 10.0;
let zoomspeed = 2.0;
let speed_lr = 3.0;
let speed_ud = 3.0;
let toggle_helicam = 51;
let toggle_vision = 25;
let toggle_rappel = 154;
let toggle_spotlight = 183;
let toggle_lock_on = 22;
let locked_on_vehicle;
let helicam = false;
let helicamTick = false;
let fov = (fov_max + fov_min) * 0.5;
let vision_state = 0;
let scaleform;
const camera = _cameraManager.CamerasManager.hasCamera('heli_cam') ? _cameraManager.CamerasManager.getCamera('heli_cam') : _cameraManager.CamerasManager.createCamera('heli_cam', 'default', new mp.Vector3(0, 0, 0), new mp.Vector3(-90, 0, 0), 50);
mp.events.add('render', () => {
  if (!IsPlayerInPolmav()) return quit();
  if (IsHeliHighEnough()) {
    const veh = mp.players.local.vehicle;
    if (mp.game.controls.isControlJustPressed(0, toggle_helicam)) {
      if (mp.players.local.handle !== veh.getPedInSeat(0)) return _user.user.notify('Только второй пилот может использовать камеру', 'error');
      mp.game.audio.playSoundFrontend(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false);
      helicam = !helicam;
    }
    if (helicam) {
      if (mp.game.controls.isControlJustPressed(0, toggle_vision)) {
        mp.game.audio.playSoundFrontend(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false);
        changeVision();
      }
      if (!helicamTick) {
        mp.game.graphics.setTimecycleModifier("heliGunCam");
        mp.game.graphics.setTimecycleModifierStrength(0.3);
        scaleform = mp.game.graphics.requestScaleformMovie("HELI_CAM");
        if (!mp.game.graphics.hasScaleformMovieLoaded(scaleform)) return;
        helicamTick = true;
        (0, _gui.hideHud)(true);
        return;
      }
      camera.attachTo(veh.handle, 0.0, 2.7, -1.0, true);
      camera.setFov(fov);
      camera.setActive(true);
      mp.game.cam.renderScriptCams(true, false, 0, true, false);
      mp.game.graphics.pushScaleformMovieFunction(scaleform, "SET_CAM_LOGO");
      mp.game.graphics.pushScaleformMovieFunctionParameterInt(mp.players.local.isInAnyPoliceVehicle() ? 1 : 0);
      mp.game.graphics.popScaleformMovieFunctionVoid();
      let vehicle_detected = GetVehicleInView();
      if (locked_on_vehicle) {
        const target = mp.vehicles.atHandle(locked_on_vehicle);
        if (!target || !target.handle) {
          camera.stopPointing();
          locked_on_vehicle = null;
        } else {
          camera.pointAt(target.handle, 0.0, 0.0, 0.0, true);
        }
      }
      if (vehicle_detected) {
        const target = mp.vehicles.atHandle(vehicle_detected);
        if (target) {
          const model = mp.game.ui.getLabelText(mp.game.vehicle.getDisplayNameFromVehicleModel(target.model));
          const plate = target.getNumberPlateText();
          _gui.gui.drawText(`Модель: ${model}\nНомер: ${plate || 'Не известен'}`, 0.45, 0.9, [0.0, 0.55]);
        }
      }
      let zoomvalue = 1.0 / (fov_max - fov_min) * (fov - fov_min);
      if (!locked_on_vehicle) {
        CheckInputRotation(zoomvalue);
        if (vehicle_detected) {
          if (mp.game.controls.isControlJustPressed(0, toggle_lock_on)) {
            mp.game.audio.playSoundFrontend(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false);
            locked_on_vehicle = vehicle_detected;
          }
        }
      } else if (mp.game.controls.isControlJustPressed(0, toggle_lock_on) && locked_on_vehicle) {
        mp.game.audio.playSoundFrontend(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false);
        locked_on_vehicle = 9999999;
      }
      HandleZoom();
      HideHUDThisFrame();
      mp.game.graphics.pushScaleformMovieFunction(scaleform, "SET_ALT_FOV_HEADING");
      mp.game.graphics.pushScaleformMovieFunctionParameterFloat(camera.getCoord().z);
      mp.game.graphics.pushScaleformMovieFunctionParameterFloat(zoomvalue);
      mp.game.graphics.pushScaleformMovieFunctionParameterFloat(camera.getRot(2).z);
      mp.game.graphics.popScaleformMovieFunctionVoid();
      mp.game.graphics.drawScaleformMovieFullscreen(scaleform, 255, 255, 255, 255, true);
      return;
    }
  }
  quit();
});
const GetVehicleInView = () => {
  var _mp$players$local$veh;
  const coords = camera.getCoord();
  let forward_vector = RotAnglesToVec(camera.getRot(2));
  const start = new mp.Vector3(coords.x + forward_vector.x * 10.0, coords.y + forward_vector.y * 10.0, coords.z + forward_vector.z * 10.0);
  const end = new mp.Vector3(coords.x + forward_vector.x * 200.0, coords.y + forward_vector.y * 200.0, coords.z + forward_vector.z * 200.0);
  let rayhandle = mp.raycasting.testCapsule(start, end, 5.0, [(_mp$players$local$veh = mp.players.local.vehicle) === null || _mp$players$local$veh === void 0 ? void 0 : _mp$players$local$veh.handle], [10]);
  if (!rayhandle || !rayhandle.entity) return null;
  return typeof rayhandle.entity === 'number' ? rayhandle.entity : rayhandle.entity.handle;
};
const quit = () => {
  if (!helicamTick) return;
  camera.setActive(false);
  mp.game.cam.renderScriptCams(false, false, 0, true, false);
  mp.game.graphics.setTimecycleModifier('default');
  helicamTick = false;
  helicam = false;
  mp.game.graphics.setNightvision(false);
  mp.game.graphics.setSeethrough(false);
  vision_state = 0;
  (0, _gui.hideHud)(false);
};
mp.game.graphics.setSeethrough(false);
mp.game.graphics.setNightvision(false);
mp.game.graphics.setTimecycleModifier('default');
const IsPlayerInPolmav = () => {
  if (!mp.players.local.isInAnyHeli()) return false;
  if (_user.user.isAdminNow()) return true;
  const veh = mp.players.local.vehicle;
  if (!veh) return false;
  const fr = veh.getVariable('fraction');
  if (!fr) return false;
  const frData = _fractions.fractionCfg.getFraction(fr);
  if (!frData) return false;
  return frData.gos;
};
const IsHeliHighEnough = () => {
  const veh = mp.players.local.vehicle;
  if (!veh) return false;
  return veh.getHeightAboveGround() > 1.5;
};
const changeVision = () => {
  if (vision_state == 0) {
    mp.game.graphics.setNightvision(true);
    mp.game.graphics.setSeethrough(false);
    vision_state = 1;
  } else if (vision_state == 1) {
    mp.game.graphics.setNightvision(false);
    mp.game.graphics.setSeethrough(true);
    vision_state = 2;
  } else {
    mp.game.graphics.setSeethrough(false);
    mp.game.graphics.setNightvision(false);
    vision_state = 0;
  }
};
const HideHUDThisFrame = () => {
  mp.game.invoke(_system.system.natives.HIDE_HUD_AND_RADAR_THIS_FRAME);
  mp.game.ui.hideHudComponentThisFrame(19);
  mp.game.ui.hideHudComponentThisFrame(1);
  mp.game.ui.hideHudComponentThisFrame(2);
  mp.game.ui.hideHudComponentThisFrame(3);
  mp.game.ui.hideHudComponentThisFrame(4);
  mp.game.ui.hideHudComponentThisFrame(13);
  mp.game.ui.hideHudComponentThisFrame(11);
  mp.game.ui.hideHudComponentThisFrame(12);
  mp.game.ui.hideHudComponentThisFrame(15);
  mp.game.ui.hideHudComponentThisFrame(18);
};
const CheckInputRotation = zoomvalue => {
  let rightAxisX = mp.game.controls.getDisabledControlNormal(0, 220);
  let rightAxisY = mp.game.controls.getDisabledControlNormal(0, 221);
  let rotation = camera.getRot(2);
  if (rightAxisX != 0.0 && rightAxisY != 0.0) {
    let new_z = rotation.z + rightAxisX * -1.0 * speed_ud * (zoomvalue + 0.1);
    let new_x = Math.max(Math.min(20.0, rotation.x + rightAxisY * -1.0 * speed_lr * (zoomvalue + 0.1)), -89.5);
    camera.setRot(new_x, rotation.y, new_z, 2);
  }
};
const HandleZoom = () => {
  if (mp.game.controls.isControlJustPressed(0, 241)) fov = Math.max(fov - zoomspeed, fov_min);
  if (mp.game.controls.isControlJustPressed(0, 242)) fov = Math.min(fov + zoomspeed, fov_max);
  let current_fov = camera.getFov();
  if (Math.abs(fov - current_fov) < 0.1) fov = current_fov;
  camera.setFov(current_fov + (fov - current_fov) * 0.05);
};
const RotAnglesToVec = rot => {
  let z = _system.system.radian(rot.z);
  let x = _system.system.radian(rot.x);
  let num = Math.abs(Math.cos(x));
  return new mp.Vector3(-Math.sin(z) * num, Math.cos(z) * num, Math.sin(x));
};
},{"./system":"pi2J","./cameraManager":"mcyQ","./gui":"bk91","./user":"ggMw","./fractions":"ZnXR"}],"VwFo":[function(require,module,exports) {
mp.events.add('setLod:vehs', val => {
  mp.storage.data.lodDistVehs = val;
  reload();
});
mp.events.add('setLod:players', val => {
  mp.storage.data.lodDistPlayers = val;
  reload();
});
const tick = target => {
  if (!target.handle) return;
  const vehVal = mp.storage.data.lodDistVehs || 200;
  const plVal = mp.storage.data.lodDistPlayers || 200;
  const isVeh = target.type === 'vehicle';
  const val = isVeh ? vehVal : plVal;
  mp.game.invoke('0x5927F96A78577363', target.handle, val);
};
const reload = () => {
  [...mp.vehicles.toArray(), ...mp.players.toArray()].filter(q => q.handle).map(entity => tick(entity));
};
mp.events.add('entityStreamIn', async target => {
  if (["player", "vehicle"].includes(target.type)) tick(target);
});
},{}],"auEu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HUNTION_SKINNING_SECONDS = exports.HUNTION_ANIMAL_SEE_DIST = exports.HUNTING_SKINNING_WEAPON = exports.HUNTING_RESPAWN_MINUTE = exports.HUNTING_IN_ZONE_SAME_TIME = exports.HUNTING_BLIP = exports.HUNTING_ANIMALS_POSITION_ZONE = exports.HUNTING_ANIMALS_MODELS = void 0;
const HUNTING_ANIMALS_MODELS = exports.HUNTING_ANIMALS_MODELS = [{
  hash: 'a_c_boar',
  item: 830,
  name: 'Кабан'
}, {
  hash: 'a_c_coyote',
  item: 831,
  name: 'Койот'
}, {
  hash: 'a_c_deer',
  item: 832,
  name: 'Олень'
}, {
  hash: 'a_c_hen',
  item: 833,
  name: 'Курица'
}, {
  hash: 'a_c_rabbit_01',
  item: 834,
  name: 'Кролик'
}, {
  hash: 'a_c_pig',
  item: 835,
  name: 'Свинья'
}, {
  hash: 'a_c_mtlion',
  item: 836,
  name: 'Пума'
}, {
  hash: 'a_c_boar',
  item: 830,
  name: 'Кабан'
}, {
  hash: 'a_c_boar',
  item: 830,
  name: 'Кабан'
}, {
  hash: 'a_c_boar',
  item: 830,
  name: 'Кабан'
}];
const HUNTION_ANIMAL_SEE_DIST = exports.HUNTION_ANIMAL_SEE_DIST = 50;
const HUNTION_SKINNING_SECONDS = exports.HUNTION_SKINNING_SECONDS = 15;
const HUNTING_ANIMALS_POSITION_ZONE = exports.HUNTING_ANIMALS_POSITION_ZONE = [[{
  x: -709.47,
  y: 5453.71,
  z: 39.45,
  h: 229
}, {
  x: -644.82,
  y: 5480.13,
  z: 52.18,
  h: 229
}, {
  x: -583.94,
  y: 5479.73,
  z: 57.53,
  h: 229
}, {
  x: -509.87,
  y: 5538.33,
  z: 71.39,
  h: 229
}, {
  x: -447.26,
  y: 5414.25,
  z: 78.51,
  h: 229
}, {
  x: -480.18,
  y: 5471.96,
  z: 85.07,
  h: 74
}, {
  x: -594.78,
  y: 5395.13,
  z: 54.92,
  h: 108
}, {
  x: -655.94,
  y: 5408.16,
  z: 46.24,
  h: 49
}, {
  x: -703.51,
  y: 5351.83,
  z: 66.66,
  h: 97
}, {
  x: -736.09,
  y: 5305.04,
  z: 73.69,
  h: 116
}, {
  x: -743.82,
  y: 5349.48,
  z: 61.71,
  h: 116
}, {
  x: -663.54,
  y: 5426.69,
  z: 44.08,
  h: 270
}, {
  x: -627.90,
  y: 5463.06,
  z: 53.93,
  h: 359
}, {
  x: -607.66,
  y: 5281.78,
  z: 62.61,
  h: 235
}, {
  x: -636.51,
  y: 5240.52,
  z: 74.62,
  h: 234
}, {
  x: -633.60,
  y: 5180.65,
  z: 98.32,
  h: 165
}, {
  x: -634.87,
  y: 5156.41,
  z: 109.91,
  h: 161
}, {
  x: -655.08,
  y: 5177.99,
  z: 104.48,
  h: 161
}, {
  x: -695.03,
  y: 5191.68,
  z: 103.91,
  h: 73
}, {
  x: -746.75,
  y: 5188.90,
  z: 109.34,
  h: 73
}, {
  x: -830.32,
  y: 5211.43,
  z: 96.34,
  h: 27
}, {
  x: -901.11,
  y: 5260.48,
  z: 85.09,
  h: 175
}, {
  x: -936.49,
  y: 5323.87,
  z: 67.68,
  h: 213
}, {
  x: -830.24,
  y: 5260.02,
  z: 82.27,
  h: 17
}, {
  x: -610.26,
  y: 5549.35,
  z: 45.32,
  h: 258
}, {
  x: -492.70,
  y: 5493.72,
  z: 80.56,
  h: 207
}, {
  x: -491.51,
  y: 5357.20,
  z: 77.66,
  h: 220
}, {
  x: -686.82,
  y: 5270.81,
  z: 75.34,
  h: 220
}, {
  x: -702.68,
  y: 5239.73,
  z: 80.31,
  h: 322
}, {
  x: -688.45,
  y: 5326.52,
  z: 69.06,
  h: 307
}, {
  x: -718.46,
  y: 5325.21,
  z: 71.54,
  h: 115
}, {
  x: -692.50,
  y: 4871.14,
  z: 191.26,
  h: 353
}, {
  x: -599.68,
  y: 4886.35,
  z: 186.61,
  h: 353
}, {
  x: -654.94,
  y: 4912.93,
  z: 185.66,
  h: 353
}, {
  x: -666.11,
  y: 4908.51,
  z: 186.59,
  h: 353
}, {
  x: -528.50,
  y: 4818.17,
  z: 189.84,
  h: 353
}, {
  x: -569.71,
  y: 4795.58,
  z: 199.48,
  h: 306
}, {
  x: -450.84,
  y: 4914.21,
  z: 172.73,
  h: 306
}, {
  x: -374.04,
  y: 5121.71,
  z: 129.54,
  h: 306
}, {
  x: -413.12,
  y: 5159.86,
  z: 109.33,
  h: 306
}, {
  x: -497.53,
  y: 5139.87,
  z: 100.83,
  h: 306
}, {
  x: -453.99,
  y: 5293.21,
  z: 84.48,
  h: 306
}, {
  x: -532.12,
  y: 5186.01,
  z: 89.24,
  h: 306
}, {
  x: -581.46,
  y: 5077.59,
  z: 131.63,
  h: 306
}, {
  x: -681.18,
  y: 4982.59,
  z: 176.62,
  h: 306
}, {
  x: -745.91,
  y: 5049.11,
  z: 144.17,
  h: 306
}, {
  x: -772.91,
  y: 5067.94,
  z: 147.75,
  h: 306
}], [{
  x: -339.60,
  y: 3830.71,
  z: 65.39,
  h: 344
}, {
  x: -406.01,
  y: 3826.89,
  z: 60.03,
  h: 215
}, {
  x: -317.84,
  y: 3944.30,
  z: 59.37,
  h: 64
}, {
  x: -367.22,
  y: 3942.15,
  z: 67.61,
  h: 155
}, {
  x: -387.84,
  y: 3912.51,
  z: 79.05,
  h: 96
}, {
  x: -437.59,
  y: 3968.68,
  z: 70.30,
  h: 24
}, {
  x: -452.40,
  y: 3998.43,
  z: 77.93,
  h: 19
}, {
  x: -485.07,
  y: 3962.48,
  z: 80.41,
  h: 139
}, {
  x: -524.81,
  y: 4049.77,
  z: 134.36,
  h: 258
}, {
  x: -454.14,
  y: 4059.41,
  z: 113.91,
  h: 259
}, {
  x: -342.21,
  y: 3995.52,
  z: 50.88,
  h: 253
}, {
  x: -286.93,
  y: 3923.24,
  z: 52.93,
  h: 182
}, {
  x: -317.02,
  y: 3847.19,
  z: 63.04,
  h: 230
}, {
  x: -281.42,
  y: 3813.77,
  z: 63.70,
  h: 221
}, {
  x: -351.49,
  y: 3771.14,
  z: 71.15,
  h: 20
}, {
  x: -306.14,
  y: 3722.73,
  z: 68.61,
  h: 236
}, {
  x: -223.31,
  y: 3733.17,
  z: 50.86,
  h: 341
}, {
  x: -249.87,
  y: 3834.52,
  z: 40.41,
  h: 354
}, {
  x: -422.71,
  y: 4003.76,
  z: 81.16,
  h: 39
}, {
  x: -426.11,
  y: 4031.95,
  z: 82.55,
  h: 85
}, {
  x: -436.05,
  y: 4018.23,
  z: 82.06,
  h: 225
}, {
  x: -348.75,
  y: 4020.59,
  z: 50.43,
  h: 265
}, {
  x: -179.02,
  y: 3986.25,
  z: 31.46,
  h: 219
}, {
  x: -158.19,
  y: 3764.35,
  z: 38.34,
  h: 177
}, {
  x: -210.64,
  y: 3718.14,
  z: 50.06,
  h: 7
}, {
  x: -216.00,
  y: 3739.12,
  z: 49.95,
  h: 264
}, {
  x: -253.04,
  y: 4068.81,
  z: 36.40,
  h: 25
}, {
  x: -548.63,
  y: 3976.55,
  z: 105.45,
  h: 168
}, {
  x: -592.62,
  y: 3999.86,
  z: 124.37,
  h: 64
}, {
  x: -602.77,
  y: 3983.96,
  z: 118.99,
  h: 237
}, {
  x: -469.71,
  y: 3831.20,
  z: 76.61,
  h: 239
}], [{
  x: -847.06,
  y: 2986.14,
  z: 37.01,
  h: 197
}, {
  x: -823.06,
  y: 2934.94,
  z: 35.88,
  h: 198
}, {
  x: -785.41,
  y: 2919.30,
  z: 25.73,
  h: 223
}, {
  x: -745.99,
  y: 2915.12,
  z: 21.90,
  h: 247
}, {
  x: -721.17,
  y: 2907.61,
  z: 18.20,
  h: 236
}, {
  x: -645.43,
  y: 2920.02,
  z: 14.28,
  h: 300
}, {
  x: -581.93,
  y: 2914.89,
  z: 15.33,
  h: 224
}, {
  x: -506.04,
  y: 2940.31,
  z: 20.34,
  h: 224
}, {
  x: -454.54,
  y: 2942.06,
  z: 16.10,
  h: 224
}, {
  x: -450.65,
  y: 3006.96,
  z: 28.52,
  h: 224
}, {
  x: -406.57,
  y: 3004.19,
  z: 16.30,
  h: 348
}, {
  x: -320.32,
  y: 3007.88,
  z: 21.76,
  h: 347
}, {
  x: -303.98,
  y: 3037.97,
  z: 22.40,
  h: 347
}, {
  x: -243.48,
  y: 3035.36,
  z: 24.21,
  h: 234
}, {
  x: -181.50,
  y: 3082.61,
  z: 21.24,
  h: 130
}, {
  x: -200.08,
  y: 2927.08,
  z: 24.45,
  h: 56
}, {
  x: -255.57,
  y: 2920.41,
  z: 40.68,
  h: 82
}, {
  x: -533.23,
  y: 2826.15,
  z: 23.65,
  h: 4
}, {
  x: -667.47,
  y: 2765.20,
  z: 39.89,
  h: 6
}, {
  x: -877.20,
  y: 2711.46,
  z: 21.04,
  h: 40
}, {
  x: -971.02,
  y: 2799.46,
  z: 12.92,
  h: 62
}, {
  x: -998.19,
  y: 2852.06,
  z: 8.80,
  h: 83
}, {
  x: -1108.78,
  y: 2777.05,
  z: 5.42,
  h: 128
}, {
  x: -1158.57,
  y: 2795.48,
  z: 4.77,
  h: 245
}, {
  x: -1036.52,
  y: 2960.89,
  z: 12.79,
  h: 218
}, {
  x: -1020.35,
  y: 2902.95,
  z: 6.17,
  h: 191
}, {
  x: -982.02,
  y: 2927.01,
  z: 23.86,
  h: 62
}, {
  x: -919.29,
  y: 2962.77,
  z: 63.12,
  h: 207
}, {
  x: -887.54,
  y: 3070.47,
  z: 77.81,
  h: 305
}, {
  x: -832.11,
  y: 3090.15,
  z: 77.02,
  h: 59
}, {
  x: -854.53,
  y: 3130.81,
  z: 86.57,
  h: 237
}, {
  x: -755.43,
  y: 3193.42,
  z: 121.60,
  h: 277
}, {
  x: -668.85,
  y: 3246.66,
  z: 76.96,
  h: 197
}, {
  x: -604.94,
  y: 3142.57,
  z: 54.35,
  h: 197
}, {
  x: -589.95,
  y: 3092.49,
  z: 44.08,
  h: 197
}, {
  x: -481.76,
  y: 3107.82,
  z: 34.03,
  h: 199
}, {
  x: -432.45,
  y: 3121.09,
  z: 38.81,
  h: 193
}, {
  x: -398.64,
  y: 3138.08,
  z: 47.04,
  h: 98
}, {
  x: -753.78,
  y: 2994.64,
  z: 39.57,
  h: 167
}, {
  x: -610.10,
  y: 2760.82,
  z: 30.60,
  h: 216
}, {
  x: -764.41,
  y: 2577.59,
  z: 61.60,
  h: 182
}, {
  x: -691.50,
  y: 2567.87,
  z: 49.40,
  h: 203
}, {
  x: -466.76,
  y: 2723.11,
  z: 46.18,
  h: 289
}, {
  x: -384.53,
  y: 2801.63,
  z: 46.13,
  h: 313
}, {
  x: -359.11,
  y: 3141.16,
  z: 56.78,
  h: 229
}, {
  x: 9.55,
  y: 2966.82,
  z: 53.45,
  h: 37
}, {
  x: -303.16,
  y: 3325.23,
  z: 120.50,
  h: 290
}, {
  x: -611.52,
  y: 3252.32,
  z: 80.32,
  h: 184
}, {
  x: -773.34,
  y: 3098.66,
  z: 82.90,
  h: 167
}, {
  x: -1071.28,
  y: 3166.43,
  z: 67.05,
  h: 223
}, {
  x: -1145.00,
  y: 3056.07,
  z: 75.33,
  h: 204
}, {
  x: -1115.14,
  y: 3353.70,
  z: 158.74,
  h: 177
}, {
  x: -1042.44,
  y: 3429.95,
  z: 182.29,
  h: 172
}, {
  x: -952.27,
  y: 3351.84,
  z: 217.86,
  h: 161
}, {
  x: -823.92,
  y: 3316.87,
  z: 151.97,
  h: 193
}, {
  x: -741.13,
  y: 3269.43,
  z: 114.11,
  h: 200
}, {
  x: -627.46,
  y: 3339.78,
  z: 107.32,
  h: 199
}, {
  x: -489.97,
  y: 3296.34,
  z: 120.15,
  h: 244
}], [{
  x: -2533.98,
  y: 2836.66,
  z: 3.05,
  h: 241
}, {
  x: -2486.80,
  y: 2748.98,
  z: 2.85,
  h: 241
}, {
  x: -2447.02,
  y: 2644.81,
  z: 3.29,
  h: 234
}, {
  x: -2503.36,
  y: 2645.36,
  z: 2.85,
  h: 232
}, {
  x: -2554.91,
  y: 2660.47,
  z: 2.93,
  h: 110
}, {
  x: -2563.57,
  y: 2525.52,
  z: 2.95,
  h: 174
}, {
  x: -2558.87,
  y: 2494.97,
  z: 2.97,
  h: 204
}, {
  x: -2587.44,
  y: 2457.66,
  z: 2.92,
  h: 155
}, {
  x: -2645.83,
  y: 2434.94,
  z: 5.34,
  h: 237
}, {
  x: -2606.43,
  y: 2403.98,
  z: 5.01,
  h: 321
}, {
  x: -2464.53,
  y: 2481.91,
  z: 2.95,
  h: 283
}, {
  x: -2403.36,
  y: 2532.77,
  z: 3.30,
  h: 288
}, {
  x: -2365.89,
  y: 2476.26,
  z: 2.97,
  h: 211
}, {
  x: -2342.28,
  y: 2425.87,
  z: 4.73,
  h: 214
}, {
  x: -2307.68,
  y: 2458.07,
  z: 3.75,
  h: 305
}, {
  x: -2293.87,
  y: 2520.99,
  z: 3.01,
  h: 5
}, {
  x: -2376.23,
  y: 2677.21,
  z: 3.50,
  h: 3
}, {
  x: -2334.53,
  y: 2722.57,
  z: 3.08,
  h: 321
}, {
  x: -2283.51,
  y: 2750.73,
  z: 2.90,
  h: 273
}, {
  x: -2229.49,
  y: 2748.94,
  z: 2.19,
  h: 181
}, {
  x: -2237.17,
  y: 2715.86,
  z: 2.79,
  h: 175
}, {
  x: -2207.01,
  y: 2679.62,
  z: 2.90,
  h: 191
}, {
  x: -2208.72,
  y: 2479.09,
  z: 7.74,
  h: 273
}, {
  x: -2122.74,
  y: 2536.45,
  z: 3.01,
  h: 308
}, {
  x: -2069.96,
  y: 2521.67,
  z: 3.36,
  h: 258
}, {
  x: -2018.40,
  y: 2495.89,
  z: 3.47,
  h: 245
}, {
  x: -1984.44,
  y: 2578.06,
  z: 2.84,
  h: 310
}, {
  x: -1901.03,
  y: 2625.57,
  z: 2.86,
  h: 274
}, {
  x: -1803.08,
  y: 2540.84,
  z: 3.27,
  h: 258
}, {
  x: -1755.23,
  y: 2586.64,
  z: 2.72,
  h: 303
}, {
  x: -1704.61,
  y: 2628.56,
  z: 2.26,
  h: 298
}, {
  x: -1661.82,
  y: 2649.52,
  z: 3.30,
  h: 286
}, {
  x: -1654.62,
  y: 2697.05,
  z: 3.71,
  h: 150
}, {
  x: -1575.19,
  y: 2603.01,
  z: 3.20,
  h: 146
}, {
  x: -1624.59,
  y: 2580.86,
  z: 2.69,
  h: 85
}, {
  x: -1670.80,
  y: 2568.37,
  z: 3.90,
  h: 319
}, {
  x: -1557.84,
  y: 2690.06,
  z: 3.65,
  h: 299
}, {
  x: -1506.35,
  y: 2656.77,
  z: 2.74,
  h: 261
}, {
  x: -1442.16,
  y: 2661.15,
  z: 3.01,
  h: 244
}, {
  x: -1430.99,
  y: 2579.59,
  z: 3.06,
  h: 80
}, {
  x: -1555.98,
  y: 2608.14,
  z: 3.74,
  h: 75
}, {
  x: -1571.34,
  y: 2556.24,
  z: 4.94,
  h: 2
}, {
  x: -1741.14,
  y: 2545.86,
  z: 2.45,
  h: 79
}, {
  x: -1948.71,
  y: 2501.85,
  z: 3.03,
  h: 108
}, {
  x: -1994.82,
  y: 2523.05,
  z: 2.84,
  h: 15
}, {
  x: -2002.02,
  y: 2631.89,
  z: 2.93,
  h: 82
}, {
  x: -2511.42,
  y: 2437.37,
  z: 3.18,
  h: 15
}], [{
  x: -1434.74,
  y: 4722.21,
  z: 43.06,
  h: 155
}, {
  x: -1436.14,
  y: 4656.92,
  z: 56.97,
  h: 187
}, {
  x: -1437.16,
  y: 4580.47,
  z: 48.01,
  h: 176
}, {
  x: -1501.50,
  y: 4537.65,
  z: 45.38,
  h: 110
}, {
  x: -1583.60,
  y: 4520.55,
  z: 18.28,
  h: 98
}, {
  x: -1591.10,
  y: 4485.33,
  z: 17.69,
  h: 137
}, {
  x: -1541.73,
  y: 4442.59,
  z: 11.59,
  h: 137
}, {
  x: -1523.00,
  y: 4455.26,
  z: 11.66,
  h: 239
}, {
  x: -1473.53,
  y: 4462.51,
  z: 15.13,
  h: 241
}, {
  x: -1415.40,
  y: 4410.98,
  z: 45.13,
  h: 198
}, {
  x: -1554.08,
  y: 4385.35,
  z: 4.94,
  h: 99
}, {
  x: -1628.21,
  y: 4423.68,
  z: 2.18,
  h: 278
}, {
  x: -1762.81,
  y: 4432.23,
  z: 27.24,
  h: 345
}, {
  x: -1685.12,
  y: 4348.36,
  z: 58.22,
  h: 247
}, {
  x: -1634.20,
  y: 4563.23,
  z: 43.18,
  h: 252
}, {
  x: -1628.99,
  y: 4594.65,
  z: 42.04,
  h: 291
}, {
  x: -1596.89,
  y: 4649.06,
  z: 48.47,
  h: 316
}, {
  x: -1572.91,
  y: 4685.06,
  z: 47.19,
  h: 296
}, {
  x: -1505.12,
  y: 4724.71,
  z: 44.42,
  h: 224
}, {
  x: -1500.14,
  y: 4688.76,
  z: 36.78,
  h: 188
}, {
  x: -1508.88,
  y: 4795.18,
  z: 64.33,
  h: 180
}, {
  x: -1389.15,
  y: 4861.27,
  z: 132.28,
  h: 99
}, {
  x: -1446.26,
  y: 4893.41,
  z: 106.48,
  h: 266
}, {
  x: -1332.89,
  y: 4851.25,
  z: 143.66,
  h: 127
}, {
  x: -1202.07,
  y: 4769.85,
  z: 218.52,
  h: 117
}, {
  x: -1221.04,
  y: 4676.15,
  z: 107.84,
  h: 86
}, {
  x: -1261.26,
  y: 4661.70,
  z: 92.84,
  h: 243
}, {
  x: -1308.88,
  y: 4416.39,
  z: 27.34,
  h: 316
}, {
  x: -1226.60,
  y: 4442.42,
  z: 28.77,
  h: 301
}, {
  x: -1202.50,
  y: 4445.65,
  z: 31.40,
  h: 218
}, {
  x: -1167.12,
  y: 4406.32,
  z: 8.27,
  h: 198
}, {
  x: -1094.53,
  y: 4478.08,
  z: 79.23,
  h: 176
}, {
  x: -1416.05,
  y: 4538.10,
  z: 59.28,
  h: 151
}, {
  x: -1488.57,
  y: 4514.20,
  z: 48.92,
  h: 81
}, {
  x: -1686.55,
  y: 4594.71,
  z: 48.66,
  h: 232
}, {
  x: -1686.89,
  y: 4683.04,
  z: 24.91,
  h: 151
}, {
  x: -1593.65,
  y: 4700.28,
  z: 42.95,
  h: 110
}, {
  x: -1478.20,
  y: 4598.85,
  z: 46.05,
  h: 133
}, {
  x: -1405.83,
  y: 4473.25,
  z: 21.61,
  h: 222
}, {
  x: -1291.52,
  y: 4502.19,
  z: 15.64,
  h: 219
}, {
  x: -1060.88,
  y: 4590.76,
  z: 113.48,
  h: 176
}, {
  x: -1156.29,
  y: 4623.70,
  z: 145.91,
  h: 180
}, {
  x: -983.21,
  y: 4547.61,
  z: 129.30,
  h: 315
}, {
  x: -1201.99,
  y: 4371.20,
  z: 7.16,
  h: 17
}, {
  x: -1364.38,
  y: 4292.46,
  z: 2.72,
  h: 17
}, {
  x: -1498.89,
  y: 4396.22,
  z: 21.09,
  h: 126
}, {
  x: -1668.28,
  y: 4524.52,
  z: 34.78,
  h: 226
}, {
  x: -1732.15,
  y: 4523.82,
  z: 1.68,
  h: 123
}, {
  x: -1626.10,
  y: 4471.90,
  z: 1.23,
  h: 165
}, {
  x: -1568.29,
  y: 4402.40,
  z: 1.19,
  h: 121
}, {
  x: -1791.52,
  y: 4351.55,
  z: 57.23,
  h: 24
}, {
  x: -1694.77,
  y: 4250.45,
  z: 75.50,
  h: 353
}, {
  x: -1530.56,
  y: 4537.18,
  z: 47.79,
  h: 360
}]];
const HUNTING_SKINNING_WEAPON = exports.HUNTING_SKINNING_WEAPON = 890;
const HUNTING_BLIP = exports.HUNTING_BLIP = {
  id: 141,
  color: 44
};
const HUNTING_IN_ZONE_SAME_TIME = exports.HUNTING_IN_ZONE_SAME_TIME = 20;
const HUNTING_RESPAWN_MINUTE = exports.HUNTING_RESPAWN_MINUTE = 5;
},{}],"wMFx":[function(require,module,exports) {
"use strict";

var _hunting = require("../../shared/hunting");
var _system = require("./system");
var _peds = require("./peds");
var _user = require("./user");
var _custom = require("./custom.event");
var _hooks = require("../../shared/hooks");
var _interact = require("./interact");
const player = mp.players.local;
const getMiddlePosZone = zoneid => {
  const zone = _hunting.HUNTING_ANIMALS_POSITION_ZONE[zoneid];
  if (!zone) return null;
  return _system.system.middlePoint2d(...zone);
};
_hunting.HUNTING_ANIMALS_POSITION_ZONE.map((item, id) => {
  _system.system.createBlip(_hunting.HUNTING_BLIP.id, _hunting.HUNTING_BLIP.color, getMiddlePosZone(id), `Охота`, 0);
});
mp.events.add('entityControllerChange', (ped, controller) => {
  verify(ped);
});
mp.events.add('entityStreamIn', (ped, controller) => {
  verify(ped);
});
(0, _hooks.registerHookHandler)(_interact.RAYCAST_DETECT_ENTITY_HOOK, raycastEntity => {
  const isModelForHunting = () => {
    return _hunting.HUNTING_ANIMALS_MODELS.some(q => mp.game.joaat(q.hash) === raycastEntity.getModel());
  };
  if (raycastEntity.type !== _interact.ENTITY_TYPES.PED || !raycastEntity.isDead() || !isModelForHunting()) {
    return null;
  }
  const animalName = _hunting.HUNTING_ANIMALS_MODELS.find(q => mp.game.joaat(q.hash) === raycastEntity.getModel()).name;
  return {
    helpText: `${animalName}`,
    onInteract: entity => {
      _custom.CustomEvent.triggerServer('interaction:huntingPed', entity.remoteId);
    }
  };
});
setInterval(() => {
  mp.peds.forEachInStreamRange(ped => {
    const zoneId = ped.getVariable('hunting');
    const huntingCfgI = ped.getVariable('huntingCfg');
    if (typeof zoneId !== 'number') return;
    if (typeof huntingCfgI !== 'number') return;
    const huntingCfg = _hunting.HUNTING_ANIMALS_MODELS[huntingCfgI];
    if (!huntingCfg) return;
    if (!(0, _peds.isPedMy)(ped)) return;
    let nearest = _user.user.getNearestPlayersInCoord(ped.position, ped.dimension, _hunting.HUNTION_ANIMAL_SEE_DIST);
    nearest.map(target => mp.game.invoke('0xF166E48407BAC484', ped.handle, target.handle, 0, 16));
  });
}, 2000);
const verify = ped => {
  if (ped.type !== 'ped') return;
  if (!ped.handle) return;
  const zoneId = ped.getVariable('hunting');
  if (typeof zoneId !== 'number') return;
  if (!(0, _peds.isPedMy)(ped)) return;
  mp.game.invoke('0xBB9CE077274F6A1B', ped.handle, true, true);
};
},{"../../shared/hunting":"auEu","./system":"pi2J","./peds":"ds7w","./user":"ggMw","./custom.event":"py8h","../../shared/hooks":"H3J5","./interact":"m19G"}],"QZWk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QUEST_1_POTIONS_GOAL = exports.QUEST_1_POTATO_GOAL = exports.QUEST_1_OBJECT_TO_FIND_NAME = exports.QUEST_1_OBJECT_TO_FIND_MODEL = exports.QUEST_1_OBJECT_POSITIONS = exports.QUEST_1_OBJECT_GOAL = exports.QUEST_1_MILK_GOAL = exports.QUEST_1_CHIPS_GOAL = exports.QUEST_1_BOAR_MEAL_GOAL = exports.QUEST_1_BLUEBERRY_GOAL = exports.POTATO_ITEM_ID = exports.MILK_ITEM_ID = exports.HALLOWEEN_ZOMBIE_KILLED_EVENT = exports.HALLOWEEN_ZOMBIES_MODELS = exports.HALLOWEEN_ZOMBIES_EVENT_GROUP_LENGTH = exports.HALLOWEEN_ZOMBIES_DAMAGE = exports.HALLOWEEN_SWEET_NPC_PARAMETERS = exports.HALLOWEEN_SWEET_NPC_NAME = exports.HALLOWEEN_SWEET_NPC_ID = exports.HALLOWEEN_START_QUEST_NAME = exports.HALLOWEEN_START_QUEST_ID = exports.HALLOWEEN_START_GHOSTS_DESTROY_EVENT = exports.HALLOWEEN_PORTAL_POSITION = exports.HALLOWEEN_PORTAL_MODEL = exports.HALLOWEEN_PORTAL_HEADING = exports.HALLOWEEN_PORTALS_ZOMBIES_GOAL = exports.HALLOWEEN_PORTALS_QUEST_NAME = exports.HALLOWEEN_PORTALS_QUEST_ID = exports.HALLOWEEN_PORTALS_QUEST_BAG_REWARD_ITEM_ID = exports.HALLOWEEN_PORTALS_ARMORS_GOAL = exports.HALLOWEEN_PLAYER_TO_ZOMBIES_DAMAGE = exports.HALLOWEEN_ISLAND_ZOMBIES_POSITIONS = exports.HALLOWEEN_ISLAND_PORTAL_POSITION = exports.HALLOWEEN_ISLAND_DIMENSION_BASE = exports.HALLOWEEN_HOUSE_POS = exports.HALLOWEEN_GHOSTS_QUEST_NPC_PARAMETERS = exports.HALLOWEEN_GHOSTS_QUEST_NPC_NAME = exports.HALLOWEEN_GHOSTS_QUEST_NPC_ID = exports.HALLOWEEN_GHOSTS_QUEST_NAME = exports.HALLOWEEN_GHOSTS_QUEST_ID = exports.HALLOWEEN_GHOSTS_COUNT = exports.HALLOWEEN_GHOSTS_COLLECT_MODULE_POSITION = exports.HALLOWEEN_GHOSTS_COLLECT_MODULE_ANIMATION = exports.HALLOWEEN_GHOSTBUSTER_NPC_PARAMETERS = exports.HALLOWEEN_GHOSTBUSTER_NPC_NAME = exports.HALLOWEEN_GHOSTBUSTER_NPC_ID = exports.HALLOWEEN_GHOSTBUSTERS_CAR_MODEL = exports.HALLOWEEN_GHOSTBUSTERS_CARS = exports.HALLOWEEN_EXIT_PORTAL_EVENT = exports.HALLOWEEN_EXCHANGE_STARTS_DATE = exports.HALLOWEEN_EXCHANGE_NPC_PARAMETERS = exports.HALLOWEEN_EXCHANGE_NPC_NAME = exports.HALLOWEEN_EXCHANGE_NPC_ID = exports.HALLOWEEN_ENTER_PORTAL_EVENT = exports.HALLOWEEN_END_GHOSTS_DESTROY_EVENT = exports.HALLOWEEN_DESTROY_GHOST_EVENT = exports.GHOST_MODEL = exports.GHOST_HEALTH = exports.GHOST_DAMAGE_PER_SECOND = exports.GHOST_APPEARS_POSITIONS = exports.GHOSTBUSTERS_BACKPACK_MODEL = exports.CHIPS_ITEM_ID = exports.BOAR_MEAL_ITEM_ID = exports.BLUEBERRY_ITEM_ID = void 0;
const HALLOWEEN_EXCHANGE_NPC_ID = exports.HALLOWEEN_EXCHANGE_NPC_ID = 'halloween-exchange-npc';
const HALLOWEEN_EXCHANGE_NPC_NAME = exports.HALLOWEEN_EXCHANGE_NPC_NAME = 'Обменщик';
const HALLOWEEN_EXCHANGE_NPC_PARAMETERS = exports.HALLOWEEN_EXCHANGE_NPC_PARAMETERS = {
  Position: new mp.Vector3(1676.36, 3688.48, 34.32),
  Heading: 93,
  Model: 'u_m_o_filmnoir',
  Name: HALLOWEEN_EXCHANGE_NPC_NAME
};
const HALLOWEEN_EXCHANGE_STARTS_DATE = exports.HALLOWEEN_EXCHANGE_STARTS_DATE = new Date(2021, 11, 8, 4, 30);
const HALLOWEEN_SWEET_NPC_ID = exports.HALLOWEEN_SWEET_NPC_ID = 'halloween-sweet-npc';
const HALLOWEEN_SWEET_NPC_NAME = exports.HALLOWEEN_SWEET_NPC_NAME = 'Конфетчик';
const HALLOWEEN_SWEET_NPC_PARAMETERS = exports.HALLOWEEN_SWEET_NPC_PARAMETERS = {
  Position: new mp.Vector3(1661.29, 3687.51, 34.23),
  Heading: 210,
  Name: HALLOWEEN_SWEET_NPC_NAME,
  Model: 's_m_m_strperf_01'
};
const HALLOWEEN_GHOSTBUSTER_NPC_ID = exports.HALLOWEEN_GHOSTBUSTER_NPC_ID = 'halloween-ghostbuster';
const HALLOWEEN_GHOSTBUSTER_NPC_NAME = exports.HALLOWEEN_GHOSTBUSTER_NPC_NAME = 'Рэй Стэнц';
const HALLOWEEN_GHOSTBUSTER_NPC_PARAMETERS = exports.HALLOWEEN_GHOSTBUSTER_NPC_PARAMETERS = {
  Position: new mp.Vector3(1669.18, 3691.57, 34.25),
  Heading: 183,
  Model: 's_m_y_clown_01',
  Name: HALLOWEEN_GHOSTBUSTER_NPC_NAME
};
const HALLOWEEN_GHOSTS_QUEST_NPC_ID = exports.HALLOWEEN_GHOSTS_QUEST_NPC_ID = 'halloween-ghosts-quest-1';
const HALLOWEEN_GHOSTS_QUEST_NPC_NAME = exports.HALLOWEEN_GHOSTS_QUEST_NPC_NAME = 'Старый дед';
const HALLOWEEN_GHOSTS_QUEST_NPC_PARAMETERS = exports.HALLOWEEN_GHOSTS_QUEST_NPC_PARAMETERS = {
  Position: new mp.Vector3(2528.81, 2586.80, 37.94),
  Heading: 0,
  Model: 'ig_cletus',
  Name: HALLOWEEN_GHOSTS_QUEST_NPC_NAME
};
const HALLOWEEN_START_QUEST_ID = exports.HALLOWEEN_START_QUEST_ID = 'halloween-first-quest';
const HALLOWEEN_START_QUEST_NAME = exports.HALLOWEEN_START_QUEST_NAME = 'Операция Ы';
const BOAR_MEAL_ITEM_ID = exports.BOAR_MEAL_ITEM_ID = 830;
const QUEST_1_BOAR_MEAL_GOAL = exports.QUEST_1_BOAR_MEAL_GOAL = 2;
const CHIPS_ITEM_ID = exports.CHIPS_ITEM_ID = 21;
const QUEST_1_CHIPS_GOAL = exports.QUEST_1_CHIPS_GOAL = 1;
const MILK_ITEM_ID = exports.MILK_ITEM_ID = 9000;
const QUEST_1_MILK_GOAL = exports.QUEST_1_MILK_GOAL = 10;
const POTATO_ITEM_ID = exports.POTATO_ITEM_ID = 7020;
const QUEST_1_POTATO_GOAL = exports.QUEST_1_POTATO_GOAL = 50;
const BLUEBERRY_ITEM_ID = exports.BLUEBERRY_ITEM_ID = 7030;
const QUEST_1_BLUEBERRY_GOAL = exports.QUEST_1_BLUEBERRY_GOAL = 15;
const QUEST_1_OBJECT_TO_FIND_NAME = exports.QUEST_1_OBJECT_TO_FIND_NAME = 'странный предмет';
const QUEST_1_OBJECT_TO_FIND_MODEL = exports.QUEST_1_OBJECT_TO_FIND_MODEL = 'vw_prop_casino_art_skull_01a';
const QUEST_1_OBJECT_GOAL = exports.QUEST_1_OBJECT_GOAL = 3;
const QUEST_1_OBJECT_POSITIONS = exports.QUEST_1_OBJECT_POSITIONS = [[new mp.Vector3(2433.79, 4972.22, 41.29), 136], [new mp.Vector3(2428.87, 4966.58, 45.55), 303], [new mp.Vector3(2435.20, 4973.67, 45.62), 223], [new mp.Vector3(2456.54, 4983.07, 46.81), 134], [new mp.Vector3(2457.15, 4973.77, 45.92), 64], [new mp.Vector3(2451.55, 4977.93, 46.29), 135], [new mp.Vector3(2445.53, 4989.16, 46.80), 148], [new mp.Vector3(2449.25, 4974.21, 51.46), 4], [new mp.Vector3(2439.42, 4968.47, 51.21), 319], [new mp.Vector3(2444.61, 4976.09, 51.48), 57], [new mp.Vector3(2449.47, 4988.66, 50.57), 184], [new mp.Vector3(2454.01, 4969.61, 50.57), 354], [new mp.Vector3(2453.11, 4979.42, 51.32), 227], [new mp.Vector3(2451.28, 4974.31, 51.48), 227]];
const QUEST_1_POTIONS_GOAL = exports.QUEST_1_POTIONS_GOAL = 1;
const HALLOWEEN_HOUSE_POS = exports.HALLOWEEN_HOUSE_POS = new mp.Vector3(2435.76, 4975.81, 46.57);
const HALLOWEEN_GHOSTS_QUEST_ID = exports.HALLOWEEN_GHOSTS_QUEST_ID = 'halloween-ghosts';
const HALLOWEEN_GHOSTS_QUEST_NAME = exports.HALLOWEEN_GHOSTS_QUEST_NAME = 'Операция НЕ ССЫ';
const HALLOWEEN_GHOSTS_COLLECT_MODULE_POSITION = exports.HALLOWEEN_GHOSTS_COLLECT_MODULE_POSITION = new mp.Vector3(2330.15, 2572.39, 45.48);
const HALLOWEEN_GHOSTS_COLLECT_MODULE_ANIMATION = exports.HALLOWEEN_GHOSTS_COLLECT_MODULE_ANIMATION = {
  dictionary: 'anim@heists@money_grab@duffel',
  name: 'loop',
  durationSec: 5
};
const HALLOWEEN_DESTROY_GHOST_EVENT = exports.HALLOWEEN_DESTROY_GHOST_EVENT = 'halloween:ghostDestroyed';
const HALLOWEEN_START_GHOSTS_DESTROY_EVENT = exports.HALLOWEEN_START_GHOSTS_DESTROY_EVENT = 'halloween:quest:startGhostsDestroy';
const HALLOWEEN_END_GHOSTS_DESTROY_EVENT = exports.HALLOWEEN_END_GHOSTS_DESTROY_EVENT = 'halloween:quest:endGhostsDestroy';
const HALLOWEEN_GHOSTS_COUNT = exports.HALLOWEEN_GHOSTS_COUNT = 5;
const HALLOWEEN_GHOSTBUSTERS_CAR_MODEL = exports.HALLOWEEN_GHOSTBUSTERS_CAR_MODEL = 'ecto1';
const HALLOWEEN_GHOSTBUSTERS_CARS = exports.HALLOWEEN_GHOSTBUSTERS_CARS = [[new mp.Vector3(1702.13, 3626.23, 35.12), 24], [new mp.Vector3(1708.73, 3630.14, 35.02), 28], [new mp.Vector3(1716.55, 3634.11, 35.00), 31], [new mp.Vector3(1727.27, 3640.48, 34.85), 27], [new mp.Vector3(1732.27, 3643.66, 34.92), 27], [new mp.Vector3(1685.11, 3620.37, 35.34), 24], [new mp.Vector3(1678.55, 3616.52, 35.40), 26], [new mp.Vector3(1671.83, 3613.18, 35.38), 27], [new mp.Vector3(1666.81, 3610.37, 35.38), 29], [new mp.Vector3(1609.94, 3691.19, 34.44), 222], [new mp.Vector3(1617.78, 3695.48, 34.37), 208], [new mp.Vector3(1623.21, 3698.47, 34.29), 208], [new mp.Vector3(1628.55, 3701.49, 34.20), 202], [new mp.Vector3(1633.83, 3704.07, 34.12), 208], [new mp.Vector3(1640.56, 3707.79, 34.07), 204], [new mp.Vector3(1645.91, 3710.69, 34.03), 205]];
const GHOSTBUSTERS_BACKPACK_MODEL = exports.GHOSTBUSTERS_BACKPACK_MODEL = 'ghostbusters_bag';
const GHOST_MODEL = exports.GHOST_MODEL = 'on_slime';
const GHOST_APPEARS_POSITIONS = exports.GHOST_APPEARS_POSITIONS = [[new mp.Vector3(2435.17, 4959.56, 46.82), 331], [new mp.Vector3(2443.07, 4969.24, 46.81), 127], [new mp.Vector3(2448.36, 4980.31, 46.81), 48], [new mp.Vector3(2455.82, 4994.02, 46.81), 129], [new mp.Vector3(2444.39, 4975.90, 46.81), 130], [new mp.Vector3(2435.05, 4963.13, 46.81), 337], [new mp.Vector3(2443.86, 4965.10, 46.81), 46], [new mp.Vector3(2454.73, 4981.11, 46.81), 225], [new mp.Vector3(2450.35, 4975.20, 51.56), 48], [new mp.Vector3(2443.73, 4984.58, 51.56), 124], [new mp.Vector3(2442.24, 4976.45, 51.56), 272], [new mp.Vector3(2439.14, 4969.12, 51.56), 313], [new mp.Vector3(2452.17, 4973.77, 51.56), 320], [new mp.Vector3(2444.97, 4989.04, 51.70), 217], [new mp.Vector3(2435.25, 4973.09, 46.83), 223], [new mp.Vector3(2450.70, 4977.27, 46.81), 131], [new mp.Vector3(2458.92, 4991.12, 46.81), 137], [new mp.Vector3(2430.49, 4968.24, 46.82), 220], [new mp.Vector3(2448.02, 4969.72, 46.81), 39], [new mp.Vector3(2445.23, 4988.32, 46.81), 141], [new mp.Vector3(2454.72, 4984.12, 46.81), 32], [new mp.Vector3(2454.34, 4989.73, 46.81), 41], [new mp.Vector3(2452.82, 4982.17, 48.06), 137], [new mp.Vector3(2452.68, 4981.69, 48.06), 39], [new mp.Vector3(2446.89, 4976.70, 51.56), 318]];
const GHOST_DAMAGE_PER_SECOND = exports.GHOST_DAMAGE_PER_SECOND = 40;
const GHOST_HEALTH = exports.GHOST_HEALTH = 100;
const HALLOWEEN_PORTALS_QUEST_ID = exports.HALLOWEEN_PORTALS_QUEST_ID = 'halloween-portal-quest';
const HALLOWEEN_PORTALS_QUEST_NAME = exports.HALLOWEEN_PORTALS_QUEST_NAME = 'Операция СХОДКА';
const HALLOWEEN_PORTALS_ARMORS_GOAL = exports.HALLOWEEN_PORTALS_ARMORS_GOAL = 2;
const HALLOWEEN_PORTAL_MODEL = exports.HALLOWEEN_PORTAL_MODEL = 'netherportal';
const HALLOWEEN_PORTAL_POSITION = exports.HALLOWEEN_PORTAL_POSITION = new mp.Vector3(-549.74, -261.05, 34.34);
const HALLOWEEN_PORTAL_HEADING = exports.HALLOWEEN_PORTAL_HEADING = 252;
const HALLOWEEN_ENTER_PORTAL_EVENT = exports.HALLOWEEN_ENTER_PORTAL_EVENT = 'halloween:enterPortal';
const HALLOWEEN_ZOMBIE_KILLED_EVENT = exports.HALLOWEEN_ZOMBIE_KILLED_EVENT = 'halloween:killZombie';
const HALLOWEEN_EXIT_PORTAL_EVENT = exports.HALLOWEEN_EXIT_PORTAL_EVENT = 'halloween:exitPortal';
const HALLOWEEN_ISLAND_PORTAL_POSITION = exports.HALLOWEEN_ISLAND_PORTAL_POSITION = new mp.Vector3(5322.75, -5249.59, 31.44);
const HALLOWEEN_ISLAND_DIMENSION_BASE = exports.HALLOWEEN_ISLAND_DIMENSION_BASE = 1000013;
const HALLOWEEN_ISLAND_ZOMBIES_POSITIONS = exports.HALLOWEEN_ISLAND_ZOMBIES_POSITIONS = [[new mp.Vector3(5393.33, -5237.47, 34.04), 73], [new mp.Vector3(5381.45, -5231.26, 33.05), 90], [new mp.Vector3(5373.11, -5223.51, 32.15), 130], [new mp.Vector3(5364.69, -5216.29, 31.26), 123], [new mp.Vector3(5357.34, -5213.02, 30.96), 99], [new mp.Vector3(5346.36, -5204.38, 30.95), 141], [new mp.Vector3(5337.82, -5202.20, 31.75), 146], [new mp.Vector3(5329.58, -5199.73, 31.88), 149], [new mp.Vector3(5318.25, -5202.50, 31.74), 206], [new mp.Vector3(5301.80, -5207.36, 31.79), 209], [new mp.Vector3(5287.15, -5217.61, 30.86), 147], [new mp.Vector3(5269.11, -5233.38, 27.57), 217], [new mp.Vector3(5272.77, -5261.83, 28.67), 272], [new mp.Vector3(5278.17, -5285.01, 31.04), 298], [new mp.Vector3(5284.99, -5293.98, 32.26), 311], [new mp.Vector3(5294.35, -5306.25, 34.13), 242], [new mp.Vector3(5301.34, -5313.67, 35.19), 320], [new mp.Vector3(5309.08, -5315.97, 35.47), 10], [new mp.Vector3(5315.01, -5314.35, 35.87), 29], [new mp.Vector3(5320.45, -5310.95, 36.05), 336], [new mp.Vector3(5335.59, -5302.39, 36.51), 46], [new mp.Vector3(5339.92, -5299.90, 36.68), 24], [new mp.Vector3(5348.61, -5301.59, 37.23), 36], [new mp.Vector3(5363.26, -5292.02, 34.87), 61], [new mp.Vector3(5375.14, -5277.79, 34.78), 57], [new mp.Vector3(5388.76, -5259.67, 34.66), 68], [new mp.Vector3(5381.93, -5269.25, 34.61), 82], [new mp.Vector3(5395.42, -5254.91, 34.83), 25]];
const HALLOWEEN_ZOMBIES_MODELS = exports.HALLOWEEN_ZOMBIES_MODELS = ["u_m_o_filmnoir", "ig_johnnyklebitz", "s_m_m_movalien_01", "u_m_y_zombie_01", "u_f_m_drowned_01", "s_m_m_strperf_01", "u_f_y_corpse_01", "u_m_m_prolsec_01"];
const HALLOWEEN_PORTALS_ZOMBIES_GOAL = exports.HALLOWEEN_PORTALS_ZOMBIES_GOAL = 20;
const HALLOWEEN_PORTALS_QUEST_BAG_REWARD_ITEM_ID = exports.HALLOWEEN_PORTALS_QUEST_BAG_REWARD_ITEM_ID = 2088;
const HALLOWEEN_ZOMBIES_DAMAGE = exports.HALLOWEEN_ZOMBIES_DAMAGE = 30;
const HALLOWEEN_PLAYER_TO_ZOMBIES_DAMAGE = exports.HALLOWEEN_PLAYER_TO_ZOMBIES_DAMAGE = 20;
const HALLOWEEN_ZOMBIES_EVENT_GROUP_LENGTH = exports.HALLOWEEN_ZOMBIES_EVENT_GROUP_LENGTH = 5;
},{}],"aUAa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onyxCreateObject = onyxCreateObject;
var _interact = require("./interact");
const queue = [];
mp.events.add('entityStreamIn', entity => {
  if (!entity || !entity.handle || entity.type !== _interact.ENTITY_TYPES.OBJECT) {
    return;
  }
  const idx = queue.findIndex(el => el.obj === entity);
  if (idx === -1) {
    return;
  }
  queue[idx].handler(entity);
  queue.splice(idx, 1);
});
function onyxCreateObject(model, position, handler, options) {
  const object = mp.objects.new(model, position, options);
  object.notifyStreaming = true;
  queue.push({
    obj: object,
    handler
  });
  return object;
}
},{"./interact":"m19G"}],"uWgG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ghost = void 0;
var _objects = require("../../../../objects");
const pool = [];
const deleteFromPool = ghost => {
  const idx = pool.findIndex(el => el === ghost);
  if (idx !== -1) {
    pool.splice(idx, 1);
  }
};
class Ghost {
  constructor(health, model, position, destroyHandler) {
    this._alive = false;
    this.handleStreamIn = object => {
      if (object !== this._object) {
        return;
      }
      this._alive = true;
    };
    this._destroyHandler = destroyHandler;
    this._health = health;
    this._object = (0, _objects.onyxCreateObject)(model, position[0], this.handleStreamIn, {
      alpha: 200,
      dimension: mp.players.local.dimension,
      rotation: new mp.Vector3(0, 0, position[1])
    });
    pool.push(this);
  }
  get alive() {
    return this._alive;
  }
  get position() {
    if (!this._object || !this._object.handle) {
      return null;
    }
    return this._object.getCoords(false);
  }
  destroy() {
    if (!this._alive) {
      return;
    }
    this._alive = false;
    if (this._object && this._object.handle) {
      this._object.destroy();
    }
    deleteFromPool(this);
    this._destroyHandler(this._health);
  }
  slide(targetPosition) {
    this._slidePosition = targetPosition;
  }
  handleRender() {
    if (this.alive && this._object && this._object.handle) {
      const isSlideEnd = this._object.slide(this._slidePosition.x, this._slidePosition.y, this._slidePosition.z, 0.01, 0.01, 0.01, false);
      if (isSlideEnd) {
        this.destroy();
      }
    }
  }
  applyDamage(damage) {
    this._health -= damage;
    return this._health <= 0;
  }
}
exports.Ghost = Ghost;
mp.events.add('render', () => {
  for (let ghost of pool) {
    ghost.handleRender();
  }
});
},{"../../../../objects":"aUAa"}],"KZ9N":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disableHalloweenWeather = disableHalloweenWeather;
exports.enableHalloweenWeather = enableHalloweenWeather;
var _world = require("../../../world");
const QUEST_TIME_HOUR = 0;
async function enableHalloweenWeather(transitionTimeS) {
  _world.weather.ignoreServerWeather = true;
  mp.game.gameplay.setWeatherTypeOverTime('HALLOWEEN', transitionTimeS);
  setTimeout(() => {
    mp.game.gameplay.setWeatherTypeNow('HALLOWEEN');
    mp.game.gameplay.setWeatherTypeNowPersist('HALLOWEEN');
  }, (transitionTimeS - 1) * 1000);
  mp.game.time.pauseClock(true);
  await _world.weather.smoothTimeTransition(_world.weather.realHour, _world.weather.realMinute, QUEST_TIME_HOUR, true);
}
async function disableHalloweenWeather(transitionTimeS) {
  mp.game.gameplay.setWeatherTypeOverTime(_world.weather.weather, transitionTimeS);
  setTimeout(() => {
    mp.game.gameplay.setWeatherTypeNow(_world.weather.weather);
    mp.game.gameplay.setWeatherTypeNowPersist(_world.weather.weather);
  }, (transitionTimeS - 1) * 1000);
  mp.game.time.pauseClock(false);
  await _world.weather.smoothTimeTransition(QUEST_TIME_HOUR, 0, _world.weather.realHour, false);
}
},{"../../../world":"j6No"}],"Kh8J":[function(require,module,exports) {
"use strict";

var _custom = require("../../../../custom.event");
var _halloween = require("../../../../../../shared/events/halloween.config");
var _system = require("../../../../../../shared/system");
var _ghost = require("./ghost");
var _raycast = require("../../../../raycast");
var _fps = require("../../../../fps");
var _user = require("../../../../user");
var _common = require("../common");
const GHOST_RADIUS = 2.5;
const gameplayCamera = mp.cameras.new('gameplay');
let isQuestEnabled = false;
let ghost = null;
let questSuit = null;
let last_health = _halloween.GHOST_HEALTH;
setInterval(() => {
  if (!isQuestEnabled || ghost !== null) {
    return;
  }
  createGhost();
}, 5000);
_custom.CustomEvent.registerServer(_halloween.HALLOWEEN_START_GHOSTS_DESTROY_EVENT, () => {
  if (mp.players.local.isInAnyVehicle(false)) {
    mp.players.local.taskLeaveVehicle(mp.players.local.vehicle.handle, 256);
    setTimeout(() => {
      startQuest();
    }, 2000);
  } else {
    startQuest();
  }
});
function startQuest() {
  isQuestEnabled = true;
  (0, _common.enableHalloweenWeather)(20);
  givePlayerQuestSuit();
  createGhost();
}
async function givePlayerQuestSuit() {
  const playerPos = mp.players.local.position;
  const objectH = mp.game.object.createObject(mp.game.joaat(_halloween.GHOSTBUSTERS_BACKPACK_MODEL), playerPos.x, playerPos.y, playerPos.z - 10, true, true, true);
  const object = mp.objects.newWeak(objectH);
  while (!object.handle) {
    await mp.game.waitAsync(10);
  }
  const boneIndex = mp.players.local.getBoneIndex(64729);
  object.attachTo(mp.players.local.handle, boneIndex, 0.035, -0.190, 0.260, 356, 156, 173, false, false, false, false, 2, true);
  questSuit = {
    backpackObject: object
  };
  (0, _user.giveWeaponLocally)('weapon_rayminigun', 0, true);
}
function createGhost() {
  const position = _system.systemUtil.randomArrayElement(_halloween.GHOST_APPEARS_POSITIONS);
  ghost = new _ghost.Ghost(last_health, _halloween.GHOST_MODEL, position, healthLeft => {
    last_health = healthLeft > 0 ? healthLeft : _halloween.GHOST_HEALTH;
    ghost = null;
  });
  const targetPosition = _system.systemUtil.randomArrayElement(_halloween.GHOST_APPEARS_POSITIONS);
  ghost.slide(targetPosition[0]);
}
_custom.CustomEvent.registerServer(_halloween.HALLOWEEN_END_GHOSTS_DESTROY_EVENT, () => {
  isQuestEnabled = false;
  if (questSuit) {
    questSuit.backpackObject.destroy();
  }
  questSuit = null;
  if (ghost && ghost.alive) {
    ghost.destroy();
    ghost = null;
  }
  (0, _user.clearAllWeapons)();
  (0, _common.disableHalloweenWeather)(20);
});
mp.events.add('render', () => {
  if (!questSuit) {
    return;
  }
  mp.game.controls.disableControlAction(0, 24, true);
  if (mp.game.controls.isControlPressed(0, 25) && mp.game.controls.isDisabledControlPressed(0, 24)) {
    tryDamageGhost();
  }
});
function tryDamageGhost() {
  if (!ghost || !ghost.alive) {
    return;
  }
  if (isAimingOnGhost()) {
    const isDead = ghost.applyDamage(_halloween.GHOST_DAMAGE_PER_SECOND / _fps.FPS.fps);
    if (isDead) {
      ghost.destroy();
      _custom.CustomEvent.triggerServer(_halloween.HALLOWEEN_DESTROY_GHOST_EVENT);
    }
  }
}
function isAimingOnGhost() {
  const ghostPos = ghost.position;
  if (!ghostPos) {
    return false;
  }
  const lookAtPosition = _raycast.Raycast.getPositionLookAt();
  const cameraPosition = gameplayCamera.getCoord();
  const raycastResult = mp.raycasting.testPointToPoint(cameraPosition, lookAtPosition);
  if (!raycastResult) {
    return false;
  }
  const surfacePosition = raycastResult.position;
  if (surfacePosition) {
    playRailgunFx(surfacePosition);
  }
  const lineDist = _system.systemUtil.distanceToPos(cameraPosition, surfacePosition);
  let t = ((ghostPos.x - cameraPosition.x) * (surfacePosition.x - cameraPosition.x) + (ghostPos.y - cameraPosition.y) * (surfacePosition.y - cameraPosition.y) + (ghostPos.z - cameraPosition.z) * (surfacePosition.z - cameraPosition.z)) / lineDist;
  t = Math.max(0, Math.min(1, t));
  const dist = _system.systemUtil.distanceToPos(ghostPos, {
    x: cameraPosition.x + t * (surfacePosition.x - cameraPosition.x),
    y: cameraPosition.y + t * (surfacePosition.y - cameraPosition.y),
    z: cameraPosition.z + t * (surfacePosition.z - cameraPosition.z)
  });
  return dist <= GHOST_RADIUS;
}
let ptfxHandle = null;
function playRailgunFx(position) {
  if (!mp.game.streaming.hasNamedPtfxAssetLoaded('weap_xs_weapons')) {
    mp.game.streaming.requestNamedPtfxAsset('weap_xs_weapons');
  }
  const camRotation = gameplayCamera.getRot(4);
  if (ptfxHandle) {
    return;
  }
  mp.game.graphics.setPtfxAssetNextCall('weap_xs_weapons');
  ptfxHandle = mp.game.graphics.startParticleFxLoopedAtCoord('proj_xs_sr_raygun_trail', position.x, position.y, position.z, -camRotation.x, camRotation.y, camRotation.z + 90, 1, false, false, false, false);
  setTimeout(() => {
    mp.game.graphics.removeParticleFx(ptfxHandle, true);
    ptfxHandle = null;
  }, 50);
}
},{"../../../../custom.event":"py8h","../../../../../../shared/events/halloween.config":"QZWk","../../../../../../shared/system":"SNxO","./ghost":"uWgG","../../../../raycast":"ghdA","../../../../fps":"JiGH","../../../../user":"ggMw","../common":"KZ9N"}],"mD5O":[function(require,module,exports) {
"use strict";

var _peds = require("../../../../peds");
var _custom = require("../../../../custom.event");
var _system = require("../../../../../../shared/system");
var _zombiesDemolition = require("./zombiesDemolition");
const PLAYER_GROUP = 'playersTeam';
const ZOMBIE_GROUP = 'zombiesGroup';
const PLAYER_GROUP_HASH = mp.game.joaat('playersTeam');
const ZOMBIE_GROUP_HASH = mp.game.joaat('zombiesGroup');
mp.events.add('playerReady', () => {
  mp.game.ped.addRelationshipGroup(PLAYER_GROUP, PLAYER_GROUP_HASH);
  mp.game.ped.addRelationshipGroup(ZOMBIE_GROUP, ZOMBIE_GROUP_HASH);
  mp.game.ped.setRelationshipBetweenGroups(0, ZOMBIE_GROUP_HASH, PLAYER_GROUP_HASH);
  mp.game.ped.setRelationshipBetweenGroups(2, PLAYER_GROUP_HASH, ZOMBIE_GROUP_HASH);
});
mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
  try {
    if (mp.players.local.dimension === 0) {
      return;
    }
    mp.peds.toArray().forEach(ped => {
      if (!ped || !ped.handle || !ped.getVariable('halloweenZombie')) {
        return;
      }
      if (ped.isDead()) {
        return;
      }
      if (mp.game.player.isFreeAimingAtEntity(ped.handle)) {
        _custom.CustomEvent.triggerServer('halloween:damageZombie', ped.remoteId);
      }
    });
  } catch (e) {}
});
_custom.CustomEvent.registerServer('halloween:killZombie', pedRemoteId => {
  try {
    mp.peds.toArray().forEach(ped => {
      if (!ped || !mp.peds.exists(ped) || ped.remoteId !== pedRemoteId) {
        return;
      }
      ped.applyDamageTo(200, true);
    });
  } catch (e) {}
});
function startPedControlling(ped) {
  try {
    if (!verifyZombiePed(ped)) {
      return;
    }
    applyZombiePedAttributes(ped);
    applyZombieRelations(ped);
    const distanceToAttack = 2;
    const interval = setInterval(() => {
      try {
        if (mp.players.local.dimension === 0) {
          clearInterval(interval);
          return;
        }
        if (!ped || !ped.handle || ped.isDead()) {
          clearInterval(interval);
          return;
        }
        const target = getNearestPlayer(ped.getCoordsAutoAlive());
        if (!target) {
          return;
        }
        const tPos = target.position;
        if (_system.systemUtil.distanceToPos(ped.getCoordsAutoAlive(), tPos) < distanceToAttack) {
          mp.game.streaming.requestAnimDict('misscarsteal4@actor');
          ped.taskPlayAnim("misscarsteal4@actor", "stumble", 1.5, 1.0, 500, 9, 1.0, false, false, false);
          _custom.CustomEvent.triggerServer('halloween:zombieDamage', target.remoteId);
        } else {
          ped.taskGoToCoordAnyMeans(tPos.x, tPos.y, tPos.z, 4.0, 0.0, true, 1.0, 0);
        }
      } catch (e) {
        return;
      }
    }, 2000);
  } catch (e) {}
}
function applyZombiePedAttributes(ped) {
  ped.setInvincible(false);
  ped.setCanBeDamaged(false);
  ped.freezePosition(false);
  ped.setCanRagdoll(true);
  ped.setCanRagdollFromPlayerImpact(false);
  mp.game.invoke('0x26695EC767728D84', ped.handle, 1);
  ped.setCombatAbility(0);
  ped.setCombatMovement(0);
  ped.setCombatRange(0);
  mp.game.invoke('0x95D2D383D5396B8A', ped.handle, true);
  ped.setBlockingOfNonTemporaryEvents(true);
  for (let i = 0; i < 64; i += 2) {
    ped.setFleeAttributes(i, false);
  }
  ped.setFleeAttributes(0, false);
  ped.setMovementClipset(_zombiesDemolition.ZOMBIES_MOVEMENT_CLIPSET, 1.0);
}
function applyZombieRelations(ped) {
  ped.setRelationshipGroupHash(ZOMBIE_GROUP_HASH);
  mp.players.forEach(player => {
    if (player.dimension !== mp.players.local.dimension) {
      return;
    }
    player.setRelationshipGroupHash(PLAYER_GROUP_HASH);
  });
}
function getNearestPlayer(position) {
  var _mp$players$toArray$f;
  return (_mp$players$toArray$f = mp.players.toArray().filter(player => (player === null || player === void 0 ? void 0 : player.handle) && player.dimension === mp.players.local.dimension).map(player => ({
    player: player,
    dist: _system.systemUtil.distanceToPos(position, player.position)
  })).sort((a, b) => a.dist - b.dist)[0]) === null || _mp$players$toArray$f === void 0 ? void 0 : _mp$players$toArray$f.player;
}
function verifyZombiePed(ped) {
  if ((ped === null || ped === void 0 ? void 0 : ped.type) !== 'ped') return false;
  if (!ped.handle) return false;
  if (!ped.getVariable('halloweenZombie')) {
    return false;
  }
  if (!(0, _peds.isPedMy)(ped)) {
    return false;
  }
  return true;
}
mp.events.add('entityControllerChange', (ped, controller) => {
  if (mp.players.local.dimension === 0) {
    return;
  }
  startPedControlling(ped);
});
mp.events.add('entityStreamIn', ped => {
  startPedControlling(ped);
});
},{"../../../../peds":"ds7w","../../../../custom.event":"py8h","../../../../../../shared/system":"SNxO","./zombiesDemolition":"CYX4"}],"CYX4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZOMBIES_MOVEMENT_CLIPSET = void 0;
require("./zombiesController");
var _custom = require("../../../../custom.event");
var _halloween = require("../../../../../../shared/events/halloween.config");
var _common = require("../common");
const ZOMBIES_MOVEMENT_CLIPSET = exports.ZOMBIES_MOVEMENT_CLIPSET = 'move_heist_lester';
_custom.CustomEvent.registerServer(_halloween.HALLOWEEN_ENTER_PORTAL_EVENT, () => {
  loadZombiesClipSet();
  (0, _common.enableHalloweenWeather)(20);
});
_custom.CustomEvent.registerServer(_halloween.HALLOWEEN_EXIT_PORTAL_EVENT, () => {
  (0, _common.disableHalloweenWeather)(20);
});
async function loadZombiesClipSet() {
  while (!mp.game.streaming.hasClipSetLoaded(ZOMBIES_MOVEMENT_CLIPSET)) {
    await mp.game.waitAsync(10);
  }
}
mp.events.add('entityStreamIn', ped => {
  try {
    if (!(ped !== null && ped !== void 0 && ped.getVariable('halloweenZombie'))) {
      return;
    }
    drawPedBlood(ped);
  } catch (e) {}
});
function drawPedBlood(ped) {
  mp.game.invoke('0x46DF918788CB093F', ped.handle, "BigHitByVehicle", 0.0, 9.0);
  mp.game.invoke('0x46DF918788CB093F', ped.handle, "SCR_Dumpster", 0.0, 9.0);
  mp.game.invoke('0x46DF918788CB093F', ped.handle, "SCR_Torture", 0.0, 9.0);
}
_custom.CustomEvent.registerServer('halloween:applyDamageByZombie', () => {
  try {
    if (mp.players.local.health <= 0) {
      return;
    }
    if (mp.players.local.health < _halloween.HALLOWEEN_ZOMBIES_DAMAGE) {
      mp.players.local.applyDamageTo(mp.players.local.health + 1, true);
    } else {
      mp.players.local.applyDamageTo(_halloween.HALLOWEEN_ZOMBIES_DAMAGE, true);
    }
  } catch (e) {}
});
},{"./zombiesController":"mD5O","../../../../custom.event":"py8h","../../../../../../shared/events/halloween.config":"QZWk","../common":"KZ9N"}],"xqVl":[function(require,module,exports) {
"use strict";

require("./quests/ghosts/ghosts.quest");
require("./quests/zombies/zombiesDemolition");
},{"./quests/ghosts/ghosts.quest":"Kh8J","./quests/zombies/zombiesDemolition":"CYX4"}],"MzZK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WEAPON_UNARMED_HASH = exports.WEAPON_UNARMED = exports.WEAPON_SNOWBALL_HASH = exports.WEAPON_SNOWBALL = exports.SNOWBALL_ANIMATION = void 0;
const WEAPON_UNARMED_HASH = exports.WEAPON_UNARMED_HASH = -1569615261;
const WEAPON_SNOWBALL_HASH = exports.WEAPON_SNOWBALL_HASH = 126349499;
const WEAPON_UNARMED = exports.WEAPON_UNARMED = 'weapon_unarmed';
const WEAPON_SNOWBALL = exports.WEAPON_SNOWBALL = 'weapon_snowball';
const SNOWBALL_ANIMATION = exports.SNOWBALL_ANIMATION = {
  dictionary: 'anim@mp_snowball',
  name: 'pickup_snowball',
  durationSec: 2000
};
},{}],"lhDV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Snowballs = void 0;
var _custom = require("../../../custom.event");
var _user = require("../../../user");
var _snowballs = require("../../../../../shared/events/newYear/snowballs.config");
class Snowballs {
  constructor() {
    this.inHand = false;
    this.player = mp.players.local;
    this.weapon = 2725352035;
    _custom.CustomEvent.register('snowball', () => this.createHandle());
    _custom.CustomEvent.registerServer('snowballs:weaponChange', (oldWeapon, newWeapon) => this.weaponChangeHandle(oldWeapon, newWeapon));
    mp.events.add('playerWeaponShot', () => this.weaponShotHandle());
  }
  weaponShotHandle() {
    if (this.inHand) {
      this.inHand = false;
      _custom.CustomEvent.triggerServer('snowballs:reset');
      this.weapon = 2725352035;
    }
  }
  async createHandle() {
    if (this.inHand) return _user.user.notify('У вас уже есть снежок', 'error');
    if (this.player.vehicle) return _user.user.notify('Выйдите из машины, чтобы слепить снежок', 'error');
    if (mp.raycasting.testPointToPoint(this.player.position, new mp.Vector3(this.player.position.x, this.player.position.y, 797), null, 1)) return _user.user.notify('Чтобы слепить снежок, необходимо находиться под открытым небом', 'error');
    if (this.weapon !== 2725352035) return _user.user.notify('Уберите оружие из рук, чтобы слепить снежок', 'error');
    _user.user.playAnim([[_snowballs.SNOWBALL_ANIMATION.dictionary, _snowballs.SNOWBALL_ANIMATION.name]], false, false);
    while (true) {
      if (this.player.isPlayingAnim(_snowballs.SNOWBALL_ANIMATION.dictionary, _snowballs.SNOWBALL_ANIMATION.name, 3) && this.player.getAnimCurrentTime(_snowballs.SNOWBALL_ANIMATION.dictionary, _snowballs.SNOWBALL_ANIMATION.name) > 0.75) {
        _custom.CustomEvent.triggerServer('snowballs:give');
        this.inHand = true;
        break;
      }
      await mp.game.waitAsync(0);
    }
  }
  weaponChangeHandle(oldWeapon, newWeapon) {
    this.weapon = newWeapon;
    if (oldWeapon === _snowballs.WEAPON_SNOWBALL_HASH && this.inHand) this.inHand = false;
  }
}
exports.Snowballs = Snowballs;
},{"../../../custom.event":"py8h","../../../user":"ggMw","../../../../../shared/events/newYear/snowballs.config":"MzZK"}],"tE0d":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NEW_YEAR_EXCHANGE_ACTIVE = exports.NEW_YEAR_EVENT_BLIP_SPRITE = exports.NEW_YEAR_EVENT_BLIP_POSITION = exports.NEW_YEAR_EVENT_BLIP_OPTIONS = exports.GREETING_COLOR = exports.EVENT_IS_ACTIVE = void 0;
const EVENT_IS_ACTIVE = exports.EVENT_IS_ACTIVE = false;
const NEW_YEAR_EXCHANGE_ACTIVE = exports.NEW_YEAR_EXCHANGE_ACTIVE = true;
const GREETING_COLOR = exports.GREETING_COLOR = "ff5a3d";
const NEW_YEAR_EVENT_BLIP_SPRITE = exports.NEW_YEAR_EVENT_BLIP_SPRITE = 304;
const NEW_YEAR_EVENT_BLIP_POSITION = exports.NEW_YEAR_EVENT_BLIP_POSITION = new mp.Vector3(1669.18, 3691.57, 34.25);
const NEW_YEAR_EVENT_BLIP_OPTIONS = exports.NEW_YEAR_EVENT_BLIP_OPTIONS = {
  color: 75,
  dimension: 0,
  name: "Санта Клаус",
  shortRange: true
};
},{}],"sE8r":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NEW_YEAR_SPANISH_NPC_NAME = exports.NEW_YEAR_SPANISH_NPC_ID = exports.NEW_YEAR_SIXTH_QUEST_WORD_TEXT = exports.NEW_YEAR_SIXTH_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_SIXTH_QUEST_REWARD_ITEM_ID = exports.NEW_YEAR_SIXTH_QUEST_NAME = exports.NEW_YEAR_SIXTH_QUEST_LEAVE_JOB_TYPE = exports.NEW_YEAR_SIXTH_QUEST_LEAVE_JOB_TEXT = exports.NEW_YEAR_SIXTH_QUEST_JOB_TYPE = exports.NEW_YEAR_SIXTH_QUEST_JOB_HUD_NAME = exports.NEW_YEAR_SIXTH_QUEST_JOB_GOAL = exports.NEW_YEAR_SIXTH_QUEST_ID = exports.NEW_YEAR_SIXTH_QUEST_HUNT_ITEM_ID = exports.NEW_YEAR_SIXTH_QUEST_HUNT_GOAL = exports.NEW_YEAR_SIXTH_QUEST_HUD_NAME = exports.NEW_YEAR_SIXTH_QUEST_COLLECT_POSITION = exports.NEW_YEAR_SIXTH_QUEST_COLLECT_HUD_TEXT = exports.NEW_YEAR_SIXTH_QUEST_COLLECT_ANIMATION = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_THIRD = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_SECOND = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_FOURTH = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_FIRST = exports.NEW_YEAR_SECOND_QUEST_WEED_HELP_TEXT = exports.NEW_YEAR_SECOND_QUEST_WEED_ANIMATION_DATA = exports.NEW_YEAR_SECOND_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_SECOND_QUEST_NAME = exports.NEW_YEAR_SECOND_QUEST_ID = exports.NEW_YEAR_SECOND_QUEST_CARRY_GOAL = exports.NEW_YEAR_SECOND_QUEST_BANANA_ITEM_ID = exports.NEW_YEAR_SECOND_QUEST_BANANA_GOAL = exports.NEW_YEAR_SANTA_NPC_PARAMETERS = exports.NEW_YEAR_SANTA_NPC_NAME = exports.NEW_YEAR_SANTA_NPC_ID = exports.NEW_YEAR_MEGATRON_NPC_PARAMETERS = exports.NEW_YEAR_MEGATRON_NPC_NAME = exports.NEW_YEAR_MEGATRON_NPC_ID = exports.NEW_YEAR_HOMELESS_NPC_PARAMETERS = exports.NEW_YEAR_HOMELESS_NPC_NAME = exports.NEW_YEAR_HOMELESS_NPC_ID = exports.NEW_YEAR_HARRY_NPC_PARAMETERS = exports.NEW_YEAR_HARRY_NPC_NAME = exports.NEW_YEAR_HARRY_NPC_ID = exports.NEW_YEAR_GALILEO_NPC_RANGE = exports.NEW_YEAR_GALILEO_NPC_POSITION = exports.NEW_YEAR_GALILEO_NPC_NAME = exports.NEW_YEAR_GALILEO_NPC_MODEL = exports.NEW_YEAR_GALILEO_NPC_HEADING = exports.NEW_YEAR_GALILEO_NPC_DIMENSION = exports.NEW_YEAR_FOURTH_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_FOURTH_QUEST_NAME = exports.NEW_YEAR_FOURTH_QUEST_ID = exports.NEW_YEAR_FOURTH_QUEST_COLA_ITEM_ID = exports.NEW_YEAR_FOURTH_QUEST_COLA_GOAL = exports.NEW_YEAR_FOURTH_QUEST_CHEESE_BURGER_ITEM_ID = exports.NEW_YEAR_FOURTH_QUEST_CHEESE_BURGER_GOAL = exports.NEW_YEAR_FOURTH_QUEST_BANANA_ITEM_ID = exports.NEW_YEAR_FOURTH_QUEST_BANANA_GOAL = exports.NEW_YEAR_FIRST_QUEST_TREES_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_TREES_GOAL = exports.NEW_YEAR_FIRST_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIRST_QUEST_NAME = exports.NEW_YEAR_FIRST_QUEST_ID = exports.NEW_YEAR_FIRST_QUEST_DONUT_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_DONUT_GOAL = exports.NEW_YEAR_FIRST_QUEST_COGNAC_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_COGNAC_GOAL = exports.NEW_YEAR_FIRST_QUEST_COFFEE_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_COFFEE_GOAL = exports.NEW_YEAR_FIFTH_QUEST_TOMATO_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_TOMATO_GOAL = exports.NEW_YEAR_FIFTH_QUEST_SIDR_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_SIDR_GOAL = exports.NEW_YEAR_FIFTH_QUEST_SECOND_LINE_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIFTH_QUEST_SECOND_LINE_ID = exports.NEW_YEAR_FIFTH_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIFTH_QUEST_POTATO_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_POTATO_GOAL = exports.NEW_YEAR_FIFTH_QUEST_PIZZA_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_PIZZA_GOAL = exports.NEW_YEAR_FIFTH_QUEST_NAME = exports.NEW_YEAR_FIFTH_QUEST_JOB_TYPE = exports.NEW_YEAR_FIFTH_QUEST_JOB_HUD_NAME = exports.NEW_YEAR_FIFTH_QUEST_JOB_GOAL = exports.NEW_YEAR_FIFTH_QUEST_ID = exports.NEW_YEAR_FIFTH_QUEST_FIRST_LINE_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIFTH_QUEST_FIRST_LINE_ID = exports.NEW_YEAR_FIFTH_QUEST_ENERGY_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_ENERGY_GOAL = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_POSITION = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_HUD_TEXT = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_HELP_TEXT = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_ANIMATION_DATA = exports.NEW_YEAR_FIFTH_QUEST_COLA_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_COLA_GOAL = exports.NEW_YEAR_BOLVANKA_NPC_PARAMETERS = exports.NEW_YEAR_BOLVANKA_NPC_NAME = exports.NEW_YEAR_BOLVANKA_NPC_ID = exports.NEW_YEAR_ARIEL_NPC_PARAMETERS = exports.NEW_YEAR_ARIEL_NPC_NAME = exports.NEW_YEAR_ARIEL_NPC_ID = void 0;
exports.NEW_YEAR_WORD_NPC_RANGE = exports.NEW_YEAR_WORD_NPC_POSITION = exports.NEW_YEAR_WORD_NPC_NAME = exports.NEW_YEAR_WORD_NPC_MODEL = exports.NEW_YEAR_WORD_NPC_HEADING = exports.NEW_YEAR_WORD_NPC_DIMENSION = exports.NEW_YEAR_THIRD_QUEST_VALID_WORD = exports.NEW_YEAR_THIRD_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_THIRD_QUEST_NAME = exports.NEW_YEAR_THIRD_QUEST_ID = exports.NEW_YEAR_THIRD_QUEST_HUD_NAME = exports.NEW_YEAR_SPANISH_NPC_PARAMETERS = void 0;
const NEW_YEAR_SANTA_NPC_ID = exports.NEW_YEAR_SANTA_NPC_ID = 'new-year-santa';
const NEW_YEAR_SANTA_NPC_NAME = exports.NEW_YEAR_SANTA_NPC_NAME = 'Санта Клаус';
const NEW_YEAR_SANTA_NPC_PARAMETERS = exports.NEW_YEAR_SANTA_NPC_PARAMETERS = {
  Position: new mp.Vector3(1674.40, 3684.91, 34.32),
  Heading: 5,
  Model: 's_m_y_clown_01',
  Name: NEW_YEAR_SANTA_NPC_NAME
};
const NEW_YEAR_HARRY_NPC_ID = exports.NEW_YEAR_HARRY_NPC_ID = 'new-year-harry';
const NEW_YEAR_HARRY_NPC_NAME = exports.NEW_YEAR_HARRY_NPC_NAME = 'Гарри';
const NEW_YEAR_HARRY_NPC_PARAMETERS = exports.NEW_YEAR_HARRY_NPC_PARAMETERS = {
  Position: new mp.Vector3(2220.25, 5609.61, 54.71),
  Heading: 117,
  Model: 'ig_isldj_02',
  Name: NEW_YEAR_HARRY_NPC_NAME
};
const NEW_YEAR_WORD_NPC_POSITION = exports.NEW_YEAR_WORD_NPC_POSITION = new mp.Vector3(63.42, 118.50, 79.11);
const NEW_YEAR_WORD_NPC_HEADING = exports.NEW_YEAR_WORD_NPC_HEADING = 140;
const NEW_YEAR_WORD_NPC_MODEL = exports.NEW_YEAR_WORD_NPC_MODEL = 's_m_m_postal_01';
const NEW_YEAR_WORD_NPC_NAME = exports.NEW_YEAR_WORD_NPC_NAME = 'Руслан';
const NEW_YEAR_WORD_NPC_RANGE = exports.NEW_YEAR_WORD_NPC_RANGE = 1.5;
const NEW_YEAR_WORD_NPC_DIMENSION = exports.NEW_YEAR_WORD_NPC_DIMENSION = 0;
const NEW_YEAR_HOMELESS_NPC_ID = exports.NEW_YEAR_HOMELESS_NPC_ID = 'new-year-marv';
const NEW_YEAR_HOMELESS_NPC_NAME = exports.NEW_YEAR_HOMELESS_NPC_NAME = 'Марв';
const NEW_YEAR_HOMELESS_NPC_PARAMETERS = exports.NEW_YEAR_HOMELESS_NPC_PARAMETERS = {
  Position: new mp.Vector3(1099.42, -775.49, 58.35),
  Heading: 183,
  Model: 'a_m_m_tramp_01',
  Name: NEW_YEAR_HOMELESS_NPC_NAME
};
const NEW_YEAR_SPANISH_NPC_ID = exports.NEW_YEAR_SPANISH_NPC_ID = 'new-year-abelardo';
const NEW_YEAR_SPANISH_NPC_NAME = exports.NEW_YEAR_SPANISH_NPC_NAME = 'Абелардо';
const NEW_YEAR_SPANISH_NPC_PARAMETERS = exports.NEW_YEAR_SPANISH_NPC_PARAMETERS = {
  Position: new mp.Vector3(-1069.57, -1675.77, 4.54),
  Heading: 29,
  Model: 's_m_o_busker_01',
  Name: NEW_YEAR_SPANISH_NPC_NAME
};
const NEW_YEAR_FIRST_QUEST_ID = exports.NEW_YEAR_FIRST_QUEST_ID = 'new-year-first-quest';
const NEW_YEAR_FIRST_QUEST_NAME = exports.NEW_YEAR_FIRST_QUEST_NAME = 'Ёлкоруб';
const NEW_YEAR_FIRST_QUEST_COGNAC_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_COGNAC_ITEM_ID = 215;
const NEW_YEAR_FIRST_QUEST_COGNAC_GOAL = exports.NEW_YEAR_FIRST_QUEST_COGNAC_GOAL = 1;
const NEW_YEAR_FIRST_QUEST_DONUT_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_DONUT_ITEM_ID = 26;
const NEW_YEAR_FIRST_QUEST_DONUT_GOAL = exports.NEW_YEAR_FIRST_QUEST_DONUT_GOAL = 1;
const NEW_YEAR_FIRST_QUEST_COFFEE_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_COFFEE_ITEM_ID = 5;
const NEW_YEAR_FIRST_QUEST_COFFEE_GOAL = exports.NEW_YEAR_FIRST_QUEST_COFFEE_GOAL = 1;
const NEW_YEAR_FIRST_QUEST_TREES_ITEM_ID = exports.NEW_YEAR_FIRST_QUEST_TREES_ITEM_ID = 7011;
const NEW_YEAR_FIRST_QUEST_TREES_GOAL = exports.NEW_YEAR_FIRST_QUEST_TREES_GOAL = 20;
const NEW_YEAR_SECOND_QUEST_ID = exports.NEW_YEAR_SECOND_QUEST_ID = 'new-year-second-quest';
const NEW_YEAR_SECOND_QUEST_NAME = exports.NEW_YEAR_SECOND_QUEST_NAME = 'Фейхоа или...';
const NEW_YEAR_SECOND_QUEST_BANANA_ITEM_ID = exports.NEW_YEAR_SECOND_QUEST_BANANA_ITEM_ID = 25;
const NEW_YEAR_SECOND_QUEST_BANANA_GOAL = exports.NEW_YEAR_SECOND_QUEST_BANANA_GOAL = 15;
const NEW_YEAR_SECOND_QUEST_WEED_POSITION_FIRST = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_FIRST = new mp.Vector3(2220.48, 5578.52, 52.72);
const NEW_YEAR_SECOND_QUEST_WEED_POSITION_SECOND = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_SECOND = new mp.Vector3(2225.49, 5578.14, 52.70);
const NEW_YEAR_SECOND_QUEST_WEED_POSITION_THIRD = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_THIRD = new mp.Vector3(2231.56, 5575.46, 52.80);
const NEW_YEAR_SECOND_QUEST_WEED_POSITION_FOURTH = exports.NEW_YEAR_SECOND_QUEST_WEED_POSITION_FOURTH = new mp.Vector3(2223.74, 5575.85, 52.62);
const NEW_YEAR_SECOND_QUEST_WEED_ANIMATION_DATA = exports.NEW_YEAR_SECOND_QUEST_WEED_ANIMATION_DATA = {
  dictionary: 'anim@heists@money_grab@duffel',
  name: 'loop',
  durationSec: 5
};
const NEW_YEAR_SECOND_QUEST_WEED_HELP_TEXT = exports.NEW_YEAR_SECOND_QUEST_WEED_HELP_TEXT = "Неизвестная трава";
const NEW_YEAR_SECOND_QUEST_CARRY_GOAL = exports.NEW_YEAR_SECOND_QUEST_CARRY_GOAL = 2;
const NEW_YEAR_THIRD_QUEST_ID = exports.NEW_YEAR_THIRD_QUEST_ID = 'new-year-third-quest';
const NEW_YEAR_THIRD_QUEST_NAME = exports.NEW_YEAR_THIRD_QUEST_NAME = 'Сайфер или как найти нужное слово';
const NEW_YEAR_THIRD_QUEST_VALID_WORD = exports.NEW_YEAR_THIRD_QUEST_VALID_WORD = 'dashound';
const NEW_YEAR_THIRD_QUEST_HUD_NAME = exports.NEW_YEAR_THIRD_QUEST_HUD_NAME = 'Найти кодовое слово из песни';
const NEW_YEAR_FOURTH_QUEST_ID = exports.NEW_YEAR_FOURTH_QUEST_ID = 'new-year-fourth-quest';
const NEW_YEAR_FOURTH_QUEST_NAME = exports.NEW_YEAR_FOURTH_QUEST_NAME = 'Испанский стыд';
const NEW_YEAR_FOURTH_QUEST_CHEESE_BURGER_ITEM_ID = exports.NEW_YEAR_FOURTH_QUEST_CHEESE_BURGER_ITEM_ID = 20;
const NEW_YEAR_FOURTH_QUEST_COLA_ITEM_ID = exports.NEW_YEAR_FOURTH_QUEST_COLA_ITEM_ID = 2;
const NEW_YEAR_FOURTH_QUEST_CHEESE_BURGER_GOAL = exports.NEW_YEAR_FOURTH_QUEST_CHEESE_BURGER_GOAL = 2;
const NEW_YEAR_FOURTH_QUEST_COLA_GOAL = exports.NEW_YEAR_FOURTH_QUEST_COLA_GOAL = 2;
const NEW_YEAR_FOURTH_QUEST_BANANA_ITEM_ID = exports.NEW_YEAR_FOURTH_QUEST_BANANA_ITEM_ID = 25;
const NEW_YEAR_FOURTH_QUEST_BANANA_GOAL = exports.NEW_YEAR_FOURTH_QUEST_BANANA_GOAL = 15;
const NEW_YEAR_FIFTH_QUEST_ID = exports.NEW_YEAR_FIFTH_QUEST_ID = 'new-year-fifth-quest';
const NEW_YEAR_FIFTH_QUEST_FIRST_LINE_ID = exports.NEW_YEAR_FIFTH_QUEST_FIRST_LINE_ID = 'new-year-fifth-quest-first';
const NEW_YEAR_FIFTH_QUEST_SECOND_LINE_ID = exports.NEW_YEAR_FIFTH_QUEST_SECOND_LINE_ID = 'new-year-fifth-quest-second';
const NEW_YEAR_FIFTH_QUEST_NAME = exports.NEW_YEAR_FIFTH_QUEST_NAME = 'Новогодний переполох';
const NEW_YEAR_MEGATRON_NPC_ID = exports.NEW_YEAR_MEGATRON_NPC_ID = 'new-year-megatron';
const NEW_YEAR_MEGATRON_NPC_NAME = exports.NEW_YEAR_MEGATRON_NPC_NAME = 'Мегатрон';
const NEW_YEAR_MEGATRON_NPC_PARAMETERS = exports.NEW_YEAR_MEGATRON_NPC_PARAMETERS = {
  Position: new mp.Vector3(-420.54, 1219.48, 325.76),
  Heading: 176,
  Model: 'a_m_m_genfat_02',
  Name: NEW_YEAR_MEGATRON_NPC_NAME
};
const NEW_YEAR_BOLVANKA_NPC_ID = exports.NEW_YEAR_BOLVANKA_NPC_ID = 'new-year-bolvanka';
const NEW_YEAR_BOLVANKA_NPC_NAME = exports.NEW_YEAR_BOLVANKA_NPC_NAME = 'Охранник';
const NEW_YEAR_BOLVANKA_NPC_PARAMETERS = exports.NEW_YEAR_BOLVANKA_NPC_PARAMETERS = {
  Position: new mp.Vector3(722.53, 1291.67, 360.30),
  Heading: 181,
  Model: 'csb_prologuedriver',
  Name: NEW_YEAR_BOLVANKA_NPC_NAME
};
const NEW_YEAR_FIFTH_QUEST_COLLECT_POSITION = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_POSITION = new mp.Vector3(714.02, 1285.84, 359.30);
const NEW_YEAR_FIFTH_QUEST_COLLECT_ANIMATION_DATA = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_ANIMATION_DATA = {
  dictionary: 'missbigscore1switch_trevor_piss',
  name: 'piss_loop',
  durationSec: 10
};
const NEW_YEAR_FIFTH_QUEST_COLLECT_HELP_TEXT = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_HELP_TEXT = 'Пытаемся разобраться с проводами';
const NEW_YEAR_FIFTH_QUEST_COLLECT_HUD_TEXT = exports.NEW_YEAR_FIFTH_QUEST_COLLECT_HUD_TEXT = 'Найти нужный электрощиток';
const NEW_YEAR_FIFTH_QUEST_JOB_TYPE = exports.NEW_YEAR_FIFTH_QUEST_JOB_TYPE = 'electrician';
const NEW_YEAR_FIFTH_QUEST_JOB_GOAL = exports.NEW_YEAR_FIFTH_QUEST_JOB_GOAL = 30;
const NEW_YEAR_FIFTH_QUEST_JOB_HUD_NAME = exports.NEW_YEAR_FIFTH_QUEST_JOB_HUD_NAME = 'Поработать на электрике';
const NEW_YEAR_FIFTH_QUEST_PIZZA_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_PIZZA_ITEM_ID = 24;
const NEW_YEAR_FIFTH_QUEST_PIZZA_GOAL = exports.NEW_YEAR_FIFTH_QUEST_PIZZA_GOAL = 2;
const NEW_YEAR_FIFTH_QUEST_COLA_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_COLA_ITEM_ID = 2;
const NEW_YEAR_FIFTH_QUEST_COLA_GOAL = exports.NEW_YEAR_FIFTH_QUEST_COLA_GOAL = 3;
const NEW_YEAR_FIFTH_QUEST_ENERGY_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_ENERGY_ITEM_ID = 7;
const NEW_YEAR_FIFTH_QUEST_ENERGY_GOAL = exports.NEW_YEAR_FIFTH_QUEST_ENERGY_GOAL = 4;
const NEW_YEAR_FIFTH_QUEST_SIDR_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_SIDR_ITEM_ID = 200;
const NEW_YEAR_FIFTH_QUEST_SIDR_GOAL = exports.NEW_YEAR_FIFTH_QUEST_SIDR_GOAL = 5;
const NEW_YEAR_FIFTH_QUEST_POTATO_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_POTATO_ITEM_ID = 7000;
const NEW_YEAR_FIFTH_QUEST_POTATO_GOAL = exports.NEW_YEAR_FIFTH_QUEST_POTATO_GOAL = 15;
const NEW_YEAR_FIFTH_QUEST_TOMATO_ITEM_ID = exports.NEW_YEAR_FIFTH_QUEST_TOMATO_ITEM_ID = 7022;
const NEW_YEAR_FIFTH_QUEST_TOMATO_GOAL = exports.NEW_YEAR_FIFTH_QUEST_TOMATO_GOAL = 10;
const NEW_YEAR_SIXTH_QUEST_ID = exports.NEW_YEAR_SIXTH_QUEST_ID = 'new-year-sixth-quest';
const NEW_YEAR_SIXTH_QUEST_NAME = exports.NEW_YEAR_SIXTH_QUEST_NAME = 'Конец или новое начало';
const NEW_YEAR_SIXTH_QUEST_COLLECT_POSITION = exports.NEW_YEAR_SIXTH_QUEST_COLLECT_POSITION = new mp.Vector3(-744.67, 4323.64, 140.35);
const NEW_YEAR_SIXTH_QUEST_COLLECT_ANIMATION = exports.NEW_YEAR_SIXTH_QUEST_COLLECT_ANIMATION = {
  dictionary: 'anim@amb@business@bgen@bgen_no_work@',
  name: 'sit_phone_phoneputdown_fallasleep_nowork',
  durationSec: 5
};
const NEW_YEAR_SIXTH_QUEST_COLLECT_HUD_TEXT = exports.NEW_YEAR_SIXTH_QUEST_COLLECT_HUD_TEXT = 'Воссоединяемся с природой';
const NEW_YEAR_SIXTH_QUEST_HUNT_ITEM_ID = exports.NEW_YEAR_SIXTH_QUEST_HUNT_ITEM_ID = 830;
const NEW_YEAR_SIXTH_QUEST_HUNT_GOAL = exports.NEW_YEAR_SIXTH_QUEST_HUNT_GOAL = 5;
const NEW_YEAR_SIXTH_QUEST_JOB_TYPE = exports.NEW_YEAR_SIXTH_QUEST_JOB_TYPE = 'busman:way';
const NEW_YEAR_SIXTH_QUEST_JOB_GOAL = exports.NEW_YEAR_SIXTH_QUEST_JOB_GOAL = 4;
const NEW_YEAR_SIXTH_QUEST_JOB_HUD_NAME = exports.NEW_YEAR_SIXTH_QUEST_JOB_HUD_NAME = 'Проехать маршрут на работе Автобусника';
const NEW_YEAR_SIXTH_QUEST_LEAVE_JOB_TYPE = exports.NEW_YEAR_SIXTH_QUEST_LEAVE_JOB_TYPE = 'busman';
const NEW_YEAR_SIXTH_QUEST_LEAVE_JOB_TEXT = exports.NEW_YEAR_SIXTH_QUEST_LEAVE_JOB_TEXT = 'Уволиться с работы в автобусном депо';
const NEW_YEAR_SIXTH_QUEST_WORD_TEXT = exports.NEW_YEAR_SIXTH_QUEST_WORD_TEXT = 'galileo';
const NEW_YEAR_SIXTH_QUEST_HUD_NAME = exports.NEW_YEAR_SIXTH_QUEST_HUD_NAME = 'Найти кодовое слово по описанию';
const NEW_YEAR_ARIEL_NPC_ID = exports.NEW_YEAR_ARIEL_NPC_ID = 'new-year-ariel';
const NEW_YEAR_ARIEL_NPC_NAME = exports.NEW_YEAR_ARIEL_NPC_NAME = 'Ариэль';
const NEW_YEAR_ARIEL_NPC_PARAMETERS = exports.NEW_YEAR_ARIEL_NPC_PARAMETERS = {
  Position: new mp.Vector3(-747.22, 4323.73, 141.70),
  Heading: 305,
  Model: 'a_f_m_bodybuild_01',
  Name: NEW_YEAR_ARIEL_NPC_NAME
};
const NEW_YEAR_GALILEO_NPC_POSITION = exports.NEW_YEAR_GALILEO_NPC_POSITION = new mp.Vector3(-601.17, 2091.22, 131.50);
const NEW_YEAR_GALILEO_NPC_HEADING = exports.NEW_YEAR_GALILEO_NPC_HEADING = 351;
const NEW_YEAR_GALILEO_NPC_MODEL = exports.NEW_YEAR_GALILEO_NPC_MODEL = 'mp_m_counterfeit_01';
const NEW_YEAR_GALILEO_NPC_NAME = exports.NEW_YEAR_GALILEO_NPC_NAME = 'Рудокоп';
const NEW_YEAR_GALILEO_NPC_RANGE = exports.NEW_YEAR_GALILEO_NPC_RANGE = 1.5;
const NEW_YEAR_GALILEO_NPC_DIMENSION = exports.NEW_YEAR_GALILEO_NPC_DIMENSION = 0;
const NEW_YEAR_FIRST_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIRST_QUEST_REWARD_LOLLIPOPS = 1000;
const NEW_YEAR_SECOND_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_SECOND_QUEST_REWARD_LOLLIPOPS = 1500;
const NEW_YEAR_THIRD_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_THIRD_QUEST_REWARD_LOLLIPOPS = 1700;
const NEW_YEAR_FOURTH_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_FOURTH_QUEST_REWARD_LOLLIPOPS = 2000;
const NEW_YEAR_FIFTH_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIFTH_QUEST_REWARD_LOLLIPOPS = 500;
const NEW_YEAR_FIFTH_QUEST_FIRST_LINE_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIFTH_QUEST_FIRST_LINE_REWARD_LOLLIPOPS = 1500;
const NEW_YEAR_FIFTH_QUEST_SECOND_LINE_REWARD_LOLLIPOPS = exports.NEW_YEAR_FIFTH_QUEST_SECOND_LINE_REWARD_LOLLIPOPS = 1500;
const NEW_YEAR_SIXTH_QUEST_REWARD_LOLLIPOPS = exports.NEW_YEAR_SIXTH_QUEST_REWARD_LOLLIPOPS = 2500;
const NEW_YEAR_SIXTH_QUEST_REWARD_ITEM_ID = exports.NEW_YEAR_SIXTH_QUEST_REWARD_ITEM_ID = 888;
},{}],"zua9":[function(require,module,exports) {
"use strict";

var _snowballs = require("./snowballs");
var _main = require("../../../../shared/events/newYear/main.config");
var _quests = require("../../../../shared/events/newYear/quests.config");
if (_main.EVENT_IS_ACTIVE) {
  new _snowballs.Snowballs();
  mp.events.add('entityStreamIn', entity => {
    if (entity.type !== 'ped' || !entity.getVariable('advancedPedName')) return;
    switch (entity.getVariable('advancedPedName')) {
      case _quests.NEW_YEAR_SANTA_NPC_NAME:
        {
          mp.game.invoke('0x44A0870B7E92D7C0', entity.handle, 0, false);
          break;
        }
      case _quests.NEW_YEAR_HOMELESS_NPC_NAME:
        {
          break;
        }
      case _quests.NEW_YEAR_BOLVANKA_NPC_NAME:
        {
          mp.game.invoke('0xEA47FE3719165B94', entity.handle, 'amb@world_human_bum_slumped@male@laying_on_right_side@idle_a', 'idle_a', 8, 8, -1, 1, 0, true, true, true);
          break;
        }
      case _quests.NEW_YEAR_MEGATRON_NPC_NAME:
        {
          mp.game.invoke('0x142A02425FF02BD9', entity.handle, "WORLD_HUMAN_AA_SMOKE", 0, false);
          break;
        }
      case _quests.NEW_YEAR_WORD_NPC_NAME:
        {
          break;
        }
      case _quests.NEW_YEAR_GALILEO_NPC_NAME:
        {
          break;
        }
      default:
        {
          break;
        }
    }
  });
}
},{"./snowballs":"lhDV","../../../../shared/events/newYear/main.config":"tE0d","../../../../shared/events/newYear/quests.config":"sE8r"}],"RqhX":[function(require,module,exports) {
"use strict";

require("./halloween");
require("./newYear");
},{"./halloween":"xqVl","./newYear":"zua9"}],"knjE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sound = exports.getPanEntity = exports.getPan = exports.Sound = void 0;
var _user = require("./user");
var _system = require("./system");
var _gui = require("./gui");
var _admin = require("./admin");
var _custom = require("./custom.event");
const localPlayer = mp.players.local;
const camera = mp.cameras.new("gameplay");
const browser = mp.browsers.new(`http://package/cef/sound.html`);
const getPanEntity = entity => {
  return getPan(entity.position, entity);
};
exports.getPanEntity = getPanEntity;
function easeInOutQuart(x) {
  return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;
}
if (typeof mp.storage.data.boomboxSound !== "number") mp.storage.data.boomboxSound = 100;
const getPan = (target_pos, entity) => {
  if (!target_pos) return 0;
  if (entity.type === 'vehicle' && mp.players.local.vehicle === entity) {
    return 0;
  }
  let cam_pos = mp.players.local.position;
  let cam_vector = camera.getDirection();
  let target_vector = {
    x: target_pos.x - cam_pos.x,
    y: target_pos.y - cam_pos.y,
    z: target_pos.z - cam_pos.z
  };
  let dx = target_vector.x * cam_vector.x + target_vector.y * cam_vector.y;
  let dy = Math.sqrt(cam_vector.x * cam_vector.x + cam_vector.y * cam_vector.y) * Math.sqrt(target_vector.x * target_vector.x + target_vector.y * target_vector.y);
  let s = cam_vector.x * (target_pos.y - cam_pos.y) - cam_vector.y * (target_pos.x - cam_pos.x);
  let a = 1;
  if (s > 0) a = -1;else if (!s) a = 0;
  let pan = Math.sqrt(1 - dx / dy * (dx / dy)) * a;
  if (_user.user.isAdminNow() && _admin.debug) _gui.gui.drawText3D(`pan: ${pan.toFixed(2)} \n cam_pos x: ${cam_pos.x.toFixed(1)}, y: ${cam_pos.y.toFixed(1)}, z: ${cam_pos.z.toFixed(1)}\n cam_vector x: ${cam_vector.x.toFixed(1)}, y: ${cam_vector.y.toFixed(1)}, z: ${cam_vector.z.toFixed(1)} \n target_vector x: ${target_vector.x.toFixed(1)}, y: ${target_vector.y.toFixed(1)}, z: ${target_vector.z.toFixed(1)}`, target_pos.x, target_pos.y, target_pos.z);
  return Math.sqrt(1 - dx / dy * (dx / dy)) * a;
};
exports.getPan = getPan;
class Sound {
  constructor(id, url, volume, data) {
    this.startpos = 0;
    this.started = false;
    this.onEndHandles = [];
    this._paused = false;
    this.id = id || _system.system.randomStr(6);
    this._url = url;
    this._volume = volume;
    this._max_dist = data.max_dist || 0;
    this._pos = data.pos || null;
    if (data !== null && data !== void 0 && data.entity) {
      let ent;
      if (data.entity.type === 'player') ent = mp.players.atRemoteId(data.entity.id);else if (data.entity.type === 'vehicle') ent = mp.vehicles.atRemoteId(data.entity.id);else if (data.entity.type === 'ped') ent = mp.peds.atRemoteId(data.entity.id);else if (data.entity.type === 'object') ent = mp.objects.atRemoteId(data.entity.id);
      if (ent) this._ent = ent;
    }
    Sound.list.set(this.id, this);
    setTimeout(() => {
      this.start();
    }, 10);
  }
  static get(id) {
    return this.list.get(id);
  }
  get pos() {
    let res;
    if (this._ent) {
      if (this.exists) res = this._ent.getCoords(true);
    } else res = this._pos;
    return res;
  }
  onEnd() {
    return new Promise(resolve => {
      this.onEndHandles.push(resolve);
    });
  }
  get exists() {
    if (!this._ent) return false;
    const type = this._ent.type;
    const ent = this._ent;
    if (type === 'player') return mp.players.exists(ent) && ent.handle;
    if (type === 'vehicle') return mp.vehicles.exists(ent) && ent.handle;
    if (type === 'object') return mp.objects.exists(ent) && ent.handle;
    if (type === 'ped') return mp.peds.exists(ent) && ent.handle;
    return !!ent.handle;
  }
  get pan() {
    if (!this._max_dist) return 0;
    return getPan(this.pos, this._ent);
  }
  get volume() {
    let mult = 1;
    if (this.id.indexOf('box_player_') === 0) mult = (typeof mp.storage.data.boomboxSound === "number" ? mp.storage.data.boomboxSound : 100) / 100;
    if (!this._max_dist) return this._volume * mult;
    if (!this.pos) return 0;
    let x = _system.system.distanceToPos(mp.players.local.position, this.pos) / this._max_dist;
    let q = 1 - easeInOutQuart(x);
    const inVehicleMultiplier = this._ent.type === 'vehicle' ? mp.players.local.vehicle === this._ent ? 1 : 0.5 : 1;
    return this._volume * q * mult * inVehicleMultiplier;
  }
  set volume(val) {
    this._volume = val;
  }
  get paused() {
    return this._paused;
  }
  set paused(val) {
    this._paused = val;
    _custom.CustomEvent.triggerCef('sound:setPaused', this.id, val);
  }
  destroy() {
    _custom.CustomEvent.triggerCef('sound:stop', this.id);
    Sound.list.delete(this.id);
  }
  start() {
    this.started = true;
    _custom.CustomEvent.triggerCef('sound:play', this.id, this._url, this.startpos, this.volume, this.pan);
  }
}
exports.Sound = Sound;
Sound.list = new Map();
const sound = exports.sound = {
  playSound: (id, url, volume) => {
    return new Sound(id, url, volume, {
      max_dist: 0
    });
  },
  playSoundEntity: (id, ent, url, volume, max_dist) => {
    return new Sound(id, url, volume, {
      max_dist,
      entity: {
        type: ent.type,
        id: ent.remoteId
      }
    });
  },
  playSoundPos: (id, pos, url, volume, max_dist) => {
    return new Sound(id, url, volume, {
      max_dist,
      pos
    });
  }
};
const updateSoundData = () => {
  if (!_user.user.login) return;
  let res = [];
  Sound.list.forEach(item => {
    res.push({
      id: item.id,
      pan: item.pan,
      volume: item.volume
    });
  });
  let resStr = JSON.stringify(res);
  if (resStr == dataString) return;
  dataString = resStr;
  _custom.CustomEvent.triggerCef('sound:data', res);
};
let dataString = JSON.stringify([]);
mp.events.add({
  audioError: id => Sound.get(id).onEndHandles.map(item => item(true)),
  audioFinish: id => Sound.get(id).onEndHandles.map(item => item(false))
});
let frame = 0;
mp.events.add('render', () => {
  frame++;
  if (frame == 2) {
    frame = 0;
    updateSoundData();
  }
});
},{"./user":"ggMw","./system":"pi2J","./gui":"bk91","./admin":"s4Xg","./custom.event":"py8h"}],"yXa0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MUSIC_PLAYER_MAX_VOLUME_DEFAULT = exports.MUSIC_PLAYER_DIST = exports.MUSIC_PLACE_DISTANCE_BETWEEN = exports.MUSIC_NEW_DOWNLOAD_ONE_TIME = exports.MUSIC_NEW_DOWNLOAD_MIN_BLOCK = void 0;
const MUSIC_PLAYER_DIST = exports.MUSIC_PLAYER_DIST = 15;
const MUSIC_PLAYER_MAX_VOLUME_DEFAULT = exports.MUSIC_PLAYER_MAX_VOLUME_DEFAULT = 0.7;
const MUSIC_NEW_DOWNLOAD_MIN_BLOCK = exports.MUSIC_NEW_DOWNLOAD_MIN_BLOCK = 2;
const MUSIC_PLACE_DISTANCE_BETWEEN = exports.MUSIC_PLACE_DISTANCE_BETWEEN = 20;
const MUSIC_NEW_DOWNLOAD_ONE_TIME = exports.MUSIC_NEW_DOWNLOAD_ONE_TIME = 4;
},{}],"jMsm":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _sound = require("./sound");
var _musicPlayer = require("../../shared/musicPlayer");
var _system = require("./system");
_custom.CustomEvent.registerServer('boxplayer:exit', id => {
  const item = _sound.Sound.get(`box_player_${id}`);
  if (item) item.destroy();
});
_custom.CustomEvent.registerServer('boxplayer:test', id => {
  const veh = mp.vehicles.atRemoteId(id);
  _sound.sound.playSoundEntity(`test`, veh, `http://127.0.0.1:3400/songs/0bHYVW240JigrvsuzsCCve.mp3`, 0.2, _musicPlayer.MUSIC_PLAYER_DIST);
});
mp.events.add('saveVoiceSettings', (_, value) => {
  mp.storage.data.boomboxSound = value;
});
_custom.CustomEvent.registerServer('boxplayer:data', (id, data) => {
  let item = _sound.Sound.get(`box_player_${id}`);
  if (item) item.destroy();
  if (!data) return;
  const entity = getEntity(data.remoteId, data.entityType);
  if (!entity) return;
  item = _sound.sound.playSoundEntity(`box_player_${id}`, entity, data.url, _musicPlayer.MUSIC_PLAYER_MAX_VOLUME_DEFAULT / 100 * data.volume, _musicPlayer.MUSIC_PLAYER_DIST);
  item.startpos = data.current;
  item.volume = _musicPlayer.MUSIC_PLAYER_MAX_VOLUME_DEFAULT / 100 * data.volume;
});
_custom.CustomEvent.registerServer('boxplayer:dataVolume', (id, volume) => {
  let item = _sound.Sound.get(`box_player_${id}`);
  if (item) item.volume = _musicPlayer.MUSIC_PLAYER_MAX_VOLUME_DEFAULT / 100 * volume;
});
const connectedMusicPlayers = {};
_custom.CustomEvent.registerServer('boxplayer:exit', id => {
  delete connectedMusicPlayers[id];
});
_custom.CustomEvent.registerServer('boxplayer:enter', id => {
  connectedMusicPlayers[id] = true;
});
function isVehicleSoundAlreadyEnabled(vehicle) {
  const id = `veh_${vehicle.getVariable('id')}`;
  return !!connectedMusicPlayers[id];
}
mp.events.add('entityStreamOut', entity => {
  if (!entity.isAVehicle()) {
    return;
  }
  if (isVehicleSoundAlreadyEnabled(entity)) {
    return;
  }
  _custom.CustomEvent.triggerServer('vehicle:sound:remove', [entity.remoteId]);
});
function checkVehiclesSounds() {
  const disableSoundVehiclesIds = [];
  const enableSoundVehiclesIds = [];
  mp.vehicles.forEachInStreamRange(vehicle => {
    if (!vehicle.getVariable('musicPlayerEnabled')) {
      return;
    }
    const dist = _system.system.distanceToPos(vehicle.position, mp.players.local.position);
    const soundEnabled = isVehicleSoundAlreadyEnabled(vehicle);
    if (soundEnabled && dist > _musicPlayer.MUSIC_PLAYER_DIST) {
      disableSoundVehiclesIds.push(vehicle.remoteId);
    } else if (!soundEnabled && dist <= _musicPlayer.MUSIC_PLAYER_DIST) {
      enableSoundVehiclesIds.push(vehicle.remoteId);
    }
  });
  if (enableSoundVehiclesIds.length > 0) {
    _custom.CustomEvent.triggerServer('vehicle:sound:add', enableSoundVehiclesIds);
  }
  if (disableSoundVehiclesIds.length > 0) {
    _custom.CustomEvent.triggerServer('vehicle:sound:remove', disableSoundVehiclesIds);
  }
}
setInterval(checkVehiclesSounds, 500);
function getEntity(remoteId, entityType) {
  switch (entityType) {
    case "object":
      return mp.objects.atRemoteId(remoteId);
    case "vehicle":
      return mp.vehicles.atRemoteId(remoteId);
    default:
      return null;
  }
}
},{"./custom.event":"py8h","./sound":"knjE","../../shared/musicPlayer":"yXa0","./system":"pi2J"}],"hpux":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DAMAGE_HEAD_BONE_INDEX = exports.DAMAGE_CONTROLLER_CONFIGS = void 0;
const DAMAGE_HEAD_BONE_INDEX = exports.DAMAGE_HEAD_BONE_INDEX = 20;
const DAMAGE_CONTROLLER_CONFIGS = exports.DAMAGE_CONTROLLER_CONFIGS = [{
  weapon: mp.game.joaat("weapon_assaultrifle"),
  damageMultipler: 0.5,
  maxDamage: 10
}, {
  weapon: 453432689,
  damageMultipler: 0.35,
  maxDamage: 9
}, {
  weapon: mp.game.joaat("weapon_pistol_mk2"),
  damageMultipler: 0.3,
  maxDamage: 9
}, {
  weapon: 1593441988,
  damageMultipler: 0.35,
  maxDamage: 7
}, {
  weapon: 584646201,
  damageMultipler: 0.3,
  maxDamage: 6
}, {
  weapon: mp.game.joaat("weapon_pistol50"),
  damageMultipler: 0.4,
  maxDamage: 20
}, {
  weapon: mp.game.joaat("weapon_gadgetpistol"),
  damageMultipler: 0.4,
  maxDamage: 75
}, {
  weapon: mp.game.joaat("weapon_snspistol"),
  damageMultipler: 0.3,
  maxDamage: 6
}, {
  weapon: mp.game.joaat("weapon_snspistol_mk2"),
  damageMultipler: 0.3,
  maxDamage: 6
}, {
  weapon: mp.game.joaat("weapon_heavypistol"),
  damageMultipler: 0.4,
  maxDamage: 12
}, {
  weapon: 137902532,
  damageMultipler: 0.4,
  maxDamage: 12
}, {
  weapon: mp.game.joaat("weapon_marksmanpistol"),
  damageMultipler: 0.2,
  maxDamage: 42
}, {
  weapon: mp.game.joaat("weapon_revolver"),
  damageMultipler: 0.36,
  maxDamage: 50
}, {
  weapon: mp.game.joaat("weapon_revolver_mk2"),
  damageMultipler: 0.2,
  maxDamage: 38
}, {
  weapon: mp.game.joaat("weapon_doubleaction"),
  damageMultipler: 0.3,
  maxDamage: 24
}, {
  weapon: 727643628,
  damageMultipler: 0.3,
  maxDamage: 9
}, {
  weapon: mp.game.joaat("weapon_navyrevolver"),
  damageMultipler: 0.3,
  maxDamage: 45
}, {
  weapon: 324215364,
  damageMultipler: 0.35,
  maxDamage: 7
}, {
  weapon: 736523883,
  damageMultipler: 0.35,
  maxDamage: 7
}, {
  weapon: 2024373456,
  damageMultipler: 0.35,
  maxDamage: 7
}, {
  weapon: mp.game.joaat("weapon_assaultsmg"),
  damageMultipler: 0.4,
  maxDamage: 8
}, {
  weapon: 171789620,
  damageMultipler: 0.45,
  maxDamage: 9
}, {
  weapon: mp.game.joaat("weapon_machinepistol"),
  damageMultipler: 0.3,
  maxDamage: 6
}, {
  weapon: mp.game.joaat("weapon_minismg"),
  damageMultipler: 0.3,
  maxDamage: 6
}, {
  weapon: 487013001,
  damageMultipler: 0.14,
  maxDamage: 30
}, {
  weapon: 1432025498,
  damageMultipler: 0.14,
  maxDamage: 30
}, {
  weapon: 2017895192,
  damageMultipler: 0.14,
  maxDamage: 30
}, {
  weapon: mp.game.joaat("weapon_assaultshotgun"),
  damageMultipler: 0.11,
  maxDamage: 20
}, {
  weapon: mp.game.joaat("weapon_bullpupshotgun"),
  damageMultipler: 0.25,
  maxDamage: 20
}, {
  weapon: mp.game.joaat("weapon_musket"),
  damageMultipler: 0.1,
  maxDamage: 75
}, {
  weapon: 984333226,
  damageMultipler: 0.22,
  maxDamage: 28
}, {
  weapon: mp.game.joaat("weapon_dbshotgun"),
  damageMultipler: 0.15,
  maxDamage: 25
}, {
  weapon: 317205821,
  damageMultipler: 0.13,
  maxDamage: 20
}, {
  weapon: 961495388,
  damageMultipler: 0.48,
  maxDamage: 14
}, {
  weapon: mp.game.joaat("weapon_carbinerifle"),
  damageMultipler: 0.4,
  maxDamage: 12
}, {
  weapon: mp.game.joaat("weapon_carbinerifle_mk2"),
  damageMultipler: 0.4,
  maxDamage: 12
}, {
  weapon: mp.game.joaat("weapon_advancedrifle"),
  damageMultipler: 0.35,
  maxDamage: 10
}, {
  weapon: mp.game.joaat("weapon_specialcarbine"),
  damageMultipler: 0.35,
  maxDamage: 10
}, {
  weapon: mp.game.joaat("weapon_specialcarbine_mk2"),
  damageMultipler: 0.4,
  maxDamage: 12
}, {
  weapon: 2132975508,
  damageMultipler: 0.35,
  maxDamage: 10
}, {
  weapon: mp.game.joaat("weapon_bullpuprifle_mk2"),
  damageMultipler: 0.3,
  maxDamage: 9
}, {
  weapon: 1649403952,
  damageMultipler: 0.3,
  maxDamage: 9
}, {
  weapon: mp.game.joaat("weapon_mg"),
  damageMultipler: 0.6,
  maxDamage: 18
}, {
  weapon: 2144741730,
  damageMultipler: 0.4,
  maxDamage: 17
}, {
  weapon: mp.game.joaat("weapon_combatmg_mk2"),
  damageMultipler: 0.4,
  maxDamage: 18
}, {
  weapon: 1627465347,
  damageMultipler: 0.3,
  maxDamage: 9
}, {
  weapon: 100416529,
  damageMultipler: 0.3,
  maxDamage: 30
}, {
  weapon: 205991906,
  damageMultipler: 0.15,
  maxDamage: 40
}, {
  weapon: 177293209,
  damageMultipler: 0
}, {
  weapon: mp.game.joaat("weapon_marksmanrifle"),
  damageMultipler: 0.25,
  maxDamage: 25
}, {
  weapon: 1785463520,
  damageMultipler: 0.2,
  maxDamage: 18
}, {
  weapon: mp.game.joaat("weapon_knife"),
  damageMultipler: 0.5,
  maxDamage: 30
}, {
  weapon: mp.game.joaat("weapon_flashlight"),
  damageMultipler: 0
}, {
  headShot: true,
  damageMultipler: 1.3
}, {
  weapon: mp.game.joaat("weapon_militaryrifle"),
  damageMultipler: 0.4,
  maxDamage: 12
}, {
  weapon: mp.game.joaat("weapon_bottle"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_crowbar"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_hammer"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_hatchet"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_knuckle"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_machete"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_wrench"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_battleaxe"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_poolcue"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_stone_hatchet"),
  damageMultipler: 0.5,
  maxDamage: 35
}, {
  weapon: mp.game.joaat("weapon_switchblade"),
  damageMultipler: 0.5,
  maxDamage: 35
}];
},{}],"WwQs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hitmarker = void 0;
var _custom = require("./custom.event");
class HitEntity {
  constructor(amount, position, kill) {
    this.count = 0;
    this.amount = amount;
    this.position = position;
    if (kill) this.kill = true;
  }
}
class PersonalHitEntity {
  constructor(amount) {
    this.count = 0;
    this.amount = amount;
  }
}
class HitClass {
  constructor() {
    this.list = [];
    this.personalList = [];
    this.render = () => {
      this.list.forEach(element => {
        const coords = mp.game.graphics.world3dToScreen2d(element.position.x, element.position.y, element.position.z + 1.4);
        if (!coords || isNaN(coords.x)) {
          let find = this.list.findIndex(el => el == element);
          this.list.splice(find, 1);
          return;
        }
        mp.game.graphics.drawText(element.kill ? "dead" : element.amount.toString(), [coords.x + 0.01 * element.count / 15, coords.y], {
          font: 2,
          centre: true,
          color: element.kill ? [255, 0, 0, 155 - element.count] : [255, 255, 255, 155 - element.count],
          scale: [0.4, 0.4],
          outline: true
        });
        element.count += 1;
        element.position.z += 0.01;
        if (element.count > 155) {
          let find = this.list.findIndex(el => el == element);
          this.list.splice(find, 1);
        }
      });
    };
    this.personalRender = () => {
      this.personalList.forEach(el => {
        mp.game.graphics.drawText(el.amount.toString(), [0.5 + 0.01 * el.count / 12, 0.95], {
          font: 2,
          centre: true,
          color: [255, 255, 255, 155],
          scale: [0.4, 0.4],
          outline: true
        });
        el.count += 1;
        if (el.count > 155) {
          let find = this.personalList.findIndex(element => el == element);
          this.personalList.splice(find, 1);
        }
      });
    };
    mp.events.add('render', this.render);
    mp.events.add('render', this.personalRender);
  }
  add(amount, position, kill) {
    var _mp$storage$data$aler;
    if (!((_mp$storage$data$aler = mp.storage.data.alertsEnable) !== null && _mp$storage$data$aler !== void 0 && _mp$storage$data$aler.hitMaker)) return;
    this.list.push(new HitEntity(amount, position, kill));
  }
  addPersonal(amount) {
    var _mp$storage$data$aler2;
    if (!((_mp$storage$data$aler2 = mp.storage.data.alertsEnable) !== null && _mp$storage$data$aler2 !== void 0 && _mp$storage$data$aler2.personalHitMarker)) return;
    this.personalList.push(new PersonalHitEntity(amount));
  }
}
const hitmarker = exports.hitmarker = new HitClass();
_custom.CustomEvent.registerServer('hitmarker:add', (position, damage) => {
  hitmarker.add(damage, position);
});
_custom.CustomEvent.registerServer('hitmarker:kill', pos => {
  hitmarker.add(0, pos, true);
});
},{"./custom.event":"py8h"}],"RJXt":[function(require,module,exports) {
"use strict";

var _user = require("./user");
var _damageController = require("../../shared/damageController");
var _custom = require("./custom.event");
var _system = require("./system");
var _savezone = require("./savezone");
var _hitMarker = require("./hitMarker");
const player = mp.players.local;
const DAMAGE_ENABLE_FROM_LEVEL = 2;
let lastAnticheatReportTime = 0;
mp.events.add('incomingDamage', (sourceEntity, sourcePlayer, targetEntity, weapon, boneIndex, damage) => {
  if (!sourcePlayer || !sourceEntity) return;
  if (!targetEntity) return;
  if (targetEntity.type !== 'player') return;
  if (targetEntity.type === 'player' && targetEntity.remoteId == player.remoteId && _user.user.isAdminNow()) return;
  if (targetEntity.remoteId == player.remoteId && Number(sourcePlayer.getVariable('level')) < DAMAGE_ENABLE_FROM_LEVEL) {
    return true;
  }
  if (targetEntity.remoteId == player.remoteId && _savezone.inSaveZone) {
    _custom.CustomEvent.triggerServer('srv:log', `${weapon} & ${mp.game.joaat('weapon_stungun')} | ${sourcePlayer.getVariable('fraction')}`);
    if (weapon !== mp.game.joaat('weapon_stungun') || ![1, 2, 3, 4, 6].includes(sourcePlayer.getVariable('fraction'))) return true;
  }
  if (targetEntity.remoteId == player.remoteId && player.getVariable('inZombiesDemolition')) {
    return true;
  }
  let multipler = 1;
  const configs = _damageController.DAMAGE_CONTROLLER_CONFIGS.filter(z => (!z.weapon || z.weapon === weapon) && (!z.headShot || boneIndex === _damageController.DAMAGE_HEAD_BONE_INDEX));
  let maxDamage = Math.min(9999999, ...configs.filter(q => q.maxDamage).map(q => q.maxDamage));
  configs.map(item => {
    if (!maxDamage || item.maxDamage < maxDamage) maxDamage = item.maxDamage;
    multipler *= item.damageMultipler;
  });
  let resDamage = damage * multipler;
  resDamage = Math.min(resDamage, maxDamage);
  if (targetEntity.remoteId === player.remoteId) {
    _custom.CustomEvent.triggerServer('damage:updateCombatBlock');
  }
  const damageResist = targetEntity.getVariable('damageResist');
  if (damageResist != null) {
    resDamage -= resDamage * damageResist;
  }
  if (resDamage !== damage) {
    resDamage = Math.trunc(resDamage);
    if (targetEntity.getHealth() + targetEntity.getArmour() - resDamage > 0) {
      targetEntity.applyDamageTo(resDamage, true);
      _custom.CustomEvent.triggerServer('hitmarker:damage', sourceEntity.remoteId, resDamage, targetEntity.getCoords(false));
      _hitMarker.hitmarker.addPersonal(resDamage);
      return true;
    }
  } else {
    _custom.CustomEvent.triggerServer('hitmarker:damage', sourceEntity.remoteId, damage, targetEntity.getCoords(false));
    _hitMarker.hitmarker.addPersonal(damage);
  }
  if (damage > 220 && _system.system.timestamp - lastAnticheatReportTime > 30) {
    _custom.CustomEvent.triggerServer('anticheat:detect', "weapon", `Подозрение на увеличенный урон. Нанесено ${resDamage}, native: ${damage}`);
    lastAnticheatReportTime = _system.system.timestamp;
  }
});
},{"./user":"ggMw","../../shared/damageController":"hpux","./custom.event":"py8h","./system":"pi2J","./savezone":"ehdN","./hitMarker":"WwQs"}],"OkNF":[function(require,module,exports) {
"use strict";

var _inventory = require("../../shared/inventory");
var _mining = require("../../shared/mining");
var _user = require("./user");
var _custom = require("./custom.event");
var _inrerriors = require("../../shared/inrerriors");
const player = mp.players.local;
let attachedMiningProps = new Map();
let attachedMiningPropMain = new Map();
_custom.CustomEvent.registerServer('mining:data', (id, int, cards, powers) => {
  if (!cards || !powers) clearMiningProps(id);else renderMiningProps(id, int, cards, powers);
});
setInterval(() => {
  if (!_user.user.login) return;
  attachedMiningPropMain.forEach((item, id) => {
    if (!item || !mp.objects.exists(item) || !item.handle || item.dimension !== player.dimension) clearMiningProps(id);
  });
}, 5000);
const clearMiningProps = (id, onlyAttach = false) => {
  if (attachedMiningProps.has(id)) {
    attachedMiningProps.get(id).map(item => {
      if (mp.objects.exists(item)) item.destroy();
    });
    attachedMiningProps.delete(id);
  }
  if (!onlyAttach) {
    if (attachedMiningPropMain.get(id)) attachedMiningPropMain.get(id).destroy();
    attachedMiningPropMain.delete(id);
  }
};
const renderMiningProps = (id, int, cards, powers) => {
  const pos = (0, _inrerriors.getInteriorHouseById)(int);
  const propItem = attachedMiningPropMain.has(id) ? attachedMiningPropMain.get(id) : mp.objects.new(mp.game.joaat('pp_fermam'), new mp.Vector3(pos.mining.x, pos.mining.y, pos.mining.z), {
    dimension: id,
    rotation: new mp.Vector3(0, 0, pos.mining.h)
  });
  if (!attachedMiningPropMain.has(id)) attachedMiningPropMain.set(id, propItem);
  clearMiningProps(id, true);
  let objects = [];
  const heading = propItem.getHeading();
  cards.map((q, i) => {
    if (!q) return;
    const cfgItem = _inventory.inventoryShared.get(q);
    if (!cfgItem) return;
    const prop = cfgItem.prop;
    const cfgOffset = _mining.MINING_VIDEOCARDS_ATTACHLIST.find(z => z.props.includes(prop));
    if (!cfgOffset) return;
    const offset = cfgOffset.attachPositions[i];
    if (!offset) return;
    const pos = propItem.getOffsetFromInWorldCoords(offset[0], offset[1], offset[2]);
    if (!pos) return;
    objects.push(mp.objects.new(mp.game.joaat(prop), new mp.Vector3(pos.x, pos.y, pos.z), {
      rotation: new mp.Vector3(90, 0, heading + 180),
      dimension: propItem.dimension
    }));
  });
  powers.map((q, i) => {
    if (!q) return;
    const cfgItem = _inventory.inventoryShared.get(q);
    if (!cfgItem) return;
    const prop = cfgItem.prop;
    const cfgOffset = _mining.MINING_VIDEOCARDS_ATTACHLIST.find(z => z.props.includes(prop));
    if (!cfgOffset) return;
    const offset = cfgOffset.attachPositions[i];
    if (!offset) return;
    const pos = propItem.getOffsetFromInWorldCoords(offset[0], offset[1], offset[2]);
    if (!pos) return;
    objects.push(mp.objects.new(mp.game.joaat(prop), new mp.Vector3(pos.x, pos.y, pos.z), {
      rotation: new mp.Vector3(0, 0, heading),
      dimension: propItem.dimension
    }));
  });
  attachedMiningProps.set(id, objects);
};
},{"../../shared/inventory":"vpPR","../../shared/mining":"CM8x","./user":"ggMw","./custom.event":"py8h","../../shared/inrerriors":"Ri0V"}],"X3nK":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _TextTimerBar = require("./bars/classes/TextTimerBar");
var _system = require("./system");
let currentBizWar = null;
let blip;
_custom.CustomEvent.registerServer('family:bizWar:readyStart', (name, time, battlePoint) => {
  if (currentBizWar) {
    if (!currentBizWar.readyStartBar || !currentBizWar.readyStartBar.exists()) currentBizWar.readyStart(time);
  } else {
    currentBizWar = new BizWarBattle(name, battlePoint);
    currentBizWar.readyStart(time);
  }
  blip = mp.blips.new(9, new mp.Vector3(battlePoint.x, battlePoint.y, battlePoint.z), {
    color: 3,
    rotation: 0,
    dimension: 0,
    radius: battlePoint.r
  });
});
_custom.CustomEvent.registerServer('family:bizWar:readyStop', () => {
  if (currentBizWar) {
    currentBizWar.endReadyStart();
  }
});
class BizWarBattle {
  constructor(name, _battlePoint) {
    this.name = name;
    this._battlePoint = _battlePoint;
    this.readyStartBar = null;
    this._readyStartTime = 0;
    this._readyStartTimeout = null;
  }
  readyStart(time) {
    if (!time && this._readyStartTime <= 0) return this.endReadyStart();
    if (time) this._readyStartTime = time;
    const title = `Подготовка к битве за бизнес: ${this.name}`;
    const text = _system.system.secondsToString(this._readyStartTime--);
    if (this.readyStartBar && this.readyStartBar.exists()) {
      this.readyStartBar.title = title;
      this.readyStartBar.text = text;
    } else this.readyStartBar = new _TextTimerBar.TextTimerBar(title, text);
    if (this._readyStartTimeout) clearTimeout(this._readyStartTimeout);
    this._readyStartTimeout = setTimeout(() => this.readyStart(), 1000);
  }
  endReadyStart() {
    if (this.readyStartBar && this.readyStartBar.exists()) this.readyStartBar.destroy();
    if (this._readyStartTimeout) {
      clearTimeout(this._readyStartTimeout);
      this._readyStartTimeout = null;
    }
    this.readyStartBar = null;
    if (blip) {
      blip.destroy();
      blip = null;
    }
  }
}
},{"./custom.event":"py8h","./bars/classes/TextTimerBar":"CjKg","./system":"pi2J"}],"lJER":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
let blip = null;
_custom.CustomEvent.registerServer('firefighter:deleteBlip', () => {
  if (blip) {
    blip.destroy();
    blip = null;
  }
});
_custom.CustomEvent.registerServer('firefighter:setBlip', position => {
  blip = mp.blips.new(1, position, {
    color: 1,
    name: 'Пожар',
    shortRange: false
  });
  mp.game.ui.setNewWaypoint(position.x, position.y);
});
},{"../../custom.event":"py8h"}],"J6uc":[function(require,module,exports) {
"use strict";

require("./firespots");
require("./extinguishing");
require("./job");
},{"./firespots":"eKKM","./extinguishing":"ae5U","./job":"lJER"}],"YFhv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WORK_VEHICLE_MODEL = exports.WORK_TYPE = exports.VEHICLE_SPAWN_POSITIONS = exports.VEHICLE_SPAWN_BLIP = exports.STATION_WORK_POSITIONS = exports.LARGE_WORK_POSITIONS = exports.INSULATOR_GAME = exports.HOME_WORK_POSITIONS = exports.EMPLOYER_NPC = exports.EMPLOYER_BLIP = exports.ELECTRICIAN_LEVELS = exports.DiagramMaps = exports.DRESS_CONFIG_MALE = exports.DRESS_CONFIG_FEMALE = exports.ADD_EXP = void 0;
const ELECTRICIAN_LEVELS = exports.ELECTRICIAN_LEVELS = [{
  index: 0,
  fromEXP: 0,
  description: "Ходите по станции и чините",
  salary: 0,
  payment: 50
}, {
  index: 1,
  fromEXP: 4000,
  description: "Катайте по домам и чините",
  salary: 1,
  payment: 1000
}, {
  index: 2,
  fromEXP: 10000,
  description: "Чините большие щетки",
  salary: 2,
  payment: 2000
}];
var WORK_TYPE;
(function (WORK_TYPE) {
  WORK_TYPE[WORK_TYPE["station"] = 0] = "station";
  WORK_TYPE[WORK_TYPE["houses"] = 1] = "houses";
  WORK_TYPE[WORK_TYPE["large"] = 2] = "large";
})(WORK_TYPE || (exports.WORK_TYPE = WORK_TYPE = {}));
const WORK_VEHICLE_MODEL = exports.WORK_VEHICLE_MODEL = "burrito";
const EMPLOYER_NPC = exports.EMPLOYER_NPC = {
  Position: new mp.Vector3(726.09, 135.78, 80.75),
  Heading: 341,
  Model: "s_m_m_dockwork_01",
  Name: "Старший электрик",
  Range: 10,
  Dimension: 0
};
const EMPLOYER_BLIP = exports.EMPLOYER_BLIP = {
  Sprite: 354,
  Color: 46,
  Position: EMPLOYER_NPC.Position,
  Name: "Электростанция"
};
const VEHICLE_SPAWN_POSITIONS = exports.VEHICLE_SPAWN_POSITIONS = [{
  Position: new mp.Vector3(660.44, 196.38, 94.99),
  Heading: 70
}, {
  Position: new mp.Vector3(658.95, 192.86, 95.01),
  Heading: 70
}, {
  Position: new mp.Vector3(657.62, 188.70, 94.99),
  Heading: 70
}, {
  Position: new mp.Vector3(656.63, 184.84, 94.97),
  Heading: 70
}, {
  Position: new mp.Vector3(655.53, 180.86, 94.95),
  Heading: 70
}, {
  Position: new mp.Vector3(654.05, 176.90, 94.95),
  Heading: 70
}, {
  Position: new mp.Vector3(652.74, 172.88, 94.94),
  Heading: 70
}, {
  Position: new mp.Vector3(651.26, 169.17, 94.95),
  Heading: 70
}, {
  Position: new mp.Vector3(649.22, 165.56, 94.99),
  Heading: 70
}, {
  Position: new mp.Vector3(648.39, 161.77, 94.98),
  Heading: 70
}, {
  Position: new mp.Vector3(634.13, 156.93, 95.64),
  Heading: 248
}, {
  Position: new mp.Vector3(635.91, 161.24, 95.66),
  Heading: 248
}, {
  Position: new mp.Vector3(637.41, 164.96, 95.75),
  Heading: 248
}, {
  Position: new mp.Vector3(638.52, 168.98, 95.87),
  Heading: 248
}, {
  Position: new mp.Vector3(639.72, 172.97, 95.90),
  Heading: 248
}, {
  Position: new mp.Vector3(641.22, 176.77, 95.92),
  Heading: 248
}, {
  Position: new mp.Vector3(643.07, 180.83, 95.82),
  Heading: 248
}, {
  Position: new mp.Vector3(625.83, 159.97, 96.26),
  Heading: 70
}, {
  Position: new mp.Vector3(627.03, 163.95, 96.21),
  Heading: 70
}, {
  Position: new mp.Vector3(628.32, 168.60, 96.29),
  Heading: 70
}, {
  Position: new mp.Vector3(630.58, 172.44, 96.29),
  Heading: 70
}, {
  Position: new mp.Vector3(631.91, 176.05, 96.33),
  Heading: 70
}, {
  Position: new mp.Vector3(633.08, 180.18, 96.39),
  Heading: 70
}, {
  Position: new mp.Vector3(634.31, 183.91, 96.39),
  Heading: 70
}, {
  Position: new mp.Vector3(627.70, 196.48, 97.28),
  Heading: 248
}, {
  Position: new mp.Vector3(626.13, 192.64, 97.31),
  Heading: 248
}, {
  Position: new mp.Vector3(624.92, 188.75, 97.37),
  Heading: 248
}, {
  Position: new mp.Vector3(623.49, 184.94, 97.45),
  Heading: 248
}, {
  Position: new mp.Vector3(622.31, 180.98, 97.41),
  Heading: 248
}, {
  Position: new mp.Vector3(620.73, 177.25, 97.43),
  Heading: 248
}, {
  Position: new mp.Vector3(619.23, 172.86, 97.42),
  Heading: 248
}, {
  Position: new mp.Vector3(617.45, 169.29, 97.47),
  Heading: 248
}, {
  Position: new mp.Vector3(616.42, 165.38, 97.42),
  Heading: 248
}, {
  Position: new mp.Vector3(615.00, 161.56, 97.42),
  Heading: 248
}];
const STATION_WORK_POSITIONS = exports.STATION_WORK_POSITIONS = [new mp.Vector3(711.54, 128.63, 79.75), new mp.Vector3(712.34, 121.71, 79.90), new mp.Vector3(705.94, 124.10, 79.90), new mp.Vector3(707.82, 128.91, 79.90), new mp.Vector3(714.37, 126.54, 79.90), new mp.Vector3(707.68, 108.75, 79.94), new mp.Vector3(704.67, 109.78, 79.94), new mp.Vector3(701.69, 110.83, 79.94), new mp.Vector3(697.67, 104.54, 79.75), new mp.Vector3(703.37, 102.44, 79.75), new mp.Vector3(681.43, 108.46, 79.91), new mp.Vector3(678.37, 109.56, 79.91), new mp.Vector3(675.30, 110.53, 79.91), new mp.Vector3(664.52, 112.35, 79.92), new mp.Vector3(658.75, 114.21, 79.92), new mp.Vector3(660.13, 123.72, 79.92), new mp.Vector3(663.09, 122.59, 79.92), new mp.Vector3(666.05, 121.47, 79.92), new mp.Vector3(670.08, 127.90, 79.95), new mp.Vector3(664.28, 129.93, 79.95), new mp.Vector3(676.93, 119.53, 79.94), new mp.Vector3(682.75, 117.72, 79.94), new mp.Vector3(679.56, 123.94, 79.95), new mp.Vector3(686.10, 121.67, 79.95), new mp.Vector3(687.85, 126.37, 79.95), new mp.Vector3(684.84, 128.13, 79.95), new mp.Vector3(681.22, 128.61, 79.95), new mp.Vector3(703.29, 119.92, 79.96), new mp.Vector3(709.03, 117.80, 79.96), new mp.Vector3(692.63, 142.97, 79.94), new mp.Vector3(686.88, 145.18, 79.94), new mp.Vector3(677.55, 148.95, 79.93), new mp.Vector3(670.70, 151.31, 79.93), new mp.Vector3(669.16, 146.83, 79.93), new mp.Vector3(671.86, 144.98, 79.93), new mp.Vector3(675.62, 144.58, 79.93), new mp.Vector3(690.79, 151.51, 79.96), new mp.Vector3(693.80, 150.37, 79.96), new mp.Vector3(696.81, 149.28, 79.96), new mp.Vector3(697.99, 158.61, 79.94), new mp.Vector3(692.23, 160.53, 79.94), new mp.Vector3(679.95, 153.49, 79.94), new mp.Vector3(674.23, 155.42, 79.94), new mp.Vector3(675.42, 164.48, 79.93), new mp.Vector3(678.44, 163.46, 79.93), new mp.Vector3(681.38, 162.20, 79.93), new mp.Vector3(685.43, 168.61, 79.95), new mp.Vector3(679.68, 170.85, 79.95), new mp.Vector3(693.81, 166.25, 79.95), new mp.Vector3(695.02, 168.80, 79.95), new mp.Vector3(700.21, 168.95, 79.95), new mp.Vector3(703.03, 163.06, 79.95), new mp.Vector3(703.91, 165.64, 79.95)];
const HOME_WORK_POSITIONS = exports.HOME_WORK_POSITIONS = [new mp.Vector3(-1262.38, 524.49, 95.78), new mp.Vector3(-1175.62, 438.58, 85.85), new mp.Vector3(-1116.94, 484.86, 81.16), new mp.Vector3(-967.70, 423.36, 78.97), new mp.Vector3(-906.64, 588.04, 99.99), new mp.Vector3(-811.24, 421.09, 90.56), new mp.Vector3(-687.22, 431.74, 105.84), new mp.Vector3(-633.51, 396.96, 100.23), new mp.Vector3(-354.84, 468.91, 111.49), new mp.Vector3(-197.36, 407.31, 110.11), new mp.Vector3(-525.05, 576.96, 120.22), new mp.Vector3(-298.58, 633.60, 174.69), new mp.Vector3(-127.51, 507.74, 142.28), new mp.Vector3(-282.65, 384.05, 109.83), new mp.Vector3(-441.01, 364.52, 104.15), new mp.Vector3(-753.44, 622.46, 141.66), new mp.Vector3(-772.10, 667.65, 144.50), new mp.Vector3(-861.43, 695.79, 147.99), new mp.Vector3(-947.64, 683.39, 152.58), new mp.Vector3(-1003.57, 684.31, 159.90), new mp.Vector3(-1242.39, 629.60, 139.80), new mp.Vector3(-1366.41, 608.95, 132.90), new mp.Vector3(-1046.82, -1006.36, 1.15), new mp.Vector3(-1072.78, -1049.46, 1.15), new mp.Vector3(-1132.89, -1056.64, 1.15), new mp.Vector3(-1173.47, -1106.82, 1.66), new mp.Vector3(-1124.97, -1164.55, 1.36), new mp.Vector3(-1115.09, -1217.82, 1.52), new mp.Vector3(-1035.55, -1124.74, 1.16), new mp.Vector3(-1016.76, -1156.43, 1.16), new mp.Vector3(-978.36, -1119.53, 1.17), new mp.Vector3(-983.34, -1100.58, 1.17), new mp.Vector3(-936.79, -1090.78, 1.17), new mp.Vector3(-953.78, -1060.47, 1.17), new mp.Vector3(-896.88, -1004.62, 1.15), new mp.Vector3(-911.80, -977.30, 1.15), new mp.Vector3(-943.16, -918.41, 1.15), new mp.Vector3(-46.51, -1791.23, 26.44), new mp.Vector3(-10.09, -1868.84, 23.31), new mp.Vector3(46.87, -1854.34, 21.83), new mp.Vector3(60.78, -1923.36, 20.65), new mp.Vector3(127.69, -1849.39, 23.90), new mp.Vector3(166.55, -1868.12, 23.07), new mp.Vector3(211.25, -1898.24, 23.42), new mp.Vector3(248.36, -1943.01, 23.29), new mp.Vector3(319.75, -1941.31, 23.65), new mp.Vector3(363.42, -1899.62, 23.80), new mp.Vector3(396.65, -1868.38, 25.32), new mp.Vector3(495.97, -1831.28, 27.51), new mp.Vector3(461.58, -1765.76, 27.69), new mp.Vector3(482.70, -1701.75, 28.36), new mp.Vector3(334.49, -1736.40, 28.38), new mp.Vector3(1320.92, -1513.89, 50.41), new mp.Vector3(1393.74, -1511.59, 57.04), new mp.Vector3(1293.24, -1746.19, 52.88), new mp.Vector3(1901.09, 3879.97, 31.64), new mp.Vector3(1851.94, 3856.83, 32.23), new mp.Vector3(1741.26, 3883.38, 33.73), new mp.Vector3(1390.38, 3646.11, 33.29), new mp.Vector3(1410.43, 3612.51, 34.03), new mp.Vector3(1646.13, 3814.67, 33.95), new mp.Vector3(1708.62, 3789.70, 33.76), new mp.Vector3(1737.05, 3695.98, 33.46), new mp.Vector3(24.68, 6602.69, 31.47), new mp.Vector3(-23.27, 6554.95, 30.93), new mp.Vector3(-152.43, 6400.87, 30.55), new mp.Vector3(-237.56, 6424.07, 30.46), new mp.Vector3(-285.92, 6336.82, 31.49), new mp.Vector3(-435.63, 6272.03, 29.07), new mp.Vector3(-384.44, 6239.52, 30.53), new mp.Vector3(-348.09, 6223.61, 30.52), new mp.Vector3(-367.37, 6215.88, 30.58), new mp.Vector3(-51.98, 6650.16, 29.04), new mp.Vector3(-35.72, 6577.86, 30.45), new mp.Vector3(-27.65, 6596.81, 30.86), new mp.Vector3(0.65, 6612.29, 30.88)];
const LARGE_WORK_POSITIONS = exports.LARGE_WORK_POSITIONS = [new mp.Vector3(2046.59, 3676.11, 33.59), new mp.Vector3(2056.64, 3689.12, 33.59), new mp.Vector3(2053.25, 3687.49, 33.59), new mp.Vector3(2055.18, 3684.04, 33.59), new mp.Vector3(2043.76, 3681.53, 33.59), new mp.Vector3(2850.43, 3440.92, 49.92), new mp.Vector3(2287.05, 2948.07, 45.75), new mp.Vector3(2279.93, 2971.02, 45.75), new mp.Vector3(2266.57, 2967.38, 45.75), new mp.Vector3(2280.13, 2965.05, 45.75), new mp.Vector3(2266.58, 2973.29, 45.75), new mp.Vector3(2107.32, 2338.55, 93.29), new mp.Vector3(2091.25, 2330.26, 93.29), new mp.Vector3(2094.03, 2320.52, 93.29), new mp.Vector3(2137.67, 1949.88, 92.93), new mp.Vector3(2136.67, 1934.65, 92.93), new mp.Vector3(2278.94, 1718.19, 67.04), new mp.Vector3(2302.11, 1719.94, 67.04), new mp.Vector3(2463.14, 1481.45, 35.20), new mp.Vector3(2459.24, 1460.62, 35.20), new mp.Vector3(2475.32, 1460.55, 35.20), new mp.Vector3(535.62, -1602.11, 27.92), new mp.Vector3(540.16, -1592.60, 28.11), new mp.Vector3(550.46, -1600.90, 27.77), new mp.Vector3(545.94, -1610.39, 27.77), new mp.Vector3(560.02, -1594.73, 27.37), new mp.Vector3(1403.98, 2122.55, 104.06), new mp.Vector3(556.16, -1591.67, 27.37), new mp.Vector3(734.53, 2576.50, 74.34), new mp.Vector3(1344.02, 6388.19, 32.41), new mp.Vector3(1344.12, 6382.20, 32.41), new mp.Vector3(1351.75, 6382.03, 32.21), new mp.Vector3(1351.44, 6388.13, 32.21)];
const ADD_EXP = exports.ADD_EXP = 4;
const DRESS_CONFIG_MALE = exports.DRESS_CONFIG_MALE = [[3, 66, 0], [8, 15, 0], [11, 89, 2], [4, 89, 19], [6, 12, 0], [100, 145, 1]];
const DRESS_CONFIG_FEMALE = exports.DRESS_CONFIG_FEMALE = [[3, 72, 0], [8, 2, 0], [11, 88, 0], [4, 93, 7], [6, 59, 0], [100, 144, 1]];
const DiagramMaps = exports.DiagramMaps = [[{
  plus: true,
  active: true,
  next: 1,
  direction: "r"
}, {
  plus: false,
  active: false,
  next: 5,
  direction: "b"
}, {
  plus: false,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false,
  next: 6,
  direction: "r"
}, {
  plus: false,
  active: false,
  next: [7, 10],
  direction: ["r", "b"]
}, {
  plus: true,
  active: false,
  next: 11,
  direction: "b"
}, {
  plus: false,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false,
  next: [14, 11],
  direction: ["b", "r"]
}, {
  plus: false,
  active: false,
  next: 15,
  direction: "b"
}, {
  plus: true,
  active: false
}, {
  plus: false,
  active: false
}, {
  plus: false,
  active: false,
  next: 15,
  direction: "r"
}, {
  plus: true,
  active: false
}], [{
  plus: true,
  active: true,
  next: 4,
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: false,
  active: false,
  next: 8,
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false,
  next: 12,
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: false,
  active: false,
  next: 13,
  direction: 'r'
}, {
  plus: true,
  active: false,
  next: 14,
  direction: 'r'
}, {
  plus: false,
  active: false,
  next: 15,
  direction: 'r'
}, {
  plus: true,
  active: false
}],, [{
  plus: true,
  active: true,
  next: [1, 4],
  direction: ['r', 'b']
}, {
  plus: false,
  active: false,
  next: [2, 5],
  direction: ['r', 'b']
}, {
  plus: true,
  active: false,
  next: [6],
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: false,
  active: false,
  next: [5, 8],
  direction: ['r', 'b']
}, {
  plus: true,
  active: false,
  next: [6, 9],
  direction: ["r", "b"]
}, {
  plus: false,
  active: false,
  next: 10,
  direction: 'b'
}, {
  plus: false,
  active: false
}, {
  plus: true,
  active: false,
  next: [9, 12],
  direction: ["r", "b"]
}, {
  plus: false,
  active: false,
  next: [10, 13],
  direction: ["r", "b"]
}, {
  plus: true,
  active: false,
  next: 14,
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: false,
  active: false,
  next: 13,
  direction: 'r'
}, {
  plus: true,
  active: false,
  next: 14,
  direction: 'r'
}, {
  plus: false,
  active: false,
  next: 15,
  direction: 'r'
}, {
  plus: true,
  active: false
}], [{
  plus: true,
  active: true,
  next: 1,
  direction: 'r'
}, {
  plus: false,
  active: false,
  next: [2, 5],
  direction: ['r', 'b']
}, {
  plus: true,
  active: false,
  next: [3, 6],
  direction: ['r', 'b']
}, {
  plus: false,
  active: false,
  next: 7,
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false,
  next: 6,
  direction: 'r'
}, {
  plus: false,
  active: false,
  next: 7,
  direction: 'r'
}, {
  plus: true,
  active: false,
  next: 11,
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: false,
  active: false
}, {
  plus: false,
  active: false,
  next: 15,
  direction: 'b'
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}, {
  plus: true,
  active: false
}], [{
  plus: true,
  active: true,
  next: [1, 4],
  direction: ['r', 'b']
}, {
  plus: false,
  active: false,
  next: [2, 5],
  direction: ['r', 'b']
}, {
  plus: true,
  active: false,
  next: [3, 6],
  direction: ['r', 'b']
}, {
  plus: false,
  active: false,
  next: 7,
  direction: 'b'
}, {
  plus: false,
  active: false,
  next: [5, 8],
  direction: ['r', 'b']
}, {
  plus: true,
  active: false,
  next: [6, 9],
  direction: ['r', 'b']
}, {
  plus: false,
  active: false,
  next: 7,
  direction: 'r'
}, {
  plus: true,
  active: false,
  next: 11,
  direction: 'b'
}, {
  plus: true,
  active: false,
  next: [9, 12],
  direction: ['r', 'b']
}, {
  plus: false,
  active: false,
  next: 13,
  direction: 'b'
}, {
  plus: false,
  active: false
}, {
  plus: false,
  active: false,
  next: 15,
  direction: 'b'
}, {
  plus: false,
  active: false,
  next: 13,
  direction: 'r'
}, {
  plus: true,
  active: false,
  next: 14,
  direction: 'r'
}, {
  plus: false,
  active: false,
  next: 15,
  direction: 'r'
}, {
  plus: true,
  active: false
}]];
const INSULATOR_GAME = exports.INSULATOR_GAME = [{
  totalWatt: 220,
  insulators: [{
    watt: 200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 20,
    isDrag: false,
    onPosition: null
  }, {
    watt: 20,
    isDrag: false,
    onPosition: null
  }, {
    watt: 40,
    isDrag: false,
    onPosition: null
  }, {
    watt: 20,
    isDrag: false,
    onPosition: null
  }, {
    watt: 180,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 380,
  insulators: [{
    watt: 360,
    isDrag: false,
    onPosition: null
  }, {
    watt: 20,
    isDrag: false,
    onPosition: null
  }, {
    watt: 340,
    isDrag: false,
    onPosition: null
  }, {
    watt: 40,
    isDrag: false,
    onPosition: null
  }, {
    watt: 320,
    isDrag: false,
    onPosition: null
  }, {
    watt: 60,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 800,
  insulators: [{
    watt: 400,
    isDrag: false,
    onPosition: null
  }, {
    watt: 430,
    isDrag: false,
    onPosition: null
  }, {
    watt: 350,
    isDrag: false,
    onPosition: null
  }, {
    watt: 450,
    isDrag: false,
    onPosition: null
  }, {
    watt: 399,
    isDrag: false,
    onPosition: null
  }, {
    watt: 401,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 1000,
  insulators: [{
    watt: 653,
    isDrag: false,
    onPosition: null
  }, {
    watt: 347,
    isDrag: false,
    onPosition: null
  }, {
    watt: 499,
    isDrag: false,
    onPosition: null
  }, {
    watt: 501,
    isDrag: false,
    onPosition: null
  }, {
    watt: 505,
    isDrag: false,
    onPosition: null
  }, {
    watt: 495,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 1200,
  insulators: [{
    watt: 500,
    isDrag: false,
    onPosition: null
  }, {
    watt: 700,
    isDrag: false,
    onPosition: null
  }, {
    watt: 650,
    isDrag: false,
    onPosition: null
  }, {
    watt: 550,
    isDrag: false,
    onPosition: null
  }, {
    watt: 700,
    isDrag: false,
    onPosition: null
  }, {
    watt: 499,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 1500,
  insulators: [{
    watt: 750,
    isDrag: false,
    onPosition: null
  }, {
    watt: 750,
    isDrag: false,
    onPosition: null
  }, {
    watt: 600,
    isDrag: false,
    onPosition: null
  }, {
    watt: 900,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2,
    isDrag: false,
    onPosition: null
  }, {
    watt: 145,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 1700,
  insulators: [{
    watt: 850,
    isDrag: false,
    onPosition: null
  }, {
    watt: 750,
    isDrag: false,
    onPosition: null
  }, {
    watt: 600,
    isDrag: false,
    onPosition: null
  }, {
    watt: 800,
    isDrag: false,
    onPosition: null
  }, {
    watt: 800,
    isDrag: false,
    onPosition: null
  }, {
    watt: 850,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 2000,
  insulators: [{
    watt: 850,
    isDrag: false,
    onPosition: null
  }, {
    watt: 11,
    isDrag: false,
    onPosition: null
  }, {
    watt: 600,
    isDrag: false,
    onPosition: null
  }, {
    watt: 800,
    isDrag: false,
    onPosition: null
  }, {
    watt: 800,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1150,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 2500,
  insulators: [{
    watt: 850,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 600,
    isDrag: false,
    onPosition: null
  }, {
    watt: 800,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1300,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1150,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 3000,
  insulators: [{
    watt: 1100,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 600,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1900,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1899,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1901,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 3500,
  insulators: [{
    watt: 1100,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2905,
    isDrag: false,
    onPosition: null
  }, {
    watt: 250,
    isDrag: false,
    onPosition: null
  }, {
    watt: 349,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2400,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2499,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 3750,
  insulators: [{
    watt: 1700,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2905,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2050,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1999,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2001,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 3900,
  insulators: [{
    watt: 1700,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2905,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2050,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2001,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 4000,
  insulators: [{
    watt: 31,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2905,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2050,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 3969,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2001,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 4500,
  insulators: [{
    watt: 4444,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2905,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2050,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1200,
    isDrag: false,
    onPosition: null
  }, {
    watt: 56,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2250,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 4610,
  insulators: [{
    watt: 4444,
    isDrag: false,
    onPosition: null
  }, {
    watt: 163,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1300,
    isDrag: false,
    onPosition: null
  }, {
    watt: 3333,
    isDrag: false,
    onPosition: null
  }, {
    watt: 4447,
    isDrag: false,
    onPosition: null
  }, {
    watt: 2250,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 4860,
  insulators: [{
    watt: 4444,
    isDrag: false,
    onPosition: null
  }, {
    watt: 260,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1300,
    isDrag: false,
    onPosition: null
  }, {
    watt: 4666,
    isDrag: false,
    onPosition: null
  }, {
    watt: 4660,
    isDrag: false,
    onPosition: null
  }, {
    watt: 4600,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 4900,
  insulators: [{
    watt: 3300,
    isDrag: false,
    onPosition: null
  }, {
    watt: 260,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1300,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1601,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1603,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1600,
    isDrag: false,
    onPosition: null
  }]
}, {
  totalWatt: 4950,
  insulators: [{
    watt: 3300,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1650,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1300,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1601,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1603,
    isDrag: false,
    onPosition: null
  }, {
    watt: 1600,
    isDrag: false,
    onPosition: null
  }]
}];
const VEHICLE_SPAWN_BLIP = exports.VEHICLE_SPAWN_BLIP = {
  sprite: 756,
  color: 83,
  name: "Ваш рабочий транспорт"
};
},{}],"YTsH":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _config = require("../../../../shared/jobs/electrician/config");
var _checkpoints = require("../../checkpoints");
var _gui = require("../../gui");
var _user = require("../../user");
let state = {
  active: false
};
let spawnVehicleMarker,
  spawnVehicleBlip,
  vehicleID = null;
function CreateActivePoint(type, status) {
  let arr, game;
  if (type === _config.WORK_TYPE.station) {
    arr = _config.STATION_WORK_POSITIONS;
    game = "wires";
  } else if (type === _config.WORK_TYPE.houses) {
    arr = _config.HOME_WORK_POSITIONS;
    game = "insulator";
  } else if (type === _config.WORK_TYPE.large) {
    arr = _config.LARGE_WORK_POSITIONS;
    game = "diagram";
  }
  return _checkpoints.colshapes.new(arr[status], "Взаимодействие с щитком", () => {
    OpenGame(game);
  }, {});
}
function CreateActiveBlip(type, status) {
  let arr;
  if (type === _config.WORK_TYPE.station) {
    arr = _config.STATION_WORK_POSITIONS;
  } else if (type === _config.WORK_TYPE.houses) {
    arr = _config.HOME_WORK_POSITIONS;
  } else if (type === _config.WORK_TYPE.large) {
    arr = _config.LARGE_WORK_POSITIONS;
  }
  const Blip = mp.blips.new(1, arr[status], {
    name: "Щиток",
    scale: 0.75,
    color: 73
  });
  mp.game.invoke('0x4F7D8A9BFB0B43E9', Blip.handle, true);
  return Blip;
}
function OpenGame(component) {
  _gui.gui.setGui("electriciangames");
  _custom.CustomEvent.triggerCef('electricianGames:setComponent', component);
}
mp.events.add('electrician:gameComplete', success => {
  let arr;
  if (state.type === _config.WORK_TYPE.station) {
    arr = _config.STATION_WORK_POSITIONS;
  } else if (state.type === _config.WORK_TYPE.houses) {
    arr = _config.HOME_WORK_POSITIONS;
  } else if (state.type === _config.WORK_TYPE.large) {
    arr = _config.LARGE_WORK_POSITIONS;
  }
  if (success) {
    if (state.status === arr.length - 1) {
      state.status = 0;
    } else {
      state.status++;
    }
    state.activePoint.destroy();
    state.blip.destroy();
    state.forEXP++;
    if (state.forEXP === _config.ADD_EXP) {
      state.forEXP = 0;
      _custom.CustomEvent.triggerServer('electrician:addExp');
    }
    let status;
    if (state.type === _config.WORK_TYPE.station) {
      status = state.status;
    } else {
      status = Math.floor(Math.random() * arr.length);
    }
    state.activePoint = CreateActivePoint(state.type, status);
    state.blip = CreateActiveBlip(state.type, status);
    _custom.CustomEvent.triggerServer('electrician:payment', state.sca);
  } else {
    _user.user.notify("Вас ударило током");
    _custom.CustomEvent.triggerServer('electrician:damage');
  }
});
mp.events.add('playerEnterVehicle', (vehicle, seat) => {
  if (!vehicle.getVariable('electrician') || vehicle.getVariable('electrician') !== _user.user.id || !vehicleID || vehicle.remoteId !== vehicleID || !spawnVehicleBlip || !spawnVehicleMarker) return;
  spawnVehicleMarker.destroy();
  spawnVehicleBlip.destroy();
  vehicleID = null;
  spawnVehicleMarker = undefined;
  spawnVehicleBlip = undefined;
});
_custom.CustomEvent.registerServer('electrician:start', (type, sca, vehID, vehPos) => {
  if (vehID && vehPos) {
    vehPos.z += 3;
    vehicleID = vehID;
    spawnVehicleMarker = mp.markers.new(0, vehPos, 1, {
      color: [202, 0, 42, 255]
    });
    spawnVehicleBlip = mp.blips.new(_config.VEHICLE_SPAWN_BLIP.sprite, vehPos, {
      color: _config.VEHICLE_SPAWN_BLIP.color,
      name: _config.VEHICLE_SPAWN_BLIP.name
    });
    _user.user.notify("Ваш рабочий транспорт ожидает вас");
  }
  let arr;
  if (type === _config.WORK_TYPE.station) {
    arr = _config.STATION_WORK_POSITIONS;
  } else if (type === _config.WORK_TYPE.houses) {
    arr = _config.HOME_WORK_POSITIONS;
  } else if (type === _config.WORK_TYPE.large) {
    arr = _config.LARGE_WORK_POSITIONS;
  }
  let status;
  if (state.type === _config.WORK_TYPE.station) {
    status = 0;
  } else {
    status = Math.floor(Math.random() * arr.length);
  }
  state = {
    active: true,
    type,
    status: 0,
    activePoint: CreateActivePoint(type, status),
    blip: CreateActiveBlip(type, status),
    forEXP: 0,
    sca
  };
});
_custom.CustomEvent.registerServer('electrician:openEmployer', exp => {
  const type = state.active === false ? null : state.type;
  _gui.gui.setGui('electrician');
  _custom.CustomEvent.triggerCef('electrician:employerLoad', exp, type);
});
mp.events.add('electrician:finish', () => {
  if (spawnVehicleMarker && spawnVehicleBlip && vehicleID) {
    spawnVehicleMarker.destroy();
    spawnVehicleBlip.destroy();
    vehicleID = null;
    spawnVehicleMarker = undefined;
    spawnVehicleBlip = undefined;
  }
  state.activePoint.destroy();
  state.blip.destroy();
  state = {
    active: false
  };
  _custom.CustomEvent.triggerServer('electrician:finishWork');
});
},{"../../custom.event":"py8h","../../../../shared/jobs/electrician/config":"YFhv","../../checkpoints":"XCJl","../../gui":"bk91","../../user":"ggMw"}],"Gl3h":[function(require,module,exports) {
"use strict";

require("./job");
},{"./job":"YTsH"}],"jJZ4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WORK_VEHICLE = exports.VEHICLE_SPAWNS = exports.STOPS_FOR_EXP = exports.PED_MODELS = exports.HALT = exports.EMPLOYER_NPC = exports.EMPLOYER_BLIP = exports.DRESS_CONFIG_MALE = exports.DRESS_CONFIG_FEMALE = exports.BUS_WAYS = exports.BUS_STOPS = exports.BUS_LEVELS = void 0;
const WORK_VEHICLE = exports.WORK_VEHICLE = {
  color: [0, 0, 0, 0, 0, 0]
};
const PED_MODELS = exports.PED_MODELS = ["csb_prologuedriver", "ig_prolsec_02", "s_m_m_snowcop_01", "a_m_o_soucent_03", "ig_talina", "ig_chengsr", "mp_m_forgery_01", "ig_brad", "g_m_m_chiboss_01", "g_m_m_chigoon_01"];
const HALT = exports.HALT = {
  blipSprite: 1,
  blipColor: 73,
  blipName: "Остановка",
  colshapeRange: 5,
  markerScale: 5,
  markerColor: [241, 203, 88, 255]
};
const EMPLOYER_NPC = exports.EMPLOYER_NPC = {
  Position: new mp.Vector3(436.30, -627.69, 28.71),
  Heading: 85,
  Model: "s_m_y_airworker",
  Name: "Директор вокзала",
  Range: 10,
  Dimension: 0
};
const EMPLOYER_BLIP = exports.EMPLOYER_BLIP = {
  Sprite: 513,
  Color: 46,
  Position: EMPLOYER_NPC.Position,
  Name: "Автобусный вокзал"
};
const STOPS_FOR_EXP = exports.STOPS_FOR_EXP = 1;
const BUS_LEVELS = exports.BUS_LEVELS = [{
  index: 0,
  fromEXP: 0,
  description: "Ездите и подбирайте пассажиров",
  salary: 0,
  vehicleModel: 'bus',
  payment: 195
}, {
  index: 1,
  fromEXP: 1000,
  description: "Ездите и подбирайте пассажиров",
  salary: 1,
  vehicleModel: 'bus',
  payment: 220
}, {
  index: 2,
  fromEXP: 2000,
  description: "Ездите и подбирайте пассажиров",
  salary: 2,
  vehicleModel: 'coach',
  payment: 270
}, {
  index: 3,
  fromEXP: 5000,
  description: "Ездите и подбирайте пассажиров",
  salary: 3,
  vehicleModel: 'bus',
  payment: 350
}, {
  index: 4,
  fromEXP: 10000,
  description: "Ездите и подбирайте пассажиров",
  salary: 4,
  vehicleModel: 'airbus',
  payment: 500
}];
const DRESS_CONFIG_MALE = exports.DRESS_CONFIG_MALE = [[3, 11, 0], [8, 15, 0], [11, 95, 2], [4, 24, 0], [6, 10, 0], [102, 2, 0]];
const DRESS_CONFIG_FEMALE = exports.DRESS_CONFIG_FEMALE = [[3, 3, 0], [8, 38, 2], [11, 25, 10], [4, 7, 0], [6, 0, 0]];
const VEHICLE_SPAWNS = exports.VEHICLE_SPAWNS = [{
  Position: new mp.Vector3(418.11, -633.54, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(418.37, -638.65, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(418.54, -644.22, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(418.55, -649.44, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(418.37, -654.70, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(395.92, -660.64, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(395.93, -654.98, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(395.91, -649.52, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(396.47, -644.20, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(396.24, -638.65, 28.50),
  Heading: 270
}, {
  Position: new mp.Vector3(406.84, -633.19, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(406.97, -638.69, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(406.38, -644.11, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(406.23, -649.71, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(407.27, -655.01, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(431.42, -599.70, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(430.96, -605.28, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(429.92, -610.62, 28.50),
  Heading: 85
}, {
  Position: new mp.Vector3(430.79, -616.11, 28.50),
  Heading: 85
}];
const BUS_STOPS = exports.BUS_STOPS = [{
  Position: new mp.Vector3(306.68, -766.02, 29.21),
  NPCPositions: [{
    Position: new mp.Vector3(304.86, -763.99, 29.31),
    Heading: 244
  }, {
    Position: new mp.Vector3(304.10, -766.25, 29.31),
    Heading: 244
  }]
}, {
  Position: new mp.Vector3(114.37, -785.05, 31.35),
  NPCPositions: [{
    Position: new mp.Vector3(114.42, -781.69, 31.41),
    Heading: 263
  }, {
    Position: new mp.Vector3(116.53, -782.21, 31.39),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-505.04, -667.71, 33.01),
  NPCPositions: [{
    Position: new mp.Vector3(-503.93, -670.34, 33.08),
    Heading: 338
  }, {
    Position: new mp.Vector3(-505.88, -670.79, 33.11),
    Heading: 338
  }, {
    Position: new mp.Vector3(-507.46, -670.46, 33.13),
    Heading: 338
  }]
}, {
  Position: new mp.Vector3(-740.67, -751.18, 26.73),
  NPCPositions: [{
    Position: new mp.Vector3(-738.32, -749.66, 26.91),
    Heading: 90
  }, {
    Position: new mp.Vector3(-738.50, -751.06, 26.83),
    Heading: 79
  }]
}, {
  Position: new mp.Vector3(-558.13, -845.03, 27.55),
  NPCPositions: [{
    Position: new mp.Vector3(-557.04, -848.75, 27.69),
    Heading: 263
  }, {
    Position: new mp.Vector3(-559.55, -848.55, 27.44),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-249.25, -882.93, 30.58),
  NPCPositions: [{
    Position: new mp.Vector3(-248.68, -886.56, 30.58),
    Heading: 263
  }, {
    Position: new mp.Vector3(-251.39, -886.17, 30.67),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-173.34, -819.87, 31.03),
  NPCPositions: [{
    Position: new mp.Vector3(-175.68, -820.00, 31.10),
    Heading: 263
  }, {
    Position: new mp.Vector3(-175.03, -817.15, 31.18),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-108.10, -1688.23, 29.24),
  NPCPositions: [{
    Position: new mp.Vector3(-110.73, -1686.91, 29.31),
    Heading: 263
  }, {
    Position: new mp.Vector3(-109.52, -1685.25, 29.31),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(51.11, -1534.99, 29.21),
  NPCPositions: [{
    Position: new mp.Vector3(56.92, -1538.86, 29.29),
    Heading: 263
  }, {
    Position: new mp.Vector3(55.65, -1540.42, 29.29),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(440.67, -2030.83, 23.50),
  NPCPositions: [{
    Position: new mp.Vector3(439.71, -2033.12, 23.61),
    Heading: 263
  }, {
    Position: new mp.Vector3(438.28, -2031.85, 23.54),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(258.75, -1123.57, 29.22),
  NPCPositions: [{
    Position: new mp.Vector3(256.23, -1120.45, 29.36),
    Heading: 263
  }, {
    Position: new mp.Vector3(258.51, -1120.25, 29.36),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-83.36, -644.07, 36.18),
  NPCPositions: [{
    Position: new mp.Vector3(-80.53, -645.45, 36.27),
    Heading: 263
  }, {
    Position: new mp.Vector3(-81.15, -647.51, 36.26),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-504.82, 20.08, 44.71),
  NPCPositions: [{
    Position: new mp.Vector3(-506.12, 22.70, 44.79),
    Heading: 263
  }, {
    Position: new mp.Vector3(-503.82, 23.24, 44.81),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-693.13, -6.74, 38.17),
  NPCPositions: [{
    Position: new mp.Vector3(-696.27, -2.81, 38.24),
    Heading: 263
  }, {
    Position: new mp.Vector3(-693.73, -1.74, 38.30),
    Heading: 272
  }, {
    Position: new mp.Vector3(-697.90, -3.20, 38.18),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-1528.67, -465.19, 35.41),
  NPCPositions: [{
    Position: new mp.Vector3(-1526.53, -463.55, 35.40),
    Heading: 263
  }, {
    Position: new mp.Vector3(-1525.84, -466.86, 35.32),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-1211.47, -1218.84, 7.63),
  NPCPositions: [{
    Position: new mp.Vector3(-1214.25, -1219.96, 7.68),
    Heading: 263
  }, {
    Position: new mp.Vector3(-1214.65, -1218.11, 7.69),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(-1168.09, -1472.38, 4.27),
  NPCPositions: [{
    Position: new mp.Vector3(-1169.52, -1474.13, 4.38),
    Heading: 263
  }, {
    Position: new mp.Vector3(-1170.90, -1472.78, 4.38),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(440.67, -2030.83, 23.50),
  NPCPositions: [{
    Position: new mp.Vector3(439.71, -2033.12, 23.61),
    Heading: 263
  }, {
    Position: new mp.Vector3(438.28, -2031.85, 23.54),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(440.67, -2030.83, 23.50),
  NPCPositions: [{
    Position: new mp.Vector3(439.71, -2033.12, 23.61),
    Heading: 263
  }, {
    Position: new mp.Vector3(438.28, -2031.85, 23.54),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(440.67, -2030.83, 23.50),
  NPCPositions: [{
    Position: new mp.Vector3(439.71, -2033.12, 23.61),
    Heading: 263
  }, {
    Position: new mp.Vector3(438.28, -2031.85, 23.54),
    Heading: 272
  }]
}, {
  Position: new mp.Vector3(307.01, -766.56, 29.23),
  NPCPositions: [{
    Position: new mp.Vector3(304.14, -766.45, 29.3),
    Heading: 268
  }, {
    Position: new mp.Vector3(305.05, -764.37, 29.31),
    Heading: 213
  }]
}, {
  Position: new mp.Vector3(-512.60, -648.49, 33.07),
  NPCPositions: [{
    Position: new mp.Vector3(-515.10, -645.22, 33.1),
    Heading: 205
  }, {
    Position: new mp.Vector3(-512.26, -644.98, 33.17),
    Heading: 150
  }]
}, {
  Position: new mp.Vector3(-735.18, -97.81, 37.87),
  NPCPositions: [{
    Position: new mp.Vector3(-732.85, -99.65, 38.08),
    Heading: 43
  }, {
    Position: new mp.Vector3(-735.60, -101.50, 38.09),
    Heading: 343
  }]
}, {
  Position: new mp.Vector3(-433.32, 120.90, 64.73),
  NPCPositions: [{
    Position: new mp.Vector3(-432.32, 117.36, 64.92),
    Heading: 13
  }, {
    Position: new mp.Vector3(-435.13, 116.73, 64.86),
    Heading: 13
  }]
}, {
  Position: new mp.Vector3(293.93, 148.09, 103.91),
  NPCPositions: [{
    Position: new mp.Vector3(294.00, 145.00, 104.03),
    Heading: 343
  }, {
    Position: new mp.Vector3(291.35, 145.41, 104.08),
    Heading: 343
  }]
}, {
  Position: new mp.Vector3(282.73, -494.26, 43.21),
  NPCPositions: [{
    Position: new mp.Vector3(279.74, -493.01, 43.25),
    Heading: 270
  }, {
    Position: new mp.Vector3(280.06, -491.53, 43.25),
    Heading: 285
  }]
}, {
  Position: new mp.Vector3(-388.06, -832.03, 31.46),
  NPCPositions: [{
    Position: new mp.Vector3(-388.87, -829.53, 31.56),
    Heading: 199
  }, {
    Position: new mp.Vector3(-386.09, -829.40, 31.56),
    Heading: 215
  }]
}, {
  Position: new mp.Vector3(-1323.58, -835.11, 16.82),
  NPCPositions: [{
    Position: new mp.Vector3(-1321.97, -833.32, 16.95),
    Heading: 141
  }, {
    Position: new mp.Vector3(-1319.44, -835.47, 16.95),
    Heading: 104
  }]
}, {
  Position: new mp.Vector3(-1046.41, -389.21, 37.62),
  NPCPositions: [{
    Position: new mp.Vector3(-1045.66, -393.15, 37.74),
    Heading: 35
  }, {
    Position: new mp.Vector3(-1048.01, -394.37, 37.70),
    Heading: 77
  }]
}, {
  Position: new mp.Vector3(-530.23, 306.50, 82.89),
  NPCPositions: [{
    Position: new mp.Vector3(-527.90, 306.85, 83.02),
    Heading: 103
  }, {
    Position: new mp.Vector3(-527.95, 304.02, 83.02),
    Heading: 52
  }]
}, {
  Position: new mp.Vector3(210.49, 353.87, 105.67),
  NPCPositions: [{
    Position: new mp.Vector3(210.51, 350.80, 105.6),
    Heading: 5
  }, {
    Position: new mp.Vector3(208.38, 351.20, 105.71),
    Heading: 315
  }]
}, {
  Position: new mp.Vector3(845.58, -217.66, 71.82),
  NPCPositions: [{
    Position: new mp.Vector3(845.12, -221.43, 71.84),
    Heading: 356
  }, {
    Position: new mp.Vector3(841.73, -220.04, 72.1),
    Heading: 304
  }]
}, {
  Position: new mp.Vector3(1091.00, -763.95, 57.66),
  NPCPositions: [{
    Position: new mp.Vector3(1091.47, -766.32, 57.82),
    Heading: 18
  }, {
    Position: new mp.Vector3(1087.93, -765.95, 57.80),
    Heading: 323
  }]
}, {
  Position: new mp.Vector3(496.78, -853.56, 24.97),
  NPCPositions: [{
    Position: new mp.Vector3(494.01, -854.62, 25.08),
    Heading: 308
  }, {
    Position: new mp.Vector3(493.66, -851.79, 25.05),
    Heading: 234
  }]
}, {
  Position: new mp.Vector3(263.29, -1124.69, 29.22),
  NPCPositions: [{
    Position: new mp.Vector3(260.07, -1121.38, 29.42),
    Heading: 257
  }, {
    Position: new mp.Vector3(261.81, -1120.21, 29.36),
    Heading: 234
  }]
}, {
  Position: new mp.Vector3(-108.88, -1688.58, 29.23),
  NPCPositions: [{
    Position: new mp.Vector3(-110.58, -1686.90, 29.31),
    Heading: 264
  }, {
    Position: new mp.Vector3(-109.39, -1685.85, 29.31),
    Heading: 215
  }]
}, {
  Position: new mp.Vector3(243.89, -1851.35, 26.54),
  NPCPositions: [{
    Position: new mp.Vector3(243.13, -1853.72, 26.61),
    Heading: 349
  }, {
    Position: new mp.Vector3(240.35, -1852.18, 26.63),
    Heading: 317
  }]
}, {
  Position: new mp.Vector3(303.64, -2508.29, 5.84),
  NPCPositions: [{
    Position: new mp.Vector3(301.80, -2506.18, 5.98),
    Heading: 235
  }, {
    Position: new mp.Vector3(305.20, -2504.62, 6.00),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-387.21, -2830.60, 6.00),
  NPCPositions: [{
    Position: new mp.Vector3(-385.02, -2831.20, 6.00),
    Heading: 235
  }, {
    Position: new mp.Vector3(-386.18, -2832.81, 6.00),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(665.28, -2774.98, 6.13),
  NPCPositions: [{
    Position: new mp.Vector3(662.46, -2776.65, 6.14),
    Heading: 235
  }, {
    Position: new mp.Vector3(661.61, -2773.98, 6.15),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(819.89, -1484.40, 27.64),
  NPCPositions: [{
    Position: new mp.Vector3(822.26, -1482.48, 27.74),
    Heading: 235
  }, {
    Position: new mp.Vector3(823.70, -1484.45, 27.80),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(958.12, -990.79, 40.27),
  NPCPositions: [{
    Position: new mp.Vector3(957.09, -987.51, 40.19),
    Heading: 235
  }, {
    Position: new mp.Vector3(959.75, -986.92, 40.46),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(265.58, -221.71, 53.92),
  NPCPositions: [{
    Position: new mp.Vector3(264.71, -218.10, 53.99),
    Heading: 235
  }, {
    Position: new mp.Vector3(266.73, -218.70, 53.98),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-82.88, -644.87, 36.10),
  NPCPositions: [{
    Position: new mp.Vector3(-80.83, -645.55, 36.27),
    Heading: 235
  }, {
    Position: new mp.Vector3(-81.17, -647.40, 36.27),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(306.92, -764.60, 29.20),
  NPCPositions: [{
    Position: new mp.Vector3(304.52, -765.77, 29.31),
    Heading: 235
  }, {
    Position: new mp.Vector3(304.60, -764.25, 29.31),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(306.56, -766.95, 29.22),
  NPCPositions: [{
    Position: new mp.Vector3(304.40, -766.57, 29.31),
    Heading: 235
  }, {
    Position: new mp.Vector3(304.86, -764.37, 29.31),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-227.56, -1130.64, 22.98),
  NPCPositions: [{
    Position: new mp.Vector3(-228.72, -1127.67, 23.03),
    Heading: 235
  }, {
    Position: new mp.Vector3(-226.61, -1127.27, 23.03),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-1077.61, -2042.98, 13.00),
  NPCPositions: [{
    Position: new mp.Vector3(-1079.87, -2047.83, 13.10),
    Heading: 235
  }, {
    Position: new mp.Vector3(-1081.97, -2046.44, 13.13),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-622.72, -2273.95, 5.85),
  NPCPositions: [{
    Position: new mp.Vector3(-626.53, -2273.53, 5.93),
    Heading: 235
  }, {
    Position: new mp.Vector3(-624.45, -2271.19, 5.94),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-884.71, -2192.11, 8.50),
  NPCPositions: [{
    Position: new mp.Vector3(-882.85, -2188.89, 8.59),
    Heading: 235
  }, {
    Position: new mp.Vector3(-881.06, -2189.98, 8.59),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-617.03, -1708.88, 24.00),
  NPCPositions: [{
    Position: new mp.Vector3(-618.06, -1711.92, 24.06),
    Heading: 235
  }, {
    Position: new mp.Vector3(-619.83, -1710.96, 24.11),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-37.50, -1642.14, 29.16),
  NPCPositions: [{
    Position: new mp.Vector3(-35.04, -1642.78, 29.16),
    Heading: 235
  }, {
    Position: new mp.Vector3(-36.27, -1645.21, 29.17),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(256.00, -1135.53, 29.25),
  NPCPositions: [{
    Position: new mp.Vector3(257.06, -1138.61, 29.35),
    Heading: 235
  }, {
    Position: new mp.Vector3(254.79, -1138.60, 29.35),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(63.51, -649.50, 31.53),
  NPCPositions: [{
    Position: new mp.Vector3(59.75, -649.86, 31.66),
    Heading: 235
  }, {
    Position: new mp.Vector3(60.15, -647.47, 31.66),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-622.85, -920.54, 23.44),
  NPCPositions: [{
    Position: new mp.Vector3(-615.75, -919.04, 23.53),
    Heading: 235
  }, {
    Position: new mp.Vector3(-615.78, -921.61, 23.33),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(412.52, -582.40, 28.61),
  NPCPositions: [{
    Position: new mp.Vector3(415.58, -583.48, 28.73),
    Heading: 235
  }, {
    Position: new mp.Vector3(414.53, -585.36, 28.73),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(1402.62, 673.72, 79.12),
  NPCPositions: [{
    Position: new mp.Vector3(1405.85, 673.26, 79.07),
    Heading: 235
  }, {
    Position: new mp.Vector3(1404.60, 670.53, 79.16),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(2210.22, 2723.67, 46.31),
  NPCPositions: [{
    Position: new mp.Vector3(2213.03, 2722.65, 46.16),
    Heading: 235
  }, {
    Position: new mp.Vector3(2211.67, 2720.64, 46.27),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(1658.65, 3583.97, 35.51),
  NPCPositions: [{
    Position: new mp.Vector3(1661.47, 3587.54, 35.40),
    Heading: 235
  }, {
    Position: new mp.Vector3(1662.60, 3585.27, 35.42),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(898.82, 3638.86, 32.64),
  NPCPositions: [{
    Position: new mp.Vector3(897.42, 3642.09, 32.70),
    Heading: 235
  }, {
    Position: new mp.Vector3(899.49, 3642.57, 32.75),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(296.36, 2593.17, 44.53),
  NPCPositions: [{
    Position: new mp.Vector3(294.17, 2590.64, 44.38),
    Heading: 235
  }, {
    Position: new mp.Vector3(292.66, 2592.27, 44.45),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(1159.85, 1806.65, 74.18),
  NPCPositions: [{
    Position: new mp.Vector3(1158.16, 1803.41, 74.20),
    Heading: 235
  }, {
    Position: new mp.Vector3(1156.87, 1804.60, 74.09),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(596.77, 634.96, 128.91),
  NPCPositions: [{
    Position: new mp.Vector3(593.30, 635.07, 129.04),
    Heading: 235
  }, {
    Position: new mp.Vector3(593.91, 637.56, 129.05),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(365.28, 170.72, 102.95),
  NPCPositions: [{
    Position: new mp.Vector3(362.06, 170.55, 103.06),
    Heading: 235
  }, {
    Position: new mp.Vector3(362.32, 172.51, 103.06),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(203.32, -697.88, 35.59),
  NPCPositions: [{
    Position: new mp.Vector3(200.33, -698.69, 35.57),
    Heading: 235
  }, {
    Position: new mp.Vector3(200.74, -696.41, 35.71),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(251.95, -1135.72, 29.23),
  NPCPositions: [{
    Position: new mp.Vector3(253.16, -1138.93, 29.34),
    Heading: 235
  }, {
    Position: new mp.Vector3(251.53, -1139.36, 29.34),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-311.99, -648.79, 32.78),
  NPCPositions: [{
    Position: new mp.Vector3(-312.93, -646.65, 32.70),
    Heading: 235
  }, {
    Position: new mp.Vector3(-311.02, -646.08, 32.76),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-1335.83, -518.47, 32.24),
  NPCPositions: [{
    Position: new mp.Vector3(-1337.93, -516.95, 32.29),
    Heading: 235
  }, {
    Position: new mp.Vector3(-1336.28, -515.45, 32.41),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-2109.26, -354.74, 12.84),
  NPCPositions: [{
    Position: new mp.Vector3(-2108.55, -352.40, 12.94),
    Heading: 235
  }, {
    Position: new mp.Vector3(-2107.67, -353.48, 12.95),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-2975.19, 466.94, 15.19),
  NPCPositions: [{
    Position: new mp.Vector3(-2972.38, 467.50, 15.18),
    Heading: 235
  }, {
    Position: new mp.Vector3(-2972.33, 466.16, 15.18),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-2693.36, 2339.37, 17.07),
  NPCPositions: [{
    Position: new mp.Vector3(-2691.58, 2340.10, 17.05),
    Heading: 235
  }, {
    Position: new mp.Vector3(-2691.60, 2338.71, 17.07),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-2230.59, 4256.19, 45.94),
  NPCPositions: [{
    Position: new mp.Vector3(-2228.79, 4255.92, 46.02),
    Heading: 235
  }, {
    Position: new mp.Vector3(-2229.00, 4254.54, 45.93),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-850.14, 5432.42, 34.47),
  NPCPositions: [{
    Position: new mp.Vector3(-848.60, 5431.11, 34.45),
    Heading: 235
  }, {
    Position: new mp.Vector3(-849.62, 5429.80, 34.50),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(-198.09, 6323.74, 31.41),
  NPCPositions: [{
    Position: new mp.Vector3(-195.36, 6321.82, 31.51),
    Heading: 235
  }, {
    Position: new mp.Vector3(-196.33, 6320.79, 31.52),
    Heading: 184
  }]
}, {
  Position: new mp.Vector3(2607.71, 5075.82, 44.77),
  NPCPositions: [{
    Position: new mp.Vector3(2605.51, 5074.83, 44.75),
    Heading: 235
  }, {
    Position: new mp.Vector3(2604.61, 5076.59, 44.75),
    Heading: 184
  }]
}];
const BUS_WAYS = exports.BUS_WAYS = [[BUS_STOPS[20], BUS_STOPS[21], BUS_STOPS[22], BUS_STOPS[23], BUS_STOPS[24], BUS_STOPS[25], BUS_STOPS[26], BUS_STOPS[27], BUS_STOPS[28], BUS_STOPS[29], BUS_STOPS[30], BUS_STOPS[31], BUS_STOPS[32]], [BUS_STOPS[33], BUS_STOPS[34], BUS_STOPS[35], BUS_STOPS[36], BUS_STOPS[37], BUS_STOPS[38], BUS_STOPS[39], BUS_STOPS[40], BUS_STOPS[41], BUS_STOPS[42], BUS_STOPS[43], BUS_STOPS[44]], [BUS_STOPS[45], BUS_STOPS[46], BUS_STOPS[47], BUS_STOPS[48], BUS_STOPS[49], BUS_STOPS[50], BUS_STOPS[51], BUS_STOPS[52], BUS_STOPS[53], BUS_STOPS[54]], [BUS_STOPS[55], BUS_STOPS[56], BUS_STOPS[57], BUS_STOPS[58], BUS_STOPS[59], BUS_STOPS[60], BUS_STOPS[61], BUS_STOPS[62], BUS_STOPS[63], BUS_STOPS[64], BUS_STOPS[65]], [BUS_STOPS[66], BUS_STOPS[67], BUS_STOPS[68], BUS_STOPS[69], BUS_STOPS[70], BUS_STOPS[71], BUS_STOPS[72], BUS_STOPS[73], BUS_STOPS[74], BUS_STOPS[60], BUS_STOPS[61], BUS_STOPS[62], BUS_STOPS[63], BUS_STOPS[64], BUS_STOPS[65]]];
},{}],"RSdx":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _config = require("../../../../shared/jobs/busman/config");
var _gui = require("../../gui");
var _user = require("../../user");
var _system = require("../../system");
let state = {
    type: null
  },
  blockKeys = false,
  workVehicle = null,
  inWorkVehicle;
function CreateHalt(type, status) {
  const point = _config.BUS_WAYS[type][status].Position,
    Blip = mp.blips.new(_config.HALT.blipSprite, point, {
      color: _config.HALT.blipColor,
      shortRange: true,
      name: _config.HALT.blipName
    }),
    Colshape = mp.colshapes.newSphere(point.x, point.y, point.z - 1, _config.HALT.colshapeRange, 0),
    Marker = mp.markers.new(1, new mp.Vector3(point.x, point.y, point.z - 1), _config.HALT.markerScale, {
      color: _config.HALT.markerColor
    });
  mp.game.invoke('0x4F7D8A9BFB0B43E9', Blip.handle, true);
  return {
    Blip,
    Colshape,
    Marker
  };
}
function DeleteHalt(Halt) {
  Halt.Blip.destroy();
  Halt.Colshape.destroy();
  Halt.Marker.destroy();
}
function CreatePeds(type, status) {
  const pedsPositions = _config.BUS_WAYS[type][status].NPCPositions;
  let arr = [];
  pedsPositions.forEach(el => {
    const model = _config.PED_MODELS[Math.floor(Math.random() * _config.PED_MODELS.length)];
    let ped = mp.peds.new(mp.game.joaat(model), el.Position, el.Heading, 0);
    ped.freezePosition(false);
    arr.push(ped);
  });
  return arr;
}
mp.events.add("playerStartedEnterVehicle", vehHandle => {
  if (!mp.vehicles.atHandle(vehHandle)) return;
  let veh = mp.vehicles.atHandle(vehHandle);
  if (!veh.getVariable('busman')) return;
  if (veh.getVariable('busman') !== _user.user.id) mp.players.local.clearTasksImmediately();
});
mp.events.add('entityStreamIn', entity => {
  if (state.pedsOnStop) {
    state.pedsOnStop.forEach(el => {
      if (el.handle === entity.handle) {
        entity.freezePosition(false);
      }
    });
  }
});
async function DeletePeds() {
  return new Promise((resolver, reject) => {
    state.pedsInBus.forEach(el => {
      el.destroy();
    });
    const interval = setInterval(() => {
      if (state.pedsInBus.every(el => el.handle === 0)) {
        state.pedsInBus = [];
        resolver(true);
        clearInterval(interval);
      }
    }, 100);
  });
}
function CheckExitFromBus(ped, veh) {
  if (ped.handle === 0) return true;
  return !mp.game.invoke('0xA3EE4A07279BB9DB', ped.handle, veh.handle, false);
}
_custom.CustomEvent.registerServer('busman:employerOpen', exp => {
  _gui.gui.setGui('busman');
  _custom.CustomEvent.triggerCef('busman:employerLoad', exp, state.type);
});
_custom.CustomEvent.registerServer('busman:startWork', (type, vehicleID, vehiclePosition) => {
  vehiclePosition.z += 3;
  const spawnVehicleMarker = mp.markers.new(0, vehiclePosition, 1, {
    color: [202, 0, 42, 255]
  });
  state = {
    type,
    status: 0,
    Halt: CreateHalt(type, 0),
    vehicleID,
    pedsInBus: [],
    spawnVehicleMarker,
    pedsOnStop: CreatePeds(type, 0),
    stopsForEXP: 0
  };
});
mp.events.add('playerEnterColshape', async shape => {
  if (!workVehicle) return;
  let player = mp.players.local,
    veh = mp.vehicles.atRemoteId(workVehicle),
    exitError = false;
  if (veh.handle === 0) return _user.user.notify("Рабочий транспорт слишком далеко", 'error');
  if (player.vehicle && player.vehicle.getVariable("busman") && state.Halt && state.Halt.Colshape && shape === state.Halt.Colshape) {
    veh.setForwardSpeed(1.5);
    if (veh.getDoorLockStatus() !== 1) veh.setDoorsLocked(1);
    blockKeys = true;
    _user.user.notify("Ожидайте окончания высадки/посадки пассажиров");
    _custom.CustomEvent.triggerServer('busman:salary', _config.BUS_LEVELS[state.type].salary);
    if (state.stopsForEXP === _config.STOPS_FOR_EXP - 1) {
      state.stopsForEXP = 0;
      _custom.CustomEvent.triggerServer('busman:addEXP');
    } else {
      state.stopsForEXP++;
    }
    DeleteHalt(state.Halt);
    state.pedsInBus.forEach(el => {
      if (el.handle === 0) return;
      mp.game.invoke('0xD3DBCE61A490BE02', el.handle, veh.handle, 0);
    });
    let dateExit = _system.system.timestamp;
    state.pedsInBus.forEach(el => {
      if (el.handle === 0) return;
      mp.game.invoke('0xD3DBCE61A490BE02', el.handle, veh.handle, 0);
    });
    if (state.pedsInBus.length !== 0) {
      await new Promise((resolve, reject) => {
        const interval = setInterval(async () => {
          if (state.pedsInBus.every(el => CheckExitFromBus(el, veh))) {
            clearInterval(interval);
            resolve(true);
          }
          if (_system.system.timestamp - dateExit > 15 && _system.system.timestamp - dateExit < 16) {
            await DeletePeds();
            exitError = true;
            clearInterval(interval);
            resolve(true);
          }
          if (_system.system.timestamp - dateExit > 40) {
            resolve(true);
          }
        }, 100);
      });
    }
    if (state.pedsInBus.length !== 0) await DeletePeds();
    state.pedsOnStop.forEach((el, key) => {
      if (el.handle === 0) return;
      const currSeat = exitError ? key + 2 : key;
      mp.game.invoke('0xC20E50AA46D09CA8', el.handle, veh.handle, 10000, currSeat, 2.0, 1, 0);
    });
    let date = _system.system.timestamp;
    await new Promise((resolve, reject) => {
      const interval = setInterval(() => {
        if (state.pedsOnStop.every(el => mp.game.invoke('0xA3EE4A07279BB9DB', el.handle, veh.handle, false))) {
          clearInterval(interval);
          resolve(true);
        } else {
          if (_system.system.timestamp - date > 15 && _system.system.timestamp - date < 16) {
            state.pedsOnStop.forEach((el, key) => {
              if (!mp.game.invoke('0xA3EE4A07279BB9DB', el.handle, veh.handle, false)) {
                const currSeat = exitError ? key + 2 : key;
                mp.game.invoke('0x9A7D091411C5F684', el.handle, veh.handle, currSeat);
              }
            });
          }
          if (_system.system.timestamp - date > 40) {
            resolve(true);
          }
        }
      }, 100);
    });
    state.pedsOnStop.forEach(el => {
      state.pedsInBus.push(el);
    });
    if (_config.BUS_WAYS[state.type].length - 1 !== state.status) {
      state.status++;
    } else {
      state.status = 0;
      mp.events.callRemote('advancedQuests:job', 'busman:way');
    }
    state.Halt = CreateHalt(state.type, state.status);
    state.pedsOnStop = CreatePeds(state.type, state.status);
    blockKeys = false;
  }
});
mp.events.add('render', () => {
  if (blockKeys) mp.game.controls.disableAllControlActions(27);
});
mp.events.add('playerEnterVehicle', vehicle => {
  if (!mp.vehicles.exists(vehicle)) return;
  if (vehicle.getVariable('busman') && vehicle.getVariable('busman') === _user.user.id) {
    inWorkVehicle = true;
  }
  if (!vehicle.getVariable('busman') || vehicle.getVariable('busman') !== _user.user.id || !state.vehicleID || vehicle.remoteId !== state.vehicleID || !state.spawnVehicleMarker) return;
  workVehicle = vehicle.remoteId;
  state.spawnVehicleMarker.destroy();
  state.spawnVehicleMarker = undefined;
});
mp.events.add('playerLeaveVehicle', vehicle => {
  if (!mp.vehicles.exists(vehicle)) return;
  if (vehicle.getVariable('busman') && vehicle.getVariable('busman') === _user.user.id) {
    inWorkVehicle = false;
    if (state.timeout) clearTimeout(state.timeout);
    _user.user.notify('Если вы не вернётесь в транспорт в течение минуты, рабочий день будет окончен');
    state.timeout = setTimeout(() => {
      if (!inWorkVehicle) {
        mp.events.call('busman:finishWork');
      }
    }, 60000);
  }
});
mp.events.add('busman:finishWork', () => {
  if (state.timeout) {
    clearTimeout(state.timeout);
    state.timeout = null;
  }
  if (state.spawnVehicleMarker) {
    state.spawnVehicleMarker.destroy();
    state.spawnVehicleMarker = undefined;
  }
  if (workVehicle !== null) workVehicle = null;
  state.pedsOnStop.forEach(el => {
    el.destroy();
  });
  state.pedsInBus.forEach(el => {
    el.destroy();
  });
  if (state.Halt) DeleteHalt(state.Halt);
  state = {
    type: null
  };
  _custom.CustomEvent.triggerServer('busman:finishWork', state.vehicleID);
});
},{"../../custom.event":"py8h","../../../../shared/jobs/busman/config":"jJZ4","../../gui":"bk91","../../user":"ggMw","../../system":"pi2J"}],"T1ix":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DUMP_POSITION = void 0;
const DUMP_POSITION = exports.DUMP_POSITION = new mp.Vector3(2411.57, 3051.61, 48.15);
},{}],"LI2O":[function(require,module,exports) {
"use strict";

var _checkpoints = require("../../checkpoints");
var _custom = require("../../custom.event");
var _gui = require("../../gui");
var _blips = require("../../blips");
const sortGameInteractionHandler = () => {
  _gui.gui.setGui('sortGarbage');
};
let interaction = null;
_custom.CustomEvent.registerServer('sanitation:sort:addInteraction', pos => {
  if (interaction) interaction.destroy();
  interaction = _checkpoints.colshapes.new(new mp.Vector3(pos.x, pos.y, pos.z - 1), "Сортировать", sortGameInteractionHandler, {
    type: 1,
    radius: 2,
    color: [249, 215, 28, 255]
  });
  (0, _blips.createRouteBlip)("Место сортировки", new mp.Vector3(pos.x, pos.y, pos.z - 1), 21);
});
_custom.CustomEvent.registerServer('sanitation:sort:removeInteraction', () => {
  (0, _blips.destroyRouteBlip)("Место сортировки");
  if (interaction) interaction.destroy();
  interaction = null;
});
},{"../../checkpoints":"XCJl","../../custom.event":"py8h","../../gui":"bk91","../../blips":"vw4c"}],"snCR":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _checkpoints = require("../../checkpoints");
var _dump = require("../../../../shared/jobs/sanitation/dump");
require("./sort");
var _user = require("../../user");
var _gui = require("../../gui");
var _attach = require("../../attach");
class SyncSteps {
  constructor() {
    this.interactions = new Map();
    this.blip = null;
    this.step = null;
    this.trashBag = false;
    this.syncStepHandler = (step, points, completedPoints) => {
      if (this.step !== step) {
        this.deleteOldData();
        this.step = step;
        if (step !== 5) {
          completedPoints.forEach((el, key) => {
            if (el === true) return;
            this.interactions.set(key, _checkpoints.colshapes.new(new mp.Vector3(points[key].x, points[key].y, points[key].z - 1), "Собрать мусор", () => {
              if (this.trashBag) return _user.user.notify('Сперва уберите мусорный пакет в автомобиль', 'error');
              _gui.gui.setGui('collectGarbage');
              _custom.CustomEvent.triggerCef('sanitation:collectGarbage', this.step, key);
            }, {
              type: 1,
              radius: 2,
              color: [0, 0, 0, 255]
            }));
          });
          this.blip = mp.blips.new(514, points[0], {
            color: 10,
            dimension: 0,
            shortRange: true,
            scale: 0.8,
            name: "Мусорный бак"
          });
          mp.game.ui.setNewWaypoint(points[0].x, points[0].y);
        } else {
          this.interactions.set(0, _checkpoints.colshapes.new(_dump.DUMP_POSITION, "Выгрузка мусора", () => {
            mp.events.callRemote("sanitation:completeStep", this.getStep(), true);
          }, {
            type: 1,
            radius: 10,
            color: [0, 0, 0, 255]
          }));
          this.blip = mp.blips.new(318, _dump.DUMP_POSITION, {
            color: 31,
            dimension: 0,
            shortRange: true,
            scale: 0.8,
            name: "Свалка"
          });
        }
      } else {
        completedPoints.forEach((el, key) => {
          if (el === false) return;
          if (!this.interactions.has(key)) return;
          this.interactions.get(key).destroy();
          this.interactions.delete(key);
        });
      }
    };
    this.deleteStepHandler = () => {
      if (this.step === null) return;
      this.deleteOldData();
      this.step = null;
    };
  }
  getStep() {
    return this.step;
  }
  deleteOldData() {
    this.interactions.forEach((el, key) => {
      el.destroy();
    });
    if (this.blip && this.blip.doesExist()) this.blip.destroy();
    this.interactions = new Map();
    this.blip = null;
  }
}
const syncSteps = new SyncSteps();
_custom.CustomEvent.registerServer('sanitation:syncStep', syncSteps.syncStepHandler);
_custom.CustomEvent.registerServer('sanitation:deleteStep', syncSteps.deleteStepHandler);
_custom.CustomEvent.registerServer('sanitation:deleteTrashBag', () => {
  syncSteps.trashBag = false;
  _attach.AttachSystem.removeLocal('trash_bag');
});
mp.events.add('sanitation:collectGarbage:finish', (step, id) => {
  if (step !== syncSteps.step) return;
  syncSteps.trashBag = true;
  _attach.AttachSystem.addLocal('trash_bag');
  mp.events.callRemote("sanitation:completeStep", step, id === 0);
  _gui.gui.setGui(null);
});
},{"../../custom.event":"py8h","../../checkpoints":"XCJl","../../../../shared/jobs/sanitation/dump":"T1ix","./sort":"LI2O","../../user":"ggMw","../../gui":"bk91","../../attach":"sXtZ"}],"CrOp":[function(require,module,exports) {
"use strict";

require("./firefighter");
require("./electrician");
require("./busman");
require("./sanitation");
},{"./firefighter":"J6uc","./electrician":"Gl3h","./busman":"RSdx","./sanitation":"snCR"}],"QDY6":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _gui = require("../gui");
_custom.CustomEvent.registerServer('sessions:open', (sessionsJson, configJson) => {
  const sessions = JSON.parse(sessionsJson);
  const config = JSON.parse(configJson);
  _gui.gui.setGuiWithEvent('jobSessions', 'sessions::show', sessions, config);
});
mp.events.add('gui:menuClosed', menu => {
  if (menu === 'jobSessions') {
    _custom.CustomEvent.triggerServer('sessions:closeMenu');
  }
});
},{"../custom.event":"py8h","../gui":"bk91"}],"P1zH":[function(require,module,exports) {
"use strict";

require("./jobSessions");
},{"./jobSessions":"QDY6"}],"G2BF":[function(require,module,exports) {
"use strict";

var _custom = require("../../../custom.event");
var _gui = require("../../../gui");
var _checkpoints = require("../../../checkpoints");
var _inrerriors = require("../../../../../shared/inrerriors");
var _user = require("../../../user");
let leavingAreaBlip;
let leavingAreaColshape;
let crackingPromiseResolver;
let robberyColshapes = [];
let crackColshape;
let crackBlip;
_custom.CustomEvent.registerServer('jobs:houseCracking:destroyCrackPoint', () => destroyCrackPoint());
mp.events.add('jobs::houseCracking::endMinigame', isSuccess => {
  _gui.gui.setGui(null);
  if (crackingPromiseResolver) {
    crackingPromiseResolver(isSuccess);
  }
});
_custom.CustomEvent.registerServer('jobs:houseCracking:createCrackpoint', position => {
  crackColshape = _checkpoints.colshapes.new(position, undefined, () => {
    _custom.CustomEvent.triggerServer('jobs:houseCracking:enterCrackpoint');
  }, {
    onenter: true,
    color: [255, 0, 0, 200]
  });
  crackBlip = mp.blips.new(1, position, {
    color: 1,
    shortRange: false,
    name: 'Задание на ограбление'
  });
});
_custom.CustomEvent.registerServer('jobs:houseCracking:startMinigame', () => {
  _gui.gui.setGui('BreakLock');
  return new Promise(resolve => {
    crackingPromiseResolver = resolve;
  });
});
_custom.CustomEvent.registerServer('jobs:houseCracking:createRobberyPoints', (interior, dimension) => {
  const points = (0, _inrerriors.getInteriorHouseById)(interior).robberyPoints;
  points.forEach(point => {
    const colshape = _checkpoints.colshapes.new(new mp.Vector3(point.x, point.y, point.z), 'Ограбить', () => {
      _custom.CustomEvent.triggerServer('jobs:houseCracking:rob');
      robberyColshapes.splice(robberyColshapes.indexOf(colshape), 1);
      colshape.destroy();
    }, {
      dimension: dimension,
      color: [200, 0, 0, 230]
    });
    robberyColshapes.push(colshape);
  });
});
_custom.CustomEvent.registerServer('jobs:houseCracking:createLeavingArea', (position, areaRadius) => {
  leavingAreaBlip = mp.blips.new(4, new mp.Vector3(position.x, position.y, position.z), {
    alpha: 160,
    color: 4,
    rotation: 0,
    radius: areaRadius,
    shortRange: false
  });
  leavingAreaColshape = _checkpoints.colshapes.new(position, undefined, undefined, {
    type: -1,
    onExitHandler: player => {
      if (mp.players.local.dimension !== 0) {
        return;
      }
      if (!_user.user.cuffed) _custom.CustomEvent.triggerServer('jobs:houseCracking:leftArea');
    },
    radius: areaRadius,
    dimension: 0
  });
});
_custom.CustomEvent.registerServer('jobs:houseCracking:end', () => {
  robberyColshapes.forEach(colshape => {
    if (colshape && colshape.exists) {
      colshape.destroy();
    }
  });
  robberyColshapes = [];
  destroyCrackPoint();
  if (leavingAreaColshape && leavingAreaColshape.exists) {
    leavingAreaColshape.destroy();
  }
  leavingAreaColshape = null;
  if (mp.blips.exists(leavingAreaBlip)) {
    leavingAreaBlip.destroy();
  }
  leavingAreaBlip = null;
});
function destroyCrackPoint() {
  if (crackColshape && crackColshape.exists) {
    crackColshape.destroy();
  }
  crackColshape = null;
  if (mp.blips.exists(crackBlip)) {
    crackBlip.destroy();
  }
  crackBlip = null;
}
},{"../../../custom.event":"py8h","../../../gui":"bk91","../../../checkpoints":"XCJl","../../../../../shared/inrerriors":"Ri0V","../../../user":"ggMw"}],"idFe":[function(require,module,exports) {
"use strict";

require("./houses-cracker");
},{"./houses-cracker":"G2BF"}],"Fgtn":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
const UPDATE_INTERVAL_TIMEOUT_MS = 75;
class FamilyBlipTracker {
  constructor() {
    this._enabled = false;
    this.familyId = null;
    this._trackedPlayers = [];
    this._trackedBlips = [];
  }
  get enabled() {
    return this._enabled;
  }
  startTracking() {
    if (this._enabled) return;
    this._enabled = true;
    mp.players.forEachInStreamRange(p => {
      if (!p.doesExist()) return;
      if (p.remoteId === mp.players.local.remoteId) return;
      if (p.getVariable("family")[0] === this.familyId) {
        this.addPlayerToTracker(p);
      }
    });
    this._intervalId = setInterval(() => this.updateBlipPositions(), UPDATE_INTERVAL_TIMEOUT_MS);
  }
  updateBlipPositions() {
    this._trackedBlips.forEach((b, idx) => {
      var _this$_trackedPlayers;
      if ((_this$_trackedPlayers = this._trackedPlayers[idx]) !== null && _this$_trackedPlayers !== void 0 && _this$_trackedPlayers.doesExist()) b.setCoords(this._trackedPlayers[idx].getCoordsAutoAlive());
    });
  }
  addPlayerToTracker(player) {
    if (this._trackedPlayers.includes(player)) return;
    this._trackedPlayers.push(player);
    this._trackedBlips.push(mp.blips.new(0, player.position, {
      color: 0,
      rotation: player.getRotation(0).z,
      dimension: 0
    }));
  }
  removePlayerFromTracker(player) {
    if (this._trackedPlayers.includes(player)) {
      var _this$_trackedBlips$i;
      const idx = this._trackedPlayers.indexOf(player);
      (_this$_trackedBlips$i = this._trackedBlips[idx]) === null || _this$_trackedBlips$i === void 0 || _this$_trackedBlips$i.destroy();
      this._trackedPlayers.splice(idx, 1);
      this._trackedBlips.splice(idx, 1);
    }
  }
  stopTracking() {
    if (!this._enabled) return;
    this._trackedPlayers.forEach(p => this.removePlayerFromTracker(p));
    clearInterval(this._intervalId);
    this._enabled = false;
  }
}
const familyBlipTracker = new FamilyBlipTracker();
const shouldPlayerBeTracked = player => {
  return player.type == "player" && mp.players.exists(player) && mp.players.local.remoteId !== player.remoteId && familyBlipTracker.familyId && familyBlipTracker.familyId == player.getVariable('family')[0];
};
mp.events.add('entityStreamIn', player => {
  if (!shouldPlayerBeTracked(player)) return;
  _custom.CustomEvent.triggerServer("srv:log", "addToTracker ");
  familyBlipTracker.addPlayerToTracker(player);
});
mp.events.add('entityStreamOut', player => {
  familyBlipTracker.removePlayerFromTracker(player);
});
mp.events.addDataHandler("family", (target, val) => {
  if (target.type != "player") return;
  if (target.remoteId !== mp.players.local.remoteId) {
    familyBlipTracker.removePlayerFromTracker(target);
    if (shouldPlayerBeTracked(target)) familyBlipTracker.addPlayerToTracker(target);
    return;
  }
  _custom.CustomEvent.triggerServer("srv:log", "family " + val);
  familyBlipTracker.familyId = val[0];
});
mp.events.add('setLogin', () => {
  if (typeof mp.storage.data.renderFamilyPlayerBlips !== "boolean") mp.storage.data.renderFamilyPlayerBlips = false;else {
    _custom.CustomEvent.triggerCef("enableRenderFamilyPlayerBlips", mp.storage.data.renderFamilyPlayerBlips);
  }
  if (mp.storage.data.renderFamilyPlayerBlips) familyBlipTracker.startTracking();
});
mp.events.add('renderFamilyPlayerBlips', toggle => {
  mp.storage.data.renderFamilyPlayerBlips = toggle;
  _custom.CustomEvent.triggerCef("enableRenderFamilyPlayerBlips", toggle);
  if (toggle) familyBlipTracker.startTracking();else familyBlipTracker.stopTracking();
});
},{"../custom.event":"py8h"}],"JP2y":[function(require,module,exports) {
"use strict";

require("./jobs");
require("./familyBlipTracker");
},{"./jobs":"idFe","./familyBlipTracker":"Fgtn"}],"O6kt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TENT_DESTROY_AFTER_CUFFS_SECONDS = exports.STOCK_KEEP_MAX_TIME_MINUTES = exports.START_RENT_COMMON_TENT_COST = exports.START_RENT_BLACK_TENT_COST = exports.SELLER_POSITION_RADIUS = exports.RENT_TICK_MINUTES = exports.RENT_COMMON_TENT_COST = exports.RENT_BLACK_TENT_COST = exports.NPC_SELLER_PERCENTS = exports.MAX_RENT_TIME_MINUTES = exports.MARKET_BLIP_SPRITE = exports.MARKET_BLIP_COLOR = void 0;
exports.getMarketRentCompensation = getMarketRentCompensation;
const RENT_COMMON_TENT_COST = exports.RENT_COMMON_TENT_COST = 5000;
const RENT_BLACK_TENT_COST = exports.RENT_BLACK_TENT_COST = 15000;
const START_RENT_COMMON_TENT_COST = exports.START_RENT_COMMON_TENT_COST = 5000;
const START_RENT_BLACK_TENT_COST = exports.START_RENT_BLACK_TENT_COST = 20000;
const RENT_TICK_MINUTES = exports.RENT_TICK_MINUTES = 30;
const MAX_RENT_TIME_MINUTES = exports.MAX_RENT_TIME_MINUTES = 5 * 60;
const STOCK_KEEP_MAX_TIME_MINUTES = exports.STOCK_KEEP_MAX_TIME_MINUTES = 60 * 24;
const NPC_SELLER_PERCENTS = exports.NPC_SELLER_PERCENTS = 20;
const SELLER_POSITION_RADIUS = exports.SELLER_POSITION_RADIUS = 30;
const MARKET_BLIP_SPRITE = exports.MARKET_BLIP_SPRITE = 500;
const MARKET_BLIP_COLOR = exports.MARKET_BLIP_COLOR = 5;
const TENT_DESTROY_AFTER_CUFFS_SECONDS = exports.TENT_DESTROY_AFTER_CUFFS_SECONDS = 120;
function getMarketRentCompensation(rentTimeLeftS) {
  const rentTickLeft = Math.floor(rentTimeLeftS / 60 / RENT_TICK_MINUTES);
  return rentTickLeft * RENT_COMMON_TENT_COST;
}
},{}],"c25B":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _system = require("../../../shared/system");
var _config = require("../../../shared/market/config");
var _user = require("../user");
let sellerPosition = null;
_custom.CustomEvent.registerServer('market:setSellerPosition', position => {
  sellerPosition = position;
});
_custom.CustomEvent.registerServer('market:calledByCop', () => {
  moveToSellerPos();
  _user.user.notify('Администратор рынка попросил вас подойти к своей палатке', 'warning');
});
function checkPlayerPosition() {
  if (sellerPosition === null) {
    return;
  }
  const playerPos = mp.players.local.position;
  if (_system.systemUtil.distanceToPos(playerPos, sellerPosition) < _config.SELLER_POSITION_RADIUS) {
    return;
  }
  moveToSellerPos();
  _user.user.notify('Вы не должны уходить далеко от палатки', 'warning');
}
function moveToSellerPos() {
  mp.players.local.taskGoStraightToCoord(sellerPosition.x, sellerPosition.y, sellerPosition.z, 4.0, 5000, 0, 0);
}
setInterval(checkPlayerPosition, 3000);
mp.events.add('gui:menuClosed', closedGui => {
  if (closedGui != 'market') {
    return;
  }
  _custom.CustomEvent.triggerServer('market:closed');
});
},{"../custom.event":"py8h","../../../shared/system":"SNxO","../../../shared/market/config":"O6kt","../user":"ggMw"}],"VMHP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SUPPLIES_LIST = exports.GreenhouseStage = exports.FieldStage = exports.FarmAnimal = exports.FEED_LIST = exports.FARM_STAND_OBJECT_MODEL = exports.BEST_FARMER_SPOTS = exports.ActivityType = exports.ACTIVITY_SPOTS = exports.ACTIVITY_SETTINGS = void 0;
var ActivityType;
(function (ActivityType) {
  ActivityType[ActivityType["Field"] = 0] = "Field";
  ActivityType[ActivityType["Greenhouse"] = 1] = "Greenhouse";
  ActivityType[ActivityType["Animal"] = 2] = "Animal";
})(ActivityType || (exports.ActivityType = ActivityType = {}));
var FieldStage;
(function (FieldStage) {
  FieldStage[FieldStage["Cultivation"] = 0] = "Cultivation";
  FieldStage[FieldStage["Landing"] = 1] = "Landing";
  FieldStage[FieldStage["Collection"] = 2] = "Collection";
})(FieldStage || (exports.FieldStage = FieldStage = {}));
var GreenhouseStage;
(function (GreenhouseStage) {
  GreenhouseStage[GreenhouseStage["Landing"] = 0] = "Landing";
  GreenhouseStage[GreenhouseStage["Water"] = 1] = "Water";
  GreenhouseStage[GreenhouseStage["Collection"] = 2] = "Collection";
})(GreenhouseStage || (exports.GreenhouseStage = GreenhouseStage = {}));
var FarmAnimal;
(function (FarmAnimal) {
  FarmAnimal[FarmAnimal["Cow"] = 0] = "Cow";
  FarmAnimal[FarmAnimal["Pig"] = 1] = "Pig";
})(FarmAnimal || (exports.FarmAnimal = FarmAnimal = {}));
const FARM_STAND_OBJECT_MODEL = exports.FARM_STAND_OBJECT_MODEL = 'prop_fruitstand_b';
const BEST_FARMER_SPOTS = exports.BEST_FARMER_SPOTS = [{
  pos: {
    x: 2147.82,
    y: 5081.83,
    z: 45.13
  },
  heading: 39,
  blipType: 569
}];
const ACTIVITY_SPOTS = exports.ACTIVITY_SPOTS = [{
  standPos: [{
    x: 2092.46,
    y: 5155.16,
    z: 49.44
  }, 313],
  pedPos: [{
    x: 2095.08,
    y: 5152.37,
    z: 50.22
  }, 133],
  storagePos: {
    x: 2090.41,
    y: 5158.61,
    z: 49.55
  },
  type: ActivityType.Field,
  points: [[{
    x: 2134.22,
    y: 5214.82,
    z: 58.20
  }], [{
    x: 2076.98,
    y: 5180.95,
    z: 52.67
  }], [{
    x: 2187.82,
    y: 5160.49,
    z: 55.38
  }]],
  vehicleSpawnPoints: [[{
    x: 2087.70,
    y: 5164.34,
    z: 51.03
  }, 131], [{
    x: 2083.49,
    y: 5169.14,
    z: 51.35
  }, 131], [{
    x: 2078.85,
    y: 5174.57,
    z: 51.71
  }, 133], [{
    x: 2072.26,
    y: 5181.67,
    z: 52.38
  }, 131]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 2335.35,
    y: 5088.00,
    z: 45.05
  }, 42],
  pedPos: [{
    x: 2332.68,
    y: 5085.93,
    z: 45.93
  }, 227],
  storagePos: {
    x: 2338.34,
    y: 5091.11,
    z: 45.18
  },
  type: ActivityType.Field,
  points: [[{
    x: 2295.21,
    y: 5174.75,
    z: 59.61
  }], [{
    x: 2256.28,
    y: 5135.55,
    z: 53.74
  }], [{
    x: 2346.77,
    y: 5128.21,
    z: 48.43
  }]],
  vehicleSpawnPoints: [[{
    x: 2349.28,
    y: 5103.61,
    z: 47.1
  }, 135], [{
    x: 2343.98,
    y: 5098.34,
    z: 46.75
  }, 134], [{
    x: 2309.99,
    y: 5081.60,
    z: 46.24
  }, 256], [{
    x: 2306.59,
    y: 5086.18,
    z: 46.83
  }, 317]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 2101.74,
    y: 4913.24,
    z: 39.94
  }, 48],
  pedPos: [{
    x: 2097.74,
    y: 4909.25,
    z: 41.06
  }, 227],
  storagePos: {
    x: 2097.98,
    y: 4911.16,
    z: 40.09
  },
  type: ActivityType.Field,
  points: [[{
    x: 2045.11,
    y: 4975.18,
    z: 40.53
  }], [{
    x: 2007.97,
    y: 4940.37,
    z: 41.94
  }], [{
    x: 2104.27,
    y: 4917.83,
    z: 40.29
  }]],
  vehicleSpawnPoints: [[{
    x: 2094.92,
    y: 4885.97,
    z: 41.24
  }, 273], [{
    x: 2101.69,
    y: 4891.02,
    z: 41.17
  }, 97], [{
    x: 2104.99,
    y: 4895.95,
    z: 40.96
  }, 95], [{
    x: 2110.68,
    y: 4900.66,
    z: 40.87
  }, 88]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 2060.23,
    y: 4870.56,
    z: 40.88
  }, 48],
  pedPos: [{
    x: 2056.70,
    y: 4867.16,
    z: 41.77
  }, 227],
  storagePos: {
    x: 2064.25,
    y: 4874.22,
    z: 40.49
  },
  type: ActivityType.Field,
  points: [[{
    x: 2005.71,
    y: 4931.37,
    z: 42.95
  }], [{
    x: 1978.58,
    y: 4903.14,
    z: 42.77
  }], [{
    x: 2060.07,
    y: 4878.10,
    z: 42.92
  }]],
  vehicleSpawnPoints: [[{
    x: 2059.00,
    y: 4849.73,
    z: 41.84
  }, 44], [{
    x: 2066.20,
    y: 4855.62,
    z: 41.73
  }, 44], [{
    x: 2071.38,
    y: 4860.50,
    z: 41.72
  }, 44], [{
    x: 2076.01,
    y: 4864.07,
    z: 41.63
  }, 44]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 1962.10,
    y: 4890.80,
    z: 44.00
  }, 130],
  pedPos: [{
    x: 1965.33,
    y: 4892.06,
    z: 44.49
  }, 330],
  storagePos: {
    x: 1964.52,
    y: 4887.19,
    z: 44.01
  },
  type: ActivityType.Field,
  points: [[{
    x: 1981.16,
    y: 4864.35,
    z: 45.36
  }], [{
    x: 1962.34,
    y: 4883.15,
    z: 45.38
  }], [{
    x: 1945.29,
    y: 4828.14,
    z: 45.35
  }]],
  vehicleSpawnPoints: [[{
    x: 1970.92,
    y: 4886.79,
    z: 44.30
  }, 220], [{
    x: 1977.00,
    y: 4879.92,
    z: 44.28
  }, 224], [{
    x: 1984.15,
    y: 4872.53,
    z: 44.17
  }, 224], [{
    x: 1987.71,
    y: 4863.27,
    z: 44.12
  }, 316]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 2499.16,
    y: 4887.94,
    z: 39.60
  }, 144],
  pedPos: [{
    x: 2502.26,
    y: 4885.39,
    z: 40.30
  }, 320],
  storagePos: {
    x: 2497.59,
    y: 4890.06,
    z: 39.69
  },
  type: ActivityType.Field,
  points: [[{
    x: 2527.31,
    y: 4860.94,
    z: 37.96
  }], [{
    x: 2496.90,
    y: 4889.62,
    z: 40.73
  }], [{
    x: 2490.08,
    y: 4822.95,
    z: 35.22
  }]],
  vehicleSpawnPoints: [[{
    x: 2522.01,
    y: 4870.09,
    z: 38.90
  }, 137], [{
    x: 2518.19,
    y: 4873.99,
    z: 39.06
  }, 137], [{
    x: 2515.27,
    y: 4877.13,
    z: 39.14
  }, 137], [{
    x: 2511.00,
    y: 4880.76,
    z: 39.37
  }, 137]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 2540.58,
    y: 4855.05,
    z: 35.95
  }, 144],
  pedPos: [{
    x: 2535.18,
    y: 4858.22,
    z: 37.44
  }, 320],
  storagePos: {
    x: 2542.23,
    y: 4851.28,
    z: 35.79
  },
  type: ActivityType.Field,
  points: [[{
    x: 2530.42,
    y: 4855.29,
    z: 37.36
  }], [{
    x: 2494.57,
    y: 4817.37,
    z: 35.39
  }], [{
    x: 2582.62,
    y: 4808.74,
    z: 34.10
  }]],
  vehicleSpawnPoints: [[{
    x: 2587.14,
    y: 4811.68,
    z: 34.07
  }, 137], [{
    x: 2581.91,
    y: 4816.04,
    z: 34.53
  }, 137], [{
    x: 2577.96,
    y: 4819.64,
    z: 34.82
  }, 137], [{
    x: 2573.01,
    y: 4824.51,
    z: 35.40
  }, 137]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 1875.35,
    y: 4761.92,
    z: 39.50
  }, 311],
  pedPos: [{
    x: 1872.42,
    y: 4758.47,
    z: 39.64
  }, 147],
  storagePos: {
    x: 1870.85,
    y: 4760.68,
    z: 38.74
  },
  type: ActivityType.Field,
  points: [[{
    x: 1986.77,
    y: 4798.72,
    z: 42.26
  }], [{
    x: 1959.90,
    y: 4826.97,
    z: 44.16
  }], [{
    x: 1912.90,
    y: 4736.14,
    z: 41.51
  }]],
  vehicleSpawnPoints: [[{
    x: 1871.37,
    y: 4747.55,
    z: 39.24
  }, 224], [{
    x: 1877.37,
    y: 4742.48,
    z: 39.81
  }, 224], [{
    x: 1882.74,
    y: 4734.49,
    z: 40.03
  }, 224], [{
    x: 1885.71,
    y: 4725.91,
    z: 39.99
  }, 224]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 2858.36,
    y: 4686.98,
    z: 46.20
  }, 192],
  pedPos: [{
    x: 2857.74,
    y: 4689.46,
    z: 47.23
  }, 14],
  storagePos: {
    x: 2855.02,
    y: 4686.04,
    z: 46.15
  },
  type: ActivityType.Field,
  points: [[{
    x: 2883.21,
    y: 4680.22,
    z: 48.44
  }], [{
    x: 2821.18,
    y: 4663.74,
    z: 46.49
  }], [{
    x: 2905.30,
    y: 4589.96,
    z: 48.00
  }]],
  vehicleSpawnPoints: [[{
    x: 2841.21,
    y: 4673.57,
    z: 46.83
  }, 192], [{
    x: 2835.96,
    y: 4671.82,
    z: 46.80
  }, 224], [{
    x: 2831.03,
    y: 4670.93,
    z: 46.83
  }, 224], [{
    x: 2824.30,
    y: 4669.30,
    z: 46.83
  }, 224]],
  trailerSpawnPoints: []
}, {
  standPos: [{
    x: 1803.34,
    y: 5035.91,
    z: 57.53
  }, 199],
  pedPos: [{
    x: 1800.04,
    y: 5033.88,
    z: 58.29
  }, 23],
  storagePos: {
    x: 1807.62,
    y: 5036.43,
    z: 57.72
  },
  type: ActivityType.Greenhouse,
  points: [[{
    x: 1835.83,
    y: 4994.49,
    z: 53.86
  }], [{
    x: 1832.56,
    y: 4991.72,
    z: 53.19
  }], [{
    x: 1826.74,
    y: 4986.80,
    z: 51.77
  }], [{
    x: 1820.71,
    y: 4981.69,
    z: 50.34
  }], [{
    x: 1815.99,
    y: 4977.70,
    z: 49.33
  }], [{
    x: 1811.70,
    y: 4973.90,
    z: 48.47
  }], [{
    x: 1807.71,
    y: 4970.34,
    z: 47.70
  }], [{
    x: 1801.88,
    y: 4965.45,
    z: 46.63
  }], [{
    x: 1798.08,
    y: 4962.27,
    z: 45.96
  }], [{
    x: 1793.48,
    y: 4958.32,
    z: 45.36
  }], [{
    x: 1789.11,
    y: 4954.47,
    z: 44.96
  }], [{
    x: 1781.71,
    y: 4948.04,
    z: 44.16
  }], [{
    x: 1775.95,
    y: 4951.39,
    z: 44.71
  }], [{
    x: 1779.86,
    y: 4954.34,
    z: 45.10
  }], [{
    x: 1785.24,
    y: 4959.19,
    z: 45.76
  }], [{
    x: 1791.99,
    y: 4965.00,
    z: 46.51
  }], [{
    x: 1797.82,
    y: 4969.94,
    z: 47.45
  }], [{
    x: 1804.91,
    y: 4975.93,
    z: 48.72
  }], [{
    x: 1811.38,
    y: 4981.41,
    z: 49.83
  }], [{
    x: 1818.14,
    y: 4987.22,
    z: 51.31
  }], [{
    x: 1824.99,
    y: 4993.16,
    z: 52.86
  }], [{
    x: 1830.35,
    y: 4997.80,
    z: 54.15
  }], [{
    x: 1816.02,
    y: 5015.31,
    z: 57.08
  }], [{
    x: 1811.59,
    y: 5011.49,
    z: 56.11
  }], [{
    x: 1806.14,
    y: 5006.79,
    z: 54.94
  }], [{
    x: 1800.01,
    y: 5001.62,
    z: 53.62
  }], [{
    x: 1793.56,
    y: 4996.13,
    z: 52.47
  }], [{
    x: 1786.54,
    y: 4990.16,
    z: 51.30
  }], [{
    x: 1780.40,
    y: 4984.93,
    z: 50.25
  }], [{
    x: 1774.87,
    y: 4980.22,
    z: 49.45
  }], [{
    x: 1767.74,
    y: 4974.16,
    z: 48.47
  }], [{
    x: 1761.99,
    y: 4969.26,
    z: 47.62
  }], [{
    x: 1755.42,
    y: 4974.99,
    z: 48.12
  }], [{
    x: 1758.27,
    y: 4977.18,
    z: 48.60
  }], [{
    x: 1763.95,
    y: 4981.97,
    z: 49.36
  }], [{
    x: 1769.26,
    y: 4986.79,
    z: 50.23
  }], [{
    x: 1775.33,
    y: 4992.16,
    z: 51.21
  }], [{
    x: 1781.17,
    y: 4997.27,
    z: 52.15
  }], [{
    x: 1786.57,
    y: 5001.90,
    z: 53.10
  }], [{
    x: 1793.91,
    y: 5008.03,
    z: 54.29
  }], [{
    x: 1799.92,
    y: 5013.13,
    z: 55.64
  }], [{
    x: 1806.36,
    y: 5018.62,
    z: 57.01
  }], [{
    x: 1811.30,
    y: 5022.95,
    z: 58.01
  }], [{
    x: 1805.99,
    y: 5027.45,
    z: 58.43
  }], [{
    x: 1802.13,
    y: 5024.02,
    z: 57.65
  }], [{
    x: 1796.46,
    y: 5019.16,
    z: 56.40
  }], [{
    x: 1789.65,
    y: 5013.51,
    z: 55.01
  }], [{
    x: 1783.14,
    y: 5007.98,
    z: 53.79
  }], [{
    x: 1777.73,
    y: 5003.39,
    z: 52.90
  }], [{
    x: 1773.64,
    y: 4999.77,
    z: 52.24
  }], [{
    x: 1768.59,
    y: 4995.34,
    z: 51.32
  }], [{
    x: 1762.12,
    y: 4989.73,
    z: 50.34
  }], [{
    x: 1758.85,
    y: 4986.93,
    z: 49.93
  }], [{
    x: 1752.65,
    y: 4981.94,
    z: 48.86
  }]]
}, {
  standPos: [{
    x: 1881.86,
    y: 5022.56,
    z: 48.1
  }, 37],
  pedPos: [{
    x: 1885.00,
    y: 5026.50,
    z: 49.04
  }, 223],
  storagePos: {
    x: 1878.14,
    y: 5020.23,
    z: 48.69
  },
  type: ActivityType.Greenhouse,
  points: [[{
    x: 1845.56,
    y: 5023.14,
    z: 55.41
  }], [{
    x: 1849.82,
    y: 5026.80,
    z: 54.80
  }], [{
    x: 1855.61,
    y: 5031.64,
    z: 53.82
  }], [{
    x: 1861.39,
    y: 5036.43,
    z: 52.98
  }], [{
    x: 1867.90,
    y: 5041.85,
    z: 52.18
  }], [{
    x: 1874.06,
    y: 5047.02,
    z: 51.49
  }], [{
    x: 1880.02,
    y: 5052.02,
    z: 50.81
  }], [{
    x: 1885.70,
    y: 5056.78,
    z: 49.94
  }], [{
    x: 1892.80,
    y: 5062.89,
    z: 49.04
  }], [{
    x: 1899.76,
    y: 5068.90,
    z: 47.90
  }], [{
    x: 1906.97,
    y: 5075.13,
    z: 46.55
  }], [{
    x: 1913.29,
    y: 5080.58,
    z: 45.29
  }], [{
    x: 1919.19,
    y: 5085.67,
    z: 44.15
  }], [{
    x: 1925.96,
    y: 5091.51,
    z: 42.92
  }], [{
    x: 1930.97,
    y: 5095.83,
    z: 41.66
  }], [{
    x: 1927.28,
    y: 5101.21,
    z: 41.65
  }], [{
    x: 1921.67,
    y: 5096.52,
    z: 42.97
  }], [{
    x: 1915.47,
    y: 5091.53,
    z: 44.22
  }], [{
    x: 1909.98,
    y: 5087.01,
    z: 45.36
  }], [{
    x: 1902.52,
    y: 5080.87,
    z: 46.82
  }], [{
    x: 1895.62,
    y: 5074.71,
    z: 48.42
  }], [{
    x: 1889.44,
    y: 5069.03,
    z: 49.44
  }], [{
    x: 1883.22,
    y: 5063.69,
    z: 50.43
  }], [{
    x: 1877.02,
    y: 5058.55,
    z: 51.37
  }], [{
    x: 1870.63,
    y: 5053.26,
    z: 52.17
  }], [{
    x: 1864.95,
    y: 5048.38,
    z: 52.85
  }], [{
    x: 1859.52,
    y: 5043.63,
    z: 53.38
  }], [{
    x: 1852.55,
    y: 5037.68,
    z: 54.52
  }], [{
    x: 1845.17,
    y: 5031.41,
    z: 55.79
  }], [{
    x: 1837.38,
    y: 5032.91,
    z: 57.42
  }], [{
    x: 1840.12,
    y: 5035.20,
    z: 57.03
  }], [{
    x: 1846.48,
    y: 5040.68,
    z: 56.08
  }], [{
    x: 1852.14,
    y: 5045.47,
    z: 55.20
  }], [{
    x: 1857.78,
    y: 5050.26,
    z: 54.32
  }], [{
    x: 1863.74,
    y: 5055.32,
    z: 53.49
  }], [{
    x: 1869.67,
    y: 5060.36,
    z: 52.65
  }], [{
    x: 1875.69,
    y: 5065.46,
    z: 51.69
  }], [{
    x: 1882.04,
    y: 5071.07,
    z: 50.66
  }], [{
    x: 1888.07,
    y: 5076.25,
    z: 49.64
  }], [{
    x: 1895.27,
    y: 5082.20,
    z: 48.19
  }], [{
    x: 1901.12,
    y: 5087.02,
    z: 46.91
  }], [{
    x: 1907.40,
    y: 5092.47,
    z: 45.54
  }], [{
    x: 1913.25,
    y: 5097.66,
    z: 44.24
  }], [{
    x: 1920.26,
    y: 5103.60,
    z: 42.60
  }], [{
    x: 1909.59,
    y: 5106.86,
    z: 44.54
  }], [{
    x: 1905.56,
    y: 5103.59,
    z: 45.38
  }], [{
    x: 1898.33,
    y: 5097.81,
    z: 46.98
  }], [{
    x: 1890.20,
    y: 5090.85,
    z: 48.78
  }], [{
    x: 1881.43,
    y: 5083.00,
    z: 50.71
  }], [{
    x: 1874.62,
    y: 5077.25,
    z: 51.86
  }], [{
    x: 1868.72,
    y: 5072.37,
    z: 52.89
  }], [{
    x: 1862.49,
    y: 5066.84,
    z: 54.00
  }], [{
    x: 1856.42,
    y: 5061.47,
    z: 55.03
  }], [{
    x: 1850.22,
    y: 5056.41,
    z: 56.20
  }], [{
    x: 1844.59,
    y: 5051.72,
    z: 57.03
  }], [{
    x: 1838.81,
    y: 5046.84,
    z: 57.70
  }], [{
    x: 1833.27,
    y: 5041.95,
    z: 58.38
  }], [{
    x: 1827.44,
    y: 5044.94,
    z: 58.81
  }], [{
    x: 1832.77,
    y: 5049.56,
    z: 58.23
  }], [{
    x: 1840.52,
    y: 5055.92,
    z: 57.34
  }], [{
    x: 1847.70,
    y: 5062.06,
    z: 56.27
  }], [{
    x: 1854.35,
    y: 5067.94,
    z: 55.18
  }], [{
    x: 1862.29,
    y: 5074.76,
    z: 53.84
  }], [{
    x: 1869.23,
    y: 5080.72,
    z: 52.55
  }], [{
    x: 1876.67,
    y: 5086.93,
    z: 51.13
  }], [{
    x: 1882.78,
    y: 5092.03,
    z: 49.97
  }], [{
    x: 1889.02,
    y: 5097.23,
    z: 48.60
  }], [{
    x: 1895.06,
    y: 5102.40,
    z: 47.37
  }]]
}, {
  standPos: [{
    x: 2293.02,
    y: 4772.74,
    z: 37.65
  }, 83],
  pedPos: [{
    x: 2296.14,
    y: 4772.02,
    z: 38.41
  }, 242],
  storagePos: {
    x: 2294.10,
    y: 4775.70,
    z: 37.45
  },
  type: ActivityType.Greenhouse,
  points: [[{
    x: 2272.77,
    y: 4756.14,
    z: 38.42
  }], [{
    x: 2274.66,
    y: 4762.46,
    z: 39.14
  }], [{
    x: 2276.89,
    y: 4769.92,
    z: 39.12
  }], [{
    x: 2278.77,
    y: 4776.28,
    z: 39.13
  }], [{
    x: 2271.54,
    y: 4781.68,
    z: 39.43
  }], [{
    x: 2270.30,
    y: 4777.26,
    z: 39.52
  }], [{
    x: 2268.34,
    y: 4769.71,
    z: 39.43
  }], [{
    x: 2266.10,
    y: 4762.65,
    z: 39.41
  }], [{
    x: 2254.31,
    y: 4762.01,
    z: 39.57
  }], [{
    x: 2255.55,
    y: 4766.01,
    z: 39.61
  }], [{
    x: 2258.10,
    y: 4774.77,
    z: 39.66
  }], [{
    x: 2260.34,
    y: 4782.97,
    z: 39.84
  }], [{
    x: 2251.28,
    y: 4786.63,
    z: 40.12
  }], [{
    x: 2250.13,
    y: 4782.59,
    z: 40.01
  }], [{
    x: 2247.35,
    y: 4773.63,
    z: 39.91
  }], [{
    x: 2245.32,
    y: 4765.69,
    z: 39.83
  }], [{
    x: 2238.45,
    y: 4766.55,
    z: 39.93
  }], [{
    x: 2239.80,
    y: 4771.26,
    z: 40.05
  }], [{
    x: 2242.03,
    y: 4778.89,
    z: 40.14
  }], [{
    x: 2244.40,
    y: 4786.56,
    z: 40.11
  }], [{
    x: 2238.42,
    y: 4791.36,
    z: 40.29
  }], [{
    x: 2236.97,
    y: 4787.05,
    z: 40.19
  }], [{
    x: 2234.37,
    y: 4778.31,
    z: 40.15
  }], [{
    x: 2232.08,
    y: 4770.12,
    z: 40.06
  }], [{
    x: 2224.57,
    y: 4772.22,
    z: 40.22
  }], [{
    x: 2226.09,
    y: 4777.32,
    z: 40.21
  }], [{
    x: 2228.26,
    y: 4784.57,
    z: 40.29
  }], [{
    x: 2230.23,
    y: 4791.29,
    z: 40.35
  }]]
}, {
  standPos: [{
    x: 1869.30,
    y: 4867.85,
    z: 43.19
  }, 83],
  pedPos: [{
    x: 1870.97,
    y: 4865.91,
    z: 44.21
  }, 242],
  storagePos: {
    x: 1872.07,
    y: 4872.03,
    z: 43.42
  },
  type: ActivityType.Greenhouse,
  points: [[{
    x: 1876.27,
    y: 4851.08,
    z: 45.12
  }], [{
    x: 1881.96,
    y: 4845.71,
    z: 45.48
  }], [{
    x: 1887.13,
    y: 4840.53,
    z: 45.76
  }], [{
    x: 1892.08,
    y: 4835.45,
    z: 46.14
  }], [{
    x: 1896.29,
    y: 4831.15,
    z: 46.01
  }], [{
    x: 1899.99,
    y: 4824.28,
    z: 45.63
  }], [{
    x: 1904.76,
    y: 4819.12,
    z: 45.43
  }], [{
    x: 1910.01,
    y: 4814.30,
    z: 45.16
  }], [{
    x: 1916.61,
    y: 4808.17,
    z: 44.69
  }], [{
    x: 1921.50,
    y: 4803.15,
    z: 44.26
  }], [{
    x: 1926.62,
    y: 4808.06,
    z: 44.29
  }], [{
    x: 1919.83,
    y: 4814.55,
    z: 44.89
  }], [{
    x: 1915.13,
    y: 4819.87,
    z: 45.37
  }], [{
    x: 1909.40,
    y: 4825.66,
    z: 45.66
  }], [{
    x: 1901.35,
    y: 4835.07,
    z: 46.10
  }], [{
    x: 1898.33,
    y: 4838.21,
    z: 46.09
  }], [{
    x: 1893.12,
    y: 4843.72,
    z: 45.90
  }], [{
    x: 1888.05,
    y: 4848.96,
    z: 45.83
  }], [{
    x: 1882.72,
    y: 4853.97,
    z: 45.49
  }], [{
    x: 1886.24,
    y: 4859.65,
    z: 45.38
  }], [{
    x: 1891.16,
    y: 4854.49,
    z: 45.86
  }], [{
    x: 1897.01,
    y: 4848.53,
    z: 46.14
  }], [{
    x: 1903.17,
    y: 4842.38,
    z: 46.25
  }], [{
    x: 1911.98,
    y: 4838.80,
    z: 46.12
  }], [{
    x: 1916.87,
    y: 4833.37,
    z: 46.03
  }], [{
    x: 1922.37,
    y: 4827.56,
    z: 45.82
  }], [{
    x: 1928.18,
    y: 4822.03,
    z: 45.30
  }], [{
    x: 1934.51,
    y: 4815.89,
    z: 44.58
  }], [{
    x: 1939.53,
    y: 4821.35,
    z: 44.78
  }], [{
    x: 1935.17,
    y: 4825.86,
    z: 45.27
  }], [{
    x: 1931.14,
    y: 4829.73,
    z: 45.68
  }], [{
    x: 1913.72,
    y: 4847.02,
    z: 46.99
  }], [{
    x: 1908.70,
    y: 4851.93,
    z: 46.95
  }], [{
    x: 1903.54,
    y: 4857.03,
    z: 46.72
  }], [{
    x: 1897.70,
    y: 4862.81,
    z: 46.55
  }], [{
    x: 1892.10,
    y: 4868.35,
    z: 46.02
  }], [{
    x: 1902.55,
    y: 4890.53,
    z: 47.55
  }], [{
    x: 1909.17,
    y: 4883.94,
    z: 47.27
  }], [{
    x: 1915.80,
    y: 4877.64,
    z: 47.22
  }], [{
    x: 1921.81,
    y: 4871.53,
    z: 47.07
  }], [{
    x: 1925.58,
    y: 4867.75,
    z: 47.15
  }], [{
    x: 1929.18,
    y: 4864.07,
    z: 47.24
  }], [{
    x: 1934.35,
    y: 4868.37,
    z: 47.10
  }], [{
    x: 1930.17,
    y: 4872.82,
    z: 47.08
  }], [{
    x: 1924.03,
    y: 4879.13,
    z: 47.12
  }], [{
    x: 1918.34,
    y: 4884.45,
    z: 47.35
  }], [{
    x: 1911.30,
    y: 4891.36,
    z: 47.70
  }], [{
    x: 1906.50,
    y: 4896.11,
    z: 48.02
  }], [{
    x: 1913.79,
    y: 4901.69,
    z: 48.04
  }], [{
    x: 1919.22,
    y: 4896.34,
    z: 47.56
  }], [{
    x: 1924.43,
    y: 4891.11,
    z: 47.27
  }], [{
    x: 1929.64,
    y: 4885.85,
    z: 46.93
  }], [{
    x: 1935.04,
    y: 4880.47,
    z: 46.72
  }], [{
    x: 1939.21,
    y: 4876.16,
    z: 46.70
  }], [{
    x: 1946.92,
    y: 4884.43,
    z: 46.28
  }], [{
    x: 1942.54,
    y: 4888.76,
    z: 46.32
  }], [{
    x: 1936.15,
    y: 4894.99,
    z: 46.61
  }], [{
    x: 1930.52,
    y: 4900.82,
    z: 47.15
  }], [{
    x: 1923.33,
    y: 4908.17,
    z: 47.85
  }], [{
    x: 1927.65,
    y: 4912.52,
    z: 47.48
  }], [{
    x: 1928.48,
    y: 4911.66,
    z: 47.38
  }], [{
    x: 1927.55,
    y: 4912.90,
    z: 47.44
  }]]
}, {
  standPos: [{
    x: 2007.43,
    y: 4795.81,
    z: 40.94
  }, 224],
  pedPos: [{
    x: 2005.12,
    y: 4798.21,
    z: 41.97
  }, 46],
  storagePos: {
    x: 2011.58,
    y: 4799.25,
    z: 40.98
  },
  type: ActivityType.Greenhouse,
  points: [[{
    x: 2008.65,
    y: 4828.68,
    z: 42.74
  }], [{
    x: 2004.05,
    y: 4833.04,
    z: 43.25
  }], [{
    x: 1998.57,
    y: 4838.68,
    z: 43.57
  }], [{
    x: 1994.00,
    y: 4843.43,
    z: 43.91
  }], [{
    x: 1988.68,
    y: 4849.15,
    z: 44.03
  }], [{
    x: 1978.54,
    y: 4842.98,
    z: 43.98
  }], [{
    x: 1983.20,
    y: 4838.47,
    z: 44.01
  }], [{
    x: 1988.65,
    y: 4832.59,
    z: 43.90
  }], [{
    x: 1994.54,
    y: 4826.31,
    z: 43.48
  }], [{
    x: 2002.03,
    y: 4818.50,
    z: 42.75
  }], [{
    x: 1998.22,
    y: 4813.04,
    z: 42.68
  }], [{
    x: 1993.10,
    y: 4818.40,
    z: 43.29
  }], [{
    x: 1987.44,
    y: 4824.19,
    z: 43.67
  }], [{
    x: 1980.88,
    y: 4830.94,
    z: 44.01
  }], [{
    x: 1975.34,
    y: 4836.61,
    z: 44.11
  }], [{
    x: 1969.72,
    y: 4832.11,
    z: 44.07
  }], [{
    x: 1974.66,
    y: 4826.86,
    z: 43.81
  }], [{
    x: 1980.98,
    y: 4820.17,
    z: 43.66
  }], [{
    x: 1985.91,
    y: 4815.13,
    z: 43.36
  }], [{
    x: 1992.02,
    y: 4809.11,
    z: 42.73
  }]]
}, {
  pedPos: [{
    x: 2165.01,
    y: 5007.75,
    z: 41.50
  }, 28],
  storagePos: {
    x: 2158.38,
    y: 5015.43,
    z: 40.49
  },
  type: ActivityType.Animal,
  animalPoints: [[{
    x: 2164.95,
    y: 4999.24,
    z: 41.33
  }, 54, FarmAnimal.Cow], [{
    x: 2163.52,
    y: 4995.42,
    z: 41.28
  }, 32, FarmAnimal.Cow], [{
    x: 2157.96,
    y: 4992.82,
    z: 41.29
  }, 76, FarmAnimal.Cow], [{
    x: 2158.61,
    y: 4987.77,
    z: 41.31
  }, 89, FarmAnimal.Cow], [{
    x: 2153.38,
    y: 4984.43,
    z: 41.29
  }, 12, FarmAnimal.Cow], [{
    x: 2150.00,
    y: 4979.43,
    z: 41.33
  }, 65, FarmAnimal.Cow], [{
    x: 2144.80,
    y: 4978.45,
    z: 41.32
  }, 124, FarmAnimal.Cow], [{
    x: 2141.53,
    y: 4974.45,
    z: 41.41
  }, 234, FarmAnimal.Cow], [{
    x: 2128.70,
    y: 4987.95,
    z: 41.24
  }, 237, FarmAnimal.Cow], [{
    x: 2130.48,
    y: 4991.81,
    z: 41.38
  }, 98, FarmAnimal.Cow], [{
    x: 2134.84,
    y: 4996.32,
    z: 41.36
  }, 301, FarmAnimal.Cow], [{
    x: 2137.90,
    y: 4999.33,
    z: 41.41
  }, 32, FarmAnimal.Cow], [{
    x: 2141.05,
    y: 5003.06,
    z: 41.33
  }, 160, FarmAnimal.Cow], [{
    x: 2144.69,
    y: 5006.83,
    z: 41.32
  }, 178, FarmAnimal.Cow], [{
    x: 2148.70,
    y: 5010.74,
    z: 41.34
  }, 250, FarmAnimal.Cow], [{
    x: 2152.10,
    y: 5013.87,
    z: 41.33
  }, 289, FarmAnimal.Cow]]
}, {
  pedPos: [{
    x: 2196.72,
    y: 4974.17,
    z: 41.47
  }, 312],
  storagePos: {
    x: 2199.40,
    y: 4973.81,
    z: 40.54
  },
  type: ActivityType.Animal,
  animalPoints: [[{
    x: 2195.24,
    y: 4970.56,
    z: 41.37
  }, 54, FarmAnimal.Cow], [{
    x: 2191.93,
    y: 4966.18,
    z: 41.27
  }, 32, FarmAnimal.Cow], [{
    x: 2188.07,
    y: 4963.44,
    z: 41.26
  }, 76, FarmAnimal.Cow], [{
    x: 2185.47,
    y: 4959.27,
    z: 41.30
  }, 89, FarmAnimal.Cow], [{
    x: 2178.64,
    y: 4949.84,
    z: 41.39
  }, 12, FarmAnimal.Cow], [{
    x: 2182.11,
    y: 4954.87,
    z: 41.39
  }, 65, FarmAnimal.Cow], [{
    x: 2170.96,
    y: 4944.08,
    z: 41.28
  }, 124, FarmAnimal.Cow], [{
    x: 2153.67,
    y: 4962.26,
    z: 41.21
  }, 234, FarmAnimal.Cow], [{
    x: 2155.54,
    y: 4966.30,
    z: 41.49
  }, 237, FarmAnimal.Cow], [{
    x: 2161.73,
    y: 4969.78,
    z: 41.81
  }, 98, FarmAnimal.Cow], [{
    x: 2164.56,
    y: 4973.42,
    z: 41.33
  }, 301, FarmAnimal.Cow], [{
    x: 2166.65,
    y: 4978.20,
    z: 41.20
  }, 32, FarmAnimal.Cow], [{
    x: 2170.66,
    y: 4981.67,
    z: 41.30
  }, 160, FarmAnimal.Cow], [{
    x: 2175.46,
    y: 4983.94,
    z: 41.32
  }, 178, FarmAnimal.Cow], [{
    x: 2178.95,
    y: 4986.85,
    z: 41.37
  }, 250, FarmAnimal.Cow]]
}, {
  pedPos: [{
    x: 2251.42,
    y: 4886.98,
    z: 40.86
  }, 238],
  storagePos: {
    x: 2269.07,
    y: 4877.94,
    z: 39.90
  },
  type: ActivityType.Animal,
  animalPoints: [[{
    x: 2243.14,
    y: 4875.20,
    z: 40.83
  }, 54, FarmAnimal.Cow], [{
    x: 2237.89,
    y: 4883.05,
    z: 40.94
  }, 32, FarmAnimal.Cow], [{
    x: 2229.05,
    y: 4890.91,
    z: 40.67
  }, 76, FarmAnimal.Cow], [{
    x: 2220.34,
    y: 4897.72,
    z: 40.71
  }, 89, FarmAnimal.Cow], [{
    x: 2217.59,
    y: 4899.97,
    z: 40.79
  }, 12, FarmAnimal.Cow], [{
    x: 2212.22,
    y: 4905.75,
    z: 40.80
  }, 65, FarmAnimal.Cow], [{
    x: 2205.49,
    y: 4915.40,
    z: 40.56
  }, 124, FarmAnimal.Cow], [{
    x: 2221.99,
    y: 4935.12,
    z: 40.90
  }, 234, FarmAnimal.Cow], [{
    x: 2225.93,
    y: 4932.50,
    z: 40.80
  }, 237, FarmAnimal.Cow], [{
    x: 2230.36,
    y: 4927.26,
    z: 40.71
  }, 98, FarmAnimal.Cow], [{
    x: 2233.94,
    y: 4924.12,
    z: 40.81
  }, 301, FarmAnimal.Cow], [{
    x: 2240.35,
    y: 4919.40,
    z: 40.75
  }, 32, FarmAnimal.Cow], [{
    x: 2247.66,
    y: 4910.35,
    z: 40.71
  }, 160, FarmAnimal.Cow], [{
    x: 2256.54,
    y: 4903.46,
    z: 40.78
  }, 178, FarmAnimal.Cow], [{
    x: 2264.03,
    y: 4894.54,
    z: 40.89
  }, 250, FarmAnimal.Cow], [{
    x: 2242.84,
    y: 4849.85,
    z: 40.73
  }, 250, FarmAnimal.Cow], [{
    x: 2248.96,
    y: 4843.35,
    z: 40.66
  }, 250, FarmAnimal.Cow], [{
    x: 2255.77,
    y: 4835.10,
    z: 40.66
  }, 250, FarmAnimal.Cow]]
}, {
  pedPos: [{
    x: 2381.86,
    y: 4806.58,
    z: 37.10
  }, 254],
  storagePos: {
    x: 2378.57,
    y: 4803.37,
    z: 36.02
  },
  type: ActivityType.Animal,
  animalPoints: [[{
    x: 2400.72,
    y: 4777.23,
    z: 34.52
  }, 54, FarmAnimal.Cow], [{
    x: 2409.39,
    y: 4769.28,
    z: 34.30
  }, 32, FarmAnimal.Cow], [{
    x: 2415.95,
    y: 4761.91,
    z: 34.30
  }, 76, FarmAnimal.Cow], [{
    x: 2423.98,
    y: 4753.13,
    z: 34.30
  }, 89, FarmAnimal.Cow], [{
    x: 2432.51,
    y: 4745.14,
    z: 34.30
  }, 12, FarmAnimal.Cow], [{
    x: 2439.83,
    y: 4738.39,
    z: 34.30
  }, 65, FarmAnimal.Cow], [{
    x: 2472.20,
    y: 4761.42,
    z: 34.30
  }, 124, FarmAnimal.Cow], [{
    x: 2466.12,
    y: 4770.86,
    z: 34.38
  }, 234, FarmAnimal.Cow], [{
    x: 2456.14,
    y: 4777.30,
    z: 34.49
  }, 237, FarmAnimal.Cow], [{
    x: 2449.21,
    y: 4785.15,
    z: 34.62
  }, 98, FarmAnimal.Cow], [{
    x: 2440.93,
    y: 4792.89,
    z: 34.66
  }, 301, FarmAnimal.Cow], [{
    x: 2432.20,
    y: 4802.65,
    z: 34.83
  }, 32, FarmAnimal.Cow], [{
    x: 2493.94,
    y: 4762.92,
    z: 34.37
  }, 160, FarmAnimal.Cow], [{
    x: 2502.59,
    y: 4753.77,
    z: 34.30
  }, 178, FarmAnimal.Cow], [{
    x: 2509.56,
    y: 4745.43,
    z: 34.30
  }, 250, FarmAnimal.Cow], [{
    x: 2517.84,
    y: 4737.13,
    z: 34.30
  }, 250, FarmAnimal.Cow]]
}];
const ACTIVITY_SETTINGS = exports.ACTIVITY_SETTINGS = new Map([[ActivityType.Field, {
  managerPedHash: 0x94562DD7,
  name: 'Поле',
  pointSize: 5,
  vehicleModel: 'tractor2'
}], [ActivityType.Animal, {
  managerPedHash: 0x94562DD7,
  name: 'Загон с животными',
  pointSize: 1
}], [ActivityType.Greenhouse, {
  managerPedHash: 0x94562DD7,
  name: 'Теплица',
  pointSize: 1
}]]);
const SUPPLIES_LIST = exports.SUPPLIES_LIST = [{
  inventoryItemId: 7000,
  seedModel: 'prop_veg_crop_04_leaf',
  vegModel: 'farm_props_Potato',
  vegInventoryItemId: 7020,
  type: 'field'
}, {
  inventoryItemId: 7001,
  seedModel: 'prop_veg_crop_04_leaf',
  vegModel: 'farm_props_Carrot',
  vegInventoryItemId: 7021,
  type: 'field'
}, {
  inventoryItemId: 7002,
  seedModel: 'prop_veg_crop_04_leaf',
  vegModel: 'prop_veg_crop_01',
  vegInventoryItemId: 7022,
  type: 'field'
}, {
  inventoryItemId: 7003,
  seedModel: 'farm_props_Cucumber_a',
  vegModel: 'farm_props_Cucumber_b',
  vegInventoryItemId: 7023,
  type: 'field'
}, {
  inventoryItemId: 7004,
  seedModel: 'prop_veg_crop_04_leaf',
  vegModel: 'farm_props_Radish',
  vegInventoryItemId: 7024,
  type: 'field'
}, {
  inventoryItemId: 7005,
  seedModel: 'prop_veg_crop_04_leaf',
  vegModel: 'farm_props_Onion',
  vegInventoryItemId: 7025,
  type: 'field'
}, {
  inventoryItemId: 7006,
  seedModel: 'farm_props_Strawberry_001_a',
  vegModel: 'farm_props_Strawberry_001_b',
  vegInventoryItemId: 7026,
  type: 'greenhouse'
}, {
  inventoryItemId: 7007,
  seedModel: 'prop_veg_crop_04_leaf',
  vegModel: 'farm_props_Watermelon',
  vegInventoryItemId: 7027,
  type: 'greenhouse'
}, {
  inventoryItemId: 7008,
  seedModel: 'farm_props_Raspberry_a',
  vegModel: 'farm_props_Raspberry_b',
  vegInventoryItemId: 7028,
  type: 'greenhouse'
}, {
  inventoryItemId: 7010,
  seedModel: 'farm_props_Blueberry_a',
  vegModel: 'farm_props_Blueberry_b',
  vegInventoryItemId: 7030,
  type: 'greenhouse'
}];
const FEED_LIST = exports.FEED_LIST = [{
  inventoryItemId: 9100,
  animal: FarmAnimal.Cow,
  power: 50
}, {
  inventoryItemId: 9101,
  animal: FarmAnimal.Cow,
  power: 20
}, {
  inventoryItemId: 9102,
  animal: FarmAnimal.Cow,
  power: 25
}];
},{}],"jhkh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FarmActivityBase = void 0;
class FarmActivityBase {
  constructor(id, points) {
    this.workColshapes = new Map();
    this.id = id;
    if (this.workColshapes) this.destroyAllWorkColshapes();
  }
  destroyAllWorkColshapes() {
    this.workColshapes.forEach(shape => shape.destroy());
    this.workColshapes = new Map();
  }
}
exports.FarmActivityBase = FarmActivityBase;
},{}],"MgyL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldFarmActivity = void 0;
var _checkpoints = require("../checkpoints");
var _custom = require("../custom.event");
var _IFarmActivity = require("./IFarmActivity");
var _config = require("../../../shared/farm/config");
class FieldFarmActivity extends _IFarmActivity.FarmActivityBase {
  constructor(data) {
    super(data.id, data.points);
    this.data = data;
    this.onWorkStarted(data.points);
  }
  onPointProcessed(idx) {
    var _this$workColshapes$g;
    (_this$workColshapes$g = this.workColshapes.get(idx)) === null || _this$workColshapes$g === void 0 || _this$workColshapes$g.destroy();
  }
  onWorkStarted(points) {
    _custom.CustomEvent.triggerCef('farmHud:show', _config.ActivityType.Field, this.data.stage);
    if (this.data.stage === _config.FieldStage.Collection) {
      points.map((point, idx) => {
        if (!point.processed) {
          const z = mp.game.gameplay.getGroundZFor3dCoord(point.pos.x, point.pos.y, 1000, 0, true);
          this.workColshapes.set(idx, _checkpoints.colshapes.new(new mp.Vector3(point.pos.x, point.pos.y, z + 0.1), 'Собрать урожай', player => {
            _custom.CustomEvent.triggerServer('farm:workPoint:enter', idx);
          }, {
            type: -1,
            radius: 2.5
          }));
        }
      });
    } else {
      points.map((point, idx) => {
        if (!point.processed) {
          const z = mp.game.gameplay.getGroundZFor3dCoord(point.pos.x, point.pos.y, 1000, 0, true);
          this.workColshapes.set(idx, _checkpoints.colshapes.new(new mp.Vector3(point.pos.x, point.pos.y, z + 0.1), '', null, {
            onEnterHandler: player => {
              _custom.CustomEvent.triggerServer('farm:workPoint:enter', idx);
            },
            radius: 2,
            type: 27,
            rotation: 180,
            color: [17, 255, 0, 100]
          }));
        }
      });
    }
  }
}
exports.FieldFarmActivity = FieldFarmActivity;
},{"../checkpoints":"XCJl","../custom.event":"py8h","./IFarmActivity":"jhkh","../../../shared/farm/config":"VMHP"}],"oe3F":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GreenhouseFarmActivity = void 0;
var _checkpoints = require("../checkpoints");
var _custom = require("../custom.event");
var _IFarmActivity = require("./IFarmActivity");
var _config = require("../../../shared/farm/config");
class GreenhouseFarmActivity extends _IFarmActivity.FarmActivityBase {
  constructor(data) {
    super(data.id, data.points);
    this.data = data;
    this.onWorkStarted(data.points);
  }
  onPointProcessed(idx) {
    var _this$workColshapes$g;
    (_this$workColshapes$g = this.workColshapes.get(idx)) === null || _this$workColshapes$g === void 0 || _this$workColshapes$g.destroy();
  }
  onWorkStarted(points) {
    _custom.CustomEvent.triggerCef('farmHud:show', _config.ActivityType.Greenhouse, this.data.stage);
    if (this.data.stage == _config.GreenhouseStage.Collection) {
      points.map((point, idx) => {
        if (!point.processed) {
          this.workColshapes.set(idx, _checkpoints.colshapes.new(new mp.Vector3(point.pos.x, point.pos.y, point.pos.z - 1), 'Собрать урожай', _ => _custom.CustomEvent.triggerServer('farm:workPoint:enter', idx), {
            type: -1,
            radius: 2
          }));
        }
      });
    } else if (this.data.stage == _config.GreenhouseStage.Water) {
      points.map((point, idx) => {
        if (!point.processed) {
          this.workColshapes.set(idx, _checkpoints.colshapes.new(new mp.Vector3(point.pos.x, point.pos.y, point.pos.z - 1), 'Полить', _ => _custom.CustomEvent.triggerServer('farm:workPoint:enter', idx), {
            type: -1,
            radius: 2
          }));
        }
      });
    } else {
      points.map((point, idx) => {
        if (!point.processed) {
          this.workColshapes.set(idx, _checkpoints.colshapes.new(new mp.Vector3(point.pos.x, point.pos.y, point.pos.z - 1), '', null, {
            onEnterHandler: _ => {
              _custom.CustomEvent.triggerServer('farm:workPoint:enter', idx);
            },
            radius: 2,
            type: 27,
            rotation: 180,
            color: [17, 255, 0, 100]
          }));
        }
      });
    }
  }
}
exports.GreenhouseFarmActivity = GreenhouseFarmActivity;
},{"../checkpoints":"XCJl","../custom.event":"py8h","./IFarmActivity":"jhkh","../../../shared/farm/config":"VMHP"}],"B3CB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimalFarmActivity = void 0;
var _IFarmActivity = require("./IFarmActivity");
var _custom = require("../custom.event");
var _checkpoints = require("../checkpoints");
class AnimalFarmActivity extends _IFarmActivity.FarmActivityBase {
  constructor(data) {
    super(data.id, data.points);
    this.data = data;
    this._animals = [];
    data.animals.forEach(a => {
      this._animals.push([a, _checkpoints.colshapes.new(new mp.Vector3(data.points[a.id].pos.x, data.points[a.id].pos.y, data.points[a.id].pos.z), 'Корова', _ => {
        _custom.CustomEvent.triggerServer('farm:workPoint:enter', a.id);
      }, {
        type: -1,
        radius: 2
      })]);
    });
    _custom.CustomEvent.registerServer('farm:animal:update', animal => {
      const animalToUpdate = this._animals.find(a => a[0].id == animal.id);
      animalToUpdate[0] = animal;
    });
  }
  onPointProcessed(idx) {}
  onWorkStarted(points) {}
}
exports.AnimalFarmActivity = AnimalFarmActivity;
},{"./IFarmActivity":"jhkh","../custom.event":"py8h","../checkpoints":"XCJl"}],"Mftc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FarmController = void 0;
var _custom = require("../custom.event");
var _user = require("../user");
var _config = require("../../../shared/farm/config");
var _field = require("./field");
var _greenhouse = require("./greenhouse");
var _animal = require("./animal");
class FarmController {
  init() {
    _custom.CustomEvent.registerServer('farm:work:start', data => {
      var _this$currentActivity;
      (_this$currentActivity = this.currentActivity) === null || _this$currentActivity === void 0 || _this$currentActivity.destroyAllWorkColshapes();
      switch (data.type) {
        case _config.ActivityType.Field:
          this.currentActivity = new _field.FieldFarmActivity(data);
          break;
        case _config.ActivityType.Greenhouse:
          this.currentActivity = new _greenhouse.GreenhouseFarmActivity(data);
          break;
        case _config.ActivityType.Animal:
          this.currentActivity = new _animal.AnimalFarmActivity(data);
          break;
      }
    });
    _custom.CustomEvent.registerServer('farm:point:processed', pointIdx => {
      this.currentActivity.onPointProcessed(pointIdx);
    });
    _custom.CustomEvent.registerServer('farm:work:stop', () => {
      this.currentActivity.destroyAllWorkColshapes();
      this.currentActivity = null;
      _custom.CustomEvent.triggerCef('farmHud:hide');
    });
    mp.events.add('playerStartedEnterVehicle', handle => {
      const vehicle = mp.vehicles.atHandle(handle);
      const vehicleFarmActivityId = vehicle.getVariable('farm');
      if (!vehicleFarmActivityId) return;
      if (!this.currentActivity || vehicleFarmActivityId != this.currentActivity.id) {
        _user.user.notify('Вы не работаете на ферме которой принадлежит этот транспорт', 'warning');
        mp.players.local.clearTasksImmediately();
      }
    });
  }
}
exports.FarmController = FarmController;
new FarmController().init();
},{"../custom.event":"py8h","../user":"ggMw","../../../shared/farm/config":"VMHP","./field":"MgyL","./greenhouse":"oe3F","./animal":"B3CB"}],"r8Xy":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
function setAllLightsState(state) {
  for (let i = 0; i < 16; i++) {
    mp.game.graphics.setLightsState(i, state);
  }
}
async function blinkLights(blinkTimeMs) {
  setAllLightsState(true);
  await mp.game.waitAsync(blinkTimeMs / 2);
  setAllLightsState(false);
  await mp.game.waitAsync(blinkTimeMs / 2);
}
async function startBlackout() {
  await blinkLights(1000);
  await mp.game.waitAsync(5000);
  await blinkLights(2000);
  await blinkLights(3000);
  await blinkLights(5000);
  await blinkLights(1000);
  await blinkLights(500);
  await blinkLights(200);
  await blinkLights(200);
  await blinkLights(200);
  await mp.game.waitAsync(1500);
  setAllLightsState(true);
}
_custom.CustomEvent.registerServer('blackout:blink', async timeMs => {
  await blinkLights(timeMs);
});
_custom.CustomEvent.registerServer('blackout:start', async () => {
  await startBlackout();
});
_custom.CustomEvent.registerServer('blackout:set', state => {
  for (let i = 0; i < 16; i++) {
    mp.game.graphics.setLightsState(i, state);
  }
});
},{"./custom.event":"py8h"}],"BLRb":[function(require,module,exports) {
"use strict";

var _hooks = require("../../../shared/hooks");
var _interact = require("../interact");
var _custom = require("../custom.event");
var _system = require("../../../shared/system");
const PED_NAMES_RENDER_DISTANCE = 10;
(0, _hooks.registerHookHandler)(_interact.RAYCAST_DETECT_ENTITY_HOOK, raycastEntity => {
  if (raycastEntity.type !== _interact.ENTITY_TYPES.PED) {
    return null;
  }
  if (!raycastEntity.getVariable('advancedPedName')) {
    return null;
  }
  return {
    helpText: 'Поговорить с ' + raycastEntity.getVariable('advancedPedName'),
    onInteract: entity => {
      _custom.CustomEvent.triggerServer('advancedPed:interact', entity.remoteId);
    }
  };
});
let advancedNpcPeds = [];
function updateAdvancedNpc() {
  const peds = [];
  mp.peds.forEachInStreamRange(ped => {
    const pos = ped === null || ped === void 0 ? void 0 : ped.getCoordsAutoAlive();
    if (_system.systemUtil.distanceToPos(pos, mp.players.local.position) > PED_NAMES_RENDER_DISTANCE) {
      return;
    }
    if (ped.getVariable('advancedPedName')) {
      peds.push(ped);
    }
  });
  advancedNpcPeds = peds;
}
setInterval(updateAdvancedNpc, 500);
mp.events.add('render', () => {
  for (let ped of advancedNpcPeds) {
    const pos = ped === null || ped === void 0 ? void 0 : ped.getCoordsAutoAlive();
    const name = ped === null || ped === void 0 ? void 0 : ped.getVariable('advancedPedName');
    if (pos) {
      mp.game.graphics.drawText(name, [pos.x, pos.y, pos.z + 1], {
        font: 0,
        color: [255, 255, 255, 255],
        scale: [0.4, 0.4],
        outline: true
      });
    }
  }
});
},{"../../../shared/hooks":"H3J5","../interact":"m19G","../custom.event":"py8h","../../../shared/system":"SNxO"}],"qBnp":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _gui = require("../gui");
const gameplayCam = mp.cameras.new('gameplay');
const CAMERA_SLIDE_TIME_MS = 500;
let dialogCamera = null;
_custom.CustomEvent.registerServer('dialogs:open', (characterName, dialogNodeDto, dialogNpc) => {
  const ped = getDialogNpcPed(dialogNpc);
  setTimeout(() => {
    _gui.gui.setGui('dialogs');
    _custom.CustomEvent.triggerCef('dialogs::setDialog', characterName, dialogNodeDto);
  }, CAMERA_SLIDE_TIME_MS);
});
function getDialogNpcPed(dialogNpc) {
  switch (dialogNpc.type) {
    case 'serverPed':
      return mp.peds.atRemoteId(dialogNpc.id);
    case 'clientPed':
      return mp.peds.atHandle(dialogNpc.id);
  }
  return null;
}
_custom.CustomEvent.registerServer('dialogs:close', () => {
  _gui.gui.setGui(null);
});
},{"../custom.event":"py8h","../gui":"bk91"}],"M82h":[function(require,module,exports) {
"use strict";

require("./npc");
require("./dialogs");
},{"./npc":"BLRb","./dialogs":"qBnp"}],"qBEb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FIND_OBJECT_QUEST_STEP_INIT_EVENT = exports.FIND_OBJECT_QUEST_STEP_DESTROY_EVENT = exports.FIND_OBJECT_QUEST_STEP_COLLECT_EVENT = exports.ENTER_VEHICLE_STEP_MARK_VEHICLE = exports.ENTER_VEHICLE_STEP_DESTROY_MARKER = exports.COLLECT_CHECKPOINT_INIT_EVENT = exports.COLLECT_CHECKPOINT_DESTROY_EVENT = exports.COLLECT_CHECKPOINT_COLLECTED_EVENT = void 0;
const FIND_OBJECT_QUEST_STEP_INIT_EVENT = exports.FIND_OBJECT_QUEST_STEP_INIT_EVENT = 'quests:findObject:init';
const FIND_OBJECT_QUEST_STEP_COLLECT_EVENT = exports.FIND_OBJECT_QUEST_STEP_COLLECT_EVENT = 'quests:findObject:collect';
const FIND_OBJECT_QUEST_STEP_DESTROY_EVENT = exports.FIND_OBJECT_QUEST_STEP_DESTROY_EVENT = 'quests:findObject:destroy';
const COLLECT_CHECKPOINT_INIT_EVENT = exports.COLLECT_CHECKPOINT_INIT_EVENT = 'quests:collectCheckpoint:init';
const COLLECT_CHECKPOINT_DESTROY_EVENT = exports.COLLECT_CHECKPOINT_DESTROY_EVENT = 'quests:collectCheckpoint:destroy';
const COLLECT_CHECKPOINT_COLLECTED_EVENT = exports.COLLECT_CHECKPOINT_COLLECTED_EVENT = 'quests:collectCheckpoint:collected';
const ENTER_VEHICLE_STEP_MARK_VEHICLE = exports.ENTER_VEHICLE_STEP_MARK_VEHICLE = 'quests:enterVehicleStepQuest:markVehicle';
const ENTER_VEHICLE_STEP_DESTROY_MARKER = exports.ENTER_VEHICLE_STEP_DESTROY_MARKER = 'quests:enterVehicleStepQuest:destroy';
},{}],"CwtS":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _config = require("../../../../shared/advancedQuests/config");
var _checkpoints = require("../../checkpoints");
let questItems = [];
_custom.CustomEvent.registerServer(_config.FIND_OBJECT_QUEST_STEP_INIT_EVENT, (objectModel, positions) => {
  for (let position of positions) {
    const object = mp.objects.new(objectModel, position[0], {
      alpha: 255,
      dimension: mp.players.local.dimension,
      rotation: new mp.Vector3(0, 0, position[1])
    });
    const colshape = new _checkpoints.colshapeHandle(position[0], 'Подобрать предмет', player => {
      _custom.CustomEvent.triggerServer(_config.FIND_OBJECT_QUEST_STEP_COLLECT_EVENT);
      colshape.destroy();
      object.destroy();
    }, {
      dimension: mp.players.local.dimension,
      radius: 2,
      type: -1
    });
    questItems.push({
      obj: object,
      colshape: colshape
    });
  }
});
_custom.CustomEvent.registerServer(_config.FIND_OBJECT_QUEST_STEP_DESTROY_EVENT, () => {
  for (let object of questItems) {
    if (object.obj && object.obj.handle) {
      object.obj.destroy();
    }
    if (object.colshape && object.colshape.handle) {
      object.colshape.destroy();
    }
  }
  questItems = [];
});
},{"../../custom.event":"py8h","../../../../shared/advancedQuests/config":"qBEb","../../checkpoints":"XCJl"}],"aZWf":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _config = require("../../../../shared/advancedQuests/config");
var _checkpoints = require("../../checkpoints");
let checkpoint;
_custom.CustomEvent.registerServer(_config.COLLECT_CHECKPOINT_INIT_EVENT, (position, helpText) => {
  destroyCheckpoint();
  checkpoint = new _checkpoints.colshapeHandle(position, helpText, player => {
    _custom.CustomEvent.triggerServer(_config.COLLECT_CHECKPOINT_COLLECTED_EVENT);
    destroyCheckpoint();
  }, {
    dimension: mp.players.local.dimension,
    type: 1,
    color: [255, 0, 0, 100]
  });
});
_custom.CustomEvent.registerServer(_config.COLLECT_CHECKPOINT_DESTROY_EVENT, () => {
  destroyCheckpoint();
});
function destroyCheckpoint() {
  if (checkpoint) {
    checkpoint.destroy();
  }
  checkpoint = null;
}
},{"../../custom.event":"py8h","../../../../shared/advancedQuests/config":"qBEb","../../checkpoints":"XCJl"}],"XyaJ":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _config = require("../../../../shared/advancedQuests/config");
let markedVehicleRemoteId = null;
let markedVehicle = null;
setInterval(() => {
  if (!markedVehicleRemoteId) {
    return;
  }
  const vehicle = mp.vehicles.atRemoteId(markedVehicleRemoteId);
  if (!vehicle || !vehicle.handle) {
    return;
  }
  markedVehicle = vehicle;
}, 500);
mp.events.add('render', () => {
  if (!markedVehicle) {
    return;
  }
  const position = markedVehicle.position;
  mp.game.graphics.drawMarker(0, position.x, position.y, position.z + 1.5, 0, 0, 0, 0, 0, 0, 1, 1, 0.5, 139, 0, 255, 220, false, false, 2, false, null, null, false);
});
_custom.CustomEvent.registerServer(_config.ENTER_VEHICLE_STEP_MARK_VEHICLE, vehicleRemoteId => {
  markedVehicleRemoteId = vehicleRemoteId;
});
_custom.CustomEvent.registerServer(_config.ENTER_VEHICLE_STEP_DESTROY_MARKER, () => {
  markedVehicleRemoteId = null;
  markedVehicle = null;
});
},{"../../custom.event":"py8h","../../../../shared/advancedQuests/config":"qBEb"}],"gkBA":[function(require,module,exports) {
"use strict";

require("./findObjectQuestStep");
require("./collectCheckpointQuestStep");
require("./enterVehicleQuestStep");
},{"./findObjectQuestStep":"CwtS","./collectCheckpointQuestStep":"aZWf","./enterVehicleQuestStep":"XyaJ"}],"Y8OG":[function(require,module,exports) {
"use strict";

require("./questSteps");
},{"./questSteps":"gkBA"}],"feKp":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
var _gui = require("./gui");
mp.events.add('crosshair:save', settingsData => {
  mp.storage.data.crosshair = JSON.parse(settingsData);
  mp.storage.flush();
});
let crosshairEnabled = false;
let currentAimType = 'world';
mp.events.add('render', () => {
  var _mp$storage$data$cros;
  if (_gui.gui.currentGui || !((_mp$storage$data$cros = mp.storage.data.crosshair) !== null && _mp$storage$data$cros !== void 0 && _mp$storage$data$cros.enable) || mp.players.local.weapon == 2725352035) return;
  mp.game.ui.hideHudComponentThisFrame(14);
  if (crosshairEnabled) {
    const entityAimingAt = mp.game.player.getEntityIsFreeAimingAt();
    if (currentAimType == 'world' && typeof entityAimingAt === 'object' && entityAimingAt.type === 'player') {
      _custom.CustomEvent.triggerCef('crosshair:drawSecondaryColor');
      currentAimType = 'entity';
    } else if ((!entityAimingAt || typeof entityAimingAt === 'number' || typeof entityAimingAt === 'object' && entityAimingAt.type != 'player') && currentAimType == 'entity') {
      currentAimType = 'world';
      _custom.CustomEvent.triggerCef('crosshair:rerender');
    }
  }
  if (mp.game.controls.isControlJustReleased(32, 25) && crosshairEnabled) {
    _custom.CustomEvent.triggerCef('crosshair:disable');
    crosshairEnabled = false;
  }
  if (mp.game.controls.isControlJustPressed(32, 25) && !crosshairEnabled) {
    _custom.CustomEvent.triggerCef('crosshair:enable');
    crosshairEnabled = true;
  }
});
mp.keys.bind(121, false, () => {
  _custom.CustomEvent.triggerCef('crosshair:setSettings', mp.storage.data.crosshair);
  _custom.CustomEvent.triggerCef('crosshair:rerender');
});
mp.events.add('setLogin', () => {
  _custom.CustomEvent.triggerCef('crosshair:setSettings', mp.storage.data.crosshair);
  _custom.CustomEvent.triggerCef('crosshair:rerender');
  _custom.CustomEvent.triggerCef('crosshair:disable');
});
},{"./custom.event":"py8h","./gui":"bk91"}],"Nv2L":[function(require,module,exports) {
"use strict";

var _custom = require("./custom.event");
_custom.CustomEvent.registerServer('fxes:addExplosion', (position, type, damage, isAudible, isInvisible, cameraShake) => {
  mp.game.fire.addExplosion(position.x, position.y, position.z, type, damage, isAudible, isInvisible, cameraShake);
});
},{"./custom.event":"py8h"}],"SLn7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NATIVES = exports.AUTOPILOT_SPEED = exports.AUTOPILOT_ITEM_ID = exports.AUTOPILOT_DRIVING_MODE = void 0;
const NATIVES = exports.NATIVES = {
  IsWaypointActive: '0x1DD1F58F493F1DA5',
  GetWaypointBlipEnumId: '0x186E5D252FA50E7D',
  GetFirstBlipInfoId: '0x1BEDE233E6CD2A1F',
  GetNextBlipInfoId: '0x14F96AA50D6FBEA7',
  DoesBlipExist: '0xA6DB27D19ECBB7DA',
  GetBlipInfoIdType: '0xBE9B0959FFD0779B'
};
const AUTOPILOT_SPEED = exports.AUTOPILOT_SPEED = 55;
const AUTOPILOT_DRIVING_MODE = exports.AUTOPILOT_DRIVING_MODE = 2883621;
const AUTOPILOT_ITEM_ID = exports.AUTOPILOT_ITEM_ID = 8001;
},{}],"IYHr":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _autopilot = require("../../../shared/autopilot");
var _user = require("../user");
class Autopilot {
  constructor() {
    this.isActive = false;
    this.player = mp.players.local;
    this.point = null;
    this.interval = null;
    _custom.CustomEvent.register('autopilot', () => this.clickHandle());
    _custom.CustomEvent.registerServer('autopilot:toggle', () => this.toggleHandle());
  }
  clickHandle() {
    if (!this.player.vehicle) return;
    _custom.CustomEvent.triggerServer('autopilot:isInstalled');
  }
  toggleHandle() {
    this.isActive ? this.deactivate() : this.activate();
  }
  activate() {
    const waypointActive = mp.game.invoke(_autopilot.NATIVES.IsWaypointActive),
      num = mp.game.invoke(_autopilot.NATIVES.GetWaypointBlipEnumId),
      firstBlipId = mp.game.invoke(_autopilot.NATIVES.GetFirstBlipInfoId, num),
      nextBlipId = mp.game.invoke(_autopilot.NATIVES.GetNextBlipInfoId, num);
    for (let a = firstBlipId; mp.game.invoke(_autopilot.NATIVES.DoesBlipExist, a); a = nextBlipId) {
      if (4 === mp.game.invoke(_autopilot.NATIVES.GetBlipInfoIdType, a) && !!waypointActive) {
        this.point = mp.game.ui.getBlipInfoIdCoord(a);
        break;
      }
    }
    if (!this.point) {
      this.point = null;
      return _user.user.notify('Необходимо установить точку на карте для активации автопилота', 'error');
    } else {
      _user.user.notify('Маршрут построен, начинаем движение', 'info');
      this.isActive = true;
      this.player.taskVehicleDriveToCoord(this.player.vehicle.handle, this.point.x, this.point.y, this.point.z, _autopilot.AUTOPILOT_SPEED, 1, 1, _autopilot.AUTOPILOT_DRIVING_MODE, 30, 1);
      this.interval = setInterval(() => {
        if (!this.isActive) {
          clearInterval(this.interval);
          this.isActive = false;
          this.point = null;
          this.player.clearTasks();
          return;
        }
        const veh = this.player.vehicle;
        if (!veh) {
          clearInterval(this.interval);
          this.isActive = false;
          this.point = null;
          this.player.clearTasks();
          this.player.taskVehicleTempAction(veh.handle, 27, 10000);
          return;
        }
        if (!veh.getIsEngineRunning()) {
          clearInterval(this.interval);
          this.isActive = false;
          this.point = null;
          this.player.clearTasks();
          this.player.taskVehicleTempAction(veh.handle, 27, 10000);
          _user.user.notify('Двигатель заглушён, автопилот остановлен', 'info');
          return;
        }
        const finishPosition = mp.game.pathfind.getClosestVehicleNode(this.point.x, this.point.y, this.point.z, 1, 3.0, 0);
        if (mp.game.system.vdist(veh.position.x, veh.position.y, veh.position.z, finishPosition.x, finishPosition.y, finishPosition.z) < 15) {
          clearInterval(this.interval);
          this.isActive = false;
          this.point = null;
          this.player.clearTasks();
          this.player.taskVehicleTempAction(veh.handle, 27, 10000);
          _user.user.notify('Вы достигли точки назначения', 'info');
        }
      }, 300);
    }
  }
  deactivate() {
    const veh = this.player.vehicle;
    if (!veh) return;
    this.isActive = false;
    this.point = null;
    this.player.clearTasks();
    this.player.taskVehicleTempAction(veh.handle, 27, 10000);
  }
}
new Autopilot();
},{"../custom.event":"py8h","../../../shared/autopilot":"SLn7","../user":"ggMw"}],"CAVh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SHIP_PROP = exports.REWARDS = exports.DivingMaps = exports.DRESS_CONFIG_MALE = exports.DRESS_CONFIG_FEMALE = exports.DIVING_COSTUME_ITEM_ID = exports.CHEST_PROP = void 0;
const CHEST_PROP = exports.CHEST_PROP = 'xm_prop_x17_chest_closed';
const SHIP_PROP = exports.SHIP_PROP = 'cs2_06b_boat03';
const DIVING_COSTUME_ITEM_ID = exports.DIVING_COSTUME_ITEM_ID = 6500;
const DRESS_CONFIG_MALE = exports.DRESS_CONFIG_MALE = [[3, 31, 0], [8, 151, 0], [11, 243, 0], [4, 94, 0], [6, 67, 0], [102, 2, 0]];
const DRESS_CONFIG_FEMALE = exports.DRESS_CONFIG_FEMALE = [[3, 40, 0], [8, 187, 0], [11, 42, 0], [4, 97, 0], [6, 70, 0]];
const DivingMaps = exports.DivingMaps = [{
  itemId: 6526,
  slices: [6501, 6502, 6503, 6504, 6505, 6506]
}, {
  itemId: 6527,
  slices: [6507, 6508, 6509, 6510, 6511, 6512]
}, {
  itemId: 6528,
  slices: [6513, 6514, 6515, 6516, 6517, 6518]
}];
const REWARDS = exports.REWARDS = [6519, 6520, 6521, 6522, 6523, 6524, 6525];
},{}],"j7V0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiveManager = void 0;
var _work = require("../../../shared/diving/work.config");
var _checkpoints = require("../checkpoints");
var _custom = require("../custom.event");
var _user = require("../user");
var _blips = require("../blips");
var _gui = require("../gui");
var _system = require("../system");
class DiveManager {
  constructor(data) {
    this._inClothes = false;
    this._isGoingToWater = null;
    this._haveTime = 40;
    this._routeBlip = false;
    this._isCompleted = false;
    this._chestMiniGameCompleted = false;
    this._isMapMission = false;
    this._oxygen = 1200;
    this._maxOxygen = 1200;
    this._divePosition = data.divePosition;
    this._chestData = data.chestData;
    this._player = mp.players.local;
    this._isMapMission = data.shipData !== undefined;
    this._chestObject = mp.objects.new(_work.CHEST_PROP, this._chestData.position, {
      rotation: this._chestData.rotation
    });
    this._chestBlip = _system.system.createBlip(351, 6, this._chestData.position, "Клад", 0, true);
    this._chestInteraction = _checkpoints.colshapes.new(new mp.Vector3(this._chestObject.position.x, this._chestObject.position.y, this._chestObject.position.z - 1), 'Взломать сундук', () => {
      if (!this._inClothes) return _user.user.notify('Необходимо надеть водолазный костюм');
      this._player.freezePosition(true);
      if (!this._chestMiniGameCompleted) {
        data.shipData !== undefined ? this.openMiniGame('chest') : this.openMiniGame('lock');
      } else {
        this.openMiniGame('net');
      }
    }, {
      color: [0, 0, 0, 0],
      radius: 3
    });
    if (data.shipData) {
      this._shipObject = mp.objects.new(_work.SHIP_PROP, data.shipData.position, {
        rotation: data.shipData.rotation
      });
    }
    (0, _blips.createRouteBlip)('Место погружения', this._divePosition, 81);
    this._routeBlip = true;
    this._interaction = _checkpoints.colshapes.new(new mp.Vector3(this._divePosition.x, this._divePosition.y, this._divePosition.z - 1), "Надеть костюм", () => {
      if (this._inClothes) return _user.user.notify('Вы уже одели водолазный костюм', 'error');
      _custom.CustomEvent.triggerServer('diving:dive');
    }, {
      radius: 1.5,
      type: 1,
      color: [255, 255, 0, 255]
    });
    this._interval = setInterval(() => {
      if (this._isGoingToWater === null) return;
      if (this.isInWater()) {
        if (this._isGoingToWater === true) {
          this._isGoingToWater = false;
          this._haveTime = 0;
        }
      } else {
        if (this._isGoingToWater === true) {
          if (this._haveTime <= 0) {
            this.dropCloth();
          } else {
            this._haveTime -= 1;
          }
        } else {
          this.dropCloth();
          if (this._isCompleted) {
            mp.events.call('diving:clearDiveManager');
            clearInterval(this._interval);
            _custom.CustomEvent.triggerServer('diving:missionCompleted');
          }
        }
      }
    }, 500);
  }
  chestGameFinishHandle(success) {
    if (!success) {
      _gui.gui.setGui(null);
      _user.user.notify('Вы провалили мини игру, попробуйте ещё раз', 'error');
      this._player.freezePosition(false);
      return;
    }
    this.openMiniGame('net');
  }
  collectGameFinishHandle() {
    this._player.freezePosition(false);
    this.destroy();
    this._isCompleted = true;
    _custom.CustomEvent.triggerServer('diving:reward', this._isMapMission);
  }
  openMiniGame(component) {
    _gui.gui.setGui('divingGames');
    _custom.CustomEvent.triggerCef('divingGame:setComponent', component);
  }
  isInWater() {
    return this._player.isSwimming() || this._player.isSwimmingUnderWater();
  }
  dive() {
    this._haveTime = 40;
    this._inClothes = true;
    this._isGoingToWater = true;
    _user.user.notify('У вас есть 20 секунд для погружения', 'info');
    this.activateOxygen();
  }
  dropCloth() {
    if (!this._inClothes) return;
    this._isGoingToWater = null;
    this._inClothes = false;
    _custom.CustomEvent.triggerServer('diving:dropCloth');
    this.deactivateOxygen();
  }
  activateOxygen() {
    this._oxygen = this._maxOxygen;
    this.updateOxygen(true);
    this.showHudOxygen(true);
    this._player.setMaxTimeUnderwater(600);
    this._oxygenInterval = setInterval(() => {
      if (this._player.isSwimmingUnderWater()) {
        if (this._oxygen <= 0) {} else if (this._oxygen >= this._maxOxygen) {
          this._oxygen -= 4;
        } else {
          if (this._oxygen - 4 < 0) {
            this._oxygen = 0;
          } else {
            this._oxygen -= 4;
          }
        }
      }
      this.updateOxygen(false);
    }, 2000);
  }
  deactivateOxygen() {
    this._player.setMaxTimeUnderwater(17.5);
    if (this._oxygenInterval) clearInterval(this._oxygenInterval);
    this._oxygenInterval = undefined;
    this.showHudOxygen(false);
  }
  showHudOxygen(toggle) {
    _custom.CustomEvent.triggerCef('diving:oxygen:show', toggle);
  }
  updateOxygen(setMaxOxygen = false) {
    if (setMaxOxygen) {
      _custom.CustomEvent.triggerCef('diving:oxygen:update', this._oxygen, this._maxOxygen);
    } else {
      _custom.CustomEvent.triggerCef('diving:oxygen:update', this._oxygen);
    }
  }
  destroy() {
    if (this._shipObject && mp.objects.exists(this._shipObject)) {
      this._shipObject.destroy();
      this._shipObject = undefined;
    }
    if (this._interaction) this._interaction.destroy();
    if (this._chestObject && mp.objects.exists(this._chestObject)) {
      this._chestObject.destroy();
      this._chestObject = undefined;
    }
    if (this._routeBlip) {
      (0, _blips.destroyRouteBlip)('Место погружения');
      this._routeBlip = false;
    }
    if (this._chestBlip && this._chestBlip.doesExist()) {
      this._chestBlip.destroy();
      this._chestBlip = undefined;
    }
    if (this._chestInteraction) {
      this._chestInteraction.destroy();
      this._chestInteraction = undefined;
    }
  }
}
exports.DiveManager = DiveManager;
},{"../../../shared/diving/work.config":"CAVh","../checkpoints":"XCJl","../custom.event":"py8h","../user":"ggMw","../blips":"vw4c","../gui":"bk91","../system":"pi2J"}],"IR2Y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAP_CHESTS = exports.DEFAULT_CHESTS = void 0;
const DEFAULT_CHESTS = exports.DEFAULT_CHESTS = [{
  divePosition: new mp.Vector3(-1977.86, -692.18, 2.05),
  chestData: {
    position: new mp.Vector3(-2278.106, -962.2479, -147.5107),
    rotation: new mp.Vector3(0, 0.0989643, 0)
  }
}, {
  divePosition: new mp.Vector3(-2710.99, -124.52, 1.41),
  chestData: {
    position: new mp.Vector3(-2854.575, -406.51, -40.92432),
    rotation: new mp.Vector3(0, 0.01082175, 0)
  }
}, {
  divePosition: new mp.Vector3(-3103.46, 441.97, 1.38),
  chestData: {
    position: new mp.Vector3(-3446.776, 425.08, -34.80004),
    rotation: new mp.Vector3(0, 0.01082175, 0)
  }
}, {
  divePosition: new mp.Vector3(-3391.43, 965.47, 7.29),
  chestData: {
    position: new mp.Vector3(-3458.236, 958.769, -15.12191),
    rotation: new mp.Vector3(0, 0.09107933, 0)
  }
}, {
  divePosition: new mp.Vector3(-3091.38, 2011.32, 0.25),
  chestData: {
    position: new mp.Vector3(-3409.395, 2097.367, -13.32979),
    rotation: new mp.Vector3(0.2386346, 0.08842566, 0.0218254)
  }
}, {
  divePosition: new mp.Vector3(-3118.39, 3353.69, -0.03),
  chestData: {
    position: new mp.Vector3(-3471.6, 3349.474, -127.7241),
    rotation: new mp.Vector3(0.1548, 0.3441881, 0.1551971)
  }
}, {
  divePosition: new mp.Vector3(-2495.32, 4218.89, 0.05),
  chestData: {
    position: new mp.Vector3(-2879.12, 4333.419, -147.0003),
    rotation: new mp.Vector3(-0.03915031, 0.007806301, 0.2021293)
  }
}, {
  divePosition: new mp.Vector3(-1064.29, 5521.22, -0.19),
  chestData: {
    position: new mp.Vector3(-1506.834, 6023.038, -88.31759),
    rotation: new mp.Vector3(0.231357, -0.1689285, 0.2568051)
  }
}, {
  divePosition: new mp.Vector3(433.79, 6811.80, 0.98),
  chestData: {
    position: new mp.Vector3(617.5548, 7114.38, -29.39218),
    rotation: new mp.Vector3(-0.01940349, 0.1520258, 0.2565063)
  }
}, {
  divePosition: new mp.Vector3(1495.64, 6631.20, 1.54),
  chestData: {
    position: new mp.Vector3(1799.737, 7043.387, -87.51627),
    rotation: new mp.Vector3(0.01952877, 0.1414392, 0.2624924)
  }
}, {
  divePosition: new mp.Vector3(3395.98, 5650.59, -0.10),
  chestData: {
    position: new mp.Vector3(3895.236, 5906.196, -69.15292),
    rotation: new mp.Vector3(-0.03117025, 0.0367214, 0.2493034)
  }
}, {
  divePosition: new mp.Vector3(3626.20, 2918.71, 0.11),
  chestData: {
    position: new mp.Vector3(4247.469, 2750.512, -76.11549),
    rotation: new mp.Vector3(-0.03714696, 0.01348804, 0.2484831)
  }
}, {
  divePosition: new mp.Vector3(3022.74, 1865.38, 1.90),
  chestData: {
    position: new mp.Vector3(3331.875, 1808.382, -49.89515),
    rotation: new mp.Vector3(-0.0004288405, -0.05463504, 0.2434248)
  }
}, {
  divePosition: new mp.Vector3(2854.59, -73.47, 1.88),
  chestData: {
    position: new mp.Vector3(3423.833, 68.49328, -150.7275),
    rotation: new mp.Vector3(-0.0004288405, -0.05463504, 0.2434248)
  }
}, {
  divePosition: new mp.Vector3(2665.98, -1714.65, 2.03),
  chestData: {
    position: new mp.Vector3(3233.466, -1776.44, -149.9724),
    rotation: new mp.Vector3(-0.0004288405, -0.05463504, 0.2434248)
  }
}, {
  divePosition: new mp.Vector3(2174.10, -2274.73, 1.78),
  chestData: {
    position: new mp.Vector3(2386.17, -2549.62, -8.87462),
    rotation: new mp.Vector3(-0.0004288405, -0.05463504, 0.2434248)
  }
}, {
  divePosition: new mp.Vector3(1797.95, -2712.35, 1.04),
  chestData: {
    position: new mp.Vector3(2217.69, -2926.18, -94.25985),
    rotation: new mp.Vector3(-0.2319799, -0.03850784, 0.2272762)
  }
}, {
  divePosition: new mp.Vector3(1281.68, -3348.03, 4.90),
  chestData: {
    position: new mp.Vector3(1319.56, -3801.24, -110.7338),
    rotation: new mp.Vector3(-0.03643998, -0.09757319, 0.2609081)
  }
}, {
  divePosition: new mp.Vector3(-1203.13, -3547.10, -0.13),
  chestData: {
    position: new mp.Vector3(-1045.016, -3941.453, -66.07579),
    rotation: new mp.Vector3(-0.18427, -0.05609433, 0.2728497)
  }
}, {
  divePosition: new mp.Vector3(-1874.56, -3231.92, 0.14),
  chestData: {
    position: new mp.Vector3(-2012.974, -3412.898, -33.68154),
    rotation: new mp.Vector3(0.05310974, 0.08798996, 0.3279301)
  }
}, {
  divePosition: new mp.Vector3(1694.65, 41.59, 160.77),
  chestData: {
    position: new mp.Vector3(1833.319, 42.63721, 143.7325),
    rotation: new mp.Vector3(0.03704868, 0.04207215, 0.3301305)
  }
}, {
  divePosition: new mp.Vector3(1930.54, 430.16, 161.23),
  chestData: {
    position: new mp.Vector3(1956.282, 250.0427, 148.2073),
    rotation: new mp.Vector3(0.03704868, 0.04207215, 0.3301305)
  }
}, {
  divePosition: new mp.Vector3(1554.37, 3911.15, 30.78),
  chestData: {
    position: new mp.Vector3(113.1784, 4066.397, -14.91522),
    rotation: new mp.Vector3(0.03704868, 0.04207215, 0.3301305)
  }
}, {
  divePosition: new mp.Vector3(2228.24, 4578.98, 30.77),
  chestData: {
    position: new mp.Vector3(1059.048, 3981.869, -14.15541),
    rotation: new mp.Vector3(0.1832253, -0.03132729, 0.3364212)
  }
}, {
  divePosition: new mp.Vector3(-78.85, 4254.95, 30.74),
  chestData: {
    position: new mp.Vector3(1942.54, 4218.998, -10.28572),
    rotation: new mp.Vector3(0.00953022, 0.0313597, 0.3364182)
  }
}, {
  divePosition: new mp.Vector3(3224.78, 5327.95, 0.14),
  chestData: {
    position: new mp.Vector3(3540.658, 5329.155, -33.98745),
    rotation: new mp.Vector3(-0.2704823, 0.1264201, -0.1310729)
  }
}];
const MAP_CHESTS = exports.MAP_CHESTS = [{
  divePosition: new mp.Vector3(3392.81, 5624.30, -0.12),
  chestData: {
    position: new mp.Vector3(3695.07, 6113.697, -167.5831),
    rotation: new mp.Vector3(0, 0, 0)
  },
  shipData: {
    position: new mp.Vector3(3700.672, 6119.253, -167.2377),
    rotation: new mp.Vector3(0, 0, 0)
  }
}];
},{}],"oBIF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Diving = void 0;
var _custom = require("../custom.event");
var _gui = require("../gui");
var _diveManager = require("./diveManager");
var _chests = require("../../../shared/diving/chests.config");
var _user = require("../user");
var _checkpoints = require("../checkpoints");
var _work = require("../../../shared/diving/work.config");
var _system = require("../system");
_custom.CustomEvent.registerServer('diving:debug:chests', () => {
  _chests.DEFAULT_CHESTS.map(el => {
    _checkpoints.colshapes.new(new mp.Vector3(el.chestData.position.x, el.chestData.position.y, el.chestData.position.z - 1), 'Взломать сундук', () => {}, {
      color: [255, 0, 0, 255],
      radius: 2.5
    });
    mp.objects.new(_work.CHEST_PROP, el.chestData.position, {
      rotation: el.chestData.rotation
    });
    _system.system.createBlip(351, 6, el.chestData.position, "debug chest", 0, true);
  });
});
class Diving {
  constructor() {
    this.isWorking = false;
    mp.events.add('diving:switcher', () => this.switcherHandle());
    _custom.CustomEvent.registerServer('diving:openEmployer', () => {
      _gui.gui.setGui('divingEmployer');
      _custom.CustomEvent.triggerCef('divingEmployer:setIsWorking', this.isWorking);
    });
    _custom.CustomEvent.registerServer('diving:createMission', () => this.createMissionHandle());
    _custom.CustomEvent.registerServer('diving:useMap', item_id => {
      if (!this.isWorking) return _user.user.notify('Необходимо устроиться на работу дайвера', 'error');
      if (this.diveManager) return _user.user.notify('У вас уже взята работа, выполните её, и повторите снова', 'error');
      this.diveManager = new _diveManager.DiveManager(_chests.MAP_CHESTS[Math.floor(Math.random() * _chests.MAP_CHESTS.length)]);
      _custom.CustomEvent.triggerServer('diving:deleteMapItem', item_id);
    });
    mp.events.add('diving:clearDiveManager', () => {
      this.diveManager = undefined;
    });
    mp.events.add('diving:unfreeze', () => {
      mp.players.local.freezePosition(false);
    });
    mp.events.add('diving:startDive', () => {
      if (this.diveManager) this.diveManager.dive();
    });
    mp.events.add('diving:chestGame:finish', success => {
      if (this.diveManager) this.diveManager.chestGameFinishHandle(success);
    });
    mp.events.add('diving:collectGame:finish', () => {
      if (this.diveManager) this.diveManager.collectGameFinishHandle();
    });
  }
  switcherHandle() {
    this.isWorking ? this.onFinish() : this.onStart();
  }
  onStart() {
    _user.user.notify('Вы устроились на работу дайвера', 'info');
    this.isWorking = true;
    _custom.CustomEvent.triggerServer('diving:canCreateChest');
    this.interval = setInterval(() => {
      if (!this.diveManager) _custom.CustomEvent.triggerServer('diving:canCreateChest');
    }, 60000);
  }
  onFinish() {
    _user.user.notify('Вы уволились с работы дайвера', 'info');
    clearInterval(this.interval);
    try {
      if (this.diveManager) this.diveManager.destroy();
      clearInterval(this.diveManager._interval);
      this.diveManager = undefined;
    } catch (e) {
      _custom.CustomEvent.triggerServer('srv:log', e);
    }
    this.isWorking = false;
  }
  createMissionHandle() {
    if (!this.isWorking) return;
    if (this.diveManager) return;
    this.diveManager = new _diveManager.DiveManager(_chests.DEFAULT_CHESTS[Math.floor(Math.random() * _chests.DEFAULT_CHESTS.length)]);
  }
}
exports.Diving = Diving;
},{"../custom.event":"py8h","../gui":"bk91","./diveManager":"j7V0","../../../shared/diving/chests.config":"IR2Y","../user":"ggMw","../checkpoints":"XCJl","../../../shared/diving/work.config":"CAVh","../system":"pi2J"}],"fKzZ":[function(require,module,exports) {
"use strict";

var _diving = require("./diving");
new _diving.Diving();
},{"./diving":"oBIF"}],"XHYY":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _system = require("../system");
mp.events.add('snowwar:update:registration', data => {
  _custom.CustomEvent.triggerCef('snowwar:registration:update', data);
});
mp.events.add('snowwar:update:hud', data => {
  _custom.CustomEvent.triggerCef('snowwar:hud:update', data);
});
mp.events.add('gui:menuClosed', closedGui => {
  if (closedGui !== 'snowWar') return;
  _custom.CustomEvent.triggerServer('snowwar:registrationClose');
});
const targets = [];
let snowWarActive = false;
_custom.CustomEvent.registerServer('snowwar:activate', toggle => {
  snowWarActive = toggle;
});
mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
  if (!snowWarActive) return;
  if (!targetEntity || targetEntity.type !== 'player') return;
  if (targetEntity.remoteId === mp.players.local.remoteId) return;
  targets.push({
    entity: targetEntity,
    time: _system.system.timestamp,
    position: mp.players.local.position
  });
});
mp.events.add('render', () => {
  if (!snowWarActive) return;
  targets.forEach((el, key) => {
    if (_system.system.timestamp - el.time > 10) {
      targets.splice(key, 1);
      return;
    }
    if (el.entity.handle === 0) return;
  });
});
},{"../custom.event":"py8h","../system":"pi2J"}],"SZmx":[function(require,module,exports) {
"use strict";

require("./monitor");
},{"./monitor":"XHYY"}],"CgIy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.petsConfig = exports.PetState = void 0;
var PetState;
(function (PetState) {
  PetState[PetState["Sit"] = 0] = "Sit";
  PetState[PetState["Stand"] = 1] = "Stand";
  PetState[PetState["Follow"] = 2] = "Follow";
})(PetState || (exports.PetState = PetState = {}));
const petsConfig = exports.petsConfig = [{
  itemId: 15000,
  modelHash: 'a_c_chop'
}, {
  itemId: 15001,
  modelHash: 'a_c_husky'
}, {
  itemId: 15002,
  modelHash: 'a_c_poodle'
}, {
  itemId: 15003,
  modelHash: 'a_c_pug'
}, {
  itemId: 15004,
  modelHash: 'a_c_shepherd'
}, {
  itemId: 15005,
  modelHash: 'a_c_westy'
}, {
  itemId: 15006,
  modelHash: 'a_c_retriever'
}];
},{}],"jrDx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PetSitState = void 0;
const animationsByModel = {
  [1125994524]: {
    dict: 'creatures@pug@amb@world_dog_sitting@base',
    name: 'base'
  },
  [2910340283]: {
    dict: 'creatures@pug@amb@world_dog_sitting@base',
    name: 'base'
  },
  [1126154828]: {
    dict: 'creatures@dog@move',
    name: 'sit_loop'
  },
  [1832265812]: {
    dict: 'creatures@pug@amb@world_dog_sitting@base',
    name: 'base'
  },
  [1318032802]: {
    dict: 'creatures@dog@move',
    name: 'sit_loop'
  },
  [351016938]: {
    dict: 'creatures@dog@move',
    name: 'sit_loop'
  }
};
class PetSitState {
  constructor(_pet) {
    this._pet = _pet;
  }
  async calculateBehavior() {
    let animation = animationsByModel[this._pet.model];
    if (!animation) {
      animation = {
        dict: 'creatures@dog@move',
        name: 'sit_loop'
      };
    }
    if (!mp.game.streaming.doesAnimDictExist(animation.dict)) return;
    mp.game.streaming.requestAnimDict(animation.dict);
    for (let index = 0; !mp.game.streaming.hasAnimDictLoaded(animation.dict) && index < 250; index++) {
      await mp.game.waitAsync(2);
    }
    this._pet.taskPlayAnim(animation.dict, animation.name);
  }
}
exports.PetSitState = PetSitState;
},{}],"nVSh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PetFollowState = void 0;
class PetFollowState {
  constructor(_pet) {
    this._pet = _pet;
  }
  calculateBehavior() {
    this._pet.followOwner();
  }
  onStateStarted() {
    this._pet.clearTasks();
  }
}
exports.PetFollowState = PetFollowState;
},{}],"EUJI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PetStandState = void 0;
class PetStandState {
  constructor(_pet) {
    this._pet = _pet;
  }
  calculateBehavior() {
    this._pet.clearTasks();
  }
  onStateStarted() {
    this._pet.clearTasks();
  }
}
exports.PetStandState = PetStandState;
},{}],"j8SD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pet = void 0;
var _pets = require("../../../shared/pets");
var _sit = require("./states/sit");
var _follow = require("./states/follow");
var _stand = require("./states/stand");
var _custom = require("../custom.event");
class Pet {
  constructor(data) {
    this.lastVehicleSeat = 0;
    this.data = data;
    this._sitState = new _sit.PetSitState(this);
    this._followState = new _follow.PetFollowState(this);
    this._standState = new _stand.PetStandState(this);
  }
  get coords() {
    return this._ped.getCoordsAutoAlive();
  }
  set coords(pos) {
    this._ped.setCoords(pos.x, pos.y, pos.z, true, true, true, true);
  }
  get model() {
    return this._ped.model;
  }
  get heading() {
    return this._ped.getHeading();
  }
  get vehicle() {
    return this._ped.getVehicleIsIn(false);
  }
  async create() {
    this._ped = mp.peds.new(this.data.model, this.data.position, 0, 0);
    if (!mp.game.streaming.isModelValid(this.data.model)) return _custom.CustomEvent.triggerServer('srv:log', `Неверная модель собаки ${this.data.model}`);
    while (!this.exist()) {
      await mp.game.waitAsync(5);
    }
    this._ped.freezePosition(false);
  }
  handleCurrentState() {
    if (!this.exist()) return;
    this._ped.freezePosition(false);
    switch (this.data.currentState) {
      case _pets.PetState.Sit:
        this._sitState.calculateBehavior();
        break;
      case _pets.PetState.Stand:
        this._standState.calculateBehavior();
        break;
      case _pets.PetState.Follow:
        this._followState.calculateBehavior();
        break;
    }
  }
  changeCurrentState(stateToChange) {
    if (!this.exist()) return;
    this.data.currentState = stateToChange;
    switch (this.data.currentState) {
      case _pets.PetState.Stand:
        this._standState.onStateStarted();
        break;
      case _pets.PetState.Follow:
        this._followState.onStateStarted();
        break;
    }
    if (mp.players.local.remoteId === this.data.controllerId) {
      _custom.CustomEvent.triggerServer('pet:changeState', this.data.id, stateToChange);
    }
    this.handleCurrentState();
  }
  putIntoAVehicle(vehicle, seat) {
    if (!this.exist()) return;
    if (!vehicle.isSeatFree(seat)) return;
    if (mp.players.local.remoteId === this.data.controllerId) {
      _custom.CustomEvent.triggerServer('pet:setIntoVehicle', this.data, vehicle.remoteId, seat);
    }
    this.lastVehicleSeat = seat;
    mp.game.invoke('0x9A7D091411C5F684', this._ped.handle, vehicle.handle, seat);
  }
  kickFromVehicle(vehicle) {
    if (mp.game.invoke('0xA3EE4A07279BB9DB', this._ped.handle, vehicle.handle, false)) {
      this._ped.clearTasksImmediately();
      mp.game.invoke('0xD3DBCE61A490BE02', this._ped.handle, vehicle.handle, 0);
      this.handleCurrentState();
      if (mp.players.local.remoteId === this.data.controllerId) {
        _custom.CustomEvent.triggerServer('pet:kickFromVehicle', this.data, vehicle.remoteId);
      }
    }
  }
  clearTasks() {
    this._ped.clearTasks();
  }
  exist() {
    var _this$_ped;
    return ((_this$_ped = this._ped) === null || _this$_ped === void 0 ? void 0 : _this$_ped.handle) != 0 && mp.peds.exists(this._ped);
  }
  taskPlayAnim(animDict, animName) {
    this._ped.taskPlayAnim(animDict, animName, 8.0, 1.0, -1, 1, 1.0, false, false, false);
  }
  followOwner() {
    const targetPlayer = mp.players.toArray().find(p => p.remoteId == this.data.controllerId);
    if (!targetPlayer) return;
    this._ped.taskFollowToOffsetOf(targetPlayer.handle, 0, 0, 0, 3.0, -1, 1.5, true);
  }
  followEntity(entity) {
    this._ped.taskFollowToOffsetOf(entity.handle, 0, 0, 0, 3.0, -1, 1.5, true);
  }
  destroy() {
    this._ped.destroy();
  }
}
exports.Pet = Pet;
},{"../../../shared/pets":"CgIy","./states/sit":"jrDx","./states/follow":"nVSh","./states/stand":"EUJI","../custom.event":"py8h"}],"WzW6":[function(require,module,exports) {
"use strict";

var _pet = require("./pet");
var _pets = require("../../../shared/pets");
var _custom = require("../custom.event");
var _user = require("../user");
var _menu = require("../menu");
var _system = require("../system");
var _gui = require("../gui");
_custom.CustomEvent.register('petControl', () => {
  if (!_user.user.login) return;
  if (_menu.currentMenu) return;
  if (_gui.terminalOpened) return;
  if (_gui.inputOnFocus) return;
  if (!pets.find(pet => pet.data.controllerId === mp.players.local.remoteId)) return _user.user.notify('Сначала создайте собаку (Использовать предмет в инвентаре)', 'info');
  let m = new _menu.MenuClass('Управление питомцем', 'Действия');
  m.newItem({
    name: 'Сидеть',
    onpress: () => {
      const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
      pet === null || pet === void 0 || pet.changeCurrentState(_pets.PetState.Sit);
    }
  });
  m.newItem({
    name: 'Стоять',
    onpress: () => {
      const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
      pet === null || pet === void 0 || pet.changeCurrentState(_pets.PetState.Stand);
    }
  });
  m.newItem({
    name: 'Бежать за мной',
    onpress: () => {
      const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
      pet === null || pet === void 0 || pet.changeCurrentState(_pets.PetState.Follow);
    }
  });
  m.newItem({
    name: 'Убрать',
    onpress: () => {
      const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
      if (!pet) return;
      pet.data.position = pet.coords;
      _custom.CustomEvent.triggerServer('pet:delete', pet.data);
    }
  });
  m.open();
});
const pets = [];
_custom.CustomEvent.registerServer('pet:create', async (data, vehicleId, seat) => {
  const petToCreate = new _pet.Pet(data);
  await petToCreate.create();
  if (!vehicleId) {
    petToCreate.handleCurrentState();
  } else {
    petToCreate.putIntoAVehicle(mp.vehicles.atRemoteId(vehicleId), seat);
  }
  pets.push(petToCreate);
});
_custom.CustomEvent.registerServer('pet:delete', async data => {
  const pet = pets.find(p => p.data.id == data.id);
  if (!pet) return;
  pet === null || pet === void 0 || pet.destroy();
  pets.splice(pets.indexOf(pet), 1);
});
_custom.CustomEvent.registerServer('pet:changeState', (petId, newState) => {
  const pet = pets.find(p => p.data.id === petId);
  if (!pet) return;
  if (pet.data.controllerId == mp.players.local.remoteId) return;
  pet.changeCurrentState(newState);
});
_custom.CustomEvent.registerServer('pet:setIntoVehicle', (petId, vehicleId, seat) => {
  const pet = pets.find(p => p.data.id === petId);
  if (!pet) return;
  if (pet.data.controllerId == mp.players.local.remoteId) return;
  const veh = mp.vehicles.atRemoteId(vehicleId);
  if (!veh) return;
  pet.putIntoAVehicle(veh, seat);
});
_custom.CustomEvent.registerServer('pet:kickFromVehicle', (petId, vehicleId) => {
  const pet = pets.find(p => p.data.id === petId);
  if (!pet) return;
  if (pet.data.controllerId == mp.players.local.remoteId) return;
  const veh = mp.vehicles.atRemoteId(vehicleId);
  if (!veh) return;
  pet.kickFromVehicle(veh);
});
mp.events.add('entityStreamIn', async player => {
  if (!mp.players.exists(player)) return;
  const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
  if (!pet) return;
  const vehicle = mp.vehicles.atHandle(pet.vehicle);
  pet.data.position = pet.coords;
  _custom.CustomEvent.triggerServer('pet:loadForPlayer', player.remoteId, pet.data, vehicle ? vehicle.remoteId : 0, pet.lastVehicleSeat);
});
mp.events.add('entityStreamOut', async player => {
  if (!mp.players.exists(player)) return;
  const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
  if (!pet) return;
  _custom.CustomEvent.triggerServer('pet:deleteForPlayer', player.remoteId, pet.data.id);
});
mp.events.add('playerEnterVehicle', (vehicle, seat) => {
  if (!mp.vehicles.exists(vehicle)) return;
  const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
  if (!pet) return;
  pet.putIntoAVehicle(vehicle, seat + 1);
});
mp.events.add('playerLeaveVehicle', vehicle => {
  if (!mp.vehicles.exists(vehicle)) return;
  const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
  if (!pet) return;
  pet.kickFromVehicle(vehicle);
});
let lastDim = 0;
setInterval(() => {
  if (!_user.user.login) return;
  const pet = pets.find(pet => pet.data.controllerId === mp.players.local.remoteId);
  if (!pet) return;
  if (_system.system.distanceToPos(pet.coords, mp.players.local.position) >= 100 || mp.players.local.dimension != lastDim) {
    pet.data.position = pet.coords;
    _custom.CustomEvent.triggerServer('pet:delete', pet.data);
    pet === null || pet === void 0 || pet.destroy();
    pets.splice(pets.indexOf(pet), 1);
    _user.user.notify('Ваш питомец потерялся', 'error', 'CHAR_CHOP');
  }
  lastDim = mp.players.local.dimension;
}, 1000);
},{"./pet":"j8SD","../../../shared/pets":"CgIy","../custom.event":"py8h","../user":"ggMw","../menu":"Aiz7","../system":"pi2J","../gui":"bk91"}],"tIom":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _gui = require("../gui");
_custom.CustomEvent.register('battlePass', () => {
  if (_gui.gui.currentGui === 'battlePass') {
    _gui.gui.setGui(null);
  } else {
    _custom.CustomEvent.triggerServer('battlePass:openInterface');
  }
});
},{"../custom.event":"py8h","../gui":"bk91"}],"dAcl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FURNITURE_SHOP_VIEW_DIMENSION = exports.FURNITURE_SHOP_POSITION = exports.FURNITURE_SHOP_OBJECT_ROTATION = exports.FURNITURE_SHOP_OBJECT_POSITION = exports.FURNITURE_SHOP_OBJECT_HEADING = exports.FURNITURE_SHOP_NPC_MODEL = exports.FURNITURE_SHOP_HEADING = exports.FURNITURE_SHOP_BLIP_SPRITE = exports.FURNITURE_SHOP_BLIP_COLOR = void 0;
const FURNITURE_SHOP_POSITION = exports.FURNITURE_SHOP_POSITION = new mp.Vector3(2748.59, 3472.39, 55.78);
const FURNITURE_SHOP_HEADING = exports.FURNITURE_SHOP_HEADING = 244;
const FURNITURE_SHOP_NPC_MODEL = exports.FURNITURE_SHOP_NPC_MODEL = 'cs_davenorton';
const FURNITURE_SHOP_BLIP_SPRITE = exports.FURNITURE_SHOP_BLIP_SPRITE = 605;
const FURNITURE_SHOP_BLIP_COLOR = exports.FURNITURE_SHOP_BLIP_COLOR = 0;
const FURNITURE_SHOP_OBJECT_POSITION = exports.FURNITURE_SHOP_OBJECT_POSITION = new mp.Vector3(-1040.25, -83.82, 45.38);
const FURNITURE_SHOP_OBJECT_HEADING = exports.FURNITURE_SHOP_OBJECT_HEADING = -118;
const FURNITURE_SHOP_VIEW_DIMENSION = exports.FURNITURE_SHOP_VIEW_DIMENSION = 88088;
const FURNITURE_SHOP_OBJECT_ROTATION = exports.FURNITURE_SHOP_OBJECT_ROTATION = new mp.Vector3(0, 0, 0);
},{}],"kCco":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _gui = require("../../gui");
var _shop = require("../../../../shared/houses/furniture/shop.config");
var _furniture = require("../../../../shared/houses/furniture/furniture.config");
var _protection = require("../../protection");
var _user = require("../../user");
var _controls = require("../../controls");
var _camera = require("../../camera");
class FurnitureShop {
  constructor() {
    this.inShop = false;
    this.cfgId = null;
    this.object = null;
    this.currentPosition = {
      x: _shop.FURNITURE_SHOP_OBJECT_POSITION.x,
      y: _shop.FURNITURE_SHOP_OBJECT_POSITION.y,
      z: _shop.FURNITURE_SHOP_OBJECT_POSITION.z,
      h: _shop.FURNITURE_SHOP_HEADING
    };
    this.showOffset = [1.23276901245117, -7.93903710937500, 2.460024642944336];
    this.enabledZoom = true;
    this.openHandler = () => {
      if (this.inShop) return;
      this.inShop = true;
      (0, _protection.teleportAnticheat)(this.currentPosition.x, this.currentPosition.y, this.currentPosition.z + 15);
      mp.players.local.position = new mp.Vector3(this.currentPosition.x, this.currentPosition.y, this.currentPosition.z + 15);
      mp.players.local.freezePosition(true);
      this.focusCamera();
      _gui.gui.setGui('furnitureStore');
      this.object = this.createObject();
    };
    this.zoomHandler = toggle => {
      this.enabledZoom = toggle;
    };
    this.closeHandler = () => {
      if (!this.inShop) return;
      (0, _protection.anticheatProtect)('teleport');
      mp.players.local.position = _shop.FURNITURE_SHOP_POSITION;
      _custom.CustomEvent.triggerServer('furnitureShop:exit');
      mp.players.local.freezePosition(false);
      this.unFocusCamera();
      this.inShop = false;
      this.object.destroy();
      this.object = null;
      this.enabledZoom = true;
    };
    this.selectHandler = id => {
      if (!this.inShop || this.object === null || this.cfgId === id) return;
      this.cfgId = id;
      this.object.model = mp.game.joaat(this.getModelById(id));
      this.object.setAlpha(255);
    };
    _custom.CustomEvent.registerServer('furnitureShop:open', this.openHandler);
    mp.events.add('furnitureShop:close', this.closeHandler);
    mp.events.add('furnitureShop:select', this.selectHandler);
    mp.events.add('furnitureShop:zoomToggle', this.zoomHandler);
    (0, _controls.mouseMove)((right, down, leftKey, rightKey, posX) => {
      if (!leftKey) return;
      if (!this.inShop) return;
      if (posX > 0.21 && posX < 0.81) {
        this.object.setHeading(this.object.getHeading() + right / 1.5);
        this.object.setCoords(this.currentPosition.x, this.currentPosition.y, this.currentPosition.z, true, true, true, true);
      }
    }, 10);
    mp.events.add('render', () => {
      if (!this.inShop || !this.enabledZoom) return;
      (0, _camera.handleCamZoom)(this.currentCamera);
    });
  }
  focusCamera() {
    mp.game.streaming.requestCollisionAtCoord(this.currentPosition.x, this.currentPosition.y, this.currentPosition.z);
    mp.game.streaming.setFocusArea(this.currentPosition.x, this.currentPosition.y, this.currentPosition.z, 0.0, 0.0, 0.0);
    if (!this.currentCamera || !mp.cameras.exists(this.currentCamera)) this.currentCamera = mp.cameras.new('furniture_shop');
    this.currentCamera.setFov(50);
    this.currentCamera.setActive(true);
    this.currentCamera.setCoord(this.currentPosition.x + this.showOffset[0], this.currentPosition.y + this.showOffset[1], this.currentPosition.z + this.showOffset[2]);
    this.currentCamera.pointAtCoord(this.currentPosition.x, this.currentPosition.y, this.currentPosition.z);
    mp.game.cam.renderScriptCams(true, false, 0, true, false);
    mp.game.cam.renderScriptCams(true, true, 1500, true, false);
  }
  unFocusCamera() {
    mp.game.cam.renderScriptCams(false, false, 0, false, false);
    mp.game.invoke('0x198F77705FA0931D', mp.players.local.handle);
    mp.game.cam.setGameplayCamRelativeHeading(0);
    _user.user.hideLoadDisplay(500, false);
  }
  getModelById(id) {
    const item = _furniture.furnitureList.find(el => el.id === id);
    if (!item) return 'prop_tool_pickaxe';
    return item.prop;
  }
  createObject() {
    return mp.objects.new(mp.game.joaat('prop_tool_pickaxe'), _shop.FURNITURE_SHOP_OBJECT_POSITION, {
      alpha: 0,
      dimension: _shop.FURNITURE_SHOP_VIEW_DIMENSION,
      rotation: _shop.FURNITURE_SHOP_OBJECT_ROTATION
    });
  }
}
new FurnitureShop();
},{"../../custom.event":"py8h","../../gui":"bk91","../../../../shared/houses/furniture/shop.config":"dAcl","../../../../shared/houses/furniture/furniture.config":"sFZG","../../protection":"Qh13","../../user":"ggMw","../../controls":"yuOK","../../camera":"h8FB"}],"RFpa":[function(require,module,exports) {
"use strict";

var _custom = require("../../custom.event");
var _furniture = require("../furniture");
var _user = require("../../user");
var _gui = require("../../gui");
class HomeMenu {
  constructor() {
    this.openHandler = (houseId, furnitureArray, interiorId, cash, bank, coins) => {
      if (_furniture.furniture.currentHouseId !== houseId) return _user.user.notify('Необходимо находиться в своем доме', 'error');
      _gui.gui.setGui('interiorControl');
      _custom.CustomEvent.triggerCef('homeMenu:furniture', furnitureArray);
      _custom.CustomEvent.triggerCef('homeMenu:interior', interiorId);
      _custom.CustomEvent.triggerCef('homeMenu:currencies', cash, bank, coins);
    };
    _custom.CustomEvent.registerServer('homeMenu:open', this.openHandler);
  }
}
new HomeMenu();
},{"../../custom.event":"py8h","../furniture":"lp8x","../../user":"ggMw","../../gui":"bk91"}],"J1du":[function(require,module,exports) {
"use strict";

require("./furniture");
require("./furnitureShop");
require("./menu");
require("./furniturePlace");
},{"./furniture":"lp8x","./furnitureShop":"kCco","./menu":"RFpa","./furniturePlace":"opsa"}],"mOW9":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
_custom.CustomEvent.register("duckWalk", () => ButtonHandler());
const ButtonHandler = () => {
  _custom.CustomEvent.triggerServer('duckWalk:toggle');
};
},{"../custom.event":"py8h"}],"ZSz4":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _user = require("../user");
var _anim = require("../anim");
var _system = require("../system");
let prepareBlip = null;
_custom.CustomEvent.registerServer('islandBattle:createPrepareBlip', pos => {
  if (prepareBlip !== null) return;
  prepareBlip = mp.blips.new(159, pos, {
    color: 1,
    name: "Битва за остров",
    shortRange: true,
    scale: 1.5
  });
  _user.user.setWaypoint(pos.x, pos.y, pos.z);
});
_custom.CustomEvent.registerServer('islandBattle:destroyPrepareBlip', () => {
  if (prepareBlip === null) return;
  if (prepareBlip.doesExist()) prepareBlip.destroy();
});
_custom.CustomEvent.registerServer('islandBattle:pointStart', (id, pos, time) => {
  const player = mp.players.local;
  (0, _anim.playAnimationWithResult)(['anim@heists@money_grab@duffel', 'loop'], time, 'Захват точки', _system.system.headingToCoord(player.position, pos) + 90).then(status => {
    mp.events.callRemote(`islandBattle:interactResult:${id}`, status);
  });
});
},{"../custom.event":"py8h","../user":"ggMw","../anim":"stJJ","../system":"pi2J"}],"uhw2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SMOKING_SCREEN_EFFECTS = exports.SMOKE_VAPE_ANIM_NAME = exports.SMOKE_VAPE_ANIM_DICT = exports.SMOKE_EFFECT_TIME_MS = exports.SMOKE_EFFECT_SCALE = exports.SMOKE_EFFECT_NAME = exports.SMOKE_ASSET_NAME = void 0;
const SMOKING_SCREEN_EFFECTS = exports.SMOKING_SCREEN_EFFECTS = ['BeastIntroScene', 'BeastLaunch', 'BeastTransition', 'BikerFilter', 'BikerFilterOut', 'BikerFormation', 'BikerFormationOut', 'CamPushInFranklin', 'CamPushInMichael', 'CamPushInNeutral', 'CamPushInTrevor', 'ChopVision', 'CrossLine', 'CrossLineOut', 'DeadlineNeon', 'DeathFailFranklinIn', 'DeathFailMichaelIn', 'DeathFailMPDark', 'DeathFailMPIn', 'DeathFailNeutralIn', 'DeathFailOut', 'DeathFailTrevorIn', 'DefaultFlash', 'DMT_flight', 'DMT_flight_intro', 'Dont_tazeme_bro', 'DrugsDrivingIn', 'DrugsDrivingOut', 'DrugsMichaelAliensFight', 'DrugsMichaelAliensFightIn', 'DrugsMichaelAliensFightOut', 'DrugsTrevorClownsFight', 'DrugsTrevorClownsFightIn', 'DrugsTrevorClownsFightOut', 'ExplosionJosh3', 'FocusIn', 'FocusOut', 'HeistCelebEnd', 'HeistCelebPass', 'HeistCelebPassBW', 'HeistCelebToast', 'HeistLocate', 'HeistTripSkipFade', 'InchOrange', 'InchOrangeOut', 'InchPickup', 'InchPickupOut', 'InchPurple', 'InchPurpleOut', 'LostTimeDay', 'LostTimeNight', 'MenuMGHeistIn', 'MenuMGHeistIntro', 'MenuMGHeistOut', 'MenuMGHeistTint'];
const SMOKE_ASSET_NAME = exports.SMOKE_ASSET_NAME = 'cut_family3';
const SMOKE_EFFECT_NAME = exports.SMOKE_EFFECT_NAME = 'cs_cig_smoke';
const SMOKE_EFFECT_SCALE = exports.SMOKE_EFFECT_SCALE = 10;
const SMOKE_EFFECT_TIME_MS = exports.SMOKE_EFFECT_TIME_MS = 7000;
const SMOKE_VAPE_ANIM_DICT = exports.SMOKE_VAPE_ANIM_DICT = 'mp_player_intdrink';
const SMOKE_VAPE_ANIM_NAME = exports.SMOKE_VAPE_ANIM_NAME = 'loop_bottle';
},{}],"wxoF":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _anim = require("../anim");
var _system = require("../system");
var _effect = require("../../../shared/smoking/effect");
var _attach = require("../attach");
class Smoking {
  constructor() {
    this.vapeInHand = false;
    this.isUsing = false;
    this.effect = {
      count: 0,
      last: 0
    };
    this.effectTime = null;
    this.effectInterval = null;
    this.smokes = new Map();
    this.useBongHandler = () => {
      this.isUsing = true;
      this.sendSmoke();
      _attach.AttachSystem.addLocal("bong");
      (0, _anim.playAnimationWithResult)(["anim@safehouse@bong", "bong_stage4"], 5, 'Затягиваемся').then(res => {
        _attach.AttachSystem.removeLocal("bong");
        this.isUsing = false;
        if (!res) return;
        this.useEffect();
      });
    };
    this.useHookahHandler = () => {
      this.sendSmoke();
      (0, _anim.playAnimationWithResult)([_effect.SMOKE_VAPE_ANIM_DICT, _effect.SMOKE_VAPE_ANIM_NAME], 5, 'Затягиваемся').then(res => {
        if (!res) return;
        this.useEffect();
      });
    };
    this.setVapeInHand = toggle => {
      this.vapeInHand = toggle;
      if (toggle) {
        _attach.AttachSystem.addLocal('vape');
      } else {
        _attach.AttachSystem.removeLocal('vape');
      }
    };
    this.addSmokeHandle = pos => {
      if (!mp.game.streaming.hasNamedPtfxAssetLoaded(_effect.SMOKE_ASSET_NAME)) {
        mp.game.streaming.requestNamedPtfxAsset(_effect.SMOKE_ASSET_NAME);
      }
      mp.game.graphics.setPtfxAssetNextCall(_effect.SMOKE_ASSET_NAME);
      const key = _system.system.timestampMS;
      this.smokes.set(key, mp.game.graphics.startParticleFxLoopedAtCoord(_effect.SMOKE_EFFECT_NAME, pos.x, pos.y, pos.z, 0, 0, 0, _effect.SMOKE_EFFECT_SCALE, false, false, false, true));
      setTimeout(() => {
        const handle = this.smokes.get(key);
        if (handle === undefined) return;
        mp.game.graphics.stopParticleFxLooped(handle, true);
        this.smokes.delete(key);
      }, _effect.SMOKE_EFFECT_TIME_MS);
    };
    this.startUseVape = () => {
      _custom.CustomEvent.triggerServer('smoking:startUseVape');
    };
    this.useVapeHandle = () => {
      this.isUsing = true;
      this.sendSmoke();
      (0, _anim.playAnimationWithResult)([_effect.SMOKE_VAPE_ANIM_DICT, _effect.SMOKE_VAPE_ANIM_NAME], 5, 'Затягиваемся').then(res => {
        this.isUsing = false;
        if (!res) return;
        this.useEffect();
      });
    };
    _custom.CustomEvent.registerServer('smoking:vapeInHandToggle', this.setVapeInHand);
    _custom.CustomEvent.registerServer('smoking:useVape', this.useVapeHandle);
    _custom.CustomEvent.registerServer('smoking:addSmoke', this.addSmokeHandle);
    _custom.CustomEvent.registerServer('smoking:useHookah', this.useHookahHandler);
    _custom.CustomEvent.registerServer('smoking:useBong', this.useBongHandler);
    mp.keys.bind(17, false, () => {
      if (this.isUsing) return;
      if (this.vapeInHand) this.startUseVape();
    });
  }
  startEffect() {
    if (this.effectTime === null) {
      this.effectTime = _system.system.timestamp + 20;
      const effect = _effect.SMOKING_SCREEN_EFFECTS[Math.floor(_effect.SMOKING_SCREEN_EFFECTS.length * Math.random())];
      mp.game.graphics.startScreenEffect(effect, 0x800, true);
      this.effectInterval = setInterval(() => {
        if (_system.system.timestamp >= this.effectTime) {
          clearInterval(this.effectInterval);
          this.effectTime = null;
          mp.game.graphics.stopScreenEffect(effect);
        }
      }, 500);
    } else {
      this.effectTime += 10;
    }
  }
  useEffect() {
    if (_system.system.timestamp - this.effect.last < 30) {
      if (this.effect.count >= 3) {
        this.startEffect();
        this.effect = {
          last: _system.system.timestamp,
          count: 1
        };
      } else {
        this.effect.count += 1;
        this.effect.last = _system.system.timestamp;
      }
    } else {
      this.effect = {
        last: _system.system.timestamp,
        count: 1
      };
    }
  }
  sendSmoke() {
    let pos = mp.players.local.getBoneCoords(12844, 0, 0, 0);
    _custom.CustomEvent.triggerServer('smoking:sendSmoke', pos);
  }
}
new Smoking();
},{"../custom.event":"py8h","../anim":"stJJ","../system":"pi2J","../../../shared/smoking/effect":"uhw2","../attach":"sXtZ"}],"eq3E":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TASKS_TIME_DELETE = exports.PRISON_TIME_FOR_WANTED_LEVEL = exports.PRISON_TASKS_CD = exports.PRISON_SPAWN_POSITIONS = exports.PRISON_RADIUS = exports.PRISON_MINUTES_FOR_RUN = exports.PRISON_KITCHEN_EATING = exports.PRISON_KITCHEN_EAT = exports.PRISON_KITCHEN_DRINK = exports.PRISON_HOSPITAL_TIME = exports.PRISON_HOSPITAL_SHAPE_RADIUS = exports.PRISON_HOSPITAL_SHAPE_POS = exports.PRISON_HOSPITAL_RESPAWN_POS = exports.PRISON_FREE_POSITION = exports.PRISON_ENTER_MENU_COORDS = exports.PRISON_CENTER_POSITION = exports.PRISON_ARREST_MONEY = exports.PRISONER_DRESS_MALE = exports.PRISONER_DRESS_FEMALE = void 0;
const PRISON_CENTER_POSITION = exports.PRISON_CENTER_POSITION = new mp.Vector3(1690.39, 2584.47, 53.91);
const PRISON_RADIUS = exports.PRISON_RADIUS = 150;
const PRISON_MINUTES_FOR_RUN = exports.PRISON_MINUTES_FOR_RUN = 5;
const PRISON_FREE_POSITION = exports.PRISON_FREE_POSITION = new mp.Vector3(1850.71, 2585.81, 45.67);
const PRISON_ENTER_MENU_COORDS = exports.PRISON_ENTER_MENU_COORDS = new mp.Vector3(1690.37, 2582.35, 44.68);
const PRISON_TIME_FOR_WANTED_LEVEL = exports.PRISON_TIME_FOR_WANTED_LEVEL = 600;
const PRISON_HOSPITAL_RESPAWN_POS = exports.PRISON_HOSPITAL_RESPAWN_POS = [new mp.Vector3(1600.58, 2499.33, 45.97), new mp.Vector3(1667.21, 2523.94, 45.56), new mp.Vector3(1596.09, 2493.60, 45.97), new mp.Vector3(1592.84, 2491.34, 45.97), new mp.Vector3(1590.11, 2488.52, 45.97)];
const PRISON_HOSPITAL_SHAPE_POS = exports.PRISON_HOSPITAL_SHAPE_POS = new mp.Vector3(1604.65, 2486.50, 45.97);
const PRISON_HOSPITAL_TIME = exports.PRISON_HOSPITAL_TIME = 1;
const PRISON_HOSPITAL_SHAPE_RADIUS = exports.PRISON_HOSPITAL_SHAPE_RADIUS = 50;
const PRISON_SPAWN_POSITIONS = exports.PRISON_SPAWN_POSITIONS = [new mp.Vector3(1717.57, 2460.03, 50.00), new mp.Vector3(1674.69, 2438.89, 45.98), new mp.Vector3(1678.24, 2438.53, 45.98), new mp.Vector3(1681.79, 2438.85, 45.98), new mp.Vector3(1685.53, 2438.60, 45.98), new mp.Vector3(1689.37, 2438.70, 45.98), new mp.Vector3(1692.87, 2438.52, 45.98), new mp.Vector3(1696.64, 2438.63, 45.98), new mp.Vector3(1700.57, 2438.75, 45.98), new mp.Vector3(1704.11, 2438.23, 45.98), new mp.Vector3(1707.78, 2438.66, 45.98), new mp.Vector3(1711.75, 2438.47, 45.98), new mp.Vector3(1717.31, 2445.07, 45.98), new mp.Vector3(1717.33, 2448.73, 45.98), new mp.Vector3(1717.10, 2452.48, 45.98), new mp.Vector3(1717.09, 2456.13, 45.98), new mp.Vector3(1717.27, 2460.03, 45.98), new mp.Vector3(1668.40, 2445.02, 45.98), new mp.Vector3(1668.38, 2448.63, 45.98), new mp.Vector3(1668.32, 2452.37, 45.98), new mp.Vector3(1668.37, 2456.10, 45.98)];
const PRISON_ARREST_MONEY = exports.PRISON_ARREST_MONEY = 100;
const PRISONER_DRESS_MALE = exports.PRISONER_DRESS_MALE = [[3, 1, 0], [8, 15, 0], [6, 1, 1], [4, 258, 0], [11, 621, 0]];
const PRISONER_DRESS_FEMALE = exports.PRISONER_DRESS_FEMALE = [[3, 1, 0], [4, 275, 0], [6, 3, 0], [8, 2, 0], [11, 628, 0]];
const TASKS_TIME_DELETE = exports.TASKS_TIME_DELETE = 8;
const PRISON_KITCHEN_EAT = exports.PRISON_KITCHEN_EAT = new mp.Vector3(1629.69, 2463.40, 44.97);
const PRISON_KITCHEN_DRINK = exports.PRISON_KITCHEN_DRINK = new mp.Vector3(1633.54, 2467.83, 44.97);
const PRISON_KITCHEN_EATING = exports.PRISON_KITCHEN_EATING = 5;
const PRISON_TASKS_CD = exports.PRISON_TASKS_CD = 300;
},{}],"Xv6A":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hospitalTime = void 0;
var _config = require("../../../shared/prison/config");
var _custom = require("../custom.event");
var _user = require("../user");
let hospitalTime = exports.hospitalTime = null;
const shape = mp.colshapes.newSphere(_config.PRISON_HOSPITAL_SHAPE_POS.x, _config.PRISON_HOSPITAL_SHAPE_POS.y, _config.PRISON_HOSPITAL_SHAPE_POS.z, _config.PRISON_HOSPITAL_SHAPE_RADIUS, 0);
mp.events.add("playerExitColshape", colshape => {
  if (shape !== colshape || hospitalTime === null) return;
  const pos = _config.PRISON_HOSPITAL_RESPAWN_POS[Math.floor(Math.random() * _config.PRISON_HOSPITAL_RESPAWN_POS.length)];
  _user.user.teleport(pos.x, pos.y, pos.z, 0).then(() => {
    _user.user.notify("Ожидайте когда закончится лечение");
  });
});
_custom.CustomEvent.registerServer('prison:hospital:start', () => {
  _user.user.notify(`Вы попали в тюремный госпиталь, необходимо пройти курс лечения в течение ${_config.PRISON_HOSPITAL_TIME} минут`, 'success');
  exports.hospitalTime = hospitalTime = _config.PRISON_HOSPITAL_TIME * 60;
});
const interval = setInterval(() => {
  if (hospitalTime === null) return;
  if (hospitalTime - 1 <= 0) {
    exports.hospitalTime = hospitalTime = null;
    _user.user.notify(`Вы успешно прошли курс лечения`, 'success');
  } else {
    exports.hospitalTime = hospitalTime = hospitalTime - 1;
  }
}, 1000);
},{"../../../shared/prison/config":"eq3E","../custom.event":"py8h","../user":"ggMw"}],"dnLj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WASHING_POSITIONS = exports.TOILET_POSITIONS = exports.TASK_TYPES = exports.TASK_NAME = exports.TASKS_BLIP_POSITION = exports.SEWING_POSITIONS = exports.HAMMER_POSITIONS = exports.COOKING_POSITIONS = void 0;
var _minigame = require("../minigame");
const TASK_NAME = type => {
  if (type === _minigame.MINIGAME_TYPE.JAILHAMMER) return "Забить гвозди в мастерской";
  if (type === _minigame.MINIGAME_TYPE.JAILSEWING) return "Поработать за ткацким станком";
  if (type === _minigame.MINIGAME_TYPE.JAILWASHING) return "Заправить стирку";
  if (type === _minigame.MINIGAME_TYPE.JAILCOOKING) return "Приготовить еду для заключенных";
  if (type === _minigame.MINIGAME_TYPE.JAILTOILET) return "Почистить туалеты в мед. корпусе";
  return "";
};
exports.TASK_NAME = TASK_NAME;
const TASK_TYPES = exports.TASK_TYPES = [_minigame.MINIGAME_TYPE.JAILHAMMER, _minigame.MINIGAME_TYPE.JAILSEWING, _minigame.MINIGAME_TYPE.JAILWASHING, _minigame.MINIGAME_TYPE.JAILCOOKING, _minigame.MINIGAME_TYPE.JAILTOILET];
const TASKS_BLIP_POSITION = exports.TASKS_BLIP_POSITION = [new mp.Vector3(1755.96, 2477.74, 45.96), new mp.Vector3(1771.32, 2485.43, 45.96), new mp.Vector3(1746.21, 2472.31, 45.96), new mp.Vector3(1628.82, 2459.73, 45.97), new mp.Vector3(1596.99, 2489.60, 49.99)];
const SEWING_POSITIONS = exports.SEWING_POSITIONS = [new mp.Vector3(1774.95, 2490.89, 44.96), new mp.Vector3(1773.11, 2489.93, 44.96), new mp.Vector3(1771.16, 2488.73, 44.96), new mp.Vector3(1767.85, 2486.85, 44.96), new mp.Vector3(1765.91, 2485.73, 44.96), new mp.Vector3(1764.14, 2484.56, 44.96), new mp.Vector3(1765.46, 2482.09, 44.96), new mp.Vector3(1767.33, 2483.14, 44.96), new mp.Vector3(1769.27, 2484.27, 44.96), new mp.Vector3(1772.75, 2486.18, 44.96), new mp.Vector3(1774.39, 2487.27, 44.96), new mp.Vector3(1776.44, 2488.41, 44.96), new mp.Vector3(1778.11, 2485.51, 44.96), new mp.Vector3(1776.07, 2484.39, 44.96), new mp.Vector3(1774.28, 2483.24, 44.96), new mp.Vector3(1770.93, 2481.36, 44.96), new mp.Vector3(1769.00, 2480.31, 44.96), new mp.Vector3(1767.09, 2479.17, 44.96)];
const HAMMER_POSITIONS = exports.HAMMER_POSITIONS = [new mp.Vector3(1757.10, 2484.29, 44.96), new mp.Vector3(1759.18, 2480.80, 44.96), new mp.Vector3(1761.26, 2477.19, 44.96), new mp.Vector3(1763.31, 2473.58, 44.96), new mp.Vector3(1756.26, 2469.51, 44.96), new mp.Vector3(1754.08, 2473.05, 44.96), new mp.Vector3(1751.96, 2476.60, 44.96), new mp.Vector3(1749.99, 2480.26, 44.96)];
const WASHING_POSITIONS = exports.WASHING_POSITIONS = [new mp.Vector3(1746.68, 2463.89, 44.96), new mp.Vector3(1745.54, 2465.77, 44.96), new mp.Vector3(1744.53, 2467.70, 44.96), new mp.Vector3(1743.49, 2469.58, 44.96), new mp.Vector3(1742.41, 2471.47, 44.96), new mp.Vector3(1741.40, 2473.38, 44.96), new mp.Vector3(1740.36, 2475.22, 44.96), new mp.Vector3(1738.93, 2476.98, 44.96)];
const COOKING_POSITIONS = exports.COOKING_POSITIONS = [new mp.Vector3(1632.38, 2459.46, 44.97), new mp.Vector3(1639.16, 2467.42, 44.97), new mp.Vector3(1638.35, 2468.70, 44.97)];
const TOILET_POSITIONS = exports.TOILET_POSITIONS = [new mp.Vector3(1590.11, 2489.50, 48.99), new mp.Vector3(1592.60, 2492.39, 48.99), new mp.Vector3(1595.16, 2495.45, 48.99), new mp.Vector3(1597.53, 2498.38, 48.99), new mp.Vector3(1599.91, 2501.27, 48.99)];
},{"../minigame":"K6Qz"}],"PDkN":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _tasks = require("../../../shared/prison/tasks.config");
var _system = require("../system");
var _user = require("../user");
var _checkpoints = require("../checkpoints");
var _minigame = require("../../../shared/minigame");
var _minigame2 = require("../minigame");
var _blips = require("../blips");
let prisonTask = null;
let sHash = null;
_custom.CustomEvent.registerServer('prison:tasks:start', data => {
  sHash = data;
  const index = Math.floor(Math.random() * _tasks.TASK_TYPES.length);
  const type = _tasks.TASK_TYPES[index];
  _user.user.notify('Вы успешно взяли задания, направляйтесь на их выполнение', 'success');
  (0, _blips.createRouteBlip)('Тюремная работа', _tasks.TASKS_BLIP_POSITION[index], 28);
  prisonTask = {
    type: type,
    count: _system.system.getRandomInt(4, 20),
    completed: 0
  };
  _custom.CustomEvent.triggerCef('prison:task:update', prisonTask);
});
function gameComplete(type) {
  if (prisonTask.type !== type) return;
  prisonTask.completed += 1;
  _custom.CustomEvent.triggerCef('prison:task:update', prisonTask);
  if (prisonTask.count <= prisonTask.completed) {
    _custom.CustomEvent.callServer('prison:tasks:finish', prisonTask.count, sHash).then(res => {
      if (res === true) {
        (0, _blips.destroyRouteBlip)('Тюремная работа');
        prisonTask = null;
        _user.user.notify("Задания успешно выполнены, можете отправляться за новыми");
        _custom.CustomEvent.triggerCef('prison:task:update', null);
      }
    });
  }
}
_checkpoints.colshapes.new(_tasks.SEWING_POSITIONS, "Швейная", async () => {
  if (!prisonTask) return;
  if (prisonTask.type !== _minigame.MINIGAME_TYPE.JAILSEWING) return _user.user.notify("Вам недоступна данная работа", "error");
  const res = await (0, _minigame2.MinigamePlay)(_minigame.MINIGAME_TYPE.JAILSEWING);
  if (res) gameComplete(_minigame.MINIGAME_TYPE.JAILSEWING);
}, {
  color: [0, 0, 0, 0]
});
_checkpoints.colshapes.new(_tasks.HAMMER_POSITIONS, "Столярка", async () => {
  if (!prisonTask) return;
  if (prisonTask.type !== _minigame.MINIGAME_TYPE.JAILHAMMER) return _user.user.notify("Вам недоступна данная работа", "error");
  const res = await (0, _minigame2.MinigamePlay)(_minigame.MINIGAME_TYPE.JAILHAMMER);
  if (res) gameComplete(_minigame.MINIGAME_TYPE.JAILHAMMER);
}, {
  color: [0, 0, 0, 0]
});
_checkpoints.colshapes.new(_tasks.WASHING_POSITIONS, "Прачечная", async () => {
  if (!prisonTask) return;
  if (prisonTask.type !== _minigame.MINIGAME_TYPE.JAILWASHING) return _user.user.notify("Вам недоступна данная работа", "error");
  const res = await (0, _minigame2.MinigamePlay)(_minigame.MINIGAME_TYPE.JAILWASHING);
  if (res) gameComplete(_minigame.MINIGAME_TYPE.JAILWASHING);
}, {
  color: [0, 0, 0, 0]
});
_checkpoints.colshapes.new(_tasks.COOKING_POSITIONS, "Готовка", async () => {
  if (!prisonTask) return;
  if (prisonTask.type !== _minigame.MINIGAME_TYPE.JAILCOOKING) return _user.user.notify("Вам недоступна данная работа", "error");
  const res = await (0, _minigame2.MinigamePlay)(_minigame.MINIGAME_TYPE.JAILCOOKING);
  if (res) gameComplete(_minigame.MINIGAME_TYPE.JAILCOOKING);
}, {
  color: [0, 0, 0, 0]
});
_checkpoints.colshapes.new(_tasks.TOILET_POSITIONS, "Чистка унитазов", async () => {
  if (!prisonTask) return;
  if (prisonTask.type !== _minigame.MINIGAME_TYPE.JAILTOILET) return _user.user.notify("Вам недоступна данная работа", "error");
  const res = await (0, _minigame2.MinigamePlay)(_minigame.MINIGAME_TYPE.JAILTOILET);
  if (res) gameComplete(_minigame.MINIGAME_TYPE.JAILTOILET);
}, {
  color: [0, 0, 0, 0]
});
},{"../custom.event":"py8h","../../../shared/prison/tasks.config":"dnLj","../system":"pi2J","../user":"ggMw","../checkpoints":"XCJl","../../../shared/minigame":"K6Qz","../minigame":"KnNo","../blips":"vw4c"}],"x7xl":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _TextTimerBar = require("../bars/classes/TextTimerBar");
var _system = require("../system");
var _config = require("../../../shared/prison/config");
require("./hospital");
require("./tasks");
let prisonData = null;
let blockText = null;
let teleportTimer = 0;
let blockTeleport = false;
mp.markers.new(1, _config.PRISON_ENTER_MENU_COORDS, 1, {
  dimension: 0,
  color: [0, 255, 0, 255]
});
_custom.CustomEvent.registerServer('prison:sync', data => {
  prisonData = data;
  blockTeleport = true;
  setTimeout(() => {
    blockTeleport = false;
  }, 4000);
});
_custom.CustomEvent.registerServer('prison:sync:time', time => {
  if (prisonData.time - time <= 10) {
    prisonData.time = 10;
  } else {
    prisonData.time -= time;
  }
});
_custom.CustomEvent.registerServer('prison:clear', () => {
  prisonData = null;
  if (blockText && blockText.exists) blockText.destroy();
  blockText = null;
  _custom.CustomEvent.triggerCef('prison:task:update', null);
});
setInterval(() => {
  if (prisonData === null) return;
  prisonData.time -= 1;
  if (_system.system.distanceToPos(mp.players.local.position, _config.PRISON_CENTER_POSITION) > _config.PRISON_RADIUS && teleportTimer === 0 && blockTeleport === false) {
    teleportTimer = 1;
    return _custom.CustomEvent.triggerServer("prison:runaway", prisonData);
  } else if (teleportTimer > 0 && teleportTimer < 3) {
    teleportTimer += 1;
  } else if (teleportTimer >= 3) {
    teleportTimer = 0;
  }
  if (blockText && blockText.exists) {
    blockText.title = `Заключение в тюрьме ${prisonData.reason}${prisonData.adminName ? ` [${prisonData.adminName}]` : ""}`;
    blockText.text = _system.system.secondsToString(prisonData.time);
  } else {
    blockText = new _TextTimerBar.TextTimerBar(`Заключение в тюрьме ${prisonData.reason}${prisonData.adminName ? ` [${prisonData.adminName}]` : ""}`, _system.system.secondsToString(prisonData.time));
  }
  if (prisonData.time % 60 === 0) _custom.CustomEvent.triggerServer("prison:sync:time", prisonData.time);
}, 1000);
},{"../custom.event":"py8h","../bars/classes/TextTimerBar":"CjKg","../system":"pi2J","../../../shared/prison/config":"eq3E","./hospital":"Xv6A","./tasks":"PDkN"}],"cEEo":[function(require,module,exports) {
"use strict";

var _custom = require("../custom.event");
var _user = require("../user");
var _TextTimerBar = require("../bars/classes/TextTimerBar");
let loadTime = -1;
let timeBar;
let veh;
_custom.CustomEvent.registerServer('supplyWar:startLoading', vehId => {
  if (loadTime !== -1) return _user.user.notify("Погрузка уже начата");
  loadTime = 10;
  timeBar = new _TextTimerBar.TextTimerBar(`Грузим машину`, loadTime.toString());
  veh = vehId;
  _user.user.notify("Погрузка начата, ожидайте на месте", "info");
});
setInterval(() => {
  if (loadTime === -1) return;
  if (loadTime > 0) {
    loadTime -= 1;
    timeBar.text = loadTime.toString();
  }
  if (loadTime === 0) {
    loadTime = -1;
    timeBar.destroy();
    timeBar = null;
    mp.events.callRemote('supplyWar:finishLoading', veh);
    veh = null;
  }
}, 1000);
},{"../custom.event":"py8h","../user":"ggMw","../bars/classes/TextTimerBar":"CjKg"}],"Zifh":[function(require,module,exports) {
"use strict";

var _checkpoints = require("./checkpoints");
var _scaleform = require("./scaleform.mp");
var _character = require("../../shared/character");
let ped = null;
let scaleForm = null;
global.form = scaleForm;
const createScaleForm = () => {
  scaleForm = new _scaleform.ScaleformTextMp(new mp.Vector3(435.70, -997.76, 30.1), "Alex Ford\nLeader LSPD\n10.10.2021 - 10.01.2022", {
    rotation: {
      x: 0,
      y: 0,
      z: 220
    },
    type: "rotation"
  });
  scaleForm.enabled = true;
};
createScaleForm();
_checkpoints.colshapes.new(new mp.Vector3(435.85, -998.02, 31.19), null, null, {
  type: -1,
  radius: 50,
  onEnterHandler: player => {
    if (player.remoteId === mp.players.local.remoteId) {
      spawnFordPed();
    }
  },
  onExitHandler: player => {
    if (player.remoteId === mp.players.local.remoteId) {
      var _ped;
      (_ped = ped) === null || _ped === void 0 || _ped.destroy();
      ped = null;
    }
  }
});
const setDefaultCustomization = ped => {
  ped.setHeadBlendData(_character.defaultCharacterData['SHAPE_THRID_ID'], _character.defaultCharacterData['SHAPE_SECOND_ID'], 0, _character.defaultCharacterData['SKIN_THRID_ID'], _character.defaultCharacterData['SKIN_SECOND_ID'], 0, _character.defaultCharacterData['SHAPE_MIX'], _character.defaultCharacterData['SKIN_MIX'], 0, true);
  let features = _character.defaultCharacterData['FACE_SPECIFICATIONS'];
  if (features) {
    features.forEach((item, id) => {
      ped.setFaceFeature(id, item);
    });
  }
  ped.setComponentVariation(2, _character.defaultCharacterData['HAIR'], 0, 2);
  ped.setHeadOverlay(2, _character.defaultCharacterData['EYEBROWS'], _character.defaultCharacterData['EYEBROWS_OPACITY'], _character.defaultCharacterData['EYEBROWS_COLOR'], 0);
  ped.setHairColor(_character.defaultCharacterData['HAIR_COLOR'], _character.defaultCharacterData['HAIR_COLOR2']);
  ped.setEyeColor(_character.defaultCharacterData['EYE_COLOR']);
  ped.setHeadOverlay(9, _character.defaultCharacterData['OVERLAY9'], _character.defaultCharacterData['OVERLAY9_OPACITY'], _character.defaultCharacterData['OVERLAY9_COLOR'], 0);
  if (_character.defaultCharacterData['OVERLAY10'] != -1) ped.setHeadOverlay(10, _character.defaultCharacterData['OVERLAY10'], 1.0, _character.defaultCharacterData['OVERLAY10_COLOR'], 0);
  ped.setHeadOverlay(1, _character.defaultCharacterData['OVERLAY'], _character.defaultCharacterData['OVERLAY_OPACITY'], 61, 61);
  if (_character.defaultCharacterData['OVERLAY5'] != -1) ped.setHeadOverlay(5, _character.defaultCharacterData['OVERLAY5'], 1.0, _character.defaultCharacterData['OVERLAY5_COLOR'], 0);
  if (_character.defaultCharacterData['OVERLAY8'] != -1) ped.setHeadOverlay(8, _character.defaultCharacterData['OVERLAY8'], 1.0, _character.defaultCharacterData['OVERLAY8_COLOR'], 0);
  if (_character.defaultCharacterData['BLUSH']) {
    ped.setHeadOverlay(5, _character.defaultCharacterData['BLUSH'], _character.defaultCharacterData['BLUSH_OPACITY'] || 0.0, _character.defaultCharacterData['BLUSH_COLOR'] || 0, 0);
  }
};
if (_character.defaultCharacterData['LIPS']) {
  ped.setHeadOverlay(8, _character.defaultCharacterData['LIPS'], _character.defaultCharacterData['LIPS_OPACITY'] || 0.0, _character.defaultCharacterData['LIPS_COLOR'] || 0, 0);
}
const spawnFordPed = async () => {
  if (ped && mp.peds.exists(ped)) ped.destroy();
  ped = mp.peds.new(mp.game.joaat("mp_m_freemode_01"), new mp.Vector3(435.85, -998.02, 31.19), 45);
  while (!ped.doesExist()) await mp.game.waitAsync(2);
  setDefaultCustomization(ped);
  ped.setEyeColor(0);
  ped.setHeadOverlay(9, 0, 1, 0.10000000149011612, 0);
  ped.setComponentVariation(2, 21, 0, 2);
  ped.setHairColor(61, 61);
  ped.setHeadOverlay(1, 6, 1, 61, 61);
  ped.setComponentVariation(3, 30, 0, 2);
  ped.setComponentVariation(8, 58, 0, 2);
  ped.setComponentVariation(11, 447, 0, 2);
  ped.setComponentVariation(1, 0, 0, 2);
  ped.setComponentVariation(4, 28, 0, 2);
  ped.setComponentVariation(6, 10, 0, 2);
  ped.setComponentVariation(7, 128, 0, 2);
  ped.setComponentVariation(7, 128, 0, 2);
  ped.setPropIndex(0, 8, 0, true);
  ped.setPropIndex(1, 8, 0, true);
  ped.setPropIndex(2, 999, 0, true);
  ped.setPropIndex(6, 999, 0, true);
  ped.setPropIndex(7, 999, 0, true);
  ped.setHeadOverlayColor(1, 1, 61, 61);
  ped.setHeadOverlayColor(2, 1, 61, 61);
  while (!mp.game.streaming.hasAnimDictLoaded('switch@franklin@lamar_tagging_wall')) {
    mp.game.streaming.requestAnimDict('switch@franklin@lamar_tagging_wall');
    mp.game.wait(10);
  }
  ped.taskPlayAnim("switch@franklin@lamar_tagging_wall", "lamar_tagging_wall_loop_franklin", 1.0, 1, -1, 2, 0, false, false, false);
  mp.game.invoke('0xFFC24B988B938B38', ped.handle, "pose_aiming_1", 0);
};
},{"./checkpoints":"XCJl","./scaleform.mp":"p2OF","../../shared/character":"TaDG"}],"omRF":[function(require,module,exports) {
"use strict";

require("./user");
require("./controls");
require("./menu");
require("./admin");
require("./survival");
require("./gui");
require("./world");
require("./character.creator");
require("./inventory");
require("./checkpoints");
require("./blips");
require("./businesses");
require("./cloth");
require("./tattoo");
require("./mainmenu");
require("./hotkeys");
require("./vehicles");
require("./voice");
require("./anim");
require("./interact");
require("./navigation");
require("./scaleform.mp");
require("./jobs");
require("./jail");
require("./interactions");
require("./chest");
require("./house");
require("./dynamicBlip");
require("./vehicle.grab");
require("./vehicle.registration");
require("./license");
require("./attach");
require("./doors");
require("./peds");
require("./terminal");
require("./grab.zone");
require("./gpsTrack");
require("./race");
require("./fish");
require("./gr6");
require("./teleport.system");
require("./dance");
require("./bars");
require("./afk");
require("./rappel");
require("./fps");
require("./discord");
require("./quests");
require("./npc.dialog");
require("./signature");
require("./ginteract");
require("./accept");
require("./savezone");
require("./taxi");
require("./npc.customer");
require("./documents.pos");
require("./mafia.clean.wanted");
require("./dispatch");
require("./vehicle.sell");
require("./fingerpoint");
require("./island");
require("./boxgame");
require("./deathmatch");
require("./gangwar");
require("./wintask");
require("./family");
require("./vote");
require("./protection");
require("./construction");
require("./shooting");
require("./sync");
require("./police.radar");
require("./farm");
require("./task");
require("./npc.seller");
require("./crafting");
require("./casino/index");
require("./gpsMarkSync");
require("./job.dress");
require("./helicam");
require("./lods");
require("./hunting");
require("./events/index");
require("./musicPlayer");
require("./damageController");
require("./mining");
require("./family.bizwar");
require("./jobs/index");
require("./menus");
require("./families");
require("./market");
require("./farm/farmController");
require("./blackout");
require("./advancedNpc");
require("./advancedQuests");
require("./crosshair");
require("./specFxes");
require("./carry");
require("./autopilot");
require("./diving");
require("./snowWar");
require("./pets");
require("./battlePass");
require("./houses");
require("./duckWalk");
require("./islandBattle");
require("./smoking");
require("./fractions");
require("./prison");
require("./hitMarker");
require("./supplyWar");
require("./memorialStatue");
},{"./user":"ggMw","./controls":"yuOK","./menu":"Aiz7","./admin":"s4Xg","./survival":"nroP","./gui":"bk91","./world":"j6No","./character.creator":"X7UN","./inventory":"E5lg","./checkpoints":"XCJl","./blips":"vw4c","./businesses":"nphQ","./cloth":"Sp7p","./tattoo":"EG54","./mainmenu":"ciLG","./hotkeys":"OtV2","./vehicles":"J8pg","./voice":"WpQ0","./anim":"stJJ","./interact":"m19G","./navigation":"Wwxz","./scaleform.mp":"p2OF","./jobs":"un2p","./jail":"arTi","./interactions":"i0E8","./chest":"eVha","./house":"baXL","./dynamicBlip":"TK9Y","./vehicle.grab":"Aej0","./vehicle.registration":"rrVP","./license":"SVhP","./attach":"sXtZ","./doors":"H2nx","./peds":"ds7w","./terminal":"L1Tx","./grab.zone":"oAOB","./gpsTrack":"fUei","./race":"oS9n","./fish":"DueU","./gr6":"OnFn","./teleport.system":"UgKs","./dance":"gNQw","./bars":"ORIu","./afk":"X2Af","./rappel":"GXij","./fps":"JiGH","./discord":"MPk7","./quests":"W1Bu","./npc.dialog":"CWsZ","./signature":"zYqN","./ginteract":"SF2W","./accept":"RT6N","./savezone":"ehdN","./taxi":"G0I7","./npc.customer":"Ij8u","./documents.pos":"hsxS","./mafia.clean.wanted":"ywkW","./dispatch":"CTZz","./vehicle.sell":"He5v","./fingerpoint":"dnPV","./island":"ziAL","./boxgame":"y0tC","./deathmatch":"d354","./gangwar":"cDXP","./wintask":"yCG7","./family":"GI3U","./vote":"cgSZ","./protection":"Qh13","./construction":"Q1Tk","./shooting":"OVYI","./sync":"nW4K","./police.radar":"R94t","./farm":"buab","./task":"UOh7","./npc.seller":"rRcs","./crafting":"tmgr","./casino/index":"ydwT","./gpsMarkSync":"ZVj5","./job.dress":"TuAn","./helicam":"m5tX","./lods":"VwFo","./hunting":"wMFx","./events/index":"RqhX","./musicPlayer":"jMsm","./damageController":"RJXt","./mining":"OkNF","./family.bizwar":"X3nK","./jobs/index":"CrOp","./menus":"P1zH","./families":"JP2y","./market":"c25B","./farm/farmController":"Mftc","./blackout":"r8Xy","./advancedNpc":"M82h","./advancedQuests":"Y8OG","./crosshair":"feKp","./specFxes":"Nv2L","./carry":"QJy9","./autopilot":"IYHr","./diving":"fKzZ","./snowWar":"SZmx","./pets":"WzW6","./battlePass":"tIom","./houses":"J1du","./duckWalk":"mOW9","./islandBattle":"ZSz4","./smoking":"wxoF","./fractions":"ZnXR","./prison":"x7xl","./hitMarker":"WwQs","./supplyWar":"cEEo","./memorialStatue":"Zifh"}],"QCba":[function(require,module,exports) {
"use strict";

var _alertsSettings = require("../shared/alertsSettings");
require("./extensions");
require("./modules/");
mp.console.clear();
mp.console.logWarning('CLIENT START');
if (!mp.storage.data.alertsEnable) mp.storage.data.alertsEnable = {};
for (let key in _alertsSettings.ALERTS_SETTINGS) {
  mp.storage.data.alertsEnable[key] = typeof mp.storage.data.alertsEnable[key] === "boolean" ? mp.storage.data.alertsEnable[key] : true;
}
setInterval(() => {
  mp.storage.flush();
}, 60000);
},{"../shared/alertsSettings":"mVNW","./extensions":"DPuw","./modules/":"omRF"}]},{},["QCba"], null)
//# sourceMappingURL=/index.js.map